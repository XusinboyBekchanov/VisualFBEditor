From: <Saved by Blink>
Snapshot-Content-Location: https://www.scintilla.org/LexillaDoc.html
Subject: Lexilla Documentation
Date: Tue, 9 Apr 2024 11:43:28 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--0l4rQ4useVt6FN72GSeFI0eioqkrzPSnMLDoz4xq1s----"


------MultipartBoundary--0l4rQ4useVt6FN72GSeFI0eioqkrzPSnMLDoz4xq1s----
Content-Type: text/html
Content-ID: <frame-5AE6D638C6CB22A9A08635B303CF5982@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.scintilla.org/LexillaDoc.html

<!--?xml version=3D"1.0"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Tr=
ansitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><=
html xmlns=3D"http://www.w3.org/1999/xhtml"><head><meta http-equiv=3D"Conte=
nt-Type" content=3D"text/html; charset=3Dwindows-1252"><link rel=3D"stylesh=
eet" type=3D"text/css" href=3D"cid:css-a3707c98-a8e9-4e74-8318-bda964127968=
@mhtml.blink" />
    <meta name=3D"generator" content=3D"HTML Tidy for Windows (vers 1st Aug=
ust 2002), see www.w3.org">
    <meta name=3D"generator" content=3D"SciTE">
   =20

    <title>Lexilla Documentation</title>

   =20
  </head>

  <body bgcolor=3D"#FFFFFF" text=3D"#000000">
    <table bgcolor=3D"#000000" width=3D"100%" cellspacing=3D"0" cellpadding=
=3D"0" border=3D"0" summary=3D"Banner">
      <tbody><tr>
        <td><img src=3D"https://www.scintilla.org/SciTEIco.png" border=3D"3=
" height=3D"64" width=3D"64" alt=3D"Lexilla icon"></td>

        <td><a href=3D"https://www.scintilla.org/index.html" style=3D"color=
:white;text-decoration:none;font-size:200%">Lexilla</a></td>
      </tr>
    </tbody></table>

    <h1>Lexilla Documentation</h1>

    <p>Last edited 21 April 2021 NH</p>

    <h2>Introduction</h2>

    <p>Lexilla is a library containing lexers for use with Scintilla. It ca=
n be either a static library
    that is linked into an application or a shared library that is loaded a=
t runtime.</p>

    <p>Lexilla does not interact with the display so there is no need to co=
mpile it for a
    particular GUI toolkit. Therefore there can be a common library shared =
by applications using
    different GUI toolkits. In some circumstances there may need to be both=
 32-bit and 64-bit versions
    on one system to match different applications.</p>

    <p>Different extensions are commonly used for shared libraries: .so on =
Linux, .dylib on macOS, and .DLL on Windows.
     </p>

    <h2>The Lexilla protocol</h2>

    <p>A set of functions is defined by Lexilla for use by applications. Li=
braries that provide these functions
    can be used as a replacement for Lexilla or to add new lexers beyond th=
ose provided by Lexilla.</p>

    <p>The Lexilla protocol is a superset of the external lexer protocol an=
d defines these functions that may be exported from a shared library:<br>
    <code>int <span class=3D"name">GetLexerCount</span>()</code><br>
    <code>void <span class=3D"name">GetLexerName</span>(unsigned int index,=
 char *name, int buflength)</code><br>
    <code>LexerFactoryFunction <span class=3D"name">GetLexerFactory</span>(=
unsigned int index)</code><br>
    <code>ILexer5 *<span class=3D"name">CreateLexer</span>(const char *name=
)</code><br>
    <code>const char *<span class=3D"name">LexerNameFromID</span>(int ident=
ifier)</code><br>
    <code>const char *<span class=3D"name">GetLibraryPropertyNames</span>()=
</code><br>
    <code>void <span class=3D"name">SetLibraryProperty</span>(const char *k=
ey, const char *value)</code><br>
    <code>const char *<span class=3D"name">GetNameSpace</span>()</code>
    </p>

    <p><span class=3D"name">ILexer5</span> is defined by Scintilla in inclu=
de/ILexer.h as the interface provided by lexers which is called by Scintill=
a.
    Many clients do not actually need to call methods on <span class=3D"nam=
e">ILexer5</span> - they just take the return from CreateLexer and plug it
    straight into Scintilla so it can be treated as a machine pointer (void=
 *).
    </p>

    <p><span class=3D"name">LexerFactoryFunction</span> is defined as a fun=
ction that takes no arguments and returns an <span class=3D"name">ILexer5</=
span> *:
    <code>ILexer5 *(*LexerFactoryFunction)()</code> but this can be ignored=
 by most client code.
    </p>

    <p>The Lexilla protocol is a superset of the earlier external lexer pro=
tocol that defined the first 3 functions
    (<span class=3D"name">GetLexerCount</span>, <span class=3D"name">GetLex=
erName</span>, <span class=3D"name">GetLexerFactory</span>)
    so Lexilla can be loaded by applications that support that protocol.
    <span class=3D"name">GetLexerFactory</span> will rarely be used now as =
it is easier to call <span class=3D"name">CreateLexer</span>.
    </p>

    <p><span class=3D"name">CreateLexer</span> is the main call that will c=
reate a lexer for a particular language. The returned lexer can then be
    set as the current lexer in Scintilla by calling
    <a class=3D"seealso" href=3D"https://www.scintilla.org/ScintillaDoc.htm=
l#SCI_SETILEXER">SCI_SETILEXER</a>.</p>

    <p><span class=3D"name">LexerNameFromID</span> is an optional function =
that returns the name for a lexer identifier.
    <code>LexerNameFromID(SCLEX_CPP) &#8594; "cpp"</code>.
    This is a temporary affordance to make it easier to convert application=
s to using Lexilla.
    Applications should move to using lexer names instead of IDs.
    This function is deprecated, showing warnings with some compilers, and =
will be removed in a future version of Lexilla.</p>

    <p><span class=3D"name">SetLibraryProperty</span> and <span class=3D"na=
me">GetLibraryPropertyNames</span>
    are optional functions that can be
    defined if a library requires initialisation before calling other metho=
ds.
    For example, a lexer library that reads language definitions from XML f=
iles may require that the
    directory containing these files be set before a call to CreateLexer.
    <code>SetLibraryProperty("definitions.directory", "/usr/share/xeditor/l=
anguage-definitions")</code>
    If a library implements SetLibraryProperty then it may also provide a s=
et of valid property names with
    GetLibraryPropertyNames that can then be used by the application to def=
ine configuration file property
    names or user interface elements for options dialogs.</p>

    <p><span class=3D"name">GetNameSpace</span> is an optional function tha=
t returns a namespace string
    that can be used to disambiguate lexers with the same name from differe=
nt providers.
    If Lexilla and XMLLexers both provide a "cpp" lexer than a request for =
"cpp" may be satisfied by either but "xmllexers.cpp"
    unambiguously refers to the "cpp" lexer from XMLLexers.</p>

    <h2>Building Lexilla</h2>

    <p>Before using Lexilla it must be built or downloaded.</p>
    <p>Lexilla requires some headers from Scintilla to build and expects a =
directory named
    "scintilla" containing a copy of Scintilla 5+ to be a peer of the Lexil=
la top level
    directory conventionally called "lexilla".</p>

    <div>To build Lexilla, in the lexilla/src directory, run make (for gcc =
or clang)</div>
    <div class=3D"console">make</div>
    <div>or nmake for MSVC</div>
    <div class=3D"console">nmake -f lexilla.mak</div>
    <br>

    <div>After building Lexilla, its test suite can be run with make/nmake =
in the lexilla/test directory. For gcc or clang</div>
    <div class=3D"console">make test</div>
    or for MSVC<br>
    <div class=3D"console">nmake -f testlexers.mak test</div>
    <div>Each test case should show "<code>Lexing ...</code>" and errors wi=
ll display a diagnostic, commonly showing
    a difference between the actual and expected result:<br>
    <code>C:\u\hg\lexilla\test\examples\python\x.py:1: is different</code>
    </div>

    <p>There are also RunTest.sh / RunTest.bat scripts in the scripts direc=
tory to build Lexilla and then build and run the tests.
    These both use gcc/clang, not MSVC.</p>

    <p>There are Microsoft Visual C++ and Xcode projects that can be used t=
o build Lexilla.
    For Visual C++: src/Lexilla.vcxproj. For Xcode: src/Lexilla/Lexilla.xco=
deproj.
    There is also test/TestLexers.vcxproj to build the tests with Visual C+=
+.</p>

    <h2>Using Lexilla</h2>

    <p>Definitions for using Lexilla from C and C++ are included in lexilla=
/include/Lexilla.h.
    For C++, scintilla/include/ILexer.h should be included before Lexilla.h=
 as the
    <code>ILexer5</code> type is used.
    For C, ILexer.h should not be included as C does not understand it and =
from C,
    <code>void*</code> is used instead of <code>ILexer5*</code>.
    </p>

    <p>For many applications the main Lexilla operations are loading the Le=
xilla library, creating a
    lexer and using that lexer in Scintilla.
    Applications need to define the location (or locations) they expect
    to find Lexilla or libraries that support the Lexilla protocol.
    They also need to define how they request particular lexers, perhaps wi=
th a mapping from
    file extensions to lexer names.</p>

    <h3 id=3D"CheckLexilla">From C - CheckLexilla</h3>

    <p>An example C program for accessing Lexilla is provided in lexilla/ex=
amples/CheckLexilla.
    Build with <span class=3D"console">make</span> and run with <span class=
=3D"console">make check</span>.
    </p>

    <h3>From C++ - LexillaAccess</h3>

    <p>A C++ module, LexillaAccess.cxx / LexillaAccess.h is provided in lex=
illa/access.
    This can either be compiled into the application when it is sufficient
    or the source code can be copied into the application and customized wh=
en the application has additional requirements
    (such as checking code signatures).
    SciTE uses LexillaAccess.</p>

    <p>LexillaAccess supports loading multiple shared libraries implementin=
g the Lexilla protocol at one time.</p>

    <h3>From Qt</h3>

    <p>For Qt, use either LexillaAccess from above or Qt's QLibrary class. =
With 'Call' defined to call Scintilla APIs.<br>
    <code>
#if _WIN32<br>
&nbsp;&nbsp;&nbsp;&nbsp;typedef void *(__stdcall *CreateLexerFn)(const char=
 *name);<br>
#else<br>
&nbsp;&nbsp;&nbsp;&nbsp;typedef void *(*CreateLexerFn)(const char *name);<b=
r>
#endif<br>
&nbsp;&nbsp;&nbsp;&nbsp;QFunctionPointer fn =3D QLibrary::resolve("lexilla"=
, "CreateLexer");<br>
&nbsp;&nbsp;&nbsp;&nbsp;void *lexCpp =3D ((CreateLexerFn)fn)("cpp");<br>
&nbsp;&nbsp;&nbsp;&nbsp;Call(SCI_SETILEXER, 0, (sptr_t)(void *)lexCpp);<br>
    </code></p>

    <p>Applications may discover the set of lexers provided by a library by=
 first calling
    <span class=3D"name">GetLexerCount</span> to find the number of lexers =
implemented in the library then looping over calling
    <span class=3D"name">GetLexerName</span> with integers 0 to <code>GetLe=
xerCount()-1</code>.</p>

    <p>Applications may set properties on a library by calling <span class=
=3D"name">SetLibraryProperty</span> if provided.
    This may be needed for initialisation so should before calling <span cl=
ass=3D"name">GetLexerCount</span> or <span class=3D"name">CreateLexer</span=
>.
    A set of property names may be available from <span class=3D"name">GetL=
ibraryPropertyNames</span> if provided.
    It returns a string pointer where the string contains a list of propert=
y names separated by '\n'.
    It is up to applications to define how properties are defined and persi=
sted in its user interface
    and configuration files.</p>

    <h2>Modifying or adding lexers</h2>

    <p>Lexilla can be modified or a new library created that can be used to=
 replace or augment Lexilla.</p>

    <p>Lexer libraries that provide the same functions as Lexilla may provi=
de lexers for use by Scintilla,
    augmenting or replacing those provided by Lexilla.
    To allow initialisation of lexer libraries, a <code>SetLibraryProperty(=
const char *key, const char *value)</code>
    may optionally be implemented. For example, a lexer library that uses X=
ML based lexer definitions may
    be provided with a directory to search for such definitions.
    Lexer libraries should ignore any properties that they do not understan=
d.
    The set of properties supported by a lexer library is specified as a '\=
n' separated list of property names by
    an optional <code>const char *GetLibraryPropertyNames()</code> function=
.
    </p>

    <p>Lexilla and its contained lexers can be tested with the TestLexers p=
rogram in lexilla/test.
    Read lexilla/test/README for information on building and using TestLexe=
rs.</p>

    <p>An example of a simple lexer housed in a shared library that is comp=
atible with the
    Lexilla protocol can be found in lexilla/examples/SimpleLexer. It is im=
plemented in C++.
    Build with <span class=3D"console">make</span> and check by running <a =
href=3D"https://www.scintilla.org/LexillaDoc.html#CheckLexilla">CheckLexill=
a</a> against it with
    <span class=3D"console">make check</span>.
    </p>

 =20


</body></html>
------MultipartBoundary--0l4rQ4useVt6FN72GSeFI0eioqkrzPSnMLDoz4xq1s----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-a3707c98-a8e9-4e74-8318-bda964127968@mhtml.blink

@charset "windows-1252";

code { font-weight: bold; font-family: Menlo, Consolas, "Bitstream Vera San=
s Mono", "Courier New", monospace; }

a:visited { color: blue; }

a:hover { text-decoration: underline !important; }

a.message { text-decoration: none; font-weight: bold; font-family: Menlo, C=
onsolas, "Bitstream Vera Sans Mono", "Courier New", monospace; }

a.seealso { text-decoration: none; font-weight: bold; font-family: Menlo, C=
onsolas, "Bitstream Vera Sans Mono", "Courier New", monospace; }

a.toc { text-decoration: none; }

a.jump { text-decoration: none; }

li.message { text-decoration: none; font-weight: bold; font-family: Menlo, =
Consolas, "Bitstream Vera Sans Mono", "Courier New", monospace; }

h2 { background: rgb(224, 234, 255); }

table { border: 0px; border-collapse: collapse; }

div.console { font-family: Menlo, Consolas, "Bitstream Vera Sans Mono", "Co=
urier New", monospace; color: rgb(0, 128, 0); font-weight: bold; background=
: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3=
em; padding: 0.3em 0.6em; }

span.console { font-family: Menlo, Consolas, "Bitstream Vera Sans Mono", "C=
ourier New", monospace; color: rgb(0, 128, 0); font-weight: bold; backgroun=
d: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.1em =
0em; padding: 0.1em 0.3em; }

.name { color: rgb(176, 128, 0); }
------MultipartBoundary--0l4rQ4useVt6FN72GSeFI0eioqkrzPSnMLDoz4xq1s----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://www.scintilla.org/SciTEIco.png

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
ihARJbO1TwAAAABJRU5ErkJggg==

------MultipartBoundary--0l4rQ4useVt6FN72GSeFI0eioqkrzPSnMLDoz4xq1s------

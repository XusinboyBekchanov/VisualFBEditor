
-------------------------------------------------------- KeyGTK3PgAbs ----

Abs   絕對值
  
計算數字的絕對值

語法
Declare Function Abs ( ByVal number As Integer ) As Integer
Declare Function Abs ( ByVal number As UInteger ) As UInteger
Declare Function Abs ( ByVal number As Double ) As Double

用法
result = Abs( number )

參數
number
值要找到絕對值。

返回值
的絕對值。number

描述
數字的絕對值是其正量級。如果某個數字為負數，則其值將被否定，並返回正結果。例如，兩者都返回 。必需的參數可以是任何有效的數值運算式。
無符號數位將被視為有符號，?


-------------------------------------------------------- KeyGTK3PgAbstract ----

Abstract   抽象方法
  
聲明抽象方法

語法
Type typename Extends base_typename
Declare Abstract Sub|Function|Property|Operator ...
End Type

描述
Abstract是 的一種特殊形式。不同之處在於抽象方法沒有主體，而只有聲明。從本質上講，這允許聲明一個介面，該介面可以由各種派生類型實現。
為了調用抽象方法，它必須已被派生資料類型重寫和實


-------------------------------------------------------- KeyGTK3PgAccess ----

Access   訪問權
  
用於指定所請求特權的語句子句Open

語法
Open filename for Binary Access {Read | Write | Read Write} as [#]filenum

用法
open filename for binary Access Read as #filenum
open filename for binary Access Write as #filenum
open filename for binary Access Read Write as #filenum

參數
Read
僅以讀取許可權打開文件。
Write
僅以寫入許可權打開文件。
Read Write
使用讀取和寫入許可權打開檔。

描述
Acces


-------------------------------------------------------- KeyGTK3PgAcos ----

Acos   反余弦
  
查找角度的反余弦

語法
Declare Function Acos ( ByVal number As Double ) As Double

用法
result = Acos( number )

參數
number
範圍為 [-1..1] 的余弦值。

返回值
的反余弦，以弧度為單位，在 [0..Pi] 範圍內。number

描述
Acos將參數的反余弦作為 0 範圍內的 a 返回到 Pi。反余弦是函數


-------------------------------------------------------- KeyGTK3PgAddGfx ----

Add   添加
  
圖形語句的參數，該語句選擇加法作為 blliting 方法Put

語法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Add[ ,multiplier ]

參數
Add
必填。
multiplier
介於 0 和 255 之間的可選值。源圖元在添加之前會被預乘。如果省略，此值默認為 255。(multiplier / 256)

描述
Add選擇加法作為刪除圖像緩衝區的方法。對於每個源圖元和目標圖元，將每個相應分量的值相加以生成結果。
加法是飽和的 - 即如果兩個值的?


-------------------------------------------------------- KeyGTK3PgAlias ----

Alias (Name)   別名
  
提供備用內部名稱的 and 語句的子句。SubFunction

語法
[Declare] { Sub | Function } usablename Alias "alternatename" (...)

用法
declare sub usablename Alias "alternatename" ( ... )
或
declare function usablename Alias "alternatename" ( ... )
或
sub usablename Alias "alternatename" ( ... )
...
end sub
或
function usablename Alias "alternatename" ( ... )
...
end function
或
type typename Alias "alternatename" ( ... )
...
end type

描述
Alias為過程提供備用名稱。此備用名稱不能在程式中用於調用該過程，但在使用其他語言編寫的代碼進行連結時，連結器可以看到此備用名稱（如果函數不是私有的）。
通常用於用其他語?


-------------------------------------------------------- KeyGTK3PgAliasModifier ----

Alias (Modifier)   別名
  
修改公共符號的資料類型名稱修飾（修飾）

語法
... As [ Const ] datatype alias "modifier" [ Const [ Ptr ... ] ]

用法
Dim variable As datatype alias "modifier"
Type name As datatype alias "modifier"
Declare Sub name ( param As datatype alias "modifier", ... )
Declare Function name ( param As datatype alias "modifier", ... ) As datatype alias "modifier"

參數
datatype
要修改的標準資料類型或用戶定義的資料類型
modifier
支持的修飾符之一，如下面的“說明”部分所述
描述
Alias "modifier"，當在資料類型之後指定時，會為資料類型提供另一種含義，這對於與 FreeBASIC 以外的語言進行連結時可能需要。
公共


-------------------------------------------------------- KeyGTK3PgAllocate ----

Allocate   分配記憶體
  
從免費存儲區分配區塊

語法
Declare Function Allocate cdecl ( ByVal count As UInteger ) As Any Ptr

用法
result = Allocate( count )

參數
count
要分配的區塊的大小（以位元組為單位）。

返回值
如果成功，則返回已分配記憶體的起始位址。否則，如果無法分配請求的塊大小，或者如果 ，則返回空指針 （）。count < 00

描述
嘗試從免費存儲（堆）中分配或保留位元組數。新分配的記憶體未初始化。
由於新分配的記憶體的初始值未指定，因此?


-------------------------------------------------------- KeyGTK3PgAlphaGfx ----

Alpha   a通道
  
圖形語句的參數，該語句選擇 alpha 混合作為方法Put

語法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Alpha
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Alpha, alphaval

參數
Alpha
必填。
alphaval
範圍 [0..255] 中的可選 alpha 參數。覆蓋單個圖元中的 Alpha 值。

描述
Alpha選擇 Alpha 混合作為調色圖像的方法。如果指定了該參數，它將覆蓋每個圖元的 alpha 值，並且蒙版顏色（洋紅色）將被視為透明。這適用於 15、16、24 或 


-------------------------------------------------------- KeyGTK3PgAndGfx ----

And   和
  
圖形語句的參數，該語句使用按位作為 blitting 方法PutAnd

語法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], And

參數
And
必填。

描述
該方法使用按位元函數將每個源圖元與相應的目標圖元組合在一起。這樣做的結果是輸出為目標圖元。
此方法適用於所有圖形模式。沒有遮罩顏色，儘管設置了所有位的顏色值（對於 8 位?


-------------------------------------------------------- KeyGTK3PgAny ----

Any   任意
  
該關鍵字以各種方式用作類型或值的預留位置。Any

語法
Dim identifier As Any Pointer|Ptr
orororororor
Declare Sub|Function identifier ( ByRef identifier As Any [ , ... ] )

Dim identifier(Any [, Any...]) As DataType

[ Declare ] { Sub | Function } proc_name ( param(Any [, Any...]) As DataType  )

Dim identifier As DataType = Any

New DataType ( Any )

New(Address) DataType [count] { Any }

InStr|InStrRev ( string, Any substring )

描述
指針：
稱為 （或 “”） 的特殊指標類型允許指向任何變數類型。如果將其轉換為 ，則可以對其進行索引或取消引用，以訪問作為 的實例訪問記憶體。允許在 上使用指針算術，並將其視為 


-------------------------------------------------------- KeyGTK3PgAppend ----

Append   追加
  
指定要為追加模式打開的文字檔

語法
Open filename for Append [Encoding encoding_type] [Lock lock_type] as [#]filenum 

參數
filename
要打開以進行追加的檔案名
encoding_type
指示檔的編碼類型
lock_type
鎖定以在檔打開時使用
filenum
要與打開的檔關聯的未使用的檔編號

描述
用於打開文字檔進行寫入的檔模式。
此模式用於向現有檔添加文本，或將逗號分隔的值與 。
文字檔不能在FreeBASIC中同時讀


-------------------------------------------------------- KeyGTK3PgArrayLen ----

Arraylen
  
提供給定陣列名稱稱的陣列的長度。

語法
Declare Function ArrayLen ( arrayname() As Const Any ) As UInteger

用法
#include once "fbc-int/array.bi"
using FB
...
result = ArrayLen(arrayname())

參數
arrayname
返回其長度的陣列的名稱。

描述
返回 由


-------------------------------------------------------- KeyGTK3PgArraySize ----

Arraysize
  
提供給定陣列名稱稱的陣列的大小。

語法
Declare Function ArraySize ( arrayname() As Const Any ) As UInteger

用法
#include once "fbc-int/array.bi"
using FB
...
result = ArraySize(arrayname())

參數
arrayname
返回其大小的陣列的名稱。

描述
返回由 （陣列元素的?


-------------------------------------------------------- KeyGTK3PgAs ----

As   為
  
指定資料類型的聲明的一部分，或指定檔案控制代碼的 Open 語句的一部分。

語法
symbolname As datatype

Open ... As #filenumber
Type ... As datatype

描述
As用於聲明變數、欄位或參數的類型，也用於在語句中


-------------------------------------------------------- KeyGTK3PgAsc ----

Asc   字元取碼值
  
返回字元的相應 ASCII 或 Unicode 整數表示形式。

語法
Declare Function Asc ( ByRef str As Const String, ByVal position As Integer = 1 ) As ULong
Declare Function Asc ( ByVal str As Const ZString Ptr, ByVal position As Integer = 1 ) As ULong
Declare Function Asc ( ByVal str As Const WString Ptr, ByVal position As Integer = 1 ) As ULong

用法
result = Asc( str [, position ] )

參數
str
源字串。
position
字元字串中的位置。

返回值
存儲在 中的原始字元值。
如果兩者都可以在編譯時計算（如 或 或 ...），則在結果中返回值，否則在結果中返回。positionstrstrpositionAsc("a")Asc(chr(97))Asc("abc", 2)UIntegerULong

描述
如果 是 a 或 a ，則返回該處的值。這將是一個 7 位 ASCII 代碼，甚至是某些內碼表中的 8 位元字元值，具體取?


-------------------------------------------------------- KeyGTK3PgAsin ----

Asin   反正弦
  
查找數字的反正弦

語法
Declare Function Asin ( ByVal number As Double ) As Double

用法
result = Asin( number )

參數
number
範圍為 [-1..1] 的正弦值。

返回值
的弧正弦（以弧度為單位），範圍為 [-Pi/2..Pi/2]。number

描述
Asin將參數的反正弦值作為 -Pi/2 到 Pi/2 範圍內的 a 返回。反正弦是函?


-------------------------------------------------------- KeyGTK3PgAsm ----

Asm   彙編
  
允許使用特定於體系結構的指令的代碼塊。

語法
Asm
architecture-dependent instructions
End Asm

或

Asm architecture-dependent instructions

描述
該塊用於在程式中插入特定的機器代碼指令，以便執行無法使用語言功能執行的操作，或手動優化性能敏感的代碼部分。
當前的 FreeBASIC 編譯器目前只為基於英特爾 80x86 的機器生成代?


-------------------------------------------------------- KeyGTK3PgAssert ----

Assert   中斷執行
  
調試在運算式計算為 （false） 時停止程式執行的巨集。0

語法
#define Assert(expression) If (expression) = 0 Then : fb_Assert( __FILE__, __LINE__, __FUNCTION__, #expression ) : End If

用法
Assert( expression )

參數
expression
任何有效的條件/數值運算式。如果計算結果為（即“false”），則停止執行。expression0

描述
該宏旨在用於調試，並且僅當 或 -eassertfbcexpression0-g 未傳遞給 fbc、該宏不生成任何代碼且不起作用時才有效。
注意：如果在程式位於?


-------------------------------------------------------- KeyGTK3PgAssertwarn ----

AssertWarn   調試警告
  
調試在運算式的計算結果為 0 時列印警告的宏。

語法
#define AssertWarn(expression) If (expression) = 0 Then : fb_AssertWarn( __FILE__, __LINE__, __FUNCTION__, #expression ) : End If

用法
AssertWarn( expression )

參數
expression
任何有效的運算式。如果計算結果為 ，則會向 stderr （控制台） 列印一條警告消息。expression0

描述
該宏旨在用於調試，並且僅當在 FBC 命令列中選擇了該選項時才有效。在這種情況下，如果計算結果為


-------------------------------------------------------- KeyGTK3PgAtan2 ----

Atan2   反正切2
  
返回比率的反正切值

語法
Declare Function Atan2 ( ByVal y As Double, ByVal x As Double ) As Double

用法
result = ATan2( y, x )

參數
y
垂直分量的比率。
x
比率的水準分量。

返回值
切線為的角度，以弧度為單位，在 [-Pi..圓周率]。y/x

描述
ATan2返回比率的反正切值，作為 -Pi 到 Pi 範圍內的?


-------------------------------------------------------- KeyGTK3PgAtn ----

Atn   反正切
  
返回數字的反正切值

語法
Declare Function Atn ( ByVal number As Double ) As Double

用法
result = Atn( number )

參數
number
數字。

返回值
角度（以弧度為單位，其切線為 ）範圍為 [-Pi/2..Pi/2]。number

描述
Atn將參數的反正切值作為 -Pi/2 到 Pi/2 範圍內的 a 返回。反正切是函數


-------------------------------------------------------- KeyGTK3PgBase ----

Base (Member Access)   基類
  
提供對 非靜態方法中的基類型成員的顯式訪問Type

語法
Base.member
Base [ .Base ... ] .member

描述
Base提供了一種在使用者定義類型的非靜態方法的上下文中顯式訪問特定基類型的成員的方法，這些方法使用 派生自另一種類型。
通過重複使用，如 在 中，可以訪問任何所需的基類型，以防


-------------------------------------------------------- KeyGTK3PgBaseInit ----

Base (Initializer)   基類
  
為派生的 Udt 構造函數中的基本 UDT 指定初始值設定項

語法
Base ( constructor-parameters... )
or:
Base ( UDT-initializers... )

描述
初始值設定項可用於派生 UDT 的構造函數的頂部。它允許指定顯式構造函式呼叫或用於初始化基物件的 UDT 初始值設定項。它將替換隱式默認初始化，並且必須出現在使用它的構造函數中的?


-------------------------------------------------------- KeyGTK3PgBeep ----

Beep   響鈴
  
發出蜂鳴音。

語法
Declare Sub Beep ( )

用法
Beep

描述
Beep告訴系統發出蜂鳴聲。請注意，這可能在某些平臺上不起作用。由於此命令不可靠，並且無法指定頻率和持續時間，因此您可能希望避免使用它，以支?


-------------------------------------------------------- KeyGTK3PgBin ----

Bin   二進位
  
返回整數的二進位（基數為 2）字串表示形式

語法
Declare Function Bin ( ByVal number As UByte ) As String
Declare Function Bin ( ByVal number As UShort ) As String
Declare Function Bin ( ByVal number As ULong ) As String
Declare Function Bin ( ByVal number As ULongInt ) As String
Declare Function Bin ( ByVal number As Const Any Ptr ) As String

Declare Function Bin ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

用法
result = Bin[$]( number [, digits ] )

參數
number
計算為數位的數位或運算式。浮點數將轉換為 .LongInt
digits
返回的字串中所需的位元數。

返回值
包含 的無符號二進位表示形式的字串。number

描述
返回一個字串，該字串表示整數的無符號二進位值。二進位數字字的範圍從 0 到 1。
如果指定 > 0，則結果字串將恰?


-------------------------------------------------------- KeyGTK3PgBinary ----

Binary   二進位流
  
指定要為二進位模式打開的檔或設備

語法
Open filename for Binary [Access access_type] [Lock lock_type] as [#]filenum 

參數
filename
要打開的檔案名
access_type
指示檔是可以從中讀取、寫入檔還是同時讀取到兩者
lock_type
鎖定以在檔打開時使用
filenum
要與打開的檔關聯的未使用的檔編號

描述
打開檔或設備，用於以自由格式讀取和/或寫入檔中的二進位資料。
如果該檔不存在，則將創建一個新檔。文件


-------------------------------------------------------- KeyGTK3PgBit ----

Bit   位
  
獲取整數值中單個位元的狀態。

語法
#define Bit( value, bit_number ) (((value) And (Cast(TypeOf(value), 1) Shl (bit_number))) <> 0)

用法
result = Bit( value, bit_number )

參數
value
整數值。
bit_number
位元的索引。

返回值
返回一個值 if 如果設置了該位，或者如果該位已清除。Integer-10

描述
此巨集擴展為一個整數值，該值指示 指定的位元是否在整數 中設置。行為為“”。
的有效值範圍取決於 '' 的大小（以位元為單位），即 ''（從最低位開始）?


-------------------------------------------------------- KeyGTK3PgBitreset ----

BitReset   位重置
  
從複製的整數中獲取清除指定位元的值。

語法
#define BitReset( value, bit_number ) ((value) And Not (Cast(TypeOf(Value), 1) Shl (bit_number)))

用法
result = BitReset( value, bit_number )

參數
value
整數值。
bit_number
要清除的位元的索引。

返回值
返回已清除指定位元的整數值。

描述
此巨集擴展為已清除指定的整數（to off 或 ''）的副本。行為為“”。
要清除變數中的指定位元，可以使用以下賦值： 
的有效值範圍取決於 '' 的大小（?


-------------------------------------------------------- KeyGTK3PgBitset ----

BitSet   位元整數值
  
從複製的整數中獲取具有指定位元集的值。

語法
#define BitSet( value, bit_number ) ((value) Or (Cast(TypeOf(Value), 1) Shl (bit_number)))

用法
result = BitSet( value, bit_number )

參數
value
整數值。
bit_number
要設置的位元的索引。

返回值
返回設置了指定位元的整數值。

描述
此宏擴展為具有指定集（to on 或 ''）的整數的副本。行為為“”。
要在變數中設置指定的位元，可以使用以下賦值： 
的值的有效範圍取決於 '' 的大


-------------------------------------------------------- KeyGTK3PgBload ----

BLoad   點陣圖載入
  
從使用 創建的檔或相容的 BMP 映射檔中載入任意資料。BSave

語法
Declare Function BLoad ( ByRef filename As Const String, ByVal dest As Any Ptr = 0, ByVal pal As Any Ptr = 0 ) As Long

用法
result = BLoad( filename [, [ dest ] [, pal ] ] )

參數
filename
要從中載入圖像的檔的名稱;可以包含檔路徑
dest
要將圖像載入到的記憶體位置，或 null （） 將圖像複製到當前圖形螢幕工作頁面0
pal
要將調色板載入到的記憶體位置，或 null （） 更改當前圖形螢幕調色板（如果它使用0

返回值
如果成功，則返回零 （），或返回非零錯誤代碼以指示失敗。（引發執行階段錯誤）0

描述
BLoad可用於從使用 創建的檔中加?


-------------------------------------------------------- KeyGTK3PgBoolean ----

Boolean   邏輯型
  
標準資料類型

語法
Dim variable As Boolean

描述
布林資料類型。可以保存的值或
初始化時的預設值是
 關於定義布林資料類型的注釋：TrueFalseFalse
- 理想情況下，布林資料類型的定義是它包含 True 或 False 的值，僅此而已。然而，要使這個概


-------------------------------------------------------- KeyGTK3PgBsave ----

BSave   點陣圖保存
  
將任意資料和調色板資訊的陣列保存到磁片上的檔中

語法
Declare Function BSave ( ByRef filename As Const String, ByVal source As Any Ptr, ByVal size As ULong = 0, ByVal pal As Any Ptr = 0, ByVal bitsperpixel As Long = 0 ) As Long

用法
result = BSave( filename, source [,[ size ][,{ pal | pal, bitsperpixel }]] )

參數
filename
要創建的用於存儲圖元和調色板資料的檔的名稱。
source
要存儲的資料的位址，或 null （） 用於存儲當前螢幕工作頁面中的圖元資料。0
size
可選，要存儲的資料的總位元組數。除非輸出是 BMP 檔，否則需要此值。
pal
可選，包含 256 種顏色的緩衝區的位址，或當前螢幕調色板的空 （）。Palette0
bitsperpixel
可選，輸出 BMP 圖像請求的位元深度。如果指定，則還必須指定（至少為 null （） 值），否則將獲得錯誤。bitsperpixelpal0

返回值
如果成功，則返回零 （），或返回非零錯誤代碼以指?


-------------------------------------------------------- KeyGTK3PgByref ----

Byref (Parameters)   傳址
  
通過引用顯式傳遞參數的聲明說明符

語法
ByRef param As datatype

用法
[ Declare ] { Sub | Function } proc_name ( ByRef param As datatype  )

描述
通過引用（即變數的位址）將變數傳遞給子常式或函數。當變數通過引用傳遞時，目標子常式或函數可以更改變數的內容。
在 -lang qb 和 -lang fblite 方言中，是默認參數傳遞約定，除非?


-------------------------------------------------------- KeyGTK3PgByrefFunction ----

Byref (Function Results)   傳址
  
指定通過引用返回函數結果

語法
Function name ( parameter-list ) ByRef As datatype

描述
使函數結果按引用而不是按值返回。返回的函數將返回變數的位址，而不是像按值返回時那樣進行複製。這允許函數的調用方修改函數結果指向的變數。
如果未指定，則預設按值返回函數結果。
具?


-------------------------------------------------------- KeyGTK3PgByrefVariables ----

Byref (Variables)   傳址
  
聲明引用

語法
(Dim | Static) [Shared] ByRef name1 As DataType = variable1 [, ByRef name2 As DataType = variable2, ...]
或
(Dim | Static) [Shared] ByRef As DataType name1 = variable1 [, name2 = variable2, ...]
或
[Static] Var [Shared] ByRef name1 = variable1 [, ByRef name2 = variable2, ...]

參數
name
引用名稱
variable
要引用的變數名稱

描述
聲明對變數的引用（按名稱）。
引用是一種實體，用於訪問位於記憶體中的資料。引用不是資料本身，而只是有關其位置的資訊。可以將引用視為隱式取消引用的指標。在許多情況下，它可以?


-------------------------------------------------------- KeyGTK3PgByte ----

Byte   位元組
  
標準資料類型：8 位簽名

語法
Dim variable As Byte

描述
8 位元有符號整數資料類型


-------------------------------------------------------- KeyGTK3PgByval ----

ByVal   傳值
  
聲明說明符，用於按值顯式傳遞參數

語法
ByVal param As datatype

用法
[ Declare ] { Sub | Function } proc_name ( ByVal param As datatype  )

描述
ByVal在聲明語句的參數清單中，導致變數的副本通過其值傳遞給過程（例如，sub 或函數）。
這意味著，如果傳遞了變數 x 的值，則原始變數 x 將不會以任何方式進行修改;但是，如果傳遞?


-------------------------------------------------------- KeyGTK3PgCall ----

Call   調用
  
調用子常式的語句

語法
Call procname ([parameter list])

描述
調用 或 。
此關鍵字是 BASIC 早期方言的保留，主要已棄用。
在 -lang qb 中，它可用於在聲明之前在代碼中調用 s。該函數將隱式為 'd，並傳遞任何參數。
注意?


-------------------------------------------------------- KeyGTK3PgCallocate ----

CAllocate   記憶體分配初始化
  
為自由存儲中一定數量的元素分配記憶體並清除內容

語法
Declare Function CAllocate cdecl ( ByVal num_elements As UInteger, ByVal size As UInteger = 1 ) As Any Ptr

用法
result = CAllocate( num_elements [, size ] )

參數
num_elements
要為其分配記憶體的元素數。
size
每個元素的大小（以位元組為單位）。

返回值
如果成功，則返回已分配記憶體的起始位址。否則，將返回空指針 （）。0

描述
CAllocate用零初始化分配的記憶體。
因此，也可以直接


-------------------------------------------------------- KeyGTK3PgCase ----
Case   條
Description



-------------------------------------------------------- KeyGTK3PgCast ----

Cast   轉換
  
將運算式轉換為指定的資料類型

語法
Cast( datatype, expression )

參數
datatype 
內置資料類型（標準類型）
expression 
另一個內置資料類型的變數

描述
轉換為其他 .當未知時以及在轉換為類型別名時，在宏中使用非常有用。
這是轉換運算子的一種通用形式，例如 或 。
用途更廣，因為它可以用於具有內置的內置類?


-------------------------------------------------------- KeyGTK3PgCbool ----

CBool
  
將數位或字串運算式轉換為布林值 （Boolean)

語法
Declare Function CBool ( ByVal expression As datatype ) As Boolean

Type typename
Declare Operator Cast ( ) As Boolean
End Type

用法
result = CBool( numeric expression )
result = CBool( string expression )
result = CBool( user defined type )

參數
expression
要轉換為值的數位、字串或使用者定義類型Boolean
datatype
任何數位、字串或使用者定義的類型
typename
用戶定義的類型

返回值
值。Boolean

描述
該函數將零值轉換為 ，並將非零值轉換為 。
該名稱?


-------------------------------------------------------- KeyGTK3PgCbyte ----

CByte   轉位元組
  
將數位或字串運算式轉換為 。Byte

語法
Declare Function CByte ( ByVal expression As datatype ) As Byte

Type typename
Declare Operator Cast ( ) As Byte
End Type

用法
result = CByte( numeric expression )
result = CByte( string expression )
result = CByte( user defined type )

參數
expression
要轉換為值的數位、字串或指標運算式。Byte
datatype
任何數值、字串或指標資料類型。
typename
用戶定義的類型。

返回值
值。Byte

描述
該函數舍入小數部分並返回 8 位值。該函數不?


-------------------------------------------------------- KeyGTK3PgCdbl ----

CDbl   轉雙精型
  
將數位或字串運算式轉換為精確浮點Double

語法
Declare Function CDbl ( ByVal expression As datatype ) As Double

Type typename
Declare Operator Cast ( ) As Double
End Type

用法
result = CDbl( numeric expression )
result = CDbl( string expression )
result = CDbl( user defined type )

參數
expression
要轉換為值的數位、字串或指標運算式Double
datatype
任何數值、字串或指標資料類型
typename
用戶定義的類型

返回值
精度值。Double

描述
該函數返回一個 64 位值。該函數不檢查溢出，因此請?


-------------------------------------------------------- KeyGTK3PgCdecl ----

cdecl   cdecl
  
在過程聲明中指定 cdecl 樣式的調用約定

語法
Sub name cdecl [Overload] [Alias "alias"] ( parameters )
Function name cdecl [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

描述
在過程聲明中，指定過程將使用調用約定。在調用約定中，任何參數都將以列出它們的相反順序傳遞（推送到堆疊上），即從右到左。過程不需要保留 或 寄存器，並且不得在堆疊返回之前清理堆疊（


-------------------------------------------------------- KeyGTK3PgChain ----

Chain   連結
  
暫時將控制權移交給外部程式

語法
Declare Function Chain ( ByRef program As Const String ) As Long

用法
result = Chain( program )

參數
program
要將控制權移交給的程式（可執行檔）的檔案名（包括檔路徑）。

返回值
如果成功執行，則返回外部


-------------------------------------------------------- KeyGTK3PgChdir ----

ChDir   改路徑
  
更改當前驅動器和目錄

語法
Declare Function ChDir ( ByRef path As Const String ) As Long

用法
result = ChDir( path )

參數
path
指定要更改為的路徑的參數。String

返回值
成功時返回零 （0），失?


-------------------------------------------------------- KeyGTK3PgChr ----

Chr   數轉字元
  
從一個或多個 ASCII 整數值返回一串字元

語法
Declare Function Chr ( ByVal ch As Integer [, ... ] ) As String

用法
result = Chr[$]( ch0 [, ch1 ... chN ] )

參數
ch
字元的 ASCII 整數值。

返回值
返回包含字元的字串。

描述
Chr返回一個字串，其中包含由傳遞給它的 ASCII 值所表示的字元。
當與數值?


-------------------------------------------------------- KeyGTK3PgCint ----

CInt   轉整型
  
將數位或字串運算式轉換為IntegerInteger<bits>

語法
Declare Function CInt ( ByVal expression As datatype ) As Integer
Declare Function CInt<bits> ( ByVal expression As datatype ) As Integer<bits>

Type typename
Declare Operator Cast ( ) As Integer
Declare Operator Cast ( ) As Integer<bits>
End Type

用法
result = CInt( expression )
result = CInt( string expression )
result = CInt( user defined type )

參數
bits
一個數位常量運算式，指示所需大小的整數位元。允許的值為 、 或 。8163264
expression
要轉換為值的數位、字串或指標運算式Integer
datatype
任何數值、字串或指標資料類型
typename
用戶定義的類型

返回值
包含轉換後的值的 或。IntegerInteger<bits>

描述
如果傳遞給一個數字，它使用舍入到偶數的方法對其進行舍入 - 即它舍入到最接近的整數值，如果數


-------------------------------------------------------- KeyGTK3PgCircle ----

Circle   畫圓
  
用於繪製橢圓或圓的圖形語句

語法
Circle [target,] [STEP] (x,y), radius[, [color][, [start][, [end][, [aspect][, F]]]]]

參數
target
可選;指定要在其上繪製的圖像緩衝區
STEP
表示座標是相對的
(x, y)
橢圓中心的座標
radius
圓的半徑 - 對於橢圓，為半長軸（即最長半徑）
color
顏色屬性
start
起始角度
end
結束角度
aspect
橢圓的縱橫比，高度與寬度的比率
F
填充模式指示器

描述
Circle將根據給定的參數繪製一個圓、橢圓或圓弧。
指定要在其上繪製的緩衝區。 可能是使用 或 


-------------------------------------------------------- KeyGTK3PgClass ----

Class   類對象
  
聲明類對象

語法
Class typename ...

參數
typename
的名稱Class

描述
我們會在這裡放一些有用的東西（誠實），除了這個功能還沒有在編譯器中實現。但是


-------------------------------------------------------- KeyGTK3PgClear ----

Clear   清除
  
清除或初始化某些記憶體

語法
Declare Sub Clear cdecl ( ByRef dst As Any, ByVal value As Long = 0, ByVal bytes As UInteger )

用法
Clear( dst, [value], bytes )

參數
dst
某些記憶體的起始位址
value
要將所有位元組設置為等於的值
bytes
要清除的位元組數

描述
Clear將記憶體中的一個或多個位元組設置為特定值（如果未指定，則預設值為零 （）。起始位址取自對變數或陣列元素


-------------------------------------------------------- KeyGTK3PgClng ----

CLng   轉長型
  
將數值或字串運算式轉換為Long

語法
Declare Function CLng ( ByVal expression As datatype ) As Long

Type typename
Declare Operator Cast ( ) As Long
End Type

用法
result = CLng( numeric expression )
result = CLng( string expression )
result = CLng( user defined type )

參數
expression
要轉換為值的數位、字串或指標運算式Long
datatype
任何數值、字串或指標資料類型
typename
用戶定義的類型

返回值
值。Long

描述
該函數舍入小數部分並返回 32 位值。該函數不檢查溢出，並且對於小


-------------------------------------------------------- KeyGTK3PgClngint ----

CLngInt   轉長整型
  
將數位或字串運算式轉換為 64 位元整數 （LongInt)

語法
Declare Function CLngInt ( ByVal expression As datatype ) As LongInt

Type typename
Declare Operator Cast ( ) As LongInt
End Type

用法
result = CLngInt( numeric expression )
result = CLngInt( string expression )
result = CLngInt( user defined type )

參數
expression
要轉換為值的數位、字串或指標運算式LongInt
datatype
任何數值、字串或指標資料類型
typename
用戶定義的類型

返回值
值。LongInt

描述
該函數舍入小數部分並返回 64 位值。該函數不檢查溢出，並且對於小於或大於 的值，未定義結果?


-------------------------------------------------------- KeyGTK3PgClose ----

Close   關閉
  
流 I/O 功能，用於終止對設備的訪問

語法
Close [[#]filenum ] [, [#]filenum ...]
 or 
result = Close( [#filenum] )

參數
filenum
要關閉的文件編號列表。

返回值
Close成功時返回 32 位 ：零 （），否則返回非零錯誤代碼。Long0

描述
關閉其檔編號作為參數傳遞的檔。如果傳遞了未使用的檔編號，則返回錯誤。
沒有參數將關閉當前


-------------------------------------------------------- KeyGTK3PgCls ----

Cls   清屏
  
在文字模式和圖形模式下清除螢幕

語法
Declare Sub Cls ( ByVal mode As Long = 1 )

用法
Cls mode

參數
mode
一個可選的數值變數，其值為 從 到 。如果省略，則默認為 。021

描述
可以給出一個可選參數，mode

如果省略，則清除文本或圖形視口。如果已使用該語句定義了圖形視口，則將清除圖形視口。否則，將清除由 定義的文本視?


-------------------------------------------------------- KeyGTK3PgColor ----

Color   顏色
  
設置與文本的控制台輸出和圖形輸出一起使用的顯示前景/背景色

語法
Declare Function Color ( ByVal foreground As ULong , ByVal background As ULong ) As ULong

用法
Color [foreground] [, background]
result = Color [( [foreground] [, background] )]

參數
foreground
要設置的前景色
background
要設置的背景顏色

返回值
返回一個 32 位值，其中包含 中的當前前景色和 中的當前背景色。
在高/真彩色模式下，僅返回前景色，佔用整個 32 位。相反，請參閱以返回當前圖形模式顏色（前景和背景）。
可以在設置新顏色值的同時檢索舊顏色值。Low WordHigh WordScreenControl

描述
該語句設置當前的前景色和/或背景色。、、、、、?


-------------------------------------------------------- KeyGTK3PgCommand ----

Command   命令列
  
返回用於調用程式的命令列參數

語法
Declare Function Command ( ByVal index As Long = -1 ) As String

用法
result = Command[$]( [ index ] )

參數
index
特定命令列參數的從零開始的索引。

返回值
返回命令列參數。

描述
Command返回在執行時傳遞給程式的命令列參數。
如果 小於零 （），則返回所有命令列參數的空格分隔列表，否則，返回單個參數。值為零 （） 返回可執行文


-------------------------------------------------------- KeyGTK3PgCommon ----

Common   全域變數
  
變數聲明和作用域修飾符

語法
Common [Shared] symbolname[()] [AS DataType] [, ...]

描述
聲明在代碼模組（包括要編譯為靜態和動態庫 （DLL） 的代碼模組）之間共用的變數。
匹配語句必須出現在使用該變數的所有其他代碼模組中。
無法初始化變數。
陣列始終是可變長度的，並且?


-------------------------------------------------------- KeyGTK3PgCondBroadcast ----

CondBroadcast   條件變數廣播
  
重新啟動控制碼的所有執行緒CondWait

語法
Declare Sub CondBroadcast ( ByVal handle As Any Ptr )

用法
CondBroadcast ( handle )

參數
handle
條件變數的控制碼。

描述
一旦條件為並且執行緒啟動，其中一個（包括執行主程序的隱式主執行緒）可以設置為條件，它們將被停止，直到等待中的執行緒可以重新啟動的其他執行緒。 可用於重新啟動等待條件的所有執行緒?


-------------------------------------------------------- KeyGTK3PgCondCreate ----

CondCreate   條件變數創建
  
創建要用於同步執行緒的條件變數

語法
Declare Function CondCreate ( ) As Any Ptr

用法
result = CondCreate

返回值
新創建的條件變數的控制碼，或失敗時的空指標 （0）。

描述
一旦條件為Condcreated並且執行緒啟動，其中一個或多個執行緒（包括執行主程序的隱式主執行緒）可以設置為條件，它們將被停止，直?


-------------------------------------------------------- KeyGTK3PgCondDestroy ----

CondDestroy   條件變數銷毀
  
在不再需要多執行緒條件變數時銷毀該變數

語法
Declare Sub CondDestroy ( ByVal handle As Any Ptr )

用法
CondDestroy ( handle )

參數
handle
要銷毀的條件變數的控制碼。

描述
一旦條件為 d 並且執行緒啟動，其中一個（包括執行主程序的隱式主執行緒）可以設置為條件執行緒，它們將被停止，直到等待中的執行緒可以重新啟動的其他執行緒。 可用於重新啟動?


-------------------------------------------------------- KeyGTK3PgCondSignal ----

CondSignal   條件變數信號
  
重新啟動由調用暫停的執行緒CondWait

語法
Declare Sub CondSignal ( ByVal handle As Any Ptr )

用法
CondSignal ( handle )

參數
handle
條件變數的控制碼。

描述
一旦創建了條件執行緒並啟動了執行緒，就可以為條件執行緒設置其中的多個執行緒（包括執行主程序的隱式主執行緒）之一，它們將被停止，直到等待中的執行緒可以重新啟動的其他執行緒。 可用於重


-------------------------------------------------------- KeyGTK3PgCondWait ----

CondWait   條件變數等待
  
停止執行當前執行緒，直到某些條件變為 true

語法
Declare Sub CondWait ( ByVal handle As Any Ptr, ByVal mutex As Any Ptr )

用法
CondWait ( handle, mutex )

參數
handle
條件變數的控制碼。
mutex
與此條件變數關聯的互斥體，在測試條件和調用 時必須鎖定該變數。CondWait

描述
停止調用它的執行緒的函數，直到其他執行緒 s 或 s 成為控制碼。
一旦創建了條件變數並啟動了執行緒，就可以為條件變數設置其中的多個變數之一


-------------------------------------------------------- KeyGTK3PgConst ----

Const   常量
  
不可修改的變數聲明。

語法
Const symbolname1 [AS DataType] = value1 [, symbolname2 [AS DataType] = value2, ...]
or
Const [AS DataType] symbolname1 = value1 [, symbolname2 = value2, ...]

描述
聲明不可修改的常量資料，這些資料可以是整數或十進位（浮點數）數位或字串。如果未顯式給出，則將推斷常量類型。
不允許指定 或 as。
允許指定 as，但不起作用，因為生成的類型始終為 .



-------------------------------------------------------- KeyGTK3PgConstMember ----

Const (Member)   常量
  
指定成員過程為唯讀。

語法
Type typename
Declare Const Sub|Function|Property|Operator ...
End Type

[Const] Sub|Function|... typename ...
...
End Sub|Function|...

描述
指定方法不更改調用它的物件。隱藏的參數將被視為唯讀。該聲明可以讀作“調用 const 方法承諾不更改物件”，如果成員過程嘗試更改任何資料欄位或調用非 const 成員過程，編譯器將出錯。
唯讀?


-------------------------------------------------------- KeyGTK3PgConstQualifier ----

Const (Qualifier)   常量
  
指定資料類型或指針資料類型為唯讀。

語法
... As [Const] datatype [ [Const] Ptr ... ]

參數
datatype
標準或用戶定義的資料類型的名稱。

描述
指定將限定詞右側的 or 視為唯讀。唯讀（）聲明是類型安全的度量，可以理解為“承諾不更改”。編譯器使用 const 聲明來檢查對變數和參數的操作，並在編譯時生成錯誤?


-------------------------------------------------------- KeyGTK3PgConstructor ----

Constructor   構造函數
  
在創建類或用戶定義類型時自動調用

語法
Type typename
Declare Constructor ( )
Declare Constructor ( [ ByRef | ByVal ] parameter As datatype [ = default ] [, ... ] )
End Type

Constructor typename ( [ parameters ] ) [ Export ]
statements
End Constructor

參數
typename 
或 的名稱TypeClass

描述
Constructor在創建使用者定義或變數時調用方法。
是為其聲明和定義方法的類型的名稱。的名稱解析遵循與 在 中使用的過程相同的規則。
一個類型或類可能存在多個構造函數。調用的


-------------------------------------------------------- KeyGTK3PgContinue ----

Continue   繼續本次
  
控制流語句以繼續迴圈的下一次反覆運算

語法
Continue {Do | For | While}

描述
跳過所有代碼，直到迴圈結構的結束子句（即 、或塊），然後執行限制條件檢查。在 a 的情況下，變數根據指定的遞增。
如果有多個 / / 塊嵌套，它將繼續在該類型的最內層塊上，即輸入的


-------------------------------------------------------- KeyGTK3PgCos ----

Cos   余弦
  
返回角度的余弦

語法
Declare Function Cos ( ByVal angle As Double ) As Double

用法
result = Cos( angle )

參數
angle
角度（以弧度為單位）

返回值
將參數的余弦作為 to 的範圍內返回。angleDouble-1.01.0

描述
參數以弧度（而不是度）為單位進行度量。
對於絕?


-------------------------------------------------------- KeyGTK3PgCptr ----

CPtr   轉為PTR
  
將指針運算式轉換為指定的資料類型指針

語法
CPtr( PointerDataType, expression )

描述
轉換為 .
必須是一種類型（例如資料類型或 ），或者是一對一。
可能具有不同的指標類型，也可能是 .
 注意：目前，FB實際上並沒有強制要求必須是指標。不過，這在將來的版本中可能?


-------------------------------------------------------- KeyGTK3PgCshort ----

CShort   轉短整型
  
將數位或字串運算式轉換為整數 （Short)

語法
Declare Function CShort ( ByVal expression As datatype ) As Short

Type typename
Declare Operator Cast ( ) As Short
End Type

用法
result = CShort( numeric expression )
result = CShort( string expression )
result = CShort( user defined type )

參數
expression
要轉換為值的數位、字串或指標運算式Short
datatype
任何數值、字串或指標資料類型
typename
用戶定義的類型

返回值
值。Short

描述
該函數舍入小數部分並返回一個 16 位值。該函數不檢查?


-------------------------------------------------------- KeyGTK3PgCsign ----

CSign   轉符號
  
將運算式轉換為有符號

語法
CSign ( expression )

用法
variable = CSign ( expression )

描述
將無符號轉換為有符號，這對於強制除法或乘法的有符號行為（


-------------------------------------------------------- KeyGTK3PgCsng ----

CSng   轉單精型
  
將數位或字串運算式轉換為精確浮點Single

語法
Declare Function CSng ( ByVal expression As datatype ) As Single

Type typename
Declare Operator Cast ( ) As Single
End Type

用法
result = CSng( numeric expression )
result = CSng( string expression )
result = CSng( user defined type )

參數
expression
要轉換為值的數位、字串或指標運算式Single
datatype
任何數值、字串或指標資料類型
typename
用戶定義的類型

返回值
精度值。Single

描述
該函數返回一個 32 位值。該函數不檢查溢出，因此請


-------------------------------------------------------- KeyGTK3PgCsrlin ----

CsrLin   游標行
  
返回游標的行位置

語法
Declare Function CsrLin ( ) As Integer

用法
result = CsrLin

返回值
指定游標的當前行。Integer

描述
返回游標所在的?


-------------------------------------------------------- KeyGTK3PgCubyte ----

CUByte   轉U位元組型
  
將數位或字串運算式轉換為無符號位元組 （UByte)

語法
Declare Function CUByte ( ByVal expression As datatype ) As UByte

Type typename
Declare Operator Cast ( ) As UByte
End Type

用法
result = CUByte( numeric expression )
result = CUByte( string expression )
result = CUByte( user defined type )

參數
expression
要轉換為值的數位、字串或指標運算式UByte
datatype
任何數值、字串或指標資料類型
typename
用戶定義的類型

返回值
值。UByte

描述
該函數舍入小數部分並返回 8 位值。該函數不?


-------------------------------------------------------- KeyGTK3PgCuint ----

CUInt   轉U整型
  
將數位或字串運算式轉換為或UIntegerUInteger<bits>

語法
Declare Function CUInt ( ByVal expression As datatype ) As UInteger
Declare Function CUInt<bits> ( ByVal expression As datatype ) As UInteger<bits>

Type typename
Declare Operator Cast ( ) As UInteger
Declare Operator Cast ( ) As UInteger<bits>
End Type

用法
result = CUInt( numeric expression )
result = CUInt( string expression )
result = CUInt( user defined type )

參數
bits
一個數值常量運算式，指示所需不帶正負號的整數位的大小。允許的值為 、 或 。8163264
expression
要轉換為 或 值的數位、字串或指標運算式UIntegerUInteger<bits>
datatype
任何數值、字串或指標資料類型
typename
用戶定義的類型

返回值
A 或 包含轉換後的值。UIntegerUInteger<bits>

描述
該函數舍入小數部分並返回一個值，或者如果提供了值，則返回給定大小的不帶正負號的整數類型。
?


-------------------------------------------------------- KeyGTK3PgCulng ----

CULng   轉U長型
  
將數值或字串運算式轉換為ULong

語法
Declare Function CULng ( ByVal expression As datatype ) As ULong

Type typename
Declare Operator Cast ( ) As ULong
End Type

用法
result = CULng( numeric expression )
result = CULng( string expression )
result = CULng( user defined type )

參數
expression
要轉換為值的數位、字串或指標運算式ULong
datatype
任何數值、字串或指標資料類型
typename
用戶定義的類型

返回值
值。ULong

描述
該函數舍入小數部分並返回 32 位值。該函


-------------------------------------------------------- KeyGTK3PgCulngint ----

CULngInt   轉U長整型
  
將數位或字串運算式轉換為 64 位不帶正負號的整數 （ULongInt)

語法
Declare Function CULngInt ( ByVal expression As datatype ) As ULongInt

Type typename
Declare Operator Cast ( ) As ULongInt
End Type

用法
result = CULngInt( numeric expression )
result = CULngInt( string expression )
result = CULngInt( user defined type )

參數
expression
要轉換為值的數位、字串或指標運算式ULongInt
datatype
任何數值、字串或指標資料類型
typename
用戶定義的類型

返回值
值。ULongInt

描述
該函數舍入小數部分並返回 64 位值。該函數不檢查溢出，並且對於小於或大於 的值，未定義結果。此外，浮點運算式的強制轉換當?


-------------------------------------------------------- KeyGTK3PgCunsg ----
CUnsg   轉無
Description



-------------------------------------------------------- KeyGTK3PgCurdir ----

CurDir   目錄取當前
  
返回目前的目錄/資料夾

語法
Declare Function CurDir ( ) As String

用法
result = CurDir

返回值
設置為目前的目錄/資料夾的名稱。String

描述
返回目前的目錄/資料夾。

例

Print CurDir

輸出會有所不同。

方言差異
在 -lang qb 方言中不可用，除非使用別名 引用。__Curdir




-------------------------------------------------------- KeyGTK3PgCushort ----

CUShort   轉U短整型
  
將數位或字串運算式轉換為不帶正負號的整數 （UShort)

語法
Declare Function CUShort ( ByVal expression As datatype ) As UShort

Type typename
Declare Operator Cast ( ) As UShort
End Type

用法
result = CUShort( numeric expression )
result = CUShort( string expression )
result = CUShort( user defined type )

參數
expression
要轉換為值的數位、字串或指標運算式UShort
datatype
任何數值、字串或指標資料類型
typename
用戶定義的類型

返回值
值。UShort

描述
該函數舍入小數部分並返回一個 16 位值。該函數不檢?


-------------------------------------------------------- KeyGTK3PgCustomgfx ----

Custom   自訂
  
選擇自訂方法的圖形語句的參數Put

語法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Custom, custom_function_ptr [, parameter]

參數
Custom
必填。
custom_function_ptr
自訂使用者定義函數的名稱。
parameter
可選傳遞給自訂函數;如果省略，則預設值為零 （）。Pointer0

描述
Custom選擇自訂使用者定義函數作為刪除圖像緩衝區的方法。
該方法使用使用者定義的函數來計算要繪製到目標緩衝區的最終圖元值。對於源圖像的?


-------------------------------------------------------- KeyGTK3PgCvaArg ----

Cva_Arg
  
巨集，用於從可變參數清單物件獲取下一個參數。

語法
variable = Cva_Arg ( argument_list, datatype )

參數
argument_list
Cva_List要訪問下一個值的資料類型變數
datatype
變數參數清單中下一個值的資料類型argument_list

描述
該巨集允許在函數中使用可變數量的參數：Cva_Arg
 	Cva_Arg返回列表中的當前參數，其預期資料類型為 。argument_listdatatype
在首次使用之前，?


-------------------------------------------------------- KeyGTK3PgCvaCopy ----

Cva_Copy
  
用於從已初始化的可變參數清單物件變數初始化可變參數清單物件變數的巨集

語法
Cva_Copy( dst_list, src_list )

參數
dst_list
要初始化的目標變數Cva_List
src_list
要從中複製的源變數Cva_List

描述
將一個類型變數複製到另一個類型變數。 使用當前狀態進行初始化，
必須已使用上一個或語句初始化。
就像可變參數清單物件的副本構造函數，並且最?


-------------------------------------------------------- KeyGTK3PgCvaEnd ----

Cva_End
  
用於清理可變參數清單物件變數的巨集

語法
Cva_End( argument_list )

參數
argument_list
Cva_List要清理的變數

描述
清理以前使用 或 初始化的類型變數，如析構函數。
必須已使用與（為了跨平臺相容性）相同的過程中的上一?


-------------------------------------------------------- KeyGTK3PgCvaList ----

Cva_List
  
可變參數清單對象類型

語法
Dim variable As Cva_List

描述
Cva_List是一種內置資料類型，用於在可變參數過程中使用可變長度參數列表。
用於初始化變數（構造函數）。
用於複製變數（複製構造函數）。
用於獲取下一個參數的值。
使用完變數（析構函數?


-------------------------------------------------------- KeyGTK3PgCvaStart ----

Cva_Start
  
用於初始化可變參數清單物件變數的巨集

語法
Cva_Start( argument_list, last_param )

參數
argument_list
Cva_List要初始化的資料類型變數
last_param
過程參數列表中省略號之前的最後一個參數 ...

描述
在可變參數程序定義中，是具有該類型的變數，必須使用該類型進行初始化才能使用傳遞給過程的變數長度參數清單。
是可變參數程序定義中省略號之前的最後


-------------------------------------------------------- KeyGTK3PgCvd ----

CVD   轉整雙精型
  
將 64 位元整數或 8 位元組字串轉換為雙精度值

語法
Declare Function CVD ( ByVal l As LongInt ) As Double
Declare Function CVD ( ByRef str As Const String ) As Double

用法
result = CVD( l )
result = CVD( str )

參數
l
一個 64 位元，其中存儲了雙精度變數的二進位副本。LongInt
str
長度至少為 8 個位元組，其中存儲了雙精度變數的二進位副本。String

返回值
返回一個值，該值保存輸入值的二進位副本。Double

描述
從 64 位元或 8 位元組到變數的二進位副本。如果字串的長度小於 8 ?


-------------------------------------------------------- KeyGTK3PgCvi ----

CVI   轉整單精型
  
使用二進位副本將浮點數或字串轉換為整數變數

語法
32-bit:
Declare Function CVI ( ByVal f As Single ) As Integer
64-bit:
Declare Function CVI ( ByVal f As Double ) As Integer

Declare Function CVI ( ByRef str As Const String ) As Integer
Declare Function CVI<bits> ( expr As DataType ) As Integer<bits>

用法
result = CVI( sng )
result = CVI( str )
result = CVI<bits>( expr )

參數
f
一個浮點數，其中存儲了一個整數變數的二進位副本。其精度（或）取決於當前平臺上的大小SingleDoubleInteger
str
包含存儲在其中的整數變數的二進位副本。String
bits
指定要返回的整數類型大小。接受的類型和大小將取決於調用的相應函數。expr
expr
將複製到 .Integer<bits>

返回值
包含輸入運算式的二進位副本的 or 變數。IntegerInteger<bits>

描述
使用浮點值中包含的二進位資料或 .如果字串?


-------------------------------------------------------- KeyGTK3PgCvl ----

CVL   轉整單精整型
  
將單精確度浮點數或四位元組字串轉換為整數 （） 變數Long

語法
Declare Function CVL ( ByVal sng As Single ) As Long
Declare Function CVL ( ByRef str As Const String ) As Long

用法
result = CVL( sng )
result = CVL( str )

參數
sng
一個浮點數，其中存儲了一個整數變數的二進位副本。Single
str
長度至少為四個位元組，其中存儲了整數變數的二進位副本。String

返回值
要將整數的二進位副本複製到的變數。Long

描述
使用 a 中包含的二進位資料返回一個 32 位元整數值，或長度至少為 4 個位元組的 a。如果字串


-------------------------------------------------------- KeyGTK3PgCvlongint ----

CVLongInt   轉雙精長整型
  
將雙精度浮點數或八位元組字串轉換為變數LongInt

語法
Declare Function CVLongInt ( ByVal dbl As Double ) As LongInt
Declare Function CVLongInt ( ByRef str As Const String ) As LongInt

用法
result = CVLongInt( dbl )
result = CVLongInt( str )

參數
dbl
一個浮點數，其中存儲了變數的二進位副本。DoubleLongInt
str
長度至少為八個位元組，其中存儲了變數的二進位副本。StringLongInt

返回值
保存輸入變數的二進位副本的變數。LongInt

描述
使用長度至少為 8 個位元組的 a 或 a 中包含的二進位資料返回一個 64 位值。如果字串的長度小於八個位元組，


-------------------------------------------------------- KeyGTK3PgCvs ----

CVS   轉單精整型
  
將 32 位元整數或 4 位元組字串轉換為單精確度變數

語法
Declare Function CVS ( ByVal i As Integer ) As Single
Declare Function CVS ( ByRef str As Const String ) As Single

用法
result = CVS( i )
result = CVS( str )

參數
i
一個 32 位元，其中存儲了單精確度變數的二進位副本。Integer
str
長度至少為 4 個位元組，其中存儲了單精確度變數的二進位副本。String

返回值
返回一個值，該值保存輸入值的二進位副本。Single

描述
從 32 位元或 4 位元組到變數的二進位副本。如果字串的長度?


-------------------------------------------------------- KeyGTK3PgCvshort ----

CVShort   轉字短整型
  
將雙位元組字串轉換為整數變數Short

語法
Declare Function CVShort ( ByRef str As Const String ) As Short

用法
result = CVShort( str )

參數
str
長度至少為兩個位元組，其中存儲了整數變數的二進位副本。StringShort

返回值
 Short保存 的二進位副本的變數。Keypgshort

描述
使用長度至少為兩個位元組的 a 中包含的二進位資料返回一個 16 位元整數值。如果字串的長度小於兩個位元組，則返回值為零 （）。
用於轉


-------------------------------------------------------- KeyGTK3PgData ----

Data   數據
  
用於在編譯時存儲資料的語句。

語法
Data constant_expression1 [,constant_expression2]...

描述
Data存儲常量數值或字母運算式的清單，這些運算式在編譯時計算（使用 -lang qb 除外），並存儲為常量，可以使用 讀取到變數中。
程式中的所有語句都表現為單個鏈式列表;讀取一個語句的最?


-------------------------------------------------------- KeyGTK3PgDate ----

Date   日期
  
以字串形式返回當前系統日期

語法
Declare Function Date ( ) As String

用法
result = Date[$]

返回值
返回當前系統日期，格式為mm-dd-yyyy

描述
沒有

例

Print Date ' 列印當前日期



與QB的區別
QB DATE 語句（用於設置系統日期）現在稱為 。SetDate
字串類型尾碼“$”在 -lang qb 方言中是必需的。


-------------------------------------------------------- KeyGTK3PgDateAdd ----

DateAdd   日期相加
  
以指定的間隔偏移日期

語法
Declare Function DateAdd ( ByRef interval As Const String, ByVal number As Double, ByVal date_serial As Double ) As Double

用法
#include "vbcompat.bi"
result = DateAdd( interval, number, date_serial )

參數
interval
指示哪個時間段對應於一個單位的字串number
number
要添加到基準日期的間隔數。該數位將四捨五入為最接近的整數。
date_serial
基準日期

返回值
返回與收到的 加上 的 相對應的 日期序列。date_serialnumberintervals

描述
間隔指


-------------------------------------------------------- KeyGTK3PgDateDiff ----

DateDiff   日期差值
  
獲取按指定間隔測量的兩個日期的差異

語法
Declare Function DateDiff ( ByRef interval As Const String, ByVal serial1 As Double, ByVal serial2 As Double, ByVal firstdayofweek As Long = fbUseSystem, ByVal firstdayofyear As Long = fbUseSystem ) As Long

用法
#include "vbcompat.bi"
result = DateDiff( interval, date_serial1, date_serial2 [, firstdayofWeek [, firstweekofyear ] ] )

參數
interval
用於測量差值的時間單位（間隔）
date_serial1
開始日期序列
date_serial2
結束日期序列
firstdayofweek
一周的第一天
firstdayofyear
一年的第一天

返回值
返回一個整數，該整數對應於在兩個日期序列之間找到的 s 數。
如果>，則結果為負數。intervaldate_serial1date_serial2

描述
interval指定如下：

價值間隔yyyy年q季度（三個月）m月份w七天期間斷續器日曆周d，y日h小?


-------------------------------------------------------- KeyGTK3PgDatePart ----

DatePart   日期部分
  
從日期獲取間隔

語法
Declare Function DatePart ( ByRef interval As Const String, ByVal date_serial As Double, ByVal firstdayofweek As Long = fbUseSystem, ByVal firstdayofyear As Long = fbUseSystem ) As Long

用法
#include "vbcompat.bi"
result = DatePart( interval, date_serial, first_dayofWeek [, first_week_of_year ] )

參數
interval
指示日期的哪一部分需要的字串
date_serial
要解碼的日期序列
firstdayofweek
一周的第一天
firstdayofyear
一年的第一天

返回值
返回一個整數，表示 日期序列中的 。interval

描述

interval指示需要日期的哪一部分的字串指定如下：

價值間隔yyyy年q季度（三個月）m月份w工作日斷續器一年中的一周y一年中的


-------------------------------------------------------- KeyGTK3PgDateSerial ----

DateSerial   日期序列
  
創建日期序列

語法
Declare Function DateSerial ( ByVal year As Long, ByVal month As Long, ByVal day As Long ) As Long

用法
#include "vbcompat.bi"
result = DateSerial( year, month, day )

參數
year
年份
month
一年中的月份
day
月份中的某一天

返回值
返回一個日期序列，其中包含由 和 參數中的值形成的日期。返回的日期序列沒有


-------------------------------------------------------- KeyGTK3PgDateValue ----

DateValue   日期數值
  
從字串返回日期序列

語法
Declare Function DateValue ( ByRef date_string As String ) As Double

用法
#include "vbcompat.bi"
result = DateValue( date_string )

參數
date_string
要轉換為日期序列的字串

返回值
從日期字串返回日期序列。

描述
日期字串必須採用在作業系統的區域設置中設置的格式。
僅當區域設置指定了與使用的相同的短日期格式 QB （） 時，才能正常工作。請考慮?


-------------------------------------------------------- KeyGTK3PgDay ----

Day   日期取天
  
從日期序列中獲取月份中的某一天

語法
Declare Function Day ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Day( date_serial )

參數
date_serial
日期

返回值
從包含日期序列格式的日期的變數中返回月份中


-------------------------------------------------------- KeyGTK3PgDddate ----

__DATE__   _編譯__日期__
  
編譯器設置的內部定義（宏值）

語法
__DATE__

描述
將文本字串（格式）


-------------------------------------------------------- KeyGTK3PgDddateiso ----

__DATE_ISO__   _編譯_日期_ISO
  
編譯器設置的內部定義（宏值）

語法
__DATE_ISO__

描述
將文本字串（格式）中的編譯器日期替換為已使用的


-------------------------------------------------------- KeyGTK3PgDdfb64bit ----

__FB_64BIT__   _編譯_64位
  
編譯器設置的內部定義

語法
__FB_64BIT__

描述
定義編譯時?


-------------------------------------------------------- KeyGTK3PgDdfbargc ----

__FB_ARGC__   _編譯傳名稱
  
編譯器設置的內部定義（宏值）

語法
__FB_ARGC__

描述
替換為命令列上傳入的參數數。
 __FB_ARGC__是傳遞給程式


-------------------------------------------------------- KeyGTK3PgDdfbargcount ----

__FB_ARG_COUNT__
  
編譯器執行的內部定義（宏）。

語法
__FB_ARG_COUNT__( args... )

參數
args...
參數列表

描述
計算參數列表 （） 中的參數數並返回相應的值。
始終返回一個值，其中 0 對應於空參


-------------------------------------------------------- KeyGTK3PgDdfbargextract ----

__FB_ARG_EXTRACT__
  
編譯器執行的內部定義（宏）。

語法
__FB_ARG_EXTRACT__( index, args... )

參數
index
從第一個參數開始的從零開始的偏移量（零或正整數值）
args...
參數列表

描述
從與索引值 （） 對應的參數列表 （）


-------------------------------------------------------- KeyGTK3PgDdfbargleftof ----

__FB_ARG_LEFTOF__
  
編譯器執行的內部定義（宏）。

語法
__FB_ARG_LEFTOF__( arg, sep [, ret] )

參數
arg
論點
sep
分隔符號，明顯不同於逗號 （，）
ret
如果未找到分隔符號，則默認返回

描述
基於分隔符號 （） 返回參數 （） 的左標記。
 （在參數的運算式中，標記和分隔符號必須間隔）
預設情況下，如果未給出默認返回 


-------------------------------------------------------- KeyGTK3PgDdfbargrightof ----

__FB_ARG_RIGHTOF__
  
編譯器執行的內部定義（宏）。

語法
__FB_ARG_RIGHTOF__( arg, sep [, ret] )

參數
arg
論點
sep
分隔符號，明顯不同於逗號 （，）
ret
如果未找到分隔符號，則默認返回

描述
基於分隔符號 （） 返回參數 （） 的正確標記。
 （在參數的運算式中，標記和分隔符號必須間隔）
預設情況下，如果未給出默認返回


-------------------------------------------------------- KeyGTK3PgDdfbargv ----

__FB_ARGV__   _編譯傳入值
  
編譯器設置的內部定義（宏值）

語法
__FB_ARGV__

描述
替換為指向指向命令列上傳入的零個終止的命令列參數的指針列表的指針。
 __FB


-------------------------------------------------------- KeyGTK3PgDdfbarm ----

__FB_ARM__   _編譯_ARM_
  
編譯器設置的內部定義

語法
__FB_ARM__

描述
如果編譯目標使用 ARM CPU 


-------------------------------------------------------- KeyGTK3PgDdfbasm ----

__FB_ASM__   _編譯_彙編
  
編譯器設置的內部定義

語法
__FB_ASM__

描述
__FB_ASM__返回一個字串，該字串等於或取決於內聯裝?


-------------------------------------------------------- KeyGTK3PgDdFBBackend ----

__FB_BACKEND__   _編譯_後端
  
編譯器設置的內部定義

語法
__FB_BACKEND__

描述
定義為 或 ，具體取決?


-------------------------------------------------------- KeyGTK3PgDdFBBigEndian ----

__FB_BIGENDIAN__   _編譯_大端存儲
  
編譯器設置的內部定義

語法
__FB_BIGENDIAN__

描述
如果為大端目標進行編譯，則在編譯?


-------------------------------------------------------- KeyGTK3PgDdFBBuildDate ----

__FB_BUILD_DATE__   _編譯_日期_
  
編譯器設置的內部定義（巨集字串）

語法
__FB_BUILD_DATE__

描述
替換為包含編譯


-------------------------------------------------------- KeyGTK3PgDdfbbuilddateiso ----

__FB_BUILD_DATE_ISO__
  
編譯器設置的內部定義（巨集字串）

語法
__FB_BUILD_DATE_ISO__

描述
替換為包含 ISO 日期格式構建?


-------------------------------------------------------- KeyGTK3PgDdfbbuildsha1 ----

__FB_BUILD_SHA1__
  
編譯器設置的內部定義（巨集字串）

語法
__FB_BUILD_SHA1__

描述
替換為編譯器的源 SHA-1 修訂版的字串。該值是使用用於生成編譯器二進位檔案的原始程式碼修


-------------------------------------------------------- KeyGTK3PgDdfbcygwin ----

__FB_CYGWIN__   _編譯_CYGWIN
  
編譯器設置的內部定義

語法
__FB_CYGWIN__

描述
定義時，在編譯器的 Cygwin 版本中，或者在使用 -target cygwin 命令列選?


-------------------------------------------------------- KeyGTK3PgDdfbdarwin ----

__FB_DARWIN__   _編譯_DARWIN
  
編譯器設置的內部定義

語法
__FB_DARWIN__

描述
定義時不使用在編譯器的達爾文版本中編譯時或使用 -target darwin ?


-------------------------------------------------------- KeyGTK3PgDdfbdebug ----

__FB_DEBUG__   _編譯_調試
  
編譯器設置的內部定義（宏值）

語法
__FB_DEBUG__

描述
__FB_DEBUG__指示編譯時是否在命令列上指定了“生成調試資訊”選項或“啟用內部定義”選項。
如果指定了任一選項，則返回非零 （-1）。否則返回零 （0）。
可用於


-------------------------------------------------------- KeyGTK3PgDdfbdos ----

__FB_DOS__   _編譯_DOS
  
編譯器設置的內部定義

語法
__FB_DOS__

描述
如果為 DOS 目標進行編譯，則定義時不創建在編譯時創建的值。在 DOS 託管版本中缺省，或在使用 -target dos 命令列選項時處於?


-------------------------------------------------------- KeyGTK3PgDdfberr ----

__FB_ERR__   _編譯_錯誤
  
編譯器設置的內部定義（宏值）

語法
__FB_ERR__

描述
__FB_ERR__指示在編譯模組時是否在編譯器命令列上指定了 -e、-ex 或 -exx。
指示在編譯模組時，是否在編譯器命令列上指定了 -earray、-enullptr 或 -elocation，或者通過使用 -exx 進行


-------------------------------------------------------- KeyGTK3PgDdfbeval ----

__FB_EVAL__
  
編譯器執行的內部定義（宏）。

語法
__FB_EVAL__( arg )

參數
arg
論點

描述
在編譯時計算參數（常量運算式）。
當參數計算生成字串時，返回使用前置處理器運算子格式化的字串：__FB_EVAL__
-a （形式： ），
 - 或 （形式： ）如果需要。Non-Escaped String 


-------------------------------------------------------- KeyGTK3PgDdfbfpmode ----

__FB_FPMODE__   _編譯_快速_
  
編譯器設置的內部定義

語法
__FB_FPMODE__

描述
定義為啟用了 SSE 快速算術?


-------------------------------------------------------- KeyGTK3PgDdfbfpu ----

__FB_FPU__   _編譯_浮點
  
編譯器設置的內部定義

語法
__FB_FPU__

描述
定義為啟用了 SSE 浮


-------------------------------------------------------- KeyGTK3PgDdfbfreebsd ----

__FB_FREEBSD__   _編譯_FREEBSD
  
編譯器設置的內部定義

語法
__FB_FREEBSD__

描述
定義時在編譯時在 FreeBSD 版本的編譯器中創建的值，或者當使用 -target freebsd 命令?


-------------------------------------------------------- KeyGTK3PgDdfbgcc ----

__FB_GCC__   _編譯_GCC
  
編譯器設置的內部定義

語法
__FB_GCC__

描述
如果使用 -gen gcc，則定義為 true


-------------------------------------------------------- KeyGTK3PgDdfbgui ----

__FB_GUI__
  
編譯器設置的內部定義（宏值）

語法
__FB_GUI__

描述
__FB_GUI__指示編譯時是否在命令列上指定了可執行子系統選項 '-s gui'。
如果指定了可執行子系統選項 “-s gui”，則?


-------------------------------------------------------- KeyGTK3PgDdfbjoin ----

__FB_JOIN__
  
編譯器執行的內部定義（宏）。

語法
__FB_JOIN__( arg1, arg2 )

參數
arg1,arg2
要加入的左 （1） 和右 （2） 個參數

描述
將兩個權杖參數連?


-------------------------------------------------------- KeyGTK3PgDdfblang ----

__FB_LANG__   _編譯_語言
  
編譯器設置的內部定義（宏值）

語法
__FB_LANG__

描述
__FB_LANG__指示在編譯模組時設置的語言相容性選項。預設情況下將設置為 。可以使用以下一種（或多種）方法更改語言相容性選項：__FB_LANG__"fb"
 -lang 命令列選項
 -forcelang 命令?


-------------------------------------------------------- KeyGTK3PgDdfblinux ----

__FB_LINUX__   _編譯_LINUX
  
編譯器設置的內部定義

語法
__FB_LINUX__

描述
在編譯到 Linux 目標時，不使用編譯時創建的值進行定義。默認為 Linux 託管版本的編譯器，或在使用 -tar


-------------------------------------------------------- KeyGTK3PgDdFBMain ----

__FB_MAIN__   _編譯_主模_
  
編譯器設置的內部定義

語法
__FB_MAIN__

描述
__FB_MAIN__在主模組中定義，而不是在其他模組中定義。
編譯器將


-------------------------------------------------------- KeyGTK3PgDdFBMinVersion ----

__FB_MIN_VERSION__   _編譯_最小編譯版本
  
用於測試最低編譯器版本的巨集函數

語法
#define __FB_MIN_VERSION__( major, minor, patch) _
((__FB_VER_MAJOR__ > major) or _
((__FB_VER_MAJOR__ = major) and ((__FB_VER_MINOR__ > minor) or _
(__FB_VER_MINOR__ = minor and __FB_VER_PATCH__ >= patch_level))))

用法
__FB_MIN_VERSION__( major, minor, patch)

參數
major
要測試的最低主要版本
minor
要測試的最低次要版本
patch
要測試的最低補丁版本

返回值
如果編譯器版本小於指定版本，


-------------------------------------------------------- KeyGTK3PgDdfbmt ----

__FB_MT__   _編譯多執行緒
  
編譯器設置的內部定義（宏值）

語法
__FB_MT__

描述
__FB_MT__指示編譯時是否在命令列上指定了多執行緒選項 -mt，或者是否在原始程式碼中更多地使用了 or 關鍵?


-------------------------------------------------------- KeyGTK3PgDdfbnetbsd ----

__FB_NETBSD__   _編譯_NETBSD
  
編譯器設置的內部定義

語法
__FB_NETBSD__

描述
定義時，在 NetBSD 版本的編譯器中，或者在使用 -target netbsd 命令列選項?


-------------------------------------------------------- KeyGTK3PgDdfbopenbsd ----

__FB_OPENBSD__   _編譯_OPENBSD
  
編譯器設置的內部定義

語法
__FB_OPENBSD__

描述
在 OpenBSD 版本的編譯器中，或者在使用 -target openbsd 命令列選項時，定義時


-------------------------------------------------------- KeyGTK3PgDdfboptimize ----

__FB_OPTIMIZE__
  
編譯器設置的內部定義

語法
__FB_OPTIMIZE__

描述
始終定義，並且將具有從 0 到 3（預設情況下?


-------------------------------------------------------- KeyGTK3PgDdfboptionbyval ----

__FB_OPTION_BYVAL__   _編譯選項支援值傳遞
  
編譯器設置的內部定義（宏值）

語法
__FB_OPTION_BYVAL__

描述
指示當未顯式聲明 by value /by 引用說明符時，是否通過引用傳遞給 或 按值傳遞的參數（如 with ），或者像預設情況下那樣按值傳遞。
如果預設情況下參數是傳遞值，則設置為非零 ?


-------------------------------------------------------- KeyGTK3PgDdfboptiondynamic ----

__FB_OPTION_DYNAMIC__   _編譯選項陣列變長
  
編譯器設置的內部定義（宏值）

語法
__FB_OPTION_DYNAMIC__

描述
__FB_OPTION_DYNAMIC__定義為 true（負數 （-1）），如果發出了最近的語?


-------------------------------------------------------- KeyGTK3PgDdfboptionescape ----

__FB_OPTION_ESCAPE__   _編譯選項_支援轉義
  
編譯器設置的內部定義（宏值）

語法
__FB_OPTION_ESCAPE__

描述
指示預設情況下，如果未以 $ 運算子顯式首碼（對於非轉義字串）或 ！轉義字串的運算子。
處理字串文本的缺省方法是在編譯或使用原始檔案中的 -lang 命令列選項期


-------------------------------------------------------- KeyGTK3PgDdfboptionexplicit ----

__FB_OPTION_EXPLICIT__   _編譯選項_支援EXPLICIT
  
編譯器設置的內部定義（宏值）

語法
__FB_OPTION_EXPLICIT__

描述
__FB_OPTION_EXPLICIT__指示以前是否在源中使用過。
如果尚未設置該選項，


-------------------------------------------------------- KeyGTK3PgDdfboptiongosub ----

__FB_OPTION_GOSUB__   _編譯選項_支援GOSUB
  
編譯器設置的內部定義（宏值）

語法
__FB_OPTION_GOSUB__

描述
指示在編譯時如何處理和將要處理。如果該選項設置為 （-1），則允許此選項，並且僅被識別為從 gosub 返回。如果未設置該選項 （0），則不允許這樣做，並且僅將其識別為從過程返回。
?


-------------------------------------------------------- KeyGTK3PgDdfboptionprivate ----

__FB_OPTION_PRIVATE__   _編譯選項_支援PRIVATE
  
編譯器設置的內部定義（宏值）

語法
__FB_OPTION_PRIVATE__

描述
指示 預設情況下，和 的 是否具有模組作用域或全域作用域（如果未用 或 顯式指定）。
函數和子的預設作用域說明符是在編譯期間或在原始檔案中使用 -lang 命令列選項來設置的。
如?


-------------------------------------------------------- KeyGTK3PgDdfboutdll ----

__FB_OUT_DLL__   _編譯_輸出DLL
  
編譯器設置的內部定義（宏值）

語法
__FB_OUT_DLL__

描述
__FB_OUT_DLL__指示編譯時編譯器命令列上指定的輸出檔案類型是共用庫。
如果輸出是共用庫，則返回非零 （-1）。否則返回零 （0）。
只有 、 、 或 中的一個將計算


-------------------------------------------------------- KeyGTK3PgDdfboutexe ----

__FB_OUT_EXE__   _編譯_輸出EXE
  
編譯器設置的內部定義（宏值）

語法
__FB_OUT_EXE__

描述
__FB_OUT_EXE__指示編譯時編譯器命令列上指定的輸出檔案類型是可執行檔。
如果輸出是可執行檔，則返回非零 （-1）。否則返回零 （0）。
只有 、 、 或 中的一個將


-------------------------------------------------------- KeyGTK3PgDdfboutlib ----

__FB_OUT_LIB__   _編譯_輸出LIB
  
編譯器設置的內部定義（宏值）

語法
__FB_OUT_LIB__

描述
__FB_OUT_LIB__指示編譯時編譯器命令列上指定的輸出檔案類型是靜態程式庫。
如果輸出是靜態程式庫，則返回非零 （-1）。否則返回零 （0）。
只有 、 、 或 中的一個將計算


-------------------------------------------------------- KeyGTK3PgDdfboutobj ----

__FB_OUT_OBJ__   _編譯_輸出OBJ
  
編譯器設置的內部定義（宏值）

語法
__FB_OUT_OBJ__

描述
__FB_OUT_OBJ__指示編譯時編譯器命令列上指定的輸出檔案類型是物件模組。
如果輸出是物件模組，則返回非零 （-1）。否則返回零 （0）。
只有一個 、 、 或 的計算結


-------------------------------------------------------- KeyGTK3PgDdfbpcos ----

__FB_PCOS__   _編譯常規PC
  
編譯器設置的內部定義

語法
__FB_PCOS__

描述
定義在編譯時創建的作業系統，如果作業系統具有類似於常見 PC 作業系統的檔案系統行為，例如 DOS?


-------------------------------------------------------- KeyGTK3PgDdfbppc ----

__FB_PPC__
  
編譯器設置的內部定義

語法
__FB_PPC__

描述
定義編譯時創建的編譯目標是否?


-------------------------------------------------------- KeyGTK3PgDdfbquote ----

__FB_QUOTE__
  
編譯器執行的內部定義（宏）。

語法
__FB_QUOTE__( arg )

參數
arg
論點

描述
將參數轉換為字串，類似於 stringize 運算子 （#），但可以在任何位置使用（將在轉換前展開參數）。
更準確地說，與通過參數傳遞的文本相比，返回一個多引號文本（首碼為 ?


-------------------------------------------------------- KeyGTK3PgDdfbsignature ----

__FB_SIGNATURE__   _編譯_編譯簽名
  
編譯器設置的內部定義（巨集字串）

語法
__FB_SIGNATURE__


-------------------------------------------------------- KeyGTK3PgDdfbsse ----

__FB_SSE__   _編譯_SSE
  
編譯器設置的內部定義

語法
__FB_SSE__

描述
如果啟用了 SSE 浮?


-------------------------------------------------------- KeyGTK3PgDdfbuniqueid ----

__FB_UNIQUEID__
  
編譯器執行的內部定義（宏）。

語法
__FB_UNIQUEID__( stack-id )

參數
stack-id
要訪問的堆疊的名稱

描述
獲取由 標識的堆疊頂部的識別字（不修改堆疊的大小）。
 （允許將新的唯一識別碼推送到堆疊，並允許從堆疊中彈出識別字）
注意：stack-id__FB_UNIQUEID_PUSH____FB_UNIQUEID_PO


-------------------------------------------------------- KeyGTK3PgDdfbuniqueidpop ----

__FB_UNIQUEID_POP__
  
編譯器執行的內部定義（宏）。

語法
__FB_UNIQUEID_POP__( stack-id )

參數
stack-id
要彈出的堆疊的名稱

描述
從標識的堆疊中彈出一個識別字（堆疊的大小減小 1）。
 （允許獲取堆疊頂部的識別字，並允許將新的唯一識別碼推送到堆疊）
注意：stack-id__FB_UNIQUEID____FB_UNIQUEID_PUSH__


-------------------------------------------------------- KeyGTK3PgDdfbuniqueidpush ----

__FB_UNIQUEID_PUSH__
  
編譯器執行的內部定義（宏）。

語法
__FB_UNIQUEID_PUSH__( stack-id )

參數
stack-id
要推送的堆疊的名稱

描述
將新的唯一識別碼推送到 由 標識的堆疊（堆疊的大小增加 1）。
 （允許在堆疊頂部獲取識別字，並允許從堆疊中彈出識別字）
注意：stack-id__FB_UNIQUEID____FB_UNIQUEID_POP__



-------------------------------------------------------- KeyGTK3PgDdfbunix ----

__FB_UNIX__   _編譯_UNIX
  
編譯器設置的內部定義

語法
__FB_UNIX__

描述
定義在編譯時創建的作業系統，如果操?


-------------------------------------------------------- KeyGTK3PgDdfbunquote ----

__FB_UNQUOTE__
  
編譯器執行的內部定義（宏）。

語法
__FB_UNQUOTE__( arg )

參數
arg
論點

描述
採用文本字串並將其轉換回標記。
更準確地說，與通過參數傳遞的文本相比，返回一個帶子引?


-------------------------------------------------------- KeyGTK3PgDdfbvectorize ----

__FB_VECTORIZE__   _編譯_編號級別
  
編譯器設置的內部定義

語法
__FB_VECTORIZE__

描述
定義為由 


-------------------------------------------------------- KeyGTK3PgDdFBVerMajor ----

__FB_VER_MAJOR__   _編譯_主版本號
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_VER_MAJOR__

Description
__FB_VER_MAJOR__ will return the major version of FreeBASIC currently being used.  For example, the major version is 0 for FreeBASIC 0.90, and will remain 0 until FreeBASIC version


-------------------------------------------------------- KeyGTK3PgDdFBVerMinor ----

__FB_VER_MINOR__   _編譯_次版本號
  
編譯器設置的內部定義（宏值）

語法
__FB_VER_MINOR__

描述
__FB_VER_MINOR__將返回當前正在使用的 FreeBASIC 的次要版本?


-------------------------------------------------------- KeyGTK3PgDdFBVerPatch ----

__FB_VER_PATCH__   _編譯_版本修訂
  
編譯器設置的內部定義（宏值）

語法
__FB_VER_PATCH__

描述
__FB_VER_PATCH__將返回當前正在使用的FreeBASIC版本的補丁/顛覆/修訂版號。例如，對於 FreeBAS


-------------------------------------------------------- KeyGTK3PgDdfbversion ----

__FB_VERSION__   _編譯_版本號
  
編譯器設置的內部定義（巨集字串）

語法
 __FB_VERSION__



-------------------------------------------------------- KeyGTK3PgDdfbwin32 ----

__FB_WIN32__   _編譯_Win32
  
編譯器設置的內部定義

語法
__FB_WIN32__

描述
如果編譯到 Win（32 位或 64 位元）目標，則定義在編譯時不創建值。在 Win 託管版本中為預設值，如果使用 -target win32 或 -


-------------------------------------------------------- KeyGTK3PgDdfbx86 ----

__FB_X86__
  
編譯器設置的內部定義

語法
__FB_X86__

描述
定義編譯時創建的編譯目標是否使用 X


-------------------------------------------------------- KeyGTK3PgDdfbxbox ----

__FB_XBOX__   _編譯_XBOX
  
編譯器設置的內部定義

語法
__FB_XBOX__

描述
定義時不使用在編譯時使用 -target xbox 命令列選項時創


-------------------------------------------------------- KeyGTK3PgDdfile ----

__FILE__   __文件__
  
編譯器設置的內部定義（巨集字串）

語法
__FILE__

描述
替換為引用的原始檔案名?


-------------------------------------------------------- KeyGTK3PgDdfilenq ----

__FILE_NQ__   __文件_未用
  
編譯器設置的內部定義（巨集字串）

語法
__FILE_NQ__

描述


-------------------------------------------------------- KeyGTK3PgDdfunction ----

__FUNCTION__   __函數__
  
編譯器設置的內部定義（巨集字串）

語法
__FUNCTION__

描述
替換為當前功能塊的引號名稱。
它的正常用途是在調試中報告錯誤的值。
如果在模組層級別使用，則給定的?


-------------------------------------------------------- KeyGTK3PgDdfunctionnq ----

__FUNCTION_NQ__   __函數_未引用__
  
編譯器設置的內部定義（巨集字串）

語法
__FUNCTION_NQ__

描述
替換為當前功能塊（如果使用）的非引號名稱。
如果在模組層級別使用，則給定的函數名稱將用於主模組或其他模組。?


-------------------------------------------------------- KeyGTK3PgDdline ----

__LINE__   __行__
  
編譯器設置的內部定義（宏值）

語法
__LINE__

描述
替換為所用原始檔案的


-------------------------------------------------------- KeyGTK3PgDdpath ----

__PATH__   __路徑__
  
編譯器設置的內部定義（巨集字串）

語法
__PATH__

描述



-------------------------------------------------------- KeyGTK3PgDdtime ----

__TIME__   __時間__
  
編譯器設置的內部定義（宏值）

語法
__TIME__

描述
替換已使用的文本字串


-------------------------------------------------------- KeyGTK3PgDeallocate ----

Deallocate   記憶體分配清除
  
釋放以前分配的記憶體

語法
Declare Sub Deallocate cdecl ( ByVal pointer As Any Ptr )

用法
Deallocate( pointer )

參數
pointer
以前分配的緩衝區的地址。

描述
此過程將釋放以前使用 分配的記憶體。 必須是有效的指標。過程返回後，將呈現為無效（指向無效的記憶體位址），並且其使用（取消引用或再次調用Deallocate）將導致未定義的行為


-------------------------------------------------------- KeyGTK3PgDeclare ----

Declare   聲明
  
聲明模組層級或成員過程

語法
Declare Sub name [ param_list ]
Declare Function name [ param_list ] [ ByRef ] As return_type
Declare Operator op_symbol param_list [ [ ByRef ] As return_type ]

Type T
Declare Constructor [ param_list ]
Declare Destructor
Declare Sub name [ param_list ]
Declare Function name [ param_list ] [ ByRef ] As return_type
Declare Operator name [ param_list ] [ [ ByRef ] As return_type ]
Declare Property name [ ( [ param_list ] ) ] [ [ ByRef ] As return_type ]
End Type

參數
param_list
用逗號分隔的括弧括起來的參數列表。
return_type
、或 過程的返回類型。FunctionOperatorProperty
name
過程的名稱或符號。
op_symbol
運算子的名稱或符號。
T
新的用戶定義類型的名稱。

描述
該語句聲明 a 、 、 、 或 。
可以在代碼中引用該過程，而無需查看其定義，儘管它必須在某個位置定義。從本質上講，該聲明引入


-------------------------------------------------------- KeyGTK3PgDefbyte ----

DefByte   預設位元組
  
為變數名稱範圍指定默認資料類型

語法
DefByte start_letter[-end_letter ][, ...]

參數
start_letter
範圍中的第一個字母
end_letter
範圍中的最後一個字母

描述
DefByte指定未使用資料類型聲明（或根


-------------------------------------------------------- KeyGTK3PgDefdbl ----

DefDbl   默認雙精型
  
為變數名稱範圍指定默認資料類型

語法
DefDbl start_letter[-end_letter ][, ...]

參數
start_letter
範圍中的第一個字母
end_letter
範圍中的最後一個字母

描述
DefDbl指定未使用資料類型聲明（或根?


-------------------------------------------------------- KeyGTK3PgDefined ----

defined   預定義
  
前置處理器函數，用於測試是否定義了交易品種

語法
defined (symbol_name)

參數
symbol_name
要測試的品種的名稱

返回值
如果已定義交易品種，則返回非零 （），否則返回零 （）。-10

描述
給定符號名稱，如果已定義符號，則預處?


-------------------------------------------------------- KeyGTK3PgDefint ----

DefInt   默認整型
  
為變數名稱範圍指定默認資料類型

語法
DefInt start_letter[-end_letter ][, ...]

參數
start_letter
範圍中的第一個字母
end_letter
範圍中的最後一個字母

描述
DefInt指定未使用資料類型聲明（或根本?


-------------------------------------------------------- KeyGTK3PgDeflng ----

DefLng   默認長型
  
為變數名稱範圍指定默認資料類型

語法
DefLng start_letter[-end_letter ][, ...]

參數
start_letter
範圍中的第一個字母
end_letter
範圍中的最後一個字母

描述
DefLng指定未使用資料類型聲明（或根


-------------------------------------------------------- KeyGTK3PgDeflongint ----

DefLongInt   默認長整型
  
為變數名稱範圍指定默認資料類型

語法
DefLongInt start_letter[-end_letter ][, ...]

參數
start_letter
範圍中的第一個字母
end_letter
範圍中的最後一個字母

描述
DefLongInt指定未使用資料類型聲明（或根本


-------------------------------------------------------- KeyGTK3PgDefshort ----

DefShort   默認短整型
  
為變數名稱範圍指定默認資料類型

語法
DefShort start_letter[-end_letter ][, ...]

參數
start_letter
範圍中的第一個字母
end_letter
範圍中的最後一個字母

描述
DefShort指定未使用資料類型聲明（或根


-------------------------------------------------------- KeyGTK3PgDefsng ----

DefSng   默認單精型
  
為變數名稱範圍指定默認資料類型

語法
DefSng start_letter[-end_letter ][, ...]

參數
start_letter
範圍中的第一個字母
end_letter
範圍中的最後一個字母

描述
DefSng指定未使用資料類型聲明（或根?


-------------------------------------------------------- KeyGTK3PgDefstr ----

DefStr   預設字元
  
為變數名稱範圍指定默認資料類型

語法
DefStr start_letter[-end_letter ][, ...]

參數
start_letter
範圍中的第一個字母
end_letter
範圍中的最後一個字母

描述
DefStr指定未使用資料類型聲明（或根本


-------------------------------------------------------- KeyGTK3PgDefubyte ----

DefUByte   預設U位元組
  
為變數名稱範圍指定默認資料類型

語法
DefUByte start_letter[-end_letter ][, ...]

參數
start_letter
範圍中的第一個字母
end_letter
範圍中的最後一個字母

描述
DefUByte指定未使用資料類型聲明（或根?


-------------------------------------------------------- KeyGTK3PgDefuint ----

DefUInt   默認U整型
  
為變數名稱範圍指定默認資料類型

語法
DefUInt start_letter[-end_letter ][, ...]

參數
start_letter
範圍中的第一個字母
end_letter
範圍中的最後一個字母

描述
DefUInt指定未使用資料類型聲明（或根本不


-------------------------------------------------------- KeyGTK3PgDefulongint ----

Defulongint   默認U長整型
  
為變數名稱範圍指定默認資料類型

語法
Defulongint start_letter[-end_letter ][, ...]

參數
start_letter
範圍中的第一個字母
end_letter
範圍中的最後一個字母

描述
Defulongint指定未使用資料類型聲明（或根本?


-------------------------------------------------------- KeyGTK3PgDefushort ----

DefUShort   默認U短整型
  
為變數名稱範圍指定默認資料類型

語法
DefUShort start_letter[-end_letter ][, ...]

參數
start_letter
範圍中的第一個字母
end_letter
範圍中的最後一個字母

描述
DefUShort指定未使用資料類型聲明（或根?


-------------------------------------------------------- KeyGTK3PgDestructor ----

Destructor   析構函數
  
當類或用戶定義的類型超出範圍或被銷毀時自動調用

語法
Type typename
field declarations
Declare Destructor ( )
End Type

Destructor typename ( ) [ Export ]
statements
End Destructor

參數
typename 
的名稱TypeClass

描述
當使用者定義的或變數超出範圍或使用運算子顯式銷毀時，將調用析構函數方法。
是為其聲明和定義方法的類型的名稱。的名稱解析遵循與 在 中使用的過程相同的規則。
該方法?


-------------------------------------------------------- KeyGTK3PgDim ----

Dim   定義
  
聲明變數

語法
Dim [Shared] name1 As DataType [, name2 As DataType, ...]
或
Dim [Shared] As DataType name1 [, name2, ...]
陣 列：
Dim name ( [lbound To] ubound [, ...] ) As DataType
Dim name ( Any [, Any...] ) As DataType
Dim name ( ) As DataType
初始值設定項：
Dim scalar_symbol As DataType = expression | Any
Dim array_symbol (arraybounds) As DataType = { expression [, ...] } | Any
Dim udt_symbol As DataType = ( expression [, ...] ) | Any

描述
按名稱聲明變數並保留記憶體以容納它。
變數必須先聲明，然後才能在 -lang fb 方言中使用，或者在其他方言中使用。只有在 -lang qb 和 -lang fblite 方言中，變數可以在不首先聲明它們的情


-------------------------------------------------------- KeyGTK3PgDir ----

Dir   目錄取名稱
  
在檔案系統中搜索並返回有關專案的資訊;執行目錄搜索屬性

語法
# Include "dir.bi"

Declare Function Dir ( ByRef item_spec As Const String, ByVal attrib_mask As Integer = fbNormal, ByRef out_attrib As Integer ) As String
Declare Function Dir ( ByRef item_spec As Const String, ByVal attrib_mask As Integer = fbNormal, ByVal p_out_attrib As Integer Ptr = 0 ) As String
Declare Function Dir ( ByVal attrib_mask As Integer = fbNormal, ByRef out_attrib As Integer ) As String
Declare Function Dir ( ByVal attrib_mask As Integer = fbNormal, ByVal p_out_attrib As Integer Ptr = 0 ) As String

用法
result = Dir( item_spec, [ attrib_mask ], out_attrib ] )
result = Dir( item_spec [, [ attrib_mask ] [, p_out_attrib ] ] )
result = Dir( out_attrib )
result = Dir( [ p_out_attrib ] )

參數
item_spec
要與專案名稱匹配的模式。
attrib_mask
要匹配項屬性所依據的位元遮罩。
out_attrib
引用分配給找到的每個項的屬性（如果有）的位元遮罩。
p_out_attrib
指向分配了找到的每個項屬性（如果有）的位元遮罩的指針。

返回值
如果未找到與名稱或屬性遮罩匹配的專案，則 （or ） 將賦值為零並返回空字串。否則，（或 ）將分配專案的屬性遮罩，並返回不帶路徑的專案名稱。item_specattrib_maskout_attrib*p_out_attribout_attrib*p_out_attrib

描述
Dir返回與作?


-------------------------------------------------------- KeyGTK3PgDo ----
Do   重複
Description



-------------------------------------------------------- KeyGTK3PgDoloop ----

Do...Loop
  
用於迴圈的控制流語句

語法
Do [ { Until | While } condition ]
[ statement block ]
Loop
or
Do
[ statement block ]
Loop [ { Until | While } condition ]

描述
該語句執行以下語句塊中的語句，直到/同時條件（如果有）的計算結果為 true。
如果使用，則當條件計算結果為 true 時，語句將停止重複語句塊。關鍵字具有相反的效果，如果條件計算結果為 false?


-------------------------------------------------------- KeyGTK3PgDots ----

... (Ellipsis)
  

	用於代替過程參數傳遞可變數量的參數，或用作陣列聲明中的上限，以表示元素數將由初始值設定項確定。

語法
Declare { Sub | Function } proc_name cdecl ( param_list, ... )  { | [ ByRef ] As return_type }

#define identifier( [ parameters, ] variadic_parameter... ) body

Dim array_symbol ([lbound To] ...) [As datatype] => { expression_list }

描述
可變參數程式
省略號（三個點，）在過程聲明和定義中用於指示變數參數清單。
必須始終指定第一個參數（至少），並且必須使用 C 調用約定調用該過程。
?


-------------------------------------------------------- KeyGTK3PgDouble ----

Double   雙精度
  
標準資料類型：64 位浮點

語法
Dim variable As Double

描述
Double 是一種 64 位浮點資料類型，用於存儲更精確的十進位數字。它們可以在 到 的範圍內保存正值，也可以在 到 的範圍內保存負值，或者保存為 零 （）。它們最多包含 53 位精度，或大約 15 位?


-------------------------------------------------------- KeyGTK3PgDraw ----

Draw   繪圖
  
用於序列化圖元繪圖的聲明

語法
Draw [target,] cmd

參數
target
要利用的緩衝區
cmd
包含命令序列的字串

描述
繪圖將通過 / 緩衝區（如果指定）在當前工作頁面集上進行。
該語句可用於同時發出多個繪圖命令;快速繪製圖形很有用。命令字串接受以下命令：
用於列印圖元的命令：Sc


-------------------------------------------------------- KeyGTK3PgDrawString ----

Draw String   繪圖
  
用於將文本呈現到圖像或螢幕的圖形語句。

語法
Draw String [buffer,] [STEP] (x, y), text [,color [, font [, method [, (alpha|blender) [, parameter] ] ] ] ]

用法
Draw String [buffer,] [STEP] (x, y), text [, color]
Draw String [buffer,] [STEP] (x, y), text , , font [, method [, alpha ] ]
Draw String [buffer,] [STEP] (x, y), text , , font, Custom, blender [, parameter]

參數
buffer
要在其上繪製字串的子畫面。如果未提供，它將被繪製到螢幕上。
STEP
使用相對座標。如果添加，則相對於最後一個繪製點平移 x 和 y 座標。STEP
x,y
要繪製的水準/垂直位置，相對于螢幕的左上角（除非使用 - 見上文）。文本的左上角將在此位置繪製。STEP
text
包含要繪製的文本的字串
color
如果未提供字體，則允許您選擇文本的顏色。如果省略，則使用默認前臺。
如果提供了字體，則忽略，並且字體本身指定每個圖元的顏色。Colorcolor
font
包含自訂字體的圖像緩衝區。如果未提供字體，則使用當前文本解析度的標準字體，並忽略以下參數。
method|Custom
指定如何在目標曲面頂部繪製字體字元。允許使用與為語句找到的相同方法，唯一的區別是預設方法是用於此函數。此參數僅適用於自訂字體。PutTrans
alpha
alpha 值，範圍為 0-255。此參數僅適用於 或 方法。AddAlpha
b


-------------------------------------------------------- KeyGTK3PgDylibfree ----

DyLibFree   動態庫卸載
  
從記憶體中卸載動態連結程式庫

語法
Declare Sub DyLibFree ( ByVal libhandle As Any Pointer )

用法
DyLibFree( libhandle )

參數
libhandle
要卸載的庫的控制碼。

描述
DyLibFree用於在運行時庫中發佈以前


-------------------------------------------------------- KeyGTK3PgDylibload ----

DyLibLoad   動態庫載入
  
在運行時載入到動態連結程式庫 （DLL） 到記憶體中

語法
Declare Function DyLibLoad ( ByRef libname As String ) As Any Pointer

用法
result = DyLibLoad ( libname )

參數
libname
包含要載入的庫的名稱。String

返回值
已載入庫的控制碼。零對錯誤Pointer

描述
DyLibLoad用於在運行時庫中連結到程式。此函數執行連結並返回一個控制碼，該控制碼在調用庫中的函數時必須?


-------------------------------------------------------- KeyGTK3PgDylibsymbol ----

DyLibSymbol   動態庫位址
  
返回 dll 中函數或變數的位址

語法
Declare Function DyLibSymbol ( ByVal libhandle As Any Ptr, ByRef symbol As String ) As Any Ptr
Declare Function DyLibSymbol ( ByVal libhandle As Any Ptr, ByVal symbol As Short ) As Any Ptr

用法
result = DyLibSymbol ( libhandle, symbol )

參數
libhandle
返回的 DLL 的 Any Ptr 控制碼DyLibLoad
symbol
一個字串，包含函數的名稱，或庫中要返回的位址的變數。僅在 Windows 中，也可以是包含函數/變數的序號。Short

返回值
A 表示庫中的函數或變數。
如果函數失敗，則返回值為 0。Pointer

描述
DyLibSymbol返回一個指標，該指標指向 在 所指向的 dll 中名為 的變數或函數。 是通過使用 載入 dll


-------------------------------------------------------- KeyGTK3PgElse ----
Else   否
Description



-------------------------------------------------------- KeyGTK3PgElseif ----
ElseIf   又
Description



-------------------------------------------------------- KeyGTK3PgEncoding ----

Encoding   編碼類型
  
指定文字檔的字元格式

語法
Open filename for {Input|Output|Append} Encoding "utf-8"|"utf-16"|"utf-32"|"ascii" as [#]filenum 

參數
filename對於 {輸入|輸出|追加}
要打開的檔案名，或InputOutputAppend
Encoding "utf-8"|"utf-16"|"utf-32"|"ascii"
指示檔的編碼類型
filenum
要與打開的檔關聯的未使用的檔編號

描述
Encoding指定 Unicode 文字檔的格式，因此並使用正確的編碼。如果從語句中省略，


-------------------------------------------------------- KeyGTK3PgEnd ----

End (Statement)   結束
  
控制流語句以結束程式。

語法
Declare Sub End ( ByVal retval As Long = 0 )

用法
End [ retval ]

參數
retval
錯誤代碼返回系統。

描述
用於退出程式並返回作業系統。可以指定可選的整數返回值以指示系統的錯誤代碼。如果未給出返回值，則在程式結束時自動返回值 。
此語句的用法不會完全關閉範圍。區域變數不會自


-------------------------------------------------------- KeyGTK3PgEndblock ----

End (Block)   結束
  
指示複合陳述式塊的結束。

語法
End { Sub | Function | If  | Select  | Type  | Enum  | Scope  | With  | Namespace  | Extern  | Constructor  | Destructor  | Operator | Property }

描述
用於指示最新代碼塊的結束。
塊的類型必須包含在命令中：、 或 之一。
結束 一個 、 、 、 、 或 塊也會關閉該塊內定義的變數的作用域。當作用域關閉時，作用域內定義的變數將被銷毀，並根?


-------------------------------------------------------- KeyGTK3PgEndif ----
End If   結
Description



-------------------------------------------------------- KeyGTK3PgEnum ----

Enum   枚舉
  
聲明枚舉類型。

語法
Enum [typename [ Explicit ] ]
symbolname [= expression] [, ...]
...
End Enum

參數
typename
的名稱Enum
symbolname
常量的名稱
expression
常量運算式
Explicit
要求符號必須由typename.symbolname

描述
Enum，表示聲明與離散值對應的符號名稱清單。如果未給出初始值，則第一項將設置為 。除非給出，否則每個後續交易品種的值都比前一個交易品種多一個。
符號可以各在自己的?


-------------------------------------------------------- KeyGTK3PgEnviron ----

Environ   環境變數
  
返回系統環境變數的值

語法
Declare Function Environ ( ByRef varname As Const String ) As String

用法
result = Environ[$]( varname )

參數
varname
環境變數的名稱。

返回值
返回環境變數的文本值，如果變數不


-------------------------------------------------------- KeyGTK3PgEof ----

EOF   文件到尾
  
檢查是否已到達打開檔的末尾

語法
Declare Function EOF ( ByVal filenum As Long ) As Long

用法
result = EOF( filenum )

參數
filenum
打開的文件的文件編號。

返回值
如果已達到檔末尾，則返回 true （-1），否則返回零 （0）。

描述
從 中打開的檔讀取 時，瞭解何時到達檔末尾非常有用，從而避免了因讀取檔末尾而導致的錯誤。使?


-------------------------------------------------------- KeyGTK3PgErase ----

Erase   擦除
  
擦除數組的聲明

語法
Declare Sub Erase ( array As Any [, ... ] )

用法
Erase( array0 [, array1 ... arrayN ] )

參數
array
要擦除的陣列。

描述
在固定長度的陣列上使用會重置所有元素，而不會釋放分配的記憶體。
在物體的情況下，有破壞然後重建。
在可變長度陣列（陣列大小已調整）上使用可釋放分配?


-------------------------------------------------------- KeyGTK3PgErfn ----

Erfn   錯誤函數
  
錯誤報告功能

語法
Declare Function Erfn ( ) As ZString Ptr

用法
result = Erfn ( ) 

返回值
返回一個指標，該指標指向標識發生錯誤的函數的字串。
如果未使用 -exx 編譯


-------------------------------------------------------- KeyGTK3PgErl ----

Erl   錯誤行
  
錯誤處理函數，用於返回發生錯誤的行

語法
Declare Function Erl ( ) As Integer

用法
result = Erl

返回值
一個 Integer 返回值，其中包含上次發生錯誤的行號。

描述
Erl將返回上次發生錯誤的行號。如果未發生任?


-------------------------------------------------------- KeyGTK3PgErmn ----

Ermn   錯誤模組
  
錯誤報告功能

語法
Declare Function Ermn ( ) As ZString Ptr

用法
result = Ermn ( ) 

返回值
返回一個指標，該指標指向標識發生錯誤的模組的字串。
如果未使用 -exx 編


-------------------------------------------------------- KeyGTK3PgErr ----

Err   錯誤
  
獲取或設置執行階段錯誤號

用法
result = Err( )
or
Err = number

描述
該函數返回 FreeBASIC 執行階段錯誤號（32 位元），該錯誤號可由內置語句和函數設置，或由程式通過 或 設置。與 不同，設置錯誤號而不調用錯誤處理常式。
有關預定義的執行階段錯誤號及其相關含義?


-------------------------------------------------------- KeyGTK3PgError ----

Error   錯誤號
  
用於強制生成錯誤的錯誤處理語句

語法
Declare Sub Error ( errno As Integer )

用法
Error number

參數
number
要生成的錯誤號

描述
Error 調用使用 On Error 指定的錯誤處理常式，或者，如果未設置任何錯誤處理常式，則中止程式，列印?


-------------------------------------------------------- KeyGTK3PgEvent ----

Event (Message Data From Screenevent)   事件
  
ScreenEvent 用於返回事件資料的預定義結構 （UDT） fbgfx.bi

語法
#include once "fbgfx.bi"
using fb
Dim variable As Event

描述
為了清楚起見，我們在這裡報告結構：
 
該欄位將包含事件類型 ID，而其餘 4 個整數將保存事件類型的敏感性資料。
 事件類型EVENT
Type Event Field = 1
    Type As Long
    Union



-------------------------------------------------------- KeyGTK3PgExec ----

Exec   外部調用
  
臨時將執行轉移到外部程式

語法
Declare Function Exec ( ByRef program As Const String, ByRef arguments As Const String ) As Long

用法
result = Exec( program, arguments )

參數
program
要將控制權移交給的程式（可執行檔）的檔案名（包括檔路徑）。
arguments
要傳遞給程式的命令列參數。

返回值
程?


-------------------------------------------------------- KeyGTK3PgExepath ----

ExePath   程式路徑
  
返回正在運行的程式的路徑

語法
Declare Function ExePath ( ) As String

用法
result = ExePath

返回值
設置為正在運行的程式的路徑的變數。String


-------------------------------------------------------- KeyGTK3PgExit ----

Exit   退出
  

	Control flow statement to exit a compound statement block

Syntax
Exit {Do | For | While | Select }
Exit {Sub | Function | Operator | Constructor | Destructor | Property }

Exit {Do [, Do [ , ...] ] |
For [, For [ , ...] ] | 
While [, While, [...] ] | 
Select [, Select [ , ...] ] }


Description
Leaves a code block such as a , , , , , , , , , or a   block. The execution skips the rest of the block and goes to the line after its end.

Where there are multiple  /  /  /  blocks


-------------------------------------------------------- KeyGTK3PgExp ----

Exp   指數
  
提高到給定數字的冪的返回e

語法
Declare Function Exp cdecl ( ByVal number As Double ) As Double

用法
result = Exp( number )

參數
number
那被提升到權力。Doublenumbere

返回值
將的 Double 值返回為 的冪。enumber

描述
數學常數，也稱為歐拉常數，是 和 的基數，並且是一個無理數和超越數。二十個有效數字的值為：。所需的參數可以是函數範圍內的任何有效數值運算式。如果太大，則返?


-------------------------------------------------------- KeyGTK3PgExport ----

Export   匯出
  
定義說明符，用於指示 DLL 中的過程應從其他程式中可見

語法
{ Sub | Function } proc_name ( argumentlist ) [ [ ByRef ] As datatype ] Export

描述
如果在 DLL 中使用此子句定義了函數，則該函數將添加到公共匯出表中，因此外部


-------------------------------------------------------- KeyGTK3PgExtends ----

Extends   派生類型
  
指定從中派生新類型的基類型

語法
Type|Union typename Extends base_typename
...
End Type|Union

描述
Extends聲明派生自 。派生的用戶定義類型 ，繼承基類型的欄位和方法。 物件可以代替物件使用。從繼承的欄位和方法將像 的成員一樣隱式訪問。
但是，如果繼承的成員具有相同的識別字，則?


-------------------------------------------------------- KeyGTK3PgExtendsWstring ----

Extends Wstring   派生類型
  
指定繼承 Wstring 行為的類型

語法
Type|Union typename Extends Wstring [, base_typename]
...
End Type|Union

描述
Extends Wstring聲明繼承 的屬性和行為。目的是允許使用者創建自訂字串類型（即動態記憶體管理），這些類型可以很好地集成到現有的內置 fbc 編譯器中（與 fbc 類型的良好互通性）。
使用合


-------------------------------------------------------- KeyGTK3PgExtendsZstring ----

Extends Zstring   派生類型
  
指定繼承 Z 字元串列為的類型

語法
Type|Union typename Extends Zstring [, base_typename]
...
End Type|Union

描述
Extends Zstring聲明繼承 的屬性和行為。目的是允許使用者創建自訂字串類型（即動態記憶體管理），這些類型可以很好地集成到現有的內置 fbc 編譯器中（與 fbc 類型的良好互通性）。
使?


-------------------------------------------------------- KeyGTK3PgExtern ----

Extern   外部擴展
  
聲明具有外部連結的變數、陣列或物件

語法
Extern [ Import ] symbolname[ (subscripts) ] [ Alias "aliasname" ] As DataType [, ...]

參數
symbolname
變數、陣列或物件的名稱。
aliasname
變數、陣列或物件的備用外部名稱。

描述
聲明為外部名稱，這意味著它是外部模組的全域模組，包括那些要編譯為靜態和動態庫 （DLL） 的模組。
僅聲明變數、陣列和物件，而不定義它們（與 或 ?


-------------------------------------------------------- KeyGTK3PgExternBlock ----

Extern...End Extern
  
語句塊，允許調用為特定語言或平臺編譯的函數。

語法
Extern { "C" | "C++" | "Windows" | "Windows-MS" | "rtlib" } [ Lib "libname" ]
declarative statements
End Extern

描述
Extern塊為過程提供默認調用約定，並強制要求特定的名稱修飾。
塊為過程提供了默認的調用約定，並且還保留了其中聲明的所有名稱的大小寫。在沒有 EXTERN 塊的情況下，可以通過與包?


-------------------------------------------------------- KeyGTK3PgFalse ----

False   假
  
編譯器設置的固有常量

語法
Const False As Boolean

描述
在使用的位置


-------------------------------------------------------- KeyGTK3PgFBArray ----

Fbarray (Array Descriptor Structure And Access)
  
包含檔中的預定義結構 （UDT） 和過程聲明，可用於訪問陣列描述符資料欄位。fbc-int/array.bi

語法
從：./inc/fbc-int/array.bi

# If __FB_LANG__ = "fb"
Namespace FBC
# endif

Const FB_MAXDIMENSIONS As Integer = 8

Type FBARRAYDIM
    Dim As UInteger elements     “”元素數

    Dim As Integer LBound        '' 尺寸下限

    Dim As Integer UBound        '' 尺寸上限

End Type

Const FBARRAY_FLAGS_DIMENSIONS = &h0000000f    在 dimTb（） 中分配的條目數

Const FBARRAY_FLAGS_FIXED_DIM  = &h00000010    '' 陣列具有固定數量的維度

Const FBARRAY_FLAGS_FIXED_LEN  = &h00000020    '' 陣列指向固定長度記憶體

Const FBARRAY_FLAGS_RESERVED   = &hffffffc0    '' 保留，請勿使用


Type FBARRAY
    Dim As Any Ptr index_ptr     '' @array（0， 0， 0， ... ）

    Dim As Any Ptr base_ptr      記憶體在陣列最低邊界處開始的''

    Dim As UInteger size         “”已分配內容的位元組大小

    Dim As UInteger element_len  單個元素的“”位元組大小

    Dim As UInteger dimensions   '' 尺寸數

    Dim As UInteger flags        “” FBARRAY_FLAGS_*


    '' 注意尺寸的數量;全血細胞計數可分配

    “”一個較小的描述符，少於 FB_MAXDIMENSIONS

    dimTb（） 中的 ''，如果在編譯時已知它們

    永遠不需要“”。始終尊重數量

    訪問 dimTb（） 時的'' 尺寸


    Dim As FBARRAYDIM dimTb(0 To FB_MAXDIMENSIONS-1)
End Type

Extern "rtlib"
    Declare Function ArrayDescriptorPtr Alias "fb_ArrayGetDesc" _
        ( array() As Any ) As FBC.FBARRAY Ptr
    Declare Function ArrayConstDescriptorPtr Alias "fb_ArrayGetDesc" _
        ( array() As Const Any ) As Const FBC.FBARRAY Ptr
End Extern

# If __FB_LANG__ = "fb"
End Namespace
# endif
        
用法
#include once "fbc-int/array.bi"
using FBC

' then:
Dim pd As FBARRAY Ptr
...
pd = ArrayDescriptorPtr ( array() )

' or safer:
Dim pd As Const FBARRAY Ptr
...
pd = ArrayConstDescriptorPtr ( array() )

參數
pd 
指向陣列描述符的指標的名稱
array 


-------------------------------------------------------- KeyGTK3PgFBMemcopy ----

Fb_Memcopy
  
將區塊從一個位置複製到另一個位置

語法
Declare Function fb_memcopy cdecl ( ByRef dst As Any, ByRef src As Any, ByVal bytes As UInteger ) As Any Ptr

用法
[result =] fb_memcopy( dst, src, bytes )

參數
dst
目標記憶體的起始位址
src
源記憶體的起始位址
bytes
要複製的位元組數

返回值
返回目標記憶體的起始位址。

描述
fb_memcopy將給定數量的位元組從記憶體位置複製到記憶體位置。
每個起始位址都取自對變數或陣列元素的引用。
記憶體區域不得重疊（否則，不能保證?


-------------------------------------------------------- KeyGTK3PgFBMemcopyclear ----

fb_MemCopyClear
  
將區塊的第一部分從一個位置複製到另一個位置，並清除其餘部分

語法
Declare Sub fb_MemCopyClear ( ByRef dst As Any, ByVal dstlen As UInteger, ByRef src As Any, ByVal srclen As UInteger )

用法
fb_memcopy( dst, dstlen, src, srclen )

參數
dst
目標記憶體的起始位址
dstlen
要寫入的位元組數
src
源記憶體的起始位址
srclen
要複製的第一個位元組數（其他已清除）

描述
fb_memcopycopy將給定數量的位元組（）從記憶體位置複製到記憶體位置，但只有第一個位元組被真正複製，其餘的被清除（-位元組）。
每?


-------------------------------------------------------- KeyGTK3PgFBMemmove ----

Fb_Memmove
  
將區塊從一個位置複製到另一個位置

語法
Declare Function fb_memmove cdecl ( ByRef dst As Any, ByRef src As Any, ByVal bytes As UInteger ) As Any Ptr

用法
[result =] fb_memmove( dst, src, bytes )

參數
dst
目標記憶體的起始位址
src
源記憶體的起始位址
bytes
要複製的位元組數

返回值
返回目標記憶體的起始位址。

描述
fb_memmove將給定數量的位元組從記憶體位置複製到記憶體位置。每個起始位址都取自對變數或陣列元素的引用。
複製就像使用中間緩衝區一樣進行，允?


-------------------------------------------------------- KeyGTK3PgField ----

Field   欄位
  
指定欄位對齊方式。

語法
Type|Union typename Field = { 1 | 2 | 4 }
...
End Type|Union

描述
Field可用於打包或比默認佈局更緊密。最常用的值是 ，這會導致 盡可能緊密地打包 或，而不會在欄位之間或 末尾添加任何填充位元組。 只能用於減少欄位對齊?


-------------------------------------------------------- KeyGTK3PgFileattr ----

FileAttr   檔案屬性
  
返回有關打開的檔編號的資訊

語法
Declare Function FileAttr ( ByVal filenum As Long, ByVal returntype As Long = 1 ) As Integer

用法
#include "file.bi"
result = FileAttr( filenum, [ returntype ] )

或

#include "vbcompat.bi"
result = FileAttr( filenum, [ returntype ] )

參數
filenum
打開的檔或設備的檔編號Open
returntype
一個整數值，指示要返回的資訊類型。

返回值
與返回類型關聯的值，否則出錯時為 0。

描述
根據提供的檔號返回有關檔編號的資訊returntype
價值描述不斷1檔模式fbFileAttrMode2檔案控制代碼fbFileAttrHandle3編碼fbF


-------------------------------------------------------- KeyGTK3PgFilecopy ----

FileCopy   檔複製
  
複製檔

語法
Declare Function FileCopy ( ByVal source As ZString Ptr, ByVal destination As ZString Ptr ) As Long

用法
#include "file.bi"
FileCopy source, destination

或

#include "file.bi"
result = FileCopy( source, destination )

參數
source
指定要從中複製的檔的檔案名的參數。此檔必須存在。String
destination
指定要複製到的檔的檔案名的參數。如果此檔存在，它將被覆蓋。任何打開的檔案控制代碼當前都不應引用此文件。String

返回值
成功時或發生錯誤時返回。01

描述
將原始檔案的內容複製到目的檔案中，?


-------------------------------------------------------- KeyGTK3PgFiledatetime ----

FileDateTime   檔日期時間
  
將檔的上次修改日期和時間作為“串列日期”返回 

語法
Declare Function FileDateTime ( ByVal filename As ZString Ptr ) As Double

用法
#include "file.bi"
result = FileDateTime( filename )

或

#include "vbcompat.bi"
result = FileDateTime( filename )

參數
filename
要檢索其日期和時間的檔案名。



-------------------------------------------------------- KeyGTK3PgFileexists ----

FileExists   文件存在
  
測試檔是否存在

語法
Declare Function FileExists ( ByVal filename As ZString Ptr ) As Long

用法
#include "file.bi"
result = FileExists( filename )

或

#include "vbcompat.bi"
result = FileExists( filename )

參數
filename
用於測試是否存在的檔案名。

返回值
如果檔存在，則返回非零 （），否則返回零 （）。-10

描述
FileExists測試檔是否存在。
在內部，它可能會發出Open（）和Close（）函數，這可能會產生後果 - 例如，文


-------------------------------------------------------- KeyGTK3PgFileflush ----

FileFlush
  
將應用程式流緩衝區刷新到系統，或將系統緩衝區刷新到檔

語法
Declare Function FileFlush ( ByVal filenum As Long = -1, ByVal systembuffers As Long = 0 ) As Long

用法
#include "file.bi"
result = FileFlush()
result = FileFlush( filenum )
result = FileFlush( filenum, systembuffers )

參數
filenum
綁定檔或設備的檔編號。如果未給出，或 -1，則刷新所有打開的檔。
systembuffers
如果為非零，則將系統緩衝區刷新到物理設備。預設值為零 （0）。

返回值
返回零 （0） 表示成功，如果無法刷新檔案緩衝區，則返回錯誤代碼。

描述
FileFlush將應用程式緩衝輸出寫入基礎流，如果為非零，則寫入基礎物理?


-------------------------------------------------------- KeyGTK3PgFilelen ----

FileLen   文件大小
  
查找給定檔案名的檔的長度

語法
Declare Function FileLen ( filename As String ) As LongInt

用法
#include "file.bi"
result = FileLen(filename)

或

#include "vbcompat.bi"
result = FileLen(filename)

參數
filename
一個參數，指定要返回其長度的檔的文


-------------------------------------------------------- KeyGTK3PgFileseteof ----

FileSetEof
  
設置綁定到文件編號的打開文件的長度

語法
Declare Function FileSetEof ( ByVal filenum As Long ) As Long

用法
#include "file.bi"
result = FileSetEof(fnum)

參數
filenum
綁定檔或設備的檔編號。

返回值
返回零 （0） 表示成功，如果無法設置檔末尾（檔大小），則返回錯誤代碼。

描述
FileSetEof根據當前檔位置設置檔的結尾。檔位置與 中一樣基於一個。
當當前檔位置位於檔末尾之前時，檔將被截斷。


-------------------------------------------------------- KeyGTK3PgFix ----

Fix   截斷
  
返回數位的整數部分，舍入到零

語法
Declare Function Fix ( ByVal number As Single ) As Single
Declare Function Fix ( ByVal number As Double ) As Double
Declare Function Fix ( ByVal number As Integer ) As Integer
Declare Function Fix ( ByVal number As UInteger ) As UInteger

用法
result = Fix( number )

參數
number
要截斷的浮點數

返回值
返回 的整數部分，舍入到零。number

描述
等效於： .例如，將返回 ，並將返回 。對於整數類型，返回的數位保持不變。
注意：此函數也等效於 。
一元可以使用用


-------------------------------------------------------- KeyGTK3PgFlip ----

Flip   翻頁
  
更改當前視頻顯示頁面

語法
Declare Function Flip ( ByVal frompage As Long = -1, ByVal topage As Long = -1 ) As Long

用法
Flip [ frompage ] [, topage ]

參數
frompage
上一頁
topage
要顯示的新頁面

返回值
如果成功，則返回零 （），或返回非零錯誤代碼以指示失敗。0

描述
在普通圖形模式下，是 和 的別名。有關詳細資訊，請參閱。
在 OpenGL 模式下，執行硬體翻頁並顯示反緩衝器的內容。建議您在 OpenGL 模式下定?


-------------------------------------------------------- KeyGTK3PgFor ----
For   循
Description



-------------------------------------------------------- KeyGTK3PgFormat ----

Format   格式化
  
以指定的格式設置數位的格式

語法
Declare Function Format ( ByVal numerical_expression As Double, ByRef formatting_expression As Const String = "" ) As String

用法
#include "string.bi"
result = Format[$]( numerical_expression, formatting_expression )

參數
numerical_expression
要格式化的數位
formatting_expression
格式化模式

返回值
Format返回一個字串，其結果的格式設置為格式設置運算式中指示的格式。
格式運算式是一個字串，可以生成數位或日期時間值。

描述
要恢復有意義的日期時間值，數值運算式必須是從相應函數獲取的日期序列。
此函數是 FreeBASIC 的一部分，?


-------------------------------------------------------- KeyGTK3PgFornext ----

For...Next
  
用於迴圈的控制流語句

語法
For iterator [ As datatype ] = startvalue To endvalue [ Step stepvalue ]
[ statement block ]
Next [ iterator ]

參數
iterator
用於從初始值迴圈訪問到結束值的變數識別字
datatype
如果指定，變數將自動使用型別宣告iteratordatatype
startvalue
表示反覆運算器起始值的運算式
endvalue
用於與反覆運算器的值進行比較的運算式
stepvalue
每次反覆運算後添加到反覆運算器的運算式

描述
迴圈初始化為 ，然後執行 遞增 ， 直到超過 。如果未顯式給出，它將設置為 。
和 的值在語句執行後立即存?


-------------------------------------------------------- KeyGTK3PgFrac ----

Frac   小數
  
返回數位的小數部分

語法
Declare Function Frac ( ByVal number As Double ) As Double
Declare Function Frac ( ByVal number As Integer ) As Integer
Declare Function Frac ( ByVal number As UInteger ) As UInteger

用法
result = Frac( number )

參數
number
要獲取分數部分的數位或運算式。

返回值
返回數位或運算式的小數部分。

描述
等效於： .
例如，將返回 ，並將返回 。對於整數類型，始終返回該值。
一?


-------------------------------------------------------- KeyGTK3PgFre ----

Fre   記憶體可用值
  
返回可用記憶體量

語法
Declare Function Fre ( ByVal value As Long = 0 ) As UInteger

用法
result = Fre( [ value ] )

參數
value
保留未使用的虛擬參數以向後相容;可以忽略。

返回值
返回可


-------------------------------------------------------- KeyGTK3PgFreefile ----

FreeFile   文件號
  
返回可用文件編號

語法
Declare Function FreeFile ( ) As Long

用法
result = FreeFile

返回值
下一個可用檔編號（如果有），否則為零 （）。0

描述
返回下一個可用檔號的編號，其有效值為 ，或者如果已打開了 255 個檔。此值是文件的必需參數。 在程式師無法跟蹤已用檔編號的複雜程式中打開檔時非常有用。


-------------------------------------------------------- KeyGTK3PgFunction ----

Function   函數
  
定義返回值的過程

語法
[Public|Private] Function identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [([parameter_list])] [ ByRef ] As return_type [Static] [Export]
statements
...
{ {Return [return_value]}|{Function = return_value}|{identifier = return_value} }
...
End Function

參數
identifier：函數
的名稱：外部可見的（對連結器）名稱括在引號中
： 
 ：external_identifierparameter_listparameter[, parameter[, ...]]parameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier：函數中引用的變數的名稱。如果參數是陣列，則識別字後必須跟空括弧。
 ：變數
的類型 ：如果調用中未指定任何參數，則參數的值typedefault_value
return_type：函數
返回的變數的類型：組成函數體
的一個或多個語句：從函數返回的值statementsreturn_value

描述
函式定義一個代碼塊，該代碼塊可以使用單個語句（函式呼叫）執行?


-------------------------------------------------------- KeyGTK3PgFunctionPtr ----

Function Pointer   函數
  
存儲指向返回值的過程的指標的資料類型Function

語法
Dim variable As Function [cdecl|pascal|stdcall] [( [parameter_list] )] [ ByRef ] [As return_type] [= initializer]

參數
parameter_list： 參數[， 參數[， ...]]
 ：parameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier：函數
中引用的變數的名稱：變數
的類型：如果調用中未指定任何參數，則參數的值typedefault_value
return_value：從函數
返回的值 ：要設置為初始值的函數的位址intializer

描述
指標是一個過程指標，用於存儲返回值的已編譯代碼的記憶體位置。如果未給出初始值，則默認初始值為零 （0）。



-------------------------------------------------------- KeyGTK3PgGetfileio ----

Get (File I/O)   獲取
  
將資料從檔讀取到緩衝區

語法
Get #filenum As Long, [position As LongInt], ByRef data As Any [, [amount As UInteger] [, ByRef bytesread As UInteger] ]
Get #filenum As Long, [position As LongInt], data As String [, , ByRef bytesread As UInteger ]
Get #filenum As Long, [position As LongInt], data() As Any [, , ByRef bytesread As UInteger ]

用法
Get #filenum, position, data [, [amount] [, bytesread ] ]
varres = Get (#filenum, position, data [, [amount] [, bytesread ] ] )

參數
filenum
打開檔時傳遞給的值。Open
position
必須開始讀取的位置。如果檔被打開，倉位元在記錄中;否則，它以位元組為單位。如果省略，則從當前檔指針位置開始讀取。位置是從 1 開始的：即檔的第一條記錄或位元組位於 位置 。
如果省略或為零 （），則檔讀取將從當前檔位置開始。For Random1position0
data
寫入資料的緩衝區。它可以是數值變數、字串、陣列、使用者定義類型或取消引用的指針。讀取操作將嘗試完全填充變數，除非達到。
獲取陣列時，後跟一對空括弧：“”。 將讀取陣列中所有值的資料。 是不允許的。
獲取 s 時，讀取的位元組數與字串資料中的位元組數相同。 是不允許的。
注意：如果要將值讀入緩衝區，則不應將指針傳遞到緩衝區;相反，您應該傳遞緩衝區中的第一個變數（這可以通過取消引用指標來完成）。如果直接傳遞指標，則將覆蓋指標變數，而不是它指向的記憶體。EOFdata()GetamountStringamountOperator * (Value Of)Get
amount
使從檔讀取到記憶體的連續變數，即從 的記憶體位置開始將檔中的資料位元組讀取到記憶體中。如果省略，則默認為 ，表示只?


-------------------------------------------------------- KeyGTK3PgGetgraphics ----

Get (Graphics)   獲取
  
獲取當前工作頁的一部分或圖像緩衝區的副本

語法
Get [source,] [STEP](x1, y1) - [STEP](x2, y2), dest

參數
source
圖像緩衝區的位址。如果省略它，則會複製當前工作頁面。
STEP
表示以下座標不是絕對座標。
[STEP](x1, y1)
要複製的子圖像左上角的座標。 指示偏移量相對於當前圖形游標位置。STEP(x1, y1)
[STEP](x2, y2)
要複製的子圖像右下角的座標。 指示 和 分別相對於 和。STEPx2y2x1y1
dest
以前分配的緩衝區的位址，用於存儲圖像資料。

描述
Get複製當前工作頁面的矩形部分，該座標由座標 （， ） 


-------------------------------------------------------- KeyGTK3PgGetjoystick ----

GetJoystick   搖桿獲取
  
從連接的遊戲裝置讀取按鈕和軸資訊

語法
Declare Function GetJoystick ( ByVal id As Long, ByRef buttons As Integer = 0, ByRef a1 As Single = 0, ByRef a2 As Single = 0, ByRef a3 As Single = 0, ByRef a4 As Single = 0, ByRef a5 As Single = 0, ByRef a6 As Single = 0, ByRef a7 As Single = 0, ByRef a8 As Single = 0 ) As Integer

用法
result = GetJoystick( id[, buttons[, a1[, a2[, a3[, a4[, a5[, a6[, a7[, a8]]]]]]]]] )

參數
id
設備 id 號 （0 - 15）
buttons
按鈕狀態
a1
第一軸值
a2
第二軸值
a3
第三軸值
a4
第四軸值
a5
第五軸值
a6
第六軸值
a7
第七軸值
a8
第八軸值

返回值
0成功或失敗。所有軸位置都以浮點格式返回。1

描述
GetJoystick將檢索按鈕狀態，以及最多 8 個軸的軸位置，對於由 和 之間的數位確定的操縱杆。按鈕的存儲方式與


-------------------------------------------------------- KeyGTK3PgGetkey ----

GetKey   鍵取值
  
返回鍵盤緩衝區中第一個鍵的 ascii 代碼

語法
Declare Function GetKey ( ) As Long

用法
result = GetKey

返回值
返回的 ascii 代碼的值。

描述
它返回鍵盤緩衝區中第一個鍵的 ascii 代碼。該鍵將從緩衝區中刪除。如果不存在金鑰，請等待它。
對於擴展鍵（返回兩個字元），擴展代碼在第一個位元組中返回，常規代碼在第?


-------------------------------------------------------- KeyGTK3PgGetmouse ----

GetMouse   滑鼠獲取
  
檢索滑鼠指標裝置的狀態

語法
Declare Function GetMouse ( ByRef x As Long, ByRef y As Long, ByRef wheel As Long = 0, ByRef buttons As Long = 0, ByRef clip As Long = 0 ) As Long
Declare Function GetMouse ( ByRef x As LongInt, ByRef y As LongInt, ByRef wheel As LongInt = 0, ByRef buttons As LongInt = 0, ByRef clip As LongInt = 0 ) As Long

用法
result = GetMouse (x, y [, [ wheel ] [, [ buttons ] [, [ clip ]]]])

參數
x
x 座標值
y
y 座標值
wheel
滾輪值
buttons
按鈕狀態
clip
剪輯狀態

返回值
0成功時，或出錯時（例如，因為滑鼠位於圖形視窗外）或失敗時。（設置執行階段錯誤）1

描述
GetMouse檢索滑鼠位置和按鈕狀態;資訊在通過引用傳遞給此函數的變數中返回。如果滑鼠不可用，則所有變數都將包含該值。
?


-------------------------------------------------------- KeyGTK3PgGosub ----

GoSub   跳轉
  
控制流語句以使用一段代碼並返回。

語法
GoSub label

描述
執行跳轉到由行標籤標記的子常式。始終使用 退出 a ，執行將在 之後的下一個語句上繼續。
跳轉必須與 相同的 main/function/sub 塊中的行標籤。子常式中的所有變數都與塊共用，不能使用


-------------------------------------------------------- KeyGTK3PgGoto ----

Goto   轉到
  
控制流語句跳轉到程式的另一部分

語法
Goto label

描述
將代碼執行跳轉到行標籤。
使用退出作用域時，將銷毀在該作用域中定義的任何區域變數（調用析構函數）。
當 跳過變數定義而不是變數作用域的末尾時，可能會不允許使用。如果變數需要構?


-------------------------------------------------------- KeyGTK3PgHex ----

Hex   十六進位
  
返回給定數字的十六進位數

語法
Declare Function Hex ( ByVal number As UByte ) As String
Declare Function Hex ( ByVal number As UShort ) As String
Declare Function Hex ( ByVal number As ULong ) As String
Declare Function Hex ( ByVal number As ULongInt ) As String
Declare Function Hex ( ByVal number As Const Any Ptr ) As String

Declare Function Hex ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

用法
result = Hex[$]( number [, digits ] )

參數
number
計算為數位的數位或運算式。浮點數將轉換為 .LongInt
digits
要返回的可選位數。

返回值
包含 的無符號十六進位表示形式的字串。number

描述
返回整數 的無符號十六進位字串表示形式。十六進位數字的範圍為 0-9 或 A-F。
如果指定 > 0，則結果字串將恰好是該長度。如


-------------------------------------------------------- KeyGTK3PgHibyte ----

HiByte   單字節高位
  
獲取運算元的第二個位元組。

語法
#define HiByte( expr ) ((Cast(UInteger, expr) And &h0000FF00) Shr 8)

用法
result = HiByte( expr )

參數
expr
轉換為值的數值運算式。UInteger

返回值
返回 expr 的低 16 位元字的高位元組值。

描述
此宏將數值運算式轉換為值，然後展開?


-------------------------------------------------------- KeyGTK3PgHiword ----

HiWord   雙位元組高位
  
獲取運算元的第二個 16 位字。

語法
#define HiWord( expr ) ((Cast(UInteger, expr) and &hFFFF0000) Shr 16)

用法
result = HiWord( expr )

參數
expr
轉換為值的數值運算式。UInteger

返回值
返回 expr 的低 32 位 dword 的 16 位高字的值。

描述
此宏將數值運算式轉換為一個值，然後擴展為表示其第?


-------------------------------------------------------- KeyGTK3PgHour ----

Hour   時間取小時
  
從日期序列中獲取一天中的小時數 

語法
Declare Function Hour ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Hour( dateserial )

參數
date_serial
日期序列

返回值
從包含日期序列格式的日期的變數中


-------------------------------------------------------- KeyGTK3PgIfthen ----

If...Then
  
用於條件分支的控制流語句

語法
If expression Then [statement(s)] [Else [statement(s)]] [End If]
or
If expression Then : [statement(s)] [Else [statement(s)]] : End If
or
If expression Then
[statement(s)]
[ ElseIf expression Then ]
[statement(s)]
[ Else ]
[statement(s)]
End If

備註：（不帶空格）也像在QB中一樣支持向後相容。EndIf

描述
If...Then是一種做決定的方式。
它是一種僅在條件為 true 時才執行代碼的機制，並且可以根據更多條件提供要執行的替代代碼：
如果條件為真，則執行代碼（緊隨其後）。


-------------------------------------------------------- KeyGTK3PgIif ----

IIf   如果是
  
返回兩個值之一的條件函數。

語法
IIf ( condition, expr_if_true, expr_if_false )

參數
condition
要測試的條件。
非零值的計算結果為 true，而零值的計算結果為 false。
expr_if_true
要計算並返回 if 為 true 的運算式。
它必須返回：condition
一個數值，可以是整數、浮點數或指標，包括布林值，
或字串值，
或 UDT 值。
expr_if_false
要計算並返回 if 為 false 的運算式。
它必須與（數位、字串或 UDT）的類型相同。conditionexpr_if_true

返回值
if 為非零，否則conditionexpr_if_trueexpr_if_false

描述
IIf返回不同的數位或字串或 UDT 值（不是引用），具體取?


-------------------------------------------------------- KeyGTK3PgImageConvertRow ----

ImageConvertRow   圖像轉換行
  
將一行圖像資料轉換為其他色彩深度

語法
Declare Sub ImageConvertRow ( ByVal src As Any  Ptr, ByVal src_bpp As Long, ByVal dst As Any  Ptr, ByVal dst_bpp As Long, ByVal width As Long, ByVal isrgb As Long = 1 )

用法
ImageConvertRow( src, src_bpp, dst, dst_bpp, width [, isrgb ] )

參數
src
源行開頭的地址。源可以是位元深度為每圖元 24 位元或 32 位元的全彩色圖像，也可以是位元深度為每圖元 1-8 位元的調色板圖像。只有在進行轉換時處於使用正確調色板的螢幕模式時，轉換調色板圖像才能正常工作。
src_bpp
源行中每個圖元的位元數。第1-8、24和32段。
dst
目標行開頭的位址。圖像可以是每圖元 16 位元或 32 位元的全彩色圖像。如果源是調色板圖像，則目標也可以是每圖元 1 到 8 位


-------------------------------------------------------- KeyGTK3PgImagecreate ----

ImageCreate   圖像創建
  
為映射分配和初始化存儲

語法
Declare Function ImageCreate ( ByVal width As Long, ByVal height As Long, ByVal color As ULong = transparent_color ) As Any Ptr
Declare Function ImageCreate ( ByVal width As Long, ByVal height As Long, ByVal color As ULong = transparent_color, ByVal depth As Long ) As Any Ptr

用法
result = ImageCreate( width, height [, [ color ][, depth ]] )

參數
width
所需寬度，以圖元數為單位。
height
所需高度（以圖元數為單位）。
color
用於填充圖像區域的圖元值。
depth
所需的色彩深度，以每一像素位元數為單位。

返回值
如果無法創建映射，則返回 NULL （），否則返回映射的地址。 必須在圖形模式初始化後調用，否則它將返回 。
因此，在變數聲明的情況下，不能用作集成初始值設定項，即使在（在成員欄位或構造函數中）中也是如此，因為（共用變數的）初始化值是在程式開始時設置的，然後運行任何用戶代碼。圖像分配調用必須在單獨的可執行指令中，並且在圖形模式初始?


-------------------------------------------------------- KeyGTK3PgImageDestroy ----

ImageDestroy   圖像銷毀
  
銷毀和取消分配映射的存儲

語法
Declare Sub ImageDestroy ( ByVal image As Any Ptr )

用法
ImageDestroy( image )

參數
image
要銷毀的映射的地址。

描述
銷毀 所指向 的圖像，該圖像必須是從調用 ?


-------------------------------------------------------- KeyGTK3PgImageInfo ----

ImageInfo   圖像資訊
  
檢索有關圖像的資訊

語法
Declare Function ImageInfo ( ByVal image As Const Any Ptr, ByRef width As Long = 0, ByRef height As Long = 0, ByRef bypp As Long = 0, ByRef pitch As Long = 0, ByRef pixdata As Any Ptr = 0, ByRef size As LongInt = 0 ) As Long
Declare Function ImageInfo ( ByVal image As Const Any Ptr, ByRef width As LongInt, ByRef height As LongInt, ByRef bypp As LongInt = 0, ByRef pitch As LongInt = 0, ByRef pixdata As Any Ptr = 0, ByRef size As LongInt = 0 ) As Long

用法
in the LONG (or INTEGER<32>) version of the function:
result = ImageInfo( image [, [ width ] [, [ height ] [, [ bypp ] [, [ pitch ] [ , [ pixdata ] [, size ]]]]]] )
in the LONGINT (or INTEGER<64>) version of the function:
result = ImageInfo( image , width , height [, [ bypp ] [, [ pitch ] [ , [ pixdata ] [, size ]]]] )

參數
image
映射的地址。
width
存儲圖像的寬度（以圖元為單位）。
height
存儲圖像的高度（以圖元為單位）。
bypp
存儲圖像每圖元的位元組數 - 即單個圖元的大小，以位元組為單位。
pitch
存儲圖像的間距 - 即每條掃描線（行）的大小，以位元組為單位。請注意，這可能不僅僅是 ，因為掃描線可能會被填充，以允許它們在記憶體中更好地對齊。width * bypp
pixdata
存儲圖像的第一條掃描線的起始位址。
size
將映射的大小存儲在記憶體中（以位元組為單位）。

返回值
如果未指向有效圖像，則返回一個 （）。否則，將為 、 、 和 分配適當的值，並返回零 （）。image1widt


-------------------------------------------------------- KeyGTK3PgImplements ----

Implements   繼承介面
  
指定要由用戶定義類型
實現的介面 注意：存根頁。即使此關鍵字已保留，介面尚未實現。

語法
Type typename Implements interface
...
End Type

描述

例

方言差異
在 -lang qb 方言中不可用，除非使用別名 引用。__Implements

與QB的區別
FreeBASIC 的


-------------------------------------------------------- KeyGTK3PgImport ----

Import   導入
  
位於 DLL 中的公共資料的外部連結屬性

語法
Extern Import symbolname[( subscripts)] [ Alias "aliasname"] [ As DataType] [, ...]

描述
僅在外部模組中（使用關鍵字）用於訪問 Win32 DLL 中的全域變數：變數名稱將添加到動態?


-------------------------------------------------------- KeyGTK3PgInclib ----

#inclib   #包含庫
  
前置處理器指令

語法
#inclib "libname"

描述
在連結過程中包含一個庫，就


-------------------------------------------------------- KeyGTK3PgInclude ----

#include   #包含
  
前置處理器語句，用於包含另一個原始檔案的內容

語法
#include [once] "file"

描述
#include在指令出現的位置插入來自另一個檔的原始程式碼。這具有從包含檔編譯原始程式碼的效果，就好像它是包含它的原始檔案的一部分一樣。一旦編譯器到達包含檔的末尾，原始原始檔案將繼?


-------------------------------------------------------- KeyGTK3PgInkey ----

Inkey   鍵輸入
  
返回一個字串，表示在鍵盤緩衝區中等待的第一個鍵

語法
Declare Function Inkey ( ) As String

用法
result = Inkey[$]

返回值
在鍵盤緩衝區中找到的第一個字元，如果未找到，則為空字串 （）。""

描述
掃視鍵盤緩衝區並返回找到的第一個字元（如果有）的表示形式。然後，該鍵將從緩衝區中刪除，並且不會回顯到螢幕上。如果鍵盤緩衝區為空，


-------------------------------------------------------- KeyGTK3PgInp ----

Inp   埠
  
返回硬體埠處的值。

語法
Declare Function Inp ( ByVal port As UShort ) As Integer

用法
value = Inp(port)

參數
port
要讀取的埠號。

返回值
指定埠處


-------------------------------------------------------- KeyGTK3PgInput ----

Input   輸入
  
從鍵盤讀取值清單

語法
Input [;] ["prompt" ,|; ] variable_list

參數
prompt
作為提示寫入螢幕的可選字串文本。如果後跟分號 （），則提示符後面將附加一個問號 （）。如果它後跟逗號，則不會附加任何內容。;"? "
variable_list
逗號分隔的變數清單，用於保存從用戶讀取的值。

描述
從鍵盤讀取清單值，直到第一個回車符。數值從其字串表示形式轉換為變數清單中的相應類型。字元在鍵入?


-------------------------------------------------------- KeyGTK3PgInputfilemode ----

Input (File Mode)   輸入
  
指定要為輸入模式打開的文字檔

語法
Open filename for Input [Encoding encoding_type] [Lock lock_type] as [#]filenum 

參數
filename
要打開以進行輸入的檔案名
encoding_type
指示檔的編碼類型
lock_type
鎖定以在檔打開時使用
filenum
要與打開的檔關聯的未使用的檔編號

描述
用於打開文字檔進行讀取的檔模式。
此模式允許使用 按順序讀取文本行，或讀取 以 逗號分隔的值。
文字檔不能在FreeBASIC中


-------------------------------------------------------- KeyGTK3PgInputnum ----

Input()
  
從控制台或檔中讀取許多字元

語法
Declare Function Input ( n As Integer ) As String
Declare Function Input ( n As Integer, filenum As Integer ) As String

用法
result = Input[$]( n [, [#]filenum ] )

參數
n
要讀取的位元組數。
filenum
綁定檔或設備的檔編號。

返回值
返回讀取的字元中的 a 個。String

描述
從 控制台或 指定的綁定檔/設備讀取許多字元。
第


-------------------------------------------------------- KeyGTK3PgInputPp ----

Input #   輸入
  
從文字檔中讀取值列表

語法
Input # filenum, variable_list

參數
filenum
為打開的檔或設備的檔編號Input
variable_list
用於保存讀取的值的變數清單

描述
通過綁定檔編號從文字檔讀取一組以分隔符號分隔的值，並按讀取順序將它們寫入 中的變數。如果變數是數值，則讀取值將從其字串表示形式轉換為相應的類型。



-------------------------------------------------------- KeyGTK3PgInstr ----

InStr   字串搜索
  
查找字串中子字串或字元的第一個匹配項

語法
Declare Function InStr ( ByRef str As Const String,  [ Any ] ByRef substring As Const String ) As Integer
Declare Function InStr ( ByRef str As Const WString, [ Any ] ByRef substring As Const WString ) As Integer
Declare Function InStr ( ByVal start As Integer, ByRef str As Const String, [ Any ] ByRef substring As Const String ) As Integer
Declare Function InStr ( ByVal start As Integer, ByRef str As Const WString, [ Any ] ByRef substring As Const WString ) As Integer

用法
first = InStr( [ start, ] str, [ Any ] substring )

參數
str
要搜索的字串。
substring
要查找的子字串。
start
搜索開始的位置。第一個字元從位置 1 開始。str

返回值
中第一個出現的 的位置。substringstr

描述
定位子字串或字元在字串中首次出現的位置。在第一種形式（不帶參數）中，搜索從第一個字元開始。
如


-------------------------------------------------------- KeyGTK3PgInstrrev ----

InStrRev   字串搜索反向
  
查找字串中子字串或字元的最後一個匹配項

語法
Declare Function InStrRev ( ByRef str As Const String, [ Any ] ByRef substring As Const String, ByVal start As Integer = -1 ) As Integer
Declare Function InStrRev ( ByRef str As Const WString, [ Any ] ByRef substring As Const WString, ByVal start As Integer = -1 ) As Integer

用法
last = InStrRev( str, [ Any ] substring [, start ]  )

參數
str
要搜索的字串。
substring
要查找的子字串。
start
搜索開始的位置。第一個字元從位置 1 開始。str

返回值
中最後出現的 的位置。substringstr

描述
定位子字串或字元在字串中最後出現的位置。如果未給出參數或小於零，則搜索從最後一個字元開始。
如果出現以下情


-------------------------------------------------------- KeyGTK3PgInt ----

Int   數取整
  
返回數字的下限

語法
Declare Function Int ( ByVal number As Single ) As Single
Declare Function Int ( ByVal number As Double ) As Double
Declare Function Int ( ByVal number As Integer ) As Integer
Declare Function Int ( ByVal number As UInteger ) As UInteger

用法
result = Int( number )

參數
number
要舍入的浮點數

返回值
返回 的下限，即小於或等於它的最大整數。number

描述
 Int返回 的底線。例如，將返回 ，並將返回 。對於整數類型，


-------------------------------------------------------- KeyGTK3PgInteger ----

Integer   整數型
  
標準資料類型：32 位元或 64 位元有符號，大小與SizeOf(Any Ptr)

語法
Dim variable As Integer
Dim variable As Integer<bits>

參數
bits
一個數位常量運算式，指示所需大小的整數位元。允許的值為 、 或 。8163264

描述
整數是 FreeBASIC 用於整數數學運算和按位元運算的主要資料類型。它是數位文本的預設類型。
在第一種形式中，Integer 是 32 位或 64 位元有符號整數資料?


-------------------------------------------------------- KeyGTK3PgIs ----

Is   是類
  
語句塊中的子句。Select Case

語法
Case Is expression

描述
指定將基於運算式（包括大於 （>） 或小於 （<） 運


-------------------------------------------------------- KeyGTK3PgIsDate ----

IsDate   是日期
  
測試字串是否可以轉換為日期序列

語法
Declare Function IsDate ( ByRef stringdate As Const String ) As Long

用法
#include "vbcompat.bi"
result = IsDate( stringdate )

參數
stringdate
要測試的字串

返回值
如果日期字串可以轉換為日期序列，則返回非零 （-1），否則返回零 （0）。

描述
日期字串必須採用在作業系統的區域設置中設置的格式，才能被視為


-------------------------------------------------------- KeyGTK3PgIsredirected ----

IsRedirected   是重定向
  
檢查 stdin 或 stdout 是否重定向到檔

語法
Declare Function IsRedirected ( ByVal is_input As Long = 0 ) As Long

用法
#include "fbio.bi"
result = IsRedirected( is_input )

參數
is_input
指示要返回的資訊類型的 A。Long

返回值
如果 stdin 或 stdout 被重定向，則返回非零 （），否則返回零 （）。-10

描述
IsRedirected 檢查 stdin 或 stdout 是否重定向到檔，而不是像往常一樣連接到控制台/終端。
如果


-------------------------------------------------------- KeyGTK3PgKill ----

Kill   刪文件
  
從磁片/存儲介質中刪除檔。

語法
Declare Function Kill ( ByRef filename As Const String ) As Long

用法
result = Kill( filename )

參數
filename
檔案名是要刪除的磁片檔的名稱。如果檔不在目前的目錄中，則路徑也必須指定為 。path/file

返回值
成功時返回零 （），出錯時返回非零。0

?


-------------------------------------------------------- KeyGTK3PgLbound ----

LBound   陣列取下限
  
返回陣列維度的下限

語法
Declare Function LBound ( array() As Any, ByVal dimension As Integer = 1 ) As Integer

用法
result = LBound( array [, dimension ] )

參數
array
任何類型的陣列
dimension
要獲取 的下限的維度

返回值
返回陣列維度的下限。
描述
LBound返回可用作陣列特定維度的索引的最小值。
陣列維度從一 （） 到 的編號，其中維度的總數。如果未指定，將返回第一個維度的下限。
如果為零 （），


-------------------------------------------------------- KeyGTK3PgLcase ----

LCase   字串小寫
  
返回字串的小寫副本

語法
Declare Function LCase ( ByRef str As Const String, ByVal mode As Long = 0 ) As String
Declare Function LCase ( ByRef str As Const WString, ByVal mode As Long = 0 ) As WString

用法
result = LCase[$]( str [ , mode ] )

參數
str
要轉換為小寫的字串。
mode
轉換模式：0 = 當前區域設置，1 = 僅 ASCII

返回值
的小寫副本。str

?


-------------------------------------------------------- KeyGTK3PgLeft ----

Left   字串取左
  
返回字串最左側的子字串

語法
Declare Function Left ( ByRef str As Const String, ByVal n As Integer ) As String
Declare Function Left ( ByRef str As Const WString, ByVal n As Integer ) As WString

用法
result = Left[$]( str, n )

參數
str
源字串。
n
要從源字串返回的字元數。

返回值
返回 最左邊的子字串。str

描述
返回從 的左側（開頭）開始的最左側字


-------------------------------------------------------- KeyGTK3PgLen ----

Len   字串總長
  
返回運算式或資料類型的長度

語法
Declare Function Len ( ByRef expression As String ) As Integer
Declare Function Len ( ByRef expression As ZString ) As Integer
Declare Function Len ( ByRef expression As WString ) As Integer

Declare Operator Len ( ByRef expression As datatype ) As datatype

Declare Function Len ( datatype ) As Integer	

用法
result = Len( expression )
或
result = Len( DataType )

參數
expression
任何類型的運算式。
datatype
資料類型。

返回值
返回運算式或資料類型（包括 UDT 的資料欄位）的大小（以位元組為單位）。

描述
Len返回運算式的長度或資料類型的大小（以位元組為單位）。
在第一種形式中，如果 是 ， 或 ，將返回字串的長度（以字元為單位?


-------------------------------------------------------- KeyGTK3PgLet ----

Let   賦值
  
指示設定運算子。

語法
Let variable = value
or
Let( variable1 [, variable2 [, ... ]] ) = udt
or
Operator typename.Let ( [ ByRef | ByVal ] rhs As datatype )
statements
end operator

描述
該命令旨在幫助程式師區分設定陳述式（例如）和相等性測試（例如）。由於編譯器不需要它，因此通常會省略它。
 let 可以用作左側運算子，將用戶定義類型的成員分配給多個


-------------------------------------------------------- KeyGTK3PgLib ----

Lib   庫
  
指定可在其中找到子項或函數作為聲明的一部分的庫

語法
Declare { Sub | Function } proc_name Lib "libname" [ Alias "symbol_name" ] ( arguments list ) As return_type

Extern "mangling" lib "libname"
declarative statements
end Extern

Type T
As Integer dummy
Declare Constructor Lib "libname" [ Alias "symbol_name" ] ( arguments list )
end Type


描述
在 或聲明中，以及在類方法聲明（包括構造函數和析構函數）中，指示包含函數的庫。以這種方式指定的庫被連結進來，就好像或已經使用過


-------------------------------------------------------- KeyGTK3PgLinegraphics ----

Line (Graphics)   畫線
  
繪製線條

語法
Line [target,] [[STEP]|(x1, y1)]-[STEP] (x2, y2) [, [color][, [B|BF][, style]]]
or
Line - (x2, y2) [, [color][, [B|BF][, style]]]

參數
target
指定要在其上繪製的緩衝區
STEP
指示起始座標是相對的
(x1, y1)
線路的起始座標
STEP
指示結束座標是相對的
(x2, y2)
線的結束座標
color
顏色屬性。
B|BF
指定框或框填充模式
style
線條樣式

描述
在兩點之間繪製直線或框的圖形語句。該操作將在通過 設置的當前工作頁面上進行，或者如果指定，則在緩衝區/緩衝區上進行。
座標


-------------------------------------------------------- KeyGTK3PgLineinput ----

Line Input   畫線
  
從鍵盤讀取一行輸入

語法
Line Input [;] [promptstring {;|,} ] stringvariable

參數
promptstring
在等待輸入之前顯示的可選提示。如果後跟分號 （），則提示符後面將附加一個問號 （）。如果它後跟逗號，則不會附加任何內容。;"? "
stringvariable
用於接收文本行的變數

描述
從鍵盤讀取一行文本並將其存儲在字串變數中。
（如果有） 將寫入當前游標位置的螢幕，並且讀取的字元在提示符之後?


-------------------------------------------------------- KeyGTK3PgLineinputPp ----

Line Input #   畫線
  
從檔中讀取一行文本

語法
Line Input #file number, string_variable

參數
file number
為其打開的文件的文件編號Input
string_variable
用於接收文本行的變數

描述
從打開的文字檔中讀取一行（通過綁定的檔編號打開），並將其存儲在字串變


-------------------------------------------------------- KeyGTK3PgLoByte ----

LoByte   單字節低位
  
獲取運算元的最低位元組。

語法
#define LoByte( expr ) (Cast(UInteger, expr) And &h000000FF)

用法
result = LoByte( expr )

參數
expr
轉換為值的數值運算式。UInteger

返回值
返回 expr 的低位元組值。

描述
此宏將數值


-------------------------------------------------------- KeyGTK3PgLoc ----

LOC   檔位置
  
返回上次執行檔讀/寫操作的檔位置

語法
Declare Function LOC ( ByVal filenum As Long ) As LongInt

用法
result = LOC( filenum )

參數
filenum
打開的文件的文件編號。

返回值
上次執行讀/寫操作的檔位置。

描述
返回上次執行檔讀/寫的位置。
該位置在記錄中標明：
在隨機打開的文件中，打開檔時指定的記錄長度用於
文字檔（FOR INPUT|輸出|追加，記錄


-------------------------------------------------------- KeyGTK3PgLocal ----

Local   本地
  
用於設置當前錯誤處理常式的錯誤處理語句

語法
On Local Error Goto label

描述
構造中的子句允許在相同或 in 中定義錯誤處理常式。
 備註：目前，編譯器會忽略該子句（僅在 Sub/Function 內部授權），並且錯誤處理常式可以在 On [Local] Error 所在的同一過程的?


-------------------------------------------------------- KeyGTK3PgLocate ----

Locate   游標定位
  
設置當前游標位置

語法
Declare Function Locate( row As Long = 0, column As Long = 0, state As Long = -1, start As Long = 0, stop As Long = 0 ) As Long

用法
Locate [row], [column], [state]

result = Locate( [row], [column], [state] )
new_column = LoByte( result )
new_row = HiByte( result )
new_state = HiWord( result )

參數
row
控制台中基於 1 的垂直字元位置。
column
控制台中基於 1 的水準字元位置。
state
游標僅在控制台模式下的狀態：關閉，打開;文本游標在圖形模式下從不可見。01
start
忽視。僅允許 -lang qb 方言相容性。
stop
忽視。僅允許 -lang qb 方言相容性。

返回值
返回包含當前游標位置和狀態的 32 位元。低字的低位元組包含列，低字的高位元組包含行，高字包含游標狀態。
如果任何行、列或狀態參數只是由調用 來設置的，則返回值將反映這些新值，而不是以前的值。如果在調用 中省略了


-------------------------------------------------------- KeyGTK3PgLock ----

Lock   鎖定
  
限制對檔或檔部分的讀/寫訪問

語法
Lock #filenum, record
Lock #filenum, start To end

參數
filenum
用於文件的文件編號。Open
record
要鎖定的記錄（檔）。Random
start
要從中鎖定的第一個位元組位置（檔）。Binary
end
要鎖定到的最後一個位元組位置（檔）。Binary

描述
Lock暫時限制其他執行緒或程式對檔或檔部?


-------------------------------------------------------- KeyGTK3PgLof ----

LOF   文件長度
  
返回打開的磁片檔的長度

語法
Declare Function LOF ( ByVal filenum As Long ) As LongInt

用法
result = LOF( filenum )

參數
filenum
打開的磁片檔的檔編號。

返回值
打開的磁片檔的長度（以位元組為單位）。

描述
返回以前使用給?


-------------------------------------------------------- KeyGTK3PgLog ----

Log   對數
  
返回給定數位的自然對數

語法
Declare Function Log cdecl ( ByVal number As Double ) As Double

用法
result = Log( number )

參數
number
用於計算自然對數的數字。

返回值
返回以 e 為底數（也稱為自然對數）的對數。number

描述
這種符號可能會有些混淆，因為在數學中，自然對數函數通常表示為LN，而以10為底的對數通常表示為LOG。FreeBASIC，像大多數電腦程式設計語言一樣，使用LO


-------------------------------------------------------- KeyGTK3PgLong ----

Long   長型
  
標準資料類型：32 位元有符號整數

語法
Dim variable As Long

描述
32 位元有符號整數資料類型。可以保存從 到 的值?


-------------------------------------------------------- KeyGTK3PgLongint ----

LongInt   長整型
  
標準資料類型：64 位元有符號

語法
Dim variable As LongInt

描述
64 位元有符號整數資料類型。可以保存從 -9 223 372 036 854 775 808 到 9 223 372 0


-------------------------------------------------------- KeyGTK3PgLoop ----
Loop   重複
Description



-------------------------------------------------------- KeyGTK3PgLoWord ----

LoWord   雙位元組低位元
  
獲取運算元的最低 16 位字。

語法
#define LoWord( expr ) (Cast(UInteger, expr) And &h0000FFFF)

用法
result = LoWord( expr )

參數
expr
轉換為值的數值運算式。UInteger

返回值
返回 expr 的低字的值。

描述
此宏將數值表?


-------------------------------------------------------- KeyGTK3PgLpos ----

LPos   列印位置
  
返回在最後一條語句中發送到印表機埠的字元數。LPrint

語法
Declare Function LPos ( ByVal printer As Long ) As Long

用法
result = LPOS(printer)

參數
printer
0、1、2 或 3。表示印表機埠 （LPT#）

返回值
返回


-------------------------------------------------------- KeyGTK3PgLprint ----

LPrint   印表機列印
  
將文本寫入預設印表機。

語法
LPrint  [ Using formatstring,] [expressionlist] [(, | ;)] ...

參數
formatstring
指定輸出格式的字串。
expressionlist
要根據指定格式輸出的變數清單。

描述
列印到連接到平行埠 LPT1 的印表機，或者如果不存在，則列印到預設印表機。要列印到與缺省印表機不同的印表機，請使用 。
子句的格式根據 。除了UDT，任何


-------------------------------------------------------- KeyGTK3PgLset ----

LSet   字串左齊
  
左對齊字串

語法
Declare Sub LSet ( ByRef dst As String, ByRef src As Const String )
Declare Sub LSet ( ByVal dst As WString Ptr, ByVal src As Const WString Ptr )

用法
LSet dst, src
LSet dst_udt, src_udt

參數
dst
用於接收資料的字串。String
src
獲取資料的源。String
dst_udt
使用者定義以接收資料。Type
src_udt
使用者定義要從中複製資料。Type

描述
LSetleft 將文本對齊到字串緩衝區中，用空格填補字元串的左側，用空格填充右側部分。不會修改字串緩衝區大小。
如果文本對於字


-------------------------------------------------------- KeyGTK3PgLtrim ----

LTrim   字串刪空格左邊
  
刪除字串左側的周圍子字串或字元

語法
Declare Function LTrim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function LTrim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

用法
result = LTrim[$]( str [, [ Any ] trimset ] )

參數
str
源字串。
trimset
要修剪的子字串。

返回值
返回修剪過的字串。

描述
此過程從源字串的左側（開頭）修剪周圍的字元。如果指定，將修剪?


-------------------------------------------------------- KeyGTK3PgMemberFunction ----

Function (Member)   函數
  
聲明或定義返回值的成員過程

語法
{ Type | Class | Union } typename
Declare [ Static | Const ] Function fieldname [calling convention specifier] [ Alias external_name ] ( [ parameters ] ) [ ByRef ] As datatype [ Static ]
End { Type | Class | Union }

Function typename.fieldname ( [ parameters ] ) [ ByRef ] As datatype [ Export ]
statements
End Function

參數
typename 
、或 的名稱TypeClassUnion
fieldname 
過程的名稱
external_name
外部連結時看到的欄位名稱
parameters 
要傳遞給過程的參數
calling convention specifier	
可以是以下之一：或cdeclstdcallpascal

描述
Function使用或調用返回值的成員過程訪問成員過程（也可以通過指定 返回引用）。該過程可以選擇性地接受參數或 。 在沒有顯式使用關鍵字的情況?


-------------------------------------------------------- KeyGTK3PgMemberSub ----

Sub (Member)   過程
  
聲明或定義成員過程

語法
{ Type | Class | Union } typename
Declare [ Static | Const ] Sub fieldname [calling convention specifier] [ Alias external_name ] ( [ parameters ] ) [ Static ] 
End { Type | Class | Union }

Sub typename.fieldname ( [ parameters ] ) [ Export ]
statements
End Sub

參數
typename 
、或 的名稱TypeClassUnion
fieldname 
過程的名稱
external_name
外部連結時看到的欄位名稱
parameters 
要傳遞給過程的參數
calling convention specifier	
可以是以下之一：或cdeclstdcallpascal

描述
Sub成員使用或調用成員過程進行訪問，並且可以選擇接受參數或 。 在沒有顯式使用關鍵字的情況下重載。
是為其聲明和定義方法的類型的名稱。的名稱?


-------------------------------------------------------- KeyGTK3PgMetaDynamic ----

$Dynamic   $動態陣列
  
元命令，用於更改陣列的分配方式

語法
'$Dynamic
or
Rem $Dynamic

描述
'$Dynamic是一個元命令，它指定以下任何陣列聲明都是可變長度的，無論它們是否使用常量下標範圍聲明。這


-------------------------------------------------------- KeyGTK3PgMetaInclude ----

$Include   $包含檔
  
元命令語句以包含另一個原始檔案的內容

語法
'$Include [once]: 'file'
or
Rem $Include [once]: 'file'

描述
$Include在元命令出現的位置插入來自另一個文件的原始程式碼。這具有從包含檔編譯原始程式碼的效果，就好像它是包含它的原始檔案的一部分一樣。一旦編譯器到達包含檔的末尾，原始原始檔案


-------------------------------------------------------- KeyGTK3PgMetaLang ----

$Lang   $語言
  
元命令語句，用於設置編譯器方言。

語法
'$lang: "lang"
or
Rem $lang: "lang"

參數
"lang"
要設置的方言，括在雙引號中，並且必須是 、 、 或 之一。"fb""fblite""qb""deprecated"

描述
如果未在命令列上提供 -forcelang 選項，則可用於設置顯示該選項的源模組的方言。最多將在源模組上進行兩次傳遞。在第一次傳遞時，如果指定的方言不是默認方


-------------------------------------------------------- KeyGTK3PgMetaStatic ----

$Static   $靜態陣列
  
元命令，用於更改陣列的分配方式

語法
'$Static
or
Rem $Static

描述
'$Static是覆蓋 的行為的元命令，也就是說，使用常量下標範圍聲明的陣列是固定長度的。這對於所使用的模


-------------------------------------------------------- KeyGTK3PgMidfunction ----

Mid (Function)   字串取子串
  
返回字串的子字串

語法
Declare Function Mid ( ByRef str as Const String, ByVal start as integer ) as String
Declare Function Mid ( ByVal str as Const WString Ptr, ByVal start as integer ) as WString
Declare Function Mid ( ByRef str as Const String, ByVal start as integer, ByVal n as integer ) as String
Declare Function Mid ( ByVal str as Const WString Ptr, ByVal start as integer, ByVal n as integer ) as WString

用法
result = Mid[$]( str, start [, n ] )

參數
str
源字串。
start
子字串中的起始位置。第一個字元從位置 1 開始。str
n
子字串長度，以字元為單位。

描述
返回從 中開始的子字串。如果 為空，則返回空字串 （）。如果或然後返回空字串 （）。



-------------------------------------------------------- KeyGTK3PgMidstatement ----

Mid (Statement)   字串取子串
  
用另一個字串覆蓋一個字串的子字串

語法
Declare Sub Mid ( ByRef text As String, ByVal start As Integer, ByVal length As Integer, ByRef expression As Const String )
Declare Sub Mid ( ByVal text As WString Ptr, ByVal start As Integer, ByVal length As Integer, ByVal expression As Const WString Ptr )

用法
Mid( text, start ) = expression
Or
Mid( text, start, length ) = expression

參數
text
要使用的字串。
start
要覆蓋的子字串的起始位置。第一個字元從位置 1 開始。text
length
要覆蓋的字元數。

描述
將 的最大字元複製到 中，從 開始。
如果未指定，則複製所有字串的大小保持不變;如果太大?


-------------------------------------------------------- KeyGTK3PgMinute ----

Minute   時間取分
  
從日期序列中獲取小時的分鐘數 

語法
Declare Function Minute ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Minute( date_serial )

參數
date_serial
日期序列

返回值
從包含日期序列格式的日期的變數中返


-------------------------------------------------------- KeyGTK3PgMkd ----

MKD   數轉字元雙精型
  
是否將二進位從變數複製到 ，將其長度設置為 8 個位元組DoubleString

語法
Declare Function MKD ( ByVal number As Double ) As String

用法
result = MKD[$]( number )

參數
number
要將變數二進位複製到 .DoubleString

返回值
返回 帶有 的二進位副本的 。StringDouble

描述
是否從變數到 的二進位複製將其長度?


-------------------------------------------------------- KeyGTK3PgMkdir ----

MkDir   目錄新建
  
在本地檔案系統上創建資料夾/目錄

語法
Declare Function MkDir ( ByRef folder As Const String ) As Long

用法
result = MkDir( folder )

參數
folder
要創建的新預設資料夾/目錄，或要創建的子資料夾/子目錄的路徑。

返回值
成功時返回零 （0），失敗時返回負 1 （-1）。

描述
在本地檔案系統上創建檔?


-------------------------------------------------------- KeyGTK3PgMki ----

MKI   數轉字元整型
  
是否從整數變數複製到與輸入變數大小長度相同的二進位變數String

語法
Declare Function MKI ( ByVal number As Integer ) As String
Declare Function MKI<bits> ( ByVal number As Integer<bits> ) As String

用法
result = MKI[$]( number )
result = MKI[$]<bits>( number )

參數
number
將 或變數複製到 二進位檔案。IntegerInteger<bits>String

返回值
返回 包含 的二進位副本。Stringnumber

描述
是否從 或 變數到 的二進位副本將其長度設置為類型中的位元組數。生成的字串可以使用 或 讀回整數類型。
此函數可用於在不使用定義的情


-------------------------------------------------------- KeyGTK3PgMkl ----

MKL   數轉字元長型
  
是否將二進位從變數複製到 ，將其長度設置為 4 個位元組LongString

語法
Declare Function MKL ( ByVal number As Long ) As String

用法
result = MKL( number )

參數
number
要將變數二進位複製到 .LongString

返回值
返回 帶有 的二進位副本的 。StringLong

描述
是否將二進位副本從變數複製到 ，將?


-------------------------------------------------------- KeyGTK3PgMklongint ----

MKLongInt   數轉字元長整型
  
是否將二進位從變數複製到 ，將其長度設置為 8 個位元組LongIntString

語法
Declare Function MKLongInt ( ByVal number As LongInt ) As String

用法
result = MKLongInt[$]( number )

參數
number
要將變數二進位複製到 .LongIntString

返回值
返回 帶有 的二進位副本的 。StringLongInt

描述
執行從變數到字串的二進位複製，將其長度設?


-------------------------------------------------------- KeyGTK3PgMks ----

MKS   數轉字元單精型
  
是否將二進位從變數複製到 ，將其長度設置為 4 個位元組SingleString

語法
Declare Function MKS ( ByVal number As Single ) As String

用法
result = MKS[$]( number )

參數
number
要將變數二進位複製到 .SingleString

返回值
返回 帶有 的二進位副本的 。StringSingle

描述
是否將二進位副本從變數複製到 ，將其長


-------------------------------------------------------- KeyGTK3PgMkshort ----

MKShort   數轉字元短型
  
是否將二進位從變數複製到 ，將其長度設置為 2 個位元組ShortString

語法
Declare Function MKShort ( ByVal number As Short ) As String

用法
result = MKShort[$](number)

參數
number
要將變數二進位複製到 .ShortString

返回值
返回 帶有 的二進位副本的 。StringShort

描述
執行從 SHORT 變數到字串的二進位複製，


-------------------------------------------------------- KeyGTK3PgModuleConstructor ----

Constructor (Module)   構造函數
  
指定在模組層級代碼之前執行過程

語法
[Public | Private] Sub procedure_name [Alias "external_identifier"] [()] Constructor [priority] [Static]
{ procedure body }
End Sub

描述
關鍵字在定義中使用（在聲明行級別禁止），以強制執行模組層級代碼之前的過程。定義為構造函數的過程的使用方式可能與普通過程相同，也就是說，可以從模組層級代碼以及其他過程中調用它們。



-------------------------------------------------------- KeyGTK3PgModuleDestructor ----

Destructor (Module)   析構函數
  
指定在程式終止時執行過程

語法
[Public | Private] Sub identifier [Alias "external_identifier"] [()] Destructor [priority] [Static]
{ procedure body }
End Sub

描述
定義要從已編譯器的結束代碼自動調用的過程。結束代碼由編譯器生成，並在程式正常終止時執行。定義為析構函數的過程的使用方式可能與普通過程相同，也就是說，可以從模組層級代碼以及其他?


-------------------------------------------------------- KeyGTK3PgMonth ----

Month   日期取月份
  
從日期序列中獲取一年中的月份

語法
Declare Function Month ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Month( date_serial )

參數
date_serial
日期

返回值
從包含日期序列格式的日期的變數中返回月份編號。
月份值的範圍為 1-12，1


-------------------------------------------------------- KeyGTK3PgMonthname ----

MonthName   日期月名稱
  
從其整數表示形式中獲取月份的名稱

語法
Declare Function MonthName ( ByVal month As Long, ByVal abbreviate As Long = 0 ) As String

用法
#include "vbcompat.bi"
result = MonthName( month_number [, abreviate ] )

參數
month
一年中月份的數字 - 1：1 月到 12：12 月
abbreviate
標誌，指示名稱應縮寫

返回值
從值 1 到 12 返回本地作業系統語言月份名稱。month

描述
如果為 true，則返回月份


-------------------------------------------------------- KeyGTK3PgMultikey ----

MultiKey   掃描鍵碼
  
通過鍵盤掃描碼檢測按鍵的狀態。

語法
Declare Function MultiKey ( ByVal scancode As Long ) As Long

用法
result = MultiKey(scancode)

參數
scancode
要檢查的金鑰的掃描碼。

返回值
如果按下指定掃描代碼的鍵，則返回，否則返回 。-10

描述
MultiKey是一個功能，它將隨時檢測由掃描碼確定的任何金鑰的狀態。如果按下該鍵，它將返回，否則它將返回 。
使用時未禁用鍵盤輸入緩衝區;也


-------------------------------------------------------- KeyGTK3PgMutexCreate ----

MutexCreate   互斥鎖創建
  
創建用於同步執行緒執行的互斥體

語法
Declare Function MutexCreate ( ) As Any Ptr

用法
result = MutexCreate

返回值
創建的互斥體的控制碼，或失敗時的空指針 （0）。Any Ptr

描述
互斥體是“互斥”的縮寫，是一種在執行緒內同步共用資料的方法。如果存在多個執行緒使用的全域變數（或由多個執行緒多次調用的單一執行緒使用的局部靜態變數），則在


-------------------------------------------------------- KeyGTK3PgMutexDestroy ----

MutexDestroy   互斥鎖銷毀
  
銷毀互斥體

語法
Declare Sub MutexDestroy ( ByVal id As Any Ptr )

用法
MutexDestroy( id )

參數
id
要銷毀的互斥體的控制碼。Any Ptr

描述
Mutexdestroy放棄 由 創建的互斥體。此調用應在使用互斥鎖的任何線


-------------------------------------------------------- KeyGTK3PgMutexLock ----

MutexLock   互斥鎖鎖住
  
獲取互斥體

語法
Declare Sub MutexLock ( ByVal id As Any Ptr )

用法
MutexLock( id )

參數
id
要鎖定的互斥體的控制碼。Any Ptr

描述
Mutexlock使用由 生成的互斥體“控制碼”停止任何其他執行緒，直到該控制碼被 解鎖。
此類已停止的執行緒將掛起其執行，並且


-------------------------------------------------------- KeyGTK3PgMutexUnlock ----

MutexUnlock   互斥鎖解鎖
  
釋放互斥鎖

語法
Declare Sub MutexUnlock ( ByVal id As Any Ptr )

用法
MutexUnlock( id )

參數
id
要解鎖的互斥體的控制碼。Any Ptr

描述
Mutexunlock釋放由 創建並用 鎖定的互斥體“控制碼”。這允許共用互斥體的其他線


-------------------------------------------------------- KeyGTK3PgNaked ----

Naked   裸代碼
  
編寫沒有序言/後記代碼的函數

語法
{Sub | Function} identifier Naked [calling_convention] ( param_list ) [[ ByRef ] As data_type]
asm_statements
End {Sub | Function}

參數
identifier- 程式的名稱。
 - 調用過程的約定 - 可以是 、 或 
 - 過程正文中的代碼。用於處理參數和返回值的代碼都必須手動完成。請注意，執行這些操作的方法可能會更改，具體取決於調用約定。
 - 要傳遞給過程的參數。
 - 函數的資料類型。calling_conventioncdeclpascalstdcallasm_statementsparam_l


-------------------------------------------------------- KeyGTK3PgName ----

Name
  
重命名磁片上的檔

語法
Declare Function Name( ByRef oldname As Const String, ByRef newname As Const String ) As Long

用法
result = Name( oldname, newname )

參數
oldname
現有檔的名稱。
newname
檔的新名稱。

返回值
成功時返回零 （），失敗時返回非零。0

描述
重命名最初調用的檔或資料夾。
如果存在同名的檔/資料夾，則不能保證該?


-------------------------------------------------------- KeyGTK3PgNamespace ----

Namespace   命名空間
  
聲明命名空間塊。

語法
Namespace identifier [ Alias "aliasname" ]
statements
End Namespace

參數
identifier
命名空間的名稱（包括嵌套名稱說明符）。
aliasname
命名空間的備用外部名稱。

描述
命名空間允許將物件（預定義的資料類型和 UDT，包括聯合和枚舉）和過程（包括其聲明）等實體分組到名稱下。這樣，全域範圍可以分為“子範圍”，每個子範圍都


-------------------------------------------------------- KeyGTK3PgNext ----

Next   下步
  
控制流語句以標記迴圈的結束。For...Next

語法
Next [ identifier_list ]

描述
指示與匹配語句關聯的語句塊的結尾。
當在沒有identifier_list的情況下單獨使用時，它將關閉最新的語句塊。
是可選的，可以是一個或多個用逗號分隔的變數名稱。保留此形式的語句是?


-------------------------------------------------------- KeyGTK3PgNow ----

Now   現在
  
以日期序列形式獲取當前系統時間 

語法
Declare Function Now ( ) As Double

用法
#include "vbcompat.bi"
result = Now

返回值
返回一個日期序列，其中包含系統在執行時的日期和時間。

描述
由於時間是日期序列的小數部分，如果


-------------------------------------------------------- KeyGTK3PgObject ----

Object   對象
  
提供運行時類型資訊的內置類型

語法
Type Object
As fb_BaseVT Ptr vtable_ptr
Declare Constructor()
End Type

用法
Type typename Extends Object
End Type

Dim variable As Object

描述
Object 是一種內置類型，它為從它派生的所有類型提供運行時類型資訊 （RTTI），允許它們與 一起使用，並支援和方法。
擴展內置物件類型允許在 的頂部添加一個額外的隱藏 vtable 指標字?


-------------------------------------------------------- KeyGTK3PgOct ----

Oct   八進制
  
將數位轉換為八進制表示形式

語法
Declare Function Oct ( ByVal number As UByte ) As String
Declare Function Oct ( ByVal number As UShort ) As String
Declare Function Oct ( ByVal number As ULong ) As String
Declare Function Oct ( ByVal number As ULongInt ) As String
Declare Function Oct ( ByVal number As Const Any Ptr ) As String

Declare Function Oct ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

用法
result = Oct[$]( number [, digits ] )

參數
number
計算為數位的數位或運算式。浮點數將轉換為 .LongInt
digits
返回的字串中所需的位元數。

返回值
包含 的無符號八進制表示形式的字串。number

描述
返回 的無符號八進制字串表示形式。八進位數字的範圍從 0 到 7。
如果指定 > 0，則結果字串將恰好是該長度。如有必要，?


-------------------------------------------------------- KeyGTK3PgOffsetof ----

OffsetOf   取偏移值
  
返回類型中欄位的偏移量。

語法
#define OffsetOf(typename, fieldname) CInt( @Cast( typename Ptr, 0 )->fieldname )	

用法
result = OffsetOf( typename, fieldname )

參數
typename
使用語句定義的類型的名稱。Type...End Type
fieldname
在類型（或派生類型的基類型）中定義的欄位的名稱。

描述
對於非派生類型，將返回位置，作為從 開頭開始的偏移量（以位元組為單位） 返回。
對於派生類型，將返回


-------------------------------------------------------- KeyGTK3PgOnerror ----

On Error   在
  
用於設置當前錯誤處理常式的錯誤處理語句

語法
On [Local] Error Goto label

參數
label
發生錯誤時要跳轉到的標籤

描述
“出錯”上，在發生錯誤時觸發跳轉到錯誤處理常式。此類錯誤可由內置語句觸發，例如 ，或在使用語句時觸發。
注： 僅當使用 -e、-ex 或 -exx 選項之一編譯器時，才會


-------------------------------------------------------- KeyGTK3PgOngosub ----

On...Gosub
  
基於運算式調用標籤

語法
On expression GoSub label1[, ...]

描述
根據運算式的值分支到不同的標籤。運算式值 1 將分支到第一個標籤，值 2 將分支到第二個標籤，依此類推。如果運算式的值為零 （0） 或大於列表中的項目數，則在 後面的下一個語句上繼續執行。
此


-------------------------------------------------------- KeyGTK3PgOngoto ----

On...Goto
  
跳轉到基於運算式的標籤。

語法
On expression Goto label1[, ...]

描述
根據運算式的值分支到不同的標籤。運算式值 1 將分支到第一個標籤，值 2 將分支到第二個標籤，依此類推。如果運算式的值為零 （0） 或大


-------------------------------------------------------- KeyGTK3PgOpAdd ----

Operator + (Addition)   運算子
  
對兩個運算式求和

語法
Declare Operator + ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator + ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator + ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator + ( ByRef lhs As Double, ByRef rhs As Double ) As Double

Declare Operator + ( ByRef lhs As T Pointer, ByRef rhs As Integer ) As T Pointer
Declare Operator + ( ByRef rhs As Integer, ByRef lhs As T Pointer ) As T Pointer

Declare Operator + ( ByRef lhs As T, ByRef rhs As Integer ) As T
Declare Operator + ( ByRef lhs As Integer, ByRef rhs As T ) As T

用法
result = lhs + rhs

參數
lhs
要求和的左側運算式。
rhs
要求和的右側運算式。
T
任何指針類型。

返回值
返回兩個運算式的總和。

描述
當左側和右側運算式是數值時，運算子 + （Add） 將返回兩個值的總和。
當左側和右側運算式是字串值時，運算子 +（Add） 連接兩個字串並返回


-------------------------------------------------------- KeyGTK3PgOpAnd ----

Operator And (Conjunction)   運算子
  
返回兩個數值的按位和（連詞）

語法
Declare Operator And ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs And rhs

參數
lhs
左側運算式。
T1
任何數字或布林類型。
rhs
右側運算式。
T2
任何數字或布林類型。
Ret
數位或布林類型（隨 和 而異）。T1T2

返回值
返回兩個運算元的按位和（合詞）。

描述
此運算子返回其運算元的按位元和，這是一個邏輯運算，該操作將生成一個值，其位設置取決於運算元的位（對於將布林?


-------------------------------------------------------- KeyGTK3PgOpAndAlso ----

Operator Andalso (Short Circuit Conjunction)   運算子
  
返回兩個數值的短路和（合相）

語法
Declare Operator AndAlso ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs AndAlso rhs

參數
lhs
左側運算式。
T1
任何數字或布林類型。
rhs
右側運算式。
T2
任何數字或布林類型。
Ret
數位或布林類型（隨 和 而異）。T1T2

返回值
返回兩個運算元的短路和（合相）。

描述
此運算子計算左側運算式。如果結果為零，則立即返回零。如果結果為非零，則計算右側，並返回其邏輯結果。
 （對


-------------------------------------------------------- KeyGTK3PgOpArrayIndex ----

Operator () (Array Index)   運算子
  
返回對陣列中元素的引用

語法
Declare Operator () ( lhs() As T, ByRef rhs As Integer, ... ) ByRef As T

用法
result = lhs ( rhs [, ...] )
or
lhs ( rhs [, ...] ) = value

參數
lhs
陣列。
rhs
陣列中元素的索引。
T
任何資料類型。

描述
此運算子返回對陣列中元素的引用。對於多維陣列，必須指定多個索引（?


-------------------------------------------------------- KeyGTK3PgOpAssignment ----

Operator =[>] (Assign)   運算子
  
為變數賦值

語法
Declare Operator Let ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs = rhs
或
lhs => rhs

或者，在 QB方言，

[ Let ] lhs = rhs
或
[ Let ] lhs => rhs

參數
lhs
要分配到的變數。
T1
任何數位、布林值、字串或指標類型。
rhs
要分配給 的值。lhs
T2
任何類型均可轉換為 。T2

描述
此運算子將其右側運算元 （） 的值分配給其左側運算元 （）。右側運算元必須隱式轉換為左側類型 （）（對於布林值到整數的轉換，false ?


-------------------------------------------------------- KeyGTK3PgOpAt ----

Operator @ (Address Of)   運算子
  
返回字串文本、變數、物件或過程的位址

語法
Declare Operator @ ( ByRef rhs As T ) As T Pointer

用法
result = @ rhs

參數
rhs
要檢索其位址的字串文本、變數、物件或過程。
T
任何標準、用戶定義或過程類型。

返回值
返回右側 （） 運算元的地址。rhs

描述
運算子 @ （位址） 返回其運算元的記憶體位址。
當運算元為 類型時，將返回內部字串描述符的位址。使用（字串


-------------------------------------------------------- KeyGTK3PgOpCast ----

Operator Cast   運算子
  
用於將 UDT（使用者定義類型）變數轉換為指定資料類型的運算子

語法
{ Type | Class | Union } typename
Declare Operator Cast () [ ByRef ] As datatype
...
End { Type | Class | Union }

Operator typename.Cast () [ ByRef ] As datatype [ Export ]
...

用法
Cast( datatype, expression )

參數
typename 
、或 的名稱TypeClassUnion
datatype 
要轉換為它的類型的名稱、內置資料類型（標準資料類型）或 UDT 不同於typename
expression 
要轉換的運算式，實例typename

描述
將（變數）轉換為其他 .
必須在 、 、 或 內聲明。
與所有非靜態成員過程一樣，它傳遞了一個隱藏參數。
當只有返回類?


-------------------------------------------------------- KeyGTK3PgOpCombineAdd ----

Operator += (Add And Assign)   運算子
  
向變數添加和賦值

語法
Declare Operator += ( ByRef lhs As T1, ByRef rhs As T2 )

Declare Operator += ( ByRef lhs As T Ptr, ByRef rhs As Integer )

Declare Operator += ( ByRef lhs As String, ByRef rhs As String )
Declare Operator += ( ByRef lhs As WString, ByRef rhs As WString )

用法
lhs += rhs

參數
lhs
要分配到的變數。
T1
任何數數值型別。
rhs
要添加到 的值。lhs
T2
任何數數值型別。
T
任何資料類型。

描述
此運算子向變數添加並賦值。它在功能上等效於：
對於數數值型別，右側運算式 （） 將轉換為左側類型 （）。
對於字串類型，此運算子在功能上等效於 


-------------------------------------------------------- KeyGTK3PgOpCombineAnd ----

Operator And= (Conjunction And Assign)   運算子
  
執行按位和（連詞）並將結果賦給變數

語法
Declare Operator And= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs And= rhs

參數
lhs
要分配到的變數。
T1
任何數字或布林類型。
rhs
與 執行按位和（併入）的值。lhs
T2
任何數字或布林類型。

描述
此運算子按位執行 and 並將結果賦給變數（對於將布林值轉換為整數，false 或 true 布林值變為 0 或 -1 整數值）。它在功能上等效於：



-------------------------------------------------------- KeyGTK3PgOpCombineConcat ----

Operator &= (Concatenate And Assign)   運算子
  
將一個字串追加並分配給另一個字串

語法
Declare Operator &= ( ByRef lhs As String, ByRef rhs As T2 )
Declare Operator &= ( ByRef lhs As WString, ByRef rhs As T2 )

用法
lhs &= rhs

參數
lhs
要為其分配的字串。
rhs
要追加到 的值。lhs
T2
任何可以轉換為字串的數位、字串或使用者定義類型。

描述
此運算子將一個字串追加到另一個字串上。右側運算式 （） 在串聯之前轉換為字串。它在功能上等效於，
其中結果被分配回左側字


-------------------------------------------------------- KeyGTK3PgOpCombineDivide ----

Operator /= (Divide And Assign)   運算子
  
將值除法並賦給變數

語法
Declare Operator /= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs /= rhs

參數
lhs
要分配到的變數。
T1
任何數數值型別。
rhs
要除以的值。lhs
T2
任何數數值型別。

描述
此運算子將值除法並賦給變數。它在功能上等效於：
lhs = lhs / rhs

對於使?


-------------------------------------------------------- KeyGTK3PgOpCombineEqv ----

Operator Eqv= (Equivalence And Assign)   運算子
  
執行按位 eqv（等效性）並將結果分配給變數

語法
Declare Operator Eqv= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Eqv= rhs

參數
lhs
要分配到的變數。
T1
任何數字或布林類型。
rhs
與 執行按位 eqv（等效）的值。lhs
T2
任何數字或布林類型。

描述
此運算子執行按位 eqv 並將結果賦給變數（對於將布林值轉換為整數，false 或 true 布林值變為 0 或 -1 整數值）。它在功能上等效於：



-------------------------------------------------------- KeyGTK3PgOpCombineExponentiate ----

Operator ^= (Exponentiate And Assign)   運算子
  
對變數進行冪化並賦值

語法
Declare Operator ^= ( ByRef lhs As Double, ByRef rhs As Double )

用法
lhs ^= rhs

參數
lhs
要分配到的變數。
rhs
要冪所依據的值。lhs

描述
此運算子對變數進行冪冪賦值。它在功能上等效於：
lhs = lhs ^ rhs

對於使用適當語法作為成員的使用者定義類型，可以重載此運算子。
注意：此


-------------------------------------------------------- KeyGTK3PgOpCombineImp ----

Operator Imp= (Implication And Assign)   運算子
  
執行按位 imp（隱含）並將結果分配給變數

語法
Declare Operator Imp= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Imp= rhs

參數
lhs
要分配到的變數。
T1
任何數字或布林類型。
rhs
使用 執行按位 imp（隱含）的值。lhs
T2
任何數字或布林類型。

描述
此運算子執行按位 imp 並將結果賦給變數（對於將布林值轉換為整數，false 或 true 布林值變為 0 或 -1 整數值）。它在功能上等效於：



-------------------------------------------------------- KeyGTK3PgOpCombineIntegerDivide ----

Operator \= (Integer Divide And Assign)   運算子
  
整數除以變數並將其賦值

語法
Declare Operator \= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs \= rhs

參數
lhs
要分配到的變數。
T1
任何數數值型別。
rhs
要除以的值。lhs
T2
任何數數值型別。

描述
此運算子除法（整數除法）並為變數賦值。它在功能上等效於：
lhs = lhs \ rhs




-------------------------------------------------------- KeyGTK3PgOpCombineModulus ----

Operator Mod= (Modulus And Assign)   運算子
  
除以一個值並將餘數賦給變數

語法
Declare Operator Mod= ( ByRef lhs As Integer, ByRef rhs As Integer )

用法
lhs Mod= rhs

參數
lhs
要分配到的變數。
rhs
要除以的值。lhs

描述
此運算子將兩個類型的值除以，並將餘數賦給其左側 （） 變數。它在功能上等效於：Integerlhs
lhs = lhs Mod rhs

對於?


-------------------------------------------------------- KeyGTK3PgOpCombineMultiply ----

Operator *= (Multiply And Assign)   運算子
  
將值相乘並賦值給變數

語法
Declare Operator *= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs *= rhs

參數
lhs
要分配到的變數。
T1
任何數數值型別。
rhs
要乘以的值。lhs
T2
任何數數值型別。

描述
此運算子將值相乘並賦值給變數。它在功能上等效於：
lhs = lhs * rhs

右側運算式 （） 將轉換為左側類型 


-------------------------------------------------------- KeyGTK3PgOpCombineOr ----

Operator Or= (Inclusive Disjunction And Assign)   運算子
  
執行按位或（包括分離）並將結果賦給變數

語法
Declare Operator Or= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Or= rhs

參數
lhs
要分配到的變數。
T1
任何數字或布林類型。
rhs
與 執行按位或（包括斷開）的值。lhs
T2
任何數字或布林類型。

描述
此運算子執行按位 or 並將結果賦給變數（對於將布林值轉換為整數，false 或 true 布林值變為 0 或 -1 整數值）。它在功能上等效於?


-------------------------------------------------------- KeyGTK3PgOpCombineShiftLeft ----

Operator Shl= (Shift Left And Assign)   運算子
  
向左移動並將值賦給變數

語法
Declare Operator Shl= ( ByRef lhs As Integer, ByRef rhs As Integer )
Declare Operator Shl= ( ByRef lhs As UInteger, ByRef rhs As UInteger )
Declare Operator Shl= ( ByRef lhs As LongInt, ByRef rhs As LongInt )
Declare Operator Shl= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt )

用法
lhs shl= rhs

參數
lhs
要分配到的變數。
rhs
要向左移動的值。lhs

描述
此運算子將左側 （） 參數中的位移動其右側 （） 參數指定的次數，並將結果分配給 。它在功能上等效於：lhsrhslhs
lhs = lhs Shl rhs


-------------------------------------------------------- KeyGTK3PgOpCombineShiftRight ----

Operator Shr= (Shift Right And Assign)   運算子
  
向右移動並為變數賦值

語法
Declare Operator Shr= ( ByRef lhs As Integer, ByRef rhs As Integer )
Declare Operator Shr= ( ByRef lhs As UInteger, ByRef rhs As UInteger )
Declare Operator Shr= ( ByRef lhs As LongInt, ByRef rhs As LongInt )
Declare Operator Shr= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt )

用法
lhs shr= rhs

參數
lhs
要分配到的變數。
rhs
要直接移動的值。lhs

描述
此運算子將左側 （） 參數中的位移動其右側 （） 參數指定的次數，並將結果分配給 。它在功能上等效於：lhsrhslhs
lhs = lhs Shr rhs



-------------------------------------------------------- KeyGTK3PgOpCombineSub ----

Operator -= (Subtract And Assign)   運算子
  
減去變數並將其賦值

語法
Declare Operator -= ( ByRef lhs As T1, ByRef rhs As T2 )
Declare Operator -= ( ByRef lhs As T Ptr, ByRef rhs As Integer )

用法
lhs -= rhs

參數
lhs
要分配到的變數。
T1
任何數數值型別。
rhs
要從 中減去的值。lhs
T2
任何數數值型別。
T
任何資料類型。

描述
此運算子減去變數並將其賦值。它在功能上等效於：
lhs = lhs - rhs

對於數數值型別，右側運算式 （） 將?


-------------------------------------------------------- KeyGTK3PgOpCombineXor ----

Operator Xor= (Exclusive Disjunction And Assign)   運算子
  
執行按位 xor（獨佔析取）並將結果賦給變數

語法
Declare Operator Xor= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Xor= rhs

參數
lhs
要分配到的變數。
T1
任何數字或布林類型。
rhs
使用 執行按位 xor（獨佔或）的值。lhs
T2
任何數字或布林類型。

描述
此運算子執行按位 or 並將結果賦給變數（對於將布林值轉換為整數，false 或 true 布林值變為 0 或 -1 整數值）。它在功能上等效於：



-------------------------------------------------------- KeyGTK3PgOpConcat ----

Operator + (String Concatenation)   運算子
  
連接兩個字串

語法
Declare Operator + ( ByRef lhs As String, ByRef rhs As String ) As String
Declare Operator + ( ByRef lhs As ZString, ByRef rhs As ZString ) As ZString
Declare Operator + ( ByRef lhs As WString, ByRef rhs As WString ) As WString

用法
result = lhs + rhs

參數
lhs
要連接的左側字串。
rhs
要連接的右側字串。

描述
此運算子連接兩個字串。與 Operator &（帶轉換的字串串聯）不同，這兩個運算式都必須是?


-------------------------------------------------------- KeyGTK3PgOpConcatConvert ----

Operator & (String Concatenation With Conversion)   運算子
  
連接兩個字串，根據需要將非字串轉換為字串

語法
Declare Operator & ( ByRef lhs As T, ByRef rhs As U ) As V

用法
result = lhs & rhs

參數
lhs
要連接的左側運算式。
T
可轉換為標準資料類型的任何標準資料類型或用戶定義類型。
rhs
要連接的右側運算式。
U
可轉換為標準資料類型的任何標準資料類型或用戶定義類型。
V
生成的字串類型（因運算元而異）。

描述
此運算子連接兩個運算式。如果任?


-------------------------------------------------------- KeyGTK3PgOpDelete ----

Operator Delete Statement   運算子
  
操作員銷毀資料並釋放與Operator New Expression

用法
Delete buf
or
Delete[] buf

參數
buf 
指向已由運算子或運算子分配的記憶體的指標，運算子的陣列版本（必須根據要刪除的資料類型提供類型化指標）。New ExpressionNew[] ExpressionNew Expression

描述
運算子用於銷毀和釋放使用運算子創建的物件的記憶體。刪除 TYPE 時，將調用其析構函數。 運算子應僅與從運算子返回的位址一起使用。
運


-------------------------------------------------------- KeyGTK3PgOpDeleteOverload ----

Operator Delete Overload   運算子
  
成員運算子，用於在應用於 UDT（用戶定義的類型）時提供超載記憶體解除配置進程部分。Operator Delete Statement

語法
Declare Operator Delete ( buf  As Any Ptr )
Declare Operator delete[] ( buf  As Any Ptr )

參數
buf 
指向已由運算子或運算子（運算子的陣列版本）分配的記憶體的指標。New OverloadNew[] OverloadNew Overload

描述
成員運算子在應用於 UDT（用戶定義的類型）時重載運算子提供的記憶體解除配置進程部分。因此，使用者可以定義自己的記憶體解除配置進?


-------------------------------------------------------- KeyGTK3PgOpDivide ----

Operator / (Divide)   運算子
  
除以兩個數值運算式

語法
Declare Operator / ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator / ( ByRef lhs As Double, ByRef rhs As Double ) As Double

用法
result = lhs / rhs

參數
lhs
左側的紅利運算式。
rhs
右側除數運算式。

返回值
返回股息和除數的商。

描述
運算子 / （除法）返回股息和除數的商。
這兩個運算元都不會以任何方式進行修改。與整數除法不


-------------------------------------------------------- KeyGTK3PgOpen ----

Open   文件打開
  
使用檔操作打開磁片檔以進行讀取或寫入

語法
Open filename For Input [encoding_type] [lock_type] As [#]filenumber
Open filename For Output [encoding_type] [lock_type] As [#]filenumber
Open filename For Append [encoding_type] [lock_type] As [#]filenumber

Open filename For Binary [access_type] [lock_type] As [#]filenumber
Open filename For Random [access_type] [lock_type] As [#]filenumber [Len = record_length]

用法
result = Open( filename[,] For {Input|Output|Append}[,] As filenumber )
或
result = Open( filename[,] For Binary[,] Access {Read|Write}[,] As filenumber )
或
result = Open( filename[,] For Random[,] Access {Read|Write}[,] As filenumber [[,] Len =  record_length] )
或
Open filename For {Input|Output|Append} As filenumber
或
Open filename For Binary Access {Read|Write} As filenumber
或
Open filename For Random Access {Read|Write} As filenumber [Len =  record_length]


參數
filename
要打開的磁片檔的名稱的字串值。相對檔路徑相對於目前的目錄（請參見）。CurDir
encoding_type
讀取或寫入文本時要使用的編碼可以是：
 Encoding "ascii" （預設使用 ASCII 編碼）
 Encoding "utf8" （使用 8 位元 Unicode 編碼）
 Encoding "utf16" （使用 16 位元 Unicode 編碼）
 Encoding "utf32" （使用 32 位元 Unicode 編碼）
access_type
調用進程請求的訪問類型。
 Access [Read] [Write] （可以使用讀寫存取權限，這是默認設置）
lock_type
對來自其他進程（執行緒或程式）的磁片檔訪問施加限制，可以是：
 Shared （檔可由其他進程自由訪問）
 Lock [Read] [Write] （可以拒絕對其他進程的讀寫存取權限）
filenumber
要綁定到磁片檔的可用檔編號，可通過 找到該檔。FreeFile
record_length
從磁片檔讀取或寫入磁片檔的每條記錄的大小（以位元組為單位）。缺?


-------------------------------------------------------- KeyGTK3PgOpenCom ----

Open Com   文件打開
  
打開用於輸入和輸出的序列埠

語法
Declare Function Open Com ( byref options As String, As filenumber As Long ) As Long

用法
result = Open Com( options[,] As[#] filenumber )

參數
options
一個字串，包含用於控制埠的選項。
filenumber
要綁定到埠的文件編號。

返回值
Open Com()成功時返回 32 位 ：零 （），否則返回非零錯誤代碼。Long0

描述
此命令打開PC的序列埠，允許使用正常的檔命令發送和接收資料，如，，，...
主要參數是 a，它至少描述了要打開的通信?


-------------------------------------------------------- KeyGTK3PgOpenCons ----

Open Cons   ????
  
?????????? ?stdin? ??? ?stdout? ?????????????

??
Open Cons As [#]filenumber
Open Cons For Input As [#]filenumber
Open Cons For Output As [#]filenumber

??
result = Open Cons( [For {Input|Output}[,]] As filenumber )
??????QB?????
Open Cons [For {Input|Output}] As filenumber

??
filenumber
???? stdin ? stdout ??????????? ???????FreeFile

???
?????????? 32 ? ??????? ?0?????????????Open Cons()Long

??
Open Cons?????? stdin ? stdout ?????????????????????????????? ? ???????? ??????????
 ?????? stdin ?????????? ????????? stdout ?????????? ?????????????????
 stdin ? stdout ?????????????? OS ????


-------------------------------------------------------- KeyGTK3PgOpenErr ----

Open Err   文件打開
  
打開檔操作的標準輸入 （stdin） 和標準錯誤 （stderr） 流。

語法
Open Err [for mode] As [#]filenumber As Long

用法
Open Err [for mode] as [#]filenumber
or
result = Open Err( [for mode[,]] as [#]filenumber )

參數
mode
忽視。
filenumber
未使用的檔編號。

返回值
如果成功完成，則返回 32 位 ：零，否則返回非零值以指示失敗。LongOpen Err()

描述
此命令打開以讀取和寫入控制台，從而允許使用普通檔命令執行讀取和寫入操作。
是不同於允許將錯誤消息與主控制台輸出分開重?


-------------------------------------------------------- KeyGTK3PgOpenLpt ----

Open Lpt   文件打開
  
打開印表機設備

語法
Open Lpt ["[LPT[x]:][Printer_Name][,TITLE=Doc_Title][,EMU=TTY]"] [For Input|Output] As #filenumber

用法
Open Lpt "LPT..." As [#]filenumber
or
result = Open Lpt( "LPT..."[,] As [#]filenumber )

參數
x
指定埠號。如果省略，輸出將發送到系統列印多工緩衝處理器。
Printer_Name
要打開的印表機的名稱。此參數在 DOS 上被忽略。
TITLE=Doc_Title
印表機多工緩衝處理程式看到的列印工作的標題。此參數在 DOS 上被忽略。
EMU=TTY
使用驅動程式文本映射在 Windows GDI 印表機上模擬 TTY 輸出。此參數在 DOS 和 Linux 上被忽略。
For Input|Output
子句是允許相容的，但它被忽略。
filenumber
要分配給設備的未使用檔編號。

返回值
如果成功完成，則返回 32 位 ：，否則返回非零值以指示失敗。Long0Open Lpt()

描述
Open Lpt打


-------------------------------------------------------- KeyGTK3PgOpenPipe ----

Open Pipe   文件打開
  
打開外部進程的標準輸入 （stdin） 或輸出 （stdout） 流以進行檔操作。

語法
Open Pipe shell_command For Input As [#]filenumber
Open Pipe shell_command For Output As [#]filenumber
Open Pipe shell_command For Binary access_type [#]filenumber

用法
result = Open Pipe( command[,] For {Input|Output}[,] As filenumber )
或
result = Open Pipe( command[,] For Binary[,] access_type[,] As filenumber )
（或類似QB的語法，）
Open Pipe filename For {Input|Output} As filenumber
（或，）
Open Pipe filename For Binary access_type As filenumber

參數
shell_command
要在作業系統命令外殼中執行的外部進程。相對檔路徑相對於目前的目錄（請參見）。為需要在其可執行路徑或參數中使用雙引號的進程打開管道時，整個管道字串應嵌套在雙引號內。CurDir
access_type
調用進程請求的讀取或寫入存取權限的類型。
 Access {Read|}（  可以打開外部進程的 stdin 或 stdout 流）Write
filenumber
要綁定到外部進程的 stdin 或 stdout 流的可用文件編號。

返回值
在第一次使用中，返回 32 位 ：成功時返回零 （），否則返回非零錯誤代碼?


-------------------------------------------------------- KeyGTK3PgOpenScrn ----

Open Scrn   文件打開
  
直接打開控制台，將輸入和輸出作為檔

語法
Open Scrn [for mode] As [#]filenumber As Long

用法
Open Scrn [for mode] as [#]filenumber
or
result = Open Scrn( [for mode[,]] as [#]filenumber )

參數
mode
要麼或 .如果省略，則假定為。InputOutputOutput
filenumber
未使用的檔編號。

返回值
如果成功完成，則返回 32 位 ：零 （），否則返回非零值以指示失敗。Long0Open Scrn()

描述
此命令將作為檔打開輸入和輸出控制台，允許使用普通檔命令對其進行讀/寫。
在某些實現中，此命令可能使用對控制台


-------------------------------------------------------- KeyGTK3PgOpEqual ----

Operator = (Equal)   運算子
  
比較兩個運算式的相等性

語法
Declare Operator = ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator = ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator = ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator = ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator = ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator = ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator = ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator = ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator = ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator = ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator = ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator = ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator = ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator = ( ByRef lhs As T, ByRef rhs As T ) As Integer

Declare Operator = ( ByRef lhs As Boolean, ByRef rhs As Boolean ) As Boolean

用法
result = lhs = rhs

參數
lhs
要與之進行比較的左側運算式。
rhs
要與之進行比較的右側運算式。
T
任何指針類型。

返回值
如果運算式相等，則返回負 1 （-1）;如果運算式不相等，則返回零 （0）。

描述
運算子 = （相等） 是一個二元運算子，它比較兩個運算式的相等性並返回結果 - 一個布林值，主要以： 負 1 （-1）


-------------------------------------------------------- KeyGTK3PgOpEqv ----

Operator Eqv (Equivalence)   運算子
  
返回兩個數值的按位和（等效）

語法
Declare Operator Eqv ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Eqv rhs

參數
lhs
左側運算式。
T1
任何數字或布林類型。
rhs
右側運算式。
T2
任何數字或布林類型。
Ret
數位或布林類型（隨 和 而異）。T1T2

返回值
返回兩個運算元的按位等效性。

描述
此運算子返回其運算元的按位等效性，這是一種邏輯運算，該操作將生成一個值，其位設置取決於運算元的位（對於將布?


-------------------------------------------------------- KeyGTK3PgOperator ----

Operator   運算子
  
聲明或定義重載運算子。

語法
{ Type | Class | Union } typename
Declare Operator Cast () [ ByRef ] As datatype
Declare Operator @ () [ ByRef ] As datatype Ptr
Declare Operator assignment_op ( [ ByRef | ByVal ] rhs As datatype )
Declare Operator [] ( index As datatype ) [ ByRef ] As datatype
Declare Operator New ( size As UInteger ) As Any Ptr
Declare Operator New[] ( size As UInteger ) As Any Ptr
Declare Operator Delete ( buf  As Any Ptr )
Declare Operator Delete[] ( buf  As Any Ptr )
End { Type | Class | Union }

{ Type | Class | Union } typename
Declare Operator For ()
Declare Operator For ( [ ByRef | ByVal ] stp As typename )
Declare Operator Step ()
Declare Operator Step ( [ ByRef | ByVal ] stp As typename )
Declare Operator Next ( [ ByRef | ByVal ] cond As typename ) As Integer
Declare Operator Next ( [ ByRef | ByVal ] cond As typename, [ ByRef | ByVal ] stp As typename ) As Integer
End { Type | Class | Union }

Declare Operator unary_op ( [ ByRef | ByVal ] rhs As datatype ) As datatype
Declare Operator binary_op ( [ ByRef | ByVal ] lhs As datatype, [ ByRef | ByVal ] rhs As datatype ) As datatype

Operator typename.Cast () [ ByRef ] As datatype [ Export ]
Operator typename.@ () [ ByRef ] As datatype Ptr [ Export ]
Operator typename.assignment_op ( [ ByRef | ByVal ] rhs As datatype ) [ Export ]
Operator typename.[] ( index As datatype ) [ ByRef ] As datatype [ Export ]
Operator unary_op ( [ ByRef | ByVal ] rhs As datatype ) As datatype [ Export ]
Operator binary_op ( [ ByRef | ByVal ] lhs As datatype, [ ByRef | ByVal ] rhs As datatype ) As datatype [ Export ]
Operator typename.New ( size as uinteger ) As Any Ptr [ Export ]
Operator typename.New[] ( size As UInteger ) As Any Ptr [ Export ]
Operator typename.Delete ( buf  As Any Ptr ) [ Export ]
Operator typename.Delete[] ( buf  As Any Ptr ) [ Export ]

參數
typename 
、 、 或 的名稱。TypeClassUnionEnum
assignment_op 
let += -= *= &= /= \= mod= shl= shr= and= or= xor= imp= eqv= ^=
unary_op
- not * -> abs sgn fix frac int exp log sin asin cos acos tan atn len sqr
binary_op
+ - * & / \ mod shl shr and or xor imp eqv ^ = <> < > <= >=

描述
內置運算子（如 、）在運算式中使用時具有預定義的行為。當運算子的至少一個參數是 、 、 或資料類型時，可以重載這些運算子以執行預定義操作以外的操作。
運算子只是函數。運算子


-------------------------------------------------------- KeyGTK3PgOpExponentiate ----

Operator ^ (Exponentiate)   運算子
  
將數值運算式提高到一定功效

語法
Declare Operator ^ ( ByRef lhs As Double, ByRef rhs As Double ) As Double

用法
result = lhs ^ rhs

參數
lhs
左側基本運算式。
rhs
右側指數運算式。

返回值
返回提高到某個指數的基本運算式的冪。

描述
運算子 ^ （冪） 返回基運算式 （） 提高到某個指數運算式 （） 的結果。 僅適用於雙浮點數，其他類型的運算元將在執行冪之前轉換為雙精度。小?


-------------------------------------------------------- KeyGTK3PgOpFor ----

Operator For (Iteration)   運算子
  
聲明或定義具有使用者定義類型變數的迴圈使用的運算子For...Next

語法
{ Type | Class | Union } typename
Declare Operator For ()
Declare Operator For ( [ ByRef | ByVal ] stp As typename )
...
End { Type | Class | Union }

用法
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

參數
(including arguments)
typename
、或 的名稱TypeClassUnion
stp,step_value
用作增量值的對象typename
iterator
用作反覆運算器的對象typename
end_value
用作迴圈終止值的物件typename
start_value
最初用於將構造或賦值複製到反覆運算器的物件typename

描述
Operator For，並且可以在用戶定義的類型定義中重載，以允許將該類型的物件用作迴圈中的反覆運算器和步驟值。
與所有非靜


-------------------------------------------------------- KeyGTK3PgOpGreaterThan ----

Operator > (Greater Than)   運算子
  
比較一個運算式大於另一個運算式

語法
Declare Operator > ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator > ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator > ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator > ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator > ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator > ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator > ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator > ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator > ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator > ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator > ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator > ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator > ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator > ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs > rhs

參數
lhs
要與之進行比較的左側運算式。
rhs
要與之進行比較的右側運算式。
T
任何指針類型。

返回值
如果左側運算式大於右側運算式，則返回負 1 （-1）;如果小於或等於，則返回零 （0）。

描述
運算子 > （大於）是


-------------------------------------------------------- KeyGTK3PgOpGreaterThanOrEqual ----

Operator >= (Greater Than Or Equal)   運算子
  
比較大於或等於另一個運算式的運算式

語法
Declare Operator >= ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator >= ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator >= ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator >= ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator >= ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator >= ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator >= ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator >= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator >= ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator >= ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator >= ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator >= ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator >= ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator >= ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs >= rhs

參數
lhs
要與之進行比較的左側運算式。
rhs
要與之進行比較的右側運算式。
T
任何指針類型。

返回值
如果左側運算式大於或等於右側運算式，則返回負 1 （-1）;如果小於，則返回零 （0）。

描述
運算子 >=（大於或等於）是一個二元?


-------------------------------------------------------- KeyGTK3PgOpImp ----

Operator Imp (Implication)   運算子
  
返回兩個數值的按位和（暗示）

語法
Declare Operator Imp ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Imp rhs

參數
lhs
左側運算式。
T1
任何數字或布林類型。
rhs
右側運算式。
T2
任何數字或布林類型。
Ret
數位或布林類型（隨 和 而異）。T1T2

返回值
返回兩個運算元的按位含義。

描述
此運算子返回其運算元的按位元含義，這是一種邏輯運算，該操作將生成一個值，其位設置取決於運算元的位（對於將布林值


-------------------------------------------------------- KeyGTK3PgOpIntegerDivide ----

Operator \ (Integer Divide)   運算子
  
劃分兩個運算式Integer

語法
Declare Operator \ ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator \ ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

用法
result = lhs \ rhs

參數
lhs
左側的紅利運算式。
rhs
右側除數運算式。

返回值
返回股息和除數的商。Integer

描述
運算子 \（整數除法）將兩個運算式相除並返回結果。浮點數值通過向上或向下舍入轉換為，並且生成的商的小數部?


-------------------------------------------------------- KeyGTK3PgOpIs ----

Operator Is (Run-Time Type Information)   運算子
  
檢查物件是否與從其編譯時類型派生的類型
相容（在繼承上下文中）

語法
result = expression Is  typename

參數
expression
要檢查的運算式，是直接或間接派生自 使用的 類型的物件。ObjectExtends
typename
要檢查的子類型。此類型必須直接或間接派生自運算式類型（物件的編譯時類型）。

返回值
如果運算式是實類型的對象或其從運算式類型派生的基類型之一，則返回負 1 （）;如果運算式是不相容類型的對象，則返回零 （）。-1typename0

描述
該運算子必須與繼承結合使用，以便?


-------------------------------------------------------- KeyGTK3PgOpLessThan ----

Operator < (Less Than)   運算子
  
比較一個運算式小於另一個運算式

語法
Declare Operator < ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator < ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator < ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator < ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator < ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator < ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator < ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator < ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator < ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator < ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator < ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator < ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator < ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator < ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs < rhs

參數
lhs
要與之進行比較的左側運算式。
rhs
要與之進行比較的右側運算式。
T
任何指針類型。

返回值
如果左側運算式小於右側運算式，則返回負 1 （-1）;如果大於或等於，則返回零 （0）。

描述
運算子 < （小於） 是一?


-------------------------------------------------------- KeyGTK3PgOpLessThanOrEqual ----

Operator <= (Less Than Or Equal)   運算子
  
比較小於或等於另一個運算式的運算式

語法
Declare Operator <= ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator <= ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator <= ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator <= ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator <= ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator <= ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator <= ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator <= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator <= ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator <= ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator <= ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator <= ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator <= ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator <= ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs <= rhs

參數
lhs
要與之進行比較的左側運算式。
rhs
要與之進行比較的右側運算式。
T
任何指針類型。

返回值
如果左側運算式小於或等於右側運算式，則返回負 1 （-1）;如果大於，則返回零 （0）。

描述
運算子 <=（小於或等於


-------------------------------------------------------- KeyGTK3PgOpLet ----

Operator Let (Assign)   運算子
  
指示重載運算子 = （賦值） 時的設定運算子

語法
{ Type | Class | Union } typename
Declare Operator Let ( [ ByRef | ByVal ] rhs As datatype )
End { Type | Class | Union }

Operator typename.Let ( [ ByRef | ByVal ] rhs As datatype )

用法
lhs = rhs
或
lhs => rhs

參數
typename 
、 或 的名稱。TypeClassUnion
lhs
要分配到的變數。
rhs
要分配的值。

描述
Let用於重載運算子並將其與比較運算子區分開來。
將通過調用 中定義的運算子過程將 分配給 。
這包括通過使用 （或 ） 賦值從函數返回的物件的情況。
目


-------------------------------------------------------- KeyGTK3PgOpLetlist ----

Operator Let() (Assignment)   運算子
  
將使用者定義類型的欄位分配給變數清單

語法
Let( variable1 [, variable2 [, ... ]] ) = UDT_var
或
Let( variable1 [, variable2 [, ... ]] ) => UDT_var

參數
variable1 [, variable2 [, ... ]]
以逗號分隔的變數清單，用於接收變數欄位的值。UDT
UDT_var
使用者定義的類型變數。

描述
將變數欄位中的值分配給變數清單。
當為 a Base 時，由運算子分配?


-------------------------------------------------------- KeyGTK3PgOpMemberAccess ----

Operator . (Member Access)   運算子
  
從對對象的引用返回對成員的引用

語法
Declare Operator . ( ByRef lhs As T ) ByRef As U

用法
result = lhs . rhs

參數
lhs
對象。
T
用戶定義的類型。
rhs
要訪問的成員的名稱。
U
引用的類型。rhs

返回值
返回對 指定的成員的引用。rhs

描述
運算子 .（?


-------------------------------------------------------- KeyGTK3PgOpModulus ----

Operator Mod (Modulus)   運算子
  
從除法操作中查找剩餘部分

語法
Declare Operator Mod ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer

用法
result = lhs Mod rhs

參數
lhs
左側的紅利運算式。
rhs
右側除數運算式。

返回值
返回除法操作的其餘部分。

描述
運算子 Mod（模數）除以兩個運算式並返回餘數。?


-------------------------------------------------------- KeyGTK3PgOpMultiply ----

Operator * (Multiply)   運算子
  
將兩個數值運算式相乘

語法
Declare Operator * ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator * ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator * ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator * ( ByRef lhs As Double, ByRef rhs As Double ) As Double

用法
result = lhs * rhs

參數
lhs
左側乘數運算式。
rhs
右側乘數運算式。

返回值
返回兩個乘數的乘積。

描述
運算子 * （乘法?


-------------------------------------------------------- KeyGTK3PgOpNegate ----

Operator - (Negate)   運算子
  
更改數值運算式的符號

語法
Declare Operator - ( ByRef rhs As Integer ) As Integer
Declare Operator - ( ByRef rhs As Single ) As Single
Declare Operator - ( ByRef rhs As Double ) As Double

用法
result = - rhs

參數
rhs
要否定的右側數值運算式。

返回值
返回運算式的負數。

描述
運算子 - （否定）是否


-------------------------------------------------------- KeyGTK3PgOpNew ----

Operator New Expression   運算子
  
用於動態分配記憶體並構造指定類型的資料的運算子。

用法
result = New datatype
or
result = New datatype ( initializers, ... )
or
result = New datatype[ count ]

參數
datatype
要創建的資料類型的名稱。
initializers
變數的初始值。
count
要分配的元素的確切數量。

返回值
資料類型為指向新分配資料的指標，如果記憶體分配失敗，則為空指針。

描述
運算子動態分配記憶體並構造指定的資料類型。
對於簡單類型（如整數），可以給出初始值。對於沒有構造函數


-------------------------------------------------------- KeyGTK3PgOpNewOverload ----

Operator New Overload   運算子
  
成員運算子，用於超載應用於 UDT（用戶定義的類型）時提供的動態記憶體分配過程部分。Operator New Expression

語法
Declare Operator New ( size As UInteger ) As Any Ptr
Declare Operator new[] ( size As UInteger ) As Any Ptr

參數
size 
要分配的位元組數。
返回值
類型為 Any Ptr 的指標，指向新分配的記憶體的開始。

描述
成員運算子在應用於 UDT（用戶定義類型）時，會重載該運算子提供的動態記憶體分配進程部分。因此，使用者可以定義自己的動態記憶體分?


-------------------------------------------------------- KeyGTK3PgOpNext ----

Operator Next (Iteration)   運算子
  
確定是否應終止迴圈For...Next

語法
{ Type | Class | Union } typename
Declare Operator Next ( [ ByRef | ByVal ] cond As typename ) As Integer
Declare Operator Next ( [ ByRef | ByVal ] cond As typename, [ ByRef | ByVal ] stp As typename ) As Integer
...
End { Type | Class | Union }

用法
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

參數
(including arguments)
typename
、或 的名稱TypeClassUnion
cond,end_value
用作迴圈終止值的物件typename
stp,step_value
用作增量值的對象typename
iterator
用作反覆運算器的對象typename
start_value
最初用於將構造或賦值複製到反覆運算器的物件typename

描述
Operator For，並且可以在用戶定義的類型定義中重載，以允許將該類型的物件用作迴圈中的反覆運算器和步驟值。
與所有非靜態成員過程一樣?


-------------------------------------------------------- KeyGTK3PgOpNot ----

Operator Not (Complement)   運算子
  
返回數值的按位非補數

語法
Declare Operator Not ( ByRef rhs As Byte ) As Integer
Declare Operator Not ( ByRef rhs As UByte ) As Integer
Declare Operator Not ( ByRef rhs As Single ) As Integer
Declare Operator Not ( ByRef rhs As Double ) As Integer

Declare Operator Not ( ByRef rhs As T ) As T

用法
result = Not rhs

參數
rhs
右側運算式。
T
任何數字或布林類型。

返回值
返回其運算元的按位補集。

描述
此運算子返回其運算元的按位補集，這是一個邏輯運算，它生成一個值，其位設置取決於運算元的位。
 （對於布林類型?


-------------------------------------------------------- KeyGTK3PgOpNotEqual ----

Operator <> (Not Equal)   運算子
  
比較不等式的兩個運算式

語法
Declare Operator <> ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator <> ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator <> ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator <> ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator <> ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator <> ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator <> ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator <> ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator <> ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator <> ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator <> ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator <> ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator <> ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator <> ( ByRef lhs As T, ByRef rhs As T ) As Integer

Declare Operator <> ( ByRef lhs As Boolean, ByRef rhs As Boolean ) As Boolean

用法
result = lhs <> rhs

參數
lhs
要與之進行比較的左側運算式。
rhs
要與之進行比較的右側運算式。
T
任何指針類型。

返回值
如果運算式不相等，則返回負 1 （-1）;如果運算式相等，則返回零 （0）。

描述
運算子 <> （不等於） 是一個二元運算子，它比較兩個運算式的不等式並返回結果 - ?


-------------------------------------------------------- KeyGTK3PgOpOr ----

Operator Or (Inclusive Disjunction)   運算子
  
返回兩個數值的按位或（包括析取）

語法
Declare Operator Or ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Or rhs

參數
lhs
左側運算式。
T1
任何數字或布林類型。
rhs
右側運算式。
T2
任何數字或布林類型。
Ret
數位或布林類型（隨 和 而異）。T1T2

返回值
返回兩個運算元的按位析取。

描述
此運算子返回其運算元的按位析取，這是一種邏輯運算，該操作產生一個值，其位設置取決於運算元的位（對於將布林值


-------------------------------------------------------- KeyGTK3PgOpOrElse ----

Operator Orelse (Short Circuit Inclusive Disjunction)   運算子
  
返回兩個數值的短路或（非獨占分離）

語法
Declare Operator OrElse ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs OrElse rhs

參數
lhs
左側運算式。
T1
任何數字或布林類型。
rhs
右側運算式。
T2
任何數字或布林類型。
Ret
數位或布林類型（隨 和 而異）。T1T2

返回值
返回兩個運算元的短路或（包括析取）。

描述
此運算子計算左側運算式。如果結果為非零，則立即返回（true）。如果結果為零，則計算右側，並返回其邏輯結


-------------------------------------------------------- KeyGTK3PgOpPlacementNew ----

Operator Placement New   運算子
  
用於在指定記憶體位址處構造物件的運算子。

語法
result = New(address) datatype
or
result = New(address) datatype ( initializers, ... )
or
result = New(address) datatype[ count ]

參數
address 
記憶體中要構造的位置。括弧不是可選的。
initializers
變數的初始值。
datatype
要構造的資料類型的名稱。
count
要構造的元素數。

返回值
指向新構造資料的類型的指標。datatype

描述
運算子在指定的記憶體位置構造指定的資料類型。
對於簡單類型（如整數），可以給出初始值。對於沒有 s 的類型，可


-------------------------------------------------------- KeyGTK3PgOpPpConcat ----

Operator ## (Preprocessor Concatenate)   運算子
  
用於連接字串的前置處理器運算子

語法
text##text

描述
此運算子通過連接權杖兩側的文本來創建新權杖。此文本可以被其他巨集識別並進一步擴展。一種用途是創建一個巨集，該巨集根?


-------------------------------------------------------- KeyGTK3PgOpPpEscape ----

Operator ! (Escaped String Literal)   運算子
  
顯式指示應為轉義序列處理字串文本。

語法
!"text"

參數
!
前置處理器轉義字串運算子
"text"	
包含轉義字元的字串文本

描述
此運算子顯式指示應處理其後面的字串文本（用雙引號括起來）作為轉義序列。這是一個前置處理器運算子，只能在編譯時與字串文本一起使用。
字串文本?


-------------------------------------------------------- KeyGTK3PgOpPpNoescape ----

Operator $ (Non-Escaped String Literal)   運算子
  
顯式指示不應為轉義序列處理字串文本。

語法
$"text"

參數
$
前置處理器非轉義運算子
"text"	
字串文本

描述
此運算子顯式指示不應處理其後面的字串文本（用雙引號括起來）作為轉義序列。這是一個前置處理器運算子，只能在編譯時與字串文本一起使用。
字串文本的預設?


-------------------------------------------------------- KeyGTK3PgOpPpStringize ----

Operator # (Preprocessor Stringize)   運算子
  
用於將巨集引數轉換為字串的前置處理器運算子

語法
#macro_argument

描述
此運算子將 轉換為一個字串，其值為參數的名稱。此替換是在宏擴展期間（編譯之前）進行的。
 注意：由於此功能，在宏中使用檔處理語句時應小心。由於採用“#”參數的檔處理?


-------------------------------------------------------- KeyGTK3PgOpProcptr ----

Operator Procptr (Procedure Pointer)   運算子
  
返回過程的地址

語法
Declare Operator ProcPtr ( ByRef identifier As proctype [, proctype ] ) As proctype Ptr

用法
result = ProcPtr ( identifier [, proctype ] )

參數
identifier
過程識別字。
proctype
任何類型的過程（子/函數）。

返回值
返回過程的地址。

描述
此運算子返回 或 過程的地址。
使用兩個參數語法時，這允許基於子/函數類型獲取 過程指標。
這樣就可以顯式指定子/函數的“類型”，以解決過程重載或檢查非


-------------------------------------------------------- KeyGTK3PgOpPtrIndex ----

Operator [] (Pointer Index)   運算子
  
返回對來自位址的記憶體偏移量的引用

語法
Declare Operator [] ( ByRef lhs As T Pointer, ByRef rhs As Integer ) ByRef As T


用法
result = lhs [ rhs ]
or
lhs [ rhs ] = value

參數
lhs
基址。
rhs
從 的有符號偏移量。lhs
T
任何資料類型。

描述
此運算子返回對記憶體中距基址一定距離的值的引用。它本質上是“”的簡寫，因為引用可以被認為是具有記憶體位置“”作為值的指標，並且隱式取消引用;兩者都做同樣的


-------------------------------------------------------- KeyGTK3PgOpPtrMemberAccess ----

Operator -> (Pointer To Member Access)   運算子
  
從指向對象的指標返回對成員的引用

語法
Declare Operator -> ( ByRef lhs As T Ptr ) ByRef As U

用法
result = lhs -> rhs

參數
lhs
物件的位址。
T
用戶定義的類型。
rhs
要訪問的成員的名稱。
U
引用的類型。rhs

返回值
返回對 指定的成員的引用。rhs

描述
運算子 ->（指向成員訪問的指標）通過指向某個對象的成員的指標返回對該對象的引用。它具有取消引用指向物件的指標，然後使用 的效?


-------------------------------------------------------- KeyGTK3PgOpShiftLeft ----

Operator Shl (Shift Left)   運算子
  
將數值運算式的位向左移動

語法
Declare Operator Shl ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator Shl ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger
Declare Operator Shl ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As LongInt
Declare Operator Shl ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As ULongInt

用法
result = lhs Shl rhs

參數
lhs
左側運算式。
rhs
右側偏移運算式。

返回值
返回向左移動次數的結果。lhsrhs

描述
運算子 Shl（向左移）將左側運算式 （） 中的所有位向左移動，由右側運算式 （） 指定多次。從數值上講，結果與 “” 相同。例如，“” 返回二進位數字，“


-------------------------------------------------------- KeyGTK3PgOpShiftRight ----

Operator Shr (Shift Right)   運算子
  
將數值運算式的位向右移動

語法
Declare Operator Shr ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator Shr ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger
Declare Operator Shr ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As LongInt
Declare Operator Shr ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As ULongInt

用法
result = lhs Shr rhs

參數
lhs
左側運算式。
rhs
右側偏移運算式。

返回值
返回右移移次數的結果。lhsrhs

描述
運算子 Shr（向右移動）將左側運算式 （） 中的所有位向右移動，由右側運算式 （） 指定多次。從數值上講，結果與“ / ”相同。例如，“” 返回二進位數字，


-------------------------------------------------------- KeyGTK3PgOpStep ----

Operator Step (Iteration)   運算子
  
遞增迴圈的反覆運算器For...Next

語法
{ Type | Class | Union } typename
Declare Operator Step ()
Declare Operator Step ( [ ByRef | ByVal ] stp As typename )
...
End { Type | Class | Union }

用法
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

參數
(including arguments)
typename
、或 的名稱TypeClassUnion
stp,step_value
用作增量值的對象typename
iterator
用作反覆運算器的對象typename
end_value
用作迴圈終止值的物件typename
start_value
最初用於將構造或賦值複製到反覆運算器的物件typename

描述
Operator For，並且可以在用戶定義的類型定義中重載，以允許將該類型的物件用作迴圈中的反覆運算器和步驟值。
與所有非靜態成員過程一樣，


-------------------------------------------------------- KeyGTK3PgOpStringIndex ----

Operator [] (String Index)   運算子
  
返回對字串中字元的數值的引用

語法
Declare Operator [] ( ByRef lhs As String, ByRef rhs As Integer ) ByRef As UByte
Declare Operator [] ( ByRef lhs As ZString, ByRef rhs As Integer ) ByRef As UByte
Declare Operator [] ( ByRef lhs As WString, ByRef rhs As Integer ) ByRef As T

用法
result = lhs [ rhs ]
or
lhs [ rhs ] = value

參數
lhs
字串（字串引用，而不是作為本機複本返回的字串）。
rhs
與第一個字元的從零開始的偏移量。
T
寬字元類型（因平臺而異）。

描述
以下運算子返回對字串中特定字元的數值的引用：
對於一個或一個：StringZString
a（包含字元的 ASCII 值）。UByte
?


-------------------------------------------------------- KeyGTK3PgOpStrptr ----

Operator Strptr (String Pointer)   運算子
  
返回字串的字元資料的位址。

語法
Declare Operator StrPtr ( ByRef lhs As String ) As ZString Ptr
Declare Operator StrPtr ( ByRef lhs As WString ) As WString Ptr

用法
result = StrPtr ( lhs )

參數
lhs
字串。

返回值
向字串/字串的字元資料返回 a（如果為空字串，則為 null 值）。ZString/WString Ptr

描述
此運算子返回指向字串/字串的字元資料開頭的 。 是獲取字串字元資料位址的正確方法。
如果為空（僅適用于長度可變的字串），則返回空指


-------------------------------------------------------- KeyGTK3PgOpSubtract ----

Operator - (Subtract)   運算子
  
減去兩個運算式

語法
Declare Operator - ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator - ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator - ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator - ( ByRef lhs As Double, ByRef rhs As Double ) As Double

Declare Operator - ( ByRef lhs As T Pointer, ByRef rhs As T Pointer ) As Integer
Declare Operator - ( ByRef lhs As T Pointer, ByRef rhs As Integer ) As T Pointer

Declare Operator - ( ByRef lhs As T, ByRef rhs As T ) As Integer
Declare Operator - ( ByRef lhs As T, ByRef rhs As Integer ) As T
Declare Operator - ( ByRef lhs As Integer, ByRef rhs As T ) As T

用法
result = lhs - rhs

參數
lhs
要從中減去的左側運算式。
rhs
要減去的右側運算式。
T
任何指針類型。

返回值
返回兩個運算式的減法。

描述
當左側和右側運算式是數值時，運算子 - （減去）返回兩個值的減法。
如果左側和右側運算式都是類型，則對於某種類型，運算子對位址執行指針減?


-------------------------------------------------------- KeyGTK3PgOption ----

Option()
  
指定符號的其他屬性和/或特徵。

語法
Option( "literal-text" )

參數
literal-text
指定選項的文字文本。請參閱說明。

描述
Option()允許程式師指定其他屬性或特徵。在語法中，需要將字串括在引號和括弧中。無法識別的選項將被忽略。
還可以用作語句來指定其他編譯時選項。請參見編譯器開關。



-------------------------------------------------------- KeyGTK3PgOptionbase ----

Option Base   選項
  
指定陣列聲明的預設下限

語法
Option Base base_subscript

參數
base_subscript
數位文本值

描述
Option Base是為以下任何陣列聲明設置預設下限的語句。此預設值對於使用模組的其餘部分仍然有效，並且可


-------------------------------------------------------- KeyGTK3PgOptionbyval ----

Option ByVal   選項
  
指定預設情況下在過程聲明中按值傳遞參數

語法
Option ByVal

描述
Option ByVal是一個語句，它將過程參數的缺省傳遞約定設置為按值，就像用 聲明一樣。此默認


-------------------------------------------------------- KeyGTK3PgOptiondynamic ----

Option Dynamic   選項
  
指定可變長度陣列聲明

語法
Option Dynamic

描述
Option Dynamic是一個語句，它指定任何後續陣列聲明都是可變長度的，無論它們是否使用常量下標範圍聲明。這對於所使用的模?


-------------------------------------------------------- KeyGTK3PgOptionescape ----

Option Escape   選項
  
指定預設情況下應為類似 C 的轉義序列處理字串文本

語法
Option Escape

描述
Option Escape是一個語句，預設情況下，它會導致針對類似 C 的轉義序列處理字串文本。通常，轉義序列在字串文本中不起作用，除非字串以 ！ 為首碼。運算子（轉義字串文本


-------------------------------------------------------- KeyGTK3PgOptionexplicit ----

Option Explicit   選項
  
強制在使用變數、物件和陣列之前對其進行聲明

語法
Option Explicit

描述
Option Explicit是一個語句，它強制任何以下變數、物件或陣列用法前面加上聲明，例如，


-------------------------------------------------------- KeyGTK3PgOptiongosub ----

Option Gosub   選項
  

	Enables support for GoSub and On Gosub.

Syntax
Option Gosub

Description
Option Gosub enables support for GoSub and Return (from gosub).

Because Return could mean return-from-gosub or return-from-procedure, Option Gosub and Option Nogosub can be used to 


-------------------------------------------------------- KeyGTK3PgOptionnogosub ----

Option Nogosub   選項
  
禁用對 和 的支持。GoSubOn Gosub

語法
Option Nogosub

描述
Option Nogosub禁用對 和 的支持（從 gosub）。
因為可能意味著從 gosub 返回或從過程返回，並且可用於啟用和禁用支持。當支援被禁用時，將被識別為


-------------------------------------------------------- KeyGTK3PgOptionnokeyword ----

Option NoKeyword   選項
  
“未定義”保留關鍵字

語法
Option NoKeyword keyword

參數
keyword
要取消定義的關鍵字

描述
Option NoKeyword是一個取消定義 FreeBASIC 保留關鍵字的語句，這意味著它可以用作變數、物件


-------------------------------------------------------- KeyGTK3PgOptionprivate ----

Option Private   選項
  
預設情況下為過程聲明指定內部連結

語法
Option Private

描述
Option Private是一個語句，預設情況下，它為以下任何過程聲明內部連結，就像用 聲明一樣。此缺省值對於


-------------------------------------------------------- KeyGTK3PgOptionstatic ----

Option Static   選項
  
恢復為預設陣列聲明行為

語法
Option Static

描述
Option Static是一個語句，它覆蓋 的行為，即使用常量下標範圍聲明的陣列是固定長度的。這對於所使用的模組的其餘部分仍然有效?


-------------------------------------------------------- KeyGTK3PgOpValueOf ----

Operator * (Value Of)   運算子
  
取消引用指針

語法
Declare Operator * ( ByRef rhs As T Pointer ) ByRef As T


用法
result = * rhs
or
* rhs = value

參數
rhs
要取消引用的地址。
T
任何標準、用戶定義或過程類型。

返回值
返回對存儲在位址 中的值的引用。rhs

描述
運算子 * （值的）返回對存儲在位址處的值的引用，通常稱為取消引用運算子。運算元不會以任何方式進行修改。
可以取消引用的任何類型的 ，但 .



-------------------------------------------------------- KeyGTK3PgOpVarptr ----

Operator Varptr (Variable Pointer)   運算子
  
返回變數或物件的位址

語法
Declare Operator VarPtr ( ByRef lhs As T ) As T Ptr

語法
result = VarPtr ( lhs )

參數
lhs
變數或物件。
T
任何資料類型。

返回值
返回變數或物件的位址。

描述
此運算子返回其運算元的地址。
當運算元為 類型時，將返回內部字串描述符的位址。用於檢索字串資料的位址。
運算元不能是陣列，但可以是陣列元素。例如


-------------------------------------------------------- KeyGTK3PgOpXor ----

Operator Xor (Exclusive Disjunction)   運算子
  
返回兩個數值的按位異構（獨佔析取）

語法
Declare Operator Xor ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Xor rhs

參數
lhs
左側運算式。
T1
任何數字或布林類型。
rhs
右側運算式。
T2
任何數字或布林類型。
Ret
數位或布林類型（隨 和 而異）。T1T2

返回值
返回兩個運算元的按位 xor。

描述
此運算子返回其運算元的按位元排除，這是一種邏輯運算，該操作將生成一個值，其位設置取決於運算元的位（對於將布林?


-------------------------------------------------------- KeyGTK3PgOrGfx ----

Or   或
  
圖形語句的參數，該語句使用按位作為 blitting 方法PutOr

語法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Or

參數
Or
必填。

描述
該方法使用按位元函數將每個源圖元與相應的目標圖元組合在一起。這樣做的結果是輸出為目標圖元。
此方法適用於所有圖形模式。沒有蒙版顏色，儘管顏色值（在全彩色模式下）不會產生


-------------------------------------------------------- KeyGTK3PgOut ----

Out   埠輸出
  
將值輸出到硬體埠。

語法
Declare Function Out ( ByVal port As UShort , ByVal data As UByte ) As Long

用法
Out port,value

參數
port
要寫入的硬體埠。
data
要寫入的數?


-------------------------------------------------------- KeyGTK3PgOutput ----

Output   輸出
  
指定要為輸出模式打開的文字檔

語法
Open filename for Output [Encoding encoding_type] [Lock lock_type] as [#]filenum 

參數
filename
要打開以進行輸出的檔案名
encoding_type
指示檔的編碼類型
lock_type
鎖定以在檔打開時使用
filenum
要與打開的檔關聯的未使用的檔編號

描述
用於打開文字檔進行寫入的檔模式。
此模式用於寫入帶有 的文本，或以逗號分隔的值。
文字檔不能在FreeBASIC中同時讀取和寫


-------------------------------------------------------- KeyGTK3PgOverload ----

Overload   對象重載
  
指定過程名稱可以重載

語法
Declare [Static] Sub procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]

Declare [Static] Function procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type [Static] [Export]

[Public|Private] Sub procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

[Public|Private] Function procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

描述
在過程聲明中，允許重載過程名稱，也就是說，如果其他過程（無論是子過程還是函數）的參數清單是唯一的，則可以使用相同的名稱聲明其他過程（ 無論它們是子還是函數）。如果兩個參數列表包含


-------------------------------------------------------- KeyGTK3PgOverride ----

Override   對象覆蓋
  
方法屬性;指定方法必須覆蓋虛擬

語法
Type typename Extends basename
...
Declare Sub|Function|Operator|Property|Destructor ... ( [parameterlist] ) [[ ByRef ] As datatype] Override
...
End Type

描述
在方法聲明中，可用於指示此方法應重寫基類中的虛擬或抽象方法。然後，如果該方法不重寫任何內容（只有非靜態方法可以重寫虛擬或抽象方法），編譯器將顯示錯誤。
強烈建議不要強制使用 


-------------------------------------------------------- KeyGTK3PgPaint ----

Paint   填充
  
填充由指定顏色的邊框分隔的區域

語法
Paint [target,] [STEP] (x, y)[, [paint][, [border_color]]]

參數
target
指定要在其上繪製的緩衝區。
STEP
表示座標是相對的
(x, y)
用於開始泛光填充（繪畫）的圖元的座標
paint
顏色屬性或填充圖案
 一個數值表示一種顏色，而一個字串表示一個填充圖案
border_color
填充的邊界顏色

描述
圖形命令，用於填充由指定顏色的邊框分隔的區域。也稱為“泛水填充”或“油漆桶”。
可以在語句設


-------------------------------------------------------- KeyGTK3PgPalette ----

Palette   調色模式
  
使用調色板顏色自訂模式中的顏色

語法
Palette [Get] [index, color]
Palette [Get] [index, r, g, b]
Palette [Get] Using arrayname(idx)

參數
Get
指示獲取選項板資訊，而不是設置選項板資訊
index
調色板索引
color
顏色屬性
r
紅色成分
g
綠色成分
b
藍色分量
Using
指示使用顏色值陣列
arrayname(idx)
用於獲取/設置顏色屬性的陣列和索引

描述
該語句用於檢索或自訂色彩深度高達8bpp的圖形模式的當前調色板;在具有較高色彩深度的模式下使用時將不起作用


-------------------------------------------------------- KeyGTK3PgPascal ----

pascal   pascal
  
在過程聲明中指定 Pascal 樣式的調用約定

語法
Sub name pascal [Overload] [Alias "alias"] ( parameters )
Function name pascal [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

描述
在過程聲明中，指定過程將使用調用約定。在 Pascal 調用約定中，任何參數都將以與它們列出的順序相同的順序傳遞（推送到堆疊上），即從左到右。過程不需要保留 或 寄存器，並且必須在堆疊返


-------------------------------------------------------- KeyGTK3PgPcopy ----

PCopy   複製P模式
  
將一個圖形或文本頁面複製到另一個圖形或文本頁面

語法
Declare Function PCopy ( ByVal source As Long = -1, ByVal destination As Long = -1 ) As Long

用法
PCopy [ source ] [, destination ]

參數
source
要從中複製的頁面
destination
要複製到的頁面

返回值
如果成功，則返回零 （），或返回非零錯誤代碼以指示失敗。0

描述
將一個圖形或文本視頻頁面複製到另一個圖形或文本視頻頁面。用於在一個不可見頁面上繪製所有圖形並將其複製到活動的可見頁?


-------------------------------------------------------- KeyGTK3PgPeek ----

Peek   內存取地址
  
獲取記憶體中某個位址處的任意類型的值

語法
Declare Function Peek ( ByVal address As Any Ptr ) ByRef As UByte
Declare Function Peek ( datatype, ByVal address As Any Ptr ) ByRef As datatype

用法
Peek( [ datatype, ] address )

參數
address
記憶體中要從中獲取值的位址。
datatype
要獲取的值的類型。如果省略，則假定為。UByte

描述
此過程返回對記憶體位址在記憶體中給出的值的引用，並且等效於：
*cast(ubyte ptr, address)
或
*cast(datatype ptr, address)



-------------------------------------------------------- KeyGTK3PgPmap ----

PMap   映射P模式
  
映射視圖和物理映射之間的座標。

語法
Declare Function PMap ( ByVal coord As Single, ByVal func As Long ) As Single

用法
result = PMap( coord, func )

參數
coord
指示要映射的座標的運算式。
func
要應用於給定座標的映射函數編號。

返回值
映射的座標值。

描述
此函數轉換視圖（由語句定義）和物理（由語句設置）映射之間的座標。根據 的值，用於計算要由 以下者返回的不同映射：WindowView (Graphic


-------------------------------------------------------- KeyGTK3PgPoint ----

Point   點
  
返回指定圖元座標的顏色屬性

語法
result = Point( coord_x, coord_y [,buffer] )
or
result = Point( function_index )


用法
coord_x
圖元的 x 座標
coord_y
圖元的 y 座標
buffer
要從中讀取的圖像緩衝區
function_index
要返回的螢幕座標類型：值之一 、 、 、0123

返回值
返回資料類型為 .
如果提供了圖元的座標，Point 將返回指定座標處的顏色屬性，作為 8 個 bpp 索引模式下的 8 位元調色板索引、16 個 bpp 模式下的 24 位 RGB 值（未使用的前 8 位，R、G，B 的精度有限）以及 32 bpp 模式下的 32 位 RGB 或 RGBA 值（高 8 位未使用或保持 Alpha）。請注意，它不會返回 16 位值（5 位 R + 6 位 G + 5 位 B）。
如果參數是函數索引，則 Point 將返回由最後一個圖形命令設置的圖形游標座標之一。ULongx, y

論點返回的值0當前物理 x 座標。1當前物理 y 座標。2當前視圖 x 座標。如果尚未使用 WINDOW 語句，則返回與 POINT（0） 函數相同的值。3


-------------------------------------------------------- KeyGTK3PgPointCoord ----

PointCoord   點座標
  
查詢的筆在圖形模式下的位置Draw

語法
Declare Function PointCoord( ByVal func As Long ) As Single

用法
result = PointCoord( func )

描述
該函數可用於在圖形模式下查詢筆的 x 和 y 位置。結果值取決於傳遞的 func 值：PointCoordDraw

函子值：返回值：0x 物理座標，與 PMap（ 點坐


-------------------------------------------------------- KeyGTK3PgPoke ----

Poke   記憶體讀址
  
將值分配給記憶體中的位置。

語法
Declare Sub Poke ( ByVal address As Any Ptr, ByRef value As UByte )
Declare Sub Poke ( datatype, ByVal address As Any Ptr, ByRef value As datatype )

用法
Poke [ datatype, ] address, value

參數
datatype
指定地址處的資料類型。如果省略，則假定為。UByte
address
記憶體中要分配到的位置。
value
要分配的值。

描述
Poke為記憶體中的某個位置賦值。它等效於
*cast(ubyte ptr, address) = value
或
*cast(datatype ptr, address) = value

當 是用戶定義的?


-------------------------------------------------------- KeyGTK3PgPos ----

Pos   位置
  
返回文本游標的水準（從左到右）位置

語法
Declare Function Pos ( ) As Long
Declare Function Pos ( ByVal dummy As Long ) As Long

用法
result = Pos[ ( dummy ) ]

參數
dummy
為向後相容 QBASIC 而保留的未使用參數。

返回值
返回文本?


-------------------------------------------------------- KeyGTK3PgPpassert ----

#assert   #編譯中斷
  
前置處理器條件指令

語法
#assert  condition

參數
condition
假定為真的條件運算式

描述
在編譯時斷言條件運算式的真實性。如果 為 false，則編譯將因錯誤而停止。
此語


-------------------------------------------------------- KeyGTK3PgPpcmdline ----

#Cmdline
  
前置處理器指令

語法
#cmdline "args..."

參數
args...
有效且通用選項的參數清單（用空格分隔）。Compiler Options-print-help

描述
#cmdline是一個前置處理器指令，允許從第一個指定的 fb 原始檔案內部進行指定。第一個原始檔案是在 shell 或 IDE 命令列上調用 fbc 編譯器的第一個指定的 '.bas' 文件。 在第一個源?


-------------------------------------------------------- KeyGTK3PgPpdefine ----

#define   #預定義
  
用於定義巨集的前置處理器指令

語法
#define identifier body
#define identifier( [ parameters ] ) body
#define identifier( [ parameters, ] Variadic_Parameter... ) body

描述
#define允許聲明基於文本的前置處理器巨集。一旦編譯器看到 a，它將開始用 替換 的進一步出現。 可能為空。擴展以遞迴方式完成，直到沒有更多要擴展的內容，編譯器可以繼續分析生成的代碼。 可?


-------------------------------------------------------- KeyGTK3PgPpelse ----

#else   #否則
  
前置處理器條件指令

語法
#if (expression)
' Conditionally included statements if expression is True
#else
' Conditionally included statements if expression is False 
#endif

描述
#else可以添加到 、 或 塊中，以便為條件


-------------------------------------------------------- KeyGTK3PgPpelseif ----

#elseif   #又如
  
前置處理器條件指令

語法
#if (expression1)
' Conditionally included statements if expression1 is True
#elseif (expression2)
' Conditionally included statements if expression2 is True
#else
' Conditionally included statements if both
' expression1 and expression2 are False
#endif

描述
可以將#elseif?


-------------------------------------------------------- KeyGTK3PgPpendif ----

#endif   #結束如果
  
前置處理器條件指令

語法
#endif

描述
結束一組條件指令 請參閱
 、?


-------------------------------------------------------- KeyGTK3PgPperror ----

#error   #錯誤
  
前置處理器診斷指令

語法
#error error_text

參數
error_text
顯示消息

描述
#error中斷編譯以在編譯器找到它時顯示，然後解析繼續。
此關鍵字必須由 ...括起來，因此編譯器只有在滿足時才能訪問。



-------------------------------------------------------- KeyGTK3PgPpif ----

#if   #如果
  
前置處理器條件指令

語法
#if (expression)
' Conditionally included statements
#endif

描述
有條件地在編譯時包含語句。
如果計算結果為 True（非零），則包括 / 塊中包含的語句;如果計算結果為 False （），則包括排除（忽略）。
此條件指


-------------------------------------------------------- KeyGTK3PgPpifdef ----

#ifdef   #如果定義
  
前置處理器條件指令

語法
#ifdef symbol
' Conditionally included statements
#endif

描述
有條件地在編譯時包含語句。
如果已定義，則包括塊中的語句，如果未定義，則排除（忽略）。
等效於#i


-------------------------------------------------------- KeyGTK3PgPpifndef ----

#ifndef   #如果未定義
  
前置處理器條件指令

語法
#ifndef symbol
' Conditionally included statements
#endif

描述
有條件地在編譯時包含語句。
如果未定義，則包括塊中的語句，如果未定義符號，則排除（忽略）。
等效


-------------------------------------------------------- KeyGTK3PgPplang ----

#lang   #語言
  
用於設置編譯器方言的前置處理器語句。

語法
#lang "lang"

參數
"lang"
要設置的方言，括在雙引號中，並且必須是 、 、 或 之一。"fb""fblite""qb""deprecated"

描述
如果未在命令列上提供 -forcelang 選項，則可用於設置顯示該選項的源模組的方言。最多將在源模組上進行兩次傳遞。在第一次傳遞時，如果指定的方言不是默認?


-------------------------------------------------------- KeyGTK3PgPplibpath ----

#libpath   #庫路徑
  
用於添加庫搜索路徑的前置處理器語句

語法
#libpath "path"

描述
將庫搜索路徑添加到連結器的搜索路徑清單中，就像在命令列上使用“-p”選項指定一樣。
?


-------------------------------------------------------- KeyGTK3PgPpline ----

#line   #行號
  
用於設置當前行號和檔案名的前置處理器指令

語法
#line number [ "name" ]

參數
number 
新行號
"name"
新檔案名（可選）

描述
通知編譯器行號和檔案名的更改，並相應地更新 和 宏值。
編譯時消息和運行時消息都受此指令的影響


-------------------------------------------------------- KeyGTK3PgPpmacro ----

#Macro...#Endmacro
  
用於定義多行巨集的前置處理器指令

語法
#macro identifier [?] ( [ parameters ] )
body
#endmacro

#macro identifier [?] ( [ parameters, ] Variadic_Parameter... )
body
#endmacro

描述
#macro是 的多行版本。
如果在定義語法中使用 可選的問號 （？），則可以調用帶有參數的宏，而無需在參數兩邊使用括弧。
 注意：請注意觸發的可能性，以免與包含宏名稱作為其術語之一的表?


-------------------------------------------------------- KeyGTK3PgPpPragma ----

#pragma   #相容設定
  
前置處理器指令

語法
#pragma option [ = value ]
或或
#pragma push ( option [, value ] )

#pragma pop ( option )

參數
和相關 s 的可能值：optionvalue

選擇價值描述msbitfields假使用與 gcc 相容的位欄位（默認）msbitfields真使用與 Microsoft C 編譯器中使用的位欄位相容的位欄位一次不適用導致編譯指示的原始檔案的行為就像它曾經包含在#include一樣...固執性假禁用當前源中的“CONST 限定詞已丟棄”警告固執性真在當前源中啟用“已丟棄 CONST 限定詞”警告查找108假對非限定詞號名稱使用常規符號查找查找108真對非限定詞號名稱使用 fbc-1.08.x 或更早版本的符號查找
如果未給出值，編譯器將假定為 True （-1）。可以使用零 （0） 值代替 False。可以使


-------------------------------------------------------- KeyGTK3PgPpPragmaReserve ----

#Pragma Reserve   #相容設定
  
前置處理器指令

語法
#pragma reserve symbol
奧羅羅
#pragma reserve (extern) symbol

#pragma reserve (asm) symbol

#pragma reserve (asm, extern) symbol)或#pragma reserve (extern, asm) symbol)

參數
symbol
要保留的符號名稱。

描述
#pragma reserved語句是前置處理器指令，允許使用者通過訪問 fbc 編譯器的內部符號表來保留符號名稱：
- #pragma reserve symbol
語句將在當前範圍/命名空間中保留一個符號名稱，如


-------------------------------------------------------- KeyGTK3PgPpprint ----

#print   #輸出
  
前置處理器診斷指令

語法
#print text

描述
使編譯器


-------------------------------------------------------- KeyGTK3PgPpundef ----

#undef   #取消定義
  
用於取消定義巨集的前置處理器指令

語法
#undef symbol

描述
取消定義以前用 定義的符號。
可用於確保巨集或符號的生存期有限，並且不會與稍後可能在原始程式碼中定義的類似巨集定義衝突。
 ?


-------------------------------------------------------- KeyGTK3PgPreserve ----

Preserve   陣列保留
  
用於保留內容將調整陣列大小ReDim

語法
ReDim Preserve array(...) [As datatype]

描述
用於，以便在調整陣列大小時，不會重置資料，而是保留資料。這意味著當陣列擴大時，只有新資料被重置，而舊資料保持不變（但不一定在記憶體中的相同絕對位址）。
 注意：可能無法在所有情?


-------------------------------------------------------- KeyGTK3PgPreset ----

PReset   繪製圖元
  
繪製單個圖元

語法
PReset [target ,] [STEP] (x, y) [,color]

參數
target
指定要在其上繪製的緩衝區。
STEP
表示座標是相對的
(x, y)
圖元的座標。
color
顏色屬性。

描述
target指定要在其上繪製的緩衝區。 可能是使用 或 創建的映射。如果省略，則目標預設為螢幕的當前工作頁面。
是圖元的座標。STEP（如果存在），則表示座標相


-------------------------------------------------------- KeyGTK3PgPrint ----

(Print | ?)
  
將文本寫入螢幕

語法
(Print | ?) [ expressionlist ] [ , | ; ]

參數
expressionlist
要列印的項目列表

描述
Print將值清單輸出到螢幕。數值將轉換為其字串表示形式，符號的左填充。使用者定義類型的物件必須重載 。
運算式列表中的連續值由逗號 （） 或分號 （） 分隔。逗號表示列印應位於下一個


-------------------------------------------------------- KeyGTK3PgPrintPp ----

(Print | ?) #
  
將值清單寫入檔或設備

語法
(Print | ?) # filenum, [ expressionlist ] [ , | ; ]

參數
filenum
為 打開的檔或設備的檔編號。OutputAppend
expressionlist
要寫入的值的列表。

描述
Print #將值清單輸出到文字檔或設備。數值將轉換為其字串表示形式，符號的左填充。使用者定義類型的物件必須重載 。
運算式列表中的連續值由逗號 （） 或分號 （?


-------------------------------------------------------- KeyGTK3PgPrintusing ----

(Print | ?) Using
  
將格式化文字輸出到螢幕或輸出設備。

語法
(Print | ?) [# filenum ,] [ printexpressionlist {,|;} ] Using formatstring ; [ expressionlist [ ; ] ]

參數
filenum
為 打開的檔或設備的檔編號。（或者，可在適當情況下使用，而不是OutputAppendLPrintPrint #)
printexpressionlist
要列印的項目的可選前面列表，以逗號 （） 或分號 （） 分隔（有關詳細資訊，請參閱）。,;Print
formatstring
要使用的字串格式。
expressionlist
要設置格式的專案列表，以分號 （） 分隔。;

描述
使用參數確定的格式列印到螢幕顯示各種運算式。在內部，使用 2048 位元組的緩衝


-------------------------------------------------------- KeyGTK3PgPrivate ----

Private   私有
  
指定具有內部連結的過程

語法
Private Sub procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

Private Function procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

描述
在程序定義（在聲明行級別禁止）中，指定過程具有內部連結，這意味著其名稱對外部模組不可見。
因此，在編譯的模組中，如果兩個過程都是 ，則可能存在兩個具有相同識別字但定義在不同模組內?


-------------------------------------------------------- KeyGTK3PgProperty ----

Property   類屬性
  
聲明或定義類型或類中的屬性

語法
{ Type | Class } typename
Declare Property fieldname () [ ByRef ] As datatype
Declare Property fieldname ( [ ByRef | ByVal ] new_value As datatype )
Declare Property fieldname ( [ ByRef | ByVal ] index As datatype ) [ ByRef ] As datatype
Declare Property fieldname ( [ ByRef | ByVal ] index As datatype, [ ByRef | ByVal ] new_value As datatype )
End { Type | Class }

Property typename.fieldname () [ ByRef ] As datatype [ Export ]
statements
End Property

Property typename.fieldname ( [ ByRef | ByVal ] new_value As datatype ) [ Export ]
statements
End Property

Property typename.fieldname (  [ ByRef | ByVal ] index As datatype ) [ ByRef ] As datatype [ Export ]
statements
End Property

Property typename.fieldname (  [ ByRef | ByVal ] index As datatype, [ ByRef | ByVal ] new_value As datatype ) [ Export ]
statements
End Property

參數
typename 
或 的名稱TypeClass
fieldname 
屬性的名稱
new_value 
傳遞給要分配的屬性的值
index 
屬性索引值

描述
Property欄位用於獲取和設置 a 的值，或者以與其他資料欄位相同的方式設置 a 的值，只是執行過程，而不是簡單地分配到欄位或從欄位中檢索到的值。
是為其聲明


-------------------------------------------------------- KeyGTK3PgPset ----

PSet   繪點
  
繪製單個圖元

語法
PSet [target ,] [STEP] (x, y) [,color]

參數
target
指定要在其上繪製的緩衝區。
STEP
表示座標是相對的
(x, y)
圖元的座標。
color
顏色屬性。

描述
target指定要在其上繪製的緩衝區。 可能是使用 或 創建的映射。如果省略，則預設為螢幕的當前工作頁面。
是圖元的座標。 如果存在，則指示座標相對於圖形游標?


-------------------------------------------------------- KeyGTK3PgPsetGfx ----

PSet   繪點
  
選擇作為 blitting 方法的圖形語句的參數PutPSet

語法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], PSet

參數
PSet
必填。

描述
該方法將源圖元值複製到目標圖元上。
這是最簡單的方法。目標緩衝區中的圖元將直接被源緩?


-------------------------------------------------------- KeyGTK3PgPtr ----

(Pointer | Ptr)
  
變數聲明類型修飾符

語法
... As DataType {Pointer | Ptr}

描述
聲明指標變數。
變數類型可以是預定義類型，也可以是用戶定義類型。
運算子 或 用於獲取變數的位址。運算子用於取消引用指針，即訪?


-------------------------------------------------------- KeyGTK3PgPublic ----

Public   公共
  
指定具有外部連結的過程。

語法
Public Sub procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

Public Function procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

描述
在程序定義（在聲明行級別禁止）中，指定過程具有外部連結，這意味著其名稱對外部


-------------------------------------------------------- KeyGTK3PgPutfileio ----

Put (File I/O)   寫入位元組
  
將資料從緩衝區寫入檔

語法
Put #filenum As Long, [position As LongInt], data As Any [, amount As UInteger]
Put #filenum As Long, [position As LongInt], data As String
Put #filenum As Long, [position As LongInt], data() As Any

用法
Put #filenum, position, data [, amount]
varres = Put (#filenum, position, data [, amount])

參數
filenum
打開檔時傳遞給的值。Open
position
檔中必須從何處開始的位置。如果檔已打開，則該位置位於記錄中，否則以位元組為單位給出。如果省略，則從當前檔指針位置開始寫入。該位置是從 1 開始的：即檔的第一個記錄或位元組位於 位置 。
如果省略或為零 （），則檔寫入將從當前檔位置開始。PutFor Random1position0
data
從中寫入資料的緩衝區。它可以是數值變數、字串、陣列或使用者定義的類型。該操作將嘗試將完整的變數傳輸到磁片，除非給出。
放置陣列時，後面應跟一對空的括弧：“”。 將寫入陣列中的所有資料。 是不允許的。
輸入 s 時，寫入的位元組數與字串資料中的位元組數相同。 是不允許的。
注意：如果要從緩衝區寫入值，則不應將指針傳遞到緩衝區;相反，您應該傳遞緩衝區中的第一個變數（這可以通過取消引用指標來完成）。如果直接傳遞指標，則將放置指標變數中的記憶體，而不是它指向的記憶體。amountdata()PutamountStringamountOperator * (Value Of)Put
amount
使寫入檔的連續變數到檔中 - 即它將字?


-------------------------------------------------------- KeyGTK3PgPutgraphics ----

Put (Graphics)   寫入位元組
  
將圖像複製到另一個圖像或螢幕

語法
Put [target, ] [ [STEP](x, y), source [, (x1, y1)-[STEP](x2, y2) ] [, method [, ( alphaval|value|blender [, param]) ] ]

參數
target
是要在其中繪製圖像的緩衝區的位址。如果省略，圖像將被模糊到螢幕上。見下文。
[STEP](x, y)
指定從目標緩衝區或螢幕的左上角開始的偏移量，以便將圖像繪製到該緩衝區或螢幕。 指示偏移量相對於當前圖形游標位置。STEP(x, y)
source
是要繪製的圖像的緩衝區的位址。見下文。
(x1, y1)-[STEP](x2, y2)
在源緩衝區中指定要繪製的矩形區域。如果省略，則繪製整個緩衝區。 指示 和 分別相對於 和。STEPx2y2x1y1
method
指定用於將圖像繪製到目標緩衝區的方法，並且可以是以下任一方法（默認方法是）：
 與背景無關的方法XOR
PSet：源圖元值將複製而不進行修改。
 ：源圖元值在複製之前被否定為 1 的補數。
 ：源圖元值將複製而不進行修改。不繪製蒙版顏色的源圖元。見下文。PRESETTrans
依賴於背景的方法
And：目標圖元與源圖元按位元排列。見下文。
 ：目標圖元與源圖元按位元排列。見下文。
 ：目標圖元與源圖元按位元排列。見下文。
 ：源與參數或圖像的單個圖元中指定的透明度因數混合。見下文。
 ：源乘以值，並隨著飽和度添加到


-------------------------------------------------------- KeyGTK3PgRandom ----

Random   隨機訪問
  
指定要為隨機訪問模式打開的檔或設備

語法
Open filename for Random [Access access_type] [Lock lock_type] as [#]filenum [Len = record_length]

參數
filename
要打開的檔案名
access_type
指示檔是可以從中讀取、寫入檔還是同時讀取到兩者
lock_type
鎖定以在檔打開時使用
filenum
要與打開的檔關聯的未使用的檔編號
record_length
用於檔的記錄的大小

描述
打開一個檔或設備，用於讀取和/或寫入給定檔中的二進位資料，其中包含大小為 的記錄。
如果該檔


-------------------------------------------------------- KeyGTK3PgRandomize ----

Randomize   隨機初始化
  
為亂數產生器設定種子

語法
Declare Sub Randomize ( ByVal seed As Double = -1.0, ByVal algorithm As Long = 0 )

用法
Randomize [ seed ][, algorithm ]

參數
seed
亂數產生器的種子值，但對於除演算法 #4 之外的所有演算法，小數部分都被剪裁（見下文）。如果省略，將改用基於 的值。DoubleTimer
algorithm
用於選擇演算法的整數值（有關可用演算法，請參閱標準標頭“fbmath.bi”）。如果省略，則使用當前語言方言的預設演算法。

描述
設置有助於生成亂數的隨機種子，並選擇要使用的演算法。
的常量在 中定義?


-------------------------------------------------------- KeyGTK3PgRead ----

Read   讀取
  
讀取與語句一起存儲的值。Data

語法
Read variable_list

描述
使用命令讀取存儲在應用程式中的資料。
的元素必須是基本類型，數位，字串或陣列和使用者定義類型的元素。
程式中的所有語句都表現為單個列表，在讀取一個語句的最後一個元素後，將讀取以?


-------------------------------------------------------- KeyGTK3PgReadFile ----

Read (File Access)   讀取
  
檔訪問說明符

語法
Open filename As String For Binary Access Read As #filenum As Integer

描述
語句中子句的說明符。 指定


-------------------------------------------------------- KeyGTK3PgReadWriteFile ----

Read Write (File Access)   讀取
  
檔訪問說明符

語法
Open filename As String For Binary Access Read Write As #filenum As Integer

描述
語句中子句的說明符。 指定檔對輸入?


-------------------------------------------------------- KeyGTK3PgReallocate ----

Reallocate   重分配記憶體
  
為現有的保留區塊重新分配存儲

語法
Declare Function Reallocate cdecl ( ByVal pointer As Any Ptr, ByVal count As UInteger ) As Any Ptr

用法
result = Reallocate( pointer, count )

參數
pointer
要重新分配的已分配記憶體的位址。
count
要重新分配的總位元組數。

返回值
重新分配的記憶體的位址。如果重新分配不成功，並且 所指向的原始記憶體保持不變，則返回 null （） 指標。0pointer

描述
嘗試重新分配以前使用 或 分配的記憶體的大小。緩衝區的內容將被保留，但如果小於區塊的原始大小，緩


-------------------------------------------------------- KeyGTK3PgRedim ----

ReDim   重定義
  
定義可變長度陣列或調整其大小

語法
聲明動態陣列：
ReDim [ Shared ] symbolname([subscript [, ...]]) As datatype [, ...]
ReDim [ Shared ] As datatype symbolname([subscript [, ...]]) [, ...]
調整動態陣列的大小：
ReDim [ Preserve ] symbolname([subscript [, ...]]) [, ...]
藝術
ReDim [ Preserve ] [ ( ] expression [ ) ] ([subscript [, ...]]) [, ...]

參數
Shared
指定在整個模組中對陣列的共用（檔範圍）訪問。
Preserve
與現有陣列一起使用時，在調整大小時將保留陣列的內容。請注意，在某些情況下，資料不會保留其原始索引，請參閱下文。Preserve
symbolname
新的或現有的陣列識別字。
expression或(expression)
引用現有陣列的運算式。這可用于調整作為使用者定義類型成員的陣列的大小。在某些情況下，有必要在運算式兩邊指定括弧（特別是如果陣列運算式本身包含括弧） - 請參閱下面的示例。
subscript: [lowerbound To ] upperbound
陣列維度的下限和上限範圍。下限預設值為零 （），如果未指定，


-------------------------------------------------------- KeyGTK3PgRem ----

Rem   注釋
  
指示原始程式碼中的注釋。

語法
Rem comment

' Comment

/' Multi-line
   comment '/

描述
以 開頭的原始程式碼行指示該行是注釋，不會進行編譯。
單引號字元 （'） 也可用於指示注釋，並可能出現在源


-------------------------------------------------------- KeyGTK3PgReset ----

Reset   重置
  
關閉所有打開的檔，或重置標準 I/O 控制碼。

語法
Declare Sub Reset ( )
Declare Sub Reset ( ByVal streamno As Long )

用法
Reset
or
Reset( streamno )

參數
streamno
要重置的流編號，用於 stdin 或 stdout。01

描述
Reset，當調用時不帶任何參數時，將關閉所有磁片檔。
 ，當使用參數調用時，將重置與 stdin （） 或 stdout （） 關聯的重定向流或管道流。
 執行階段錯誤：
可以?


-------------------------------------------------------- KeyGTK3PgRestore ----

Restore   恢復資料
  
更改與語句一起存儲的值的下一個讀取位置。Data

語法
Restore [label]

描述
將下一個要讀取的資料指標設置為標籤之後第一個語句的第一個元素。標籤必須包含在與當前正在執行的代碼相同的模組中。 改變正常的從上到下的順序，其中 是 


-------------------------------------------------------- KeyGTK3PgResume ----

Resume   恢復行
  
在跳轉到錯誤處理常式後恢復執行的錯誤處理語句

語法
Resume

描述
Resume在錯誤處理常式（由 調用）中的傳統 QB 錯誤處理機制中使用，以將執行返回到導致錯誤的行?


-------------------------------------------------------- KeyGTK3PgResumenext ----

Resume Next   恢復行
  
在跳轉到錯誤處理常式後恢復執行的錯誤處理語句

語法
Resume Next

描述
Resume Next在錯誤處理常式（由 調用）中的傳統 QB 錯誤處理機制中使用，以將執行返回到導致?


-------------------------------------------------------- KeyGTK3PgReturn ----

Return (From Procedure)   返回
  
控制要從過程或 返回的流語句。GoSub

語法
Return expression

描述
Return用於從過程返回。
因為可能意味著從 gosub 返回或從過程返回，並且可用於啟用和禁用支持。當支持被禁用時，將被識別為從過程返回。啟用支持後，將識別為從 gosub 返回。
 （from p


-------------------------------------------------------- KeyGTK3PgReturnGosub ----

Return (From Gosub)   返回
  
控制要從過程或 返回的流語句。GoSub

語法
Return [ label ]

描述
Return用於從 gosub 返回。
因為可能意味著從 gosub 返回或從過程返回，並且可用於啟用和禁用支持。當支持被禁用時，將被識別為從過程返回。啟用支持後，將識別為從 gosub 返回。
 （來?


-------------------------------------------------------- KeyGTK3PgRgb ----

RGB   RGB
  
計算高/真彩色模式的有效顏色值

語法
#define RGB(r,g,b) CULng((CUByte(r) Shl 16) Or (CUByte(g) Shl 8) Or CUByte(b) Or (&hFF000000ul))

用法
result = RGB(red, green, blue)

參數
red
紅色分量值
green
綠色分量值
blue
藍色分量值

返回值
組合顏色。

描述
red和是 -的分量範圍為 -。
該函數可用于計算在高/真彩色模式下使用的有效顏色值。它返回一個無符號 long，格式為 ，其中 ，等於以十六進位格式傳遞給此函數的?


-------------------------------------------------------- KeyGTK3PgRgba ----

RGBA   RGBA
  
計算有效的顏色值，包括高/真彩色模式的 alpha（透明度）

語法
#define RGBA(r,g,b,a) CULng((CUByte(r) Shl 16) Or (CUByte(g) Shl 8) Or CUByte(b) Or (CUByte(a) Shl 24))

用法
result = RGBA(red, green, blue, alpha)

參數
red
紅色分量值
green
綠色分量值
blue
藍色分量值
alpha
阿爾法分量值

返回值
組合顏色

描述
red、和 是範圍為 -的組件。
該函數可用於計算有效的顏色值，包括用於在高/真彩色模式下使用的 Alpha 通道。它返回一個無符號長整型，格式為 ，?


-------------------------------------------------------- KeyGTK3PgRight ----

Right   字串取右邊
  
返回字串最右邊的子字串

語法
Declare Function Right ( ByRef str As Const String, ByVal n As Integer ) As String
Declare Function Right ( ByRef str As Const WString, ByVal n As Integer ) As WString

用法
result = Right[$]( str, n )

參數
str
源字串。
n
子字串長度，以字元為單位。

返回值
返回 最右邊的子字串。str

描述
返回從 的右側（結尾）開始的最右邊?


-------------------------------------------------------- KeyGTK3PgRmdir ----

RmDir   刪目錄
  
從檔案系統中刪除資料夾/目錄

語法
Declare Function RmDir ( ByRef folder As Const String ) As Long

用法
result = RmDir( folder )

參數
folder
要刪除的資料夾/目錄。

返回值
成功時返回零 （0），失敗時返回


-------------------------------------------------------- KeyGTK3PgRnd ----

Rnd   隨機值
  
返回範圍中的隨機雙精度數字[0, 1)

語法
Declare Function Rnd ( ByVal seed As Single = 1.0 ) As Double

用法
result = Rnd( seed )

參數
seed
可選參數。如果的值為零 （），則生成的最後一個亂數為 repeate。對於任何其他數字，將返回一個新的亂數。使用與 QB 相容的演算法，負數將完全重新設定生成器的種子。no 參數的預設值是返回一個新的亂數。Singleseed0.0

返回值
返回生成的亂數。

描述
基於隨機種子返回區域中的許多類型（即 ），請參見。
可以使用各種不同的?


-------------------------------------------------------- KeyGTK3PgRset ----

RSet   字串對齊向右
  
右對齊字串緩衝區中的字串

語法
Declare Sub RSet ( ByRef dst As String, ByRef src As Const String )
Declare Sub RSet ( ByVal dst As WString Ptr, ByVal src As Const WString Ptr )

用法
RSet dst, src

參數
dst
用於將文本複製到其中的緩衝區。StringWString
src
來源或正確證明。StringWString

描述
RSetright 將文本對齊到字串緩衝區中，用空格填補字元


-------------------------------------------------------- KeyGTK3PgRtrim ----

RTrim   字串刪空格右邊
  
刪除字串右側的周圍子字串或字元

語法
Declare Function RTrim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function RTrim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

用法
result = RTrim[$]( str [, [ Any ] trimset ] )

參數
str
源字串。
trimset
要修剪的子字串。

返回值
返回修剪過的字串。

描述
此過程從源字串的右側（末尾）修剪周圍的字元。如果指定，將修剪?


-------------------------------------------------------- KeyGTK3PgRun ----

Run   運行
  
將執行轉移到外部程式

語法
Declare Function Run ( ByRef program As Const String, ByRef arguments As Const String = "" ) As Long

用法
result = Run( program [, arguments ] )

參數
program
要將控制權移交給的程式（可執行檔）的檔案名（包括檔路徑）。
arguments
要傳遞給程式的命令列參數。

返回


-------------------------------------------------------- KeyGTK3PgSadd ----

SAdd   取地址
  
返回指向字串變數資料的指標

語法
Declare Function SAdd ( ByRef str As String ) As ZString Ptr
Declare Function SAdd ( ByRef str As WString ) As WString Ptr
Declare Function SAdd ( ByRef str As ZString ) As ZString Ptr

用法
result = SAdd( str )

參數
str
用於獲取 位址的字串運算式或變數

返回值
指向?


-------------------------------------------------------- KeyGTK3PgScope ----

Scope...End Scope
  
用於開始新作用域塊的語句

語法
Scope
[statements]
End Scope

描述
Scope 塊允許在程式中（重新）定義和在本地使用變數。
當變數在作用域結構內（重新）定義時，可以從其（重新）定義到作用域結束使用此局部工作變數。在此期間，作用域外具有相同名稱的任何變?


-------------------------------------------------------- KeyGTK3PgScreenCons ----

Screen (Console)   螢幕
  
獲取給定位置的字元或顏色屬性

語法
Declare Function Screen ( ByVal row As Long, ByVal column As Long, ByVal colorflag As Long = 0 ) As Long

用法
result = Screen( row, column [, colorflag ] )

參數
row
從控制台左上角開始的從 1 開始的偏移量。
column
從控制台左上角開始的從 1 開始的偏移量。
colorflag
如果等於 0，則返回 ASCII 代碼，否則返回 color 屬性。如果省略，則默認為 0。

返回值
字元的 ASCII 或顏色屬性。

描述
Screen返回在控制台輸出的給定位置找到的字元或 color 屬性。它在控制台模式和圖形模式下工作。
 col


-------------------------------------------------------- KeyGTK3PgScreencontrol ----

ScreenControl   螢幕控制
  
設置或獲取內部圖形庫設置

語法
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param1 As Long = &h80000000, ByRef param2 As Long = &h80000000, ByRef param3 As Long = &h80000000, ByRef param4 As Long = &h80000000 )
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param1 As LongInt, ByRef param2 As LongInt = &h80000000, ByRef param3 As LongInt = &h80000000, ByRef param4 As LongInt = &h80000000 )
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param As String)

用法
in the LONG (or INTEGER<32>) version of the sub:
ScreenControl( what [, [ param1 ] [, [ param2 ] [, [ param3 ] [, param4 ]]]] )
or,
ScreenControl( what , param )
in the LONGINT (or INTEGER<64>) version of the sub:
ScreenControl( what , param1 [, [ param2 ] [, [ param3 ] [, param4 ]]] )
or,
ScreenControl( what , param )

參數
what
指定要執行的功能
param1
第一個整數參數，包含要在進入時設置的值或在退出時獲得的值
param2
第二個整數參數，包含要在進入時設置的值或在退出時獲得的值
param3
第三個整數參數，包含要在進入時設置的值或在退出時獲得的值
param4
第四個整數參數，包含要在進入時設置的值或在退出時獲得的值
param
字串參數，包含要在輸入時設置的文本或在退出時獲得的文本

描述
此函數可用於設置或獲取?


-------------------------------------------------------- KeyGTK3PgScreencopy ----

ScreenCopy   螢幕複製
  
將圖形頁的內容複製到另一個圖形頁

語法
Declare Function ScreenCopy ( ByVal from_page As Long = -1, ByVal to_page As Long = -1 ) As Long

用法
ScreenCopy [ from_page ] [, to_page ]

參數
from_page
要從中複製的頁面
to_page
要複製到的頁面

返回值
如果成功，則返回零 （），或返回非零錯誤代碼以指示失敗。0

描述
from_page是要從中複製的頁面。如果省略此參數，則假定當前工作頁。 是要複製到的頁面。如果省略此參數，則假定當前可見的頁面。頁


-------------------------------------------------------- KeyGTK3PgScreenevent ----

ScreenEvent   螢幕事件
  
查詢和檢索系統事件。

語法
Declare Function ScreenEvent ( ByVal event As Any Ptr = 0 ) As Long

用法
result = ScreenEvent( [ event ] )

參數
event
指定函數應在其中存儲事件資料的緩衝區。

返回值
如果有要檢索的掛起事件，則返回，否則。-10

描述
此函數從內部 GfxLib 事件佇列中返回最新的可用系統事件。例如，我們所說的“事件”是指任何滑鼠或鍵盤活動。
事件資料（如果可用）將被複製


-------------------------------------------------------- KeyGTK3PgScreenglproc ----

ScreenGLProc   螢幕GL位址
  
獲取 OpenGL 過程的地址

語法
Declare Function ScreenGLProc ( ByRef procname As Const String ) As Any Ptr

參數
procname
要檢索 地址的過程的名稱

描述
此函數可用於獲取任何 OpenGL 過程的位址，以用於檢索指向與 OpenGL 擴展關聯?


-------------------------------------------------------- KeyGTK3PgScreengraphics ----

Screen (Graphics)   螢幕
  
使用類似 QB 的模式編號初始化圖形模式

語法
-lang fb|fblite 方言：-lang qb 方言：
Screen mode [, [ depth ] [, [ num_pages ] [, [ flags ] [, [ refresh_rate ]]]]]
Screen , [ active_page ] [, [ visible_page ]]

Screen [ mode ] [, [ colormode ] [, [ active_page ] [, [ visible_page ]]]]
參數
mode 
是 QB 樣式圖形螢幕模式編號（見下文）。如果為 ，則關閉任何當前設置的圖形模式，並且所有函數都將恢復其正常的控制台模式功能。有關可用模式，請參見下文。mode0
depth
是色彩深度（以每一像素位元數為單位）。這只對模式和更高版本有影響。和 的值是允許的。 也分別允許作為 和 的別名。如果省略，則默認為 。1481632152416328
num_pages
是您想要的視頻頁面數，見下文。如果省略，則默認為 。1
flags
用於選擇幾個東西作為圖形驅動程式優先順序，全屏模式。文件中預定義了一些常量，可供使用。請參閱頁面 ScreenRes 以獲取可用標誌。fbgfx.bi
refresh_rate
請求刷新率。如果它在當前卡中不可用或省略了參數，FreeBASIC 會自動選擇速率。
active_page
用於設置活?


-------------------------------------------------------- KeyGTK3PgScreeninfo ----

ScreenInfo   螢幕資訊
  
檢索有關當前視訊模式或桌面的資訊。

語法
Declare Sub ScreenInfo ( ByRef w As Long = 0, ByRef h As Long = 0, ByRef depth As Long = 0, ByRef bpp As Long = 0, ByRef pitch As Long = 0, ByRef rate As Long = 0, ByRef driver As String = "" )
Declare Sub ScreenInfo ( ByRef w As LongInt, ByRef h As LongInt, ByRef depth As LongInt = 0, ByRef bpp As LongInt = 0, ByRef pitch As LongInt = 0, ByRef rate As LongInt = 0, ByRef driver As String = "" )

用法
in the LONG (or INTEGER<32>) version of the sub:
ScreenInfo [ w ] [, [ h ] [, [ depth ] [, [ bpp ] [, [ pitch ] [, [ rate ] [, driver ]]]]]]
in the LONGINT (or INTEGER<64>) version of the sub:
ScreenInfo w , h [, [ depth ] [, [ bpp ] [, [ pitch ] [, [ rate ] [, driver ]]]]]

參數
w
寬度。
h
高度。
depth
色彩深度（以位元為單位）。
bpp
每圖元位元組數。
pitch
每條掃描行的位元組數。
rate
刷新率。
driver
驅動程式名稱。

描述
此功能可用於獲取當前模式資訊，如圖形驅動程式名稱、色彩深度、螢幕大小等。
如果未設置圖形模式時調用 if，它將返回有關桌面?


-------------------------------------------------------- KeyGTK3PgScreenlist ----

ScreenList   螢幕清單
  
查找可用的全屏視訊模式

語法
Declare Function ScreenList ( ByVal depth As Long = 0 ) As Long

用法
result = ScreenList( [ depth ] )

參數
depth
請求模式清單的色彩深度（支援的深度為 、 、 和815162432)

返回值
返回 ，當沒有更多要讀取的解析度時。0

描述
它的工作方式與函數類似：對函數的第一次調用需要指定參數，它返回所請求深度的最低支持解析度。進一步調用無參數將返回下一個解決方案。當?


-------------------------------------------------------- KeyGTK3PgScreenlock ----

ScreenLock   螢幕鎖定
  
鎖定工作頁的框架緩衝區

語法
Declare Sub ScreenLock ( )

用法
ScreenLock

描述
FreeBASIC 的所有圖形庫函數都繪製到框架緩衝區，並且每次繪製時都會自動將框架緩衝區複製到實際的螢幕記憶體中。如果使用者程式執行大量繪圖，則自動刷新可能需要花費大量時間。
該功能鎖定自動?


-------------------------------------------------------- KeyGTK3PgScreenptr ----

ScreenPtr   螢幕指標
  
返回指向當前工作頁的框架緩衝區的指標

語法
Declare Function ScreenPtr ( ) As Any Ptr

用法
result = ScreenPtr

返回值
指向當前工作頁幀緩衝記憶體的指標，如果未設置圖形模式，則為 NULL （）。0

描述
ScreenPtr提供了一種直接讀/寫工作頁的框架緩衝區的方法。 應在嘗試任何讀取或寫入之前使用。返回的指標在對 或 的任何後續調用之前一直有效，這?


-------------------------------------------------------- KeyGTK3PgScreenres ----

ScreenRes   螢幕初化
  
通過指定水準和垂直解析度來初始化圖形模式

語法
Declare Function ScreenRes ( ByVal width As Long, ByVal height As Long, ByVal depth As Long = 8, ByVal num_pages As Long = 1, ByVal flags As Long = 0, ByVal refresh_rate As Long = 0 ) As Long
用法
ScreenRes width, height [, [depth] [, [num_pages] [, [flags] [, refresh_rate ]]]]
result = ScreenRes( width, height [, [depth] [, [num_pages] [, [flags] [, refresh_rate ]]]] )

參數
width,height
分別顯示寬度和高度。對於全屏模式，使用者應使用 檢查解析度的可用性。ScreenList
depth
色彩深度（以每一像素位元數為單位）。有效的色彩深度為：、、、、 和 。和 的值也允許分別作為 和 的別名。如果省略，則預設值為每圖元 8 位元。8 位元及以下將給出調色板圖像。缺省調色板將是 中使用的 256 色板的第一種顏色。12481632152416322 ^ depthScreen 13
num_pages
要創建的視頻頁數，缺省情況下為 。（請參閱1Screen)
flags
用於設置螢幕的各種屬性，包括全屏模式和圖形驅動程式優先順序。（有關可用標誌，請參閱標準標頭“fbgfx.bi”）
refresh_rate
螢幕所需的刷新率僅對全屏模式有影響，並且僅對某些系統和驅動程式有影響。默認為適當的值，?


-------------------------------------------------------- KeyGTK3PgScreenset ----

ScreenSet   螢幕設置
  
設置當前工作和可見頁面

語法
Declare Sub ScreenSet ( ByVal work_page As Long = -1, ByVal visible_page As Long = -1 )

用法
ScreenSet [ work_page ] [, visible_page ]

參數
work_page
工作頁面索引
visible_page
可見頁面的索引

描述
ScreenSet允許設置當前工作頁面和當前可見頁面。頁碼範圍從 到 ，其中 是 使用 或 設置圖形模式時指定的頁數。您可以使用此功能來實現翻頁或雙緩衝。
如果提供但省略 ，?


-------------------------------------------------------- KeyGTK3PgScreensync ----

ScreenSync   螢幕同步
  
將顯示器更新與硬體同步

語法
Declare Function ScreenSync ( ) As Long

用法
result = ScreenSync

返回值
如果成功，則為零;如果以前未設置圖形模式，則為非零。

描述
此 GfxLib 語句停止程式的執行，直到圖形卡發出信號，它已結束跟蹤幀並將啟動新幀。
如果程式使用幀之間的這一小段時間間隔來重繪圖像，則閃爍會大大減少。


-------------------------------------------------------- KeyGTK3PgScreenunlock ----

ScreenUnlock   螢幕解鎖
  
解鎖工作頁面的框架緩衝區

語法
Declare Sub ScreenUnlock ( ByVal startline As Long = -1, ByVal endline As Long = -1 )

用法
ScreenUnlock [ start_line ] [, end_line ]

參數
startline
可選參數，指定要更新的第一個螢幕行。如果省略，則假定頂部螢幕行。
endline
指定要更新的最後一個螢幕行的可選參數。如果省略，則假定底部螢幕行。

描述
ScreenUnlock解鎖當前工作頁面（假設它以前已通過調用鎖定），並允許系統重新開機定期更新螢幕。當使用 和 調用時?


-------------------------------------------------------- KeyGTK3PgSecond ----

Second   時間取秒
  
從日期序列中獲取秒數 

語法
Declare Function Second ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Second( date_serial )

參數
date_serial
日期序列

返回值
從包含日期序列格式的日期的變數中返回?


-------------------------------------------------------- KeyGTK3PgSeekreturn ----

Seek (Function)   文件定位
  
獲取檔或設備的下一個讀/寫操作的位置

語法
Declare Function Seek ( ByVal filenum As Long ) As LongInt

參數
filenum
打開的文件的文件編號

返回值
下一次讀取或寫入操作將發生的檔位置。

描述
如果檔是在訪問模式下打開的，則該位置在記錄?


-------------------------------------------------------- KeyGTK3PgSeekset ----

Seek (Statement)   文件定位
  
設置檔上下一個讀/寫操作的位置

語法
Seek [#]filenum, position

參數
filenum
打開的文件的文件編號
position
i/o 操作的新位置

描述
設置對檔執行下一次讀取或寫入操作的位置。
如果檔是在訪問模式下打開的，則該位置在


-------------------------------------------------------- KeyGTK3PgSelectcase ----

Select Case   選擇判斷
  
條件陳述式塊

語法
Select Case expression
[ Case expressionlist] 
[statements]
[ Case Else ]
[statements]
End Select
or
Select Case As Const integer_expression
[ Case constant | enumeration ]
[ statements ]
[ Case Else ]
[ statements ]
End Select

描述
Select Case根據運算式的值執行特定代碼。該運算式計算一次，並按順序與每個運算式進行比較，直到找到匹配的運算式。執行匹配的 Case 分支中的代碼，程式向下跳到塊的末尾。 匹配任何尚未匹配的情


-------------------------------------------------------- KeyGTK3PgSetdate ----

SetDate   設置日期
  
設置當前系統日期

語法
Declare Function SetDate ( ByRef newdate As Const String ) As Long

用法
result = SetDate( newdate )

參數
newdate
要設置的新日期

返回值
在除 DOS 之外的所有埠上成功時返回零，或在失敗時返回非零。

描述
要設置日期，只需按照以下格式之一設置格式並發送到：、、、或（是月份、是日或年）。兩位元數的年份數位基於 1900 年。
返回的錯誤代碼可以在下一


-------------------------------------------------------- KeyGTK3PgSetenviron ----

SetEnviron   設置環境
  
設置系統環境變數

語法
Declare Function SetEnviron ( ByRef varexpression As String ) As Long

用法
result = SetEnviron( varexpression )

參數
varexpression
環境變數的名稱和設置採用以下（或等效）形式：varname=varstring。
 （varname 是環境變數的名稱，varstring 是要設置的文本值）

返回值
如果成功，則返回零 （0），否則返回非零。

描述
修


-------------------------------------------------------- KeyGTK3PgSetmouse ----

SetMouse   設置滑鼠
  
設置滑鼠游標的位置和可見性

語法
Declare Function SetMouse ( ByVal x As Long = -1, ByVal y As Long = -1, ByVal visibility As Long = -1, ByVal clip As Long = -1 ) As Long

用法
result = SetMouse([ x ] [, [ y ] [, [ visibility ] [, [ clip ]]]])

參數
（對於每個參數，是一個表示“無更改”的特殊值。-1
x
可選 - 設置 x 座標
y
可選 - 設置 y 座標
visibility
可選 - 設置可見性：表示可見，表示隱藏10
clip
可選 - 設置剪切：指示滑鼠被剪輯到圖形視窗，表示沒有剪切10

返回值
成功時為零 （），非零表示失敗。0

描述
SetMouse將設置滑鼠指標的 （， ） 座標，以及設置其可見性。滑鼠位置是使用 an


-------------------------------------------------------- KeyGTK3PgSettime ----

SetTime   設置時間
  
設置當前系統時間

語法
Declare Function SetTime ( ByRef newtime As Const String ) As Long

用法
result = SetTime( newtime )

參數
newtime
設置新時間

返回值
在除 DOS 之外的所有埠上成功時返回零，或在失敗時返回非零。

描述
要設置時間，請格式化日期並按以下格式之一發送到：、 、 或 （是小時、分鐘和秒）。
返回的


-------------------------------------------------------- KeyGTK3PgSgn ----

Sgn   數取符號
  
返回數位的符號部分

語法
Declare Function Sgn ( ByVal number As Integer ) As Integer
Declare Function Sgn ( ByVal number As LongInt ) As LongInt
Declare Function Sgn ( ByVal number As Double ) As Double

用法
result = Sgn( number )

參數
number
要查找標誌的號碼

返回值
返回 的符號部分。number
如果數字大於零，則返回 。Sgn1
如果數字等於零，則返回 。Sgn0
如果數字小於零，則返回 。Sgn-1

描述
必需的參數可以是任何有


-------------------------------------------------------- KeyGTK3PgShared ----

Shared   共用型
  
變數聲明修飾符，用於指定整個模組的可見性

語法
Dim Shared ...
ReDim Shared ...
Common Shared ...
Static Shared ...
[Static] Var Shared ...

描述
Shared使模組層級變數在 s 和 s 內可見。
如果未在模組層級變數的聲明中使用，則該變數僅對該檔中的模組層級代碼可見（此外，堆疊上僅存儲了一個聲明了不帶修飾符的變數，而不是在命名


-------------------------------------------------------- KeyGTK3PgShell ----

Shell   外部程式
  
向系統命令直譯器發送命令

語法
Declare Function Shell ( ByRef command As Const String ) As Long

用法
result = Shell( command )

參數
command
指定要發送到命令直譯器的命令的字串。

返回值
如果無法執行該命令，


-------------------------------------------------------- KeyGTK3PgShort ----

Short   短整型
  
標準資料類型：16 位元有符號

語法
Dim variable As Short

描述
16 位元有符號整數資料類型


-------------------------------------------------------- KeyGTK3PgSin ----

Sin   正弦
  
返回角度的正弦

語法
Declare Function Sin ( ByVal angle As Double ) As Double

用法
result = Sin( angle )

參數
angle
角度（以弧度為單位）

返回值
將參數的正弦值作為 在 的範圍內返回。angleDouble-1.01.0

描述
參數以弧度（而不是度）為單位進行度量。
對於


-------------------------------------------------------- KeyGTK3PgSingle ----

Single   單精確度
  
標準資料類型：32位浮點

語法
Dim variable As Single

描述
Single 是用於存儲十進位數字的 32 位浮點資料類型。它們可以在 到 的範圍內保存正值，也可以在 到 的範圍內保存負值，或者保存為 零 （）。它們最多包含 24 位精度，或大約


-------------------------------------------------------- KeyGTK3PgSizeof ----

SizeOf   取大小
  
返回變數的大小或類型（以位元組為單位）。

語法
SizeOf ( variable | DataType )

描述
運算子返回一個值：或 佔用的位元組數（包括 UDT 的資料欄位）。
與 不同，當與固定長度的字串（包括固定長度的 s 和 s）一起使用時，它將返回它們使用的位元組數，當與可變長度字元?


-------------------------------------------------------- KeyGTK3PgSleep ----

Sleep   延遲
  
等待，直到指定的時間過去，或者按下某個鍵。

語法
Declare Sub Sleep ( ByVal amount As Long = -1 )
Declare Function Sleep ( ByVal amount As Long , ByVal keyflag As Long ) As Long

用法
Sleep [ amount [, keyflag ]]
result = Sleep ( amount, keyflag )

參數
amount
可選的等待毫秒數（預設為等待按鍵）。
keyflag
可選標誌;為它指定一個值，表示正常睡眠，或指定等待不能被按鍵打斷。01

返回值
如果不是有效值（即 or 以外的值）以指示失敗或其他值，則返回。1keyflag010

描述
Sleep將等待，直到經過（如果傳遞了任何值）的毫秒（在 -lang qb 中可以是秒，見下文）或


-------------------------------------------------------- KeyGTK3PgSpace ----

Space   字串空格
  
創建一個給定長度的字串，其中填充了空格 （" ")

語法
Declare Function Space( ByVal count As Integer ) As String

用法
result = Space[$]( count )

參數
count
一種整數類型，指定要創建的字串的長度。

返回值
創建


-------------------------------------------------------- KeyGTK3PgSpc ----

Spc   字元空格
  
輸出功能，用於在寫入螢幕或檔時跳過空格

語法
Spc( columns )

用法
Print Spc( spaces ) [(, | ;)] ...

參數
spaces
要跳過的空格數

描述
Spc跳過給


-------------------------------------------------------- KeyGTK3PgSqr ----

Sqr   平方根
  
返回數字的平方根

語法
Declare Function Sqr ( ByVal number As Double ) As Double

用法
result = Sqr( number )

參數
number
數字（大於或等於零）

返回值
返回參數 的平方根。
如果等於零，則返回零 （）。
如果 小於零，則返回一個表示“未定義”的特殊值，列印如 “” 或 ，則精確文本與平臺相關。numbernumberSqr0.0numberSqrNaN"IND"

描述
這與將參數提高到一半的冪相同：。所需的參數可以是任何大於或等於零的有效數值運算式。
如果 將 or 傳遞?


-------------------------------------------------------- KeyGTK3PgStatic ----

Static   靜態
  
定義具有靜態存儲的變數、物件和陣列

語法
Static symbol1 [ (array-dimensions) ] As DataType [ = expression] [, symbol2 [ (array-dimensions) ] As DataType [ = expression], ...]
or
Static As DataType symbol1 [ (array-dimensions) ] [ = expression] [, symbol2 [ (array-dimensions) ] [ = expression], ...]
or
Static Var symbol1 = expression [, symbol2 = expression, ...]

or

Sub|Function procedurename ( parameters ) [[ ByRef ] As DataType] Static
...
End Sub|Function

參數
symbol
變數或陣列符號名稱。
array-dimensions
lower-bound To upper-bound [, ...]
或
 或空。Any [, Any...]
expression
常量運算式或常量運算式陣列

描述
指定變數、物件和陣列的靜態存儲;它們在程式啟動時分配，並在退出時解除配置。物件在定義時構造一次，並在程式退出時銷毀。
聲明靜態陣列時，只能將數位


-------------------------------------------------------- KeyGTK3PgStaticMember ----

Static (Member)   靜態
  
聲明靜態成員過程或變數

語法
Type typename
Static variablename As DataType [, ...]
Declare Static Sub|Function procedurename ...
...
End Type

Dim typename.variablename As DataType [= initializer] [, ...]

[Static] Sub|Function typename.procedurename ...
...
End Sub|Function

描述
靜態成員過程
Static方法沒有傳遞給它們的隱式實例參數。這允許它們像普通的非成員過程一樣使用（例如，使用回檔過程指針）。方法的一個優點是它們封裝在命名空間中，因此能夠訪問 的實例的 


-------------------------------------------------------- KeyGTK3PgStdcall ----

stdcall   標準調用
  
在過程聲明中指定 stdcall 樣式的調用約定

語法
Sub name stdcall [Overload] [Alias "alias"] ( parameters )
Function name stdcall [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

描述
在過程聲明中，指定過程將使用調用約定。在調用約定中，任何參數都將以列出它們的相反順序傳遞（推送到堆疊上），即從右到左。過程不需要保留 或 寄存器，並且必須在堆疊返回之前清理堆


-------------------------------------------------------- KeyGTK3PgStep ----

Step   步進
  
語句修飾符。

語法
For iterator = initial_value To end_value Step increment

Line [ buffer, ] Step ( x1, y1 ) - Step ( x2, y2 ) [, [ color ][, [ B|BF ][, style ] ] ]

Circle [ target, ] Step ( x, y ), radius [, [ color ][, [ start ][, [ end ][, [ aspect ][, F] ] ] ] ]

Paint [ target, ] STEP ( x, y ) [, [ paint ][, [ border_color ] ] ]

描述
在語句中，指定迴圈反覆運算器與每個迴圈的增量。
在 或 語句中，指示以下


-------------------------------------------------------- KeyGTK3PgStick ----

Stick   遊戲操縱杆
  
從連接的遊戲裝置讀取軸位置

語法
Declare Function Stick ( ByVal axis As Long ) As Long

用法
result = Stick( axis )

參數
axis
要查詢位置的軸數

返回值
對於指定的 ，返回一個介於 1 和 200 之間的數位，如果未連接設備，則返回零 （0）。axis

描述
Stick將檢索第一個和第二個遊戲裝置上第一個和第二個軸的軸位置。 必須是介於 0 和 3 之間的數位，具有以下含義：axis

軸返回0遊?


-------------------------------------------------------- KeyGTK3PgStop ----

Stop
  
暫停程式執行，並在結束程式之前等待按鍵。

語法
Declare Sub Stop ( ByVal retval As Long = 0 )

用法
Stop

參數
retval
錯誤代碼返回系統。

描述
停止程式的執行並待命。它是作為調試的幫助提供的，因為它保留了記憶體並且不會關閉檔。對於正常的程?


-------------------------------------------------------- KeyGTK3PgStr ----

Str   數轉字元
  
返回數位、布林或 Unicode 字串的字串表示形式

語法
Declare Function Str ( ByVal n As Byte ) As String
Declare Function Str ( ByVal n As UByte ) As String
Declare Function Str ( ByVal n As Short ) As String
Declare Function Str ( ByVal n As UShort ) As String
Declare Function Str ( ByVal n As Long ) As String
Declare Function Str ( ByVal n As ULong ) As String
Declare Function Str ( ByVal n As LongInt ) As String
Declare Function Str ( ByVal n As ULongInt ) As String
Declare Function Str ( ByVal n As Single ) As String
Declare Function Str ( ByVal n As Double ) As String
Declare Function Str ( ByVal b As Boolean ) As String
Declare Function Str ( ByRef str As Const String ) As String
Declare Function Str ( ByVal str As Const WString ) As String

用法
result = Str[$]( number )
or
result = Str( string )

參數
number
要轉換為字串的數值運算式。
string
要轉換為字串的字串運算式。

描述
Str將數值變數轉換為其字串表示形式。以這種方式使用時，它等效于應用於數值變數，而與函數相反，函數將字串轉換為數位。
將布林變數?


-------------------------------------------------------- KeyGTK3PgStrig ----

Strig   遊戲按鈕
  
從連接的遊戲裝置讀取按鈕狀態

語法
Declare Function Strig ( ByVal button As Long ) As Long

用法
result = Strig( button )

參數
button
用於查詢狀態的按鈕

返回值
返回 -1（按下）或 0（未按下）以指示所請求的狀態。button

描述
Strig將檢索第一個和第二個遊戲裝置上第一個和第二個按鈕的按鈕狀態。 必須是介於 0 和 7 之間的數位，並具有以下含義：button

按鈕要返回的?


-------------------------------------------------------- KeyGTK3PgString ----

String   數轉字串
  
標準資料類型：8 位元字串

語法
Dim variable As String [ * size]

描述
A 是字元陣列。
不帶參數的聲明將根據字串的長度動態調整大小。長度範圍可以從 0 位元組到 2 GB。描述符包含指向實際字串、字串長度以及為其分配的空間量的指標。 將返回指向描述符的


-------------------------------------------------------- KeyGTK3PgStringFunction ----

String (Function)   數轉字串
  
創建特定長度的字串並用特定字元填充

語法
Declare Function String ( ByVal count As Integer, ByVal ch_code As Long ) As String
Declare Function String ( ByVal count As Integer, ByRef ch As Const String ) As String

用法
result = String[$]( count, ch_code )
或
result = String[$]( count, ch )

參數
count
一個整數，指定要創建的字串的長度。
ch_code
指定要用於填補字元串的 ASCII 字元代碼的長字元代碼。
ch
一個字串，其第一個字元將用於填補字元串。

返回值


-------------------------------------------------------- KeyGTK3PgSub ----

Sub   過程
  
定義過程

語法
[Public|Private] Sub identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [( [parameter_list] )] [Static] [Export]
statements
...
[Return]
...
End Sub

[Public] Sub identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [()] [Constructor|Destructor] [Static]
statements
...
[Return]
...
End Sub

參數
identifier：子常式
的名稱：外部可見的（對連結器）名稱括在引號中
：參數[，參數[，...]]
 ：external_identifierparameter_listparameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier：子常式中引用的變數的名稱。如果參數是陣列，則識別字後必須跟空括弧。
 ：變數
的類型 ：如果調用中未指定任何參數，則參數的值typedefault_value
statements：組成子常式主體的一個或多個語句

描述
子常式是一個代碼塊，可以隨時從程式調用。此代碼可能需要多次執行，而子常式提


-------------------------------------------------------- KeyGTK3PgSubPtr ----

Sub Pointer   過程
  
存儲指向過程的指標的資料類型Sub

語法
Dim variable As Sub [cdecl|pascal|stdcall] [( [parameter_list] )] [= initializer]

參數
parameter_list： 參數[， 參數[， ...]]
 ：parameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier：子常式
中引用的變數的名稱：變數
的類型：如果調用中未指定任何參數，則參數的值typedefault_value
intializer：要設置為初始值的子常式的位址

描述
指標是存儲已編譯代碼的記憶體位置的過程指標。如果未給出初始值，則默認初始值為零 （0）。
過程的記憶體位址可以通過獲取


-------------------------------------------------------- KeyGTK3PgSwap ----

Swap   交換
  
交換兩個變數的值

語法
Declare Sub Swap  ( ByRef a As Any, ByRef b As Any )

參數
a
要交換的變數。
b
要交換的變數。

描述
交換兩個變數的值，包括 UDT 實例（交換所有資料成員）。
 注： 當資料由指標單獨引用或在描述性結構（例如 UDT）中引用時，僅交換指針的值或描述性結構的內容，而不訪?


-------------------------------------------------------- KeyGTK3PgSystem ----

System   系統
  
關閉所有打開的檔並結束程式

語法
Declare Sub System ( ByVal retval As Long = 0 )

用法
System( [ retval ] )

參數
retval
錯誤代碼返回系統。

描述
關閉所有打開的檔，退出程式，然後返回到作業系統。可以指定可選的返回值（整數）以向系統返回錯誤代碼。如果未給出返回值，則自動返回值 0。這與 和 此處相同，用於較舊的


-------------------------------------------------------- KeyGTK3PgTab ----

Tab
  
寫入螢幕或檔時設置列

語法
Tab( col_num )

用法
Print Tab( column ) [(, | ;)] ...

參數
column
1-要移動到的基於列號

描述
Tab在將游標移動到螢幕或檔時將游標移動到給定數位。在新舊游標位置之間跳過的字元儲存格保持不變。
如?


-------------------------------------------------------- KeyGTK3PgTan ----

Tan   正切
  
返回角度的切線

語法
Declare Function Tan ( ByVal angle As Double ) As Double

用法
result = Tan( angle )

參數
angle
角度（以弧度為單位）

返回值
將參數的切線作為 -無窮大到無窮大範圍內的一個返回。angleDouble

描述
參數以弧度（而不是度）為單位進行度量?


-------------------------------------------------------- KeyGTK3PgThen ----
Then   然
Description



-------------------------------------------------------- KeyGTK3PgThis ----

This   本對象
  
將隱藏實例參數傳遞給 或 中的非靜態成員函數TypeClass

語法
This.fieldname
or
With This
.fieldname
End With

描述
This是對 或的實例的引用，該實例（通過隱藏）傳遞給該類型或類的所有非靜態成員函數。非靜態成員函數是在 或 的主體內聲明的過程，包括 、、、賦值或 和 過程。
附加參數的資料類


-------------------------------------------------------- KeyGTK3PgThiscall ----

__Thiscall
  
在成員過程聲明中指定 Thiscall 調用約定

語法
Type typename
declare Sub name __Thiscall [Overload] [Alias "alias"] ( parameters )
declare Function name __Thiscall [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type
End Type

描述
在成員過程聲明中，指定過程將使用調用約定。在 Thiscall 調用約定中，隱式和隱藏的 This 參數在寄存器中傳遞。
調用約定僅適用於 32 位元 x86 目標，並且僅部分實現。它在使用 -gen gcc 後端


-------------------------------------------------------- KeyGTK3PgThreadCall ----

ThreadCall   執行緒調用
  
在單獨的執行執行緒
中啟動一個帶有參數的用戶定義過程 Threadcall 在內部使用 LibFFI：使用此功能編寫程式的人應小心遵循 LibFFI 的許可證，該許可證可在 http://github.com/atgreen/libffi/blob/master/LICENSE 中找到。

語法
Function ThreadCall subname([paramlist]) As Any Ptr

用法
threadid = ThreadCall subname([paramlist])

參數
subname
子常式的名稱
paramlist
要傳遞給子常式的參數清單，與普通的子調用一樣。

返回值
Threadcall 返回所創建執行緒的控制碼，或在失敗時返回空指針 （）。Any Ptr0

描述
例如，Threadcall 創建一個執行緒，該執行緒與調用它的代碼同時運行。通過?


-------------------------------------------------------- KeyGTK3PgThreadCreate ----

ThreadCreate   執行緒創建
  
在單獨的執行執行緒中啟動用戶定義過程

語法
Declare Function ThreadCreate _
( _
ByVal procptr As Sub ( ByVal userdata As Any Ptr ), _
ByVal param As Any Ptr = 0, _
ByVal stack_size As Integer = 0 _
) As Any Ptr

用法
result = ThreadCreate ( procptr [, [ param ] [, stack_size ] ] )

參數
procptr
指向旨在用作執行緒的指標（請參閱獲取指向 sub 的指標）。sub 必須具有以下簽名（相同的參數、相同的調用約定）才能與 procptr 相容：SubOperator Procptr (Procedure Pointer)
Declare Sub myThread ( ByVal userdata As Any Ptr )
userdata
旨在用作執行緒的參數。FreeBASIC 期望此參數存在，但不得省略！Any PtrSub
param
Any Ptr將通過其 userdata 參數傳遞給所指向的執行緒的參數。例如，這可以是指向結構的指標，也可以是包含各種資訊的陣列，供執行緒 sub 使用。如果未給出參數，則 （零） 將改為傳遞給執行緒子的 userdata 參數。Subprocptr0
stack_size
要為此執行緒的堆疊保留的可選位元組數。

返回值
ThreadCreate 向創建的執行緒返回控制碼，或在失敗時?


-------------------------------------------------------- KeyGTK3PgThreadDetach ----

ThreadDetach   執行緒終止
  
釋放執行緒控制碼而不等待中的執行緒完成

語法
Declare Sub ThreadDetach ( ByVal id As Any Ptr )

用法
#include "fbthread.bi"
ThreadDetach( id )

參數
id
Any Ptr由 或 創建的執行緒的控制碼ThreadCreateThreadCall

描述
ThreadDetach 釋放與 或 返回的執行緒控制碼關聯的資源。執行緒控制碼將被 ThreadDetach 銷毀，並且無法再使用。
與 不同，ThreadDetach 不會等待中的執行緒完成，執行緒執行會獨立繼續。


-------------------------------------------------------- KeyGTK3PgThreadSelf ----

ThreadSelf
  
返回當前執行緒的執行緒控制碼。

語法
Declare Function ThreadSelf ( ) As Any Ptr

用法
#include "fbthread.bi"
result = ThreadSelf

返回值
ThreadSelf 返回當前執行緒的控制碼。Any Ptr

描述
ThreadSelf 用於獲取當前執行緒的控制碼。
此函數可以唯一標識現有執行緒：
-如果有多個執行緒，並且一個執行緒已完成，則可以重用該控制碼。
 - 因此，對於所有仍在運行的唯一執行緒，句?


-------------------------------------------------------- KeyGTK3PgThreadWait ----

ThreadWait   執行緒等待
  
等待中的執行緒完成執行並釋放執行緒控制碼

語法
Declare Sub ThreadWait ( ByVal id As Any Ptr )

用法
ThreadWait( id )

參數
id
Any Ptr由 或 創建的執行緒的控制碼ThreadCreateThreadCall

描述
ThreadWait 等待由執行緒創建或完成執行，然後釋放與執行緒控制碼關聯的資源。在 指定的執行緒結束之前，ThreadWait 不會返回。
在等待期間，調用方不會消耗 CPU 時間。
為了釋


-------------------------------------------------------- KeyGTK3PgTime ----

Time   時間字元
  
以字串形式返回當前系統時間

語法
Declare Function Time ( ) As String

用法
result = Time[$]

返回值
返回當前系統時間


-------------------------------------------------------- KeyGTK3PgTimer ----

Timer   時間計時值
  
返回自靜態參考點以來經過的時間量。

語法
Declare Function Timer ( ) As Double

用法
result = Timer

返回值
返回自靜態參考點以來的時間（以秒為單位）的精度結果。Double

描述
該函數對於瞭解一段代碼的執行時間或控制代碼的計時非常有用。若要瞭解程式中兩點之間經過了多少時間，可以記錄起點和終點處的值，然後從結束值中減


-------------------------------------------------------- KeyGTK3PgTimeserial ----

TimeSerial   時間序列值
  
獲取指定小時、分鐘和秒的日期序列

語法
Declare Function TimeSerial ( ByVal hour As Long, ByVal minute As Long, ByVal second As Long ) As Double

用法
#include "vbcompat.bi"
result = TimeSerial( hours, minutes, seconds )

參數
hour
小時數，在 0-23 範圍內
minute
分鐘數
second
秒數

返回值
返回一個日期序列，其中包含由 和 參數中的值形成的時間。返回的日期序列沒有整數部分。hoursminut


-------------------------------------------------------- KeyGTK3PgTimeValue ----

TimeValue   時間數值
  
從時間字串獲取日期序列

語法
Declare Function TimeValue ( ByRef timestring As String ) As Double

用法
#include "vbcompat.bi"
result = TimeValue( timestring )

參數
timestring
要轉換的字串

返回值
從時間字串返回日期序列。

描述
時間字串必須採用以下格式，否則
編譯器


-------------------------------------------------------- KeyGTK3PgTo ----

To   到
  
用於指定範圍的語句修飾符。

語法
For iterator intial_value To ending_value
statement(s).
Next [ iterator ]
or
Select Case case_comparison_value
Case lower_bound To upper_bound
statement(s).
End Select
or
Dim variable_identifier( lower_bound To upper_bound ) As type_specifier

描述
關鍵字用於定義特定的數值範圍。僅當與 和 語句一起使用時，此關鍵字才有效。
在第一種語法中，關鍵字定義語句中反覆運算器的初始值和結束值。
在第二種語法中，關鍵字定義了用於比較的下限和?


-------------------------------------------------------- KeyGTK3PgTransGfx ----

Trans   透明
  
圖形語句的參數，該語句選擇透明背景作為 blitting 方法Put

語法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Trans

參數
Trans
必填。

描述
Trans選擇透明背景作為刪除圖像緩衝區的方法。這與方法類似，但會跳過包含蒙版顏色的圖元。
對於 8 位元彩色圖像，蒙版顏色為調色板索引 0。對於 16/32 位元彩色圖像，蒙版顏色為


-------------------------------------------------------- KeyGTK3PgTrim ----

Trim   字串刪頭尾
  
刪除字串左側和右側的周圍子字串或字元

語法
Declare Function Trim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function Trim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

用法
result = Trim[$]( str [, [ Any ] trimset ] )

參數
str
源字串。
trimset
要修剪的子字串。

返回值
返回修剪過的字串。

描述
此過程從源字串的左側（開頭）和右側（結尾）修剪周圍的字元。如果指定?


-------------------------------------------------------- KeyGTK3PgTrue ----

True   真
  
編譯器設置的固有常量

語法
Const True As Boolean

描述
在使用位置


-------------------------------------------------------- KeyGTK3PgType ----

Type   類型
  
聲明用戶定義類型。

語法
Type typename
fieldname1 As DataType
fieldname2 As DataType
As DataType fieldname3, fieldname4
...
End Type

Type typename [Alias "alternatename"] [Extends base_typename] [Field = alignment]
[Private:|Public:|Protected:]

Declare Sub|Function|Constructor|Destructor|Property|Operator ...
Static variablename As DataType
ReDim arrayname(array dimensions) As DataType

fieldname As DataType [= initializer]
fieldname(array dimensions) As DataType [= initializer]
fieldname(Any [, Any...]) As DataType
fieldname : bits As DataType [= initializer]

As DataType fieldname [= initializer], ...
As DataType fieldname(array dimensions) [= initializer], ...
As DataType fieldname(Any [, Any...])
As DataType fieldname : bits [= initializer], ...

Union
fieldname As DataType
Type
fieldname As DataType
...
End Type
...
End Union

...
End Type

描述
Type用於聲明包含一個或多個資料欄位的自訂資料類型，包括整數類型、浮點類型、固定大小或可變長度（動態）陣列、固定大小或可變長度字串、位元欄位或其他用戶定義類型。
類型支援與物件導向


-------------------------------------------------------- KeyGTK3PgTypeAlias ----

Type (Alias)   類型
  
聲明類型的備用名稱

語法
Type typename As symbol

參數
typename 
新的備用名稱。
symbol 
要與 關聯的符號或資料類型聲明。typename

描述
symbol可以指任何已聲明的資料類型，包括內置資料類型或指針、聲明、聲明或聲明。
類型別名可用於允許在過程聲明中對參數進行前向聲明，但只能與指標（無論其傳遞模式


-------------------------------------------------------- KeyGTK3PgTypeof ----

TypeOf   取類型
  
返回變數的類型。

語法
TypeOf ( variable | datatype )

參數
variable
任何類型的變數。
datatype
資料類型。

描述
TypeOf是編譯器內建函式，它將自身替換為傳遞給它的變數的類型。它可以用於變數聲明（示例1），也可以用於前置處理器中進行比較，列印。（示例 2）
還支持傳遞任何內部資料類型或


-------------------------------------------------------- KeyGTK3PgTypeTemp ----

Temporary Types
  
創建用戶定義類型的臨時副本

語法
result = Type( initializers, ... )
or
result = Type<typename>( initializers, ... )

參數
initializers
類型的初始值（或僅第一個）
typename
或 的名稱TypeUnion

返回值
類型的臨時副本。

描述
用於創建臨時類型。如果未明確給出，則將盡可能從其用法中推斷出來。臨時副本的用法可能包括將其賦給變數、將其作為參數傳遞給過程或將其作為過程的值返回。



-------------------------------------------------------- KeyGTK3PgUbound ----

UBound   陣列取上限
  
返回陣列維度的上限

語法
Declare Function UBound ( array() As Any, ByVal dimension As Integer = 1 ) As Integer

用法
result = UBound( array [, dimension ] )

參數
array
任何類型的陣列
dimension
要獲取的上限的維度

返回值
返回陣列維度的上限。
描述
UBound返回可用作陣列特定維度的索引的最大值。
陣列維度從一 （） 到 的編號，其中維度的總數。如果未指定，將返回第一個維度的上限。
如果為零 （0）?


-------------------------------------------------------- KeyGTK3PgUbyte ----

UByte   無符號位元組
  
標準資料類型：8 位元無符號。
等效於 。Unsigned Byte

語法
Dim variable As UByte

描述
8 位元無符號


-------------------------------------------------------- KeyGTK3PgUcase ----

UCase   字串大寫
  
返回字串的大寫副本

語法
Declare Function UCase ( ByRef str As Const String, ByVal mode As Long = 0 ) As String
Declare Function UCase ( ByRef str As Const WString, ByVal mode As Long = 0 ) As WString

用法
result = UCase[$]( str [ , mode ] )

參數
str
要轉換為大寫的字串。
mode
轉換模式：0 = 當前區域設置，1 = 僅 ASCII

返回值
的大寫副本。str



-------------------------------------------------------- KeyGTK3PgUinteger ----

UInteger   無符號整型
  
標準資料類型：32 位元或 64 位元無符號，大小與 相同。
等效於 。SizeOf(Any Ptr)Unsigned Integer

語法
Dim variable As UInteger
Dim variable As UInteger<bits>

參數
bits
一個數值常量運算式，指示所需不帶正負號的整數位的大小。允許的值為 、 或 。8163264

描述
32 位或 64 位不帶正負號的整數資料類型，具體取決於平臺。
如果給定了顯式位大小，則提供了一種資料類型，該資料類型最多?


-------------------------------------------------------- KeyGTK3PgUlong ----

ULong   無符號長型
  
標準資料類型：32 位不帶正負號的整數。
等效於 。Unsigned Long

語法
Dim variable As ULong

描述
32 位不帶正負號的整數資料類型。?


-------------------------------------------------------- KeyGTK3PgUlongint ----

ULongInt   無符號長整型
  
標準資料類型：64 位元無符號。
等效於 。Unsigned LongInt

語法
Dim variable As ULongInt

描述
64 位不帶正負號的整數資料類型。可以保存從 0 到 18 4


-------------------------------------------------------- KeyGTK3PgUnion ----

Union   聯合型
  
聲明聯合用戶定義類型。

語法
Union typename
fieldname as datatype
Declare member function declaration ...
...
End Union

參數
typename
的名稱Union
fieldname
資料欄位成員的名稱
member function declaration
任何受支援的成員函數

描述
資料元素佔用記憶體中的公用空間（對於 的所有資料元素，記憶體位址相同）。的資料元素可以是簡單的資料欄位，也可以是未命名的資料欄位塊。
的大小是最大資料元素的大


-------------------------------------------------------- KeyGTK3PgUnlock ----

Unlock   解鎖
  
刪除檔上的先前訪問限制（鎖定）

語法
Unlock #filenum, record
Unlock #filenum, start To end

參數
filenum
用於文件的文件編號。Open
record
要解鎖的記錄（檔）。Random
start
要解鎖的範圍中的第一個位元組位置（檔）。Binary
end
要解鎖的範圍中的最後一個位元組位置（檔）。Binary

描述
Unlock刪?


-------------------------------------------------------- KeyGTK3PgUnsigned ----

Unsigned   無符號數
  
整數資料類型修飾符

語法
Dim variable As Unsigned {integer-based data type}

描述
強制基於整數的資料


-------------------------------------------------------- KeyGTK3PgUntil ----

Until   直到
  
語句中使用的條件子句。Do..Loop

語法
Do Until condition
or
Loop Until condition

描述
Until與?


-------------------------------------------------------- KeyGTK3PgUshort ----

UShort   短整型
  
標準資料類型：16 位元無符號。
等效於 。Unsigned Short

語法
Dim variable As UShort

描述
16 位元無符號整


-------------------------------------------------------- KeyGTK3PgUsing ----

Using (Namespaces)   引用
  
將命名空間符號引入當前範圍

語法
Using identifier [, identifier [, ...] ]

參數
identifier：要使用的名稱。Namespace

描述
該命令允許訪問給定命名空間中的所有符號，而無需該命名空間的名稱首碼。與 C++ 不同，但與 C# 不同，在 之後不需要關鍵字，因為不能從命名空間繼承單個符號。
只允許在?


-------------------------------------------------------- KeyGTK3PgVaArg ----

va_arg   變參表
  
從變數參數清單中返回當前參數。

語法
variable = va_arg ( argument_list, datatype )

描述
該巨集允許在函數中使用可變數量的參數：va_arg
 	va_arg返回列表中的當前參數，其預期資料類型為 。argument_listdatatype
在首次使用之前，必須使用命令進行初始化。va_argargument_li


-------------------------------------------------------- KeyGTK3PgVaFirst ----

va_first   變參首個
  
返回指向變數參數清單中第一個參數的指標

語法
pointer_variable = va_first()

描述
該函數提供一個非類型化的指標值，該值指向傳遞給函數的第一個變數參


-------------------------------------------------------- KeyGTK3PgVal ----

Val   數取值
  
將字串轉換為浮點數

語法
Declare Function Val ( ByRef str As Const String ) As Double
Declare Function Val ( ByRef str As Const WString ) As Double

用法
result = Val( strnum )

參數
strnum
包含要轉換的數位的字串

返回值
返回轉換後的精度數位
 如果字串的第一個字元無效，將返回 。DoubleVal0

描述
Val("10")會回來，還會再來。該函數從左側分析字串，跳過任何空格，並返回它可以讀取的最長數位，並在找到的第一個不合適的字元處停止。科


-------------------------------------------------------- KeyGTK3PgValint ----

ValInt   數取整值
  
將字串轉換為 32 位元整數

語法
Declare Function ValInt ( ByRef strnum As Const String ) As Long
Declare Function ValInt ( ByRef strnum As Const WString ) As Long

用法
result = ValInt ( strnum )

參數
strnum
要轉換的字串

返回值
返回轉換後的字串的值 如果字串
的第一個字元無效，將返回 。LongValInt0

描述
例如，將返回 ，並且也將返回。該函數從左側分析字串，跳過任何空格，並返回它可以讀取的最長數位，並在找到的第一個不合適的字元處停止。任?


-------------------------------------------------------- KeyGTK3PgVallng ----

ValLng   數取長值
  
將字串轉換為 64 位元整數

語法
Declare Function ValLng ( ByRef strnum As Const String ) As LongInt
Declare Function ValLng ( ByRef strnum As Const WString ) As LongInt

用法
result = ValLng ( strnum )

參數
strnum
要轉換的字串

返回值
返回轉換後的字串的 a 如果字串
的第一個字元無效，將返回 。LongIntValLng0

描述
例如，將返回 ，並且也將返回。該函數從左側分析字串，跳過任何空格，並返回它可以讀取的最長數位，並在找到的第一個不合適的字元處停止。任何


-------------------------------------------------------- KeyGTK3PgValuint ----

ValUInt   數取無符整型值
  
將字串轉換為無符號的 32 位元整數

語法
Declare Function ValUInt ( ByRef strnum As Const String ) As ULong
Declare Function ValUInt ( ByRef strnum As Const WString ) As ULong

用法
result = ValUInt ( strnum )

參數
strnum
要轉換的字串

返回值
返回轉換後的字串的值 如果字串
的第一個字元無效，將返回 。ULongValUInt0

描述
例如，將返回 ，並且也將返回。該函數從左側分析字串，跳過任何空格，並返回它可以讀取的最長數位，並在找到的第一個不合適的字元處停


-------------------------------------------------------- KeyGTK3PgValulng ----

ValULng   數取無符長型值
  
將字串轉換為無符號的 64 位元整數

語法
Declare Function ValULng ( ByRef strnum As Const String ) As ULongInt
Declare Function ValULng ( ByRef strnum As Const WString ) As ULongInt

用法
result = ValULng ( strnum )

參數
strnum
要轉換的字串

返回值
返回轉換後的字串的 a 如果字串
的第一個字元無效，將返回 。ULongIntValULng0

描述
例如，將返回 ，並且也將返回。該函數從左側分析字串，跳過任何空格，並返回它可以讀取的最長數位，並在找到的第一個不合適的字元處停?


-------------------------------------------------------- KeyGTK3PgVaNext ----

va_next   變參次個
  
返回指向變數參數清單中下一個參數的指標

語法
Argument_Pointer = va_next ( Argument_List, datatype )

描述
該宏提供了一個指標值，指向列表中的下一個參數，即當前參數的類型。
使用 時不受支援。使用可?


-------------------------------------------------------- KeyGTK3PgVar ----

Var   變數
  
聲明一個變數，其類型是從初始值設定項運算式中隱含的

語法
[Static] Var [Shared] symbolname = expression[, symbolname = expression]

描述
Var聲明一個變數，其類型是從初始值設定項運算式中隱含的。在聲明中指定顯式類型是非法的。初始值設定項運算式可以是常量，也可以是任何類型的任何變數。
注意：不支持 ，因為


-------------------------------------------------------- KeyGTK3PgViewgraphics ----

View (Graphics)
  
為圖形關鍵字設置新的物理座標映射和修剪區域

語法
View
View ( x1, y1 )-( x2, y2 ) [ [, fill_color ] [, border_color ] ]
View Screen ( x1, y1 )-( x2, y2 ) [ [, fill_color ] [, border_color ] ]

參數
x1 As Integer,y1 As Integer
視口的一角相對于螢幕左上角的水準和垂直偏移量（以圖元為單位）。
x2 As Integer,y2 As Integer
視口另一角相對于螢幕左上角的水準和垂直偏移量（以圖元為單位）。
fill_color As ULong
用於填充新視口的顏色。
border_color As ULong
要在新視口周圍繪製的邊框的顏色。

描述
視口或裁剪區域是圖形螢幕的矩形區域，在此區域之外不會執行圖形繪製。也就是說，將?


-------------------------------------------------------- KeyGTK3PgViewtext ----

View Print
  
設置螢幕的可列印文本區域

語法
View Print [ firstrow To lastrow ]

參數
firstrow
第一行列印範圍
lastrow
列印範圍的最後一行

描述
將螢幕上的文本列印範圍（在控制台模式或圖形模式下）的邊界設置為從第一個開始到最後一個（包括最後


-------------------------------------------------------- KeyGTK3PgVirtual ----

Virtual   虛擬事件
  
聲明虛擬方法

語法
Type typename Extends base_typename
Declare Virtual Sub|Function|Property|Operator|Destructor ...
End Type

描述
虛擬方法是可以被從聲明它們的類型派生的資料類型覆蓋的方法，從而允許動態多態性。與方法相反，虛擬方法必須具有實現，該實現在未覆蓋虛擬方法時使用。
派生類型可以通過聲明具有相同識別字和?


-------------------------------------------------------- KeyGTK3PgVisPrivate ----

Private: (Access Control)
  
在 或 中指定私有成員存取控制TypeClass

語法
Type typename
Private:
member declarations
End Type

參數
typename
或 的名稱TypeClass
member declarations
欄位、函數或枚舉的聲明

描述
Private:表示關注它具有私有存取權限。私有成員只能從 或 的成員函數內部訪問（因此，對於從 或 派生的類型或類，不能從成員函數內部訪問）。
在給出不同的存取控制說明符?


-------------------------------------------------------- KeyGTK3PgVisProtected ----

Protected: (Access Control)
  
在 或 中指定受保護的成員存取控制TypeClass

語法
Type typename
Protected:
member declarations
End Type

參數
typename
或 的名稱TypeClass
member declarations
欄位、函數或枚舉的聲明

描述
Protected:表示關注它具有受保護的存取權限。受保護的成員只能從 or 的成員函數內部訪問，也可以從 或 派生的類進行訪問。
以下內容受到保護，直到給出不同的存取控制說?


-------------------------------------------------------- KeyGTK3PgVisPublic ----

Public: (Access Control)
  
在 或 中指定公共成員存取控制TypeClass

語法
Type typename
Public:
member declarations
End Type

參數
typename
或 的名稱TypeClass
member declarations
欄位、函數或枚舉的聲明

描述
Public:表示關注它具有公共存取權限。公共成員可通過使用 或 訪問。
在給出不同的存取控制說明符之前，以下各項是公共的，如果未提供
成員存取控制說明符，則
默?


-------------------------------------------------------- KeyGTK3PgWait ----

Wait   等待
  
從帶有遮罩的硬體埠讀取。

語法
Declare Function Wait ( ByVal port As UShort, ByVal and_mask As Long, ByVal xor_mask As Long = 0 ) As Long

用法
Wait port, and_value [, xor_value]

參數
port
要讀取的埠。
and_mask
遮罩值為 和 埠值 與。
xor_mask
遮罩值為 Xor 埠值。

返回值
成功時為 0，失敗時為 -1。

描述



-------------------------------------------------------- KeyGTK3PgWbin ----

WBin   寬字元二進位
  
返回數位的二進位（Unicode）表示形式WString

語法
Declare Function WBin ( ByVal number As UByte ) As WString
Declare Function WBin ( ByVal number As UShort ) As WString
Declare Function WBin ( ByVal number As ULong ) As WString
Declare Function WBin ( ByVal number As ULongInt ) As WString
Declare Function WBin ( ByVal number As Const Any Ptr ) As WString

Declare Function WBin ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

用法
result = WBin( number [, digits] )

參數
number
計算為整數的整數或運算式。
digits
要返回的可選位數。

返回值
返回 的二進位表示形式 被截斷或填充零 （） 以適合位數（如果已指定）。WStringnumber"0"

描述
返回一個 （Unicode），表示整數 的二進位值。二進位數字字的範圍從 到 。
如果指定 > ，則結果 w


-------------------------------------------------------- KeyGTK3PgWchr ----

WChr   取寬字元
  
返回包含一個或多個 Unicode 字元的寬字元字串

語法
Declare Function Wchr ( ByVal ch As Integer [, ... ] ) As WString

用法
result = WChr( ch0 [, ch1 ... chN ] )

參數
ch
字元的 Unicode 整數值。

返回值
返回寬字元字串。

描述
WChr返回一個寬字元字串，其中包含由傳遞給它的 Unicode 值所表示的字元。
當與數值常量或文本一起使用時，將在編譯時計算結果，因此可以在變數


-------------------------------------------------------- KeyGTK3PgWeekday ----

Weekday   工作日
  
從日期序列中獲取一周中的天數

語法
Declare Function Weekday ( ByVal serial As Double , ByVal firstdayofweek As Long = fbusesystem ) As Long

用法
#include "vbcompat.bi"
result = Weekday( date_serial [, firstdayofweek ] )

參數
date_serial
日期
firstdayofweek
一周的第一天

返回值
從包含日期序列格式的日期的變數中返回星期日編號。

描述
工作日值必須在 1-7 範圍內，其含義取決於參數
是可選的。firstdayofweekfirstdayofweek

價值一周的第一天不斷省略星期日 0本地設置fb


-------------------------------------------------------- KeyGTK3PgWeekdayname ----

WeekdayName   工作日名
  
從其整數表示形式中獲取工作日的名稱

語法
Declare Function WeekdayName ( ByVal weekday As , ByVal abbreviate As Long = 0, ByVal firstdayofweek As Long = fbUseSystem ) As String

用法
#include "vbcompat.bi"
result = WeekdayName( weekday [, abbreviate [, firstdayofweek ] ] )

參數
weekday
星期幾
abbreviate
標誌，指示名稱應縮寫
firstdayofweek
一周的第一天

返回值
從值 1 到 7 返回本地作業系統語言星期幾名稱。weekday

描述
如何解釋取決於參數。
如果為 true，則返回 3 個字母的縮寫，如果為 false 或省略，則返回整個名稱。
是指定如下的可選參數：weekda


-------------------------------------------------------- KeyGTK3PgWend ----

Wend   繼續
  
控制流語句。

語法
While [condition]
[statement block]
Wend

描述
Wend指定迴圈塊的


-------------------------------------------------------- KeyGTK3PgWhex ----

WHex   寬字元16進制
  
返回數字的十六進位（Unicode）表示形式WString

語法
Declare Function WHex ( ByVal number As UByte ) As WString
Declare Function WHex ( ByVal number As UShort ) As WString
Declare Function WHex ( ByVal number As ULong ) As WString
Declare Function WHex ( ByVal number As ULongInt ) As WString
Declare Function WHex ( ByVal number As Const Any Ptr ) As WString

Declare Function WHex ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

用法
result = WHex( number [, digits ] )

參數
number
計算為整數的整數或運算式。
digits
要返回的可選位數。

返回值
返回 的十六進位表示形式 被截斷或填充零 （） 以適合位數（如果已指定）。WStringnumber"0"

描述
十六進位數字的範圍為 -或 -。
如果指定 > ，則得到的將恰?


-------------------------------------------------------- KeyGTK3PgWhile ----

While   當條件
  
控制流語句。

語法
Do While condition
[statement block]
Loop
or
Do
[statement block]
Loop While condition
or
While [condition]
[statement block]
Wend

描述
While指定迴圈塊在以下計算結果為 true 時將繼續。在每次?


-------------------------------------------------------- KeyGTK3PgWhilewend ----

While...Wend
  
用於迴圈的控制流語句

語法
While [condition]
[statement block]
Wend

描述
如果運算式條件的計算結果為 true，則該語句將導致 中的以下一組語句重複執行。
如果在首次執行語句時計算結果為 false，則跳過 ，並在包含語句後立即恢復執行。
如果在語句塊內遇到語句，則循


-------------------------------------------------------- KeyGTK3PgWidth ----

Width
  
設置或獲取顯示的行數和列數

語法
Width [columns] [, rows]
Width LPrint columns
Width { #filenum | devicename }, columns
result = Width( )

參數
columns
用於輸出的列（以字元為單位）
rows
用於輸出的行（以字元為單位）
filenum
要申請的文件編號
devicename
要應用的設備名稱

返回值
返回一個 32 位，其中高字是行數，低字是當前設置的列數。Long

描述
設置輸出設備（控制台、印表機或文字檔）的最大字元列數。如果發送到設備的文本達到寬度，則會生成自動回車符


-------------------------------------------------------- KeyGTK3PgWindow ----

Window   窗口
  
為當前視口設置新的視圖座標映射

語法
Window [ [Screen] ( x1, y1 )-( x2, y2 ) ]

參數
Screen
指定 y 座標的可選參數從上到下遞增。
( x1, y1 )-( x2, y2 )
與當前視口的相對角對應的新浮點值。如果省略，則刪除座標映射。Window

描述
Window用於定義新的坐標系。 並且是要映射到當前視口相對角落的新座標;傳遞給圖形基元語句的所有未來座標都將受到此新映射的影響。如果


-------------------------------------------------------- KeyGTK3PgWindowtitle ----

WindowTitle   窗口標題
  
設置程式視窗標題

語法
Declare Sub WindowTitle ( ByRef title As Const String )

用法
WindowTitle title

參數
title
要指定為新視窗標題的字串。

描述
此語句對於更改程式視窗標題很有用。如果程式已在視窗模式下運行，則新標題集將立即變為活動狀態，否則將成為由對 or 語句的後續調用產生的任何窗口的新標題。如果在設置新?


-------------------------------------------------------- KeyGTK3PgWinput ----

Winput()
  
從控制台或檔中讀取大量寬字元

語法
Declare Function WInput( ByVal num As Integer ) As WString
Declare Function WInput( ByVal num As Integer, ByVal filenum As Long = 0 ) As WString

用法
result = WInput( num [, [#]filenum } )

參數
num
要讀取的字元數。
filenum
綁定檔或設備的檔編號。

返回值
返回讀取的字元的 WString。

描述
從控制台或 指定的綁定檔/設備讀取許多寬字元。
第一個版本等待並從鍵盤緩衝區讀取寬


-------------------------------------------------------- KeyGTK3PgWith ----

With   關聯 
  
語句塊，以允許隱式訪問使用者定義類型變數中的欄位

語法
With user_defined_var
statements
End With

描述
該塊允許在引用使用者定義的變數的欄位時省略其名稱。然後，可以在欄位之前僅使用一個句點（）訪問欄位，例如，如果包含稱為“element”的欄位元素，則可以在塊中以“”的形式訪問?


-------------------------------------------------------- KeyGTK3PgWoct ----

WOct   寬字元8進制
  
將數位轉換為 Unicode 八進制表示形式

語法
Declare Function WOct ( ByVal number As UByte ) As WString
Declare Function WOct ( ByVal number As UShort ) As WString
Declare Function WOct ( ByVal number As ULong ) As WString
Declare Function WOct ( ByVal number As ULongInt ) As WString
Declare Function WOct ( ByVal number As Const Any Ptr ) As WString

Declare Function WOct ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

用法
result = WOct( number [, digits ] )

參數
number
要轉換為八進制表示的數位。
digits
返回的字串中所需的位元數。

返回值
數字的 Unicode 八進制表示形式，截斷或用零 （） 填充以適合位數（如果指定）。"0"

描述
返回 的八進制（Unicode）表示形式。八位元數字的範圍從 到 。
如果指定 > ，則結果字串將恰好是


-------------------------------------------------------- KeyGTK3PgWrite ----

Write   寫入
  
將逗號分隔的值清單輸出到螢幕

語法
Write [ expressionlist ]

參數
expressionlist
要列印的以逗號分隔的項目列表

描述
將值輸出到螢幕。這些值用逗號分隔，字串括在雙引號中。如果絕對值小於 1 的數值，則以零 （） 為首碼（例如，）。絕對值大於或等於 的浮點數，或?


-------------------------------------------------------- KeyGTK3PgWriteFile ----

Write (File Access)   寫入
  
檔訪問說明符

語法
Open filename As String For Binary Access Write As #filenum As Integer

描述
語句中子句的說明符。 指定?


-------------------------------------------------------- KeyGTK3PgWritePp ----

Write #   寫入
  
將逗號分隔的值清單輸出到文字檔或設備

語法
Write # filenum , [ expressionlist ]

參數
filenum
為 或 打開的打開的檔或設備的檔編號。OutputAppend
expressionlist
要列印的以逗號分隔的項目列表

描述
將中的值輸出到綁定到 的文字檔或設備中。這些值用逗號分隔，字串括在雙引號中。如果未給出任何值（例如，的值將輸出為），則大於零（）和小


-------------------------------------------------------- KeyGTK3PgWspace ----

WSpace   寬字元空格
  
創建一個給定長度的 ，其中填充了空格 （WString" ")

語法
Declare Function WSpace( ByVal count As Integer ) As WString

用法
result = WSpace( count )

參數
count
一種整數類型，指定要創建的字串的長度。

返回值
創建的 .如果 .WStringcount <


-------------------------------------------------------- KeyGTK3PgWstr ----

WStr   寬字元轉換
  
返回數位或 ASCII 字串的寬字元字串表示形式

語法
Declare Function WStr ( ByVal n As Byte ) As WString
Declare Function WStr ( ByVal n As UByte ) As WString
Declare Function WStr ( ByVal n As Short ) As WString
Declare Function WStr ( ByVal n As UShort ) As WString
Declare Function WStr ( ByVal n As Long ) As WString
Declare Function WStr ( ByVal n As ULong ) As WString
Declare Function WStr ( ByVal n As LongInt ) As WString
Declare Function WStr ( ByVal n As ULongInt ) As WString
Declare Function WStr ( ByVal n As Single ) As WString
Declare Function WStr ( ByVal n As Double ) As WString
Declare Function WStr ( ByRef str As Const String ) As WString
Declare Function WStr ( ByVal str As Const WString Ptr ) As WString

用法
result = WStr( number )
or
result = WStr( string )

參數
number
要轉換為寬字元字串的數值運算式。
string
要轉換為寬字元字串的字串運算式。

返回值
返回數值或字串運算式的寬字元表示形式。

描述
WStr將數值?


-------------------------------------------------------- KeyGTK3PgWstring ----
WStr   寬字?
Description



-------------------------------------------------------- KeyGTK3PgWstringFunction ----

Wstring (Function)   寬字串
  
用特定寬度的某個寬字元的一定長度填充 aWString

語法
Declare Function WString ( ByVal count As Integer, ByVal ch_code As Long ) As WString
Declare Function WString ( ByVal count As Integer, ByRef ch As Const WString ) As WString

用法
result = WString( count, ch_code )
or
result = WString( count, ch )

參數
count
指定要創建的字串的長度。Integer
ch_code
指定要用於填補字元串的 Unicode 字元。Long
ch
第一個字元將用於填補字元串的 A。WString

返回值
創建的 .如果是空字串或 ， 則將返回空字串。WStrin


-------------------------------------------------------- KeyGTK3PgXorGfx ----

Xor   異或
  
圖形語句的參數，該語句使用按位作為 blitting 方法PutXor

語法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Xor

參數
Xor
必填。

描述
該方法使用按位元函數將每個源圖元與相應的目標圖元組合在一起。這樣做的結果是輸出為目標圖元。
此方法適用於所有圖形模式。沒有蒙版顏色，儘管顏色值（在全彩色模式下）不會產?


-------------------------------------------------------- KeyGTK3PgYear ----

Year   日期取年份
  
從日期序列中獲取年份

語法
Declare Function Year ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Year( date_serial )

參數
date_serial
日期

返回值
從包含日期序列格式的日期的變數中返回年份?


-------------------------------------------------------- KeyGTK3PgZstring ----

ZString   Z字串
  
標準資料類型：8 位元字串

語法
Dim variable As ZString * size
Dim variable As ZString Ptr

描述
A 是 C 樣式的固定大小的字元陣列。它沒有描述符，因此可以更快地計算其長度，以將其作為參數傳遞給函數。當變數具有固定的（數值常量或可在編譯時計算的運算式）時，FreeBASIC 通過將內容截

-------------------------------------------------------- KeyGTK3Win32AbnormalTermination ----
AbnormalTermination    AbnormalTermination函數指示嘗試  -  最後語句的嘗試塊是否正常終止。該函數只能從嘗試  -  最後語句的最後塊內調用。
語法



-------------------------------------------------------- KeyGTK3Win32AbortDoc ----
AbortDoc    AbortDoc函數停止當前列印工作，並擦除自上次調用StartDoc函數以來繪製的所有內容。此函數替換ABORTDOC印表機轉義。
語法
參數
【HDC】標識列印工作的設備上下文。
返回值
如果函數成功，返回值大於零。如果函數失敗，則返回值為SP_ERROR。要獲取擴展錯誤資訊，請調用GetLastError.
描述
如果發


-------------------------------------------------------- KeyGTK3Win32AbortPath ----
AbortPath    AbortPath函數關閉並丟棄指定設備上下文中的任何路徑。
語法
參數
【HDC】標識將丟棄路徑的設備上下文。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
如果在給定的設備上下


-------------------------------------------------------- KeyGTK3Win32AbortPrinter ----
AbortPrinter    如果印表機配置為周邊同作，AbortPrinter函數將刪除印表機的周邊同作檔。
語法
參數
【hPrinter】標識從中刪除周邊同作檔的印表機。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
如果打


-------------------------------------------------------- KeyGTK3Win32AbortProc ----
AbortProc    AbortProc函數是一個應用程式定義的回呼函數，在周邊同作期間要取消列印工作時調用該函數。
語法
參數
【HDC】標識列印工作的設備上下文。【// error value】指定是否發生錯誤。如果沒有發生錯誤，該參數為零;如果Windows列印管理器目前磁碟空間不足並且應用程式等待更多的磁碟空間


-------------------------------------------------------- KeyGTK3Win32AbortSystemShutdown ----
AbortSystemShutdown    AbortSystemShutdown函數使用InitiateSystemShutdown函數停止系統關機。
語法
參數
【lpMachineName】指向指定要停止關機的電腦的網路名稱的以空值終止的字串的指標。如果【lpMachineName】為NULL或指向空字串，則該函數將停止本地電腦上的關閉。



-------------------------------------------------------- KeyGTK3Win32AccessCheck ----
AccessCheck    伺服器應用程式使用AccessCheck函數，以根據與物件關聯的存取控制來檢查用戶端對物件的訪問。
語法
參數
【pSecurityDescriptor】指向檢查訪問的SECURITY_DESCRIPTOR結構的指標。【ClientToken】標識表示用戶端嘗試訪問的訪問權杖。必須從通信工作階段層__獲取


-------------------------------------------------------- KeyGTK3Win32AccessCheckAndAuditAlarm ----
AccessCheckAndAuditAlarm    AccessCheckAndAuditAlarm函數執行訪問驗證並生成相應的審核消息。應用程式還可以使用此函數來確定用戶端進程是否擁有必需的許可權。此函數通常由類比用戶端進程的伺服器應用程式使用。當前版本的Windows NT不支持警報。
語法
參數
【SubsystemName】指向以null結尾的字串，指定調用函數__的子系統的名稱，例如“DEBUG”或“WIN32”。【HandleId】指向一個唯一的32位元值，表示用戶端物件的控制碼


-------------------------------------------------------- KeyGTK3Win32AcsLan ----
AcsLanAcsLan函數用於使用資料鏈接控制（DLC）協定與其他電腦或網路週邊設備（如印表機）進行通信。呼叫者通過填寫命令控制塊（CCB），然後調用AcsLan來提交請求。通過AcsLan提交的命令可以同步或非同步完成。DLC驅動程式，而不是調用者，確定命令如何完成。這與Netbios的 函數不同，例如，它具有按照調用者的請求同步或非同步完成的命令。NT DLC和CCB2介面之間有一些區別。最顯著的區別是緩衝集區必須在開放適配器實例的基礎上進行指定，而不是按SAP規定（服務存取點）。使用DIR.OPEN.ADAPTER命令打開適配器後，必須使用BUFFER.CREATE向DLC驅動程式提供緩衝集區。
語法
參數
【PCCB】指向LLC_CCB結構的指標，描述正在執行的函數。有關此結構的資訊，請參閱IBM LAN的文檔。【ppBadCcb】指向LLC_CCB結構的指標。當提交LLC_CCB結構鏈時使用


-------------------------------------------------------- KeyGTK3Win32ActivateKeyboardLayout ----
ActivateKeyboardLayout    Windows 95和Windows NT中的ActivateKeyboardLayout的實現有很大的不同。為了適應這些差異，本參考頁首先顯示Windows 95實現，其次是Windows NT版本。Windows 95：
語法
參數
【HKL】處理鍵盤配置或零擴展地區設定識別碼。該參數可以是使用LoadKeyboardLayout或GetKeyboardLayoutList函數獲得的任何有效的鍵盤配置控制碼或以下值之一：值


-------------------------------------------------------- KeyGTK3Win32AddAccessAllowedAce ----
AddAccessAllowedAce    AddAccessAllowedAce函數將一個訪問允許的ACE添加到ACL。該訪問被授予指定的SID。ACE是一個存取控制條目。ACL是存取控制清單。SID是安全性識別碼。
語法
參數
【ACL】指向ACL結構。此函數為此ACL添加了訪問允許的ACE。ACE以ACCESS_ALLOWED_ACE結構的形式。【dwAceRevision】指定要修改的ACL的修訂級別。目前，此


-------------------------------------------------------- KeyGTK3Win32AddAccessDeniedAce ----
AddAccessDeniedAce    AddAccessDeniedAce函數將一個訪問被拒絕的ACE添加到ACL。訪問被拒絕到指定的SID。ACE是一個存取控制條目。ACL是存取控制清單。SID是安全性識別碼。
語法
參數
【ACL】指向ACL結構。此函數為此ACL添加訪問被拒絕的ACE。ACE以ACCESS_DENIED_ACE結構的形式。【dwAceRevision】指定要修改的ACL的修訂級別。目前，此值


-------------------------------------------------------- KeyGTK3Win32AddAce ----
AddAce    AddAce函數將一個或多個ACE添加到指定的ACL。ACE是一個存取控制條目。ACL是存取控制清單。
語法
參數
【ACL】指向ACL結構。此函數將ACE添加到此ACL。【dwAceRevision】指定要修改的ACL的修訂級別。目前，此值必須為ACL_REVISION。【dwStartingAceIn


-------------------------------------------------------- KeyGTK3Win32AddAtom ----
AddAtom    AddAtom函數將一個字串添加到本地atom表中，並返回一個標識字串的唯一值（atom）。
語法
參數
【lpString】指向要添加的以null結尾的字串。該字串的最大長度可以為255位元組。僅在情況下不同的字串被認為是相同的。添加的第一個字串的情況由GetAtomName函數保留並返


-------------------------------------------------------- KeyGTK3Win32AddAuditAccessAce ----
AddAuditAccessAce    AddAuditAccessAce函數將系統審核ACE添加到系統ACL。審核指定SID的訪問。ACE是一個存取控制條目。ACL是存取控制清單。SID是安全性識別碼。
語法
參數
【ACL】指向ACL結構。此函數將此系統審核ACE添加到此ACL。ACE採用SYSTEM_AUDIT_ACE結構的形式。【dwAceRevision】指定要修改的ACL的修訂級別。目前，此值


-------------------------------------------------------- KeyGTK3Win32AddFontResource ----
AddFontResource    AddFontResource函數將字體資源從指定的檔添加到Windows字體表。該字體隨後可用於任何基於Windows的應用程式的文本輸出。
語法
參數
【lpszFilenamenl】指向包含有效字體檔filename的以null結尾的字串。檔案名可以指定.FON字體資源檔，.FNT原始點陣字型檔，.TTF原始TrueType檔或


-------------------------------------------------------- KeyGTK3Win32AddForm ----
AddForm    AddForm函數將表單添加到可以為指定印表機選擇的可用表單列表。
語法
參數
【hPrinter】標識支援以指定格式列印的印表機。【水準】指定【P成型】指向的結構的級別。此值必須為1。【P成型】指向FORM_INFO_1結構。
返回值
如果函數成功，返回值不為零。


-------------------------------------------------------- KeyGTK3Win32AddJob ----
AddJob    AddJob函數獲取一個路徑字串，指定可用於存儲周邊同作列印工作的檔。
語法
參數
【hPrinter】手動指定列印工作的印表機。這必須是配置為周邊同作印表機的本地印表機。如果【hPrinter】是遠端印表機連接的控制碼，或者如果印表機配置為直接列印，則AddJob函數失敗。【


-------------------------------------------------------- KeyGTK3Win32AddMonitor ----
AddMonitor    AddMonitor函數安裝本地印表機監視器並連結配置，資料和監視器檔。Windows NT的未來版本可能允許遠端安裝印表機監視器。
語法
參數
【PNAME】指向指定要在其上安裝監視器的伺服器的名稱的以null結尾的字串的指標。對於此版本的Windows NT，只能在本地安裝監視器，因此此字串應為NULL。【水準】指定【//指向


-------------------------------------------------------- KeyGTK3Win32AddPort ----
AddPort    AddPort函數將埠的名稱添加到支援的埠列表中。AddPort函數由列印監視器匯出。
語法
參數
【PNAME】指向一個零終止字串的指標，指定埠連接到的伺服器的名稱。如果此參數為NULL，埠為本地埠。【的hWnd】處理到AddPort對話方塊的父視窗。【pMonitorName】指


-------------------------------------------------------- KeyGTK3Win32AddPrinter ----
AddPrinter    AddPrinter函數將印表機添加到指定伺服器支援的印表機列表中。
語法
參數
【PNAME】指向指定要在其上安裝印表機列印處理器的伺服器的名稱的以空值終止的字串的指標。如果此字串為NULL，列印處理器將在本地安裝。【水準】指定【pPrinter】指向的結構的版本。


-------------------------------------------------------- KeyGTK3Win32AddPrinterConnection ----
AddPrinterConnection    AddPrinterConnection函數為當前使用者添加了指定印表機的連接。
語法
參數
【PNAME】指向指定當前用戶希望建立連接的印表機名稱的以空值終止的字串的指標。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLast


-------------------------------------------------------- KeyGTK3Win32AddPrinterDriver ----
AddPrinterDriver    AddPrinterDriver函數安裝本地或遠端印表機驅動程式，並連結配置，資料和驅動程式檔。
語法
參數
【PNAME】指向以空值終止的字串的指標，指定應安裝驅動程式的伺服器的名稱。如果【PNAME】為NULL，則驅動程式將在本地安裝。【水準】指定【pDriverInfo】指向的結構的版本。該


-------------------------------------------------------- KeyGTK3Win32AddPrintProcessor ----
AddPrintProcessor    AddPrintProcessor函數在指定的伺服器上安裝列印處理器，並將列印處理器名稱添加到支援的列印處理器的內部列表中。
語法
參數
【PNAME】指向指定要在其上安裝列印處理器的伺服器的名稱的以空值終止的字串的指標。如果此參數為NULL，列印處理器將在本地安裝。【pEnvironment】指向指定環境的以空值終止的字元


-------------------------------------------------------- KeyGTK3Win32AddPrintProvidor ----
AddPrintProvidor    AddPrintProvidor函數安裝本地印表機提供商並連結配置，資料和提供程式檔。Windows的未來版本可能允許遠端安裝印表機提供商。
語法
參數
【PNAME】指向以空值終止的字串，指定應安裝提供程式的伺服器的名稱。對於此版本的Windows 95和Windows NT，提供程式只能在本地安裝，因此此參數應為NULL。【水準】指定【


-------------------------------------------------------- KeyGTK3Win32AddPropSheetPageProc ----
AddPropSheetPageProc    AddPropSheetPageProc函數指定一個應用程式定義的回呼函數，屬性工作表擴展用於將頁面添加到屬性工作表。
語法



-------------------------------------------------------- KeyGTK3Win32AdjustTokenGroups ----
AdjustTokenGroups    AdjustTokenGroups函數調整指定訪問權杖中的組。啟用或禁用訪問權杖中的組需要TOKEN_ADJUST_GROUPS訪問。
語法
參數
【TokenHandle】標識包含要修改的組的訪問權杖。【ResetToDefault】指定組是否被設置為默認的啟用和禁用狀態。如果此值為TRUE，則將組設置為其預設狀態，並忽略【NewSt


-------------------------------------------------------- KeyGTK3Win32AdjustTokenPrivileges ----
AdjustTokenPrivileges    AdjustTokenPrivileges函數可以在指定的訪問權杖中啟用或禁用許可權。啟用或禁用訪問權杖中的許可權需要TOKEN_ADJUST_PRIVILEGES訪問。
語法
參數
【TokenHandle】標識包含要修改的許可權的訪問權杖。【DisableAllPrivileges】指定該函數是否禁用所有權杖的許可權。如果此值為TRUE，該函數將禁用所有權限，並忽略【Ne


-------------------------------------------------------- KeyGTK3Win32AdjustWindowRect ----
AdjustWindowRect    AdjustWindowRect函數根據所需的客戶矩形大小計算視窗矩形所需的大小。然後可以將視窗矩形傳遞給CreateWindowEx函數，以創建一個視窗，其用戶端區域是所需的大小。
語法
參數
【LPRECT】指向RECT結構的指標，其中包含所需用戶端區域的左上角和右下角的座標。當函數返回時，結構包含視窗左上角和右下角的座標，以適應所需的客戶區。【dwStyle】指定要計算所需大小的


-------------------------------------------------------- KeyGTK3Win32AdjustWindowRectEx ----
AdjustWindowRectEx    AdjustWindowRectEx函數根據所需的用戶端矩形大小計算具有擴展樣式的視窗的矩形所需的大小。然後可以將視窗矩形傳遞給CreateWindowEx函數，以創建一個視窗，其用戶端區域是所需的大小。
語法
參數
【LPRECT】指向RECT結構的指標，其中包含所需用戶端區域的左上角和右下角的座標。當函數返回時，結構包含視窗左上角和右下角的座標，以適應所需的客戶區。【dwStyle】指定要計算所需大小的


-------------------------------------------------------- KeyGTK3Win32AdvancedDocumentProperties ----
AdvancedDocumentProperties    AdvancedDocumentProperties函數顯示指定印表機的印表機配置對話方塊，允許使用者配置該印表機。
語法
參數
【的hWnd】標識印表機配置對話方塊的父視窗。【hPrinter】標識印表機物件。【pDeviceName】指向指定要顯示印表機配置對話方塊的設備名稱的以空值終止的字串的指標。【pDevMod


-------------------------------------------------------- KeyGTK3Win32AllocateAndInitializeSid ----
AllocateAndInitializeSid    AllocateAndInitializeSid函數分配和初始化最多八個子許可權的安全性識別碼（SID）。
語法
參數
【pIdentifierAuthority】指向SID_IDENTIFIER_AUTHORITY結構的指標，給出在SID中設置的頂級識別字許可權值。【nSubAuthorityCount】指定


-------------------------------------------------------- KeyGTK3Win32AllocateLocallyUniqueId ----
AllocateLocallyUniqueId    AllocateLocallyUniqueId函數分配本地唯一識別碼（LUID）。
語法
參數
【高聲】指向接收分配的LUID的緩衝區。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
LUID僅在單個會


-------------------------------------------------------- KeyGTK3Win32AllocConsole ----
AllocConsole    AllocConsole函數為調用進程分配一個新的控制台。
語法
參數
此函數無參數。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
一個進程只能與一個控制台關聯，因此如果調用進


-------------------------------------------------------- KeyGTK3Win32AngleArc ----
AngleArc    AngleArc函數繪製一個線段和弧。線段從當前位置繪製到弧的開頭。圓弧沿著具有給定半徑和中心的圓的周邊繪製。弧的長度由給定的起始和掃掠角度定義。
語法
參數
【HDC】標識設備上下文。【X】指定圓的中心的邏輯x座標。【Y】指定圓的中心的邏輯y座標。【dwRadius】指定圓的半徑（以邏輯為單位）。該值必須為正。【eStartAngle】指定相對於


-------------------------------------------------------- KeyGTK3Win32AnimatePalette ----
AnimatePalette    AnimatePalette函數將替換指定邏輯調色板中的條目。
語法
參數
【HPAL】標識邏輯調色板。【iStartIndex】指定要替換的第一個邏輯調色板條目。【cEntries】指定要替換的條目數。【PPE】指向用於替換當前條目的PALETTEENTRY結構數


-------------------------------------------------------- KeyGTK3Win32AnsiLower ----
AnsiLowerAnsiLower    函數已過時。為了與16位元版本的Windows相容，此函數實現為調用CharLower函數的巨集，該函數應用於新的基於Win32的應用程式。


-------------------------------------------------------- KeyGTK3Win32AnsiLowerBuff ----
AnsiLowerBuffAnsiLowerBuff    函數已過時。為了與16位元版本的Windows相容，此函數實現為調用CharLowerBuff函數的巨集，該函數應用於新的基於Win32的應用程式。


-------------------------------------------------------- KeyGTK3Win32AnsiNext ----
AnsiNextAnsiNext    函數已過時。為了與16位元版本的Windows相容，此函數實現為調用CharNext函數的巨集，該函數應用於新的基於Win32的應用程式。


-------------------------------------------------------- KeyGTK3Win32AnsiPrev ----
AnsiPrevAnsiPrev    函數已過時。為了與16位元版本的Windows相容，此函數實現為調用CharPrev函數的巨集，該函數應用於新的基於Win32的應用程式。


-------------------------------------------------------- KeyGTK3Win32AnsiToOem ----
AnsiToOem  AnsiToOem    函數已過時。為了與16位元版本的Windows相容，此函數實現為調用CharToOem函數的巨集，該函數應用於新的基於Win32的應用程式。


-------------------------------------------------------- KeyGTK3Win32AnsiToOemBuff ----
AnsiToOemBuff  AnsiToOemBuff    函數已過時。為了與16位元版本的Windows相容，此函數實現為調用CharToOemBuff函數的巨集，該函數應用於新的基於Win32的應用程式。


-------------------------------------------------------- KeyGTK3Win32AnsiUpper ----
AnsiUpperAnsiUpper    函數已過時。為了與16位元版本的Windows相容，此函數實現為調用CharUpper函數的巨集，該函數應用於新的基於Win32的應用程式。


-------------------------------------------------------- KeyGTK3Win32AnsiUpperBuff ----
AnsiUpperBuffAnsiUpperBuff    函數已過時。為了與16位元版本的Windows相容，此函數實現為調用CharUpperBuff函數的巨集，該函數應用於新的基於Win32的應用程式。


-------------------------------------------------------- KeyGTK3Win32AnyPopup ----
AnyPopup    AnyPopup函數表示螢幕上是否存在擁有，可見，頂級快顯視窗或重疊窗口。該函數搜索整個Windows螢幕，而不僅僅是呼叫應用程式的用戶端區域。
語法
參數
此函數無參數。
返回值
如果快顯視窗存在，則返回值不為零，即使快顯視窗被其他視窗完全覆蓋。如果快顯視窗不存在，返回值為零。
描述
AnyPopup是Windows版本1.【x】函數，


-------------------------------------------------------- KeyGTK3Win32AppendMenu ----
AppendMenu    AppendMenu函數將一個新專案附加到指定的功能表列，下拉式功能表，子功能表或快顯功能表的末尾。您可以使用此函數指定功能表項目的內容，外觀和行為。InsertMenuItem函數已被InsertMenuItem函數取代。但是，如果您不需要InsertMenuItem的任何擴展函數，您仍然可以使用AppendMenu.
語法
參數
【HMENU】標識要更改的功能表列，下拉式功能表，子功能表或快顯功能表。【uFlags】指定用於控制新功能表項目的外觀和行為的標誌。此參數可以是以下備註部分中列出的值的組合。【uIDNewItem】指定新


-------------------------------------------------------- KeyGTK3Win32Arc ----
Arc    弧函數繪製一個橢圓弧。BOOL Arc(HDC 【HDC】,//處理設備上下文INT 【nLeftRect】,//邊界矩形左上角的x座標INT 【nTopRect】,//邊界矩形左上角的y座標INT 【nRightRect】,//邊界矩形右下角的x座標INT 【nBottomRect】,//邊界矩形右下角的y座標INT 【nXStartArc】,//第一個徑向結束點INT 【nYStartArc】,//第一個徑向結束點INT 【nXEndArc】,//第二徑向終點INT 【nYEndArc】//第二徑向終點);
參數
【HDC】標識出現繪圖的設備上下文。【nLeftRect】指定邊界矩形左上角的邏輯x座標。Windows 95： 【nLeftRect】加上【nRightRect】的總和必須小於32768。


-------------------------------------------------------- KeyGTK3Win32ArcTo ----
ArcTo    ArcTo函數繪製一個橢圓弧。
語法
參數
【HDC】標識出現繪圖的設備上下文。【nLeftRect】指定邊界矩形左上角的邏輯x座標。【nTopRect】指定邊界矩形左上角的邏輯y座標。【nRightRect】指定邊界矩形右下角的邏輯


-------------------------------------------------------- KeyGTK3Win32AreAllAccessesGranted ----
AreAllAccessesGranted    AreAllAccessesGranted函數檢查是否已經授予一組請求的存取權限。存取權限表示為32位元存取遮罩中的位元標誌。
語法
參數
【GrantedAccess】一個存取遮罩，指定已授予的存取權限。【DesiredAccess】一個存取遮罩，指定已請求的存取權限。這個遮罩必須已經從通用映射到特定的和標準的存取權限，通常通


-------------------------------------------------------- KeyGTK3Win32AreAnyAccessesGranted ----
AreAnyAccessesGranted    AreAnyAccessesGranted函數測試是否已經授予一組請求的存取權限。存取權限表示為32位元存取遮罩中的位元標誌。
語法
參數
【GrantedAccess】指定授權的存取遮罩。【DesiredAccess】指定要請求的存取遮罩。這個遮罩必須已經從通用映射到特定的和標準的存取權限，通常通過調用MapGenericMa


-------------------------------------------------------- KeyGTK3Win32AreFileApisANSI ----
AreFileApisANSI    AreFileApisANSI函數確定一組Win32檔函數是否使用ANSI或OEM字元集內碼表。此函數對於8位元控制台輸入和輸出操作非常有用。
語法
參數
此函數無參數。
返回值
如果一組Win32檔函數正在使用ANSI內碼表，則返回值不為零。如果一組Win32檔函數正在使用OEM內碼表，返回值為零。
描述
SetFileApisT


-------------------------------------------------------- KeyGTK3Win32ArrangeIconicWindows ----
ArrangeIconicWindows    ArrangeIconicWindows函數將排列指定父視窗的所有最小化（圖示）子視窗。
語法
參數
【的hWnd】標識父視窗。
返回值
如果函數成功，則返回值是一行圖示的高度。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
維護自己的最小化子窗


-------------------------------------------------------- KeyGTK3Win32AttachThreadInput ----
AttachThreadInput    AttachThreadInput函數將一個執行緒的輸入處理機制附加到另一個執行緒的輸入處理機制。
語法
參數
【idAttach】指定要附加到另一個執行緒的執行緒的識別字。要連接的執行緒不能是系統執行緒。【idAttachTo】指定要附加到的執行緒的識別字。這個執行緒不能是系統執行緒。執行緒不能附加到自身。因此，【


-------------------------------------------------------- KeyGTK3Win32BackupEventLog ----
BackupEventLog    BackupEventLog函數將指定的事件日誌保存到備份檔案。該函數不會清除事件日誌。
語法
參數
【hEventLog】標識打開的事件日誌。該控制碼由OpenEventLog或OpenBackupEventLog函數返回。【lpBackupFileName】指向以空字元結尾的字串，指定備


-------------------------------------------------------- KeyGTK3Win32BackupRead ----
BackupRead    BackupRead函數將與指定檔或目錄關聯的資料讀入緩衝區。您可以使用此函數來備份檔案或目錄。
語法
參數
【HFILE】處理要備份的檔或目錄。該函數讀取與此檔相關的資料。通過調用CreateFile函數獲取此控制碼。如果CreateFile被標記為FILE_FLAG_NO_BUFFERING，


-------------------------------------------------------- KeyGTK3Win32BackupSeek ----
BackupSeek    BackupSeek函數通過使用BackupRead或BackupWrite函數初步訪問資料流程。
語法
參數
【HFILE】標識要備份的檔或目錄。該控制碼是通過使用CreateFile函數創建的。【dwLowBytesToSeek】指定要尋找的位元組數的低32位元。【dwHighBytesToSeek】


-------------------------------------------------------- KeyGTK3Win32BackupWrite ----
BackupWrite    BackupWrite函數將資料流程從緩衝區寫入指定的檔或目錄。資料必須分為由WIN32_STREAM_ID結構分隔的子流。您可以使用此函數來還原已備份的檔或目錄。
語法
參數
【HFILE】處理要恢復的檔或目錄。該函數將資料寫入此檔。您可以通過調用CreateFile函數獲取此控制碼。如果CreateFile被標記為FILE_FLAG_NO_BUFFERING，


-------------------------------------------------------- KeyGTK3Win32Beep ----
Beep    嘟函數在揚聲器上產生簡單的音調。函數是同步的在聲音完成之前，它不會將控制權返回給其呼叫者。BOOL Beep(DWORD 【dwFreq】,//聲音頻率，以赫茲為單位DWORD 【dwDuration】//聲音持續時間，以毫秒為單位);
參數
【dwFreq】Windows NT：指定頻率（赫茲）的聲音。該參數必須在37到32,767（0x25到0x7FFF）的範圍內。Windows 95：參數被忽略。【dwDuration】Wi


-------------------------------------------------------- KeyGTK3Win32BeginDeferWindowPos ----
BeginDeferWindowPos    BeginDeferWindowPos函數為多視窗位置結構分配記憶體並返回結構的控制碼。
語法
參數
【nNumWindows】指定要存儲位置資訊的初始視窗數。如果需要，DeferWindowPos函數可以增加結構的大小。
返回值
如果函數成功，則返回值標識多視窗位置結構。如果系統資源不


-------------------------------------------------------- KeyGTK3Win32BeginPaint ----
BeginPaint    BeginPaint函數準備指定的繪畫視窗，並填寫PAINTSTRUCT結構，其中包含有關繪畫的資訊。
語法
參數
【HWND】標識要重畫的視窗。【Lppant】指向PAINTSTRUCT結構的指標，將接收繪畫資訊。
返回值
如果函數成功，則返回值是指定視窗的顯示裝置上下文的控制碼。如果函數失敗，則返回


-------------------------------------------------------- KeyGTK3Win32BeginPath ----
BeginPath    BeginPath函數在指定的設備上下文中打開路徑括弧。
語法
參數
【HDC】標識設備上下文。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
路徑括弧打開後，應用程式可以開始


-------------------------------------------------------- KeyGTK3Win32BeginUpdateResource ----
BeginUpdateResource    BeginUpdateResource函數返回可由UpdateResource函數使用的控制碼，以在可執行檔中添加，刪除或替換資源。
語法
參數
【pFileName】指向以空值終止的字串，指定要在其中更新資源的Windows可執行檔。應用程式必須能夠獲取對此檔的寫入許可權;它不能當前正在執行。如果【pFileName】未指定完整


-------------------------------------------------------- KeyGTK3Win32BitBlt ----
BitBlt    BitBlt函數執行與從指定源設備上下文到目標設備上下文的圖元矩形相對應的顏色資料的位元塊傳輸。
語法
參數
【hdcDest】標識目標設備上下文。【nXDest】指定目標矩形左上角的邏輯x座標。【nYDest】指定目標矩形左上角的邏輯y座標。【nWidth】指定源和目標矩形的邏輯寬度。【nHeig


-------------------------------------------------------- KeyGTK3Win32BringWindowToTop ----
BringWindowToTop    BringWindowToTop函數將指定的視窗置於Z順序的頂部。如果視窗是頂級視窗，它將被啟動。如果視窗是子視窗，則與子視窗關聯的頂層父窗口將被啟動。
語法
參數
【的hWnd】標識要帶到Z訂單頂部的視窗。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
使用BringW


-------------------------------------------------------- KeyGTK3Win32BroadcastSystemMessage ----
BroadcastSystemMessage    [Now Supported on Windows NT]BroadcastSystemMessage函數會向指定的收件人發送一條消息。收件人可以是應用程式，可安裝的驅動程式，基於Windows的網路驅動程式，系統級設備驅動程式或這些系統元件的任意組合。
語法



-------------------------------------------------------- KeyGTK3Win32BrowseCallbackProc ----
BrowseCallbackProc    [Now Supported on Windows NT]指定與SHBrowseForFolder函數一起使用的應用程式定義的回呼函數。流覽對話方塊調用此函數通知它關於事件。BFFCALLBACK類型定義了一個指向此回呼函數的指標。int BrowseCallbackProc（HWND【HWND】, UINT【uMsg】, LPARAM【lParam的】, LPARAM 【的lpData】 );
參數
【HWND】處理到流覽對話方塊。回呼函數可以將以下消息發送到此視窗：BFFM_ENABLEOK如果【wParam中】參數為非零，則啟用確定按鈕，如果【wParam中】為零，則禁用該按鈕。BFF


-------------------------------------------------------- KeyGTK3Win32BuildCommDCB ----
BuildCommDCB    BuildCommDCB函數使用設備控制字串中指定的值填充指定的DCB結構。設備控制字串使用模式命令的語法。
語法
參數
【lpDef】指向指定設備控制資訊的以空值終止的字串的指標。字串必須與模式命令的命令列參數的格式相同。例如，以下字串指定串列傳輸速率1200，無同位，8位元資料位元和1位元停止位：baud=1


-------------------------------------------------------- KeyGTK3Win32BuildCommDCBAndTimeouts ----
BuildCommDCBAndTimeouts    BuildCommDCBAndTimeouts函數將設備定義字串轉換為適當的設備控制塊代碼，然後將這些代碼放入設備控制塊。該函數還可以為設備設置超時值，包括無超時的可能性;在這方面，函數的行為根據設備定義字串的內容而有所不同。
語法
參數
【lpDef】指向指定設備的設備控制資訊的空終止字串的指標。該函數使用此字串，解析它，然後在【lpDCB】指向的DCB結構中設置適當的值。【lpDCB】指向DCB結構的指標，該函數填充【


-------------------------------------------------------- KeyGTK3Win32BuildExplicitAccessWithName ----
BuildExplicitAccessWithName    [New - Windows NT]BuildExplicitAccessWithName函數使用調用者指定的資料初始化EXPLICIT_ACCESS結構。受託人由名稱字串標識。
語法
參數
【pExplicitAccess】指向EXPLICIT_ACCESS結構進行初始化。BuildExplicitAccessWithName不分配任何記憶體。如果此參數為NULL，則該函數不執行


-------------------------------------------------------- KeyGTK3Win32BuildImpersonateExplicitAccessWithName ----
BuildImpersonateExplicitAccessWithName    [New - Windows NT]提供BuildImpersonateExplicitAccessWithName函數供將來使用。不要在Windows NT版本4.0上調用它。


-------------------------------------------------------- KeyGTK3Win32BuildImpersonateTrustee ----
BuildImpersonateTrustee    [New - Windows NT]提供BuildImpersonateTrustee函數供將來使用。不要在Windows NT版本4.0上調用它。


-------------------------------------------------------- KeyGTK3Win32BuildSecurityDescriptor ----
BuildSecurityDescriptor    [New - Windows NT]BuildSecurityDescriptor函數分配和初始化一個新的安全性描述元。安全性描述元是一個不透明的結構，其中包含與物件相關聯的安全資訊。該函數可以通過將指定的安全資訊與現有安全性描述元中的資訊合併來初始化新的安全性描述元。如果不指定現有安全性描述元，則該函數將根據指定的安全性資訊初始化新的安全性描述元。
語法
參數
【pOwner】指向TRUSTEE結構的指標，用於標識新安全性描述元的所有者。如果結構使用TRUSTEE_IS_NAME表單，BuildSecurityDescriptor將查找與指定受託人名


-------------------------------------------------------- KeyGTK3Win32BuildTrusteeWithName ----
BuildTrusteeWithName    [New - Windows NT]BuildTrusteeWithName函數初始化TRUSTEE結構。來電者指定受託人姓名。該函數將結構的其他成員設置為預設值。
語法
參數
【pTrustee】指向TRUSTEE結構進行初始化。BuildTrusteeWithName函數不分配任何記憶體。如果此參數為NULL，則該函數不執行任何操作。【PNAME】指向包含TRUS


-------------------------------------------------------- KeyGTK3Win32BuildTrusteeWithSid ----
BuildTrusteeWithSid    [New - Windows NT]BuildTrusteeWithSid函數初始化TRUSTEE結構。來電者指定受託人的安全性識別碼（SID）。該函數將結構的其他成員設置為預設值。該函數不會查找與SID關聯的名稱。
語法
參數
【pTrustee】指向TRUSTEE結構進行初始化。BuildTrusteeWithSid函數不分配任何記憶體。如果此參數為NULL，則該函數不執行任何操作。【PSID】指向識別受託人的SI


-------------------------------------------------------- KeyGTK3Win32CallMsgFilter ----
CallMsgFilter    CallMsgFilter函數將指定的消息和掛鉤代碼傳遞給與WH_SYSMSGFILTER和WH_MSGFILTER鉤子相關聯的鉤子過程。WH_SYSMSGFILTER或WH_MSGFILTER掛鉤過程是一個應用程式定義的回呼函數，用於檢查和（可選）修改對話方塊，訊息方塊，功能表或捲軸的消息。
語法
參數
【LPMSG】指向MSG結構的指標，其中包含要傳遞給掛鉤過程的消息。【NCODE】指定鉤子過程使用的應用程式定義代碼來確定如何處理消息。代碼不能與與WH_SYSMSGFILTER和WH_MS


-------------------------------------------------------- KeyGTK3Win32CallNamedPipe ----
CallNamedPipe    CallNamedPipe函數連接到消息類型的管道（並且等待管道的實例不可用），寫入管道並從管道讀取，然後關閉管道。
語法
參數
【lpNamedPipeName】指向指定管道名稱的以null結尾的字串的指標。【lpInBuffer】指向包含寫入管道的資料的緩衝區。【nInBufferSize】指定寫緩衝區的大小（以


-------------------------------------------------------- KeyGTK3Win32CallNextHookEx ----
CallNextHookEx    CallNextHookEx函數將鉤子資訊傳遞給當前鉤子鏈中的下一個鉤子過程。此函數取代DefHookProc函數。
語法
參數
【HHK】標識當前掛鉤。由於以前調用SetWindowsHookEx函數，應用程式會收到此控制碼。【NCODE】指定傳遞給當前掛鉤過程的掛鉤代碼。下一個鉤子過程使用此代碼來確定如何處理掛鉤資訊


-------------------------------------------------------- KeyGTK3Win32CallWindowProc ----
CallWindowProc    CallWindowProc函數將消息資訊傳遞到指定的視窗過程。
語法
參數
【lpPrevWndFunc】指向上一個視窗過程。如果通過調用GetWindowLong參數設置為GWL_WNDPROC或DWL_DLGPROC的GetWindowLong函數獲得此值，則實


-------------------------------------------------------- KeyGTK3Win32CallWndProc ----
CallWndProc    CallWndProc掛接過程是一種應用程式定義或庫定義的回呼函數，只要調用SendMessage函數，系統就會調用該函數。在將消息傳遞到目標視窗過程之前，系統將消息傳遞給掛接過程。掛鉤過程可以檢查消息;它不能修改它。
語法
參數
【NCODE】指定掛接過程是否處理消息。如果【NCODE】為HC_ACTION，則掛接過程必須處理該消息。如果【NCODE】小於零，掛鉤過程必須將消息傳遞給CallNextHookEx函數，


-------------------------------------------------------- KeyGTK3Win32CallWndRetProc ----
CallWndRetProc    [Now Supported on Windows NT]CallWndRetProc掛接過程是在調用SendMessage函數後系統調用的應用程式定義或庫定義的回呼函數。將消息傳遞到目標視窗過程後，系統將該消息傳遞給掛鉤過程。掛鉤過程可以檢查消息;它不能修改它。
語法
參數
【NCODE】指定掛接過程是否處理消息。如果【NCODE】為HC_ACTION，則掛接過程必須處理該消息。如果【NCODE】小於零，掛鉤過程必須將消息傳遞給CallNextHookEx函數，


-------------------------------------------------------- KeyGTK3Win32CancelDC ----
CancelDC    CancelDC函數取消指定設備上下文（DC）上的任何掛起操作。
語法
參數
【HDC】識別DC。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
多執行緒應用程式使用CancelDC函數來取消冗長的繪圖操作。如果執行緒A啟動長時間的繪圖操作


-------------------------------------------------------- KeyGTK3Win32CancelIO ----
CancelIO  [New - Windows NT]CancelIO函數取消調用執行緒為指定的檔案控制代碼發出的所有待處理的輸入和輸出（I / O）操作。該函數不會取消其他執行緒為檔案控制代碼發出的I / O操作。
語法
參數
【HFILE】處理文件。該函數取消該檔案控制代碼的所有待處理I / O操作。
返回值
如果函數成功，則返回值為非零由調用執行緒為檔案控制代碼發出的所有待處理I / O操作已成功取消。如果函數失敗，


-------------------------------------------------------- KeyGTK3Win32CancelWaitableTimer ----
CancelWaitableTimer    [New - Windows NT]CancelWaitableTimer函數將指定的“等待”計時器設置為非活動狀態。
語法
參數
【hTimer】標識計時器物件。CreateWaitableTimer或OpenWaitableTimer函數返回此控制碼。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。


-------------------------------------------------------- KeyGTK3Win32CascadeWindows ----
CascadeWindows    [Now Supported on Windows NT]CascadeWindows函數將指定的視窗或指定父視窗的子視窗級聯。
語法
參數
【hwndParent】標識父視窗。如果此參數為NULL，則假定桌面視窗。【wHow】指定級聯標誌。當前可用的唯一標誌MDITILE_SKIPDISABLED可防止已禁用MDI子窗口級聯。【


-------------------------------------------------------- KeyGTK3Win32CBTProc ----
CBTProc    CBTProc掛接過程是系統在啟動，創建，銷毀，最小化，最大化，移動或調整視窗大小之前調用的應用程式定義或庫定義的回呼函數;完成系統命令之前;在從系統訊息佇列中刪除滑鼠或鍵盤事件之前;在設置鍵盤焦點之前;或在與系統訊息佇列同步之前。掛鉤過程返回的值確定Windows是否允許或阻止其中一個操作。基於電腦的培訓（CBT）應用程式使用此掛接過程從系統接收有用的通知。
語法
參數
【NCODE】指定掛鉤過程用於確定如何處理消息的代碼。此參數可以是以下值之一：值含義HCBT_ACTIVATE系統即將啟動一個視窗。HCBT_CLICKSKIPPED系統從系統訊息佇列中刪除


-------------------------------------------------------- KeyGTK3Win32CCHookProc ----
CCHookProc    一個CCHookProc鉤子過程是一個應用程式定義或庫定義的回檔過程，與Color公共對話方塊一起使用。掛鉤過程接收預設對話方塊過程的消息或通知。
語法
參數
【hdlg】處理消息所針對的顏色對話方塊視窗。【uiMsg】標識正在接收的消息。【wParam中】指定有關該消息的附加資訊。具體含義取決於【uiMsg】參數的值。【lParam的】指定有關該消


-------------------------------------------------------- KeyGTK3Win32CFHookProc ----
CFHookProc    一個CFHookProc掛接過程是一個應用程式定義或庫定義的回檔過程，它與Font Common對話方塊一起使用。掛鉤過程接收預設對話方塊過程的消息或通知。
語法
參數
【hdlg】處理到消息所針對的字體對話方塊視窗。【uiMsg】標識正在接收的消息。【wParam中】指定有關該消息的附加資訊。具體含義取決於【uiMsg】參數的值。【lParam的】指定有關該


-------------------------------------------------------- KeyGTK3Win32ChangeClipboardChain ----
ChangeClipboardChain    ChangeClipboardChain函數從剪貼板檢視器鏈中刪除指定的視窗。
語法
參數
【hWndRemove】標識要從鏈中刪除的窗口。必須將控制碼傳遞給SetClipboardViewer函數。【hWndNewNext】標識剪貼板檢視器鏈中【hWndRemove】視窗之後的視窗


-------------------------------------------------------- KeyGTK3Win32ChangeDisplaySettings ----
ChangeDisplaySettings    ChangeDisplaySettings函數將顯示設定更改為指定的圖形模式。
語法
參數
【lpDevMode】指向DEVMODE結構的指標，描述要切換到的圖形模式。dmsiz到成員必須初始化為DEVMODE結構的大小（以位元組為單位）。使用DEVMODE結構中的以下欄位：會員含義


-------------------------------------------------------- KeyGTK3Win32ChangeMenu ----
ChangeMenu    ChangeMenu函數已被以下專用函數取代，這些函數在Windows NT和Windows 95上均可用：函數描述AppendMenu將功能表項目添加到菜單的末尾。InsertMenu將功能表項目插入到菜單中。ModifyMenu修改功能表中的功能表項目。RemoveMenu從菜單中刪除功能表項目;如果是彈出式項目，相應的彈出式菜單將被破壞（989796034）。
Windows 95：而不是使用AppendMenu，InsertMenu和ModifyMenu，專門為Window 95編寫的應用程式應該使用以下新函數，這些函數僅在Windows 95上可用。函數描述GetMenuItemInfo獲取有關功能表項目的資訊。InsertMenuItem在功能表列或彈出功能表中的指定位置插入新的功能表項目。SetMenuItemInfo更改有關功能表項目的資訊。
為Windows 3.0之前版本編寫的應用程式可以繼續調用ChangeMenu.為Windows 3.0或更高版本編寫的應用程式應調用這些新函數。


-------------------------------------------------------- KeyGTK3Win32ChangeServiceConfig ----
ChangeServiceConfig    ChangeServiceConfig函數可更改服務的配置參數。
語法
參數
【hService】標識服務。該控制碼由OpenService或CreateService函數返回，必須具有SERVICE_CHANGE_CONFIG存取權限。【dwServiceType】一


-------------------------------------------------------- KeyGTK3Win32CharLower ----
CharLower    CharLower函數將字串或單個字元轉換為小寫。如果運算元是字串，則該函數將字元轉換到位。此函數取代AnsiLower函數。
語法
參數
【lpsz】指向以空值終止的字串或指定單個字元。如果此參數的高位字為零，則低位字必須包含要轉換的單個字元。
返回值
如果運算元是字串，該函數將返回一個指向轉換字串的指標。由於字串


-------------------------------------------------------- KeyGTK3Win32CharLowerBuff ----
CharLowerBuff    CharLowerBuff函數將緩衝區中的大寫字元轉換為小寫字元。該函數將字元轉換到位。該函數取代AnsiLowerBuff函數。
語法
參數
【lpsz】指向包含一個或多個要處理的字元的緩衝區。【cchLength】指定由【lpsz】指向的緩衝區的大小（以位元組為單位（ANSI版本）或字元（Unicode版本））。該函數檢查每個字元


-------------------------------------------------------- KeyGTK3Win32CharNext ----
CharNext    CharNext函數返回一個指向字串中下一個字元的指標。此函數取代AnsiNext函數。
語法
參數
【lpsz】指向以空字元結尾的字串中的字元。
返回值
如果函數成功，則返回值是指向字串中下一個字元的指標，如果在字串末尾則返回到終止空字元。如果【lpsz】指向終止空字元，則返回值


-------------------------------------------------------- KeyGTK3Win32CharNextExA ----
CharNextExA    [Now Supported on Windows NT]CharNextExA函數檢索指向字串中下一個字元的指標。此函數可以處理由單字節或多位元組字元組成的字串。
語法
參數
【CodePage】用於檢查前置位元組範圍的內碼表的識別字。可以是Unicode和字元集常量中的“內碼表識別字”表中提供的內碼表值之一或以下預定義值之一：值含義0使用系統預設的ANSI內碼表。


-------------------------------------------------------- KeyGTK3Win32CharPrev ----
CharPrev    CharPrev函數返回一個指向字串中前一個字元的指標。此函數取代AnsiPrev函數。
語法
參數
【lpszStart】指向字串的開頭。【lpszCurrent】指向以空字元結尾的字串中的字元。
返回值
如果函數成功，則返回值是指向字串中前一個字元的指標，如果【lpszCurr


-------------------------------------------------------- KeyGTK3Win32CharPrevExA ----
CharPrevExA    [Now Supported on Windows NT]CharPrevExA函數檢索指向字串中前一個字元的指標。此函數可以處理由單字節或多位元組字元組成的字串。
語法
參數
【CodePage】用於檢查前置位元組範圍的內碼表的識別字。可以是Unicode和字元集常量中的“內碼表識別字”表中提供的內碼表值之一或以下預定義值之一：值含義0使用系統預設的ANSI內碼表。


-------------------------------------------------------- KeyGTK3Win32CharToOem ----
CharToOem    CharToOem函數將字串轉換為OEM定義的字元集。（OEM代表原始設備製造商。）此函數取代AnsiToOem函數。
語法
參數
【lpszSrc】指向要終止字串的空值。【lpszDst】指向緩衝區的翻譯字串。如果CharToOem函數用作ANSI函數，則可以通過將【lpszDst】參數設置為與【lpszSrc】參


-------------------------------------------------------- KeyGTK3Win32CharToOemBuff ----
CharToOemBuff    CharToOemBuff函數將字串中指定數量的字元轉換為OEM定義的字元集。（OEM代表原始設備製造商。）此函數取代AnsiToOemBuff函數。
語法
參數
【lpszSrc】指向要終止字串的空值。【lpszDst】指向緩衝區的翻譯字串。如果CharToOemBuff函數用作ANSI函數，則可以通過將【lpszDst】參數設置為與【lpszS


-------------------------------------------------------- KeyGTK3Win32CharUpper ----
CharUpper    CharUpper函數將字串或單個字元轉換為大寫。如果運算元是字串，則該函數將字元轉換到位。此函數取代AnsiUpper函數。
語法
參數
【lpsz】指向以空值終止的字串或指定單個字元。如果此參數的高位字為零，則低位字必須包含要轉換的單個字元。
返回值
如果運算元是字串，該函數將返回一個指向轉換字串的指標。由於字串


-------------------------------------------------------- KeyGTK3Win32CharUpperBuff ----
CharUpperBuff    CharUpperBuff函數將緩衝區中的小寫字元轉換為大寫字元。該函數將字元轉換到位。該函數取代AnsiUpperBuff函數。
語法
參數
【lpsz】指向包含一個或多個要處理的字元的緩衝區。【cchLength】指定由【lpsz】指向的緩衝區的大小（以位元組為單位（ANSI版本）或字元（Unicode版本））。該函數檢查每個字元


-------------------------------------------------------- KeyGTK3Win32CheckColorsInGamut ----
CheckColorsInGamut    CheckColorsInGamut函數指示指定的顏色值是否在指定設備的色域內。
語法
參數
【HDC】處理設備上下文。【lpaRGBQuad】指向包含要檢查的顏色值的RGBQUAD結構陣列的陣列。【lpResult】指向接收顏色檢查結果的位元組陣列的指標。【NCOUNT】陣列中的元素


-------------------------------------------------------- KeyGTK3Win32CheckDlgButton ----
CheckDlgButton    CheckDlgButton函數更改按鈕控制項的檢查狀態。
語法
參數
【hDlg】標識包含該按鈕的對話方塊。【nIDButton】標識要修改的按鈕。【uCheckig】指定按鈕的檢查狀態。此參數可以是以下值之一：值含義BST_CHECKED設置按鈕狀態以進行檢查


-------------------------------------------------------- KeyGTK3Win32CheckMenuItem ----
CheckMenuItem    CheckMenuItem函數將指定功能表項目的核取記號屬性的狀態設置為已選中或未選中。SetMenuItemInfo函數已被SetMenuItemInfo函數取代。但是，如果您不需要SetMenuItemInfo的任何擴展函數，您仍然可以使用CheckMenuItem.
語法
參數
【HMENU】識別感興趣的菜單。【uIDCheckItem】指定由【uCheckig】參數確定的要設置其核取記號屬性的功能表項目。【uCheckig】指定控制【uIDCheckItem】參數的解


-------------------------------------------------------- KeyGTK3Win32CheckMenuRadioItem ----
CheckMenuRadioItem    [Now Supported on Windows NT]CheckMenuRadioItem函數檢查指定的功能表項目，並將其設置為無線電專案。同時，該函數取消選中關聯組中的所有其他功能表項目，並清除這些專案的無線電專案類型標誌。
語法
參數
【HMENU】處理到包含一組功能表項目的功能表。【idCheck】組中第一個功能表項目的識別字或位置。【Handle to the menu that contains the group of me


-------------------------------------------------------- KeyGTK3Win32CheckRadioButton ----
CheckRadioButton    CheckRadioButton函數將添加一個核取記號（檢查）組中的指定選項按鈕，並從組（清除）組中的所有其他選項按鈕中刪除一個核取記號。
語法
參數
【hDlg】標識包含選項按鈕的對話方塊。【nIDFirstButton】指定組中第一個選項按鈕的識別字。【nIDLastButton】指定組中最後一個選項按鈕的識別字。【nIDCheckBut


-------------------------------------------------------- KeyGTK3Win32ChildWindowFromPoint ----
ChildWindowFromPoint    ChildWindowFromPoint函數確定屬於父視窗的子視窗（如果有）包含指定的點。
語法
參數
【hWndParent】標識父視窗。【點】指定定義要檢查點的用戶端座標的POINT結構。
返回值
如果函數成功，則返回值是包含該點的子視窗的控制碼，即使子視窗被隱藏或禁用。如果該點位於父窗


-------------------------------------------------------- KeyGTK3Win32ChildWindowFromPointEx ----
ChildWindowFromPointEx    [Now Supported on Windows NT]ChildWindowFromPointEx函數確定屬於指定父視窗的子視窗（如果有）包含指定的點。該函數可以忽略不可見，禁用和透明的子窗口。
語法
參數
【hwndParent】標識父視窗。【pt】指定定義要檢查點的用戶端座標的POINT結構。【uFlags】指定要跳過的子視窗。此參數可以是以下值的組合：值含義CWP_ALL不要跳過任何子窗口


-------------------------------------------------------- KeyGTK3Win32ChooseColor ----
ChooseColor    ChooseColor函數創建一個“顏色常用”對話方塊，使用戶可以選擇顏色。
語法
參數
【LPCC】指向CHOOSECOLOR結構的指標，其中包含用於初始化對話方塊的資訊。當ChooseColor返回時，此結構包含有關使用者顏色選擇的資訊。
返回值
如果用戶按一下對話方塊的“確定”


-------------------------------------------------------- KeyGTK3Win32ChooseFont ----
ChooseFont    ChooseFont函數創建一個字體公共對話方塊，使對話方塊能夠為使用者選擇邏輯字體的屬性。這些屬性包括字體名稱，樣式（粗體，斜體或常規），點大小，效果（底線，刪除和文本顏色）以及腳本（或字元集）。
語法
參數
【lpcf】指向CHOOSEFONT結構的指標，其中包含用於初始化對話方塊的資訊。當ChooseFont返回時，此結構包含有關使用者字體選擇的資訊。
返回值
如果使用者按一下對話方塊的“確定”按鈕


-------------------------------------------------------- KeyGTK3Win32Chord ----
和絃    弦函數繪製一個和絃（由橢圓和線段的交點界定的區域，稱為“割線”）。通過使用當前筆並使用當前畫筆來填充弦。BOOL Chord(HDC 【HDC】,//處理設備上下文INT 【nLeftRect】,//邊界矩形左上角的x座標INT 【nTopRect】,//邊界矩形左上角的y座標INT 【nRightRect】,//邊界矩形右下角的x座標INT 【nBottomRect】,//邊界矩形右下角的y座標INT 【nXRadial1】,//第一個徑向端點的x座標INT 【nYRadial1】,//第一個徑向端點的y座標INT 【nXRadial2】,//第二個徑向端點的x座標INT 【nYRadial2】//第二個徑向端點的y座標);
參數
【HDC】標識和絃出現的設備上下文。【nLeftRect】指定邊界矩形左上角的x座標。【nTopRect】指定邊界矩形左上角的y座標。【nRightRect】指定邊界矩形右下角的x座標。【n


-------------------------------------------------------- KeyGTK3Win32ClearCommBreak ----
ClearCommBreak    ClearCommBreak函數恢復指定通信設備的字元傳輸，並將傳輸線路置於非斷開狀態。
語法
參數
【HFILE】識別通信設備。CreateFile函數返回此控制碼。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描


-------------------------------------------------------- KeyGTK3Win32ClearCommError ----
ClearCommError    ClearCommError函數檢索有關通信錯誤的資訊，並報告通信設備的當前狀態。當發生通信錯誤時調用此函數，並清除設備的錯誤標誌以啟用其他輸入和輸出（I / O）操作。
語法
參數
【HFILE】識別通信設備。CreateFile函數返回此控制碼。【// pointer to variable to receive error codes】指向一個32位元變數以填充指示錯誤


-------------------------------------------------------- KeyGTK3Win32ClearEventLog ----
ClearEventLog    ClearEventLog函數可清除指定的事件日誌，並可選擇將日誌檔的當前副本保存到備份檔案。
語法
參數
【hEventLog】標識要清除的事件日誌。該控制碼由OpenEventLog函數返回。【lpBackupFileName】指向以null結尾的字串，指定將放置事件日誌檔的當前副本的檔的


-------------------------------------------------------- KeyGTK3Win32ClientToScreen ----
ClientToScreen    ClientToScreen函數將指定點的用戶端座標轉換為螢幕座標。
語法
參數
【的hWnd】標識用戶端區域用於轉換的視窗。【LPPOINT】指向包含要轉換的用戶端座標的POINT結構。如果函數成功，新螢幕座標將被複製到此結構中。
返回值
如果函數成功，返回值不為零


-------------------------------------------------------- KeyGTK3Win32ClipCursor ----
ClipCursor    ClipCursor函數將游標限定在螢幕上的矩形區域。如果隨後的游標位置（由SetCursorPos函數或滑鼠設置）位於矩形外部，Windows將自動調整位置以將游標保持在矩形區域內。
語法
參數
【LPRC】指向包含限定矩形左上角和右下角的螢幕座標的RECT結構。如果此參數為NULL，則游標可自由移動到螢幕上的任何位置。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為


-------------------------------------------------------- KeyGTK3Win32CloseClipboard ----
CloseClipboard    CloseClipboard函數關閉剪貼板。
語法
參數
此函數無參數。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
當視窗完成檢查或更改剪貼板時，通過調用Clo


-------------------------------------------------------- KeyGTK3Win32CloseDesktop ----
CloseDesktop    CloseDesktop函數關閉桌面物件的打開控制碼。桌面是包含在視窗站物件內的安全物件。桌面具有邏輯顯示面，並包含視窗，功能表和掛鉤。
語法
參數
【//分配給該執行緒的桌面的控制碼】標識要關閉的桌面。該控制碼由CreateDesktop和OpenDesktop函數返回。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲


-------------------------------------------------------- KeyGTK3Win32CloseEnhMetaFile ----
CloseEnhMetaFile    CloseEnhMetaFile函數關閉增強型圖中繼檔設備上下文，並返回一個標識增強格式的圖中繼檔的控制碼。
語法
參數
【HDC】標識增強型圖中繼檔設備上下文。
返回值
如果函數成功，則返回值是增強圖中繼檔的控制碼。如果函數失敗，返回值為NULL。
描述
應用程式可以使用CloseEnhMetaFile


-------------------------------------------------------- KeyGTK3Win32CloseEventLog ----
CloseEventLog    CloseEventLog函數關閉指定的事件日誌。
語法
參數
【hEventLog】標識要關閉的事件日誌。該控制碼由OpenEventLog函數返回。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLa


-------------------------------------------------------- KeyGTK3Win32CloseFigure ----
CloseFigure    CloseFigure函數關閉路徑中的開放數位。
語法
參數
【HDC】標識圖形將關閉的設備上下文。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
CloseFigur


-------------------------------------------------------- KeyGTK3Win32CloseHandle ----
CloseHandle    CloseHandle函數關閉一個打開的物件控制碼。
語法
參數
【hObject】標識一個打開的物件控制碼。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
CloseHan


-------------------------------------------------------- KeyGTK3Win32CloseMetaFile ----
CloseMetaFile    CloseMetaFile函數關閉中繼檔設備上下文並返回一個標識Windows格式的中繼檔的控制碼。提供此函數以相容早期版本的Microsoft Windows。基於Win32的應用程式應使用CloseEnhMetaFile函數。
語法
參數
【HDC】標識用於創建Windows格式的中繼檔的圖中繼檔設備上下文。
返回值
如果函數成功，則返回值是Windows格式的圖中繼檔的控制碼。如果函數失敗，返回值為NULL。
描述
W


-------------------------------------------------------- KeyGTK3Win32ClosePrinter ----
ClosePrinter    ClosePrinter函數關閉指定的印表機物件。
語法
參數
【hPrinter】處理印表機物件要關閉。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
當ClosePr


-------------------------------------------------------- KeyGTK3Win32CloseServiceHandle ----
CloseServiceHandle    CloseServiceHandle函數會關閉OpenSCManager函數返回的服務控制管理器資料庫的控制碼，或者關閉OpenService或CreateService函數返回的服務物件的控制碼。
語法
參數
【hSCObject】標識要關閉的服務控制管理器資料庫或服務物件。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.錯誤


-------------------------------------------------------- KeyGTK3Win32CloseWindow ----
CloseWindow    CloseWindow函數最小化（但不會破壞）指定的視窗。
語法
參數
【的hWnd】標識要最小化的視窗。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
通過將視窗縮小到圖示的大


-------------------------------------------------------- KeyGTK3Win32CloseWindowStation ----
CloseWindowStation    CloseWindowStation函數關閉一個打開的視窗工位元控制碼。
語法
參數
【hWinSta】識別要關閉的視窗站。該控制碼由CreateWindowStation和OpenWindowStation函數返回。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回


-------------------------------------------------------- KeyGTK3Win32ColorMatchToTarget ----
ColorMatchToTarget    ColorMatchToTarget函數可以啟用或禁用指定設備上下文的預覽。啟用預覽時，會顯示指定設備上下文的後續輸出中的顏色，因為它們將顯示在目標設備上。這對於檢查目標在圖像中映射指定顏色的效果非常有用。要啟用預覽，必須為目標和預覽設備上下文啟用影像色彩調配。
語法



-------------------------------------------------------- KeyGTK3Win32CombineRgn ----
CombineRgn    CombineRgn函數組合兩個區域，並將結果存儲在第三個區域。兩個區域根據指定的模式組合。
語法
參數
【hrgnDesten】標識通過組合其他兩個區域定義尺寸的新區域。（該地區必須在調用CombineRgn之前存在。）【hrgnSrc1】標識要組合的兩個區域中的第一個。【hrgnSrc2】標


-------------------------------------------------------- KeyGTK3Win32CombineTransform ----
CombineTransform    CombineTransform函數將兩個世界空間與頁面空間轉換相連接。
語法
參數
【lpxformResult】指向接收組合轉換的XFORM結構。【lpxform1】指向XFORM結構的第一個轉換。【lpxform2】指向XFORM結構的第二個轉換。
返回值
如果函數


-------------------------------------------------------- KeyGTK3Win32CommandLineToArgvW ----
CommandLineToArgvW    CommandLineToArgvW函數解析一個寬字元的Unicode命令列字串。它返回一個指向一組寬字元Unicode參數字串和參數計數的指標，類似於標準C運行時ARGV和ARGC值。該函數提供了一種從Unicode命令列字串獲取Unicode集ARGV和ARGC值的方法。
語法
參數
【lpCmdLine】指向空終止的Unicode命令列字串。應用程式通常會直接傳遞給GetCommandLineW的調用返回的值。【*pNumArgs】指向函數設置為解析參數計數的整數變數


-------------------------------------------------------- KeyGTK3Win32CommConfigDialog ----
CommConfigDialog    CommConfigDialog函數顯示驅動程式提供的配置對話方塊。
語法
參數
【lpszName】指向以空字元結尾的字串，指定應顯示對話方塊的設備的名稱。【的hWnd】標識擁有該對話方塊的視窗。該參數可以是任何有效的視窗控制碼，如果對話方塊沒有所有者，則該參數應為NULL。


-------------------------------------------------------- KeyGTK3Win32CommDlgExtendedError ----
CommDlgExtendedError    CommDlgExtendedError函數返回一個常見的對話方塊錯誤代碼。此代碼指示在執行以下常見對話方塊函數之一期間發生的最新錯誤：ChooseColorGetOpenFileNameChooseFontGetSaveFileNameFindTextPrintDlgReplaceTextPageSetupDlg
語法
參數
此函數無參數。
返回值
如果對公共對話方塊函數的最近調用成功，則返回值未定義。如果普通對話方塊函數返回FALSE，因為使用者關閉或取消對話方塊，返回值為零。否則，返回值是非零的錯誤代碼。有關詳細


-------------------------------------------------------- KeyGTK3Win32CompareFileTime ----
CompareFileTime    CompareFileTime函數可比較兩個64位檔時間。
語法
參數
【lpFileTime1】指向指定第一個64位元檔時間的FILETIME結構。【lpFileTime2】指向FILETIME結構的第二個64位元檔時間。
返回值
如果函數成功，則返回值為


-------------------------------------------------------- KeyGTK3Win32CompareString ----
CompareString    CompareString函數將使用由給定識別字指定的區域設置作為比較的基礎來比較兩個字串。
語法
參數
【語言環境】指定用於比較的區域設置。此參數可以是以下預定義的地區設定識別碼之一：值含義LOCALE_SYSTEM_DEFAULT系統的預設語言環境。LOCALE_USER_DEFAULT當前


-------------------------------------------------------- KeyGTK3Win32ConfigurePort ----
ConfigurePort    ConfigurePort函數顯示指定伺服器埠的埠配置對話方塊。
語法
參數
【PNAME】指向一個以null結尾的字串，指定指定埠所在的伺服器的名稱。如果此參數為NULL，埠為本地埠。【的hWnd】標識埠配置對話方塊的父視窗。【pPortName】指向一個以


-------------------------------------------------------- KeyGTK3Win32ConnectNamedPipe ----
ConnectNamedPipe    ConnectNamedPipe函數使具名管道伺服器進程能夠等待用戶端進程連接到具名管道的實例。用戶端進程通過調用CreateFile或CallNamedPipe 函數進行連接。
語法
參數
【hNamedPipe】標識具名管道實例的伺服器端。該控制碼由CreateNamedPipe函數返回。【lpOverlapped的】指向OVERLAPPED結構。
返回值
如果函數成功，返


-------------------------------------------------------- KeyGTK3Win32ConnectToPrinterDlg ----
ConnectToPrinterDlg    ConnectToPrinterDlg函數顯示一個對話方塊，讓使用者流覽和連接到網路上的印表機。如果使用者選擇印表機，該函數將嘗試創建一個連接;如果伺服器上沒有安裝合適的驅動程式，則可以向使用者提供在本地創建印表機的選項。
語法
參數
【HWND】指定對話方塊的父視窗。【旗】此參數保留供將來使用。將其設置為零。
返回值
如果函數成功並且使用者選擇印表機，則返回值是所選印表機的控制碼。如果函數失敗，或者使用者在不選擇印表機的情況


-------------------------------------------------------- KeyGTK3Win32ContinueDebugEvent ----
ContinueDebugEvent    ContinueDebugEvent函數使調試器能夠繼續先前報告調試事件的執行緒。
語法
參數
【dwProcessId】標識要繼續的過程。【dwThreadId】標識要繼續的執行緒。進程識別字和執行緒識別字的組合必須標識先前已報告調試事件的執行緒。【dwContinueStatus】指定如


-------------------------------------------------------- KeyGTK3Win32ControlService ----
ControlService    ControlService函數將控制代碼發送到Win32服務。
語法
參數
【hService】標識服務。該控制碼由OpenService或CreateService函數返回。此控制碼所需的訪問取決於所請求的【dwControl】代碼。【dwControl】指定所請求的


-------------------------------------------------------- KeyGTK3Win32ConvertDefaultLocale ----
ConvertDefaultLocale    ConvertDefaultLocale函數將特殊的預設語言環境值轉換為實際的語言環境識別字。
語法
參數
【語言環境】函數轉換為實際地區設定識別碼的特殊預設區域設置值。以下清單顯示特殊的預設語言環境值：值描述LOCALE_SYSTEM_DEFAULT系統的預設語言環境。LOCALE_USER_D


-------------------------------------------------------- KeyGTK3Win32ConvertThreadToFiber ----
ConvertThreadToFiber    ConvertTheadToFiber函數將當前執行緒轉換為光纖。您必須將執行緒轉換為光纖，然後再安排其他光纖。LPVOID ConvertThreadToFiber（LPVOID 【lpParameter參數】//新光纖的光纖資料);
參數
【lpParameter參數】指定傳遞給光纖的單個變數。光纖可以使用GetFiberData 函數檢索該值。
返回值
如果函數成功，返回值就是光纖的位址。如果函數失敗，返回值為NULL。


-------------------------------------------------------- KeyGTK3Win32CopyAcceleratorTable ----
CopyAcceleratorTable    CopyAcceleratorTable函數複製指定的加速器表。該函數用於獲取與加速器表控制碼相對應的加速器表資料，或用於確定加速器表資料的大小。
語法
參數
【hAccelSrc】標識要複製的加速器表。【lpAccelDst】指向要複製加速器表資訊的ACCEL結構陣列。【cAccelEntries】指定要複製到【lpAccelDst】參數指向的緩


-------------------------------------------------------- KeyGTK3Win32CopyCursor ----
CopyCursor    CopyCursor函數複製游標。
語法
參數
【pcur】標識要複製的游標。
返回值
如果函數成功，則返回值是複製游標的控制碼。如果函數失敗，返回值為NULL。要獲取擴展錯誤資訊，請調用GetLastError.
描述
CopyC


-------------------------------------------------------- KeyGTK3Win32CopyEnhMetaFile ----
CopyEnhMetaFile    CopyEnhMetaFile函數將增強格式的中繼檔的內容複製到指定的檔。
語法
參數
【hemfSrc】標識源增強圖中繼檔。【lpszFile】指向目的地檔的名稱。如果此參數為NULL，則源圖中繼檔將被複製到記憶體中。
返回值
如果函數成功，則返回值是增強圖中繼檔副本的句


-------------------------------------------------------- KeyGTK3Win32CopyFile ----
CopyFile    CopyFile函數將現有檔複製到新檔。
語法
參數
【lpExistingFileName】指向以空字元結尾的字串，指定現有檔的名稱。【lpNewFileName】指向以空字元結尾的字串，指定新檔的名稱。【bFailIfExists】


-------------------------------------------------------- KeyGTK3Win32CopyFileEx ----
CopyFileEx    [New - Windows NT]CopyFileEx函數將現有檔複製到新檔。此函數保留擴展屬性，OLE結構化存儲，NTFS備用資料流程和檔案屬性。現有檔的安全屬性不會複製到新檔中。
語法
參數
【lpExistingFileName】指向以空字元結尾的字串，指定現有檔的名稱。【lpNewFileName】指向以空字元結尾的字串，指定新檔的名稱。【lpProgressRout


-------------------------------------------------------- KeyGTK3Win32CopyIcon ----
CopyIcon    CopyIcon函數將指定的圖示從另一個模組複製到當前模組。
語法
參數
【惠康】標識要複製的圖示。
返回值
如果函數成功，則返回值是複製圖示的控制碼。如果函數失敗，返回值為NULL。要獲取擴展錯誤資訊，請調用GetLastError.
描述
CopyIco


-------------------------------------------------------- KeyGTK3Win32CopyImage ----
CopyImage    CopyImage函數創建一個新圖像（圖示，游標或點陣圖），並將指定圖像的屬性複製到新圖像。如果需要，該函數將該位元延伸以適應新圖像的所需大小。
語法
參數
【HINST】標識包含要複製的圖像的模組的實例。【UTYPE】指定要複製的圖像的類型。此參數可以是以下值之一：值含義IMAGE_BITMAP複製點陣圖。IMAGE_CURSOR複製游標。IMA


-------------------------------------------------------- KeyGTK3Win32CopyLZFile ----
CopyLZFile      CopyLZFile函數已過時。它僅用於與16位版本的Windows相容。對於基於Win32的應用程式，請使用LZCopy函數。


-------------------------------------------------------- KeyGTK3Win32CopyMemory ----
CopyMemory    CopyMemory函數將一個區塊從一個位置複製到另一個位置。
語法
參數
【目的地】指向複製塊目標的起始位址。【資源】指向要複製的區塊的起始位址。【長度】指定要複製的區塊的大小（以位元組為單位）。
返回值
該函數沒有返回值。
描述
如果源和目標塊重疊，則


-------------------------------------------------------- KeyGTK3Win32CopyMetaFile ----
CopyMetaFile    CopyMetaFile函數將Windows格式的中繼檔的內容複製到指定的檔。此函數用於與16位元版本的Windows相容。基於Win32的應用程式應使用CopyEnhMetaFile函數。
語法
參數
【hmfSrc】標識源Windows格式的圖中繼檔。【lpszFile】指向目的地檔的名稱。如果此參數為NULL，則源圖中繼檔將被複製到記憶體中。
返回值
如果函數成功，則返回值是Win


-------------------------------------------------------- KeyGTK3Win32CopyProgressRoutine ----
CopyProgressRoutine    [New - Windows NT]當CopyFileEx啟動的部分複製操作完成時，將調用CopyProgressRoutine函數。此函數是一個應用程式定義的回檔常式。
語法
參數
【TotalFileSize】檔的總大小（以位元組為單位）。【TotalBytesTransferred】自複製操作開始以來，從原始檔案傳輸到目的檔案的總位元組數。【StreamSize】當前文


-------------------------------------------------------- KeyGTK3Win32CopyRect ----
CopyRect    CopyRect函數將一個矩形的座標複製到另一個矩形。
語法
參數
【lprcDst】指向將接收源矩形的邏輯座標的RECT結構。【lprcSrc】指向要複製座標的RECT結構。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤


-------------------------------------------------------- KeyGTK3Win32CopySid ----
CopySid    CopySid函數將安全性識別碼（SID）複製到緩衝區。
語法
參數
【nDestinationSidLength】指定接收SID副本的緩衝區的長度（以位元組為單位）。【pDestinationSid】指向緩衝區，接收來源SID結構的副本。【pSourceSid


-------------------------------------------------------- KeyGTK3Win32CountClipboardFormats ----
CountClipboardFormats    CountClipboardFormats函數檢索剪貼板上當前不同資料格式的數量。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是剪貼板上當前不同資料格式的數量。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32CPlApplet ----
CPlApplet  CPlApplet函數是一個庫定義的回呼函數，用作控制台應用程式的入口點。
語法



-------------------------------------------------------- KeyGTK3Win32CreateAcceleratorTable ----
CreateAcceleratorTable    CreateAcceleratorTable函數創建一個加速表。
語法
參數
【Lpaklit】指向描述加速器表的ACCEL結構的陣列。【cEntries】指定陣列中ACCEL個結構的數量。
返回值
如果函數成功，則返回值是創建的加速器表的控制碼;否則為NULL。



-------------------------------------------------------- KeyGTK3Win32CreateBitmap ----
CreateBitmap    CreateBitmap函數創建一個具有指定寬度，高度和顏色格式（每個圖元的顏色平面和位元）的點陣圖。
語法
參數
【nWidth】指定點陣圖寬度（以圖元為單位）。【nHeight參數】指定點陣圖高度（以圖元為單位）。【// XOR位元遮罩中的平面數】指定設備使用的色平面數。【cBitsPerPel】指定識別單


-------------------------------------------------------- KeyGTK3Win32CreateBitmapIndirect ----
CreateBitmapIndirect    CreateBitmapIndirect函數創建一個具有指定寬度，高度和顏色格式（每個圖元的顏色平面和位元）的點陣圖。
語法
參數
【LPBM】指向包含點陣圖資訊的BITMAP結構。如果應用程式將bmWidth或bmHeight成員設置為零，CreateBitmapIndirect將返回1到1圖元的單色點陣圖的控制碼。
返回


-------------------------------------------------------- KeyGTK3Win32CreateBrushIndirect ----
CreateBrushIndirect    CreateBrushIndirect函數創建一個具有指定樣式，顏色和模式的邏輯畫筆。
語法
參數
【lplb】指向包含有關畫筆資訊的LOGBRUSH結構。
返回值
如果函數成功，則返回值標識一個邏輯畫筆。如果函數失敗，返回值為NULL。
描述
刷子是Windows用於繪製填充形狀


-------------------------------------------------------- KeyGTK3Win32CreateCaret ----
CreateCaret    CreateCaret函數為系統插入符創建一個新形狀，並將插入符的所有權分配給指定的視窗。插入符號形狀可以是線，塊或點陣圖。
語法
參數
【的hWnd】標識擁有插入符號的視窗。【HBITMAP】標識定義插入符號形狀的點陣圖。如果此參數為NULL，則插入符號是固定的。如果此參數為（HBITMAP）1，則插入符號為灰色。如果此參數是


-------------------------------------------------------- KeyGTK3Win32CreateColorSpace ----
CreateColorSpace    CreateColorSpace函數創建邏輯顏色空間。
語法
參數
【lpLogColorSpace】指向LOGCOLORSPACE結構。
返回值
如果函數成功，則返回值是標識邏輯顏色空間的控制碼。如果函數失敗，返回值為NULL。
描述
當您不再需要色


-------------------------------------------------------- KeyGTK3Win32CreateCompatibleBitmap ----
CreateCompatibleBitmap    CreateCompatibleBitmap函數創建與與指定設備上下文關聯的設備相容的點陣圖。
語法
參數
【HDC】標識設備上下文。【nWidth】指定點陣圖寬度（以圖元為單位）。【nHeight參數】指定點陣圖高度（以圖元為單位）。
返回值
如果函數成功，則返回值是點陣圖的控制碼。如果函數失敗，返


-------------------------------------------------------- KeyGTK3Win32CreateCompatibleDC ----
CreateCompatibleDC    CreateCompatibleDC函數創建與指定設備相容的記憶體設備上下文（DC）。
語法
參數
【HDC】標識設備上下文。如果此控制碼為NULL，則該函數將創建與應用程式當前螢幕相容的記憶體設備上下文。
返回值
如果函數成功，則返回值是記憶體設備上下文的控制碼。如果函數失敗，返回值為NU


-------------------------------------------------------- KeyGTK3Win32CreateConsoleScreenBuffer ----
CreateConsoleScreenBuffer    CreateConsoleScreenBuffer函數創建一個控制台螢幕緩衝區並返回一個控制碼。
語法
參數
【dwDesiredAccess】指定對控制台螢幕緩衝區的所需訪問。此參數可以是以下值之一或兩者：值含義GENERIC_READ請求存取控制台螢幕緩衝區，使進程能夠從緩衝區讀取資料。GENE


-------------------------------------------------------- KeyGTK3Win32CreateCursor ----
CreateCursor    CreateCursor函數創建具有指定大小，位元模式和熱點的游標。
語法
參數
【HINST】標識創建游標的應用程式的當前實例。【xHotSpot】指定游標熱點的水準位置。【yHotSpot】指定游標熱點的垂直位置。【nWidth】指定游標的寬度（以圖元為單位）。【nH


-------------------------------------------------------- KeyGTK3Win32CreateDC ----
CreateDC    CreateDC函數通過使用指定的名稱為設備創建設備上下文（DC）。
語法
參數
【lpszDriver】為早期版本的Windows編寫的應用程式使用此參數指定設備驅動程式的檔案名（無副檔名）。Windows 95：在基於Win32的應用程式中，此參數將被忽略，並且應為N


-------------------------------------------------------- KeyGTK3Win32CreateDesktop ----
CreateDesktop    CreateDesktop函數在與調用進程相關聯的視窗工作站上創建一個新的桌面。它返回一個可用於訪問新桌面的控制碼。調用進程必須具有關聯的視窗工作站，由系統在進程創建時分配或由SetProcessWindowStation設置。桌面是包含在視窗站物件內的安全物件。桌面具有邏輯顯示面，包含視窗，功能表和掛鉤。
語法
參數
【lpszDesktop】指向一個以null結尾的字串，指定要創建的桌面的名稱。桌面名稱不區分大小寫，不得包含反斜線字元（\\）。【lpszDevice】保留;桌面使用在引導時載入的默認顯


-------------------------------------------------------- KeyGTK3Win32CreateDialog ----
CreateDialog    CreateDialog巨集從對話方塊範本資源創建無強制回應對話方塊。CreateDialog巨集使用CreateDialogParam函數。
語法
參數
【的hInstance】標識可執行檔包含對話方塊範本的模組實例。【lpTemplate】標識對話方塊範本。該參數是指向空值終止的字串的指標，該字串指定對話方塊範本的名稱或指定對話方塊範本的資源


-------------------------------------------------------- KeyGTK3Win32CreateDialogIndirect ----
CreateDialogIndirect    CreateDialogIndirect巨集從記憶體中的對話方塊範本創建無強制回應對話方塊。CreateDialogIndirect巨集使用CreateDialogIndirectParam函數。
語法
參數
【的hInstance】標識創建對話方塊的模組的實例。【lpTemplate】指向包含CreateDialogIndirect用於創建對話方塊的範本的全域記憶體物件。對話方塊範本由描述該對話方塊的標題


-------------------------------------------------------- KeyGTK3Win32CreateDialogIndirectParam ----
CreateDialogIndirectParam    CreateDialogIndirectParam函數從記憶體中的對話方塊範本創建一個無強制回應對話方塊。在顯示對話方塊之前，該函數將應用程式定義的值傳遞給對話方塊過程作為WM_INITDIALOG消息的【lParam的】參數。應用程式可以使用此值初始化對話方塊控制項。
語法
參數
【的hInstance】標識將創建對話方塊的模組的實例。【lpTemplate】指向包含CreateDialogIndirectParam用於創建對話方塊的範本的全域記憶體物件。對話方塊範本由描述該


-------------------------------------------------------- KeyGTK3Win32CreateDialogParam ----
CreateDialogParam    CreateDialogParam函數從對話方塊範本資源創建無強制回應對話方塊。在顯示對話方塊之前，該函數將應用程式定義的值傳遞給對話方塊過程作為WM_INITDIALOG消息的【lParam的】參數。應用程式可以使用此值初始化對話方塊控制項。
語法
參數
【的hInstance】標識可執行檔包含對話方塊範本的模組實例。【lpTemplateName】標識對話方塊範本。該參數是指向空值終止的字串的指標，該字串指定對話方塊範本的名稱或指定對話方塊模


-------------------------------------------------------- KeyGTK3Win32CreateDIBitmap ----
CreateDIBitmap    CreateDIBitmap函數從與設備無關的點陣圖（DIB）創建與設備相關的點陣圖（DDB），並可選地設置點陣圖位。
語法
參數
HDC標識設備上下文。lpbmih指向BITMAPINFOHEADER結構。如果fdwInit是CBM_INIT，則該函數使用BITMAPINFOHEADER結構來獲取所需的點陣圖寬度和高度以


-------------------------------------------------------- KeyGTK3Win32CreateDIBPatternBrush ----
CreateDIBPatternBrush    CreateDIBPatternBrush函數創建一個邏輯畫筆，該畫筆具有指定的與設備無關的點陣圖（DIB）指定的模式。隨後可以將刷子選擇到與支援光柵操作的設備相關聯的任何設備上下文中。此函數僅適用于為早於3.0的Windows版本編寫的應用程式的相容性。對於基於Win32的應用程式，請使用CreateDIBPatternBrushPt函數。
語法
參數
【hglbDIBPacked】標識一個包含打包DIB的全域記憶體物件，該DIB由BITMAPINFO結構組成，緊隨其後是定義點陣圖圖元的位元組陣列。Windows 95：不支援從點陣圖大於8x8圖元


-------------------------------------------------------- KeyGTK3Win32CreateDIBPatternBrushPt ----
CreateDIBPatternBrushPt    CreateDIBPatternBrushPt函數創建一個邏輯畫筆，其具有由設備無關點陣圖（DIB）指定的模式。
語法
參數
【lpPackedDIB】指向由BITMAPINFO結構組成的壓縮DIB，緊跟著定義點陣圖圖元的位元組陣列。Windows 95：不支援從大小不超過8x8圖元的點陣圖或DIB創建畫筆。如果指定了較


-------------------------------------------------------- KeyGTK3Win32CreateDIBSection ----
CreateDIBSection    CreateDIBSection函數創建一個與設備無關的點陣圖（DIB），應用程式可以直接寫入。該函數提供了一個指向點陣圖位值位置的指標。您可以為函數用於創建點陣圖的檔映射物件提供控制碼，也可以讓作業系統為點陣圖分配記憶體。
語法
參數
【HDC】處理設備上下文。如果【iUsage】的值為DIB_PAL_COLORS，則該函數使用該設備上下文的邏輯調色板初始化與設備無關的點陣圖的顏色。【PBMI】指向BITMAPINFO結構，


-------------------------------------------------------- KeyGTK3Win32CreateDirectory ----
CreateDirectory    CreateDirectory函數創建一個新目錄。如果底層檔案系統支援對檔和目錄的安全性，則該函數將指定的安全性描述元應用於新目錄。請注意，CreateDirectory沒有範本參數，而CreateDirectoryEx沒有。
語法
參數
【lpPathName】指向一個以null結尾的字串，指定要創建的目錄的路徑。對於MAX_PATH字元的路徑，預設字串大小限制。此限制與CreateDirectory函數如何解析路徑有關


-------------------------------------------------------- KeyGTK3Win32CreateDirectoryEx ----
CreateDirectoryEx    CreateDirectoryEx函數創建一個具有指定路徑的新目錄，該目錄保留指定範本目錄的屬性。如果底層檔案系統支援對檔和目錄的安全性，則該函數將指定的安全性描述元應用於新目錄。新目錄保留指定範本目錄的其他屬性。請注意，CreateDirectoryEx有一個範本參數，而CreateDirectory沒有。
語法
參數
【lpTemplateDirectory】指向一個以null結尾的字串，指定創建新目錄時用作範本的目錄的路徑。【lpNewDirectory】指向一個以null結尾的字串，指定要創建的目


-------------------------------------------------------- KeyGTK3Win32CreateDiscardableBitmap ----
CreateDiscardableBitmap    CreateDiscardableBitmap函數創建與指定設備相容的可丟棄點陣圖。點陣圖具有與圖元相同的圖元格式和與設備相同的調色板。應用程式可以選擇該點陣圖作為與指定設備相容的存放裝置的當前點陣圖。
語法
參數
【HDC】標識設備上下文。【nWidth】指定點陣圖的寬度（以位元為單位）。【nHeight參數】指定點陣圖的高度（以位元為單位）。
返回值
如果函數成功，則返回值是點陣圖的控制碼。如果函數失敗，返


-------------------------------------------------------- KeyGTK3Win32CreateEllipticRgn ----
CreateEllipticRgn    CreateEllipticRgn函數創建一個橢圓形區域。
語法
參數
【nLeftRect】指定橢圓的邊界矩形左上角的x座標。【nTopRect】指定橢圓的邊界矩形左上角的y座標。【nRightRect】指定橢圓邊界矩形右下角的x座標。【nBottomRect


-------------------------------------------------------- KeyGTK3Win32CreateEllipticRgnIndirect ----
CreateEllipticRgnIndirect    CreateEllipticRgnIndirect函數創建一個橢圓形區域。
語法
參數
【LPRC】指向RECT結構，其中包含橢圓的邊界矩形的左上角和右下角的座標。
返回值
如果函數成功，則返回值是該區域的控制碼。如果函數失敗，返回值為NULL。
描述
邊界矩形定義區域的


-------------------------------------------------------- KeyGTK3Win32CreateEnhMetaFile ----
CreateEnhMetaFile    CreateEnhMetaFile函數為增強格式的圖中繼檔創建一個設備上下文。該設備上下文可用於存儲與設備無關的圖片。
語法
參數
【hdcRef】標識增強型圖中繼檔的參考設備。【lpFileName的對象】指向要創建的增強型圖中繼檔的檔案名。如果此參數為NULL，則增強型圖中繼檔是基於記憶體的，並且使用DeleteEnh


-------------------------------------------------------- KeyGTK3Win32CreateEvent ----
CreateEvent    CreateEvent函數創建一個命名或未命名的事件物件。
語法
參數
【lpEventAttributes】指向SECURITY_ATTRIBUTES結構的指標，用於確定返回的控制碼是否可由子進程繼承。如果【lpEventAttributes】為NULL，則無法


-------------------------------------------------------- KeyGTK3Win32CreateFiber ----
CreateFiber    CreateFiber函數分配光纖物件，為其分配堆疊，並將其設置為以指定的起始位址（通常為光纖函數）開始執行。此函數不計畫光纖。
語法
參數
【dwStackSize】指定新光纖的堆疊大小（以位元組為單位）。如果指定為零，則堆疊大小預設為與主執行緒大小相同的大小。如果無法提交【dwStackSize】位元組，則該函數將失敗。請注意，如果


-------------------------------------------------------- KeyGTK3Win32CreateFile ----
CreateFile    CreateFile函數創建或打開以下物件並返回可用於訪問對象的控制碼：*檔*管道*郵筒*通訊資源*磁片設備（僅限Windows NT）*遊戲機*目錄（僅打開）
語法
參數
【lpFileName】指向一個以null結尾的字串，指定要創建或打開的物件（檔，管道，郵槽，通信資源，磁片設備，控制台或目錄）的名稱。如果* 【lpFileName】是路徑，則預設字元


-------------------------------------------------------- KeyGTK3Win32CreateFileMapping ----
CreateFileMapping    CreateFileMapping函數為指定的檔創建一個命名或未命名的檔映射物件。
語法
參數
【HFILE】標識要從中創建映射物件的檔。該檔必須以與【//訪問類型保護】參數指定的保護標誌相容的訪問模式打開。建議儘管不需要，您打算映射的檔被打開以進行獨佔訪問。如果【HFILE】為


-------------------------------------------------------- KeyGTK3Win32CreateFont ----
CreateFont    CreateFont函數創建具有特定特徵的邏輯字體。隨後可以選擇邏輯字體作為任何設備的字體。
語法
參數
【nHeight參數】指定字體的字元儲存格或字元的邏輯單位的高度。字元高度值（也稱為高度）是字元儲存格高度值減去內部前導值。字體映射器以下列方式解釋【nHeight參數】中指定的值：值含義>


-------------------------------------------------------- KeyGTK3Win32CreateFontIndirect ----
CreateFontIndirect    CreateFontIndirect函數創建具有指定結構中指定的特徵的邏輯字體。該字體隨後可以被選擇為任何設備上下文的當前字體。
語法
參數
【lplf】指向定義邏輯字體特徵的LOGFONT結構。
返回值
如果函數成功，則返回值是邏輯字體的控制碼。如果函數失敗，返回值為NULL。
描述
CreateFontIndirect函


-------------------------------------------------------- KeyGTK3Win32CreateHalftonePalette ----
CreateHalftonePalette    CreateHalftonePalette函數為指定的設備上下文創建一個半色調調色板。
語法
參數
【HDC】標識設備上下文。
返回值
如果函數成功，則返回值標識一個邏輯半色調調色板。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
當設備上下文


-------------------------------------------------------- KeyGTK3Win32CreateHatchBrush ----
CreateHatchBrush    CreateHatchBrush函數創建一個具有指定陰影圖案和顏色的邏輯畫筆。
語法
參數
【fnStyle】指定刷子的樣式.此參數可以是以下值之一：值含義HS_BDIAGONAL從左到右孵化45度HS_CROSS水準和垂直十字線HS_DIAGCROSS45度交叉陰影HS_FDIA


-------------------------------------------------------- KeyGTK3Win32CreateIC ----
CreateIC    CreateIC函數創建指定設備的資訊上下文。資訊上下文提供了一種獲取有關設備的資訊而不創建設備上下文的快速方式。
語法
參數
【lpszDriver】指向指定設備驅動程式名稱（例如“Epson”）的以null結尾的字串。【lpszDevice】指向一個空值終止的字串，指定正在使用的特定輸出設備的名稱，如Prin


-------------------------------------------------------- KeyGTK3Win32CreateIcon ----
CreateIcon    CreateIcon函數創建一個具有指定大小，顏色和位元模式的圖示。
語法
參數
【的hInstance】標識創建圖示的模組的實例。【nWidth】指定圖示的寬度（以圖元為單位）。【nHeight參數】指定圖示的高度（以圖元為單位）。【// XOR位元遮罩中的平面數】指定圖


-------------------------------------------------------- KeyGTK3Win32CreateIconFromResource ----
CreateIconFromResource    CreateIconFromResource函數從描述該圖示的資源位元創建一個圖示或游標。
語法
參數
【presbits】指向包含圖示或游標資源位元的緩衝區。這些位通常通過調用LookupIconIdFromDirectory（在Windows 95中也可以調用LookupIconIdFrom


-------------------------------------------------------- KeyGTK3Win32CreateIconFromResourceEx ----
CreateIconFromResourceEx    [Now Supported on Windows NT]CreateIconFromResourceEx函數從描述該圖示的資源位元創建一個圖示或游標。
語法
參數
【pbIconBits】指向包含圖示或游標資源位元的緩衝區。這些位元通常通過調用LookupIconIdFromDirectoryEx和LoadResource函數載入。【cbIconBits】


-------------------------------------------------------- KeyGTK3Win32CreateIconIndirect ----
CreateIconIndirect    CreateIconIndirect函數從ICONINFO結構創建一個圖示或游標。
語法
參數
【piconinfo】指向該函數用於創建圖示或游標的ICONINFO結構。
返回值
如果函數成功，則返回值是創建的圖示或游標的控制碼。如果函數失敗，返回值為NULL。要獲取擴展錯誤資訊，請


-------------------------------------------------------- KeyGTK3Win32CreateIoCompletionPort ----
CreateIoCompletionPort    CreateIoCompletionPort函數可以將打開的檔的實例與新創建的或現有的輸入/輸出完成埠相關聯;或者可以創建一個輸入/輸出完成埠，而不需要將其與檔相關聯。將打開的檔的實例與輸入/輸出完成埠關聯使得應用程式接收到涉及該檔的非同步輸入/輸出操作的完成的通知。
語法
參數
【FileHandle】處理到打開的重疊輸入/輸出完成的檔。當使用CreateFile函數獲取這樣的控制碼時，必須指定FILE_FLAG_OVERLAPPED標誌。一旦打開檔的實例與I /


-------------------------------------------------------- KeyGTK3Win32CreateMailslot ----
CreateMailslot    CreateMailslot函數創建一個具有指定名稱的郵槽，並返回一個郵件伺服器可以用來在郵槽上執行操作的控制碼。郵槽是創建它的電腦的本地。如果具有指定名稱的郵槽已存在，則會發生錯誤。
語法
參數
【lpName】指向指定郵槽的名稱的以null結尾的字串。該名稱必須具有以下形式：\\\\。\\郵筒\\[【path】]【名稱】【名稱】欄位必須是唯一的。該名稱可能包含多個由反斜線分隔的偽


-------------------------------------------------------- KeyGTK3Win32CreateMappedBitmap ----
CreateMappedBitmap    CreateMappedBitmap函數創建一個用於工具列的點陣圖。
語法
參數
【的hInstance】使用包含點陣圖資源的可執行檔處理模組實例。【idBitmap】點陣圖資源的資源識別字。【wFlags】點陣圖標誌。該參數可以為零或以下值：值含義CMB_MASKED使用位


-------------------------------------------------------- KeyGTK3Win32CreateMenu ----
CreateMenu    CreateMenu函數創建一個功能表。功能表最初為空，但可以使用InsertMenuItem，AppendMenu和InsertMenu函數填充功能表項目。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是新建功能表的控制碼。如果函數失敗，返回值為NULL。
描述
與分配給視窗的功能表相關聯的資源將自動釋放。如果功能表未分配到視窗，應用程式必須在


-------------------------------------------------------- KeyGTK3Win32CreateMetaFile ----
CreateMetaFile    CreateMetaFile函數為Windows格式的圖中繼檔創建一個設備上下文。提供此函數以相容早期的16位版本的Microsoft Windows。基於Win32的應用程式應使用CreateEnhMetaFile函數。
語法
參數
【lpszFile】指向要創建的Windows格式圖中繼檔的檔案名。如果此參數為NULL，Windows格式的圖中繼檔是基於記憶體的，並且通過使用DeleteMetaFile函數將其內容丟失。


-------------------------------------------------------- KeyGTK3Win32CreateMutex ----
CreateMutex    CreateMutex函數創建一個命名或未命名的互斥物件。
語法
參數
【lpMutexAttributes】指向SECURITY_ATTRIBUTES結構的指標，用於確定返回的控制碼是否可以由子進程繼承。如果【lpMutexAttributes】為NULL，則無


-------------------------------------------------------- KeyGTK3Win32CreateNamedPipe ----
CreateNamedPipe    CreateNamedPipe函數創建一個具名管道的實例，並返回一個後續管道操作的控制碼。具名管道伺服器進程使用此函數來創建特定具名管道的第一個實例，並建立其基本屬性或創建現有具名管道的新實例。
語法
參數
【lpName】指向唯一標識管道的以null結尾的字串。字串必須具有以下格式：\\\\。\\管\\【\\管\\】該名稱的【\\管\\】部分可以包括除反斜線之外的任何字元，包括數位和特殊字


-------------------------------------------------------- KeyGTK3Win32CreatePalette ----
CreatePalette    CreatePalette函數創建一個邏輯調色板。
語法
參數
【lplgpl】指向LOGPALETTE結構，其中包含有關邏輯調色板中顏色的資訊。
返回值
如果函數成功，則返回值是標識邏輯調色板的控制碼。如果函數失敗，返回值為NULL。要獲取擴展錯誤信


-------------------------------------------------------- KeyGTK3Win32CreatePatternBrush ----
CreatePatternBrush    CreatePatternBrush函數創建具有指定點陣圖模式的邏輯畫筆。點陣圖不能是由CreateDIBSection函數創建的DIB部分點陣圖。
語法
參數
【骨形態發生蛋白】標識要用於創建邏輯畫筆的點陣圖。Windows 95：不支援從點陣圖大於8x8圖元的DIB創建畫筆。如果指定了較大的點陣圖，則僅使用點陣圖的一部分。
返回值
如果函數成功，則返


-------------------------------------------------------- KeyGTK3Win32CreatePen ----
CreatePen    CreatePen函數創建一個具有指定樣式，寬度和顏色的邏輯筆。筆可以隨後被選擇到設備上下文中，並用於繪製線條和曲線。
語法
參數
【fnPenStyle】指定鋼筆風格。它可以是以下值之一：樣式描述PS_SOLID筆是堅實的PS_DASH筆被打破了。僅當設備單位的筆寬為1或更小時，此樣式才有效。PS_DOT筆點綴僅當設備


-------------------------------------------------------- KeyGTK3Win32CreatePenIndirect ----
CreatePenIndirect    CreatePenIndirect函數創建一個邏輯的化妝筆，它具有在結構中指定的樣式，寬度和顏色。
語法
參數
【If the function succeeds, the return value is a handle that identifies a logical cosmetic pen.


-------------------------------------------------------- KeyGTK3Win32CreatePipe ----
CreatePipe    CreatePipe函數創建一個匿名管道，並返回到管道的讀取和寫入端的控制碼。
語法
參數
【hReadPipe】指向接收管道讀取控制碼的變數。【hWritePipe】指向接收管道寫入控制碼的變數。【lpPipeAttributes】指向SECURITY_ATTRIBUTES結構的指標


-------------------------------------------------------- KeyGTK3Win32CreatePolygonRgn ----
CreatePolygonRgn    CreatePolygonRgn函數創建一個多邊形區域。
語法
參數
【LPPT】指向定義多邊形頂點的POINT結構陣列。多邊形被推定為封閉。每個頂點只能指定一次。【cPointsen】指定陣列中的點數。【fnPolyFillMode】指定用於確定區域中哪些像


-------------------------------------------------------- KeyGTK3Win32CreatePolyPolygonRgn ----
CreatePolyPolygonRgn    CreatePolyPolygonRgn函數創建一個由一系列多邊形組成的區域。多邊形可以重疊。
語法
參數
【LPPT】指向定義多邊形頂點的POINT結構陣列。多邊形連續指定。每個多邊形被假定為封閉，每個頂點只被指定一次。【lpPolyCounts】指向一個整數陣列，每個整數指定由【LPPT】指向


-------------------------------------------------------- KeyGTK3Win32CreatePopupMenu ----
CreatePopupMenu    CreatePopupMenu函數創建一個下拉式功能表，子功能表或快顯功能表。菜單最初是空的。您可以使用InsertMenuItem函數插入或附加功能表項目。您還可以使用InsertMenu函數插入功能表項目，並使用AppendMenu函數附加功能表項目。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是新建功能表的控制碼。如果函數失敗，返回值為NULL。
描述
應用程式可以將新功能表添加到現有功能表中，也可以通過調用TrackPopupMen


-------------------------------------------------------- KeyGTK3Win32CreatePrivateObjectSecurity ----
CreatePrivateObjectSecurity    CreatePrivateObjectSecurity函數為新的受保護伺服器的物件分配並初始化一個自相關的安全性描述元。當創建新的受保護的伺服器物件時，將調用此函數。
語法
參數
【ParentDescriptor】指向正在創建新物件的父目錄的安全性描述元。如果沒有父目錄，則此參數可以為NULL。【CreatorDescriptor】指向由物件的創建者提供的安全性描述元。


-------------------------------------------------------- KeyGTK3Win32CreateProcess ----
CreateProcess    CreateProcess函數創建一個新進程及其主執行緒。新進程執行指定的可執行檔。
語法
參數
【lpApplicationName】指向指定要執行的模組的以空值終止的字串的指標。該字串可以指定要執行的模組的完整路徑和檔案名。字串可以指定部分名稱。在這種情況下，該函數使用當前驅動


-------------------------------------------------------- KeyGTK3Win32CreateProcessAsUser ----
CreateProcessAsUser    CreateProcessAsUser函數創建一個新進程及其主執行緒。然後，新進程執行指定的可執行檔。CreateProcessAsUser函數類似於CreateProcess函數，但新進程在由【hToken】參數表示的用戶的安全上下文中運行。預設情況下，新進程是非互動式的，即它運行在不可見的桌面上，無法接收用戶輸入。此外，預設情況下，新進程繼承調用進程的環境，而不是與指定用戶關聯的環境。
語法
參數
【hToken】處理代表用戶的主權杖。由權杖表示的用戶必須具有對由【lpApplicationName】或【lpCommandLine】參數指定的應用程式的讀取和執行存取權限。如果您的進程具


-------------------------------------------------------- KeyGTK3Win32CreatePropertySheetPage ----
CreatePropertySheetPage    CreatePropertySheetPage函數為屬性工作表創建一個新頁面。
語法
參數
【If the function succeeds, the return value is the handle to the new property sheet.】指向定義要包含在屬性


-------------------------------------------------------- KeyGTK3Win32CreateRectRgn ----
CreateRectRgn    CreateRectRgn函數創建一個矩形區域。
語法
參數
【nLeftRect】指定區域左上角的x座標。【nTopRect】指定區域左上角的y座標。【nRightRect】指定區域右下角的x座標。【nBottomRect】指定區域右下角的y座標。



-------------------------------------------------------- KeyGTK3Win32CreateRectRgnIndirect ----
CreateRectRgnIndirect    CreateRectRgnIndirect函數創建一個矩形區域。
語法
參數
【LPRC】指向RECT結構，其中包含定義區域的矩形的左上角和右下角的座標。
返回值
如果函數成功，則返回值是該區域的控制碼。如果函數失敗，返回值為NULL。
描述
該區域將不包括底部


-------------------------------------------------------- KeyGTK3Win32CreateRemoteThread ----
CreateRemoteThread    CreateRemoteThread函數創建一個在另一個進程的位址空間中運行的執行緒。
語法
參數
【hProcess】標識要創建執行緒的進程。Windows NT：控制碼必須具有PROCESS_CREATE_THREAD存取權限。有關詳細資訊，請參閱過程物件.【lpThreadAttribu


-------------------------------------------------------- KeyGTK3Win32CreateRoundRectRgn ----
CreateRoundRectRgn    CreateRoundRectRgn函數創建一個帶圓角的矩形區域。
語法
參數
【nLeftRect】指定區域左上角的x座標。【nTopRect】指定區域左上角的y座標。【nRightRect】指定區域右下角的x座標。【nBottomRect】指定區域右下角的y座標。【


-------------------------------------------------------- KeyGTK3Win32CreateScalableFontResource ----
CreateScalableFontResource    CreateScalableFontResource函數創建可縮放字體的字體資源檔。
語法
參數
【fdwHidden】指定字體是否為唯讀嵌入字體。此參數可以是以下值之一：值含義0字體具有讀寫許可權。1該字體具有唯讀許可權，並且應該隱藏在系統中的其他應用程式中。設置此標誌時，該字體不會由En


-------------------------------------------------------- KeyGTK3Win32CreateSemaphore ----
CreateSemaphore    CreateSemaphore函數創建一個命名或未命名的信號量物件。
語法
參數
【lpSemaphoreAttributes】指向SECURITY_ATTRIBUTES結構的指標，用於確定返回的控制碼是否可由子進程繼承。如果【lpSemaphoreAttributes】為


-------------------------------------------------------- KeyGTK3Win32CreateService ----
CreateService    CreateService函數創建一個服務物件，並將其添加到指定的服務控制管理器資料庫。
語法
參數
hSCManager標識服務控制管理器資料庫。必須使用具有SC_MANAGER_CREATE_SERVICE存取權限的OpenSCManager打開該控制碼。lpServiceName指向以空


-------------------------------------------------------- KeyGTK3Win32CreateSolidBrush ----
CreateSolidBrush    CreateSolidBrush函數創建一個具有指定純色的邏輯畫筆。
語法
參數
【crColor】指定畫筆的顏色。
返回值
如果函數成功，則返回值標識一個邏輯畫筆。如果函數失敗，返回值為NULL。
描述
一個實心的畫筆是Windows用來繪製填充形狀內部的點陣圖。


-------------------------------------------------------- KeyGTK3Win32CreateTapePartition ----
CreateTapePartition    CreateTapePartition函數重新格式化磁帶。
語法
參數
【hDevice】標識要創建新分區的設備。該控制碼是通過使用CreateFile函數創建的。【dwPartitionMethod】指定要創建的分區類型。要確定您的設備支援什麼類型的分區，請參閱


-------------------------------------------------------- KeyGTK3Win32CreateThread ----
CreateThread    CreateThread函數創建一個在調用進程的位址空間內執行的執行緒。
語法
參數
【lpThreadAttributes】指向SECURITY_ATTRIBUTES結構的指標，用於確定返回的控制碼是否可由子進程繼承。如果【lpThreadAttributes】為NULL，則


-------------------------------------------------------- KeyGTK3Win32CreateToolbarEx ----
CreateToolbarEx    CreateToolbarEx函數創建一個工具列視窗，並將指定的按鈕添加到工具列。
語法
參數
【HWND】處理工具列的父視窗。【ws】工具列的視窗樣式。此參數必須至少指定WS_CHILD樣式。它還可以包括工具列和相關主題中討論的風格的組合。【wID】控制工具列的識別字。【dyButt


-------------------------------------------------------- KeyGTK3Win32CreateUpDownControl ----
CreateUpDownControl    CreateUpDownControl函數創建一個上下控制。
語法



-------------------------------------------------------- KeyGTK3Win32CreateWaitableTimer ----
CreateWaitableTimer    [New - Windows NT]CreateWaitableTimer函數創建一個“等待”計時器物件。
語法
參數
【lpTimerAttributes】指向SECURITY_ATTRIBUTES結構的指標，指定新計時器物件的安全性描述元，並確定子進程是否可以繼承返回的控制碼。如果【lpTimerAttrib


-------------------------------------------------------- KeyGTK3Win32CreateWindow ----
CreateWindow    CreateWindow函數創建一個重疊的快顯視窗或子視窗。它指定視窗類，視窗標題，視窗樣式和（可選）窗口的初始位置和大小。該函數還指定視窗的父項或所有者（如果有）以及視窗的功能表。
語法
參數
【lpClassName】指向一個空值終止的字串或是一個整數原子。如果這個參數是一個原子，它必須是由先前調用GlobalAddAtom函數創建的全域原子。原子，小於0xC000的16位值必


-------------------------------------------------------- KeyGTK3Win32CreateWindowEx ----
CreateWindowEx    CreateWindowEx函數創建一個具有擴展樣式的重疊，快顯視窗或子視窗;否則，此函數與CreateWindow函數相同。有關創建視窗和CreateWindowEx其他參數的完整說明的更多資訊，請參閱CreateWindow.
語法
參數
【dwExStyle】指定視窗的擴展樣式。此參數可以是以下值之一：樣式含義WS_EX_ACCEPTFILES指定使用此樣式創建的視窗接受拖放檔。WS_EX_APPWINDOW當窗口最小化時


-------------------------------------------------------- KeyGTK3Win32CreateWindowStation ----
CreateWindowStation    CreateWindowStation函數創建一個視窗站物件。它返回一個可用於訪問視窗站的控制碼。窗口站是包含一組全域原子，剪貼板和一組桌面物件的安全物件。
語法
參數
【lpwinstafy】指向指定要創建的視窗站的名稱的以null結尾的字串。視窗站名稱不區分大小寫，不能包含反斜線字元（\\）。只允許管理員組的成員指定名稱。如果【lpwinstafy】為


-------------------------------------------------------- KeyGTK3Win32CryptAcquireContext ----
CryptAcquireContext    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptAcquireContext函數用於獲取特定CSP中特定金鑰容器的控制碼。這個返回的控制碼然後可以用來調用所選的CSP。此函數執行兩個操作。它首先嘗試找到具有【dwProvType】和【pszProvider】參數中描述的特性的CSP。如果找到CSP，則該函數嘗試在CSP中找到與【pszContainer】參數指定的名稱匹配的金鑰容器。此函數也可用於創建和銷毀金鑰容器，具體取決於【dwFlags中】參數的值。
語法
參數
【phProv】[out]函數將手柄複製到CSP的地址。【pszContainer】[in]金鑰容器名稱。這是一個零終止的字串，用於標識CSP的金鑰容器。此名稱與用於存儲金鑰的方法無關。一


-------------------------------------------------------- KeyGTK3Win32CryptCreateHash ----
CryptCreateHash    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptCreateHash函數用於啟動資料流程的散列。它向調用者返回CSP散列物件的控制碼。該控制碼也可用於後續調用CryptHashData和CryptHashSessionKey，以便對資料流程和工作階段金鑰進行散列。
語法
參數
【pbBuffer】[in] CSP使用的控制碼。應用程式使用CryptAcquireContext函數獲取此控制碼。【寒冷的】[in]要使用的散列演算法的演算法識別字。此參數的有效值將有所不同，具


-------------------------------------------------------- KeyGTK3Win32CryptDecrypt ----
CryptDecrypt    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptDecrypt函數用於解密先前通過CryptEncrypt函數加密的資料。
語法
參數
【的hKeyru-Latn】[in]用於解密的金鑰的控制碼。應用程式使用CryptGenKey或CryptImportKey函數獲取該控制碼。該鍵指定使用的解密演算法。【馬】[in]散列對象的控制碼


-------------------------------------------------------- KeyGTK3Win32CryptDeriveKey ----
CryptDeriveKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptDeriveKey函數生成從基礎資料匯出的加密金鑰。該函數保證從相同的基本資料生成的所有金鑰將相同，只要使用相同的CSP和演算法即可。基本資料可以是密碼或任何其他使用者資料。此函數與CryptGenKey相同，只是生成的工作階段金鑰來自基本資料而不是隨機的。另一個區別是CryptDeriveKey函數不能用於生成公開金鑰/私密金鑰對。工作階段金鑰的控制碼在【phKey】中返回。然後可以根據需要使用任何其他需要金鑰控制碼的CryptoAPI函數。
語法
參數
【pbBuffer】[in]應用程式的CSP的控制碼。應用程式使用CryptAcquireContext函數獲取此控制碼。【寒冷的】[in]要生成金鑰的演算法的識別字。此參數的有效值將有所不同，具


-------------------------------------------------------- KeyGTK3Win32CryptDestroyHash ----
CryptDestroyHash    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptDestroyHash函數會破壞由【馬】參數引用的散列對象。一旦雜湊物件被破壞，它將不能再被使用，並且它的控制碼從那時起是沒有用的。當應用程式完成後，所有散列物件都應使用CryptDestroyHash函數進行銷毀。
語法
參數
【馬】[in]要銷毀的雜湊對象的控制碼。
描述
當雜湊物件被破壞時，許多CSP將擦除CSP中保存雜湊物件的記憶體。然後CSP記憶體被釋放。在CryptCreateHash和CryptDestr


-------------------------------------------------------- KeyGTK3Win32CryptDestroyKey ----
CryptDestroyKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptDestroyKey函數釋放由【的hKeyru-Latn】參數引用的控制碼。一旦鑰匙把手被釋放，它將變得無效，不能再次使用。如果控制碼是指通過CryptImportKey導入到CSP的工作階段金鑰或公開金鑰，則此函數會銷毀該金鑰，並釋放該金鑰所佔用的記憶體。許多CSP將在釋放鑰匙之前擦洗記憶。另一方面，如果控制碼是指公開金鑰/私密金鑰對（從CryptGetUserKey獲得），那麼這個函數不會破壞基礎金鑰對。只有手柄被摧毀。
語法
參數
【的hKeyru-Latn】[in]要被銷毀的鑰匙的控制碼。
描述
鍵佔用作業系統記憶體空間和CSP記憶體空間。一些CSP將以非常有限的記憶體資源在硬體中實現。因此，使用CryptDestroy


-------------------------------------------------------- KeyGTK3Win32CryptEncrypt ----
CryptEncrypt    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptEncrypt函數用於加密資料。用於加密資料的演算法由CSP模組保存的金鑰指定，由【的hKeyru-Latn】參數引用。
語法
參數
【的hKeyru-Latn】[in]用於加密的金鑰的控制碼。應用程式通過使用CryptGenKey或CryptImportKey函數獲取該控制碼。此鍵指定使用的加密演算法。【馬】[in]散列對象的


-------------------------------------------------------- KeyGTK3Win32CryptExportKey ----
CryptExportKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptExportKey函數用於以安全的方式從加密服務提供者匯出加密金鑰。要匯出的鍵的控制碼被傳遞到函數中，該函數向調用者返回一個鍵blob。這個關鍵點可以通過非安全運輸方式發送或存儲在非安全存儲位置。直到預期的收件人使用CryptImportKey函數之後，關鍵的blob才是無用的，然後將其導入到收件人的CSP中。
語法
參數
【的hKeyru-Latn】[in]要匯出的鍵的控制碼。【hExpKey】[in]屬於目標使用者的加密金鑰的控制碼。使用此金鑰對創建的金鑰塊中的關鍵資料進行加密。這確保只有目標使用者才能使用金鑰bl


-------------------------------------------------------- KeyGTK3Win32CryptGenKey ----
CryptGenKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGenKey函數生成用於CSP模組的隨機加密金鑰。鑰匙的控制碼在【phKey】中返回。然後可以根據需要使用任何其他需要金鑰控制碼的CryptoAPI函數。調用此函數時需要調用應用程式來指定演算法。由於該演算法類型與金鑰保持捆綁，所以當執行實際的加密操作時，應用程式不需要稍後指定演算法。
語法
參數
【pbBuffer】[in]應用程式的CSP的控制碼。應用程式使用CryptAcquireContext函數獲取此控制碼。【寒冷的】[in]要生成金鑰的演算法的識別字。此參數的有效值將有所不同，具


-------------------------------------------------------- KeyGTK3Win32CryptGenRandom ----
CryptGenRandom    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGenRandom函數用隨機位元組填充緩衝區。
語法
參數
【pbBuffer】[in]應用程式的CSP的控制碼。應用程式使用CryptAcquireContext函數獲取此控制碼。【This function is often used to gene


-------------------------------------------------------- KeyGTK3Win32CryptGetHashParam ----
CryptGetHashParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGetHashParam函數允許應用程式檢索管理散列物件操作的資料。也可以使用此函數檢索實際的雜湊值。
語法
參數
【馬】[in]查詢參數的雜湊物件的控制碼。【dwParam】[in]參數號。有關參數的清單，請參閱“備註”部分。【pbData】[out]參數資料緩衝區。該函數將指定的參數資料複製到此緩衝區。


-------------------------------------------------------- KeyGTK3Win32CryptGetKeyParam ----
CryptGetKeyParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGetKeyParam函數允許應用程式檢索管理鍵操作的資料。請注意，本函數或任何其他函數無法獲得基本鍵控材料。
語法
參數
【的hKeyru-Latn】[in]查詢參數的鍵的控制碼。【dwParam】[in]參數號。有關參數的清單，請參閱“備註”部分。【pbData】[out]參數資料緩衝區。該函數將指定的參數資料


-------------------------------------------------------- KeyGTK3Win32CryptGetProvParam ----
CryptGetProvParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGetProvParam函數允許應用程式檢索管理CSP操作的參數。
語法
參數
【pbBuffer】[in]查詢參數的CSP的控制碼。【dwParam】[in]參數號。有關參數的清單，請參閱“備註”部分。【pbData】[out]參數資料緩衝區。該函數將指定的參數資料複製


-------------------------------------------------------- KeyGTK3Win32CryptGetUserKey ----
CryptGetUserKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGetUserKey函數檢索永久使用者金鑰對的控制碼，例如用戶的簽名金鑰對。
語法
參數
【pbBuffer】[in]應用程式的CSP的控制碼。應用程式使用CryptAcquireContext函數獲取此控制碼。【dwKeySpec】[in]要檢索的金鑰的規範。以下金鑰可從幾乎所有的


-------------------------------------------------------- KeyGTK3Win32CryptHashData ----
CryptHashData    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptHashData函數用於計算資料流程上的加密散列。此函數和CryptHashSessionKey可以多次調用，以計算長流或不連續流上的散列。在調用此函數之前，必須調用CryptCreateHash函數來獲取雜湊物件的控制碼。
語法
參數
【馬】[in]散列對象的控制碼。應用程式使用CryptCreateHash函數獲取此控制碼。【pbData】[in]要散列的資料的位址。【dwDataLen】[in]要散列的資料的位元組數。如果設


-------------------------------------------------------- KeyGTK3Win32CryptHashSessionKey ----
CryptHashSessionKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptHashSessionKey函數用於計算金鑰物件上的密碼散列。可以使用相同的散列控制碼多次調用此函數來計算多個鍵上的散列。致電CryptHashSessionKey可以穿插到CryptHashData的電話。在調用此函數之前，必須調用CryptCreateHash函數來獲取雜湊物件的控制碼。
語法
參數
【馬】[in]散列對象的控制碼。應用程式使用CryptCreateHash函數獲取此控制碼。【的hKeyru-Latn】[in]要雜湊的關鍵對象的控制碼。【dwFlags中】[in]標誌值。此參數


-------------------------------------------------------- KeyGTK3Win32CryptImportKey ----
CryptImportKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptImportKey函數用於將金鑰從金鑰塊傳輸到CSP。
語法
參數
【pbBuffer】[in]應用程式的CSP的控制碼。應用程式使用CryptAcquireContext函數獲取此控制碼。【pbData】[in]包含鍵blob的緩衝區。該關鍵點是由CryptE


-------------------------------------------------------- KeyGTK3Win32CryptReleaseContext ----
CryptReleaseContext    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptReleaseContext函數用於釋放CSP和金鑰容器的控制碼。當應用程式使用CSP完成時，應該執行此操作。調用此函數後，【pbBuffer】參數指定的CSP控制碼將不再有效。金鑰容器和任何金鑰對都不會被此函數破壞。
語法
參數
【pbBuffer】[in]應用程式的CSP的控制碼。這是使用CryptAcquireContext函數獲取的應用程式的控制碼。【dwFlags中】[in]標誌值。此參數保留供將來使用，並且應始


-------------------------------------------------------- KeyGTK3Win32CryptSetHashParam ----
CryptSetHashParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]在理論上，CryptSetHashParam函數允許應用程式自訂散列物件的操作。目前，該函數只定義了一個參數。
語法
參數
【馬】[in]要設置參數的雜湊對象的控制碼。【dwParam】[in]參數號。有關參數的清單，請參閱“備註”部分。【pbData】[in]參數資料緩衝區。在調用CryptSetHashPara


-------------------------------------------------------- KeyGTK3Win32CryptSetKeyParam ----
CryptSetKeyParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]通過CryptSetKeyParam函數，應用程式可以自訂按鍵操作的各個方面。通常，此函數用於設置對稱金鑰上的會話特定參數。請注意，此函數無法訪問基本金鑰材料。Microsoft RSA Base Provider在金鑰交換或簽名金鑰上沒有可設置的參數。然而，定制提供者可以定義可以在這些鍵上設置的參數。
語法
參數
【的hKeyru-Latn】[in]設置參數的鍵的控制碼。【dwParam】[in]參數號。有關參數的清單，請參閱“備註”部分。【pbData】[in]參數資料緩衝區。在調用CryptSetK


-------------------------------------------------------- KeyGTK3Win32CryptSetProvider ----
CryptSetProvider    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptSetProvider函數用於指定當前使用者預設的CSP。調用此函數後，此使用者隨後發出的任何調用CryptAcquireContext指定【dwProvType】提供程式類型，但不提供程式名稱，將導致【pszProvName】提供程式被使用。
語法
參數
【pszProvName】[in]新的默認CSP的名稱。這個CSP應該已經安裝在電腦上了。【dwProvType】[in] 【pszProvName】參數指定的CSP的提供者類型。
描述



-------------------------------------------------------- KeyGTK3Win32CryptSetProvParam ----
CryptSetProvParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptSetProvParam函數允許應用程式自訂CSP的操作。
語法
參數
【pbBuffer】[in] CSP的控制碼，用於設置參數。【dwParam】[in]要設置的參數號。當此參數設置為PP_CLIENT_HWND時，【pbData】緩衝區應包含一個DWORD值


-------------------------------------------------------- KeyGTK3Win32CryptSignHash ----
CryptSignHash    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptSignHash函數用於簽署一條資料。因為所有的簽名演算法都是不對稱的，因此非常慢，CryptoAPI不會直接對資料進行簽名。相反，您必須先對資料進行散列，然後使用CryptSignHash對雜湊值進行簽名。
語法
參數
【馬】[in]要簽名的雜湊對象的控制碼。【dwKeySpec】[in]用於簽署雜湊的金鑰對。可以指定以下鍵：* AT_KEYEXCHANGE __ Exchange私密金鑰* AT_SIGNATU


-------------------------------------------------------- KeyGTK3Win32CryptVerifySignature ----
CryptVerifySignature    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptVerifySignature函數用於驗證雜湊物件的簽名。在調用此函數之前，必須調用CryptCreateHash函數來獲取雜湊物件的控制碼。然後使用CryptHashData和/或CryptHashSessionKey函數將資料和/或工作階段金鑰添加到散列物件。一旦這個函數完成，可以使用【馬】控制碼調用的唯一雜湊函數是CryptDestroyHash函數。
語法
參數
【馬】[in]要驗證的雜湊對象的控制碼。【pbSignature】[in]要驗證的簽名資料的位址。【dwSigLen】[in] 【pbSignature】簽名資料中的位元組數。【hPubKey】


-------------------------------------------------------- KeyGTK3Win32DdeAbandonTransaction ----
DdeAbandonTransaction    DdeAbandonTransaction函數放棄指定的非同步事務並釋放與事務相關聯的所有資源。
語法
參數
【idInst】指定通過先前調用DdeInitialize函數獲得的應用程式實例識別字。【hConv】標識交易發起的對話。如果此參數為0L，則所有事務都將被放棄（即【idTransactio


-------------------------------------------------------- KeyGTK3Win32DdeAccessData ----
DdeAccessData    DdeAccessData函數可以訪問指定的動態資料交換（DDE）物件中的資料。當應用程式已完成訪問物件中的資料時，必須調用DdeUnaccessData函數。
語法
參數
【HDATA】標識要訪問的DDE物件。【pcbDataSize】指向接收由【HDATA】參數標識的DDE物件的大小（以位元組為單位）的變數。如果此參數為NULL，則不返回大小資訊。
返回值



-------------------------------------------------------- KeyGTK3Win32DdeAddData ----
DdeAddData    DdeAddData函數將資料添加到指定的動態資料交換（DDE）物件。應用程式可以從與物件開頭的任何偏移開始添加資料。如果新資料與物件中已經存在的資料重疊，則新資料會覆蓋發生重疊的位元組中的舊資料。未寫入的物件中的位置的內容未定義。
語法
參數
【HDATA】標識接收附加資料的DDE物件。【PSRC】指向包含要添加到DDE物件的資料的緩衝區。【cb】指定要添加到DDE物件的資料的長度（以位元組為單位）。【cbOff】指定從DDE對象開


-------------------------------------------------------- KeyGTK3Win32DdeCallback ----
DdeCallback    DdeCallback函數是一個應用程式定義的回呼函數，用於回應其他應用程式的動態資料交換管理庫（DDEML）調用，處理發送到函數的動態資料交換（DDE）事務。
語法
參數
【UTYPE】指定當前事務的類型。此參數由事務類標誌和事務類型標誌的組合組成。下表描述了每個事務類，並提供了每個類中事務類型的清單。有關特定交易類型的資訊，請參閱該類型的單個描述。類含義XC


-------------------------------------------------------- KeyGTK3Win32DdeClientTransaction ----
DdeClientTransaction    DdeClientTransaction函數開始用戶端和伺服器之間的資料事務。只有動態資料交換（DDE）用戶端應用程式可以調用此函數，只有在與伺服器建立對話之後，應用才可以使用它。
語法
參數
【的pData】指向用戶端必須傳遞到伺服器的資料的開頭。可選地，應用程式可以指定傳遞給伺服器的資料控制碼（HDDEDATA），在這種情況下，【cbData】參數應設置為0xFFFFFFFF。僅


-------------------------------------------------------- KeyGTK3Win32DdeCmpStringHandles ----
DdeCmpStringHandles    DdeCmpStringHandles函數比較兩個字串控制碼的值。字串控制碼的值與關聯字串的情況無關。
語法
參數
【hsz1plpl】標識第一個字串。【hsz2plpl】標識第二個字串。
返回值
返回值可以是以下值之一：值含義-1【hsz1plpl】的值為0或小於【hsz2plpl】的值。0【h


-------------------------------------------------------- KeyGTK3Win32DdeConnect ----
DdeConnect    DdeConnect函數與支援指定服務名稱和主題名稱對的伺服器應用程式建立對話。如果存在多個這樣的伺服器，則系統僅選擇一個。
語法
參數
【idInst】指定通過先前調用DdeInitialize函數獲得的應用程式實例識別字。【hszService】標識指定要建立會話的伺服器應用程式的服務名稱的字串。此控制碼必須先前調用Dde


-------------------------------------------------------- KeyGTK3Win32DdeConnectList ----
DdeConnectList    DdeConnectList函數與支援指定服務名稱和主題名稱對的所有伺服器應用程式建立對話。應用程式也可以使用此函數通過將函數傳遞給現有的會話控制碼來獲取會話控制碼的列表。動態資料交換管理庫從對話清單中刪除任何終止對話的控制碼。所產生的會話清單包含支援指定的服務名稱和主題名稱的所有當前建立的會話的控制碼。
語法
參數
【idInst】指定通過先前調用DdeInitialize函數獲得的應用程式實例識別字。【hszService】標識指定要建立會話的伺服器應用程式的服務名稱的字串。如果此參數為0L，系統將


-------------------------------------------------------- KeyGTK3Win32DdeCreateDataHandle ----
DdeCreateDataHandle    DdeCreateDataHandle函數創建動態資料交換（DDE）物件，並使用指定緩衝區的資料填充物件。DDE應用程式在涉及將資料傳遞給合作夥伴應用程式的事務期間使用此函數。
語法
參數
【idInst】指定通過先前調用DdeInitialize函數獲取的應用程式實例識別字。【PSRC】指向包含要複製到DDE物件的資料的緩衝區。如果此參數為NULL，則不會將資料複製到物件。【


-------------------------------------------------------- KeyGTK3Win32DdeCreateStringHandle ----
DdeCreateStringHandle    DdeCreateStringHandle函數創建一個控制碼，用於標識【PES】參數指向的字串。動態資料交換（DDE）用戶端或伺服器應用程式可以將字串控制碼作為參數傳遞給其他動態資料交換管理庫（DDEML）函數。
語法
參數
【idInst】指定通過先前調用DdeInitialize函數獲取的應用程式實例識別字。【PES】指向包含要為其創建控制碼的以null結尾的字串的緩衝區。此字串最多可以包含255個字元。這


-------------------------------------------------------- KeyGTK3Win32DdeDisconnect ----
DdeDisconnect    DdeDisconnect函數終止由DdeConnect或DdeConnectList函數啟動的對話，並使指定的會話控制碼無效。
語法
參數
【hConv】識別要終止的活動對話。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。錯誤DdeGetLastError函數可用於獲取錯誤代碼，可能是以下值之一：DMLER


-------------------------------------------------------- KeyGTK3Win32DdeDisconnectList ----
DdeDisconnectList    DdeDisconnectList函數會銷毀指定的會話列表，並終止與列表關聯的所有會話。
語法
參數
【hConvList】標識會話清單。此控制碼必須由先前調用DdeConnectList函數創建。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。錯誤DdeGetLastEr


-------------------------------------------------------- KeyGTK3Win32DdeEnableCallback ----
DdeEnableCallback    DdeEnableCallback函數啟用或禁用特定會話或由呼叫應用程式當前建立的所有會話的交易。在禁用會話的事務後，作業系統將該會話的事務放置在與應用程式關聯的事務佇列中。該應用程式應儘快重新啟用會話，以避免丟失排隊的事務。
語法
參數
【idInst】指定通過先前調用DdeInitialize函數獲得的應用程式實例識別字。【hConv】標識要啟用或禁用的會話。如果此參數為NULL，該函數將影響所有對話。【WCMD】指定函數


-------------------------------------------------------- KeyGTK3Win32DdeFreeDataHandle ----
DdeFreeDataHandle    DdeFreeDataHandle函數釋放動態資料交換（DDE）物件並刪除與物件關聯的資料控制碼。
語法
參數
【HDATA】標識要釋放的DDE物件。此控制碼必須由先前調用DdeCreateDataHandle函數創建或由DdeClientTransaction函數返回。
返回值
如果函數成功，返回


-------------------------------------------------------- KeyGTK3Win32DdeFreeStringHandle ----
DdeFreeStringHandle    DdeFreeStringHandle函數釋放調用應用程式中的字串控制碼。
語法
參數
【idInst】指定通過先前調用DdeInitialize函數獲取的應用程式實例識別字。【帖子】標識要釋放的字串控制碼。此控制碼必須先前調用DdeCreateStringHandle函數創建。


-------------------------------------------------------- KeyGTK3Win32DdeGetData ----
DdeGetData    DdeGetData函數將資料從指定的動態資料交換（DDE）物件複製到指定的本地緩衝區。
語法
參數
【HDATA】標識包含要複製的資料的DDE物件。【pDst】指向接收資料的緩衝區。如果此參數為NULL，則DdeGetData函數返回要複製到緩衝區的資料量（以位元組為單位）。【CBMAX】指


-------------------------------------------------------- KeyGTK3Win32DdeGetLastError ----
DdeGetLastError    DdeGetLastError函數返回由動態資料交換管理庫（DDEML）函數失敗設置的最新錯誤代碼，並將錯誤代碼重置為DMLERR_NO_ERROR。
語法
參數
【idInst】指定通過先前調用DdeInitialize函數獲取的應用程式實例識別字。
返回值
如果函數成功，則返回值是最後一個錯誤代碼。以下是可能的DDEML錯誤代碼：值含義DMLE


-------------------------------------------------------- KeyGTK3Win32DdeImpersonateClient ----
DdeImpersonateClient    DdeImpersonateClient函數在DDE用戶端會話中類比動態資料交換（DDE）用戶端應用程式。
語法
參數
【hConv】標識要類比的DDE用戶端對話。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
類比是一個進程


-------------------------------------------------------- KeyGTK3Win32DdeInitialize ----
DdeInitialize    DdeInitialize函數使用動態資料交換管理庫（DDEML）註冊應用程式。調用任何其他DDEML函數之前，應用程式必須調用此函數。
語法
參數
【pidInst】指向應用程式實例識別字。初始化時，該參數應指向0。如果函數成功，則該參數指向應用程式的實例識別字。該值應該在需要它的所有其他DDEML函數中作為【idInst】參數傳遞。如


-------------------------------------------------------- KeyGTK3Win32DdeKeepStringHandle ----
DdeKeepStringHandle    DdeKeepStringHandle函數會增加與指定控制碼關聯的使用次數。此函數使應用程式可以將傳遞到應用程式的動態資料交換（DDE）回呼函數的字串控制碼保存。否則，當回呼函數返回時，傳遞給回呼函數的字串控制碼被刪除。此函數也應用於保留由DdeQueryConvInfo函數返回的CONVINFO結構引用的字串控制碼的副本。
語法
參數
【idInst】指定通過先前調用DdeInitialize函數獲得的應用程式實例識別字。【帖子】標識要保存的字串控制碼。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32DdeNameService ----
DdeNameService    DdeNameService函數註冊或登出動態資料交換（DDE）伺服器支援的服務名稱。此函數使系統向其他正在運行的動態資料交換管理庫（DDEML）用戶端應用程式發送XTYP_REGISTER或XTYP_UNREGISTER事務。伺服器應用程式應該調用此函數來註冊它支援的每個服務名稱，並登出以前註冊但不再支援的名稱。伺服器也應該調用此函數在終止前取消註冊其服務名稱。
語法
參數
【idInst】指定通過先前調用DdeInitialize函數獲取的應用程式實例識別字。【hsz1plpl】標識指定伺服器正在註冊或取消註冊的服務名稱的字串。登出所有服務名稱的應用程式應將


-------------------------------------------------------- KeyGTK3Win32DdePostAdvise ----
DdePostAdvise    DdePostAdvise函數使系統向每個用戶端的主叫（伺服器）應用程式的動態資料交換（DDE）回呼函數發送XTYP_ADVREQ事務，並在指定的主題和專案上使用一個主動的建議迴圈。每當與主題名稱或專案名稱對相關聯的資料發生變化時，伺服器應用程式都應調用此函數。
語法
參數
【idInst】指定通過先前調用DdeInitialize函數獲取的應用程式實例識別字。【hszTopic】標識指定主題名稱的字串。要通過主動建議迴圈發送所有主題的通知，應用程式可以將此參


-------------------------------------------------------- KeyGTK3Win32DdeQueryConvInfo ----
DdeQueryConvInfo    DdeQueryConvInfo函數獲取有關動態資料交換（DDE）交易以及交易發生的對話的資訊。
語法
參數
【hConv】識別對話。【idTransaction】指定事務。對於非同步事務，此參數應為DdeClientTransaction函數返回的事務識別字。對於同步交易，此參數應為QID_SYNC


-------------------------------------------------------- KeyGTK3Win32DdeQueryNextServer ----
DdeQueryNextServer    DdeQueryNextServer函數獲取指定會話清單中的下一個會話控制碼。
語法
參數
【hConvList】標識會話清單。此控制碼必須由先前調用DdeConnectList函數創建。【hConvPrev】標識此函數以前返回的會話控制碼。如果此參數為0L，該函數將返回清單中的第一個


-------------------------------------------------------- KeyGTK3Win32DdeQueryString ----
DdeQueryString    DdeQueryString函數將與字串控制碼關聯的文本複製到緩衝區中。
語法
參數
【idInst】指定通過先前調用DdeInitialize函數獲得的應用程式實例識別字。【帖子】標識要複製的字串。此控制碼必須由先前調用DdeCreateStringHandle函數創建。【


-------------------------------------------------------- KeyGTK3Win32DdeReconnect ----
DdeReconnect    DdeReconnect函數允許用戶端動態資料交換管理庫（DDEML）應用程式嘗試重新建立與終止與用戶端會話的服務的會話。當對話重新建立時，DDEML嘗試重新建立任何預先存在的建議迴圈。
語法
參數
【hConv】確定要重新建立的對話。用戶端必須先前調用DdeConnect函數或從XTYP_DISCONNECT事務獲取會話控制碼。
返回值
如果函數成功，則返回值是重新建立的會話的控制碼。


-------------------------------------------------------- KeyGTK3Win32DdeSetQualityOfService ----
DdeSetQualityOfService    DdeSetQualityOfService函數指定原始DDE應用程式希望啟動的未來DDE會話的服務品質。指定的服務品質適用於在這些設置到位時開始的任何對話。DDE對話的服務品質在談話期間持續;在給定對話期間調用DdeSetQualityOfService函數不會影響對話的服務品質。
語法
參數
【hwndClient】標識指定用戶端將要發送的WM_DDE_INITIATE消息來啟動DDE會話的DDE用戶端視窗。【pqosNew】指向SECURITY_QUALITY_OF_SERVI


-------------------------------------------------------- KeyGTK3Win32DdeSetUserHandle ----
DdeSetUserHandle    DdeSetUserHandle函數將應用程式定義的32位元值與會話控制碼或事務識別字相關聯。這對於簡化非同步事務的處理非常有用。應用程式可以使用DdeQueryConvInfo函數來檢索此值。
語法
參數
【hConv】識別對話。【id】指定與【房屋da】參數指定的值關聯的事務識別字。應用程式應將此參數設置為QID_SYNC以將【房屋da】與由【hConv】參數標識的會話相關聯。【房屋da】標


-------------------------------------------------------- KeyGTK3Win32DdeUnaccessData ----
DdeUnaccessData    DdeUnaccessData函數無法處理動態資料交換（DDE）物件。應用程式在完成訪問物件後必須調用此函數。
語法
參數
【HDATA】標識DDE物件。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。錯誤DdeGetLastError函數可用於獲取錯誤代碼，可能是以下值之一：DMLERR_D


-------------------------------------------------------- KeyGTK3Win32DdeUninitialize ----
DdeUninitialize    所有DdeUninitialize函數可以釋放與調用應用程式相關聯的所有動態資料交換管理庫（DDEML）資源。
語法
參數
【idInst】指定通過先前調用DdeInitialize函數獲得的應用程式實例識別字。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
DdeUninitia


-------------------------------------------------------- KeyGTK3Win32DebugActiveProcess ----
DebugActiveProcess    DebugActiveProcess函數允許調試器附加到活動進程，然後進行調試。
語法
參數
【dwProcessId】指定要調試的進程的識別字。調試器可以調試對進程的訪問，就像使用DEBUG_ONLY_THIS_PROCESS標誌創建進程一樣。
返回值
如果函數成功，返回值不為


-------------------------------------------------------- KeyGTK3Win32DebugBreak ----
DebugBreak    DebugBreak函數導致在當前進程中發生中斷點異常，以便調用執行緒可以發信號通知調試器並強制它採取一些措施。如果沒有調試進程，則使用標準例外處理常式的搜索邏輯。在大多數情況下，這會導致調用進程由於未處理的中斷點異常而終止。
語法
參數
此函數無參數。
返回值
此函數不返回值。



-------------------------------------------------------- KeyGTK3Win32DebugProc ----
DebugProc    DebugProc掛接過程是一個應用程式定義或庫定義的回呼函數，Windows調用與任何其他類型的鉤子關聯的鉤子過程之前調用。系統將有關要調用的鉤子的資訊傳遞給DebugProc掛鉤過程，該過程檢查資訊並確定是否允許調用掛鉤。
語法
參數
【NCODE】指定掛接過程是否處理消息。如果【NCODE】為HC_ACTION，則掛接過程必須處理該消息。如果【NCODE】小於零，掛鉤過程必須將消息傳遞給CallNextHookEx函數，


-------------------------------------------------------- KeyGTK3Win32DefDlgProc ----
DefDlgProc    DefDlgProc函數對屬於應用程式定義的對話方塊類的視窗過程執行預設消息處理。
語法
參數
【hDlg】標識對話方塊。【消息】指定消息號。【wParam中】指定附加的消息特定資訊。【lParam的】指定附加的消息特定資訊。
返回值
返回值指定消息處理的結果，並取決於發送的消息。



-------------------------------------------------------- KeyGTK3Win32DeferWindowPos ----
DeferWindowPos    DeferWindowPos函數更新指定視窗的指定多視窗位置結構。該函數然後將控制碼返回到更新的結構。EndDeferWindowPos函數使用此結構中的資訊同時更改多個視窗的位置和大小。BeginDeferWindowPos函數創建結構。
語法
參數
【hWinPosInfo】識別包含一個或多個視窗的大小和位置資訊的多視窗位置結構。此結構由BeginDeferWindowPos或最近調用DeferWindowPos返回。【的hWnd】標識


-------------------------------------------------------- KeyGTK3Win32DefFrameProc ----
DefFrameProc    DefFrameProc函數為多重文件介面（MDI）框架視窗的視窗過程不處理的任何視窗消息提供預設處理。視窗過程未顯式處理的所有視窗消息必須傳遞給DefFrameProc函數，而不是DefWindowProc函數。
語法
參數
【的hWnd】標識MDI框架視窗。【hWndMDIClient】標識MDI用戶端視窗。【uMsg】指定要處理的消息。【wParam中】指定附加的消息特定資訊。【lParam的】指定附加的消息


-------------------------------------------------------- KeyGTK3Win32DefHookProc ----
DefHookProc       DefHookProc函數已過時。它僅用於與16位版本的Windows相容。基於Win32的應用程式應使用CallNextHookEx函數。


-------------------------------------------------------- KeyGTK3Win32DefineDosDevice ----
DefineDosDevice    DefineDosDevice函數允許應用程式定義，重新定義或刪除MS-DOS設備名稱。MS-DOS設備名稱作為符號連結存儲在32位元版本的Windows中的物件名稱空間中。將MS-DOS路徑轉換為32位元版本的Windows中的相應路徑的代碼將使用這些符號連結映射MS-DOS設備和磁碟機代號。DefineDosDevice函數提供了一種基於Win32的應用程式可以修改用於實現MS-DOS設備名稱空間的符號連結的機制。
語法
參數
【dwFlags中】指定DefineDosDevice函數的幾個可控方面。可以使用以下一個或多個值：值含義DDD_RAW_TARGET_PATH如果指定了此值，該函數不會將【lpTarget


-------------------------------------------------------- KeyGTK3Win32DefineHandleTable ----
DefineHandleTable         DefineHandleTable函數已過時。它被提供為一個宏，以簡化16位元Windows應用程式的移植。在評估其參數後，它將擴展為TRUE。沒有其他的效果。


-------------------------------------------------------- KeyGTK3Win32DefMDIChildProc ----
DefMDIChildProc    DefMDIChildProc函數為多重文件介面（MDI）子視窗的視窗過程不處理的任何視窗消息提供預設處理。視窗過程未處理的視窗消息必須傳遞給DefMDIChildProc函數，而不是DefWindowProc函數。
語法
參數
【的hWnd】標識MDI子視窗。【uMsg】指定要處理的消息。【wParam中】指定附加的消息特定資訊。【lParam的】指定附加的消息特定資訊。
返回值
返回值指定消息處理的結果，並取


-------------------------------------------------------- KeyGTK3Win32DefScreenSaverProc ----
DefScreenSaverProc    DefScreenSaverProc函數為螢幕保護裝置程式應用程式不處理的任何消息提供預設處理。
語法
參數
【的hWnd】標識螢幕保護裝置程式視窗。【味精】指定要處理的消息。DefScreenSaverProc函數將回應影響螢幕保護裝置程式操作的消息，如“備註”部分所述。如果螢幕保護裝置程式應用程式必須對這些


-------------------------------------------------------- KeyGTK3Win32DefWindowProc ----
DefWindowProc    DefWindowProc函式呼叫預設視窗過程來為應用程式未處理的任何視窗消息提供預設處理。此函數可確保每個消息都被處理。使用視窗過程接收的相同參數調用DefWindowProc.
語法
參數
【的hWnd】標識接收消息的視窗過程。【消息】指定消息。【wParam中】指定附加消息資訊。該參數的內容取決於【消息】參數的值。【lParam的】指定附加消息資訊。該參數的內容取決於【消息】


-------------------------------------------------------- KeyGTK3Win32DeleteAce ----
DeleteAce    DeleteAce函數從ACL中刪除ACE。ACE是一個存取控制條目。ACL是存取控制清單。
語法
參數
【ACL】指向ACL結構。由【dwAceIndex】參數指定的ACE將從此ACL中刪除。【dwAceIndex】指定要刪除的ACE。值為0對應於ACL中的第一個ACE，1對應於第二個ACE，


-------------------------------------------------------- KeyGTK3Win32DeleteAtom ----
DeleteAtom    DeleteAtom函數減少本地字串原子的引用計數。如果原子的引用計數減少為零，DeleteAtom將從本地原子表中刪除與原子關聯的字串。
語法
參數
【納多馬斯】標識要刪除的原子和字串。
返回值
如果函數成功，返回值為零。如果函數失敗，則返回值為【納多馬斯】參數。要獲取擴展錯誤資訊，請調用GetLastError.
描述
字串


-------------------------------------------------------- KeyGTK3Win32DeleteColorSpace ----
DeleteColorSpace    DeleteColorSpace函數刪除指定的顏色空間，釋放與其關聯的所有內部資源。
語法



-------------------------------------------------------- KeyGTK3Win32DeleteCriticalSection ----
DeleteCriticalSection    DeleteCriticalSection函數釋放由未知的關鍵部分物件使用的所有資源。
語法
參數
【lpCriticalSection】指向臨界區對象。
返回值
此函數不返回值。
描述
刪除關鍵的部分物件會釋放物件使用的所有系統資源。刪除後，無法在EnterCriticalSec


-------------------------------------------------------- KeyGTK3Win32DeleteDC ----
DeleteDC    DeleteDC函數刪除指定的設備上下文（DC）。
語法
參數
【HDC】標識設備上下文。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
應用程式不得通過調用GetDC函數刪除獲取控制碼的設備上下文。相反，它必須調用Rele


-------------------------------------------------------- KeyGTK3Win32DeleteEnhMetaFile ----
DeleteEnhMetaFile    DeleteEnhMetaFile函數刪除增強格式的圖中繼檔或增強格式的圖中繼檔控制碼。
語法
參數
【HEMF】識別增強的圖中繼檔。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
如果【HEMF】參數識別存儲在記憶體中的增強型圖中繼檔，則DeleteEnhMe


-------------------------------------------------------- KeyGTK3Win32DeleteFiber ----
DeleteFiber    DeleteFiber函數刪除現有光纖。
語法
參數
【//指向要刪除的光纖的指標】指定要刪除的光纖的位址。
返回值
此函數不返回值。
描述
DeleteFiber函數刪除與光纖相關聯的所有資料。該資料包括堆疊，寄存器的子集和光纖資料。


-------------------------------------------------------- KeyGTK3Win32DeleteFile ----
DeleteFile    DeleteFile函數刪除現有檔。
語法
參數
【lpFileName】指向指定要刪除的檔的以null結尾的字串。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.


-------------------------------------------------------- KeyGTK3Win32DeleteForm ----
DeleteForm    DeleteForm函數從支援的表單列表中刪除表單名稱。
語法
參數
【hPrinter】表示要執行此函數的打開的印表機手柄。【pFormName】指向要刪除的表單名稱。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請


-------------------------------------------------------- KeyGTK3Win32DeleteMenu ----
DeleteMenu    DeleteMenu函數從指定的功能表中刪除一個專案。如果功能表項目打開功能表或子功能表，此函數會銷毀功能表或子功能表的控制碼，並釋放功能表或子功能表使用的記憶體。
語法
參數
【HMENU】標識要更改的功能表。【uPositionbs】指定要刪除的功能表項目，由【uFlags】參數確定。【uFlags】指定如何解釋【uPositionbs】參數。此參數必須是以下值之一：


-------------------------------------------------------- KeyGTK3Win32DeleteMetaFile ----
DeleteMetaFile    DeleteMetaFile函數刪除Windows格式的圖中繼檔或Windows格式的圖中繼檔控制碼。此函數用於與16位元版本的Windows相容。基於Win32的應用程式應使用DeleteEnhMetaFile函數。
語法
參數
【HMF】標識Windows格式的圖中繼檔。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
Windows格式的圖中繼檔不支援新的曲線，路徑和轉換函數，例如P


-------------------------------------------------------- KeyGTK3Win32DeleteMonitor ----
DeleteMonitor    DeleteMonitor函數刪除由AddMonitor函數添加的印表機監視器。
語法
參數
【PNAME】指向以空字元結尾的字串，指定要從中刪除監視器的伺服器的名稱。如果此參數為NULL，則本地將刪除印表機監視器。【pEnvironment】指向以空字元結尾的字串，指定要從中刪


-------------------------------------------------------- KeyGTK3Win32DeleteObject ----
DeleteObject    DeleteObject函數刪除邏輯筆，畫筆，字體，點陣圖，區域或調色板，釋放與物件相關聯的所有系統資源。刪除物件後，指定的控制碼將不再有效。
語法
參數
【hObject】標識邏輯筆，畫筆，字體，點陣圖，區域或調色板。
返回值
如果函數成功，返回值不為零。如果指定的控制碼無效或當前被選擇到設備上下文中，則返回值為零。
描述
當它仍被選擇到


-------------------------------------------------------- KeyGTK3Win32DeletePort ----
DeletePort    DeletePort函數顯示一個對話方塊，允許使用者刪除埠名稱。
語法
參數
【PNAME】指向零終止字串的指標，指定應刪除該埠的伺服器的名稱。如果此參數為NULL，則刪除本地埠。【的hWnd】處理到埠刪除對話方塊的父視窗。【pPortName】指向一個零終止的


-------------------------------------------------------- KeyGTK3Win32DeletePrinter ----
DeletePrinter    DeletePrinter函數刪除指定的印表機物件。
語法
參數
【hPrinter】標識將被刪除的印表機對象。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
印表機手柄【


-------------------------------------------------------- KeyGTK3Win32DeletePrinterConnection ----
DeletePrinterConnection    DeletePrinterConnection函數刪除與通過呼叫AddPrinterConnection或ConnectToPrinterDlg建立的印表機的連接。
語法
參數
【PNAME】指向以空字元結尾的字串，指定要刪除的印表機連接的名稱。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.


-------------------------------------------------------- KeyGTK3Win32DeletePrinterData ----
DeletePrinterData    [New - Windows NT]DeletePrinterData函數刪除印表機的指定配置資料。印表機的配置資料由一組命名和類型值組成。DeletePrinterData函數刪除其值之一指定的值之一。
語法
參數
【hPrinter】處理要刪除其配置資料的印表機。通過調用OpenPrinter函數獲取此印表機控制碼。【pValueName】指向要刪除的配置資料值的以null結尾的名稱。回報值如果函數成功


-------------------------------------------------------- KeyGTK3Win32DeletePrinterDriver ----
DeletePrinterDriver    DeletePrinterDriver函數從伺服器支援的驅動程式的名稱清單中刪除指定的印表機驅動程式名稱。
語法
參數
【PNAME】指向以空字元結尾的字串，指定要從中刪除驅動程式的伺服器的名稱。如果此參數為NULL，則印表機驅動程式名稱將在本地刪除。【pEnvironment】指向以空字元結尾的字串，指


-------------------------------------------------------- KeyGTK3Win32DeletePrintProcessor ----
DeletePrintProcessor    DeletePrintProcessor函數刪除由AddPrintProcessor函數添加的印表機處理器。
語法
參數
【PNAME】指向以空字元結尾的字串，指定要從中移除處理器的伺服器的名稱。如果此參數為NULL，則印表機處理器在本地被刪除。【pEnvironment】指向以空字元結尾的字串，指定要從中


-------------------------------------------------------- KeyGTK3Win32DeletePrintProvidor ----
DeletePrintProvidor    DeletePrintProvidor函數刪除由AddPrintProvidor函數添加的印表機提供商。
語法
參數
【PNAME】指向以空字元結尾的字串，指定要從中刪除提供程式的伺服器的名稱。如果此參數為NULL，印表機提供程式將在本地刪除。【pEnvironment】指向一個空值終止的字串，指定要從


-------------------------------------------------------- KeyGTK3Win32DeleteService ----
DeleteService    DeleteService函數從服務控制管理器資料庫中標記要刪除的指定服務。
語法
參數
【hService】標識服務。該控制碼由OpenService或CreateService函數返回，並且必須具有DELETE存取權限。
返回值
如果函數成功，返回值不為零。如果函數失敗，返


-------------------------------------------------------- KeyGTK3Win32DeregisterEventSource ----
DeregisterEventSource    DeregisterEventSource函數關閉RegisterEventSource函數返回的控制碼。
語法
參數
【hEventLog】標識由RegisterEventSource返回控制碼的事件日誌。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLa


-------------------------------------------------------- KeyGTK3Win32DestroyAcceleratorTable ----
DestroyAcceleratorTable    DestroyAcceleratorTable函數會銷毀加速器表。在應用程式關閉之前，它必須使用此函數來銷毀使用CreateAcceleratorTable函數創建的每個加速表。
語法
參數
【HACCEL】標識要銷毀的加速器表。此控制碼必須是通過調用CreateAcceleratorTable函數創建的。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴


-------------------------------------------------------- KeyGTK3Win32DestroyCaret ----
DestroyCaret    DestroyCaret函數會消除插入符當前的形狀，從視窗中釋放插入符號，並從螢幕中刪除插入符號。如果插入符號形狀基於點陣圖，DestroyCaret不會釋放點陣圖。
語法
參數
此函數無參數。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
DestroyCaret僅當當前任務中的視窗


-------------------------------------------------------- KeyGTK3Win32DestroyCursor ----
DestroyCursor    DestroyCursor函數會銷毀由CreateCursor函數創建的游標，並釋放游標所佔用的任何記憶體。不要使用此函數來銷毀沒有使用CreateCursor函數創建的游標。
語法
參數
【HCURSORpt】標識要銷毀的游標。游標不能被使用。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32DestroyIcon ----
DestroyIcon    DestroyIcon函數會銷毀圖示，並釋放圖示佔用的任何記憶體。
語法
參數
【惠康】標識要銷毀的圖示。該圖示不得使用。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
只需要為Crea


-------------------------------------------------------- KeyGTK3Win32DestroyMenu ----
DestroyMenu    DestroyMenu函數會銷毀指定的功能表，並釋放功能表所佔用的任何記憶體。
語法
參數
【HMENU】標識要銷毀的功能表。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
關閉前，應用程式必須使用D


-------------------------------------------------------- KeyGTK3Win32DestroyPrivateObjectSecurity ----
DestroyPrivateObjectSecurity    DestroyPrivateObjectSecurity函數刪除受保護的伺服器對象的安全性描述元。必須通過調用CreatePrivateObjectSecurity函數創建此安全性描述元。
語法
參數
【ObjectDescriptor】指向要刪除的SECURITY_DESCRIPTOR結構的指標。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調


-------------------------------------------------------- KeyGTK3Win32DestroyPropertySheetPage ----
DestroyPropertySheetPage    DestroyPropertySheetPage函數會銷毀屬性工作表頁面。對於尚未傳遞給PropertySheet函數的頁面，應用程式必須調用此函數。
語法
參數
【hPSPage】處理到屬性工作表頁面刪除。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32DestroyWindow ----
DestroyWindow    DestroyWindow函數會破壞指定的視窗。該函數將WM_DESTROY和WM_NCDESTROY消息發送到視窗以停用它並從中刪除鍵盤焦點。該函數還會破壞視窗的功能表，刷新執行緒訊息佇列，破壞計時器，刪除剪貼板所有權，並打破剪貼板檢視器鏈（如果視窗位於檢視器鏈的頂部）。如果指定的視窗是父視窗或所有者視窗，則DestroyWindow會在銷毀父視窗或所有者視窗時自動銷毀相關聯的子視窗或擁有的視窗。該函數首先銷毀子視窗或擁有的視窗，然後破壞父視窗或所有者視窗。
語法
參數
【的hWnd】標識要銷毀的視窗。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
執行緒不能使用Destroy


-------------------------------------------------------- KeyGTK3Win32DeviceCapabilities ----
DeviceCapabilities    DeviceCapabilities函數可檢索印表機設備驅動程式的函數。
語法
參數
【pDevice】指向包含印表機名稱的以null結尾的字串。請注意，這是印表機的名稱，而不是印表機驅動程式。【pPort】指向包含設備連接到的埠名稱的空終止字串的指標，例如“LPT1”


-------------------------------------------------------- KeyGTK3Win32DeviceIoControl ----
DeviceIoControl    DeviceIoControl函數將控制代碼直接發送到指定的設備驅動程式，使相應的設備執行指定的操作。
語法
參數
【hDevice】處理要執行操作的設備。調用CreateFile函數獲取設備控制碼。【dwIoControlCode】指定操作的控制代碼。該值標識要執行的具體操作和要執行操作的設備類型。定義了


-------------------------------------------------------- KeyGTK3Win32DialogBox ----
DialogBox    DialogBox巨集從對話方塊範本資源創建一個模態對話方塊。DialogBox不會返回控制，直到指定的回呼函數通過調用EndDialog函數終止模態對話方塊。DialogBox巨集使用DialogBoxParam函數。
語法
參數
【的hInstance】標識可執行檔包含對話方塊範本的模組實例。【lpTemplate】標識對話方塊範本。該參數是指向空值終止的字串的指標，該字串指定對話方塊範本的名稱或指定對話方塊範本的資源


-------------------------------------------------------- KeyGTK3Win32DialogBoxIndirect ----
DialogBoxIndirect    巨集DialogBoxIndirect從記憶體中的對話方塊範本創建一個模態對話方塊。DialogBoxIndirect不會返回控制，直到指定的回呼函數通過調用EndDialog函數終止模態對話方塊。DialogBoxIndirect巨集使用DialogBoxIndirectParam函數。
語法
參數
【的hInstance】標識創建對話方塊的模組的實例。【lpTemplate】指向包含DialogBoxIndirect用於創建對話方塊的範本的全域記憶體物件。對話方塊範本由描述該對話方塊的標題組成，


-------------------------------------------------------- KeyGTK3Win32DialogBoxIndirectParam ----
DialogBoxIndirectParam    DialogBoxIndirectParam函數從記憶體中的對話方塊範本創建一個模態對話方塊。在顯示對話方塊之前，該函數將應用程式定義的值傳遞給對話方塊過程作為WM_INITDIALOG消息的【lParam的】參數。應用程式可以使用此值初始化對話方塊控制項。
語法



-------------------------------------------------------- KeyGTK3Win32DialogBoxParam ----
DialogBoxParam    DialogBoxParam函數從對話方塊範本資源創建一個模態對話方塊。在顯示對話方塊之前，該函數將應用程式定義的值傳遞給對話方塊過程作為WM_INITDIALOG消息的【lParam的】參數。應用程式可以使用此值初始化對話方塊控制項。
語法
參數
【的hInstance】標識可執行檔包含對話方塊範本的模組實例。【lpTemplateName】標識對話方塊範本。該參數是指向空值終止的字串的指標，該字串指定對話方塊範本的名稱或指定對話方塊模


-------------------------------------------------------- KeyGTK3Win32DialogProc ----
DialogProc    DialogProc函數是一個應用程式定義的回呼函數，用於處理發送到模態或無強制回應對話方塊的消息。
語法
參數
【hwndDlg】標識對話方塊。【uMsg】指定消息。【wParam中】指定附加的消息特定資訊。【lParam的】指定附加的消息特定資訊。
返回值
除了回應WM_INITDIALOG消息之


-------------------------------------------------------- KeyGTK3Win32DisableThreadLibraryCalls ----
DisableThreadLibraryCalls    DisableThreadLibraryCalls函數禁用由【hLibModule】指定的動態連結程式庫（DLL）的DLL_THREAD_ATTACH和DLL_THREAD_DETACH通知。這可以減少一些應用程式的工作代碼集的大小。
語法
參數
【hLibModule】指定要禁用DLL_THREAD_ATTACH和DLL_THREAD_DETACH通知的動態連結程式庫模組。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為


-------------------------------------------------------- KeyGTK3Win32DisconnectNamedPipe ----
DisconnectNamedPipe    DisconnectNamedPipe函數將具名管道實例的伺服器端與用戶端進程斷開連接。
語法
參數
【hNamedPipe】標識具名管道的一個實例。此控制碼必須由CreateNamedPipe函數創建。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請


-------------------------------------------------------- KeyGTK3Win32DispatchMessage ----
DispatchMessage    DispatchMessage函數將消息分派給視窗過程。它通常用於調度由GetMessage函數檢索到的消息。
語法
參數
【LPMSG】指向包含該消息的MSG結構。
返回值
返回值指定視窗過程返回的值。雖然其含義取決於要分派的消息，但通常忽略返回值。
描述
MSG結構必須包含有效的消息值。如果【LPMS


-------------------------------------------------------- KeyGTK3Win32DlgDirList ----
DlgDirList    DlgDirList函數使用與指定路徑或檔案名匹配的所有檔的名稱填充指定的清單方塊。
語法
參數
【hDlg】標識包含清單方塊的對話方塊。【lpPathSpec】指向包含路徑或檔案名的以null結尾的字串。DlgDirList修改此字串，該字串應足夠長以包含修改。有關此參數的詳細資訊，


-------------------------------------------------------- KeyGTK3Win32DlgDirListComboBox ----
DlgDirListComboBox    DlgDirListComboBox函數使用目錄清單填充指定的下拉式列示方塊。它使用與指定屬性和路徑字串匹配的所有檔，驅動器和子目錄的名稱填充列表。
語法
參數
【hDlg】標識包含下拉式列示方塊的對話方塊。【lpPathSpec】指向以下形式的以null結尾的字串：[【drive】:][\]][【directory】\[...]][【filename】]如


-------------------------------------------------------- KeyGTK3Win32DlgDirSelectComboBoxEx ----
DlgDirSelectComboBoxEx    DlgDirSelectComboBoxEx函數從使用DlgDirListComboBox函數填充的下拉式列示方塊中檢索當前選擇。選擇被解釋為驅動器盤符，檔或目錄名稱。
語法
參數
【hDlg】標識包含下拉式列示方塊的對話方塊。【lpString】指向要接收所選路徑的緩衝區。【NCOUNT】指定【lpString】參數指向的緩衝區的長度（以字元為單位）。【nIDComboBox】


-------------------------------------------------------- KeyGTK3Win32DllEntryPoint ----
DllEntryPoint    DllEntryPoint函數是進入動態連結程式庫（DLL）的可選方法。如果使用該函數，則當進程和執行緒被初始化和終止時，或在調用LoadLibrary和FreeLibrary函數時，系統會調用該函數。DllEntryPoint是庫定義函數名稱的預留位置。實際名稱必須在構建時指定。有關更多資訊，請參閱開發工具附帶的文檔。
語法
參數
【hinstDLL】DLL的控制碼。該值是DLL的基址。DLL的HINSTANCE與DLL的HMODULE相同，因此【hinstDLL】可用於後續調用GetModuleFileName函數和其


-------------------------------------------------------- KeyGTK3Win32DocumentProperties ----
DocumentProperties    DocumentProperties函數檢索或修改印表機初始化資訊或顯示指定印表機的印表機配置對話方塊。
語法
參數
【的hWnd】標識印表機配置對話方塊的父視窗。【hPrinter】標識印表機物件。【pDeviceName】指向以null結尾的字串，指定要顯示印表機配置對話方塊的設備的名稱。【pDevMod


-------------------------------------------------------- KeyGTK3Win32DosDateTimeToFileTime ----
DosDateTimeToFileTime    DosDateTimeToFileTime函數將MS-DOS日期和時間值轉換為64位檔時間。
語法
參數
【wFatDate】指定MS-DOS日期。日期是一個包裝的16位值，格式如下：位元內容0-4當天（1-31）5-8Month (1 = January, 2 = February, and s


-------------------------------------------------------- KeyGTK3Win32DPtoLP ----
DPtoLP    DPtoLP函數將設備座標轉換為邏輯座標。轉換取決於設備上下文的映射模式，視窗和視口的起點和擴展區的設置以及世界變換。
語法
參數
【HDC】標識設備上下文。【lpPoints】指向POINT結構的陣列。每個POINT結構中包含的x座標和y座標將被轉換。【NCOUNT】指定陣列中的點數。
返回值
如果函數成功，返回值


-------------------------------------------------------- KeyGTK3Win32DragAcceptFiles ----
DragAcceptFiles    DragAcceptFiles函數註冊視窗是否接受刪除的檔。
語法
參數
【的hWnd】標識視窗是否接受丟棄的檔。【fAccept】指定由【的hWnd】參數標識的視窗是否接受刪除的檔。該值為TRUE以接受丟棄的檔;停止接受丟棄的檔是FALSE。
返回值



-------------------------------------------------------- KeyGTK3Win32DragDetect ----
DragDetect    [Now Supported on Windows NT]DragDetect函數捕獲滑鼠並跟蹤其移動，直到使用者釋放左按鈕，按ESC鍵或將滑鼠移動到指定點周圍的“拖動矩形”之外。拖動矩形的寬度和高度由GetSystemMetrics函數返回的SM_CXDRAG和SM_CYDRAG值指定。
語法
參數
【HWND】處理視窗接收滑鼠輸入。【pt】滑鼠的初始位置，螢幕座標。該函數通過使用該點確定拖動矩形的座標。
返回值
如果使用者將滑鼠懸停在拖動矩形的外部，同時向左按住左按鈕，則返回值不為零


-------------------------------------------------------- KeyGTK3Win32DragFinish ----
DragFinish    DragFinish函數釋放Windows分配用於將檔案名傳送到應用程式的記憶體。
語法
參數
【HDROP】標識描述刪除檔的結構。從WM_DROPFILES消息的【wParam中】參數檢索該控制碼。
返回值
此函數不返回值。



-------------------------------------------------------- KeyGTK3Win32DragQueryFile ----
DragQueryFile    DragQueryFile函數檢索已刪除檔的檔案名。
語法
參數
【HDROP】標識包含已刪除檔的檔案名的結構。【iFile的en】指定要查詢的檔的索引。如果【iFile的en】參數的值為0xFFFFFFFF，則DragQueryFile返回丟棄的文件


-------------------------------------------------------- KeyGTK3Win32DragQueryPoint ----
DragQueryPoint    DragQueryPoint函數在檔刪除時檢索滑鼠指標的位置。
語法
參數
【HDROP】標識描述丟棄檔的結構。【LPPT】指向POINT結構，該函數在檔刪除時填充滑鼠指標的座標。
返回值
如果在視窗的客戶區中發生了丟棄，則返回值不為零。如果在視窗的用戶端區


-------------------------------------------------------- KeyGTK3Win32DrawAnimatedRects ----
DrawAnimatedRects    [Now Supported on Windows NT]DrawAnimatedRects函數繪製一個線框矩形，並將其動畫化，以指示圖示的打開或視窗的最小化或最大化。
語法
參數
【HWND】處理矩形被剪切的視窗。如果此參數為NULL，則使用螢幕的工作區域。【拘留】該參數是保留的，必須為零。【lprcTo】指向SMALL_RECT結構，指定圖示或最小化視窗的位置和大小


-------------------------------------------------------- KeyGTK3Win32DrawCaption ----
DrawCaption    [Now Supported on Windows NT]DrawCaption函數繪製一個視窗標題。
語法
參數
【HWND】處理視窗的視窗，為視窗標題提供文本和圖示。【HDC】處理設備上下文。該函數將視窗標題繪製到此設備上下文中。【LPRC】指向RECT結構的指標，用於指定視窗標題的邊界矩形。【uFl


-------------------------------------------------------- KeyGTK3Win32DrawEdge ----
DrawEdge    DrawEdge函數繪製一個或多個矩形邊。
語法
參數
【HDC】標識設備上下文。【QRC】指向包含矩形的邏輯座標的RECT結構。【邊緣】指定要繪製的內邊緣和外邊緣的類型。此參數必須是一個內部邊框標誌和一個外部邊框標誌的組合。內部邊界標誌如下：值


-------------------------------------------------------- KeyGTK3Win32DrawEscape ----
DrawEscape    DrawEscape函數訪問通過圖形設備介面（GDI）無法直接使用的視頻顯示的繪圖函數。
語法



-------------------------------------------------------- KeyGTK3Win32DrawFocusRect ----
DrawFocusRect    DrawFocusRect函數在用於指示矩形具有焦點的樣式中繪製一個矩形。
語法
參數
【hDC】標識設備上下文。【LPRC】指向RECT結構，指定矩形的邏輯座標。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastErr


-------------------------------------------------------- KeyGTK3Win32DrawFrameControl ----
DrawFrameControl    DrawFrameControl函數繪製指定類型和樣式的框架控制項。
語法
參數
【HDC】標識要繪製控制項的視窗的設備上下文。【LPRC】指向RECT結構，其中包含框架控制的邊界矩形的邏輯座標。【UTYPE】指定要繪製的框架控制項的類型。此參數可以是以下值之一：值含義DFC


-------------------------------------------------------- KeyGTK3Win32DrawIcon ----
DrawIcon    DrawIcon函數在指定設備上下文的視窗的客戶區中繪製一個圖示。
語法
參數
【hDC】標識視窗的設備上下文。【X】指定圖示左上角的邏輯x座標。【Y】指定圖示左上角的邏輯y座標。【惠康】標識要繪製的圖示。Windows NT：圖示資源以前必須使用LoadIcon函數加


-------------------------------------------------------- KeyGTK3Win32DrawIconEx ----
DrawIconEx    DrawIconEx函數在指定的設備上下文的視窗的客戶區中繪製一個圖示或游標，執行指定的柵格操作，並按指定的方式拉伸或壓縮圖示或游標。
語法
參數
【HDC】標識視窗的設備上下文。【xLeft】指定圖示或游標左上角的邏輯x座標。【的y topsv】指定圖示或游標左上角的邏輯y座標。【惠康】標識要繪製的圖示或游標。該參數可以識別動畫游標。


-------------------------------------------------------- KeyGTK3Win32DrawInsert ----
DrawInsert    DrawInsert函數在指定的拖動清單方塊的父視窗中繪製插入圖示。
語法



-------------------------------------------------------- KeyGTK3Win32DrawMenuBar ----
DrawMenuBar    DrawMenuBar函數重新繪製指定視窗的功能表列。如果Windows創建視窗後功能表列發生更改，則必須調用此函數來繪製更改的功能表列。
語法
參數
【的hWnd】標識其功能表列需要重新繪製的視窗。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32DrawState ----
DrawState    [Now Supported on Windows NT]DrawState函數顯示圖像並應用視覺效果來指示狀態，例如禁用或預設狀態。
語法
參數
【HDC】標識要繪製的設備上下文。【HBR】如果【fuFlags】參數指定的狀態為DSS_MONO，則標識用於繪製圖像的畫筆。其他狀態忽略此參數。【lpOutputFunc】指向用於呈現圖像


-------------------------------------------------------- KeyGTK3Win32DrawStateProc ----
DrawStateProc    [Now Supported on Windows NT]DrawStateProc函數是一個應用程式定義的回呼函數，它為DrawState函數呈現複雜的圖像。
語法
參數
【HDC】標識要繪製的設備上下文。設備上下文是選擇點陣圖的存放裝置上下文，其尺寸至少與【cx】和【cy】參數指定的尺寸一樣大。【LDATA】指定應用程式傳遞給DrawState的圖像資訊。【W


-------------------------------------------------------- KeyGTK3Win32DrawStatusText ----
DrawStatusText    DrawStatusText函數以具有邊框的狀態視窗的樣式繪製指定的文本。
語法
參數
【HDC】處理視窗的顯示上下文。【LPRC】指向RECT結構的指標，其中包含在用戶端座標中繪製文本的矩形的位置。該函數將邊框繪製在指定矩形邊緣的內側。【pszText】指向指定要顯示的文本的


-------------------------------------------------------- KeyGTK3Win32DrawText ----
DrawText    DrawText函數在指定的矩形中繪製格式化的文本。它根據指定的方法格式化文字（展開選項卡，調整字元，斷開線等）。
語法
參數
【hDC】標識設備上下文。【lpString】指向要繪製的字串。如果【NCOUNT】參數為-1，則字串必須為空終止。【NCOUNT】指定字串中的字元數。如果【NCOUNT】為-1，則【


-------------------------------------------------------- KeyGTK3Win32DrawTextEx ----
DrawTextEx    [Now Supported on Windows NT]DrawTextEx函數在指定的矩形中繪製格式化的文本。
語法
參數
【HDC】標識要繪製的設備上下文。【lpchText】指向字串繪製。如果【cchText】參數為-1，則該字串必須為空終止。【cchText】指定由【lpchText】參數指定的字串的


-------------------------------------------------------- KeyGTK3Win32DuplicateHandle ----
DuplicateHandle    DuplicateHandle函數複製物件控制碼。
語法
參數
【hSourceProcessHandle】標識包含要複製的控制碼的過程。手柄必須具有PROCESS_DUP_HANDLE存取權限。有關詳細資訊，請參閱過程物件.【hSourceHandle】


-------------------------------------------------------- KeyGTK3Win32DuplicateToken ----
DuplicateToken    DuplicateToken函數創建一個新的訪問權杖，可以複製已存在的一個。
語法
參數
【ExistingTokenHandle】標識使用TOKEN_DUPLICATE存取權限打開的訪問權杖。【ImpersonationLevel】指定一個提供新權杖的模擬級別的SECURITY


-------------------------------------------------------- KeyGTK3Win32DuplicateTokenEx ----
DuplicateTokenEx    [New - Windows NT]DuplicateTokenEx函數創建一個新的訪問權杖，它與現有權杖重複。此函數可以創建主權杖或模擬權杖。
語法
參數
【hExistingToken】標識使用TOKEN_DUPLICATE存取權限打開的訪問權杖。【dwDesiredAccess】指定新權杖的請求的存取權限。DuplicateTokenEx函


-------------------------------------------------------- KeyGTK3Win32EditWordBreakProc ----
EditWordBreakProc    一個EditWordBreakProc函數是一個應用程式定義的回呼函數。類型為EDITWORDBREAKPROC的值是指向此類函數的指標。
語法
參數
【LPCH】指向編輯控制項的文本。【ichCurrent】指定文本緩衝區中字元位置的索引，該文本標識函數應該開始檢查分詞的點。【CCHen】指定編輯控制項文本中的字元數。【碼】指定回呼函數要執行


-------------------------------------------------------- KeyGTK3Win32EditWordBreakProcEx ----
EditWordBreakProcEx    [Now Supported on Windows NT]一個應用程式提供的回呼函數，用於確定單詞中斷的字元索引，或指定文本中字元的字元類和分詞標誌。LONG EditWordBreakProcEx燒焦 【* pchText】, LONG 【cchText】, BYTE 【bCharSet】, INT 【碼】 );
參數
【pchText】指向當前位置的文本。如果【碼】指定向左移動，那麼文本將在元素【pchText】 [-1]至【pchText】 [-【cchText】]和【pchText】 [0]中定義。對


-------------------------------------------------------- KeyGTK3Win32Ellipse ----
Ellipse    橢圓函數繪製一個橢圓。橢圓的中心是指定的邊界矩形的中心。使用當前筆勾畫橢圓，並使用當前畫筆填充橢圓。BOOL Ellipse(HDC 【HDC】,//處理設備上下文INT 【nLeftRect】,// x-coord。邊框的左上角INT 【nTopRect】,//的y座標。邊框的左上角INT 【nRightRect】,// x-coord。邊框的右下角INT 【nBottomRect】//的y座標。邊框矩形的右下角);
參數
【HDC】標識設備上下文。【nLeftRect】指定邊界矩形左上角的x座標。【nTopRect】指定邊界矩形左上角的y座標。【nRightRect】指定邊界矩形右下角的x座標。【nBotto


-------------------------------------------------------- KeyGTK3Win32EmptyClipboard ----
EmptyClipboard    EmptyClipboard函數清空剪貼板，並釋放剪貼板中資料的控制碼。然後，該函數將剪貼板的所有權分配給當前打開剪貼板的視窗。
語法
參數
此函數無參數。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
在致電EmptyClipboard之前，應用


-------------------------------------------------------- KeyGTK3Win32EnableEUDC ----
EnableEUDC    [Now Supported on Windows NT]EnableEUDC函數啟用或禁用最終使用者定義的字元（EUDC）。啟用EUDC允許文本輸出函數從EUDC字體中檢索有關最終使用者定義字元的資訊。禁用EUDC可防止輸出函數訪問這些字體。
語法
參數
【fEnableEUDC】動作標誌可以為TRUE啟用EUDC或FALSE以禁用它。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
應用程式在添加，修改或刪除E


-------------------------------------------------------- KeyGTK3Win32EnableMenuItem ----
EnableMenuItem    EnableMenuItem函數啟用，禁用或灰化指定的功能表項目。
語法
參數
【HMENU】標識功能表。【uIDEnableItem】指定由【uEnable】參數確定的要啟用，禁用或灰色的功能表項目。此參數指定功能表列，功能表或子功能表中的專案。【uEnable】指定控制【uID


-------------------------------------------------------- KeyGTK3Win32EnableScrollBar ----
EnableScrollBar    EnableScrollBar函數啟用或禁用一個或兩個捲軸箭頭。
語法
參數
【的hWnd】根據【wSBflags】參數的值標識視窗或捲軸控制項。【wSBflags】指定捲軸類型。此參數可以是以下值之一：值含義SB_BOTH啟用或禁用與指定視窗相關聯的水準和垂直捲動


-------------------------------------------------------- KeyGTK3Win32EnableWindow ----
EnableWindow    EnableWindow函數啟用或禁用滑鼠和鍵盤輸入到指定的視窗或控制項。當禁用輸入時，視窗不會接收到諸如滑鼠點擊和按鍵之類的輸入。當啟用輸入時，視窗接收所有輸入。
語法
參數
【的hWnd】標識要啟用或禁用的窗口。【bEnableid】指定是否啟用該視窗。如果此參數為TRUE，則啟用該視窗。如果參數為FALSE，視窗將被禁用。
返回值
如果視窗以前被禁用，則返


-------------------------------------------------------- KeyGTK3Win32EndDeferWindowPos ----
EndDeferWindowPos    EndDeferWindowPos函數在單個螢幕刷新週期中同時更新一個或多個視窗的位置和大小。
語法
參數
【hWinPosInfo】識別包含一個或多個視窗的大小和位置資訊的多視窗位置結構。該內部結構由BeginDeferWindowPos函數或最近調用DeferWindowPos函數返回。
返


-------------------------------------------------------- KeyGTK3Win32EndDialog ----
EndDialog    EndDialog函數會銷毀模態對話方塊，導致系統結束對話方塊的任何處理。
語法
參數
【hDlg】標識要銷毀的對話方塊。【如果函數失敗，返回值為-1。】從創建對話方塊的函數中指定要返回給應用程式的值。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述



-------------------------------------------------------- KeyGTK3Win32EndDoc ----
EndDoc    EndDoc函數結束列印工作。此函數替代ENDDOC印表機轉義。
語法
參數
【HDC】標識列印工作的設備上下文。
返回值
如果函數成功，返回值大於零。如果函數失敗，返回值小於或等於零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
完成列印工作後


-------------------------------------------------------- KeyGTK3Win32EndDocPrinter ----
EndDocPrinter    EndDocPrinter函數結束指定印表機的列印工作。
語法
參數
【hPrinter】標識應結束列印工作的印表機。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
如果通過調


-------------------------------------------------------- KeyGTK3Win32EndPage ----
EndPage    EndPage函數通知設備應用程式已完成寫入頁面。此函數通常用於指示設備驅動程式前進到新頁面。此函數將替換NEWFRAME印表機轉義。
語法
參數
【HDC】標識列印工作的設備上下文。
返回值
如果函數成功，返回值大於零。如果函數失敗，返回值小於或等於零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
調用EndPa


-------------------------------------------------------- KeyGTK3Win32EndPagePrinter ----
EndPagePrinter    EndPagePrinter函數指示一頁的結束和指定印表機的下一頁的開頭。
語法
參數
【hPrinter】標識頁面將結束的印表機。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
印表機對象控制碼


-------------------------------------------------------- KeyGTK3Win32EndPaint ----
EndPaint    EndPaint函數在指定的視窗中標記繪畫結束。每個調用BeginPaint函數都需要此函數，但只有在繪製完成之後。
語法
參數
【的hWnd】標識已重新繪製的視窗。【Lppant】指向PAINTSTRUCT結構，其中包含BeginPaint檢索到的繪畫資訊。
返回值
返回值始終為零。
描述
如果BeginPa


-------------------------------------------------------- KeyGTK3Win32EndPath ----
EndPath    EndPath函數關閉路徑括弧，並將括弧中定義的路徑選擇到指定的設備上下文中。
語法
參數
【HDC】標識選擇新路徑的設備上下文。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.GetLastError可能會返


-------------------------------------------------------- KeyGTK3Win32EndUpdateResource ----
EndUpdateResource    EndUpdateResource函數結束可執行檔中的資源更新。
語法
參數
【更新】指定更新控制碼。該控制碼由BeginUpdateResource函數返回。【// write flag】指定是否將資源更新寫入可執行檔。如果此參數為TRUE，則不會對可執行檔進行任何


-------------------------------------------------------- KeyGTK3Win32EnhMetaFileProc ----
EnhMetaFileProc    EnhMetaFileProc函數是一個應用程式定義的回呼函數，用於處理增強格式的圖中繼檔記錄。該函數由EnumEnhMetaFile函式呼叫。
語法
參數
【hDC】標識傳遞給EnumEnhMetaFile的設備上下文。【lpHTable】指向與圖中繼檔中的圖形物件（筆，畫筆等）相關聯的控制碼表。第一個條目包含增強型中繼檔控制碼。【lpEMFR】指


-------------------------------------------------------- KeyGTK3Win32EnumCalendarInfo ----
EnumCalendarInfo    EnumCalendarInfo函數枚舉指定區域設置的日曆資訊。【CalType】參數指定要枚舉的日曆資訊的類型。該函數將根據【日曆】參數的值返回指定的日曆資訊，用於該區域設置或單個請求的日曆的所有適用日曆。
語法
參數
【lpCalInfoEnumProc】指向應用程式定義的回呼函數。有關詳細資訊，請參閱EnumCalendarInfoProc回呼函數。【語言環境】指定檢索日曆資訊的區域設置。此參數可以是由


-------------------------------------------------------- KeyGTK3Win32EnumChildProc ----
EnumChildProc    EnumChildProc函數是一個應用程式定義的回呼函數，它通過調用EnumChildWindows函數來接收子視窗控制碼。
語法
參數
【HWND】標識EnumChildWindows中指定的父視窗的子視窗。【lParam的】指定EnumChildWindows中給出的應用程式定義值。
返回值
要繼續枚舉，回呼函數必須返


-------------------------------------------------------- KeyGTK3Win32EnumChildWindows ----
EnumChildWindows    EnumChildWindows函數通過將每個子視窗的控制碼傳遞給應用程式定義的回呼函數來枚舉屬於指定父視窗的子視窗。EnumChildWindows繼續，直到最後一個子視窗被枚舉或回呼函數返回FALSE。
語法
參數
【hWndParent】標識要視窗子視窗的父視窗。【lpEnumFunc】指向應用程式定義的回呼函數。有關回呼函數的更多資訊，請參閱EnumChildProc回呼函數。【lParam的】指定


-------------------------------------------------------- KeyGTK3Win32EnumClipboardFormats ----
EnumClipboardFormats    EnumClipboardFormats函數可以枚舉剪貼板上當前可用的資料格式。剪貼板資料格式存儲在有序列表中。要執行剪貼板資料格式的枚舉，您可以對EnumClipboardFormats函數進行一系列調用。對於每個呼叫，【格式】參數指定可用的剪貼板格式，該函數返回下一個可用的剪貼板格式。
語法
參數
【格式】指定已知可用的剪貼板格式。要啟動剪貼板格式的枚舉，請將【格式】設置為零。當【格式】為零時，該函數將檢索第一個可用的剪貼板格式。對於枚舉期間的後續呼叫，將【格式】設置為上一次EnumC


-------------------------------------------------------- KeyGTK3Win32EnumCodePagesProc ----
EnumCodePagesProc    一個EnumCodePagesProc函數是一個應用程式定義的回呼函數。作為調用EnumSystemCodePages 函數的結果，它被調用，並且接收到一個指向包含內碼表識別字的字串緩衝區的指標。
語法
參數
【lpCodePageString】指向包含空值終止的內碼表識別字字串的字串緩衝區。
返回值
要繼續枚舉，回呼函數應該返回TRUE。要停止枚舉，回呼函數應返回FALSE。
描述



-------------------------------------------------------- KeyGTK3Win32EnumDateFormats ----
EnumDateFormats    EnumDateFormats函數枚舉可用於指定區域設置的長日期格式或短日期格式，包括任何備用日曆的日期格式。【dwFlags中】參數的值確定是否列舉長日期或短日期格式。該函數通過將日期格式字串指標（每次一個）傳遞給指定的應用程式定義的回呼函數來枚舉日期格式。這將繼續，直到找到最後的日期格式或回呼函數返回FALSE。
語法
參數
【lpDateFmtEnumProc】指向應用程式定義的回呼函數。EnumDateFormats函數通過重複調用此回呼函數來枚舉日期格式。有關詳細資訊，請參閱EnumDateFormatsP


-------------------------------------------------------- KeyGTK3Win32EnumDateFormatsProc ----
EnumDateFormatsProc    一個EnumDateFormatsProc函數是一個應用程式定義的回呼函數。它被調用為調用EnumDateFormats函數的結果，並且接收到包含日期格式字串的字串緩衝區的指標。
語法
參數
【lpDateFormatString】指向包含以null結尾的日期格式字串的字串緩衝區。該字串是長或短日期格式，具體取決於傳遞給EnumDateFormats的【dwFlags中】參


-------------------------------------------------------- KeyGTK3Win32EnumDependentServices ----
EnumDependentServices    EnumDependentServices函數枚舉依賴於另一個指定服務的服務;也就是指定的服務必須在枚舉服務運行之前運行。提供每個從屬服務的名稱和狀態。
語法
參數
【hService】處理標識服務。該控制碼由OpenService或CreateService函數返回，並且必須具有SERVICE_ENUMERATE_DEPENDENTS存取權限。【dwSe


-------------------------------------------------------- KeyGTK3Win32EnumDesktopProc ----
EnumDesktopProc    EnumDesktopProc函數是一個應用程式定義的回呼函數，它通過調用EnumDesktops函數接收桌面名稱。
語法
參數
【lpszDesktop】指向桌面的以null結尾的名稱。【lParam的】指定EnumDesktops函數中給出的應用程式定義值。
返回值
要繼續枚舉，回呼函數必須返回TRUE。要停止


-------------------------------------------------------- KeyGTK3Win32EnumDesktops ----
EnumDesktops    EnumDesktops函數枚舉分配給呼叫進程的視窗台中的所有桌面。該函數通過將每個桌面的名稱依次傳遞給應用程式定義的回呼函數來實現。
語法
參數
【hwinsta】指定要列舉桌面的視窗台的控制碼。CreateWindowStation，GetProcessWindowStation和OpenWindowStation函數返回一個視窗工位元


-------------------------------------------------------- KeyGTK3Win32EnumDesktopWindows ----
EnumDesktopWindows    EnumDesktopWindows函數通過將每個視窗的控制碼依次傳遞給應用程式定義的回呼函數來枚舉桌面中的所有視窗。
語法
參數
【//分配給該執行緒的桌面的控制碼】指定要將視窗枚舉的桌面的控制碼。CreateDesktop，OpenDesktop和GetThreadDesktop函數返回一個桌面控制碼。【lpfn】指向應用程


-------------------------------------------------------- KeyGTK3Win32EnumDisplaySettings ----
EnumDisplaySettings    EnumDisplaySettings函數獲取有關顯示裝置的圖形模式之一的資訊。您可以通過對此函數進行一系列調用來獲取所有顯示裝置的圖形模式的資訊。
語法
參數
【lpszDeviceName】指向以空值終止的字串，指定顯示裝置，其顯示模式的函數將獲取有關的資訊。此參數可以為NULL。NULL值指定電腦上正在運行調用執行緒的當前顯示裝置。如果【lp


-------------------------------------------------------- KeyGTK3Win32EnumEnhMetaFile ----
EnumEnhMetaFile    EnumEnhMetaFile函數通過檢索每個記錄並將其傳遞給指定的回呼函數來枚舉增強格式的圖中繼檔中的記錄。應用程式提供的回呼函數根據需要處理每個記錄。枚舉繼續，直到最後一個記錄被處理或當回呼函數返回零時。
語法
參數
【HDC】標識設備上下文。該控制碼被傳遞給回呼函數。【HEMF】識別增強的圖中繼檔。【lpEnhMetaFunc】指向應用程式提供的回呼函數。有關詳細資訊，請參閱EnhMetaFileProc


-------------------------------------------------------- KeyGTK3Win32EnumFontFamExProc ----
EnumFontFamExProc    [Now Supported on Windows NT]EnumFontFamExProc函數是一個應用程式提供的回呼函數，用於處理EnumFontFamiliesEx函數枚舉的字體。系統為每個枚舉的字體調用一次這個回呼函數。
語法
參數
【lpelfe】指向包含有關字體邏輯屬性的資訊的ENUMLOGFONTEX結構。【lpntme】指向包含有關字體的物理屬性的資訊的結構。該函數對於TrueType字體使用NEWTEXTMET


-------------------------------------------------------- KeyGTK3Win32EnumFontFamilies ----
EnumFontFamilies    EnumFontFamilies函數枚舉指定設備上可用的指定字型家族中的字體。此函數取代EnumFonts函數。
語法
參數
【HDC】標識設備上下文。【lpszFamily】指向指定所需字體的家族名稱的以null結尾的字串。如果【lpszFamily】為NULL，則EnumFontFamilies隨機選擇並枚舉


-------------------------------------------------------- KeyGTK3Win32EnumFontFamiliesEx ----
EnumFontFamiliesEx    [Now Supported on Windows NT]EnumFontFamiliesEx函數枚舉系統中符合LOGFONT結構指定的字體特徵的所有字體。EnumFontFamiliesEx枚舉基於字體名稱，字元集或兩者的字體。建議基於Win32的應用程式使用此函數而不是EnumFontFamilies列舉字體。
語法
參數
【HDC】標識設備上下文。【lpLogfont】指向LOGFONT結構，其中包含有關要枚舉的字體的資訊。該函數檢查這些成員：會員描述為lfcharset如果設置為DEFAULT_CHARSE


-------------------------------------------------------- KeyGTK3Win32EnumFontFamProc ----
EnumFontFamProc    EnumFontFamProc函數是一個應用程式定義的回呼函數，用於檢索描述可用字體的資料。
語法
參數
【lpelf】指向包含有關字體邏輯屬性的資訊的ENUMLOGFONT結構。此結構在本地定義。【lpntm】指向NEWTEXTMETRIC結構，其中包含有關字體的物理屬性的資訊，如果該字體是T


-------------------------------------------------------- KeyGTK3Win32EnumFonts ----
EnumFonts    EnumFonts函數列舉指定設備上可用的字體。對於具有指定字體名稱的每個字體，EnumFonts函數檢索有關該字體的資訊，並將其傳遞給應用程式定義的回呼函數。該回呼函數可以根據需要處理字體資訊。枚舉繼續，直到沒有更多的字體或回呼函數返回零。提供此函數以相容早期版本的Microsoft Windows。基於Win32的應用程式應使用EnumFontFamilies函數。
語法
參數
【HDC】標識設備上下文。【lpFaceName】指向一個以null結尾的字串，指定所需字體的字體名稱。如果【lpFaceName】為NULL，則EnumFonts隨機選擇並枚舉每種可用字


-------------------------------------------------------- KeyGTK3Win32EnumFontsProc ----
EnumFontsProc    EnumFontsProc函數是一個應用程式定義的回呼函數，用於處理來自EnumFonts函數的字體資料。
語法
參數
【lplf】指向LOGFONT結構，其中包含有關字體邏輯屬性的資訊。【lptm】指向包含有關字體的物理屬性的資訊的TEXTMETRIC結構。【dwType】指定字體的類型。此參數可以是以下值


-------------------------------------------------------- KeyGTK3Win32EnumForms ----
EnumForms    EnumForms函數枚舉指定印表機支援的表單。
語法
參數
【hPrinter】標識應列舉表單的印表機。【水準】指定【P成型】指向的結構的版本。此值必須為1。【P成型】指向FORM_INFO_1結構。【cbBuf】指定【P成型】指向的緩衝區的大小（以


-------------------------------------------------------- KeyGTK3Win32EnumICMProfiles ----
EnumICMProfiles    EnumICMProfiles函數枚舉系統支援的不同色彩設定檔，用於指定的設備上下文。
語法
參數
【HDC】處理設備上下文。【lpICMEnumFunc】指向應用程式定義的回呼函數。有關詳細資訊，請參閱EnumICMProfilesProc函數。【lParam的】應用程式提供的資料。將數


-------------------------------------------------------- KeyGTK3Win32EnumICMProfilesProc ----
EnumICMProfilesProc    EnumICMProfilesProc函數是一個應用程式定義的回呼函數，用於處理來自EnumICMProfiles函數的色彩設定檔資料。
語法
參數
【lpszFilenamenl】指向指定色彩設定檔檔案名稱的以空值終止的字串的指標。【lParam的】應用程式提供的資料由EnumICMProfiles函數傳遞。
返回值
返回一個正


-------------------------------------------------------- KeyGTK3Win32EnumJobs ----
EnumJobs    EnumJobs函數初始化JOB_INFO_1或JOB_INFO_2結構的陣列，其中包含描述指定印表機的指定列印工作的資料。
語法
參數
【hPrinter】處理印表機物件，該印表機物件的函數將枚舉列印工作。【FirstJob】指定要列舉的第一個列印工作的列印佇列中的從零開始的位置。例如，值為0表示枚舉應從列印佇列中的第一個打


-------------------------------------------------------- KeyGTK3Win32EnumLocalesProc ----
EnumLocalesProc    一個EnumLocalesProc函數是一個應用程式定義的回呼函數。作為調用EnumSystemLocales 函數的結果，它被調用，並且接收到一個指向包含地區設定識別碼的字串緩衝區的指標。
語法
參數
【lpLocaleString】指向包含空值終止的地區設定識別碼字串的字串緩衝區。請注意，【lpLocaleString】應為EnumLocalesProc的Unicode（W）版本的L


-------------------------------------------------------- KeyGTK3Win32EnumMetaFile ----
EnumMetaFile    EnumMetaFile函數通過檢索每個記錄並將其傳遞給指定的回呼函數來枚舉Windows格式的圖中繼檔中的記錄。應用程式提供的回呼函數根據需要處理每個記錄。枚舉繼續，直到最後一個記錄被處理或當回呼函數返回零時。提供此函數以相容早期版本的Microsoft Windows。基於Win32的應用程式應使用EnumEnhMetaFile函數。
語法
參數
【HDC】標識設備上下文。該控制碼被傳遞給回呼函數。【HMF】標識Windows格式的圖中繼檔。【lpMetaFunc】指向應用程式提供的回呼函數。有關詳細資訊，請參閱EnumMetaFile


-------------------------------------------------------- KeyGTK3Win32EnumMetaFileProc ----
EnumMetaFileProc    EnumMetaFileProc函數是一個應用程式定義的回呼函數，用於處理Windows格式的圖中繼檔記錄。該函數由EnumMetaFile函式呼叫。提供此函數以相容早期版本的Microsoft Windows。基於Win32的應用程式應使用EnhMetaFileProc和EnumEnhMetaFile函數。
語法
參數
【hDC】標識傳遞給EnumMetaFile的設備上下文。【lpHTable】指向與圖中繼檔中的圖形物件（筆，畫筆等）相關聯的控制碼表。【lpMFR】指向圖中繼檔中的一個記錄。不應修改此記錄。


-------------------------------------------------------- KeyGTK3Win32EnumMonitors ----
EnumMonitors    EnumMonitors函數使用描述指定伺服器的監視器的資料初始化結構陣列。
語法
參數
【PNAME】指向以空字元結尾的字串，指定監視器所在的伺服器的名稱。如果此參數為NULL，則枚舉本地監視器。【水準】指定【//指向監視器資訊的指標。結構體】指向的結構的版本。【//指向監視


-------------------------------------------------------- KeyGTK3Win32EnumObjects ----
EnumObjects    EnumObjects函數枚舉可用於指定設備上下文的筆或畫筆。該函數為每個可用物件調用一次應用程式定義的回呼函數，提供描述該物件的資料。EnumObjects繼續調用回呼函數，直到回呼函數返回零或直到所有物件都被枚舉為止。
語法
參數
【HDC】標識設備上下文。【nObjectType】指定對象類型。該參數可以是OBJ_BRUSH或OBJ_PEN。【lpObjectFunc】指向應用程式定義的回呼函數的指標。有關回呼函數的


-------------------------------------------------------- KeyGTK3Win32EnumObjectsProc ----
EnumObjectsProc    EnumObjectsProc函數是一個應用程式定義的回呼函數，用於處理由EnumObjects函數提供的物件資料。
語法
參數
【lpLogObject】指向描述物件屬性的LOGPEN或LOGBRUSH結構。【的lpData】指向由EnumObjects函數傳遞的應用程式定義的資料。
返回值
此函數不返回值。



-------------------------------------------------------- KeyGTK3Win32EnumPorts ----
EnumPorts    EnumPorts函數枚舉可用於在指定伺服器上列印的埠。
語法
參數
【PNAME】指向以空值終止的字串，指定要列印埠的伺服器的名稱。如果【PNAME】為NULL，則該函數枚舉本地電腦的印表機埠。【水準】指定【pports】指向的資料結構類型。該值可以


-------------------------------------------------------- KeyGTK3Win32EnumPrinterData ----
EnumPrinterData    [New - Windows NT]EnumPrinterData函數枚舉指定印表機的配置資料。印表機的配置資料由一組命名和類型值組成。EnumPrinterData函數可以在每次調用它時獲取這些值之一及其名稱和類型代碼。連續調用EnumPrinterData函數以獲取印表機的所有配置資料值。印表機配置資料存儲在註冊表中。列舉印表機配置資料時，應避免調用可能更改資料的註冊表函數。
語法
參數
【hPrinter】處理要獲取配置資料的印表機。通過調用OpenPrinter函數獲取此印表機控制碼。【dwIndex】指定要檢索的配置資料值的索引值。對於給定的印表機控制碼，首次調用EnumP


-------------------------------------------------------- KeyGTK3Win32EnumPrinterDrivers ----
EnumPrinterDrivers    EnumPrinterDrivers函數列舉了指定印表機伺服器上安裝的所有印表機驅動程式。
語法
參數
【PNAME】指向以空值終止的字串，指定要列舉印表機驅動程式的伺服器的名稱。如果【PNAME】為NULL，則該函數枚舉本地電腦的印表機驅動程式。【pEnvironment】指向指定環境的


-------------------------------------------------------- KeyGTK3Win32EnumPrinters ----
EnumPrinters    EnumPrinters函數列舉了可用的印表機，印表伺服器，域或列印提供商。
語法
參數
【旗】指定函數應枚舉的列印對象的類型。該值可以是以下常量的組合：值含義PRINTER_ENUM_LOCAL該函數忽略【名稱】參數，並枚舉本地安裝的印表機。Windows 95：該函數還將枚舉


-------------------------------------------------------- KeyGTK3Win32EnumPrintProcessorDatatypes ----
EnumPrintProcessorDatatypes    EnumPrintProcessorDatatypes函數枚舉指定的列印處理器支援的資料類型。
語法
參數
【PNAME】指向以空字元結尾的字串，指定列印處理器所在的伺服器的名稱。如果此參數為NULL，則枚舉本地列印處理器的資料類型。【pPrintProcessorName】指向一個空值終止的字


-------------------------------------------------------- KeyGTK3Win32EnumPrintProcessors ----
EnumPrintProcessors    EnumPrintProcessors函數列舉了指定伺服器上安裝的列印處理器。
語法
參數
【PNAME】指向以空字元結尾的字串，指定列印處理器所在的伺服器的名稱。如果此參數為NULL，則枚舉本地列印處理器。【pEnvironment】指向指定環境的以null結尾的字串。例如，


-------------------------------------------------------- KeyGTK3Win32EnumProps ----
EnumProps    EnumProps函數通過將它們逐個傳遞給指定的回呼函數來枚舉視窗的屬性清單中的所有條目。EnumProps繼續，直到最後一個條目被枚舉，或者回呼函數返回FALSE。
語法
參數
【的hWnd】標識要枚舉屬性清單的視窗。【lpEnumFunc】指向回呼函數。有關回呼函數的更多資訊，請參閱PropEnumProc函數。
返回值
返回值指定回呼函數返回的最後一個值。如


-------------------------------------------------------- KeyGTK3Win32EnumPropsEx ----
EnumPropsEx    EnumPropsEx函數通過將它們逐個傳遞給指定的回呼函數來枚舉視窗的屬性清單中的所有條目。EnumPropsEx繼續，直到最後一個條目被枚舉，或者回呼函數返回FALSE。
語法
參數
【的hWnd】標識要枚舉屬性清單的視窗。【lpEnumFunc】指向回呼函數。有關回呼函數的更多資訊，請參閱PropEnumProcEx函數。【lParam的】包含要傳遞給回呼函數的應用程式


-------------------------------------------------------- KeyGTK3Win32EnumRegisterWordProc ----
EnumRegisterWordProc    EnumRegisterWordProc函數是一個應用程式定義的回呼函數，用於處理來自ImmEnumRegisterWord函數的寄存器字串的資料。
語法
參數
【lpszReading】指向指定匹配的讀取字串的以null結尾的字串的指標。【dwStyle】寄存器字串的樣式【lpszStringhu】指向指定匹配寄存器字串的以null結尾的字


-------------------------------------------------------- KeyGTK3Win32EnumResLangProc ----
EnumResLangProc    EnumResLangProc函數是一個應用程式定義的回呼函數，它通過調用EnumResourceLanguages函數接收資來源語言。
語法
參數
【HMODULE】標識可執行檔包含要列舉語言的資源的模組。如果此參數為NULL，則該函數枚舉用於創建當前進程的模組中的資來源語言。【lpszType】指向一個以null結束的字串，指定要枚


-------------------------------------------------------- KeyGTK3Win32EnumResNameProc ----
EnumResNameProc    EnumResNameProc函數是一個應用程式定義的回呼函數，它通過調用EnumResourceNames函數接收資源名稱。
語法
參數
【HMODULE】標識可執行檔包含名稱被枚舉的資源的模組。如果此參數為NULL，則該函數枚舉用於創建當前進程的模組中的資源名稱。【lpszType】指向一個以null結尾的字串，指定名稱


-------------------------------------------------------- KeyGTK3Win32EnumResourceLanguages ----
EnumResourceLanguages    EnumResourceLanguages函數在模組中搜索指定類型和名稱的每個資源，並將其定位的每個資源的語言傳遞給定義的回呼函數。
語法
參數
【HMODULE】標識可執行檔包含要列舉語言的資源的模組。如果此參數為NULL，則該函數枚舉用於創建當前進程的模組中的資來源語言。【//數值型別緩衝區的位址】指向一個以null結尾的字串，指


-------------------------------------------------------- KeyGTK3Win32EnumResourceNames ----
EnumResourceNames    EnumResourceNames函數在模組中搜索指定類型的每個資源，並將其定位的每個資源的名稱傳遞給應用程式定義的回呼函數。
語法
參數
【HMODULE】標識可執行檔包含要枚舉名稱的資源的模組。如果此參數為NULL，則該函數枚舉用於創建當前進程的模組中的資源名稱。【lpszType】指向一個以null結尾的字串，指定名稱


-------------------------------------------------------- KeyGTK3Win32EnumResourceTypes ----
EnumResourceTypes    EnumResourceTypes函數在模組中搜索資源，並將其找到的每種資源類型傳遞給應用程式定義的回呼函數。
語法
參數
【HMODULE】標識可執行檔包含要枚舉類型的資源的模組。如果此參數為NULL，則該函數枚舉用於創建當前進程的模組中的資源類型。【lpEnumFunc】指向每個枚舉資源類型的回呼函數。有關


-------------------------------------------------------- KeyGTK3Win32EnumResTypeProc ----
EnumResTypeProc    EnumResTypeProc函數是一個應用程式定義的回呼函數，它通過調用EnumResourceTypes函數接收資源類型。
語法
參數
【HMODULE】標識可執行檔包含要枚舉類型的資源的模組。如果此參數為NULL，則該函數枚舉用於創建當前進程的模組中的資源類型。【lpszType】指向一個以null結尾的字串，指定要枚


-------------------------------------------------------- KeyGTK3Win32EnumServicesStatus ----
EnumServicesStatus    EnumServicesStatus函數枚舉指定的服務控制管理器資料庫中的服務。提供每個服務的名稱和狀態。
語法
參數
【hSCManager】標識服務控制管理器資料庫。OpenSCManager函數返回此控制碼，該控制碼必須具有SC_MANAGER_ENUMERATE_SERVICE存取權限。【dwServic


-------------------------------------------------------- KeyGTK3Win32EnumSystemCodePages ----
EnumSystemCodePages    EnumSystemCodePages函數枚舉系統上安裝或支援的內碼表。【dwFlags中】參數確定函數是枚舉已安裝或支援的內碼表。該函數通過將內碼表識別字（一次一個）傳遞給指定的應用程式定義的回呼函數來枚舉內碼表。這將繼續，直到所有已安裝或支持的內碼表識別字都傳遞給回呼函數，或者回呼函數返回FALSE。
語法
參數
【lpCodePageEnumProc】指向應用程式定義的回呼函數。EnumSystemCodePages函數通過重複調用此回呼函數來枚舉內碼表。有關詳細資訊，請參閱EnumCodePage


-------------------------------------------------------- KeyGTK3Win32EnumSystemLocales ----
EnumSystemLocales    EnumSystemLocales函數枚舉系統上安裝或支援的區域設置。【dwFlags中】參數確定函數是枚舉已安裝或支援的系統地區設定。該函數通過將locale識別字（一次一個）傳遞給指定的應用程式定義的回呼函數來枚舉語言環境。這將繼續，直到所有已安裝或受支持的地區設定識別碼已傳遞到回呼函數或回呼函數返回FALSE。
語法
參數
【lpLocaleEnumProc】指向應用程式定義的回呼函數。EnumSystemLocales函數通過重複調用此回呼函數來枚舉語言環境。有關詳細資訊，請參閱EnumLocalesProc


-------------------------------------------------------- KeyGTK3Win32EnumTaskWindows ----
EnumTaskWindows              EnumTaskWindows函數已過時。它已被EnumThreadWindows函數所取代。為了保持16位元應用程式的相容性，EnumTaskWindows已被替換為調用EnumThreadWindows的宏。之前的應用程式可以繼續調用EnumTaskWindows，但新的應用程式應該使用EnumThreadWindows.


-------------------------------------------------------- KeyGTK3Win32EnumThreadWindows ----
EnumThreadWindows    EnumThreadWindows函數通過將每個視窗的控制碼傳遞給應用程式定義的回呼函數來枚舉與執行緒相關聯的所有非小時視窗。EnumThreadWindows繼續，直到最後一個視窗被枚舉或回呼函數返回FALSE。要枚舉特定視窗的子視窗，請使用EnumChildWindows函數。此函數取代EnumTaskWindows函數。
語法
參數
【dwThreadId】標識要列舉視窗的執行緒。【lpfn】指向應用程式定義的回呼函數。有關回呼函數的更多資訊，請參閱EnumThreadWndProc回呼函數。【lParam的】指定要傳遞給


-------------------------------------------------------- KeyGTK3Win32EnumThreadWndProc ----
EnumThreadWndProc    EnumThreadWndProc函數是一個應用程式定義的回呼函數，它通過調用EnumThreadWindows函數接收與執行緒關聯的視窗控制碼。
語法
參數
【HWND】標識與EnumThreadWindows函數中指定的執行緒相關聯的視窗。【lParam的】指定EnumThreadWindows函數中給出的應用程式定義值。
返回值
要繼續枚舉


-------------------------------------------------------- KeyGTK3Win32EnumTimeFormats ----
EnumTimeFormats    EnumTimeFormats函數枚舉可用於指定區域設置的時間格式。該函數通過將指標傳遞給包含應用程式定義回呼函數的時間格式的字串緩衝區來枚舉時間格式。它繼續這樣做，直到找到最後一個格式或回呼函數返回FALSE。
語法
參數
【lpTimeFmtEnumProc】指向應用程式定義的回呼函數。有關詳細資訊，請參閱EnumTimeFormatsProc回呼函數。【語言環境】指定區域設置以檢索時間格式資訊。此參數可以是


-------------------------------------------------------- KeyGTK3Win32EnumTimeFormatsProc ----
EnumTimeFormatsProc    一個EnumTimeFormatsProc函數是一個應用程式定義的回呼函數。它被稱為調用EnumTimeFormats函數的結果，並且接收到一個指向包含時間格式字串的字串緩衝區的指標。
語法
參數
【lpTimeFormatString】指向包含空終止時間格式字串的字串緩衝區。請注意，【lpTimeFormatString】應為EnumTimeFormatsProc的Unicode


-------------------------------------------------------- KeyGTK3Win32EnumWindows ----
EnumWindows    EnumWindows函數通過將每個視窗的控制碼依次傳遞給應用程式定義的回呼函數來枚舉螢幕上的所有頂級視窗。EnumWindows繼續，直到最後一個頂級視窗被枚舉或回呼函數返回FALSE。
語法
參數
【lpEnumFunc】指向應用程式定義的回呼函數。有關詳細資訊，請參閱EnumWindowsProc回呼函數。【lParam的】指定要傳遞給回呼函數的32位元應用程式定義值。
返回值
如


-------------------------------------------------------- KeyGTK3Win32EnumWindowsProc ----
EnumWindowsProc    EnumWindowsProc函數是一個應用程式定義的回呼函數，它通過調用EnumWindows或EnumDesktopWindows函數接收頂級視窗控制碼。
語法
參數
【HWND】標識頂級視窗。【lParam的】指定EnumWindows或EnumDesktopWindows中給出的應用程式定義值。
返回值
要繼續枚舉，回呼函數必須返回TRUE;要停止


-------------------------------------------------------- KeyGTK3Win32EnumWindowStationProc ----
EnumWindowStationProc    EnumWindowStationProc函數是一個應用程式定義的回呼函數，它通過調用EnumWindowStations函數接收視窗站名稱。
語法
參數
【lpszWindowStation】指向一個視窗站的空終止名稱。【lParam的】指定EnumWindowStations函數中給出的應用程式定義值。
返回值
要繼續枚舉，回呼函數必須


-------------------------------------------------------- KeyGTK3Win32EnumWindowStations ----
EnumWindowStations    EnumWindowStations函數通過將每個視窗站的名稱依次傳遞給應用程式定義的回呼函數來枚舉系統中的所有視窗。
語法
參數
【lpEnumFunc】指向應用程式定義的EnumWindowStationProc回呼函數。【lParam的】指定要傳遞給回呼函數的32位元應用程式定義值。
返回值
如果函數成功，返回值


-------------------------------------------------------- KeyGTK3Win32EqualPrefixSid ----
EqualPrefixSid    EqualPrefixSid函數測試兩個安全性識別碼（SID）首碼值以獲得相等性。SID首碼是除最後一個子許可權值之外的整個SID。
語法
參數
【pSid1】指向第一個SID結構進行比較。這種結構被認為是有效的。【pSid2】指向第二個SID結構進行比較。它也被認為是有效的。
返回值
如果SID首碼相等，則返回值不為零。如果SI


-------------------------------------------------------- KeyGTK3Win32EqualRect ----
EqualRect    EqualRect函數通過比較其左上角和右下角的座標來確定兩個指定的矩形是否相等。
語法
參數
【lprc2】指向包含第一個矩形的邏輯座標的RECT結構。【If the two rectangles are identical, the return value is nonzero.


-------------------------------------------------------- KeyGTK3Win32EqualRgn ----
EqualRgn    EqualRgn函數檢查兩個指定的區域，以確定它們是否相同。如果它們的大小和形狀相等，則該函數考慮兩個區域相同。
語法
參數
【hSrcRgn1】識別一個地區。【hSrcRgn2】識別一個地區。
返回值
如果兩個區域相等，則返回值不為零。如果兩個區域不相等，返回值為零。返回值ERROR表示區域控制碼中的至少一個無


-------------------------------------------------------- KeyGTK3Win32EqualSid ----
EqualSid    EqualSid函數測試兩個安全性識別碼（SID）值以獲得相等性。兩個SID必須完全匹配以被認為是相等的。
語法
參數
【pSid1】指向第一個SID結構進行比較。這種結構被認為是有效的。【pSid2】指向第二個SID結構進行比較。它也被認為是有效的。
返回值
如果SID結構相等，則返回值不為零。如果SI


-------------------------------------------------------- KeyGTK3Win32EraseTape ----
EraseTape    EraseTape函數會刪除磁帶的全部或部分。
語法
參數
【hDevice】標識要擦除磁帶的設備。該控制碼是通過使用CreateFile函數創建的。【dwEraseType】指定擦除技術。此參數可以是以下值之一：值描述TAPE_ERASE_LONG將


-------------------------------------------------------- KeyGTK3Win32Escape ----
Escape    Escape函數允許應用程式訪問不能通過GDI直接使用的特定設備的函數。由應用程式進行的Escape呼叫轉換併發送給驅動程式。
語法
參數
【HDC】標識設備上下文。【nEscape】指定要執行的轉義函數。此參數必須是預定義的轉義值之一。如果應用程式定義私有轉義值，請使用ExtEscape函數。【cbInput】指定【lpvIn


-------------------------------------------------------- KeyGTK3Win32EscapeCommFunction ----
EscapeCommFunction    EscapeCommFunction函數指示指定的通信設備執行擴展函數。
語法
參數
【HFILE】識別通信設備。CreateFile函數返回此控制碼。【dwFunc】指定要執行的擴展函數的代碼。此參數可以是以下值之一：值含義CLRDTR清除DTR（資料終端就緒）信號。CLRR


-------------------------------------------------------- KeyGTK3Win32ExcludeClipRect ----
ExcludeClipRect    ExcludeClipRect函數創建一個新的裁剪區域，由現有裁剪區域減去指定的矩形組成。
語法
參數
【HDC】標識設備上下文。【nLeftRect】指定矩形左上角的邏輯x座標。【nTopRect】指定矩形左上角的邏輯y座標。【nRightRect】指定矩形右下角的邏輯x座標。【nBotto


-------------------------------------------------------- KeyGTK3Win32ExcludeUpdateRgn ----
ExcludeUpdateRgn    ExcludeUpdateRgn函數通過從裁剪區域中排除視窗中的更新區域來防止在視窗的無效區域內繪製。
語法
參數
【hDC】標識與裁剪區域相關聯的設備上下文。【的hWnd】標識要更新的視窗。
返回值
返回值指定排除區域的複雜度;它可以是以下值之一：值含義COMPLEXREGION區域由多個矩形組成。


-------------------------------------------------------- KeyGTK3Win32ExitProcess ----
ExitProcess    ExitProcess函數結束進程及其所有執行緒。
語法
參數
【uExitCode】指定進程的退出代碼以及由於此調用而終止的所有執行緒。使用GetExitCodeProcess函數來檢索進程的退出值。使用GetExitCodeThread函數來檢索執行緒的


-------------------------------------------------------- KeyGTK3Win32ExitThread ----
ExitThread    ExitThread函數結束執行緒。
語法
參數
【dwExitCode】指定調用執行緒的退出代碼。使用GetExitCodeThread函數檢索執行緒的退出代碼。
返回值
此函數不返回值。
描述
ExitThread是退出執行緒的首選方


-------------------------------------------------------- KeyGTK3Win32ExitWindows ----
ExitWindows    ExitWindows函數將關閉當前使用者。
語法
參數
【//保留，必須設置為零】Reserved; must be zero.【Windows does not allow new applications to start up during


-------------------------------------------------------- KeyGTK3Win32ExitWindowsEx ----
ExitWindowsEx    ExitWindowsEx函數登出，關閉或關閉並重新開機系統。
語法
參數
【uFlags】指定關機類型。此參數必須是以下值的某種組合：值含義EWX_FORCE強制進程終止。設置此標誌時，Windows不會將消息WM_QUERYENDSESSION和WM_ENDSE


-------------------------------------------------------- KeyGTK3Win32ExpandEnvironmentStrings ----
ExpandEnvironmentStrings    ExpandEnvironmentStrings函數擴展環境變數字串，並用它們定義的值替換它們。
語法



-------------------------------------------------------- KeyGTK3Win32ExtCreatePen ----
ExtCreatePen    ExtCreatePen函數創建一個具有指定樣式，寬度和畫筆屬性的邏輯化妝或幾何筆。
語法
參數
【dwPenStyle】指定類型，樣式，端點和連接屬性的組合。通過使用按位元OR運算子（|）組合來自每個類別的值。筆類型可以是以下值之一：類型描述PS_GEOMETRIC筆是幾何。PS_COS


-------------------------------------------------------- KeyGTK3Win32ExtensionPropSheetPageProc ----
ExtensionPropSheetPageProc    ExtensionPropSheetPageProc函數指定一個應用程式定義的回呼函數，它接收AddPropSheetPageProc函數的位址，該函數駐留在創建屬性工作表的模組中。屬性工作表副檔名必須匯出ExtensionPropSheetPageProc函數。
語法
參數
【LPV】指向應用程式定義值的指標，該值描述要為其創建屬性工作表頁面的專案。此參數可以為NULL。【lpfnAddPropSheetPageProc】指向AddPropSheetPageProc


-------------------------------------------------------- KeyGTK3Win32ExtEscape ----
ExtEscape    ExtEscape函數允許應用程式訪問通過GDI不可用的特定設備的函數。
語法
參數
【HDC】標識設備上下文。【nEscape】指定要執行的轉義函數。【cbInput】指定【lpszInData】參數指向的資料的位元組數。【lpszInData】指向指定轉義所需的輸入結構。【


-------------------------------------------------------- KeyGTK3Win32ExtFloodFill ----
ExtFloodFill    ExtFloodFill函數使用當前畫筆填充顯示表面的一個區域。
語法
參數
【HDC】標識設備上下文。【nXStart】指定填充開始點的邏輯x座標。【nYStart】指定要開始填充的點的邏輯y座標。【crColor】指定要填充的邊界或區域的顏色。【crColor】的


-------------------------------------------------------- KeyGTK3Win32ExtractAssociatedIcon ----
ExtractAssociatedIcon    ExtractAssociatedIcon函數返回在相關可執行檔中找到的檔或圖示中找到的索引圖示的控制碼。
語法
參數
【HINST】指定調用函數的應用程式的實例。【lpIconPath】指向一個字串，指定需要圖示的檔的完整路徑和檔案名。該函數從該檔或與該文件相關聯的可執行檔中提取圖示控制碼。如果從可執


-------------------------------------------------------- KeyGTK3Win32ExtractIcon ----
ExtractIcon    ExtractIcon函數從指定的可執行檔，動態連結程式庫（DLL）或圖示檔中檢索圖示的控制碼。
語法



-------------------------------------------------------- KeyGTK3Win32ExtractIconEx ----
ExtractIconEx    ExtractIconEx函數從指定的可執行檔，動態連結程式庫（DLL）或圖示檔中檢索圖示的控制碼。
語法
參數
【lpszFile】指向以空值終止的字串，指定可執行檔，DLL或圖示檔的名稱。【nIconIndex】指定要檢索的圖示的索引。如果該值為0，則該函數返回指定檔中第一個圖示的控制碼。如果


-------------------------------------------------------- KeyGTK3Win32ExtSelectClipRgn ----
ExtSelectClipRgn    ExtSelectClipRgn函數通過使用指定的模式將指定的區域與當前的裁剪區域進行組合。
語法
參數
【HDC】標識設備上下文。【HRGN】標識要選擇的區域。當指定RGN_COPY模式時，此控制碼只能為NULL。【fnMode】指定要執行的操作。它必須是以下值之一：值含義RGN_AND新剪輯區


-------------------------------------------------------- KeyGTK3Win32ExtTextOut ----
ExtTextOut    ExtTextOut函數使用當前選定的字體繪製一個字串。可以提供一個可選的矩形，用於剪裁，不透明或兩者。
語法
參數
【HDC】標識設備上下文。【X】指定用於定位字串的參考點的邏輯x座標。【Y】指定用於定位字串的參考點的邏輯y座標。【fuOptions】指定如何使用應用程式定義的矩形。此參數可以是以下值


-------------------------------------------------------- KeyGTK3Win32FatalAppExit ----
FatalAppExitFatalAppExit函數顯示一個訊息方塊，並在訊息方塊關閉時終止應用程式。如果Windows使用內核調試器運行，則訊息方塊給使用者終止應用程式或取消訊息方塊並返回到調用FatalAppExit的應用程式的機會。
語法
參數
【uAction】Reserved; must be zero.【lpMessageText】指向訊息方塊中顯示的以空字元結尾的字串。消息顯示在一行。為了適應低解析度螢幕，字串的長度不能超


-------------------------------------------------------- KeyGTK3Win32FatalExit ----
FatalExit    FatalExit函數將執行控制傳遞給調試器。此後調試器的行為特定於所使用的調試器的類型。
語法
參數
【ExitCode】指定與退出相關聯的錯誤代碼。
返回值
此函數不返回值。
描述
應用程式只能使用FatalExit進行調試。它不應該調用應用程式的零售版本中的函數，因為這樣做會終止


-------------------------------------------------------- KeyGTK3Win32FileIOCompletionRoutine ----
FileIOCompletionRoutine    當非同步輸入和輸出（I / O）函數（ReadFileEx或WriteFileEx）完成並且調用執行緒處於等待警報狀態（使用SleepEx，WaitForSingleObjectEx）時，將調用FileIOCompletionRoutine函數，或WaitForMultipleObjectsEx函數，【的fAlertable】標誌設置為TRUE）。
語法
參數
【dwErrorCode】指定I / O完成狀態。此參數可能是以下值之一：值含義0I / O成功。ERROR_HANDLE_EOFReadFileEx函數嘗試讀取檔的最後一行。
【dwN


-------------------------------------------------------- KeyGTK3Win32FileTimeToDosDateTime ----
FileTimeToDosDateTime    FileTimeToDosDateTime函數將64位元檔時間轉換為MS-DOS日期和時間值。
語法
參數
【lpFileTime】指向FILETIME結構，包含64位元檔時間轉換為MS-DOS日期和時間格式。FILETIME結構具有以下形式：typedef struct _FILETIME { 


-------------------------------------------------------- KeyGTK3Win32FileTimeToLocalFileTime ----
FileTimeToLocalFileTime    FileTimeToLocalFileTime函數將基於協調世界時（UTC）的檔時間轉換為本地檔時間。
語法
參數
【lpFileTime】指向FILETIME結構，其中包含將基於UTC的檔時間轉換為本地檔時間。【lpLocalFileTime】指向FILETIME結構以接收轉換的本地檔時間。此參數


-------------------------------------------------------- KeyGTK3Win32FileTimeToSystemTime ----
FileTimeToSystemTime    FileTimeToSystemTime函數將64位元檔時間轉換為系統時間格式。
語法
參數
【lpFileTime】指向FILETIME結構的指標，其中包含轉換為系統日期和時間格式的檔時間。FileTimeToSystemTime函數僅適用於小於0x800000000000000


-------------------------------------------------------- KeyGTK3Win32FillConsoleOutputAttribute ----
FillConsoleOutputAttribute    FillConsoleOutputAttribute函數設置指定數量的字元儲存格的文本和背景顏色屬性，從螢幕緩衝區中的指定座標開始。
語法
參數
【hConsoleOutput】標識一個螢幕緩衝區。控制碼必須具有GENERIC_WRITE許可權。【wAttribute】指定要寫入螢幕緩衝區的前景色和背景顏色屬性。可以指定以下值的任意組合：


-------------------------------------------------------- KeyGTK3Win32FillConsoleOutputCharacter ----
FillConsoleOutputCharacter    FillConsoleOutputCharacter函數從指定的座標開始，將一個字元寫入螢幕緩衝區指定的次數。
語法
參數
【hConsoleOutput】標識一個螢幕緩衝區。控制碼必須具有GENERIC_WRITE許可權。【// character to write】指定要寫入螢幕緩衝區的字元。【nLength】指


-------------------------------------------------------- KeyGTK3Win32FillMemory ----
FillMemory    FillMemory函數用指定的值填充一個區塊。
語法
參數
【目的地】指向要填寫的區塊的起始位址。【長度】指定要填充的區塊的大小（以位元組為單位）。【填】指定用於填充區塊的位元組值。
返回值
該函數沒有返回值。



-------------------------------------------------------- KeyGTK3Win32FillPath ----
FillPath    FillPath函數可以關閉當前路徑中的任何打開的圖形，並使用當前畫筆和多邊形填充模式填充路徑的內部。
語法
參數
【HDC】標識包含有效路徑的設備上下文（DC）。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.GetLastErro


-------------------------------------------------------- KeyGTK3Win32FillRect ----
FillRect    FillRect函數使用指定的畫筆填充一個矩形。此函數包括左側和上邊界，但不包括矩形的右側和底部邊框。
語法
參數
【hDC】標識設備上下文。【LPRC】指向RECT結構，其中包含要填充的矩形的邏輯座標。【HBR】標識用於填充矩形的畫筆。
返回值
如果函數成功，返回值為TRUE。如果函數失敗，返回值為


-------------------------------------------------------- KeyGTK3Win32FillRgn ----
FillRgn    FillRgn函數使用指定的畫筆填充區域。
語法
參數
【HDC】標識設備上下文。【HRGN】標識要填充的區域。該區域的座標被推定為邏輯單位。【HBR】標識用於填充區域的畫筆。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32FindAtom ----
FindAtom    FindAtom函數在本地atom表中搜索指定的字串，並檢索與該字串關聯的原子。
語法
參數
【lpString】指向要搜索的以null結尾的字串。
返回值
如果函數成功，則返回值是與給定字串相關聯的原子。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastEr


-------------------------------------------------------- KeyGTK3Win32FindClose ----
FindClose    FindClose函數關閉指定的搜索控制碼。FindFirstFile和FindNextFile函數使用搜索控制碼來查找名稱與給定名稱相匹配的檔。
語法
參數
【hFindFile】標識搜索控制碼。此控制碼以前必須由FindFirstFile函數打開。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetL


-------------------------------------------------------- KeyGTK3Win32FindCloseChangeNotification ----
FindCloseChangeNotification    FindCloseChangeNotification函數停止更改通知控制碼監視。
語法
參數
【hChangeHandle】標識由FindFirstChangeNotification函數創建的更改通知控制碼。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴


-------------------------------------------------------- KeyGTK3Win32FindClosePrinterChangeNotification ----
FindClosePrinterChangeNotification    FindClosePrinterChangeNotification函數關閉通過調用FindFirstPrinterChangeNotification函數創建的更改通知物件。與更改通知物件關聯的印表機或印表伺服器將不再被該物件監視。
語法
參數
【H更改】處理更改通知物件要關閉。這是通過調用FindFirstPrinterChangeNotification函數創建的控制碼。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回


-------------------------------------------------------- KeyGTK3Win32FindExecutable ----
FindExecutable    FindExecutable函數檢索與指定檔案名關聯的可執行檔（.EXE）的名稱和控制碼。
語法
參數
【lpFile】指向指定檔案名的以null結尾的字串的指標。這可以是文檔或可執行檔。【lpDirectory】指向指定預設目錄的以空值終止的字串的指標。【lpResult】當函數返回時


-------------------------------------------------------- KeyGTK3Win32FindFirstChangeNotification ----
FindFirstChangeNotification    FindFirstChangeNotification函數創建更改通知控制碼並設置初始更改通知篩檢程式條件。當在指定的目錄或子樹中發生與過濾條件匹配的更改時，通知處理的等待成功。
語法
參數
【lpPathName】指向一個以null結尾的字串，指定要觀看的目錄的路徑。【bWatchSubtree】指定該函數是否監視目錄或目錄樹。如果此參數為TRUE，則該函數將監視指定目錄下的


-------------------------------------------------------- KeyGTK3Win32FindFirstFile ----
FindFirstFile    FindFirstFile函數在目錄中搜索名稱與指定檔案名匹配的檔。FindFirstFile檢查子目錄名稱以及檔案名。
語法
參數
【lpFileName】Windows 95：指向一個空值終止的字串，指定一個有效的目錄或路徑和檔案名，可以包含萬用字元（*和？）。該字串不得超過MAX_PATH個字元。指向一個空值終止的


-------------------------------------------------------- KeyGTK3Win32FindFirstFileEx ----
FindFirstFileEx    [New - Windows NT]FindFirstFileEx函數在目錄中搜索名稱和屬性與函式呼叫中指定的名稱和屬性相匹配的檔。
語法
參數
【lpFileName】指向一個空值終止的字串，指定一個有效的目錄或路徑和檔案名，可以包含萬用字元（*和？）。【fInfoLevelId】指定返回資料的資訊級別。如果使用FindExInfo


-------------------------------------------------------- KeyGTK3Win32FindFirstFreeAce ----
FindFirstFreeAce    FindFirstFreeAce函數檢索存取控制清單（ACL）中第一個空閒位元組的指標。
語法
參數
【ACL】指向ACL結構。【步伐】指向該函數返回時創建的ACL中第一個空閒位置的指針。如果ACL無效，則該參數為NULL。如果ACL已滿，則該參數指向ACL後面的位元組。
返回值
如果函數


-------------------------------------------------------- KeyGTK3Win32FindFirstPrinterChangeNotification ----
FindFirstPrinterChangeNotification    FindFirstPrinterChangeNotification函數創建一個更改通知物件並返回物件的控制碼。然後，您可以在調用其中一個等待函數來監視印表機或印表伺服器的更改時使用此控制碼。
語法
參數
【hPrinter】處理到要監視的印表機或印表伺服器。該控制碼通過調用OpenPrinter函數獲取。【The system sets one or more of the following


-------------------------------------------------------- KeyGTK3Win32FindNextChangeNotification ----
FindNextChangeNotification    FindNextChangeNotification函數請求作業系統在下次檢測到適當的更改時發出更改通知手動信號。
語法
參數
【hChangeHandle】標識由FindFirstChangeNotification函數創建的更改通知控制碼。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴


-------------------------------------------------------- KeyGTK3Win32FindNextFile ----
FindNextFile    FindNextFile函數將繼續從以前調用FindFirstFile函數的檔搜索。
語法
參數
【hFindFile】標識先前調用FindFirstFile函數返回的搜索控制碼。【lpFindFileData】指向WIN32_FIND_DATA結構的接收有關找到的檔或子目錄的資訊。該結


-------------------------------------------------------- KeyGTK3Win32FindNextPrinterChangeNotification ----
FindNextPrinterChangeNotification    FindNextPrinterChangeNotification函數檢索有關與印表機或印表伺服器關聯的更改通知物件的最新更改通知的資訊。當對更改通知物件進行等待操作時，調用此函數。該函數還將更改通知物件重置為未通知狀態。然後，您可以在另一個等待操作中使用該物件來繼續監視印表機或印表伺服器。下一次印表機或印表伺服器發生一組特定更改時，作業系統將將物件設置為信號狀態。FindFirstPrinterChangeNotification函數創建更改通知物件，並指定要監視的更改集。
語法
參數
【H更改】處理與印表機或印表伺服器關聯的更改通知物件。通過調用FindFirstPrinterChangeNotification函數獲得這樣的控制碼。當作業系統檢測到物件的更改通知篩檢程式中指


-------------------------------------------------------- KeyGTK3Win32FindResource ----
FindResource    FindResource函數確定指定模組中具有指定類型和名稱的資源的位置。
語法
參數
【HMODULE】可執行檔包含資源的模組的控制碼。值為NULL指定與作業系統用於創建當前進程的映射檔相關聯的模組控制碼。【lpName】指定資源的名稱。有關詳細資訊，請參閱備註部分。【//值


-------------------------------------------------------- KeyGTK3Win32FindResourceEx ----
FindResourceEx    FindResourceEx函數確定指定模組中具有指定類型，名稱和語言的資源的位置。
語法
參數
【HMODULE】標識可執行檔包含資源的模組。如果此參數為NULL，則該函數將搜索用於創建當前進程的模組。【// address of buffer for value type】指向指定


-------------------------------------------------------- KeyGTK3Win32FindText ----
FindText    FindText函數創建一個系統定義的無強制回應對話方塊，允許使用者指定要搜索的字串以及在文檔中搜索文本時使用的選項。
語法
參數
【LPFR】指向FINDREPLACE結構的指標，其中包含用於初始化對話方塊的資訊。該對話方塊使用此結構將有關使用者輸入的資訊發送到您的應用程式。有關詳細資訊，請參閱以下備註部分。
返回值
如


-------------------------------------------------------- KeyGTK3Win32FindWindow ----
FindWindow    FindWindow函數檢索頂級視窗的控制碼，其類名和視窗名稱與指定的字串相匹配。此函數不搜索子視窗。
語法
參數
【lpClassName】指向指定類名的空值終止的字串，或者是標識類名字串的原子。如果這個參數是一個原子，它必須是由先前調用GlobalAddAtom函數創建的全域原子。原子，16位值，


-------------------------------------------------------- KeyGTK3Win32FindWindowEx ----
FindWindowEx    [Now Supported on Windows NT]FindWindowEx函數檢索其類名和視窗名稱與指定字串匹配的視窗的控制碼。該函數搜索子視窗，從給定的子視窗之後開始。
語法
參數
【hwndParent】標識要搜索子視窗的父視窗。如果【hwndParent】為NULL，該函數將使用桌面視窗作為父視窗。該函數將在桌面的子視窗的視窗中進行搜索。【hwndChildAfte


-------------------------------------------------------- KeyGTK3Win32FixBrushOrgEx ----
FixBrushOrgEx  Win32 API中沒有實現FixBrushOrgEx函數。它提供與Win32s的相容性。如果被調用，函數什麼也不做，返回FALSE。
另請參見
GetBrushOrgEx, SetBrushOrgEx


-------------------------------------------------------- KeyGTK3Win32FlashWindow ----
FlashWindow    FlashWindow函數會閃爍一次指定的視窗。
語法



-------------------------------------------------------- KeyGTK3Win32FlattenPath ----
FlattenPath    FlattenPath函數將所選路徑中的任何曲線轉換為當前設備上下文（DC），將每條曲線轉換為一系列線。
語法
參數
【HDC】標識包含有效路徑的DC。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.GetLastError可能會返回以


-------------------------------------------------------- KeyGTK3Win32FloodFill ----
FloodFill    FloodFill函數使用當前畫筆填充顯示表面的一個區域。該區域被假定為由【crFill】參數指定的有界。
語法
參數
【HDC】標識設備上下文。【nXStart】指定填充開始點的邏輯x座標。【nYStart】指定要開始填充的點的邏輯y座標。【crFill】指定要填充的邊界或區域的顏色。
返回值
如果函數


-------------------------------------------------------- KeyGTK3Win32FlushConsoleInputBuffer ----
FlushConsoleInputBuffer    FlushConsoleInputBuffer函數刷新控制台輸入緩衝區。當前輸入緩衝區中的所有輸入記錄都被丟棄。
語法
參數
【hConsoleInput】標識控制台輸入緩衝區。控制碼必須具有GENERIC_WRITE許可權。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用


-------------------------------------------------------- KeyGTK3Win32FlushFileBuffers ----
FlushFileBuffers    FlushFileBuffers函數清除指定檔的緩衝區，並將所有緩衝的資料寫入檔。
語法
參數
【HFILE】一個打開的檔案控制代碼。該函數刷新該檔的緩衝區。檔案控制代碼必須對該檔具有GENERIC_WRITE許可權。如果【HFILE】是通信設備的控制碼，則該函數僅刷新發送緩衝區。如果【HFI


-------------------------------------------------------- KeyGTK3Win32FlushInstructionCache ----
FlushInstructionCache    FlushInstructionCache函數刷新指定進程的指令快取記憶體。
語法



-------------------------------------------------------- KeyGTK3Win32FlushViewOfFile ----
FlushViewOfFile    FlushViewOfFile函數將檔的映射視圖中的位元組範圍寫入磁片。
語法
參數
【lpBaseAddress】指向要刷新到映射檔的磁片表示的位元組範圍的基址。【dwNumberOfBytesToFlush】指定要刷新的位元組數。如果【dwNumberOfBytesToFl


-------------------------------------------------------- KeyGTK3Win32FMExtensionProc ----
FMExtensionProc    FMExtensionProc函數是一個應用程式定義的回呼函數，用於處理發送到檔案管理員擴展動態連結程式庫（DLL）的功能表命令和消息。
語法



-------------------------------------------------------- KeyGTK3Win32FoldString ----
FoldString    FoldString函數將一個字串映射到另一個字串，執行指定的轉換選項。
語法
參數
【dwMapFlags】一組位元標誌，指示在映射期間要使用的轉換類型。該值可以是以下位標誌常量的組合：選項含義MAP_FOLDCZONE將相容區域字串折成標準的Unicode等價物。有關相容


-------------------------------------------------------- KeyGTK3Win32ForegroundIdleProc ----
ForegroundIdleProc    ForegroundIdleProc掛接過程是一個應用程式定義的回呼函數，系統在32位元前臺執行緒即將變為空閒時調用。
語法
參數
【碼】指定掛接過程是否處理消息。如果【碼】為HC_ACTION，掛接過程必須處理該消息。如果【碼】小於零，掛鉤過程必須將消息傳遞給CallNextHookEx函數，無需進一步處理，並返回Ca


-------------------------------------------------------- KeyGTK3Win32FormatMessage ----
FormatMessage    FormatMessage函數格式化消息字串。該函數需要一個消息定義作為輸入。消息定義可以來自傳遞到函數中的緩衝區。它可以來自已載入模組中的消息表資源。或者呼叫者可以要求該函數在系統的消息表資源中搜索消息定義。該函數基於消息識別字和語言識別字在消息表資源中查找消息定義。該函數將格式化的消息文本複製到輸出緩衝區，如果請求，則處理任何嵌入的插入序列。
語法
參數
【dwFlags中】包含一組位元標誌，用於指定格式化過程的各個方面以及如何解釋【// pointer to  message source】參數。【dwFlags中】的低位元位元組指定函數如何處理


-------------------------------------------------------- KeyGTK3Win32FrameRect ----
FrameRect    FrameRect函數使用指定的畫筆在指定的矩形周圍繪製一個邊框。邊框的寬度和高度總是一個邏輯單位。
語法
參數
【hDC】標識繪製邊框的設備上下文。【LPRC】指向包含矩形左上角和右下角的邏輯座標的RECT結構。【HBR】標識用於繪製邊框的畫筆。
返回值
如果函數成功，返回值為TRUE。如果函數失


-------------------------------------------------------- KeyGTK3Win32FrameRgn ----
FrameRgn    FrameRgn函數使用指定的畫筆在指定區域周圍繪製一個邊框。
語法
參數
【HDC】標識設備上下文。【HRGN】標識要封閉在邊框中的區域。該區域的座標被推定為邏輯單位。【HBR】標識用於繪製邊框的畫筆。【nWidth】以邏輯單位指定縱向畫筆筆劃的寬度。【nHeig


-------------------------------------------------------- KeyGTK3Win32FreeConsole ----
FreeConsole    FreeConsole函數從其控制台分離調用進程。
語法
參數
此函數無參數。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
如果其他進程共用控制台，則控制台不會被銷毀，


-------------------------------------------------------- KeyGTK3Win32FreeDDElParam ----
FreeDDElParam    FreeDDElParam函數釋放由發佈的DDE消息的【lParam的】參數指定的記憶體。收到發佈的DDE消息的應用程式在使用UnpackDDElParam函數打開【lParam的】值後應調用此函數。
語法
參數
【味精】指定發佈的DDE消息。【lParam的】指定發佈的DDE消息的【lParam的】參數。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
一個應用程式應該


-------------------------------------------------------- KeyGTK3Win32FreeEnvironmentStrings ----
FreeEnvironmentStrings    FreeEnvironmentStrings函數釋放一個環境字串。
語法
參數
【lpszEnvironmentBlock】指向一個環境字串的塊。必須通過調用GetEnvironmentStrings函數獲取指向塊的指標。
返回值
如果函數成功，返回值不為零。如果


-------------------------------------------------------- KeyGTK3Win32FreeLibrary ----
FreeLibrary    FreeLibrary函數減少載入的動態連結程式庫（DLL）模組的引用計數。當引用計數達到零時，模組將從調用進程的位址空間中取消映射，並且控制碼不再有效。此函數取代FreeModule函數。
語法
參數
【hLibModule】標識載入的庫模組。LoadLibrary或GetModuleHandle函數返回此控制碼。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展


-------------------------------------------------------- KeyGTK3Win32FreeLibraryAndExitThread ----
FreeLibraryAndExitThread    FreeLibraryAndExitThread函數將載入的動態連結程式庫（DLL）的引用計數減1，然後調用ExitThread終止調用執行緒。該函數不返回。
語法
參數
【hLibModule】指定函數遞減的引用計數的動態連結程式庫模組。【dwExitCode】指定調用執行緒的退出代碼。
返回值
該函數沒有返回值。該函數不返回。【hLibModule】控制碼無效


-------------------------------------------------------- KeyGTK3Win32FreeModule ----
FreeModule              FreeModule函數已過時。此函數僅用於與16位元版本的Windows相容。基於Win32的應用程式應使用FreeLibrary函數。


-------------------------------------------------------- KeyGTK3Win32FreePrinterNotifyInfo ----
FreePrinterNotifyInfo    FreePrinterNotifyInfo函數釋放由FindNextPrinterChangeNotification函數返回的系統分配的緩衝區。
語法
參數
【pPrinterNotifyInfo】指向FindNextPrinterChangeNotification函數的調用返回的PRINTER_NOTIFY_INFO緩衝區。FreePrint


-------------------------------------------------------- KeyGTK3Win32FreeProcInstance ----
FreeProcInstance      FreeProcInstance函數已過時。此函數僅用於與16位元版本的Windows相容。基於Win32的應用程式不應該使用此函數;它在32位環境中沒有任何意義。


-------------------------------------------------------- KeyGTK3Win32FreeResource ----
FreeResource       FreeResource函數已過時。它提供了簡化16位元Windows應用程式的移植。基於Win32的應用程式不需要使用LoadResource函數來釋放載入的資源。
另請參見
LoadResource, LockResource


-------------------------------------------------------- KeyGTK3Win32FreeSid ----
FreeSid    FreeSid函數通過使用AllocateAndInitializeSid函數釋放先前分配的安全性識別碼（SID）。
語法
參數
【PSID】指向SID結構免費。
返回值
此函數不返回值。



-------------------------------------------------------- KeyGTK3Win32FRHookProc ----
FRHookProc    一個FRHookProc掛接過程是一個應用程式定義或庫定義的回檔過程，與“查找和替換”常用對話方塊一起使用。掛鉤過程接收預設對話方塊過程的消息或通知。
語法
參數
【hdlg】處理查找或替換消??息所針對的公共對話方塊窗口。【uiMsg】標識正在接收的消息。【wParam中】指定有關該消息的附加資訊。確切的含義取決於【uiMsg】參數的值。【lParam


-------------------------------------------------------- KeyGTK3Win32FSCTL_DISMOUNT_VOLUME ----
FSCTL_DISMOUNT_VOLUME    FSCTL_DISMOUNT_VOLUME DeviceIoControl 操作將卸載卷。dwIoControlCode = FSCTL_DISMOUNT_VOLUME;   //操作代碼lpInBuffer = NULL; //指向輸入緩衝區的指標;不曾用過;必須為NULLnInBufferSize = 0; //輸入緩衝區的大小不曾用過;必須為零lpOutBuffer ;      //指向輸出緩衝區的指標;不曾用過;必須為NULLnOutBufferSize ;   //輸出緩衝區的大小不曾用過;必須為零lpBytesReturned ;  //指向由DeviceIoControl函數使用的DWORD的指標
參數
【lpInBuffer】指向輸入緩衝區。不用於此操作。設置為NULL。【nInBufferSize】指定【lpInBuffer】指向的緩衝區的大小（以位元組為單位）。不用於此操作。設置為零。【


-------------------------------------------------------- KeyGTK3Win32FSCTL_GET_COMPRESSION ----
FSCTL_GET_COMPRESSION    FSCTL_GET_COMPRESSION DeviceIoControl操作獲取檔案系統支援每流壓縮的卷上的檔或目錄的當前壓縮狀態。dwIoControlCode = FSCTL_GET_COMPRESSION;   //操作代碼lpInBuffer = NULL; //指向輸入緩衝區的指標;不曾用過;必須為NULLnInBufferSize = 0; //輸入緩衝區的大小不曾用過;必須為零lpOutBuffer ;      //指向輸出緩衝區的指標nOutBufferSize ;   //輸出緩衝區的大小lpBytesReturned ;  //指向輸出的實際位元組
參數
【lpInBuffer】指向輸入緩衝區。不用於此操作。設置為NULL。【nInBufferSize】指定【lpInBuffer】指向的緩衝區的大小（以位元組為單位）。不用於此操作。設置為零。【


-------------------------------------------------------- KeyGTK3Win32FSCTL_LOCK_VOLUME ----
FSCTL_LOCK_VOLUME    FSCTL_LOCK_VOLUME DeviceIoControl 操作將鎖定卷。只能通過鎖定卷的檔物件（* 【hDevice】）的控制碼來訪問鎖定卷。dwIoControlCode = FSCTL_LOCK_VOLUME;   //操作代碼lpInBuffer = NULL; //指向輸入緩衝區的指標;不曾用過;必須為NULLnInBufferSize = 0; //輸入緩衝區的大小不曾用過;必須為零lpOutBuffer ;      //指向輸出緩衝區的指標;不曾用過;必須為NULLnOutBufferSize ;   //輸出緩衝區的大小不曾用過;必須為零lpBytesReturned ;  //指向由DeviceIoControl函數使用的DWORD的指標
參數
【lpInBuffer】指向輸入緩衝區。不用於此操作。設置為NULL。【nInBufferSize】指定【lpInBuffer】指向的緩衝區的大小（以位元組為單位）。不用於此操作。設置為零。【


-------------------------------------------------------- KeyGTK3Win32FSCTL_SET_COMPRESSION ----
FSCTL_SET_COMPRESSION    FSCTL_SET_COMPRESSION DeviceIoControl操作設置檔案系統支援每卷檔和每目錄壓縮的卷上的檔或目錄的壓縮狀態。您可以使用此操作壓縮或解壓縮此卷上的檔或目錄。dwIoControlCode = FSCTL_SET_COMPRESSION;   //操作代碼lpInBuffer ;        //指向輸入緩衝區的指標nInBufferSize ;     //輸入緩衝區的大小lpOutBuffer = NULL; //指向輸出緩衝區的指標;不曾用過;必須為NULLnOutBufferSize = 0; //輸出緩衝區的大小不曾用過;必須為零lpBytesReturned ;   //指向由DeviceIoControl函數使用的DWORD的指標
參數
【lpInBuffer】指向包含指定檔或目錄的新壓縮狀態的USHORT的緩衝區。定義了以下值：值含義COMPRESSION_FORMAT_NONE解壓檔或目錄。COMPRESSION_F


-------------------------------------------------------- KeyGTK3Win32FSCTL_UNLOCK_VOLUME ----
FSCTL_UNLOCK_VOLUME    FSCTL_UNLOCK_VOLUME DeviceIoControl操作會解鎖一個卷。dwIoControlCode = FSCTL_UNLOCK_VOLUME;   //操作代碼lpInBuffer = NULL; //指向輸入緩衝區的指標;不曾用過;必須為NULLnInBufferSize = 0; //輸入緩衝區的大小不曾用過;必須為零lpOutBuffer ;      //指向輸出緩衝區的指標;不曾用過;必須為NULLnOutBufferSize ;   //輸出緩衝區的大小不曾用過;必須為零lpBytesReturned ;  //指向由DeviceIoControl函數使用的DWORD的指標
參數
【lpInBuffer】指向輸入緩衝區。不用於此操作。設置為NULL。【nInBufferSize】指定【lpInBuffer】指向的緩衝區的大小（以位元組為單位）。不用於此操作。設置為零。【


-------------------------------------------------------- KeyGTK3Win32GdiComment ----
GdiComment    GdiComment函數將注釋從緩衝區複製到指定的增強格式的圖中繼檔中。
語法
參數
【HDC】標識增強型圖中繼檔設備上下文。【CBSIZE】指定注釋緩衝區的長度（以位元組為單位）。【的lpData】指向包含注釋的緩衝區。
返回值
如果函數成功，返回值不為零。如果函數失敗，


-------------------------------------------------------- KeyGTK3Win32GdiFlush ----
GdiFlush    GdiFlush函數刷新調用執行緒的當前批次處理。
語法
參數
此函數無參數。
返回值
如果當前批次處理中的所有函數成功，則返回值不為零。如果當前批次處理中的所有函數都不成功，返回值為零，表示至少有一個函數返回錯誤。
描述
批次處理通過最小化調用返回布


-------------------------------------------------------- KeyGTK3Win32GdiGetBatchLimit ----
GdiGetBatchLimit    GdiGetBatchLimit函數返回可以在調用執行緒的當前批次處理中累積的最大函式呼叫數。超出此限制時，系統將刷新當前批次。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值為批量限制。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
使用GdiSetBatchLimit函


-------------------------------------------------------- KeyGTK3Win32GdiSetBatchLimit ----
GdiSetBatchLimit    GdiSetBatchLimit函數設置調用執行緒當前批次處理中可累積的最大函數數。超出此限制時，系統將刷新當前批次。
語法
參數
【// batch limit】指定要設置的批量限制。值0設置默認限制。值為1將禁用批次處理。
返回值
如果函數成功，則返回值為上一個批量限制。如果函數失敗，返回值為零。要獲取擴展錯誤資訊


-------------------------------------------------------- KeyGTK3Win32GenerateConsoleCtrlEvent ----
GenerateConsoleCtrlEvent    GenerateConsoleCtrlEvent函數將指定的信號發送到共用與調用進程相關聯的控制台的控制台進程組。
語法
參數
【dwCtrlEvent】指定要生成的信號的類型。指定以下值之一：值含義CTRL_C_EVENT產生一個CTRL + C信號。CTRL_BREAK_EVENT產生一個CTRL + BREAK


-------------------------------------------------------- KeyGTK3Win32GetAce ----
GetAce    GetAce函數獲取指向ACL中ACE的指標。ACE是存取控制條目。ACL是存取控制清單。
語法
參數
【ACL】指向包含要檢索的ACE的ACL結構。【dwAceIndex】指定檢索指針的ACE。值為0對應於ACL中的第一個ACE，1對應於第二個ACE，依此類推。【步伐】指向函數設置為ACE地


-------------------------------------------------------- KeyGTK3Win32GetAclInformation ----
GetAclInformation    GetAclInformation函數檢索有關存取控制清單（ACL）的資訊。
語法
參數
【ACL】指向ACL結構。該函數檢索有關此ACL的資訊。【pAclInformation】指向緩衝區，接收請求的資訊。放入緩衝區的結構取決於【dwAclInformationClass】參數


-------------------------------------------------------- KeyGTK3Win32GetACP ----
GetACP    GetACP函數檢索系統的當前ANSI內碼表識別字。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是系統的當前ANSI內碼表識別字，如果沒有內碼表是當前的，則返回默認識別字。
描述
以下是ANSI內碼表識別字：識別碼含義874泰國93


-------------------------------------------------------- KeyGTK3Win32GetActiveWindow ----
GetActiveWindow    GetActiveWindow函數檢索與調用該函數的執行緒相關聯的使用中視窗的窗口控制碼。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是與調用該函數的執行緒相關聯的使用中視窗的控制碼。如果調用執行緒沒有使用中視窗，則返回值為NULL。



-------------------------------------------------------- KeyGTK3Win32GetArcDirection ----
GetArcDirection    GetArcDirection函數返回指定設備上下文的當前弧方向。圓弧和矩形函數使用圓弧方向。
語法
參數
【HDC】標識設備上下文。
返回值
如果函數成功，則返回值指定當前的圓弧方向。以下是有效的返回值：值含義AD_COUNTERCLOCKWISE逆時針繪製弧形和矩形。AD_CLOCKWIS


-------------------------------------------------------- KeyGTK3Win32GetAspectRatioFilterEx ----
GetAspectRatioFilterEx    GetAspectRatioFilterEx函數檢索當前寬高比濾鏡的設置。
語法
參數
【HDC】標識設備上下文。【lpAspectRatio】指向SIZE結構，接收當前的寬高比篩檢程式。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調


-------------------------------------------------------- KeyGTK3Win32GetAsyncKeyState ----
GetAsyncKeyState    GetAsyncKeyState函數確定在調用函數時鍵是上下還是關閉，以及在先前調用GetAsyncKeyState之後是否按下了該鍵。
語法
參數
【V鍵】指定256個可能的虛擬鍵代碼之一。Windows NT：您可以使用左右區分常量來指定某些鍵。有關詳細資訊，請參閱
描述
部分。Windows 95： Windows 95不支持在


-------------------------------------------------------- KeyGTK3Win32GetAtomName ----
GetAtomName    GetAtomName函數檢索與指定的本地原子相關聯的字串的副本。此函數將替換GetAtomHandle函數。
語法
參數
【納多馬斯】指定標識要檢索的字串的本地原子。【lpBuffer】指向字串的緩衝區。【服務提供者】指定緩衝區的大小（以字元為單位）。
返回值
如果函數成功，則返回值是複製到緩衝區的字元


-------------------------------------------------------- KeyGTK3Win32GetAuditedPermissionsFromAcl ----
GetAuditedPermissionsFromAcl    [New - Windows NT]GetAuditedPermissionsFromAcl函數返回指定受託人的審計存取權限。被審核的許可權基於指定的存取控制清單（ACL）的存取控制條目（ACE）。經審計的存取權限指示導致系統在系統事件日誌中生成審核記錄的訪問嘗試的類型。經審核的權利包括ACL為受託人或受託人所屬的任何組指定的權利。在確定被審核許可權時，該函數不考慮受託人所持有的安全特權。
語法
參數
【ACL】指向獲取受託人審核存取權限的ACL。【pTrustee】指向標識受託人的TRUSTEE結構的指標。受託人可以是使用者，組或程式（如Windows NT服務）。您可以使用名稱或安全標識


-------------------------------------------------------- KeyGTK3Win32GetBinaryType ----
GetBinaryType    GetBinaryType函數確定檔是否可執行，如果是，則是可執行檔的類型。最後一個屬性確定可執行檔在哪個子系統下運行。
語法



-------------------------------------------------------- KeyGTK3Win32GetBitmapBits ----
GetBitmapBits  GetBitmapBits函數將指定點陣圖的點陣圖位複製到緩衝區中。Win32 API中沒有實現GetBitmapBits函數。此函數用於與16位元版本的Windows相容。基於Win32的應用程式應使用GetDIBits函數。


-------------------------------------------------------- KeyGTK3Win32GetBitmapDimensionEx ----
GetBitmapDimensionEx    GetBitmapDimensionEx函數檢索點陣圖的尺寸。檢索到的維度必須由SetBitmapDimensionEx函數設置。GetMapDimensionEx函數替換GetMapDimension函數。
語法
參數
【HBITMAP】標識點陣圖。【// address of structure receiving dimensions】指向SIZE結構以接收點陣圖維度。
返回值
如果函數成功，返回值不為


-------------------------------------------------------- KeyGTK3Win32GetBkColor ----
GetBkColor    GetBkColor函數返回指定設備上下文的當前背景顏色。
語法
參數
【HDC】標識要返回背景顏色的設備上下文。
返回值
如果函數成功，則返回值為當前背景顏色的COLORREF值。如果函數失敗，返回值為CLR_INVALID。



-------------------------------------------------------- KeyGTK3Win32GetBkMode ----
GetBkMode    GetBkMode函數返回指定設備上下文的當前後臺混合模式。設備背景的背景混合模式影響不是實線的文本，陰影畫筆和筆風格。
語法
參數
【HDC】標識要返回背景模式的設備上下文。
返回值
如果函數成功，則返回值指定當前的背景混合模式，OPAQUE或TRANSPARENT。如果函數失敗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32GetBoundsRect ----
GetBoundsRect    GetBoundsRect函數獲取指定設備上下文的當前累積邊界矩形。Windows為每個應用程式維護一個累積的邊界矩形。應用程式可以檢索和設置此矩形。
語法
參數
【HDC】標識函數將返回的邊界矩形的設備上下文。【lprcBounds】指向將接收當前邊界矩形的RECT結構。應用程式的矩形以邏輯座標返回，Windows矩形返回螢幕座標。【旗】指定GetB


-------------------------------------------------------- KeyGTK3Win32GetBrushOrgEx ----
GetBrushOrgEx    GetBrushOrgEx函數檢索指定設備上下文的當前畫筆原點。此函數將替換GetBrushOrg函數。
語法
參數
【HDC】標識設備上下文。【LPPT】指向設備座標中接收畫筆原點的POINT結構。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLast


-------------------------------------------------------- KeyGTK3Win32GetCapture ----
GetCapture    GetCapture函數檢索捕獲滑鼠的視窗（如果有）的控制碼。一次只能有一個視窗可以捕捉滑鼠;該視窗接收滑鼠輸入，無論游標是否在其邊框內。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是與當前執行緒相關聯的捕獲窗口的控制碼。如果執行緒中沒有視窗捕獲到滑鼠，則返回值為NULL。
描述
NULL返回值並不意味著系統中沒有其他執行緒


-------------------------------------------------------- KeyGTK3Win32GetCaretBlinkTime ----
GetCaretBlinkTime    GetCaretBlinkTime函數返回反轉插入符號圖元所需的經過時間（以毫秒為單位）。用戶可以使用控制台設置此值。
語法
參數
此函數無參數。
返回值
如果函數成功，返回值為閃爍時間，單位為毫秒。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32GetCaretPos ----
GetCaretPos    GetCaretPos函數將用戶端座標中的插入符的位置複製到指定的POINT結構。
語法
參數
【LPPOINT】指向要接收插入符號的用戶端座標的POINT結構。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32GetCharABCWidths ----
GetCharABCWidths    GetCharABCWidths函數以當前TrueType字體檢索給定範圍內連續字元的邏輯單位寬度。此函數只能使用TrueType字體。
語法
參數
【HDC】標識設備上下文。【uFirstChar】指定當前字體的連續字元組中的第一個字元。【uLastChar】指定當前字體的連續字元組中的最後一個字元。【lpabc】指向ABC結構的陣列，


-------------------------------------------------------- KeyGTK3Win32GetCharABCWidthsFloat ----
GetCharABCWidthsFloat    GetCharABCWidthsFloat函數以邏輯單位檢索當前字體在指定範圍內的連續字元的寬度。
語法
參數
【HDC】標識設備上下文。【iFirstChar】指定尋找ABC寬度的連續字元組中的第一個字元的代碼點。【iLastChar】指定尋找ABC寬度的連續字元組中最後一個字元的代碼點。這個範圍是


-------------------------------------------------------- KeyGTK3Win32GetCharacterPlacement ----
GetCharacterPlacement    [Now Supported on Windows NT]GetCharacterPlacement函數檢索有關字串的資訊，例如字元寬度，插入符號定位，字串中的排序和字形渲染。返回的資訊類型取決於【dwFlags中】參數，並且基於給定顯示上下文中當前選定的字體。該函數將資訊複製到指定的GCP_RESULTS結構或由結構指定的一個或多個陣列。
語法
參數
【HDC】標識設備上下文。【lpString】指向要處理的字串。【NCOUNT】指定字串中的字元數。【nMaxExtent】指定字串處理的最大範圍（以邏輯單位）。如果被處理的字元超出這


-------------------------------------------------------- KeyGTK3Win32GetCharWidth ----
GetCharWidth    GetCharWidth函數以邏輯座標檢索當前字體在指定範圍內的連續字元的寬度。維護GetCharWidth以相容16位版本的Windows。基於Win32的應用程式應該調用GetCharWidth32函數，它提供更準確的結果。
語法
參數
【HDC】標識設備上下文。【iFirstChar】指定連續字元組中的第一個字元。【iLastChar】指定連續字元組中的最後一個字元，不能在指定的第一個字元之前。【lpBuffer】指向緩衝


-------------------------------------------------------- KeyGTK3Win32GetCharWidth32 ----
GetCharWidth32    GetCharWidth32函數以邏輯座標檢索當前字體在指定範圍內的連續字元的寬度。此函數取代GetCharWidth函數。
語法
參數
【HDC】標識設備上下文。【iFirstChar】指定連續字元組中的第一個字元。【iLastChar】指定連續字元組中的最後一個字元，不能在指定的第一個字元之前。【lpBuffer】指向緩衝


-------------------------------------------------------- KeyGTK3Win32GetCharWidthFloat ----
GetCharWidthFloat    GetCharWidthFloat函數從當前字體中檢索指定範圍內連續字元的分數寬度。
語法
參數
【HDC】標識設備上下文。【iFirstChar】指定連續字元組中第一個字元的代碼點。【iLastChar】指定連續字元組中最後一個字元的代碼點。【pxBuffer】指向緩衝區以接收字元寬度


-------------------------------------------------------- KeyGTK3Win32GetClassInfo ----
GetClassInfo    GetClassInfo函數檢索有關視窗類的資訊。GetClassInfoEx函數已被GetClassInfoEx函數取代。但是，如果您不需要關於班級小圖示的資訊，您仍然可以使用GetClassInfo.
語法
參數
【的hInstance】標識創建該類的應用程式的實例。要檢索有關Windows定義的類的資訊（如按鈕或清單方塊），請將此參數設置為NULL。【lpClassName】指向包含類名稱的以null


-------------------------------------------------------- KeyGTK3Win32GetClassInfoEx ----
GetClassInfoEx    GetClassInfoEx函數檢索有關視窗類的資訊，包括與視窗類相關聯的小圖示的控制碼。GetClassInfo函數不會檢索小圖示的控制碼。
語法
參數
【HINST】標識創建該類的應用程式的實例。要檢索有關Windows定義的類的資訊（如按鈕或清單方塊），請將此參數設置為NULL。【lpszClasspl】指向包含類名稱的以null結尾的字元


-------------------------------------------------------- KeyGTK3Win32GetClassLong ----
GetClassLong    GetClassLong函數從與指定視窗相關聯的WNDCLASS結構中檢索指定的32位（長）值。
語法
參數
【的hWnd】標識視窗，間接地標識視窗所屬的類。【參數nIndex】指定要檢索的32位值。要從額外的類記憶體中檢索一個32位元值，請指定要檢索的值的正零，基於零的位元組偏移量。有效值範圍為零，通過


-------------------------------------------------------- KeyGTK3Win32GetClassName ----
GetClassName    GetClassName函數檢索指定視窗所屬的類的名稱。
語法
參數
【的hWnd】標識視窗，間接地標識視窗所屬的類。【lpClassName】指向要接收類名字串的緩衝區。【nMaxCount】指定【lpClassName】參數指向的緩衝區的長度（以字元為單


-------------------------------------------------------- KeyGTK3Win32GetClassWord ----
GetClassWord    GetClassWord函數將指定偏移量下的16位（字）值檢索到指定視窗所屬視窗類的額外類記憶體中。除了GCW_ATOM和GCW_HICONSM之外，GCW_值在Win32 API中已經過時了。您必須使用GetClassLong函數來檢索視窗的類值。
語法
參數
【的hWnd】標識視窗，間接地標識視窗所屬的類。【參數nIndex】指定要檢索的值的基於零的位元組偏移量。有效值範圍為零，通過類記憶體的位元組數減去2;例如，如果您指定了10個或更多位元組的額外類別


-------------------------------------------------------- KeyGTK3Win32GetClientRect ----
GetClientRect    GetClientRect函數檢索視窗的用戶端區域的座標。用戶端座標指定用戶端區域的左上角和右下角。由於用戶端座標相對於視窗用戶端區域的左上角，左上角的座標為（0,0）。
語法
參數
【的hWnd】標識要檢索用戶端座標的窗口。【LPRECT】指向接收用戶端座標的RECT結構。剩下和最佳成員為零。對和底部成員包含窗口的寬度和高度。
返回值
如果函數成功，返回值不為零。如


-------------------------------------------------------- KeyGTK3Win32GetClipboardData ----
GetClipboardData    GetClipboardData函數以指定的格式從剪貼板中檢索資料。剪貼板以前必須打開。
語法
參數
【UFormat】指定剪貼板格式。有關剪貼板格式的說明，請參閱SetClipboardData函數。
返回值
如果函數成功，則返回值是指定格式的剪貼板對象的控制碼。如果函數失敗，返回值為N


-------------------------------------------------------- KeyGTK3Win32GetClipboardFormatName ----
GetClipboardFormatName    GetClipboardFormatName函數從剪貼板中檢索指定註冊格式的名稱。該函數將該名稱複製到指定的緩衝區。
語法
參數
【格式】指定要檢索的格式類型。此參數不能指定任何預定義的剪貼板格式。【lpszFormatName】指向要接收格式名稱的緩衝區。【cchMaxCount】指定要複製到緩衝區的字串的最大長度


-------------------------------------------------------- KeyGTK3Win32GetClipboardOwner ----
GetClipboardOwner    GetClipboardOwner函數檢索剪貼板當前所有者的窗口控制碼。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是擁有剪貼板的窗口的控制碼。如果剪貼板不擁有，則返回值為NULL。要獲取擴展錯誤資訊，請調用GetLastError.
描述
即使剪貼板當


-------------------------------------------------------- KeyGTK3Win32GetClipboardViewer ----
GetClipboardViewer    GetClipboardViewer函數檢索剪貼板檢視器鏈中第一個視窗的控制碼。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是剪貼板檢視器鏈中第一個視窗的控制碼。如果沒有剪貼板檢視器，則返回值為NULL。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32GetClipBox ----
GetClipBox    GetClipBox函數檢索可以圍繞設備當前可見區域繪製的最緊密的邊界矩形的尺寸。可視區域由當前剪輯區域或剪輯路徑以及任何重疊視窗定義。
語法
參數
【HDC】標識設備上下文。【LPRC】指向要接收矩形維度的RECT結構。
返回值
如果函數成功，則返回值指定剪切框的複雜度，可以是以下值之一：值含義NULLREGION區域是空的SIMP


-------------------------------------------------------- KeyGTK3Win32GetClipCursor ----
GetClipCursor    GetClipCursor函數檢索限制游標的矩形區域的螢幕座標。
語法
參數
【LPRECT】指向接收限定矩形的螢幕座標的RECT結構。如果游標不限於矩形，則結構將接收螢幕的尺寸。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，


-------------------------------------------------------- KeyGTK3Win32GetClipRgn ----
GetClipRgn    GetClipRgn函數檢索標識指定設備上下文的當前應用程式定義的裁剪區域的控制碼。
語法
參數
【HDC】標識設備上下文。【HRGN】在調用函數之前標識一個現有區域。函數返回後，此參數標識當前裁剪區域的副本。
返回值
如果函數成功，並且給定設備上下文沒有裁剪區域，則返回值為零。如果


-------------------------------------------------------- KeyGTK3Win32GetColorAdjustment ----
GetColorAdjustment    GetColorAdjustment函數檢索指定設備上下文的顏色調整值。
語法
參數
【HDC】標識設備上下文。【LPCA】指向接收顏色調整值的COLORADJUSTMENT結構。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用G


-------------------------------------------------------- KeyGTK3Win32GetColorSpace ----
GetColorSpace    GetColorSpace函數從指定的設備上下文中檢索邏輯顏色空間的當前控制碼。
語法
參數
【HDC】處理設備上下文。
返回值
如果函數成功，則返回值是邏輯顏色空間的當前控制碼。如果函數失敗，返回值為NULL。



-------------------------------------------------------- KeyGTK3Win32GetCommandLine ----
GetCommandLine    GetCommandLine函數返回一個指向當前進程的命令列字串的指標。
語法
參數
此函數無參數。
返回值
返回值是指向當前進程的命令列字串的指標。
描述
使用C編寫的非Unicode控制台進程可以使用ARGC和ARGV參數來訪問命令列參數。命令列字串的參數（不


-------------------------------------------------------- KeyGTK3Win32GetCommConfig ----
GetCommConfig    [Now Supported on Windows NT]GetCommConfig函數獲取通信設備的當前配置。
語法
參數
【hCommDev】標識開放的通信設備。【lpCC】指向接收COMMCONFIG結構的緩衝區。【lpdwSize】指向32位元變數，指定由【lpCC】指向的緩衝區的大小（以位元組為單位）。當函數


-------------------------------------------------------- KeyGTK3Win32GetCommMask ----
GetCommMask    GetCommMask函數檢索指定通信設備的事件遮罩值。
語法
參數
【HFILE】識別通信設備。CreateFile函數返回此控制碼。【lpEvtMask】指向32位元變數以填充當前啟用的事件遮罩。此參數可以是以下值中的一個或多個：值含義EV_BREAK輸入時檢


-------------------------------------------------------- KeyGTK3Win32GetCommModemStatus ----
GetCommModemStatus    GetCommModemStatus函數檢索數據機控制寄存器值。
語法
參數
【HFILE】識別通信設備。CreateFile函數返回此控制碼。【lpModemStat】指向一個32位元變數，指定數據機控制寄存器值的當前狀態。此參數可以是以下值的組合：值含義MS_CT


-------------------------------------------------------- KeyGTK3Win32GetCommProperties ----
GetCommProperties    GetCommProperties函數填充緩衝區，其中包含有關指定通信設備的通信屬性的資訊。
語法
參數
【HFILE】識別通信設備。CreateFile函數返回此控制碼。【lpCommProp】指向返回通信屬性資訊的COMMPROP結構。此資訊可用於以後調用SetCommState，SetCom


-------------------------------------------------------- KeyGTK3Win32GetCommState ----
GetCommState    GetCommState函數使用指定通信設備的當前控制設置填充設備控制塊（DCB結構）。
語法
參數
【HFILE】識別通信設備。CreateFile函數返回此控制碼。【lpDCB】指向返回控制設置資訊的DCB結構。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展


-------------------------------------------------------- KeyGTK3Win32GetCommTimeouts ----
GetCommTimeouts    GetCommTimeouts函數檢索指定通信設備上所有讀取和寫入操作的超時參數。
語法
參數
【HFILE】識別通信設備。CreateFile函數返回此控制碼。【lpCommTimeouts】指向返回超時資訊的COMMTIMEOUTS結構。
返回值
如果函數成功，返回值不為零。如果


-------------------------------------------------------- KeyGTK3Win32GetCompressedFileSize ----
GetCompressedFileSize    GetCompressedFileSize函數獲取指定檔的壓縮大小（以位元組為單位）。
語法
參數
【lpFileName】指向指定檔案名稱的以空值終止的字串的指標。【lpFileSizeHigh】指向DWORD變數的指標，該變數將該函數設置為壓縮檔大小的高位雙字。函數的返回值是壓縮文


-------------------------------------------------------- KeyGTK3Win32GetComputerName ----
GetComputerName    GetComputerName函數檢索當前系統的電腦名稱。該名稱在系統啟動時，從註冊表初始化時建立。
語法
參數
【lpBuffer】指向緩衝區以接收包含電腦名稱的以null結尾的字串。【服務提供者】指向一個變數，指定緩衝區的最大大小（以字元為單位）。該值應足夠大以包含MAX_COMPUTERNAM


-------------------------------------------------------- KeyGTK3Win32GetConsoleCP ----
GetConsoleCP    Windows NT： GetConsoleCP函數返回與調用進程關聯的控制台使用的輸入內碼表的標識。控制台使用其輸入內碼表將鍵盤輸入轉換為相應的字元值。
語法
參數
此函數無參數。
返回值
返回值是標識內碼表的代碼。
描述
內碼表將256個字元代碼映射到單個字元。不同的內碼表包括不同的特殊字元，通常是針對一種語言或一組語言定制的。要設置控制台的輸


-------------------------------------------------------- KeyGTK3Win32GetConsoleCursorInfo ----
GetConsoleCursorInfo    GetConsoleCursorInfo函數檢索有關指定控制台螢幕緩衝區的游標的大小和可見性的資訊。
語法
參數
【hConsoleOutput】標識控制台螢幕緩衝區。控制碼必須具有GENERIC_READ許可權。【lpConsoleCursorInfo】指向CONSOLE_CURSOR_INFO結構，其中


-------------------------------------------------------- KeyGTK3Win32GetConsoleMode ----
GetConsoleMode    GetConsoleMode函數報告控制台輸入緩衝區的當前輸入模式或控制台螢幕緩衝區的當前輸出模式。
語法
參數
【hConsoleHandle】標識控制台輸入緩衝區或螢幕緩衝區。控制碼必須具有GENERIC_READ許可權。【//當前模式標誌】指向一個32位元變數，指示指定緩衝區的當前模式。如果【hCons


-------------------------------------------------------- KeyGTK3Win32GetConsoleOutputCP ----
GetConsoleOutputCP    Windows NT： GetConsoleOutputCP函數返回與調用進程關聯的控制台使用的輸出內碼表的標識。控制台使用其輸出內碼表將由各種輸出函數寫入的字元值轉換為控制台視窗中顯示的圖像。
語法
參數
此函數無參數。
返回值
返回值是標識內碼表的代碼。
描述
內碼表將256個字元代碼映射到單個字元。不同的內碼表包括不同的特殊字元，通常是針對一種語言或一組語言定制的。要設置控制台的輸


-------------------------------------------------------- KeyGTK3Win32GetConsoleScreenBufferInfo ----
GetConsoleScreenBufferInfo    GetConsoleScreenBufferInfo函數檢索有關指定控制台螢幕緩衝區的資訊。
語法
參數
【hConsoleOutput】標識控制台螢幕緩衝區。控制碼必須具有GENERIC_READ許可權。【lpConsoleScreenBufferInfo】指向返回螢幕緩衝區資訊的CONSOLE_


-------------------------------------------------------- KeyGTK3Win32GetConsoleTitle ----
GetConsoleTitle    GetConsoleTitle函數檢索當前控制台視窗的標題列字串。
語法
參數
【lpConsoleTitle】指向一個緩衝區，接收一個空值終止的字串，其中包含控制台視窗標題列中顯示的文本。【服務提供者】指定由【lpConsoleTitle】參數指向的緩衝區的大小（以


-------------------------------------------------------- KeyGTK3Win32GetCPInfo ----
GetCPInfo    GetCPInfo函數檢索有關任何有效的已安裝或可用內碼表的資訊。
語法
參數
【CodePage】指定要檢索哪些資訊的內碼表。您可以為任何已安裝或可用的內碼表指定內碼表識別字，也可以指定以下預定義值之一：值含義CP_ACP使用系統預設的ANSI內碼表CP_MACCP使


-------------------------------------------------------- KeyGTK3Win32GetCurrencyFormat ----
GetCurrencyFormat    GetCurrencyFormat函數將數位字串格式化為指定區域設置的貨幣字串。
語法
參數
【語言環境】指定要格式化貨幣字串的區域設置。如果【lpFormat】為NULL，則該函數將根據該區域設置的貨幣格式格式化該字串。如果【lpFormat】不為NULL，則該函數僅對CURR


-------------------------------------------------------- KeyGTK3Win32GetCurrentDirectory ----
GetCurrentDirectory    GetCurrentDirectory函數檢索當前進程的目前的目錄。
語法
參數
【nBufferLength】指定目前的目錄字串的緩衝區的長度（以字元為單位）。緩衝區長度必須包含終止空字元的空間。【lpBuffer】指向目前的目錄字串的緩衝區。這個以null結尾的字串


-------------------------------------------------------- KeyGTK3Win32GetCurrentFiber ----
GetCurrentFiber    GetCurrentFiber函數返回當前光纖的位址。
語法
參數
此函數無參數。
返回值
返回值是當前正在運行的光纖的位址。
描述
創建光纖時，CreateFiber和ConvertThreadToFiber函數返回光纖位址。GetCurrentF


-------------------------------------------------------- KeyGTK3Win32GetCurrentHwProfile ----
GetCurrentHwProfile    [New - Windows NT]GetCurrentHwProfile函數檢索有關本地電腦的當前硬體設定檔的資訊。
語法
參數
【lpHwProfileInfo】指向HW_PROFILE_INFO結構的指標，其中函數返回有關當前硬體設定檔的資訊。
返回值
如果函數成功，則返回值為非零值。如果函數失敗，返回值為零


-------------------------------------------------------- KeyGTK3Win32GetCurrentObject ----
GetCurrentObject    GetCurrentObject函數返回指定類型的當前選定對象。
語法
參數
【HDC】標識設備上下文。【uObjectType】指定要查詢的對象類型。此參數可以是以下值之一：值含義OBJ_PEN返回當前選擇的筆。OBJ_BRUSH返回當前所選畫筆。OBJ_PAL返回


-------------------------------------------------------- KeyGTK3Win32GetCurrentPositionEx ----
GetCurrentPositionEx    GetCurrentPositionEx函數以邏輯座標檢索當前位置。
語法
參數
【HDC】標識設備上下文。【LPPOINT】指向POINT結構，它接收當前位置的座標。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32GetCurrentProcess ----
GetCurrentProcess    GetCurrentProcess函數返回當前進程的偽控制碼。
語法
參數
此函數無參數。
返回值
返回值是當前進程的偽手柄。
描述
偽控制碼是一個特殊的常量，被解釋為當前的進程控制碼。當需要進程控制碼時，調用進程可以使用該控制碼來指定自己的進程。偽控制碼不是由子進程


-------------------------------------------------------- KeyGTK3Win32GetCurrentProcessId ----
GetCurrentProcessId    GetCurrentProcessId函數返回調用進程的進程識別字。
語法
參數
此函數無參數。
返回值
返回值是調用進程的進程識別字。
描述
在進程終止之前，進程識別字唯一地標識整個系統中的進程。



-------------------------------------------------------- KeyGTK3Win32GetCurrentThread ----
GetCurrentThread    GetCurrentThread函數返回當前執行緒的偽控制碼。
語法
參數
此函數無參數。
返回值
返回值是當前執行緒的偽控制碼。
描述
偽控制碼是一個特殊常量，被解釋為當前的執行緒控制碼。當需要執行緒控制碼時，調用執行緒可以使用此控制碼來指定自身。偽控制碼不是由子進程繼承的。


-------------------------------------------------------- KeyGTK3Win32GetCurrentThreadId ----
GetCurrentThreadId    GetCurrentThreadId函數返回調用執行緒的執行緒識別字。
語法
參數
此函數無參數。
返回值
返回值是調用執行緒的執行緒識別字。
描述
直到執行緒終止，執行緒識別字唯一地標識整個系統中的執行緒。



-------------------------------------------------------- KeyGTK3Win32GetCurrentTime ----
GetCurrentTime    GetCurrentTime已過時。此函數僅用於與16位元版本的Windows相容。基於Win32的應用程式應使用GetTickCount函數或在註冊表項HKEY_PERFORMANCE_DATA中的性能資料中查找“系統啟動時間”計數器。


-------------------------------------------------------- KeyGTK3Win32GetCursor ----
GetCursor    GetCursor函數檢索當前游標的控制碼。
語法
參數
此函數無參數。
返回值
如果函數成功，返回值就是當前游標的控制碼。如果沒有游標，則返回值為NULL。



-------------------------------------------------------- KeyGTK3Win32GetCursorPos ----
GetCursorPos    GetCursorPos函數以螢幕座標取得游標的位置。
語法
參數
【LPPOINT】指向接收游標螢幕座標的POINT結構。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
光


-------------------------------------------------------- KeyGTK3Win32GetDateFormat ----
GetDateFormat    GetDateFormat函數將日期格式指定為指定區域設置的日期字串。該函數格式化指定的日期或本地系統日期。
語法
參數
【語言環境】指定要格式化日期字串的區域設置。如果【lpFormat】為NULL，則該函數根據該語言環境的日期格式對該字串進行格式化。如果【lpFormat】不為NULL，則該函數僅對格式


-------------------------------------------------------- KeyGTK3Win32GetDC ----
GetDC    GetDC函數檢索指定視窗的用戶端區域的顯示裝置上下文（DC）的控制碼。顯示裝置上下文可用於隨後的GDI函數，以繪製視窗的客戶區。此函數根據為指定視窗指定的類樣式檢索公共，類或私有設備上下文。對於常見的設備上下文，GetDC每次檢索時都會將預設屬性分配給設備上下文。對於類和私有設備上下文，GetDC保留先前分配的屬性不變。
語法
參數
【的hWnd】標識要檢索其設備上下文的視窗。
返回值
如果函數成功，則返回值標識給定視窗客戶區的設備上下文。如果函數失敗，返回值為NULL。
描述
在使用公共設備上下文繪製後，必須調


-------------------------------------------------------- KeyGTK3Win32GetDCEx ----
GetDCEx    GetDCEx函數檢索指定視窗的顯示裝置（DC）上下文的控制碼。顯示裝置上下文可用於隨後的GDI函數，以繪製客戶區。此函數是GetDC函數的擴展，使應用程式能夠更好地控制用戶端區域中是否發生裁剪。
語法
參數
【的hWnd】標識出現繪圖的視窗。【hrgnClip】指定可與用戶端視窗的可見區域組合的裁剪區域。【旗】指定如何創建設備上下文。此參數可以是以下值的組合：值含義DCX_WINDOW返回與窗口


-------------------------------------------------------- KeyGTK3Win32GetDCOrgEx ----
GetDCOrgEx    GetDCOrgEx函數獲取指定設備上下文（DC）的最終轉換起始點。最終翻譯來源指定Windows用於將設備座標轉換為用戶端座標（對於應用程式視窗中的座標）的偏移量。此函數取代GetDCOrg函數。
語法
參數
【HDC】指定要檢索其最終翻譯原點的設備上下文。【LPPOINT】指向POINT結構，該函數將在設備座標中設置為最終翻譯原點。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為


-------------------------------------------------------- KeyGTK3Win32GetDefaultCommConfig ----
GetDefaultCommConfig    [Now Supported on Windows NT]GetDefaultCommConfig函數獲取通信設備的預設配置。
語法
參數
【lpszName】指向指定設備名稱的以null結尾的字串。【lpCC】指向接收COMMCONFIG結構的緩衝區。【lpdwSize】指向32位元變數，指定由【lpCC】指向的緩衝區的大小（


-------------------------------------------------------- KeyGTK3Win32GetDesktopWindow ----
GetDesktopWindow    GetDesktopWindow函數返回Windows桌面視窗的控制碼。桌面視窗覆蓋整個螢幕。桌面視窗是其上所有圖示和其他視窗的區域。
語法
參數
此函數無參數。
返回值
返回值是桌面窗口的控制碼。



-------------------------------------------------------- KeyGTK3Win32GetDeviceCaps ----
GetDeviceCaps    GetDeviceCaps函數檢索有關指定設備的特定於設備的資訊。
語法
參數
【HDC】標識設備上下文。【參數nIndex】指定要返回的專案。此參數可以是以下值之一：指數含義DRIVERVERSION設備驅動程式版本。TECHNOLOGY設備技術。它可以是以下值之一：


-------------------------------------------------------- KeyGTK3Win32GetDeviceGammaRamp ----
GetDeviceGammaRamp    GetDeviceGammaRamp函數檢索直接彩色顯示板上的伽馬斜坡。
語法
參數
【HDC】處理設備上下文。【lpRamp】指向一組256位元組元素的三個陣列。這些陣列是幀緩衝器和DAC值之間的顏色值之間的映射。第一個陣列是紅色，下一個是綠色，最後一個是藍色。
返回值



-------------------------------------------------------- KeyGTK3Win32GetDialogBaseUnits ----
GetDialogBaseUnits    GetDialogBaseUnits函數返回Windows使用的對話方塊基本單位，以創建對話方塊。Windows和應用程式都使用這些單元將對話方塊和控制項的寬度和高度從對話方塊範本中轉換為圖元，反之亦然。
語法
參數
此函數無參數。
返回值
返回值是包含對話方塊基本單位的32位元值。返回值的低位元字包含水準對話方塊基本單位，高位字包含垂直對話方塊基本單位。
描述
水準基本單位等於系統字體中字元的平均寬度（以


-------------------------------------------------------- KeyGTK3Win32GetDIBits ----
GetDIBits    GetDIBits函數檢索指定點陣圖的位元，並使用指定的格式將它們複製到緩衝區中。
語法
參數
【HDC】標識設備上下文。【骨形態發生蛋白】標識點陣圖。【uStartScan】指定要檢索的第一條掃描線。【cScanLines】指定要檢索的掃描線數。【lpvBits】指向緩衝區以接收點陣圖數


-------------------------------------------------------- KeyGTK3Win32GetDiskFreeSpace ----
GetDiskFreeSpace    GetDiskFreeSpace函數檢索有關指定磁片的資訊，包括磁片上的可用空間量。
語法
參數
【lpRootPathName】指向一個以null結尾的字串，指定磁片的根目錄以返回有關的資訊。如果【lpRootPathName】為NULL，則該函數使用目前的目錄的根。【lpSector


-------------------------------------------------------- KeyGTK3Win32GetDiskFreeSpaceEx ----
GetDiskFreeSpaceEx    [New - Windows NT][New - Windows 95, OEM Service Release 2]GetDiskFreeSpaceEx函數獲取有關磁片卷上可用空間量的資訊：空間總量，可用空間總量以及與調用執行緒相關聯的用戶可用空間總量。
語法
參數
【lpDirectoryName】指向一個以空值終止的字串，指定感興趣的磁片上的目錄。該字串可以是UNC名稱。如果【lpDirectoryName】為NULL，則GetDiskFreeS


-------------------------------------------------------- KeyGTK3Win32GetDlgCtrlID ----
GetDlgCtrlID    GetDlgCtrlID函數返回指定控制項的識別字。
語法
參數
【//控制柄】標識控制項。
返回值
如果函數成功，返回值就是控制項的識別字。如果函數失敗，返回值為NULL。例如，【//控制柄】參數的無效值將導致該函數失敗。
描述
GetDlgCtrl


-------------------------------------------------------- KeyGTK3Win32GetDlgItem ----
GetDlgItem    GetDlgItem函數在指定的對話方塊中檢索控制項的控制碼。
語法
參數
【hDlg】標識包含控制項的對話方塊。【nIDDlgItem】指定要檢索的控制項的識別字。
返回值
如果函數成功，則返回值是給定控制項的視窗控制碼。如果函數失敗，則返回值為NULL，表示無效的對話


-------------------------------------------------------- KeyGTK3Win32GetDlgItemInt ----
GetDlgItemInt    GetDlgItemInt函數將對話方塊中指定控制項的文本轉換為整數值。
語法
參數
【hDlg】處理包含感興趣的控制項的對話方塊。【nIDDlgItem】對話方塊專案識別字，指定要翻譯其文本的控制項。【lpTranslated】指向接收函數成功/失敗值的布林變數。TRUE表示成功，


-------------------------------------------------------- KeyGTK3Win32GetDlgItemText ----
GetDlgItemText    GetDlgItemText函數在對話方塊中檢索與控制項相關聯的標題或文本。
語法
參數
【hDlg】標識包含控制項的對話方塊。【nIDDlgItem】指定要檢索其標題或文本的控制項的識別字。【lpString】指向緩衝區以接收標題或文本。【nMaxCount】指定要複製到【lpStr


-------------------------------------------------------- KeyGTK3Win32GetDoubleClickTime ----
GetDoubleClickTime    GetDoubleClickTime函數檢索滑鼠當前的按兩下時間。按兩下滑鼠是兩次點擊滑鼠，第二次在第一次指定的時間後發生。按兩下時間是按兩下的第一次和第二次點擊之間可能發生的最大毫秒數。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值指定當前的按兩下時間（以毫秒為單位）。



-------------------------------------------------------- KeyGTK3Win32GetDriveType ----
GetDriveType    GetDriveType函數確定磁碟機是可移動的，固定的，CD-ROM，RAM磁片還是網路磁碟。
語法
參數
【lpRootPathName】指向一個以null結尾的字串，指定磁片的根目錄以返回有關的資訊。如果【lpRootPathName】為NULL，則該函數使用目前的目錄的根。
返回值
返回


-------------------------------------------------------- KeyGTK3Win32GetEffectiveClientRect ----
GetEffectiveClientRect    GetEffectiveClientRect函數計算用戶端區域中矩形的尺寸。此函數的實用性有限。
語法
參數
【的hWnd】處理到有客戶區要檢查的視窗。【LPRC】指向接收矩形尺寸的RECT結構的指標。【lpinfoit】指向用戶端區域中控制項的16位元控制識別字陣列。每個控制項需要兩個陣列元素。第一個元素


-------------------------------------------------------- KeyGTK3Win32GetEffectiveRightsFromAcl ----
GetEffectiveRightsFromAcl    [New - Windows NT]GetEffectiveRightsFromAcl函數檢索ACL允許指定的受託人的有效存取權限。受託人的有效存取權限是ACL授予受託人或受託人所屬組織的存取權限。該函數不考慮受託人在確定有效存取權限時所持有的安全特權。
語法
參數
【ACL】指向獲取受託人有效存取權限的ACL。【pTrustee】指向TRUSTEE結構的指標，用於標識受託人。受託人可以是使用者，組或程式（如Windows NT服務）。您可以使用名稱或安全


-------------------------------------------------------- KeyGTK3Win32GetEnhMetaFile ----
GetEnhMetaFile    GetEnhMetaFile函數創建一個控制碼，用於標識存儲在指定檔中的增強格式的中繼檔。
語法
參數
【lpszMetaFile】指向以空值終止的字串，指定增強型圖中繼檔的名稱。
返回值
如果函數成功，則返回值是增強的圖中繼檔的控制碼。如果函數失敗，返回值為NULL。
描述
當應用程


-------------------------------------------------------- KeyGTK3Win32GetEnhMetaFileBits ----
GetEnhMetaFileBits    GetEnhMetaFileBits函數檢索指定的增強格式的圖中繼檔的內容並將其複製到緩衝區中。
語法
參數
【HEMF】識別增強的圖中繼檔。【cbBuffer】指定接收資料的緩衝區的大小（以位元組為單位）。【lpbBuffer】指向緩衝區以接收中繼檔資料。緩衝區必須足夠大以容納資料。如果【lpbBu


-------------------------------------------------------- KeyGTK3Win32GetEnhMetaFileDescription ----
GetEnhMetaFileDescription    GetEnhMetaFileDescription函數從增強格式的圖中繼檔中檢索可選文本描述，並將該字串複製到指定的緩衝區。
語法
參數
【HEMF】識別增強的圖中繼檔。【cchBuffer】指定接收資料的緩衝區的大小（以字元為單位）。只有這麼多人物才會被複製。【XNUM】指向緩衝區以接收可選文本描述。
返回值
如果可選文


-------------------------------------------------------- KeyGTK3Win32GetEnhMetaFileHeader ----
GetEnhMetaFileHeader    GetEnhMetaFileHeader函數檢索包含指定增強格式圖中繼檔的標題的記錄。
語法
參數
【HEMF】標識要檢索標題的增強型圖中繼檔。【cbBuffer】指定接收資料的緩衝區的大小（以位元組為單位）。只會複製這麼多位元組。【lpemhsq】指向ENHMETAHEADER結構以接收頭記


-------------------------------------------------------- KeyGTK3Win32GetEnhMetaFilePaletteEntries ----
GetEnhMetaFilePaletteEntries    GetEnhMetaFilePaletteEntries函數從指定的增強型圖中繼檔中檢索可選的調色板條目。
語法
參數
【HEMF】識別增強的圖中繼檔。【cEntries】指定要從可選調色板檢索的條目數。【LPPE】指向一系列PALETTEENTRY結構以接收調色板顏色。該陣列必須至少包含與【cEntries


-------------------------------------------------------- KeyGTK3Win32GetEnvironmentStrings ----
GetEnvironmentStrings    GetEnvironmentStrings函數返回當前進程的環境塊位址。此函數將替換GetDOSEnvironment函數。
語法
參數
此函數無參數。
返回值
返回值是指向當前進程的環境塊的指標。
描述
不要使用GetEnvironmentStrings的返回值來獲取或設置環境變數。而是使用GetEnvironmen


-------------------------------------------------------- KeyGTK3Win32GetEnvironmentVariable ----
GetEnvironmentVariable    GetEnvironmentVariable函數從調用進程的環境塊中檢索指定變數的值。該值以空字元結尾的字串的形式。
語法
參數
【lpName】指向指定環境變數的以null結尾的字串。【lpBuffer】指向緩衝區以接收指定環境變數的值。【服務提供者】指定【lpBuffer】參數指向的緩衝區的大小（以字元為單位）。


-------------------------------------------------------- KeyGTK3Win32GetExceptionCode ----
GetExceptionCode    GetExceptionCode函數檢索一個代碼，該代碼標識發生的異常類型。該函數只能從嘗試  -  除例外處理常式的篩檢程式運算式或例外處理常式塊中調用。
語法
參數
此函數無參數。
返回值
返回值標識異常的類型。以下是由於常見的程式設計錯誤而可能發生的異常代碼：值含義EXCEPTION_ACCESS_VIOLATION  執行緒嘗試從不具有適當存取權限的虛


-------------------------------------------------------- KeyGTK3Win32GetExceptionInformation ----
GetExceptionInformation    GetExceptionInformation函數檢索與機器無關的異常描述，以及有關發生異常時針對執行緒存在的電腦狀態的資訊。只能從嘗試  -  除例外處理常式的篩檢程式運算式中調用此函數。
語法
參數
此函數無參數。
返回值
返回值是一個指向EXCEPTION_POINTERS結構的指標，其中包含兩個其他結構的指標：包含異常描述的EXCEPTION_RECORD結構和包含機器狀態資訊的


-------------------------------------------------------- KeyGTK3Win32GetExitCodeProcess ----
GetExitCodeProcess    GetExitCodeProcess函數檢索指定進程的終止狀態。
語法
參數
【hProcess】標識過程。Windows NT：控制碼必須具有PROCESS_QUERY_INFORMATION許可權。有關詳細資訊，請參閱過程物件.【lpExitCode】指向32位元變數以


-------------------------------------------------------- KeyGTK3Win32GetExitCodeThread ----
GetExitCodeThread    GetExitCodeThread函數檢索指定執行緒的終止狀態。
語法
參數
【hThread】標識執行緒。Windows NT：控制碼必須具有THREAD_QUERY_INFORMATION許可權。有關詳細資訊，請參閱執行緒物件.【lpExitCode】指向32位元變數以接收


-------------------------------------------------------- KeyGTK3Win32GetExpandedName ----
GetExpandedName    如果通過使用Microsoft檔案壓縮實用程式（COMPRESS.EXE）壓縮了該檔並且指定了/r選項，則GetExpandedName函數將檢索壓縮檔的原始名稱。
語法



-------------------------------------------------------- KeyGTK3Win32GetExplicitEntriesFromAcl ----
GetExplicitEntriesFromAcl    [New - Windows NT]GetExplicitEntriesFromAcl函數檢索描述存取控制清單（ACL）中存取控制條目（ACE）的EXPLICIT_ACCESS結構的陣列。
語法
參數
【ACL】指向獲取ACE資訊的ACL。【pcCountOfExplicitEntries】指向【pListOfExplicitEntries陣列。】中返回的EXPLICIT_ACCESS結構


-------------------------------------------------------- KeyGTK3Win32GetFiberData ----
GetFiberData    GetFiberData函數返回與當前光纖相關聯的光纖資料。
語法
參數
此函數無參數。
返回值
返回值是當前運行光纖的光纖資料。
描述
光纖資料是傳遞給【lpParameter參數】參數中CreateFiber或ConvertThreadToFiber函


-------------------------------------------------------- KeyGTK3Win32GetFileAttributes ----
GetFileAttributes    GetFileAttributes函數返回指定檔或目錄的屬性。
語法
參數
【lpFileName】指向一個以空字元結尾的字串，指定檔或目錄的名稱。Windows NT：對於MAX_PATH字元的路徑，預設字串大小限制。此限制與GetFileAttribute


-------------------------------------------------------- KeyGTK3Win32GetFileAttributesEx ----
GetFileAttributesEx    [New - Windows NT]GetFileAttributesEx函數獲取有關指定檔或目錄的屬性資訊。此函數類似於GetFileAttributes函數。GetFileAttributes返回一組FAT樣式的屬性資訊。GetFileAttributesEx旨在獲取其他檔或目錄屬性資訊集。目前，GetFileAttributeEx獲得了一組作為FAT樣式屬性資訊超集合的標準屬性。
語法
參數
【lpFileName】指向指定檔或目錄的以空值終止的字串的指標。預設情況下，此字串限制為MAX_PATH個字元。限制與GetFileAttributesEx函數如何解析路徑有關。通過


-------------------------------------------------------- KeyGTK3Win32GetFileInformationByHandle ----
GetFileInformationByHandle    GetFileInformationByHandle函數檢索有關指定檔的資訊。
語法
參數
【HFILE】處理您要獲取有關資訊的檔。該手柄不應該是管道手柄。GetFileInformationByHandle函數不適用於管道手柄。【lpFileInformation】指向BY_H


-------------------------------------------------------- KeyGTK3Win32GetFileSecurity ----
GetFileSecurity    GetFileSecurity函數獲取有關檔或目錄安全性的指定資訊。所獲得的資訊受到呼叫者的存取權限和許可權的約束。
語法
參數
【lpFileName】指向以null結尾的字串，指定檢索安全資訊的檔或目錄。【RequestedInformation】指定一個SECURITY_INFORMATION結構，用於標識正


-------------------------------------------------------- KeyGTK3Win32GetFileSize ----
GetFileSize    GetFileSize函數檢索指定檔的大小（以位元組為單位）。
語法
參數
【HFILE】指定要返回大小的文件的打開控制碼。必須使用GENERIC_READ或GENERIC_WRITE訪問該檔創建控制碼。【lpFileSizeHigh】指向返回檔大小高位字的變數。如


-------------------------------------------------------- KeyGTK3Win32GetFileTime ----
GetFileTime    GetFileTime函數檢索檔創建，上次訪問和上次修改的日期和時間。
語法
參數
【HFILE】標識要獲取日期和時間的檔。必須使用GENERIC_READ訪問該檔創建檔案控制代碼。【lpCreationTime】指向FILETIME結構以接收檔創建的日期和時間。如果應用


-------------------------------------------------------- KeyGTK3Win32GetFileTitle ----
GetFileTitle    GetFileTitle函數返回由【lpszFile】參數標識的檔的名稱。
語法
參數
【lpszFile】指向檔的名稱和位置。【lpszTitle】指向緩衝區的指標，其中函數將複製檔的名稱。【cbBuf】指定【lpszTitle】參數指向的緩衝區的長度（以字元為單位）。



-------------------------------------------------------- KeyGTK3Win32GetFileType ----
GetFileType    GetFileType函數返回指定檔的類型。
語法
參數
【HFILE】標識一個打開的檔案控制代碼。
返回值
返回值是以下值之一：值含義FILE_TYPE_UNKNOWN指定檔的類型是未知的。FILE_TYPE_DISK指定的檔是磁片檔。FI


-------------------------------------------------------- KeyGTK3Win32GetFileVersionInfo ----
GetFileVersionInfo    GetFileVersionInfo函數返回有關指定檔的版本資訊。與其他檔安裝函數一樣，GetFileVersionInfo僅適用於Win32檔映射。它不適用於16位Windows檔映射。
語法
參數
【lptstrFilename】指向指定感興趣檔的以null結尾的檔案名字串的指標。【dwHandle】此參數被忽略。【This function is often used to ge


-------------------------------------------------------- KeyGTK3Win32GetFileVersionInfoSize ----
GetFileVersionInfoSize    GetFileVersionInfoSize函數確定作業系統是否可以獲取有關指定檔的版本資訊。如果版本資訊可用，GetFileVersionInfoSize返回該資訊的位元組大小。與其他檔安裝函數一樣，GetFileVersionInfo僅適用於Win32檔映射。它不適用於16位Windows檔映射。
語法
參數
【lptstrFilename】指向指定感興趣檔的以null結尾的檔案名字串的指標。【lpdwHandlexh】指向函數設置為零的變數的指標。
返回值
如果函數成功，則返回值是檔版


-------------------------------------------------------- KeyGTK3Win32GetFocus ----
GetFocus    如果視窗與調用執行緒的訊息佇列相關聯，則GetFocus函數將檢索具有鍵盤焦點的視窗的控制碼。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是具有鍵盤焦點的視窗的控制碼。如果調用執行緒的訊息佇列沒有與鍵盤焦點關聯的視窗，則返回值為NULL。
描述
即使GetFocus返回NULL


-------------------------------------------------------- KeyGTK3Win32GetFontData ----
GetFontData    GetFontData函數檢索TrueType字體的字體度量資料。
語法
參數
【HDC】標識設備上下文。【dwTable】指定要從中檢索字體資料的字體度量表的名稱。此參數可以標識由Microsoft Corporation發佈的TrueType字體檔規範中記錄的度量


-------------------------------------------------------- KeyGTK3Win32GetFontLanguageInfo ----
GetFontLanguageInfo    [Now Supported on Windows NT]GetFontLanguageInfo函數返回有關指定顯示上下文的當前選定字體的資訊。應用程式通常使用此資訊和GetCharacterPlacement函數來準備一個字串進行顯示。
語法
參數
【HDC】處理顯示上下文。
返回值
返回值標識當前所選字體的特徵。如果字體為“標準化”，該函數返回0，並將其視為簡單的拉丁字體;如果發生錯誤，它返回GCP_ERROR。否則，函數返回以下


-------------------------------------------------------- KeyGTK3Win32GetForegroundWindow ----
GetForegroundWindow    GetForegroundWindow函數返回前臺視窗的控制碼（使用者當前正在使用的視窗）。系統為創建前臺視窗的執行緒分配比其他執行緒稍高的優先順序。
語法
參數
此函數無參數。
返回值
返回值是前臺窗口的控制碼。



-------------------------------------------------------- KeyGTK3Win32GetForm ----
GetForm    GetForm函數使用描述印表機指定表單的資料初始化FORM_INFO_1結構。
語法
參數
【hPrinter】標識印表機。【pFormName】指向指定表單名稱的以null結尾的字串。【水準】指定【P成型】指向的結構的版本。此值必須為1。【P成型】指向接收初始化FORM_INF


-------------------------------------------------------- KeyGTK3Win32GetFreeSpace ----
GetFreeSpace         GetFreeSpace函數已過時。它提供了簡化16位元Windows應用程式的移植。基於Win32的應用程式應使用GlobalMemoryStatus函數。


-------------------------------------------------------- KeyGTK3Win32GetFullPathName ----
GetFullPathName    GetFullPathName函數檢索指定檔的完整路徑和檔案名。
語法
參數
【lpFileName】指向一個空值終止的字串，指定一個有效的檔案名。該字串可以使用短（8.3格式）或長檔名。【nBufferLength】指定驅動器和路徑的緩衝區的大小（以字元為單位


-------------------------------------------------------- KeyGTK3Win32GetGlyphOutline ----
GetGlyphOutline    GetGlyphOutline函數檢索在指定設備上下文中選擇的TrueType字體中的字元的輪廓或點陣圖。
語法
參數
【HDC】標識設備上下文。【飛行】指定要返回資料的字元。【UFormat】指定函數檢索的資料格式。使用以下值之一：值含義GGO_BITMAP該函數檢索字形點陣圖。有關記憶體分配的資訊，請參閱以下


-------------------------------------------------------- KeyGTK3Win32GetGraphicsMode ----
GetGraphicsMode    GetGraphicsMode函數檢索指定設備上下文的當前圖形模式。
語法
參數
【HDC】標識設備上下文。
返回值
如果函數成功，返回值就是當前的圖形模式。它可以是以下值之一：值含義GM_COMPATIBLE當前的圖形模式是相容的圖形模式，這是與Windows 3.


-------------------------------------------------------- KeyGTK3Win32GetHandleInformation ----
GetHandleInformation    GetHandleInformation函數獲取有關物件控制碼的某些屬性的資訊。資訊作為一組位元標誌獲得。
語法
參數
【hObject】指定對象的控制碼。GetHandleInformation函數獲取有關該物件控制碼的資訊。【lpdwFlagsaf】指向一個變數以接收一組指定物件控制碼屬性的位元標誌。定義了以下標


-------------------------------------------------------- KeyGTK3Win32GetICMProfile ----
GetICMProfile    GetICMProfile函數檢索與指定設備上下文關聯的設備的色彩設定檔的名稱。
語法
參數
【HDC】處理設備上下文。【lpcbName】指向DWORD的指標，其中包含接收檔案名的緩衝區的大小（以位元組或字元為單位），具體取決於是使用ANSI或Unicode版本的函數。如果緩衝區太小


-------------------------------------------------------- KeyGTK3Win32GetIconInfo ----
GetIconInfo    GetIconInfo函數檢索有關指定圖示或游標的資訊。
語法
參數
【惠康】標識圖示或游標。要檢索有關標準圖示或游標的資訊，請指定以下值之一：值含義IDC_ARROW箭頭游標IDC_IBEAMI-beam游標IDC_WAIT沙漏游標IDC_CROSS十字準線


-------------------------------------------------------- KeyGTK3Win32GetInputState ----
GetInputState    GetInputState函數確定調用執行緒的訊息佇列中是否有滑鼠按鈕或鍵盤消息。
語法
參數
此函數無參數。
返回值
如果佇列包含一個或多個新的滑鼠按鈕或鍵盤消息，則返回值不為零。如果佇列中沒有新的滑鼠按鈕或鍵盤消息，則返回值為零。



-------------------------------------------------------- KeyGTK3Win32GetJob ----
GetJob    GetJob函數檢索指定印表機的列印工作資料。
語法
參數
【hPrinter】標識檢索列印工作資料的印表機。【JobId】標識應檢索資料的列印工作。【水準】指定【pJob】指向的結構的級別。該值必須是1或2。【pJob】指向包含JOB_INFO_1


-------------------------------------------------------- KeyGTK3Win32GetKBCodePage ----
GetKBCodePage    提供GetKBCodePage函數以相容早期版本的Windows。在Win32應用程式設計發展介面（API）中，它只調用GetOEMCP函數。新應用程式應使用GetOEMCP函數。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是OEM內碼表識別字，如果註冊表值不可讀，則它是默認識別字。有關OEM內碼表識別字的列表，請參閱GetOEMCP.



-------------------------------------------------------- KeyGTK3Win32GetKernelObjectSecurity ----
GetKernelObjectSecurity    GetKernelObjectSecurity函數檢索保護內核對象的安全性描述元的副本。
語法
參數
【處理】標識一個內核對象。【RequestedInformation】指定一個SECURITY_INFORMATION結構，用於標識正在請求的安全資訊。【pSecurityDescripto


-------------------------------------------------------- KeyGTK3Win32GetKerningPairs ----
GetKerningPairs    GetKerningPairs函數檢索指定設備上下文當前選定字體的字元間距對。
語法
參數
【HDC】標識設備上下文。【nNumPairs】指定適合【lpkrnpair】陣列的對數。如果字體超過【nNumPairs】字距對，則返回錯誤。【lpkrnpair】指向KERNINGPAI


-------------------------------------------------------- KeyGTK3Win32GetKeyboardLayout ----
GetKeyboardLayout    [Now Supported on Windows NT]GetKeyboardLayout函數檢索指定執行緒的活動鍵盤配置。如果【dwLayout】參數為零，則返回活動執行緒的佈局。
語法
參數
【dwLayout】標識要查詢的執行緒或當前執行緒為零。
返回值
返回值是執行緒的鍵盤配置控制碼。低字包含標識輸入語言的區域識別字，高字包含識別鍵盤的物理佈局的設備控制碼。



-------------------------------------------------------- KeyGTK3Win32GetKeyboardLayoutList ----
GetKeyboardLayoutList    [Now Supported on Windows NT]GetKeyboardLayoutList函數檢索與系統中當前輸入區域設置集相對應的鍵盤配置控制碼。該函數將控制碼複製到給定的緩衝區。
語法
參數
【nBuff】指定緩衝區可以容納的最大控制碼數。【lpList】指向緩衝區，一個接收鍵盤配置控制碼的陣列。
返回值
如果函數成功，則返回值是複製到緩衝區的佈局控制碼數，或者如果【nBuff】為


-------------------------------------------------------- KeyGTK3Win32GetKeyboardLayoutName ----
GetKeyboardLayoutName    GetKeyboardLayoutName函數檢索活動鍵盤配置的名稱。
語法
參數
【pwszKLID】指向至少KL_NAMELENGTH個字元的緩衝區，用於接收鍵盤配置的名稱，包括NULL結束字元。這將是提供給LoadKeyboardLayout函數的字串的副本，除非進行


-------------------------------------------------------- KeyGTK3Win32GetKeyboardState ----
GetKeyboardState    GetKeyboardState函數將256個虛擬鍵的狀態複製到指定的緩衝區。
語法
參數
【lpKeyState】指向將接收每個虛擬鍵的狀態資料的256位元組陣列。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError


-------------------------------------------------------- KeyGTK3Win32GetKeyboardType ----
GetKeyboardType    GetKeyboardType函數檢索有關當前鍵盤的資訊。
語法



-------------------------------------------------------- KeyGTK3Win32GetKeyNameText ----
GetKeyNameText    GetKeyNameText函數檢索表示鍵名稱的字串。
語法



-------------------------------------------------------- KeyGTK3Win32GetKeyState ----
GetKeyState    GetKeyState函數檢索指定虛擬鍵的狀態。該狀態指定鍵是上，下還是切換（每次按下鍵時__交替關閉）。
語法
參數
【nVirtKey】指定虛擬鍵。如果所需的虛擬鍵是字母或數位（A到Z，a到z或0到9），則必須將【nVirtKey】設置為該字元的ASCII值。對於其他鍵，它必須是虛擬鍵代碼。如果使用非英文


-------------------------------------------------------- KeyGTK3Win32GetLargestConsoleWindowSize ----
GetLargestConsoleWindowSize    根據當前的字體和顯示的大小，GetLargestConsoleWindowSize函數返回最大可能的控制台視窗的大小。
語法
參數
【hConsoleOutput】標識控制台螢幕緩衝區。
返回值
如果函數成功，則返回值是一個COORD結構，它指定了最大可能的控制台視窗中的字元單元行數（X成員）和列（Y成員）的數量。否


-------------------------------------------------------- KeyGTK3Win32GetLastActivePopup ----
GetLastActivePopup    GetLastActivePopup函數確定指定視窗擁有的快顯視窗最近處於活動狀態。
語法
參數
【的hWnd】標識所有者視窗。
返回值
返回值標識最近活動的快顯視窗。返回值與【的hWnd】參數相同，如果滿足以下任一條件：* 【的hWnd】標識的視窗最近是活動的。* 【的hWnd】標


-------------------------------------------------------- KeyGTK3Win32GetLastError ----
GetLastError    GetLastError函數返回調用執行緒的最後一個錯誤代碼值。最後一個錯誤代碼基於每個執行緒進行維護。多個執行緒不會覆蓋彼此的最後一個錯誤代碼。
語法
參數
此函數無參數。
返回值
返回值是調用執行緒的最後一個錯誤代碼值。函數通過調用SetLastError函數設置此值。每個參考頁面的回報值部分說明了函數設置最後一個錯誤代碼的條件。
描述



-------------------------------------------------------- KeyGTK3Win32GetLengthSid ----
GetLengthSid    GetLengthSid函數返回有效SID結構的長度（以位元組為單位）。SID是安全性識別碼。
語法
參數
【PSID】指向返回長度的SID結構。該結構被認為是有效的。
返回值
如果函數成功，則返回值為SID結構的長度（以位元組為單位）。如果SID結構無效，則返回值未定義。要獲取擴展錯誤資訊，請


-------------------------------------------------------- KeyGTK3Win32GetLocaleInfo ----
GetLocaleInfo    GetLocaleInfo函數檢索有關區域設置的資訊。
語法
參數
【語言環境】指定檢索資訊的區域設置。此參數可以是由MAKELCID宏或以下預定義值之一創建的地區設定識別碼：LOCALE_SYSTEM_DEFAULT默認系統地區設定。LOCALE_USER


-------------------------------------------------------- KeyGTK3Win32GetLocalTime ----
GetLocalTime    GetLocalTime函數檢索當前的本地日期和時間。
語法
參數
【lpSystemTime】指向SYSTEMTIME結構以接收當前的當地日期和時間。
返回值
此函數不返回值。



-------------------------------------------------------- KeyGTK3Win32GetLogColorSpace ----
GetLogColorSpace    GetLogColorSpace函數檢索由指定控制碼標識的邏輯顏色空間的資訊。
語法
參數
【hColorSpace】處理邏輯色彩空間。【lpBuffer】指向接收邏輯顏色空間資訊的LOGCOLORSPACE結構的指標。【服務提供者】緩衝區的最大大小（以位元組為單位）。
返回值



-------------------------------------------------------- KeyGTK3Win32GetLogicalDrives ----
GetLogicalDrives    GetLogicalDrives函數返回表示當前可用磁碟機的位元遮罩。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是表示當前可用磁碟機的位元遮罩。位位置0（最低有效位）為驅動器A，位位置1為驅動器B，位位置2為驅動器C，依此類推。如果函數失敗，返回值為


-------------------------------------------------------- KeyGTK3Win32GetLogicalDriveStrings ----
GetLogicalDriveStrings    GetLogicalDriveStrings函數使用指定系統中有效驅動器的字串填充緩衝區。
語法
參數
【nBufferLength】指定【lpBuffer】指向的緩衝區的最大大小（以字元為單位）。此大小不包括終止空字元。【lpBuffer】指向緩衝區，該緩衝區接收一系列以null結尾的字串


-------------------------------------------------------- KeyGTK3Win32GetMailslotInfo ----
GetMailslotInfo    GetMailslotInfo函數檢索有關指定郵槽的資訊。
語法
參數
【hMailslot】標識一個郵槽。CreateMailslot函數必須創建此控制碼。【lpMaxMessageSize】指向緩衝區，指定函數返回時允許此郵槽的最大郵件大小（以位元組為單位）。該


-------------------------------------------------------- KeyGTK3Win32GetMapMode ----
GetMapMode    GetMapMode函數檢索當前的映射模式。
語法
參數
【HDC】標識設備上下文。
返回值
如果函數成功，則返回值指定映射模式。如果函數失敗，返回值為零。
描述
以下清單描述了各種映射模式：值描述MM_ANISOTROPIC邏輯單位通過任


-------------------------------------------------------- KeyGTK3Win32GetMenu ----
GetMenu    GetMenu函數檢索分配給給定視窗的功能表的控制碼。
語法
參數
【的hWnd】標識檢索其功能表控制碼的視窗。
返回值
如果函數成功，返回值就是功能表的控制碼。如果給定的視窗沒有功能表，則返回值為NULL。如果視窗是子視窗，返回值是未定義的。



-------------------------------------------------------- KeyGTK3Win32GetMenuCheckMarkDimensions ----
GetMenuCheckMarkDimensions    此函數已過時。使用具有CXMENUCHECK和CYMENUCHECK值的GetSystemMetrics來檢索點陣圖維度。GetMenuCheckMarkDimensions函數返回預設核取記號點陣圖的尺寸。Windows在檢查功能表項目旁邊顯示此點陣圖。在調用SetMenuItemBitmaps函數替換功能表項目的預設核取記號點陣圖之前，應用程式必須通過調用GetMenuCheckMarkDimensions來確定正確的點陣圖大小。
語法
參數
此函數無參數。
返回值
返回值指定默認核取記號點陣圖的高度和寬度（以圖元為單位）。高位詞包含高度;低位字包含寬度。



-------------------------------------------------------- KeyGTK3Win32GetMenuContextHelpId ----
GetMenuContextHelpId    GetMenuContextHelpId函數檢索與指定功能表相關聯的説明上下文識別字。
語法
參數
【HMENU】處理要檢索説明上下文識別字的功能表。
返回值
如果功能表有一個或另一個則返回幫助上下文識別字。



-------------------------------------------------------- KeyGTK3Win32GetMenuDefaultItem ----
GetMenuDefaultItem    [Now Supported on Windows NT]GetMenuDefaultItem函數確定指定功能表上的預設功能表項目。
語法
參數
【HMENU】處理到要檢索預設功能表項目的功能表。【fByPos】指定是否檢索功能表項目的識別字或其位置的值。如果此參數為FALSE，則返回識別字。否則返回位置。【gmdiFlags】指定函數如何搜索


-------------------------------------------------------- KeyGTK3Win32GetMenuItemCount ----
GetMenuItemCount    GetMenuItemCount函數確定指定功能表中的專案數。
語法
參數
【HMENU】標識要檢查的功能表的控制碼。
返回值
如果函數成功，則返回值指定功能表中的專案數。如果函數失敗，返回值為-1。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32GetMenuItemID ----
GetMenuItemID    GetMenuItemID函數檢索位於功能表中指定位置的功能表項目的功能表項目識別字。
語法
參數
【HMENU】標識包含其識別字要檢索的專案的菜單。【nPos】指定要檢索其識別字的功能表項目的基於零的相對位置。
返回值
如果函數成功，則返回值指定給定功能表項目的識別字。如果功能表項目識別字為NU


-------------------------------------------------------- KeyGTK3Win32GetMenuItemInfo ----
GetMenuItemInfo    [Now Supported on Windows NT]GetMenuItemInfo函數檢索有關功能表項目的資訊。
語法
參數
【HMENU】處理包含功能表項目的功能表。【藤】要獲取有關資訊的功能表項目的識別字或位置。該參數的含義取決於【fByPosition】的值。【fByPosition】指定【藤】的含義的值。如果此參數為


-------------------------------------------------------- KeyGTK3Win32GetMenuItemRect ----
GetMenuItemRect    [Now Supported on Windows NT]GetMenuItemRect函數檢索指定功能表項目的邊界矩形。
語法
參數
【的hWnd】處理到包含功能表的視窗。【HMENU】處理功能表。【藤】基於零的功能表項目的位置。【Handle to a menu.】指向RECT結構的指標，該結構接收以螢幕座標表示的指定功能表項目的邊


-------------------------------------------------------- KeyGTK3Win32GetMenuState ----
GetMenuState    GetMenuState函數檢索與指定功能表項目相關聯的功能表標誌。如果功能表項目打開子功能表，此函數也返回子功能表中的專案數。GetMenuItemInfo函數已被GetMenuItemInfo函數取代。但是，如果您不需要GetMenuItemInfo的任何擴展函數，您仍然可以使用GetMenuState.
語法
參數
【HMENU】標識包含要檢索其標誌的功能表項目的功能表。【的uId】指定由【uFlags】參數確定的要檢索功能表標誌的功能表項目。【uFlags】指定如何解釋【的uId】參數。此參數可以是以下值之一：值


-------------------------------------------------------- KeyGTK3Win32GetMenuString ----
GetMenuString    GetMenuString函數將指定功能表項目的文本字串複製到指定的緩衝區中。
語法
參數
【HMENU】標識功能表。【uIDItem】指定要更改的功能表項目，由【//功能表標誌】參數確定。【lpString】指向要接收空終止字串的緩衝區。如果【lpString】為NULL，則該函數返回


-------------------------------------------------------- KeyGTK3Win32GetMessage ----
GetMessage    GetMessage函數從調用執行緒的訊息佇列中檢索消息，並將其放在指定的結構中。此函數可以檢索與指定視窗相關聯的消息和通過PostThreadMessage 函數發佈的執行緒消息。該函數檢索位於指定的消息值範圍內的消息。GetMessage不檢索屬於其他執行緒或應用程式的Windows的郵件。
語法
參數
【LPMSG】指向從執行緒的訊息佇列接收消息資訊的MSG結構。【的hWnd】標識要檢索其消息的視窗。一個值具有特殊意義：值含義NULLGetMessage通過PostThreadMessage


-------------------------------------------------------- KeyGTK3Win32GetMessageExtraInfo ----
GetMessageExtraInfo    GetMessageExtraInfo函數檢索與GetMessage或PeekMessage函數檢索到的最後一條消息相關聯的額外資訊。該資訊可以被驅動程式添加到指示設備或鍵盤的消息中。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值指定額外的資訊。額外資訊的含義是具體的設備。



-------------------------------------------------------- KeyGTK3Win32GetMessagePos ----
GetMessagePos    GetMessagePos函數返回一個長的值，它給出了螢幕座標中的游標位置。此位置是由GetMessage函數檢索到的最後一條消息時游標所佔據的位置。
語法
參數
此函數無參數。
返回值
返回值指定游標位置的x座標和y座標。x座標在LOWORD中，y座標在HIWORD中。
描述
如上所述，x座標在返回值的低位字中; y座標在高位字中。如果將返回


-------------------------------------------------------- KeyGTK3Win32GetMessageTime ----
GetMessageTime    GetMessageTime函數返回當前執行緒的訊息佇列中GetMessage函數檢索到的最後一條消息的消息時間。時間是一個長整型，指定從系統啟動時間到消息創建時間（即放置在執行緒的訊息佇列中）的經過時間（以毫秒為單位）。
語法
參數
此函數無參數。
返回值
返回值指定消息時間。
描述
來自GetMessageTime函數的返回值不一定在後續消息之間增加，因為如果計時器計數超過長整數的最大值，則值將返回為零。要計算


-------------------------------------------------------- KeyGTK3Win32GetMetaFile ----
GetMetaFile  GetMetaFile函數創建一個標識給定Windows格式的中繼檔的控制碼。Win32 API中沒有實現GetMetaFile函數。此函數用於與16位元版本的Microsoft Windows相容。基於Win32的應用程式應使用GetEnhMetaFile函數。


-------------------------------------------------------- KeyGTK3Win32GetMetaFileBitsEx ----
GetMetaFileBitsEx    GetMetaFileBitsEx函數檢索Windows格式的圖中繼檔的內容，並將它們複製到指定的緩衝區。提供此函數以相容早期版本的Microsoft Windows。基於Win32的應用程式應使用GetEnhMetaFileBits函數。
語法
參數
【HMF】標識Windows格式的圖中繼檔。【服務提供者】指定接收資料的緩衝區的大小（以位元組為單位）。【// address of metafile data】指向緩衝區以接收中繼檔資料。緩


-------------------------------------------------------- KeyGTK3Win32GetMetaRgn ----
GetMetaRgn    GetMetaRgn函數檢索指定設備上下文的當前配額。
語法
參數
【HDC】標識設備上下文。【HRGN】在調用函數之前標識一個現有區域。函數返回後，此參數標識當前區域的副本。
返回值
如果函數成功，則返回值為1。如果函數失敗，返回值為零。
描述
如


-------------------------------------------------------- KeyGTK3Win32GetMiterLimit ----
GetMiterLimit    GetMiterLimit函數返回指定設備上下文的斜角限制。
語法
參數
【HDC】標識設備上下文。【// address of variable receiving miter limit】指向將返回當前斜角限制的浮點值。
返回值
如果函數成功，返回值不為零


-------------------------------------------------------- KeyGTK3Win32GetModuleFileName ----
GetModuleFileName    GetModuleFileName函數檢索包含指定模組的可執行檔的完整路徑和檔案名。
語法
參數
【HMODULE】標識正在請求其可執行檔名的模組。如果此參數為NULL，則GetModuleFileName返回用於創建調用進程的檔的路徑。【lpFileName的對象】指向填充有給定模


-------------------------------------------------------- KeyGTK3Win32GetModuleHandle ----
GetModuleHandle    如果檔已被映射到調用進程的位址空間，GetModuleHandle函數將返回指定模組的模組控制碼。
語法
參數
【lpModuleName】指向一個以空字元結尾的字串，命名一個Win32模組（一個.DLL或.EXE文件）。如果省略了檔副檔名，則附加默認庫副檔名.DLL。檔案名字串可以包括一個尾點


-------------------------------------------------------- KeyGTK3Win32GetMsgProc ----
GetMsgProc    GetMsgProc掛接過程是應用程式定義或庫定義的回呼函數，只要GetMessage函數從應用程式訊息佇列中檢索到消息，系統就會調用該函數。在將檢索到的消息傳遞到目標視窗過程之前，系統將該消息傳遞給掛鉤過程。
語法
參數
【碼】指定掛接過程是否處理消息。如果【碼】為HC_ACTION，則掛接過程必須處理消息。如果【碼】小於零，掛鉤過程必須將消息傳遞給CallNextHookEx函數，無需進一步處理，並應返回C


-------------------------------------------------------- KeyGTK3Win32GetMultipleTrustee ----
GetMultipleTrustee    [New - Windows NT]提供GetMultipleTrustee函數供將來使用。不要在Windows NT版本4.0上調用它。


-------------------------------------------------------- KeyGTK3Win32GetMultipleTrusteeOperation ----
GetMultipleTrusteeOperation    [New - Windows NT]提供GetMultipleTrusteeOperation函數供將來使用。不要在Windows NT版本4.0上調用它。


-------------------------------------------------------- KeyGTK3Win32GetNamedPipeHandleState ----
GetNamedPipeHandleState    GetNamedPipeHandleState函數檢索有關指定具名管道的資訊。返回的資訊可以在具名管道的實例的生命週期內變化。
語法
參數
【hNamedPipe】標識需要資訊的具名管道。控制碼必須具有對具名管道的GENERIC_READ存取權限。【lpState】指向一個32位元變數，指示控制碼的當前狀態。如果不需要此資訊，此參數可


-------------------------------------------------------- KeyGTK3Win32GetNamedPipeInfo ----
GetNamedPipeInfo    GetNamedPipeInfo函數檢索有關指定具名管道的資訊。
語法
參數
【hNamedPipe】標識命名的管道實例。控制碼必須具有對具名管道的GENERIC_READ存取權限。【的lpFlags】指向一個32位元變數，指示具名管道的類型。如果不需要此資訊，此參數可以


-------------------------------------------------------- KeyGTK3Win32GetNamedSecurityInfo ----
GetNamedSecurityInfo    [New - Windows NT]GetNamedSecurityInfo函數檢索由name指定的物件的安全性描述元副本。
語法
參數
【pObjectName】指向以null結尾的字串，指定從中檢索安全資訊的物件的名稱。有關不同物件類型的字串格式的說明，請參閱SE_OBJECT_TYPE.【ObjectType】指定S


-------------------------------------------------------- KeyGTK3Win32GetNearestColor ----
GetNearestColor    GetNearestColor函數返回從系統調色板中標識顏色的顏色值，該顏色值將在使用指定的顏色值時顯示。
語法
參數
【HDC】標識設備上下文。【crColor】指定標識所請求顏色的顏色值。
返回值
如果函數成功，則返回值會從系統調色板中識別與給定顏色值對應的顏色。如果函數失敗，返回值為CLR_INVA


-------------------------------------------------------- KeyGTK3Win32GetNearestPaletteIndex ----
GetNearestPaletteIndex    GetNearestPaletteIndex函數檢索最接近匹配指定顏色值的指定邏輯調色板中條目的索引。
語法
參數
【HPAL】標識邏輯調色板。【crColor】指定要匹配的顏色。
返回值
如果函數成功，則返回值是邏輯調色板中條目的索引。如果函數失敗，返回值為CLR_INVALID。要獲取擴展錯誤資訊


-------------------------------------------------------- KeyGTK3Win32GetNextDlgGroupItem ----
GetNextDlgGroupItem    GetNextDlgGroupItem函數檢索對話方塊中指定控制項之前（或後）的一組控制項中的第一個控制項的控制碼。
語法
參數
【hDlg】標識正在搜索的對話方塊。【HCTL】標識要用作搜索起點的控制項。如果此參數為NULL，該函數將使用對話方塊中的最後一個（或第一個）控制項作為搜索的起始點。【bPrevious】指定該函數


-------------------------------------------------------- KeyGTK3Win32GetNextDlgTabItem ----
GetNextDlgTabItem    GetNextDlgTabItem函數檢索具有指定控制項之前（或後）的WS_TABSTOP樣式的第一個控制項的控制碼。
語法
參數
【hDlg】標識要搜索的對話方塊。【HCTL】標識要用作搜索起點的控制項。如果此參數為NULL，該函數將使用對話方塊中的最後一個（或第一個）控制項作為搜索的起始點。【bPrevious】指定函數如何


-------------------------------------------------------- KeyGTK3Win32GetNextWindow ----
GetNextWindow    GetNextWindow函數檢索Z訂單中下一個或上一個視窗的控制碼。下一個視窗在指定的視窗下方;以前的窗口在上面。如果指定的視窗是最上面的視窗，則該函數將檢索下一個（或上一個）最上面的視窗的控制碼。如果指定的視窗是頂級視窗，則該函數將檢索下一個（或上一個）頂級視窗的控制碼。如果指定的視窗是子視窗，則該函數將搜索下一個（或上一個）子視窗的控制碼。
語法
參數
【的hWnd】標識一個視窗根據【WCMD】參數的值，檢索到的視窗控制碼相對於此視窗。【WCMD】指定函數是否返回下一個視窗或上一個視窗的控制碼。此參數可以是以下值之一：值含義GW_HWNDNEX


-------------------------------------------------------- KeyGTK3Win32GetNumberFormat ----
GetNumberFormat    GetNumberFormat函數將數位字串格式化為為指定區域設置定制的數位字串。
語法
參數
【語言環境】指定要格式化數位字串的區域設置。如果【lpFormat】為NULL，則該函數根據該區域設置的數位格式對字串進行格式化。如果【lpFormat】不為NULL，則該函數僅對NUM


-------------------------------------------------------- KeyGTK3Win32GetNumberOfConsoleInputEvents ----
GetNumberOfConsoleInputEvents    GetNumberOfConsoleInputEvents函數檢索控制台輸入緩衝區中未讀輸入記錄的數量。
語法
參數
【hConsoleInput】標識控制台輸入緩衝區。控制碼必須具有GENERIC_READ許可權。【lpcNumberOfEvents】指向接收控制台輸入緩衝區中未讀輸入記錄數的32位元變數。



-------------------------------------------------------- KeyGTK3Win32GetNumberOfConsoleMouseButtons ----
GetNumberOfConsoleMouseButtons    GetNumberOfConsoleMouseButtons函數檢索當前控制台使用的滑鼠上的按鈕數量。
語法
參數
【lpNumberOfMouseButtons】指向接收滑鼠按鈕數量的32位元變數。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLast


-------------------------------------------------------- KeyGTK3Win32GetNumberOfEventLogRecords ----
GetNumberOfEventLogRecords    GetNumberOfEventLogRecords函數檢索指定事件日誌中的記錄數。
語法
參數
【hEventLog】標識打開的事件日誌。該控制碼由OpenEventLog或OpenBackupEventLog函數返回。【NumberOfRecords】指向接收給定事件日誌中記錄數的變數


-------------------------------------------------------- KeyGTK3Win32GetObject ----
GetObject    GetObject函數獲取有關指定圖形物件的資訊。根據圖形物件，該函數將填充BITMAP，DIBSECTION，EXTLOGPEN，LOGBRUSH，LOGFONT或LOGPEN結構或表條目數（對於邏輯調色板），進入指定的緩衝區。
語法
參數
【hgdiobj】感興趣的圖形物件的控制碼。這可以是以下之一的控制碼：通過調用CreateDIBSection函數創建的邏輯點陣圖，畫筆，字體，調色板，筆或與設備無關的點陣圖。【cbBuffer】指


-------------------------------------------------------- KeyGTK3Win32GetObjectType ----
GetObjectType    GetObjectType標識指定物件的類型。
語法
參數
【h】標識物件。
返回值
如果函數成功，則返回值標識物件。該值可以是以下之一：值含義OBJ_BITMAP點陣圖OBJ_BRUSH刷OBJ_FONT字形OBJ_PAL調色板OBJ_PEN鋼筆


-------------------------------------------------------- KeyGTK3Win32GetOEMCP ----
GetOEMCP    GetOEMCP函數檢索系統的當前OEM內碼表識別字。（OEM代表原始設備製造商。）
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是系統的當前OEM內碼表識別字，如果沒有內碼表是當前的，則返回默認識別字。
描述
以下是OEM內碼表識別字：識別碼含義437MS-DOS


-------------------------------------------------------- KeyGTK3Win32GetOldestEventLogRecord ----
GetOldestEventLogRecord    GetOldestEventLogRecord函數檢索指定事件日誌中最早記錄的絕對記錄號。
語法
參數
【hEventLog】標識打開的事件日誌。該控制碼由OpenEventLog或OpenBackupEventLog函數返回。【OldestRecord】指向接收給定事件日誌中最早記錄的絕對記錄


-------------------------------------------------------- KeyGTK3Win32GetOpenClipboardWindow ----
GetOpenClipboardWindow    GetOpenClipboardWindow函數檢索當前打開剪貼板的視窗的控制碼。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是打開剪貼板的視窗的控制碼。如果沒有視窗打開剪貼板，則返回值為NULL。要獲取擴展錯誤資訊，請調用GetLastError.
描述
如果應


-------------------------------------------------------- KeyGTK3Win32GetOpenFileName ----
GetOpenFileName    GetOpenFileName函數創建一個“打開”公共對話方塊，該對話方塊允許用戶指定要打開的檔或檔集的驅動器，目錄和名稱。
語法
參數
【lpofn】指向OPENFILENAME結構的指標，其中包含用於初始化對話方塊的資訊。當GetOpenFileName返回時，此結構包含有關使用者檔選擇的資訊。
返回值
如果用戶指定檔


-------------------------------------------------------- KeyGTK3Win32GetOutlineTextMetrics ----
GetOutlineTextMetrics    GetOutlineTextMetrics函數檢索TrueType字體的文本度量。
語法
參數
【HDC】標識設備上下文。【cbData】指定要在其中返回文本度量的陣列的大小（以位元組為單位）。【lpOTM】指向OUTLINETEXTMETRIC結構的陣列。如果此參數為NULL，則該函數


-------------------------------------------------------- KeyGTK3Win32GetOverlappedResult ----
GetOverlappedResult    GetOverlappedResult函數返回指定檔（名稱為管道或通信設備）上的重疊操作的結果。
語法
參數
【HFILE】標識檔，具名管道或通信設備。這是通過調用ReadFile WriteFile，ConnectNamedPipe，TransactNamedPipe，DeviceIoContr


-------------------------------------------------------- KeyGTK3Win32GetPaletteEntries ----
GetPaletteEntries    GetPaletteEntries函數從給定的邏輯調色板中檢索指定範圍的調色板條目。
語法
參數
【HPAL】標識邏輯調色板。【iStartIndex】指定要檢索的邏輯調色板中的第一個條目。【的nentries】指定要檢索的邏輯調色板中的條目數。【LPPE】指向PALETTEENTRY結


-------------------------------------------------------- KeyGTK3Win32GetParent ----
GetParent    GetParent函數檢索指定的子視窗的父視窗的控制碼。
語法
參數
【的hWnd】標識要檢索父視窗控制碼的視窗。
返回值
如果函數成功，則返回值是父視窗的控制碼。如果視窗沒有父視窗，則返回值為NULL。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32GetPath ----
GetPath    GetPath函數檢索定義線路端點的座標以及在指定設備上下文中選擇的路徑中找到的曲線的控制點。
語法
參數
【HDC】標識包含封閉路徑的設備上下文。【lpPoints】指向包含線路端點和曲線控制點的POINT結構陣列。【// address of array of path vertex type


-------------------------------------------------------- KeyGTK3Win32GetPixel ----
GetPixel    GetPixel函數檢索指定座標處的圖元的紅色，綠色，藍色（RGB）顏色值。
語法
參數
【HDC】標識設備上下文。【nXPos】指定要檢查的圖元的邏輯x座標。【nYPos】指定要檢查的圖元的邏輯y座標。
返回值
如果函數成功，則返回值為RGB值。如果圖元在當前剪輯區域之外，


-------------------------------------------------------- KeyGTK3Win32GetPolyFillMode ----
GetPolyFillMode    GetPolyFillMode函數檢索當前的多邊形填充模式。
語法
參數
【HDC】標識設備上下文。
返回值
如果函數成功，則返回值指定多邊形填充模式，可以是以下值之一：值含義ALTERNATE選擇交替模式（在每條掃描線上填充奇數和偶數多邊形之間的面積）。WI


-------------------------------------------------------- KeyGTK3Win32GetPrinter ----
GetPrinter    GetPrinter函數檢索有關指定印表機的資訊。
語法
參數
【hPrinter】處理感興趣的印表機【水準】指定函數存儲到【pPrinter】指向的緩衝區中的PRINTER_INFO_*結構的級別或類型。Windows 95：此值可以是1，2或5。Wi


-------------------------------------------------------- KeyGTK3Win32GetPrinterData ----
GetPrinterData    GetPrinterData函數檢索指定印表機的印表機配置資料。
語法
參數
【hPrinter】標識應檢索哪個配置資料的印表機。【pValueName】指向一個以null結尾的字串，指定函數應該檢索的資料類型。【PTYPE】指向接收SetPrinterData函數


-------------------------------------------------------- KeyGTK3Win32GetPrinterDriver ----
GetPrinterDriver    GetPrinterDriver函數檢索指定印表機的驅動程式資料。
語法
參數
【hPrinter】標識應檢索驅動程式資料的印表機。【pEnvironment】指向指定環境的以null結尾的字串。例如，“Windows NT x86”指定在Intel 80386或80


-------------------------------------------------------- KeyGTK3Win32GetPrinterDriverDirectory ----
GetPrinterDriverDirectory    GetPrinterDriverDirectory函數檢索印表機驅動程式目錄的路徑。
語法
參數
【PNAME】指向以空字元結尾的字串，指定印表機驅動程式所在的伺服器的名稱。如果此參數為NULL，則檢索本地驅動程式目錄路徑。【pEnvironment】指向指定環境的以null結尾的字元


-------------------------------------------------------- KeyGTK3Win32GetPrintProcessorDirectory ----
GetPrintProcessorDirectory    GetPrintProcessorDirectory函數檢索指定伺服器上列印處理器的路徑。
語法
參數
【PNAME】指向指定伺服器名稱的以null結尾的字串。如果此參數為NULL，則返回本地路徑。【pEnvironment】指向指定環境的以null結尾的字串。例如，“Windows NT


-------------------------------------------------------- KeyGTK3Win32GetPriorityClass ----
GetPriorityClass    GetPriorityClass函數返回指定進程的優先順序。該值與進程每個執行緒的優先順序值一起確定每個執行緒的基本優先順序。
語法
參數
【hProcess】標識過程。Windows NT：控制碼必須具有PROCESS_QUERY_INFORMATION許可權。有關詳細資訊，請參閱過程物件.
返回值
如果函數成功，則返回值是指


-------------------------------------------------------- KeyGTK3Win32GetPriorityClipboardFormat ----
GetPriorityClipboardFormat    GetPriorityClipboardFormat函數返回指定清單中第一個可用的剪貼板格式。
語法
參數
【paFormatPriorityList】指向按照優先順序標識剪貼板格式的不帶正負號的整數陣列。有關剪貼板格式的說明，請參閱SetClipboardData函數。【cFormats】指定【paF


-------------------------------------------------------- KeyGTK3Win32GetPrivateObjectSecurity ----
GetPrivateObjectSecurity    GetPrivateObjectSecurity從受保護的伺服器物件的安全性描述元中檢索資訊。
語法
參數
【ObjectDescriptor】指向SECURITY_DESCRIPTOR結構。這是要查詢的安全性描述元。【SecurityInformation】指定一個SECURITY_INFORMA


-------------------------------------------------------- KeyGTK3Win32GetPrivateProfileInt ----
GetPrivateProfileIntGetPrivateProfileInt函數檢索與給定初始設定檔案的指定部分中的鍵相關聯的整數。此函數用於與16位元基於Windows的應用程式相容。基於Win32的應用程式應該將初始化資訊存儲在註冊表中。
語法
參數
【lpAppName】指向包含初始設定檔案中的段名稱的以null結尾的字串。【lpKeyName】指向包含要檢索其值的鍵名稱的以null結尾的字串。此值為字串的形式; GetPrivat


-------------------------------------------------------- KeyGTK3Win32GetPrivateProfileSection ----
GetPrivateProfileSectionGetPrivateProfileSection函數從初始設定檔案中檢索指定部分的所有鍵和值。此函數用於與為Windows編寫的16位元應用程式相容。基於Win32的應用程式應該將初始化資訊存儲在註冊表中。
語法
參數
【lpAppName】指向包含初始設定檔案中的段名稱的以null結尾的字串。【lpReturnedString】指向緩衝區，接收與命名部分關聯的金鑰名稱和值對。緩衝區填充一個或多個以null


-------------------------------------------------------- KeyGTK3Win32GetPrivateProfileSectionNames ----
GetPrivateProfileSectionNamesGetPrivateProfileSectionNames函數檢索初始設定檔案中所有部分的名稱。此函數用於與16位元基於Windows的應用程式相容。基於Win32的應用程式應該將初始化資訊存儲在註冊表中。
語法
參數
【lpszReturnBuffer】指向緩衝區，接收與命名文件關聯的段名稱。緩衝區填充一個或多個以null結尾的字串;最後一個字串後跟一個第二個空字元。【服務提供者】指定由【lpszRe


-------------------------------------------------------- KeyGTK3Win32GetPrivateProfileString ----
GetPrivateProfileStringGetPrivateProfileString函數從初始設定檔案中的指定部分檢索一個字串。此函數用於與16位元基於Windows的應用程式相容。基於Win32的應用程式應該將初始化資訊存儲在註冊表中。
語法
參數
【lpAppName】指向一個以null結尾的字串，指定包含鍵名稱的部分。如果此參數為NULL，則GetPrivateProfileString函數將檔中的所有段名稱複製到提供的緩衝區。


-------------------------------------------------------- KeyGTK3Win32GetPrivateProfileStruct ----
GetPrivateProfileStructGetPrivateProfileStruct函數檢索與初始設定檔案給定部分中指定鍵相關聯的資料。當它檢索資料時，該函數計算校驗和，並將其與資料添加到檔時由WritePrivateProfileStruct函數計算的校驗和進行比較。基於Win32的應用程式應該將初始化資訊存儲在註冊表中。
語法
參數
【lpszSection】指向包含初始設定檔案中的段名稱的以null結尾的字串。【lpszKey】指向包含要檢索其資料的鍵名稱的以null結尾的字串。【定義了與值名稱一起使用的以下控制代碼


-------------------------------------------------------- KeyGTK3Win32GetProcAddress ----
GetProcAddress    GetProcAddress函數返回指定的匯出動態連結程式庫（DLL）函數的位址。
語法
參數
【HMODULE】標識包含該函數的DLL模組。LoadLibrary或GetModuleHandle函數返回此控制碼。【lpProcName】指向包含函數名的空值終止的字串，或指定函數的序數


-------------------------------------------------------- KeyGTK3Win32GetProcessAffinityMask ----
GetProcessAffinityMask    GetProcessAffinityMask函數獲取指定進程的進程關連遮罩和系統的系統關連遮罩。進程關連遮罩是一個位向量，其中每個位元表示允許進程運行的處理器。系統相似性遮罩是一個位向量，其中每個位元表示配置到系統中的處理器。進程關連遮罩是系統相關性遮罩的一個適當子集。一個進程只允許在配置到系統中的處理器上運行。
語法
參數
【hProcess】需要親和力掩模的過程的打開控制碼。Windows NT：此控制碼必須具有PROCESS_QUERY_INFORMATION許可權。有關詳細資訊，請參閱過程物件.【lpProce


-------------------------------------------------------- KeyGTK3Win32GetProcessHeap ----
GetProcessHeap    GetProcessHeap函數獲取調用進程的堆的控制碼。然後可以在HeapAlloc，HeapReAlloc，HeapFree和HeapSize函數的呼叫中使用該控制碼。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是調用進程的堆的控制碼。如果函數失敗，返回值為NULL。
描述
GetProcessHeap允許基於Win32的應用程式從進程堆分配記憶體，


-------------------------------------------------------- KeyGTK3Win32GetProcessHeaps ----
GetProcessHeaps    GetProcessHeaps函數獲取對調用進程有效的所有堆的控制碼。
語法
參數
【NumberOfHeaps】指定可以存儲到【ProcessHeaps】指向的緩衝區中的最大堆處理數。【ProcessHeaps】指向緩衝區以接收堆陣列的控制碼。
返回值
返回值是對調用進


-------------------------------------------------------- KeyGTK3Win32GetProcessPriorityBoost ----
GetProcessPriorityBoost    [New - Windows NT]GetProcessPriorityBoost函數返回指定進程的優先順序提升控制狀態。
語法
參數
hProcess處理過程。該控制碼必須具有PROCESS_QUERY_INFORMATION存取權限。有關詳細資訊，請參閱過程物件.pDisablePriorityBoost指向接收優先順序提升


-------------------------------------------------------- KeyGTK3Win32GetProcessShutdownParameters ----
GetProcessShutdownParameters    GetProcessShutdownParameters函數檢索當前調用進程的關閉參數。
語法
參數
lpdwLevel指向接收關閉優先順序的變數。較高的水準首先關閉。系統級關機命令是為系統元件保留的。較高的數字首先關閉。以下是級別約定：值含義000-0FF系統保留上次關機範圍。100-1FF


-------------------------------------------------------- KeyGTK3Win32GetProcessTimes ----
GetProcessTimes    GetProcessTimes函數獲取有關指定進程的時間資訊。
語法
參數
【hProcess】一個打開的控制碼，指定尋找定時資訊的進程。必須使用PROCESS_QUERY_INFORMATION存取權限創建此控制碼。有關詳細資訊，請參閱過程物件.【lpCreation


-------------------------------------------------------- KeyGTK3Win32GetProcessVersion ----
GetProcessVersion    GetProcessVersion函數獲取指定進程期望運行的Windows版本的主版本號和次版本號。
語法



-------------------------------------------------------- KeyGTK3Win32GetProcessWindowStation ----
GetProcessWindowStation    GetProcessWindowStation函數返回與調用進程相關聯的視窗工作站的控制碼。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是與調用進程相關聯的視窗工作站的控制碼。如果函數失敗，返回值為NULL。如果調用進程不是為Windows NT編寫的應用程式，則可能會發生這種


-------------------------------------------------------- KeyGTK3Win32GetProcessWorkingSetSize ----
GetProcessWorkingSetSize    GetProcessWorkingSetSize函數獲取指定進程的最小和最大工作集大小。進程的“工作集”是物理RAM記憶體中進程當前可見的一組記憶體頁面。這些頁面是駐留的，可供應用程式使用，而不會觸發分頁錯誤。進程的工作集大小以位元組指定。最小和最大工作集大小影響進程的虛擬記憶體分頁行為。
語法
參數
【hProcess】打開一個可以獲得工作集大小的進程的控制碼。控制碼必須具有PROCESS_QUERY_INFORMATION存取權限。有關詳細資訊，請參閱過程物件.【lpMinimumWork


-------------------------------------------------------- KeyGTK3Win32GetProfileInt ----
GetProfileIntGetProfileInt函數從WIN.INI檔的給定部分中的指定鍵名稱中檢索整數。此函數用於與16位元基於Windows的應用程式相容。基於Win32的應用程式應該將初始化資訊存儲在註冊表中。
語法
參數
【lpAppName】指向一個以null結尾的字串，指定包含鍵名稱的部分。【lpKeyName】指向包含要檢索其值的鍵名稱的以null結尾的字串。此值為字串的形式; GetProfil


-------------------------------------------------------- KeyGTK3Win32GetProfileSection ----
GetProfileSectionGetProfileSection函數檢索WIN.INI檔的指定部分的所有鍵和值。此函數用於與16位元基於Windows的應用程式相容。基於Win32的應用程式應該將初始化資訊存儲在註冊表中。
語法
參數
【lpAppName】指向包含WIN.INI檔中的段名稱的以null結尾的字串。【lpReturnedString】指向緩衝區，接收與命名部分相關聯的鍵和值。緩衝區填充一個或多個以nul


-------------------------------------------------------- KeyGTK3Win32GetProfileString ----
GetProfileStringGetProfileString函數檢索WIN.INI檔給定部分中與指定鍵相關聯的字串。此函數用於與16位元基於Windows的應用程式相容。基於Win32的應用程式應該將初始化資訊存儲在註冊表中。
語法
參數
【lpAppName】指向指定包含該鍵的部分的以空值終止的字串的指標。如果此參數為NULL，則該函數將檔中的所有段名稱複製到提供的緩衝區。【lpKeyName】指向包含要檢索其關聯字串


-------------------------------------------------------- KeyGTK3Win32GetProp ----
GetProp    GetProp函數從給定視窗的屬性清單中檢索資料控制碼。給定的字串標識要檢索的控制碼。字串和控制碼必須通過先前調用SetProp函數添加到屬性清單中。
語法
參數
【的hWnd】標識要搜索其屬性清單的視窗。【lpString】指向以null結尾的字串或包含標識字串的原子。如果此參數是原子，則必須使用GlobalAddAtom函數創建。原子，16位值


-------------------------------------------------------- KeyGTK3Win32GetQueuedCompletionStatus ----
GetQueuedCompletionStatus    GetQueuedCompletionStatus函數嘗試從指定的輸入/輸出完成埠出發I / O完成資料包。如果沒有完成資料包排隊，該函數將等待與完成埠關聯的掛起輸入/輸出操作完成。該函數可以在完成資料包出隊時返回，或者當函數超時時可以返回。如果由於I / O操作完成而返回該函數，則它將設置幾個變數，以提供有關操作的資訊。
語法
參數
【CompletionPort】處理感興趣的輸入/輸出完成埠。I / O完成埠由CreateIoCompletionPort函數創建。【lpNumberOfBytesTransferre


-------------------------------------------------------- KeyGTK3Win32GetQueueStatus ----
GetQueueStatus    GetQueueStatus函數返回指示在調用執行緒的訊息佇列中找到的消息類型的標誌。
語法
參數
【旗】指定佇列狀態標誌，給出要檢查的消息類型。此參數可以是以下值的組合：值含義QS_ALLEVENTS佇列中輸入的WM_TIMER，WM_PAINT，WM_HOTKEY或已發郵件。QS_AL


-------------------------------------------------------- KeyGTK3Win32GetRasterizerCaps ----
GetRasterizerCaps    GetRasterizerCaps函數返回指示TrueType字體是否安裝在系統中的標誌。
語法
參數
【LPRS】指向RASTERIZER_STATUS結構以接收有關光柵化器的資訊。【cb】指定要複製到【LPRS】參數指向的結構中的位元組數。
返回值
如果函數成功，返回值不為零。如果函數失


-------------------------------------------------------- KeyGTK3Win32GetRegionData ----
GetRegionData    GetRegionData函數使用描述區域的資料填充指定的緩衝區。該資料包括組成該區域的矩形的尺寸。
語法
參數
【HRGN】識別該地區。【dwCount】指定【lpRgnData】緩衝區的大小（以位元組為單位）。【lpRgnData】指向接收資訊的RGNDATA結構。如果此參數為NULL，則返回值包含區


-------------------------------------------------------- KeyGTK3Win32GetRgnBox ----
GetRgnBox    GetRgnBox函數檢索指定區域的邊界矩形。
語法
參數
【HRGN】識別該地區。【LPRC】指向接收邊界矩形的RECT結構。
返回值
返回值指定區域的複雜度。它可以是以下值之一：值含義NULLREGION區域是空的SIMPLEREGION區域


-------------------------------------------------------- KeyGTK3Win32GetROP2 ----
GetROP2    GetROP2函數檢索指定設備上下文的前臺混合模式。混合模式指定筆或內部顏色和螢幕上已經組合的顏色，以產生新顏色。
語法
參數
【HDC】標識設備上下文。
返回值
如果函數成功，則返回值指定前臺混合模式。如果函數失敗，返回值為零。
描述
以下是前景混合模式：混合模式描述R2_BLACK圖元始終為0。R2_CO


-------------------------------------------------------- KeyGTK3Win32GetSaveFileName ----
GetSaveFileName    GetSaveFileName函數創建一個保存公共對話方塊，允許用戶指定要保存的檔的驅動器，目錄和名稱。
語法
參數
【lpofn】指向OPENFILENAME結構的指標，其中包含用於初始化對話方塊的資訊。當GetSaveFileName返回時，此結構包含有關使用者檔選擇的資訊。
返回值
如果用戶指定檔


-------------------------------------------------------- KeyGTK3Win32GetScrollInfo ----
GetScrollInfo    GetScrollInfo函數檢索捲軸的參數，包括最小和最大滾動位置，頁面大小和滾動框（拇指）的位置。
語法
參數
【HWND】根據【fnBar】參數的值標識捲軸控制項或帶有標準捲軸的視窗。【fnBar】指定要檢索參數的捲軸的類型。此參數可以是以下值之一：值含義SB_CTL檢索捲軸控制項的參數。【HW


-------------------------------------------------------- KeyGTK3Win32GetScrollPos ----
GetScrollPos    GetScrollPos函數在指定的捲軸中檢索滾動框（thumb）的當前位置。當前位置是一個取決於當前滾動範圍的相對值。例如，如果滾動範圍為0到100，捲軸位於條的中間，則當前位置為50。
語法
參數
【的hWnd】根據【NBAR】參數的值，標識捲軸控制項或帶有標準捲軸的視窗。【NBAR】指定要檢查的捲軸。此參數可以是以下值之一：值含義SB_CTL在捲軸控制項中檢索滾動框的位置。【的h


-------------------------------------------------------- KeyGTK3Win32GetScrollRange ----
GetScrollRange    GetScrollRange函數檢索指定捲軸的當前最小和最大捲軸（拇指）位置。對於Windows 95，GetScrollRange函數與相容於4.0之前的作業系統版本存在。使用版本4.0或更高版本，請使用GetScrollInfo函數。
語法
參數
【的hWnd】根據【NBAR】參數的值，標識捲軸控制項或具有標準捲軸的視窗。【NBAR】指定檢索位置的捲軸。此參數可以是以下值之一：值含義SB_CTL檢索捲軸控制項的位置。【的hWnd】


-------------------------------------------------------- KeyGTK3Win32GetSecurityDescriptorControl ----
GetSecurityDescriptorControl    GetSecurityDescriptorControl函數檢索安全性描述元的控制和修訂資訊。
語法
參數
【pSecurityDescriptor】指向SECURITY_DESCRIPTOR結構，其函數檢索的控制和修訂資訊。【PControl則】指向SECURITY_DESCRIPTOR_CON


-------------------------------------------------------- KeyGTK3Win32GetSecurityDescriptorDacl ----
GetSecurityDescriptorDacl    GetSecurityDescriptorDacl函數檢索指定安全性描述元中自由存取控制清單（ACL）的指針。
語法
參數
【pSecurityDescriptor】指向包含自由ACL的SECURITY_DESCRIPTOR結構。該函數檢索一個指向它的指標。【lpbDaclPresent】指向一個標誌，該函數用於


-------------------------------------------------------- KeyGTK3Win32GetSecurityDescriptorGroup ----
GetSecurityDescriptorGroup    GetSecurityDescriptorGroup函數從安全性描述元中檢索主組資訊。
語法
參數
【pSecurityDescriptor】指向函數檢索的主組資訊的SECURITY_DESCRIPTOR結構。【PGROUP】指向指向SID結構的指標，該結構在函數返回時標識主組。（SID是


-------------------------------------------------------- KeyGTK3Win32GetSecurityDescriptorLength ----
GetSecurityDescriptorLength    GetSecurityDescriptorLength函數返回結構有效SECURITY_DESCRIPTOR結構的長度（以位元組為單位）。長度包括所有關聯結構的長度，例如SID和ACL結構。
語法
參數
【pSecurityDescriptor】指向函數返回長度的SECURITY_DESCRIPTOR結構。假設SECURITY_DESCRIPTOR結構是有效的。
返回值
如果函數成功，則


-------------------------------------------------------- KeyGTK3Win32GetSecurityDescriptorOwner ----
GetSecurityDescriptorOwner    GetSecurityDescriptorOwner函數從安全性描述元中檢索所有者資訊。
語法
參數
【pSecurityDescriptor】指向SECURITY_DESCRIPTOR結構，其函數檢索的所有者資訊。【pOwner】指向指向SID結構的指標，該結構在函數返回時標識所有者。（S


-------------------------------------------------------- KeyGTK3Win32GetSecurityDescriptorSacl ----
GetSecurityDescriptorSacl    GetSecurityDescriptorSacl函數將在指定的安全性描述元中檢索指向系統存取控制清單（ACL）的指標。
語法
參數
【pSecurityDescriptor】指向SECURITY_DESCRIPTOR結構，其中包含該函數檢索指標的系統ACL。【lpbSaclPresent】指向一個標誌，該函數設置為指示在


-------------------------------------------------------- KeyGTK3Win32GetSecurityInfo ----
GetSecurityInfo    [New - Windows NT]GetSecurityInfo函數檢索由控制碼指定的物件的安全性描述元的副本。
語法
參數
【處理】用於檢索安全資訊的物件的控制碼。【ObjectType】指定SE_OBJECT_TYPE枚舉中指示由【pObjectName】參數命名的物件的類型的值。【SecurityInfo】一組


-------------------------------------------------------- KeyGTK3Win32GetServiceDisplayName ----
GetServiceDisplayName    GetServiceDisplayName函數獲取與特定服務名稱相關聯的顯示名稱。服務名稱與服務的註冊表項名稱相同。
語法
參數
【hSCManager】處理機器的服務控制管理器資料庫。此參數是由OpenSCManager函數返回的RPC伺服器控制碼。【lpServiceName】指向以null結尾的服務名稱字串。該名


-------------------------------------------------------- KeyGTK3Win32GetServiceKeyName ----
GetServiceKeyName    GetServiceKeyName函數獲取與特定服務的顯示名稱相關聯的服務名稱。服務名稱與服務的註冊表項名稱相同。
語法
參數
【hSCManager】處理電腦的服務控制管理器資料庫。此參數是由OpenSCManager返回的遠端程序呼叫（RPC）伺服器控制碼。【lpDisplayName】指向以null結尾的服務顯


-------------------------------------------------------- KeyGTK3Win32GetShortPathName ----
GetShortPathName    GetShortPathName函數獲取指定輸入路徑的短路徑形式。
語法
參數
【lpszLongPath】指向以null結尾的路徑字串。該函數獲取此路徑的簡短形式。【lpszShortPath】指向緩衝區以接收由【lpszLongPath】指定的路徑的空終止短格式。


-------------------------------------------------------- KeyGTK3Win32GetSidIdentifierAuthority ----
GetSidIdentifierAuthority    GetSidIdentifierAuthority函數返回指定安全性識別碼（SID）中SID_IDENTIFIER_AUTHORITY 結構的位址。
語法
參數
【PSID】指向返回SID_IDENTIFIER_AUTHORITY結構的位址的SID結構。
返回值
如果函數成功，則返回值是指定SID結構的SID_IDENTIFIER_AUTHORI


-------------------------------------------------------- KeyGTK3Win32GetSidLengthRequired ----
GetSidLengthRequired    GetSidLengthRequired函數返回以指定數量的子許可權存儲SID結構所需的緩衝區長度（以位元組為單位）。
語法
參數
【nSubAuthorityCount】指定要存儲在SID結構中的子許可權的數量。
返回值
返回值是存儲SID結構所需的緩衝區的長度（以位元組為單位）。此函數不能失敗。



-------------------------------------------------------- KeyGTK3Win32GetSidSubAuthority ----
GetSidSubAuthority    GetSidSubAuthority函數返回SID結構中指定的次授權的位址。次授權值是相對識別字（RID）。SID是安全性識別碼。
語法
參數
【PSID】指向要從其返回次授權位址的SID結構。【nSubAuthority】指定標識子函數陣列元素的索引值，該函數將返回其位址。該函數不對該值執行驗證測試。應用程式可以調用GetSidS


-------------------------------------------------------- KeyGTK3Win32GetSidSubAuthorityCount ----
GetSidSubAuthorityCount    GetSidSubAuthorityCount函數返回包含子許可權計數的SID結構中的欄位的位址。SID是安全性識別碼。
語法
參數
【PSID】指向SID結構，從中返回指向次授權計數的指標。
返回值
如果函數成功，則返回值是指向SID結構的子註冊計數的指標。如果函數失敗，則返回值未定義。如果指定的SID結構無效，該函


-------------------------------------------------------- KeyGTK3Win32GetStartupInfo ----
GetStartupInfo    GetStartupInfo函數檢索創建調用進程時指定的STARTUPINFO結構的內容。
語法
參數
【lpStartupInfo】指向由該函數填充的STARTUPINFO結構。
返回值
此函數不返回值。
描述
STARTUPINFO結構由創建調用進程的進程指定。它可以用於指定與調用


-------------------------------------------------------- KeyGTK3Win32GetStdHandle ----
GetStdHandle    GetStdHandle函數返回標準輸入，標準輸出或標準錯誤裝置的控制碼。
語法
參數
【nStdHandle】指定要返回控制碼的設備。此參數可以具有以下值之一：值含義STD_INPUT_HANDLE標準輸入手柄STD_OUTPUT_HANDLE標準輸出手柄STD_ERROR_H


-------------------------------------------------------- KeyGTK3Win32GetStockObject ----
GetStockObject    GetStockObject函數檢索一個預定義庫存筆，筆刷，字體或調色板的控制碼。
語法
參數
【fnObject】指定庫存對象的類型。此參數可以是以下值之一：值含義BLACK_BRUSH黑色刷子DKGRAY_BRUSH深灰色刷子GRAY_BRUSH灰色刷。HOLLOW_BRUSH空心


-------------------------------------------------------- KeyGTK3Win32GetStretchBltMode ----
GetStretchBltMode    GetStretchBltMode函數檢索當前的拉伸模式。拉伸模式定義當調用StretchBlt函數時，如何將顏色資料添加到或從點陣圖中刪除，這些點陣圖被拉伸或壓縮。
語法
參數
【HDC】標識設備上下文。
返回值
如果函數成功，則返回值為當前的拉伸模式。如果函數失敗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32GetStringTypeA ----
GetStringTypeA    GetStringTypeA函數返回指定源字串中字元的字元類型資訊。對於字串中的每個字元，該函數設置輸出陣列的相應16位元元素中的一個或多個位。每個位元都標識給定的字元類型，例如字元是字母，數位還是兩者。
語法
參數
【語言環境】指定地區設定識別碼。此值唯一地定義用於將由【lpSrcStr】指向的字串從ANSI轉換為Unicode的ANSI內碼表。該函數然後分析每個Unicode字元的字元類型資訊。此參


-------------------------------------------------------- KeyGTK3Win32GetStringTypeEx ----
GetStringTypeEx    GetStringTypeEx函數返回指定源字串中字元的字元類型資訊。對於字串中的每個字元，該函數設置輸出陣列的相應16位元元素中的一個或多個位。每個位元都標識給定的字元類型，例如字元是字母，數位還是兩者。與其近親GetStringTypeA和GetStringTypeW不同，GetStringTypeEx通過使用#define UNICODE交換機展示了合適的A或W行為。這是推薦的Win32函數。
語法
參數
【語言環境】指定地區設定識別碼。此值唯一地定義用於將由【lpSrcStr】指向的字串從ANSI轉換為Unicode的ANSI內碼表。該函數然後分析每個Unicode字元的字元類型資訊。請注


-------------------------------------------------------- KeyGTK3Win32GetStringTypeW ----
GetStringTypeW    GetStringTypeW函數返回指定源字串中字元的字元類型資訊。對於字串中的每個字元，該函數設置輸出陣列的相應16位元元素中的一個或多個位。每個位元都標識給定的字元類型，例如字元是字母，數位還是兩者。
語法
參數
【dwInfoType】指定使用者想要檢索的字元資訊的類型。各種類型分為不同的級別（有關每種類型中包含的資訊的清單，請參閱以下備註部分）。此參數可以指定以下字元類型標誌之一：CT_CTYPE1


-------------------------------------------------------- KeyGTK3Win32GetSubMenu ----
GetSubMenu    GetSubMenu函數檢索由指定的功能表項目啟動的下拉式功能表或子功能表的控制碼。
語法
參數
【HMENU】標識功能表。【nPos】指定啟動下拉式功能表或子功能表的專案的給定功能表中的從零開始的相對位置。
返回值
如果函數成功，則返回值是由功能表項目啟動的下拉式功能表或子功能表的控制碼。如果功能表項目未激


-------------------------------------------------------- KeyGTK3Win32GetSysColor ----
GetSysColor    GetSysColor函數檢索指定的顯示元素的使用中色彩。顯示元素是視窗的部分和顯示在系統顯示幕幕上的Windows顯示。
語法
參數
【參數nIndex】指定要檢索其顏色的顯示元素。此參數必須是以下值之一：值含義COLOR_3DDKSHADOW三維顯示元素的陰影。COLOR_3DFACE,
COLOR_BTNFACE面向


-------------------------------------------------------- KeyGTK3Win32GetSysColorBrush ----
GetSysColorBrush    GetSysColorBrush函數檢索一個標識對應於指定色彩索引的邏輯畫筆的控制碼。
語法
參數
【參數nIndex】指定色彩索引。該值對應於用於繪製21個視窗元素之一的顏色。
返回值
如果函數成功，則返回值標識一個邏輯畫筆。要獲取擴展錯誤資訊，請調用GetLastError.
描


-------------------------------------------------------- KeyGTK3Win32GetSysModalWindow ----
GetSysModalWindow          GetSysModalWindow函數已過時。此函數僅用於與16位元版本的Windows相容。


-------------------------------------------------------- KeyGTK3Win32GetSystemDefaultLangID ----
GetSystemDefaultLangID    GetSystemDefaultLangID函數檢索系統預設語言識別字。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是系統預設語言識別字。
描述
有關語言識別字的更多資訊，請參閱語言識別字和語言環境。



-------------------------------------------------------- KeyGTK3Win32GetSystemDefaultLCID ----
GetSystemDefaultLCID    GetSystemDefaultLCID函數檢索系統預設的地區設定識別碼。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是系統預設的地區設定識別碼。
描述
有關地區設定識別碼的更多資訊，請參閱區域識別字.



-------------------------------------------------------- KeyGTK3Win32GetSystemDirectory ----
GetSystemDirectory    GetSystemDirectory函數檢索Windows系統目錄的路徑。系統目錄包含Windows庫，驅動程式和字體檔等檔。
語法
參數
【lpBuffer】指向緩衝區以接收包含路徑的以null結尾的字串。除非系統目錄是根目錄，否則此路徑不會以反斜線結尾。例如，如果系統目錄在驅動器C上命名為WINDOWS \\ SYSTEM


-------------------------------------------------------- KeyGTK3Win32GetSystemInfo ----
GetSystemInfo    GetSystemInfo函數返回有關當前系統的資訊。
語法
參數
【lpSystemInfo】指向此函數填寫的SYSTEM_INFO結構。
返回值
此函數不返回值。



-------------------------------------------------------- KeyGTK3Win32GetSystemMenu ----
GetSystemMenu    GetSystemMenu函數允許應用程式訪問視窗功能表（也稱為系統功能表或控制功能表）進行複製和修改。
語法
參數
【的hWnd】標識將擁有視窗功能表的副本的視窗。【// reset flag】指定要執行的操作。如果此參數為FALSE，GetSystemMenu返回當前正在使用的視窗功能表副本的控制碼。該副本最


-------------------------------------------------------- KeyGTK3Win32GetSystemMetrics ----
GetSystemMetrics    GetSystemMetrics函數可以檢索各種系統指標和系統組態設置。系統度量是Windows顯示元素的尺寸（寬度和高度）。由GetSystemMetrics檢索的所有維度均為圖元。
語法



-------------------------------------------------------- KeyGTK3Win32GetSystemPaletteEntries ----
GetSystemPaletteEntries    GetSystemPaletteEntries函數從與指定設備上下文關聯的系統調色板中檢索一系列調色板條目。
語法
參數
【HDC】標識設備上下文。【iStartIndex】指定要從系統調色板檢索的第一個條目。【的nentries】指定要從系統調色板檢索的條目數。【LPPE】指向PALETTEENTRY結構的數


-------------------------------------------------------- KeyGTK3Win32GetSystemPaletteUse ----
GetSystemPaletteUse    GetSystemPaletteUse函數檢索指定設備上下文的系統（物理）調色板的當前狀態。
語法
參數
【HDC】標識設備上下文。
返回值
如果函數成功，則返回值是系統調色板的當前狀態。它可以是以下值之一：值含義SYSPAL_NOSTATIC系統調色板不包含黑色和白色以外的靜態顏色。SYS


-------------------------------------------------------- KeyGTK3Win32GetSystemTime ----
GetSystemTime    GetSystemTime函數檢索當前系統日期和時間。系統時間以協調世界時（UTC）表示。
語法
參數
【lpSystemTime】指向SYSTEMTIME結構以接收當前系統的日期和時間。
返回值
此函數不返回值。



-------------------------------------------------------- KeyGTK3Win32GetSystemTimeAdjustment ----
GetSystemTimeAdjustment    GetSystemTimeAdjustment函數決定系統是否在每個時鐘中斷期間對其日期時鐘進行週期性時間調整，以及任何此類調整的值和週期。請注意，此類調整的週期等於時鐘中斷之間的時間間隔。
語法
參數
【lpTimeAdjustment】指向DWORD的函數，該函數設置為在每個週期時間調整時添加到時鐘時鐘的100納秒單位。【lpTimeIncrement】指向DWORD的函數設置為間隔，以


-------------------------------------------------------- KeyGTK3Win32GetSystemTimeAsFileTime ----
GetSystemTimeAsFileTime    GetSystemTimeAsFileTime函數獲取當前系統的日期和時間。資訊是協調世界時（UTC）格式。
語法
參數
【lpSystemTimeAsFileTime】指向FILETIME結構以便以UTC格式接收當前系統日期和時間。
返回值
此函數不返回值。
描述
GetSystemTimeAsFil


-------------------------------------------------------- KeyGTK3Win32GetTabbedTextExtent ----
GetTabbedTextExtent    GetTabbedTextExtent函數計算字串的寬度和高度。如果字串包含一個或多個定位字元，則字串的寬度將基於指定的定位停駐點。GetTabbedTextExtent函數使用當前選定的字體來計算字串的尺寸。
語法
參數
【hDC】標識設備上下文。【lpString】指向一個字串。【NCOUNT】指定文本字串中的字元數。【nTabPositions】指定【lpnTabStopPositions】參數指向的


-------------------------------------------------------- KeyGTK3Win32GetTapeParameters ----
GetTapeParameters    GetTapeParameters函數檢索描述磁帶或磁帶機的資訊。
語法
參數
【hDevice】標識要查找哪些資訊的設備。該控制碼是通過使用CreateFile函數創建的。【// preparation method】指定所請求資訊的類型。此參數必須是以下值之一：值描述


-------------------------------------------------------- KeyGTK3Win32GetTapePosition ----
GetTapePosition    GetTapePosition函數以邏輯或絕對塊取回磁帶的當前位址。
語法
參數
【hDevice】標識要獲取磁帶位置的設備。該控制碼是通過使用CreateFile創建的。【dwPositionType】指定要獲取的網址類別型。此參數可以是以下值之一：值描述TAPE_ABSO


-------------------------------------------------------- KeyGTK3Win32GetTapeStatus ----
GetTapeStatus    GetTapeStatus函數指示磁帶設備是否準備好處理磁帶命令。
語法
參數
【hDevice】標識要獲取設備狀態的設備。該控制碼是通過使用CreateFile函數創建的。
返回值
如果磁帶設備準備好接受適當的磁帶訪問命令而不返回錯誤，則返回值為NO_ERROR。如


-------------------------------------------------------- KeyGTK3Win32GetTempFileName ----
GetTempFileName    GetTempFileName函數創建暫存檔案的名稱。檔案名是指定路徑和首碼字串的連接，由指定整數形成的十六進位字串和.TMP副檔名。指定的整數可以是非零，在這種情況下，函數創建檔案名，但不會創建檔。如果為整數指定零，該函數將創建一個唯一的檔案名，並在指定的目錄中創建該檔。
語法
參數
【lpPathName】指向指定檔案名的目錄路徑的以null結尾的字串。該字串必須由ANSI字元集中的字元組成。應用程式通常為此參數指定句點（。）或GetTempPath函數的結果。如果


-------------------------------------------------------- KeyGTK3Win32GetTempPath ----
GetTempPath    GetTempPath函數檢索為暫存檔案指定的目錄的路徑。此函數取代GetTempDrive函數。
語法
參數
【nBufferLength】指定由【lpBuffer】標識的字串緩衝區的大小（以字元為單位）。【lpBuffer】指向一個字串緩衝區，它接收指定暫存檔案路徑的以null結尾的字串。



-------------------------------------------------------- KeyGTK3Win32GetTextAlign ----
GetTextAlign    GetTextAlign函數檢索指定設備上下文的文本對齊設置。
語法
參數
【HDC】標識設備上下文。
返回值
如果函數成功，返回值就是文本對齊標誌的狀態。如果函數失敗，返回值為GDI_ERROR.要獲取擴展錯誤資訊，請調用GetLastError.有關狀態返回


-------------------------------------------------------- KeyGTK3Win32GetTextCharacterExtra ----
GetTextCharacterExtra    GetTextCharacterExtra函數檢索指定設備上下文的當前字元間距。
語法
參數
【HDC】標識設備上下文。
返回值
如果函數成功，則返回值是當前的字元間距。如果函數失敗，返回值為0x8000000。
描述
字元間距定義了沿著基線的邏輯單位的額外空間，即TextO


-------------------------------------------------------- KeyGTK3Win32GetTextCharset ----
GetTextCharset    GetTextCharset函數獲取當前選定到指定設備上下文中的字體的字元集識別字。函式呼叫GetTextCharset（【HDC】）等效於函式呼叫GetTextCharsetInfo（【HDC】，NULL，0）。
語法
參數
【HDC】處理設備上下文。該函數獲取在該設備上下文中選擇的字體的字元集識別字。
返回值
如果函數成功，則返回值標識當前選定到指定設備上下文中的字體的字元集。定義了以下字元集識別字：ANS


-------------------------------------------------------- KeyGTK3Win32GetTextCharsetInfo ----
GetTextCharsetInfo    GetTextCharsetInfo函數獲取有關當前選定到指定設備上下文中字體的字元集的資訊。
語法
參數
【HDC】處理設備上下文。該函數獲取有關在此設備上下文中選擇的字體的資訊。【lpSig】指向接收字體簽名資訊的FONTSIGNATURE 資料結構的指標。如果當前在設備上下文中選擇TrueT


-------------------------------------------------------- KeyGTK3Win32GetTextColor ----
GetTextColor    GetTextColor函數檢索指定設備上下文的當前文本顏色。
語法
參數
【HDC】標識設備上下文。
返回值
如果函數成功，則返回值為當前文本顏色，為COLORREF值。如果函數失敗，返回值為CLR_INVALID。
描述
文本顏色定義使用TextOut或


-------------------------------------------------------- KeyGTK3Win32GetTextExtentExPoint ----
GetTextExtentExPoint    GetTextExtentExPoint函數檢索指定字串中適合指定空間的字元數，並使用每個字元的文本副檔名填充陣列。（文本範圍是空格開頭和適合空格的字元之間的距離。）此資訊對於文字包裝計算非常有用。
語法
參數
【HDC】標識設備上下文。【lpszStr】指向要檢索的區域的以null結尾的字串。【cchString】指定【lpszStr】參數指向的字串中的位元組數。【nMaxExtent】指定格式


-------------------------------------------------------- KeyGTK3Win32GetTextExtentPoint ----
GetTextExtentPoint    GetTextExtentPoint函數計算指定的文本字串的寬度和高度。
語法
參數
【HDC】標識設備上下文。【lpString】指向文本字串。該字串不需要為零終止，因為【cbString】指定字串的長度。【cbString】指定字串中的字元數。【lpsiz到】指向


-------------------------------------------------------- KeyGTK3Win32GetTextExtentPoint32 ----
GetTextExtentPoint32    GetTextExtentPoint32函數計算指定的文本字串的寬度和高度。此函數取代GetTextExtentPoint函數。
語法
參數
【HDC】標識設備上下文。【lpString】指向文本字串。字串不需要為零終止，因為【cbString】指定字串的長度。【cbString】指定字串中的字元數。【lpsiz到】指向S


-------------------------------------------------------- KeyGTK3Win32GetTextFace ----
GetTextFace    GetTextFace函數檢索在指定的設備上下文中選擇的字體的字體名稱。
語法
參數
【HDC】標識設備上下文。【NCOUNT】指定緩衝區的大小（以字元為單位）。【lpFaceName】指向要接收字體名稱的緩衝區。如果此參數為NULL，則該函數返回名稱中包含終止空字元的字元數


-------------------------------------------------------- KeyGTK3Win32GetTextMetrics ----
GetTextMetrics    GetTextMetrics函數使用當前選定字體的指標填充指定的緩衝區。
語法
參數
【HDC】標識設備上下文。【lptm】指向要接收指標的TEXTMETRIC結構。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastE


-------------------------------------------------------- KeyGTK3Win32GetThreadContext ----
GetThreadContext    GetThreadContext函數檢索指定執行緒的上下文。
語法
參數
【hThread】標識要檢索其上下文的執行緒的打開控制碼。Windows NT：控制碼必須具有對執行緒的THREAD_GET_CONTEXT存取權限。有關詳細資訊，請參閱執行緒物件.【lpContex


-------------------------------------------------------- KeyGTK3Win32GetThreadDesktop ----
GetThreadDesktop    GetThreadDesktop函數返回與指定執行緒關聯的桌面的控制碼。
語法
參數
【dwThreadId】標識要返回桌面控制碼的執行緒。GetCurrentThreadId和CreateProcess函數返回執行緒識別字。
返回值
如果函數成功，則返回值是與指定執行緒關聯的桌


-------------------------------------------------------- KeyGTK3Win32GetThreadLocale ----
GetThreadLocale    GetThreadLocale函數返回調用執行緒當前的語言環境。
語法
參數
此函數無參數。
返回值
該函數返回調用執行緒的32位LCID地區設定識別碼。
描述
當一個執行緒被創建時，它被給予系統預設的執行緒語言環境。系統引導時，系統從註冊表讀取系統預設執行緒區域設置


-------------------------------------------------------- KeyGTK3Win32GetThreadPriority ----
GetThreadPriority    GetThreadPriority函數返回指定執行緒的優先順序值。該值與執行緒進程的優先順序類一起確定執行緒的基本優先順序。
語法
參數
【hThread】標識執行緒。Windows NT：控制碼必須具有THREAD_QUERY_INFORMATION許可權。有關詳細資訊，請參閱執行緒物件.
返回值
如果函數成功，則返回值是執行緒的


-------------------------------------------------------- KeyGTK3Win32GetThreadPriorityBoost ----
GetThreadPriorityBoost    [New - Windows NT]GetThreadPriorityBoost函數返回指定執行緒的優先順序提升控制狀態。
語法
參數
hThread處理執行緒。該執行緒必須具有THREAD_QUERY_INFORMATION存取權限。有關詳細資訊，請參閱執行緒物件.pDisablePriorityBoost指向接收優先順序提升控制


-------------------------------------------------------- KeyGTK3Win32GetThreadSelectorEntry ----
GetThreadSelectorEntry    GetThreadSelectorEntry函數檢索指定選擇器和執行緒的描述符表條目。
語法
參數
【hThread】標識包含指定選擇器的執行緒的控制碼。Windows NT：控制碼必須具有THREAD_QUERY_INFORMATION許可權。有關詳細資訊，請參閱執行緒物件.【//要查找的選擇器值


-------------------------------------------------------- KeyGTK3Win32GetThreadTimes ----
GetThreadTimes    GetThreadTimes函數獲取有關指定執行緒的時序資訊。
語法
參數
【hThread】一個打開的控制碼，指定尋找定時資訊的執行緒。必須使用THREAD_QUERY_INFORMATION訪問來創建此控制碼。有關詳細資訊，請參閱執行緒物件.【lpCreationTim


-------------------------------------------------------- KeyGTK3Win32GetTickCount ----
GetTickCount    GetTickCount函數檢索自Windows啟動以來經過的毫秒數。
語法



-------------------------------------------------------- KeyGTK3Win32GetTimeFormat ----
GetTimeFormat    GetTimeFormat函數將時間格式化為指定區域設置的時間字串。該函數格式化指定時間或本地系統時間。
語法
參數
【語言環境】指定要格式化時間字串的區域設置。如果【lpFormat】為NULL，則該函數將根據該語言環境的時間格式格式化該字串。如果【lpFormat】不為NULL，則該函數僅對格式圖片


-------------------------------------------------------- KeyGTK3Win32GetTimeZoneInformation ----
GetTimeZoneInformation    GetTimeZoneInformation函數檢索當前的時區參數。這些參數控制協調世界時（UTC）與本地時間之間的轉換。
語法
參數
【lpTimeZoneInformation】指向TIME_ZONE_INFORMATION結構以接收當前時區參數。
返回值
如果函數成功，則返回值為以下值之一：值含義TIME_ZONE


-------------------------------------------------------- KeyGTK3Win32GetTokenInformation ----
GetTokenInformation    GetTokenInformation函數檢索有關訪問權杖的指定類型的資訊。調用進程必須具有獲取資訊的適當存取權限。
語法
參數
【TokenHandle】標識檢索資訊的訪問權杖。【TokenInformationClass】指定TOKEN_INFORMATION_CLASS枚舉類型的變數，標識函數檢索的資訊類型。【T


-------------------------------------------------------- KeyGTK3Win32GetTopWindow ----
GetTopWindow    GetTopWindow函數檢查與指定的父視窗相關聯的子視窗的Z順序，並檢索Z順序頂部的子視窗的控制碼。
語法
參數
【的hWnd】標識要檢查子視窗的父視窗。如果此參數為NULL，該函數將返回Z順序頂部視窗的控制碼。
返回值
如果函數成功，則返回值是Z順序頂部子視窗的控制碼。如果指定的視窗沒有子視窗，返回值


-------------------------------------------------------- KeyGTK3Win32GetTrusteeForm ----
GetTrusteeForm    [New - Windows NT]GetTrusteeForm函數檢索分配給指定TRUSTEE結構的TrusteeForm成員的值。此值指示結構是否使用名稱字串或安全性識別碼（SID）來標識受信任者。
語法
參數
【pTrustee】指向TRUSTEE結構。
返回值
返回值是TRUSTEE_FORM枚舉中的常量之一。



-------------------------------------------------------- KeyGTK3Win32GetTrusteeName ----
GetTrusteeName    [New - Windows NT]GetTrusteeName函數從TRUSTEE結構中檢索受託人名稱。
語法
參數
【pTrustee】指向TRUSTEE結構。
返回值
如果TRUSTEE結構的TrusteeForm成員是TRUSTEE_IS_NAME，則返回值是分配給該結構的ptstrNameaf成


-------------------------------------------------------- KeyGTK3Win32GetTrusteeType ----
GetTrusteeType    [New - Windows NT]GetTrusteeType函數檢索分配給指定TRUSTEE結構的TrusteeType成員的值。此值表示受託人是用戶，組還是受託人類型未知。
語法
參數
【pTrustee】指向TRUSTEE結構。
返回值
返回值是來自TRUSTEE_TYPE枚舉的常量之一。



-------------------------------------------------------- KeyGTK3Win32GetUpdateRect ----
GetUpdateRect    GetUpdateRect函數檢索完全包圍指定視窗的更新區域的最小矩形的座標。如果使用CS_OWNDC樣式創建視窗，並且映射模式不是MM_TEXT，則GetUpdateRect將以邏輯座標檢索矩形。否則，它將檢索用戶端座標中的矩形。如果沒有更新區域，GetUpdateRect將檢索一個空矩形（將所有座標設置為零）。
語法
參數
【的hWnd】標識具有要檢索的更新區域的視窗。【LPRECT】指向接收包圍矩形座標的RECT結構。應用程式可以將此參數設置為NULL，以確定視窗是否存在更新區域。如果此參數為NULL，則Ge


-------------------------------------------------------- KeyGTK3Win32GetUpdateRgn ----
GetUpdateRgn    GetUpdateRgn函數通過將視窗的更新區域複製到指定的區域來檢索更新區域。更新區域的座標相對于視窗的左上角（即它們是用戶端座標）。
語法
參數
【的hWnd】標識具有要檢索的更新區域的視窗。【HRGN】標識接收更新區域的區域。【// erase-background flag】指定是否應該擦除視窗背景以及是否應繪製子視窗的非用戶端區域


-------------------------------------------------------- KeyGTK3Win32GetUserDefaultLangID ----
GetUserDefaultLangID    GetUserDefaultLangID函數檢索使用者預設語言識別字。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是使用者預設語言識別字。



-------------------------------------------------------- KeyGTK3Win32GetUserDefaultLCID ----
GetUserDefaultLCID    GetUserDefaultLCID函數檢索使用者預設的地區設定識別碼。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值是用戶默認的地區設定識別碼。
描述
有關地區設定識別碼的更多資訊，請參閱區域識別字.



-------------------------------------------------------- KeyGTK3Win32GetUserName ----
GetUserName    GetUserName函數檢索當前執行緒的用戶名。這是當前登錄到系統的使用者的名稱。
語法
參數
【lpBuffer】指向緩衝區以接收包含用戶登錄名的空終止字串。如果此緩衝區不足以包含整個用戶名，該函數將失敗。【服務提供者】指向DWORD的輸入，指定由【lpBuffer】參數指定的緩衝


-------------------------------------------------------- KeyGTK3Win32GetUserObjectInformation ----
GetUserObjectInformation    GetUserObjectInformation函數返回有關視窗站或桌面物件的資訊。
語法
參數
【hObjhr】標識要返回資訊的視窗台或桌面物件。這可以是HDESK或HWINSTA控制碼（例如，CreateWindowStation OpenWindowStation，CreateDes


-------------------------------------------------------- KeyGTK3Win32GetUserObjectSecurity ----
GetUserObjectSecurity    GetUserObjectSecurity函數檢索指定使用者物件的安全資訊。
語法
參數
【hObjhr】標識要返回安全資訊的使用者物件。【pSIRequested】指向SECURITY_INFORMATION結構，指定所請求的安全資訊。【pSID】指向SECURITY_DESCR


-------------------------------------------------------- KeyGTK3Win32GetVersion ----
GetVersion    GetVersion函數返回當前的Windows版本號以及有關作業系統平臺的資訊。此函數已被GetVersionEx取代，該選項是獲取系統版本號資訊的首選方法。新應用程式應使用GetVersionEx.GetVersionEx函數的開發是因為許多現有的Windows應用程式在檢查GetVersion函式呼叫的DWORD返回值時將錯誤地轉換為DWORD中的主要和次要版本號。GetVersionEx函數強制應用程式明確檢查版本資訊的每個元素，並允許將來對該資訊的增強。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值為DWORD，該值包含低位字中Windows的主版本號和次版本號，以及高階字中作業系統平臺的資訊。對於所有平臺，低位字包含Windows的版


-------------------------------------------------------- KeyGTK3Win32GetVersionEx ----
GetVersionEx    GetVersionEx函數可獲取有關當前正在運行的作業系統版本的擴展資訊。
語法
參數
【lpVersionInformation】指向函數填充作業系統版本資訊的OSVERSIONINFO資料結構的指標。在調用GetVersionEx函數之前，請將OSVERSIONINFO資料


-------------------------------------------------------- KeyGTK3Win32GetViewportExtEx ----
GetViewportExtEx    GetViewportExtEx函數檢索指定設備上下文的當前視口的x範圍和y範圍。
語法
參數
【HDC】標識設備上下文。【lpsiz到】指向SIZE結構。設備單位中的x和y範圍被放置在此結構中。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32GetViewportOrgEx ----
GetViewportOrgEx    GetViewportOrgEx函數檢索指定設備上下文的視口原點的x座標和y座標。
語法
參數
【HDC】標識設備上下文。【LPPOINT】指向接收原點座標的POINT結構。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32GetVolumeInformation ----
GetVolumeInformation    GetVolumeInformation函數返回有關指定根目錄的檔案系統和卷的資訊。
語法
參數
【lpRootPathName】指向包含要描述的卷的根目錄的字串。如果此參數為NULL，則使用目前的目錄的根。如果此參數是UNC名稱，則必須使用其他反斜線來執行此操作。例如，您可以將\\\\


-------------------------------------------------------- KeyGTK3Win32GetWindow ----
GetWindow    GetWindow函數檢索具有指定關係（Z訂單或所有者）的視窗的控制碼到指定的視窗。
語法
參數
【的hWnd】標識一個視窗根據【uCmd】參數的值，檢索到的視窗控制碼相對於此視窗。【uCmd】指定指定視窗和要檢索控制碼的視窗之間的關係。此參數可以是以下值之一：值含義GW_CHILD如果指定


-------------------------------------------------------- KeyGTK3Win32GetWindowContextHelpId ----
GetWindowContextHelpId    GetWindowContextHelpId函數檢索與指定視窗相關聯的説明上下文識別字（如果有）。
語法
參數
【HWND】處理到要檢索説明上下文識別字的視窗。
返回值
如果視窗有一個或另一個則返回幫助上下文識別字。



-------------------------------------------------------- KeyGTK3Win32GetWindowDC ----
GetWindowDC    GetWindowDC函數檢索整個視窗的設備上下文（DC），包括標題列，功能表和捲軸。視窗設備上下文允許在視窗中的任何地方進行繪製，因為設備上下文的原點是視窗的左上角而不是客戶區。
語法
參數
【的hWnd】標識具有要檢索的設備上下文的視窗。
返回值
如果函數成功，則返回值是指定視窗的設備上下文的控制碼。如果函數失敗，則返回值為NULL，表示錯誤或無效的【的hWnd】參數。
描


-------------------------------------------------------- KeyGTK3Win32GetWindowExtEx ----
GetWindowExtEx    此函數檢索指定設備上下文的視窗的x範圍和y範圍。BOOL GetWindowExtEx(HDC 【HDC】,//設備上下文的控制碼LPSIZE 【lpsiz到】//結構接收視窗範圍的位址);
參數
【HDC】標識設備上下文。【lpsiz到】指向SIZE結構。頁面空間單元中的x和y範圍被放置在此結構中。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32GetWindowLong ----
GetWindowLong    GetWindowLong函數檢索有關指定視窗的資訊。該函數還可以將指定偏移量的32位（長）值檢索到視窗的額外視窗記憶體中。
語法
參數
【的hWnd】標識視窗，間接地標識視窗所屬的類。【參數nIndex】指定要檢索的值的從零開始的偏移量。有效值範圍為零，通過額外的視窗記憶體的位元組數減去4;例如，如果指定了12個或更多位元組的額外


-------------------------------------------------------- KeyGTK3Win32GetWindowOrgEx ----
GetWindowOrgEx    GetWindowOrgEx函數檢索指定設備上下文的視窗原點的x座標和y座標。
語法
參數
【HDC】標識設備上下文。【LPPOINT】指向POINT結構，它以視窗原點的頁面單位接收座標。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32GetWindowPlacement ----
GetWindowPlacement    GetWindowPlacement函數檢索指定視窗的顯示狀態和還原的，最小化的和最大化的位置。
語法
參數
【的hWnd】標識視窗。【lpwndplel，LATN】指向接收顯示狀態和位置資訊的WINDOWPLACEMENT結構。在致電GetWindowPlacement之前，將WINDOWPLAC


-------------------------------------------------------- KeyGTK3Win32GetWindowRect ----
GetWindowRect    GetWindowRect函數檢索指定視窗的邊界矩形的尺寸。尺寸以相對于螢幕左上角的螢幕座標給出。
語法
參數
【的hWnd】標識視窗。【LPRECT】指向RECT結構，可以接收視窗左上角和右下角的螢幕座標。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用


-------------------------------------------------------- KeyGTK3Win32GetWindowRgn ----
GetWindowRgn    GetWindowRgn函數獲取視窗的視窗區域的副本。通過調用SetWindowRgn函數設置視窗的視窗區域。視窗區域確定作業系統允許繪製的視窗內的區域。作業系統不顯示位於視窗區域之外的視窗的任何部分
語法
參數
【的hWnd】處理要獲得視窗區域的視窗。【HRGN】處理一個地區。該區域接收視窗區域的副本。
返回值
返回值指定函數獲取的區域的類型。它可以是以下值之一：值含義NULLREGION該地區


-------------------------------------------------------- KeyGTK3Win32GetWindowsDirectory ----
GetWindowsDirectory    GetWindowsDirectory函數檢索Windows目錄的路徑。Windows目錄包含基於Windows的應用程式，初始設定檔案和説明檔等文件。
語法
參數
【lpBuffer】指向緩衝區以接收包含路徑的以null結尾的字串。除非Windows目錄是根目錄，否則此路徑不會以反斜線結尾。例如，如果Windows目錄在驅動器C上命名為WINDOWS


-------------------------------------------------------- KeyGTK3Win32GetWindowTask ----
GetWindowTask     GetWindowTask函數已過時。此函數僅用於與16位元版本的Windows相容。基於Win32的應用程式應使用GetWindowThreadProcessId函數。


-------------------------------------------------------- KeyGTK3Win32GetWindowText ----
GetWindowText    GetWindowText函數將指定視窗的標題列（如果有）的文本複製到緩衝區中。如果指定的視窗是控制項，將複製控制項的文本。
語法
參數
【的hWnd】標識包含文本的視窗或控制項。【lpString】指向將接收文本的緩衝區。【nMaxCount】指定要複製到緩衝區的最大字元數。如果文本超出此限制，則會被截斷。
返回值
如果函


-------------------------------------------------------- KeyGTK3Win32GetWindowTextLength ----
GetWindowTextLength    GetWindowTextLength函數檢索指定視窗標題列文本的長度（如果視窗有標題列）。如果指定的視窗是控制項，則該函數將檢索控制項中文本的長度。
語法
參數
【的hWnd】標識視窗或控制項。
返回值
如果函數成功，則返回值是文本的長度（以字元為單位）。在某些條件下，該值實際上可能大於文本的長度。有關詳細資訊，請參閱以下備註部分。如果視窗沒有文本


-------------------------------------------------------- KeyGTK3Win32GetWindowThreadProcessId ----
GetWindowThreadProcessId    GetWindowThreadProcessId函數檢索創建指定視窗的執行緒的識別字，以及可選地，創建視窗的進程的識別字。此函數取代GetWindowTask函數。
語法



-------------------------------------------------------- KeyGTK3Win32GetWindowWord ----
GetWindowWord    GetWindowWord函數以指定的偏移量將16位（字）值檢索到指定視窗的額外視窗記憶體中。
語法
參數
【的hWnd】標識視窗，間接地標識視窗所屬的類。【參數nIndex】指定要檢索的值的基於零的位元組偏移量。有效值的範圍為零，通過額外的視窗記憶體的位元組數減去2;例如，如果您指定了10個或更多位元組


-------------------------------------------------------- KeyGTK3Win32GetWinMetaFileBits ----
GetWinMetaFileBits    GetWinMetaFileBits函數將增強格式記錄從中繼檔轉換為Windows格式記錄，並將轉換的記錄存儲在指定的緩衝區中。
語法
參數
【HEMF】識別增強的圖中繼檔。【cbBuffer】指定要複製轉換的記錄的緩衝區的大小（以位元組為單位）。【lpbBuffer】指向要複製轉換記錄的緩衝區。如果【lpbBuffer】為NULL


-------------------------------------------------------- KeyGTK3Win32GetWorldTransform ----
GetWorldTransform    GetWorldTransform函數檢索當前的世界空間到頁空間轉換。
語法
參數
【HDC】標識設備上下文。【lpXform】指向XFORM結構的接收當前世界空間到頁面空間轉換的結構。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
如果應用


-------------------------------------------------------- KeyGTK3Win32GlobalAddAtom ----
GlobalAddAtom    GlobalAddAtom函數將一個字串添加到全域原子表，並返回一個唯一的值（一個原子），用於標識字串。
語法
參數
【lpString】指向要添加的以null結尾的字串。該字串的最大長度可以為255位元組。僅在情況下不同的字串被認為是相同的。添加到表中的該名稱的第一個字串的情況由GlobalGetA


-------------------------------------------------------- KeyGTK3Win32GlobalAlloc ----
GlobalAlloc    GlobalAlloc函數從堆中分配指定的位元組數。在線性Win32 API環境中，本地堆和全域堆之間沒有區別。
語法
參數
【uFlags】指定如何分配記憶體。如果指定為零，則預設值為GMEM_FIXED。除了特別注明的不相容的組合外，還可以使用以下標誌的任何組合。要指示函數是分配固定或可移動記憶體，請指定前四個標誌


-------------------------------------------------------- KeyGTK3Win32GlobalCompact ----
GlobalCompact        GlobalCompact函數已過時。此函數僅用於與16位元版本的Windows相容。它在32位環境中沒有任何意義。


-------------------------------------------------------- KeyGTK3Win32GlobalDeleteAtom ----
GlobalDeleteAtom    GlobalDeleteAtom函數減少全域字串原子的引用計數。如果原子的引用計數達到零，GlobalDeleteAtom將從全域原子表中刪除與原子關聯的字串。
語法
參數
【納多馬斯】標識要刪除的原子和字串。
返回值
如果函數成功，返回值為零。如果函數失敗，則返回值為【納多馬斯】參數。要獲取擴展錯誤資訊，請調用GetLastError.
描述
字串


-------------------------------------------------------- KeyGTK3Win32GlobalDiscard ----
GlobalDiscard    GlobalDiscard函數會丟棄指定的全域區塊。記憶體物件的鎖計數必須為零。
語法
參數
【Hglbmm】標識全域記憶體物件。該手柄由GlobalAlloc或GlobalReAlloc函數返回。
返回值
如果函數成功，返回值就是記憶體物件的控制碼。如果函數失敗，返回值為NULL。要


-------------------------------------------------------- KeyGTK3Win32GlobalFindAtom ----
GlobalFindAtom    GlobalFindAtom函數在全域原子表中搜索指定的字串，並檢索與該字串關聯的全域原子。
語法
參數
【lpString】指向要搜索的以null結尾的字串。
返回值
如果函數成功，則返回值是與給定字串關聯的全域原子。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastE


-------------------------------------------------------- KeyGTK3Win32GlobalFix ----
GlobalFix         GlobalFix函數已過時。此函數僅用於與16位元版本的Windows相容。基於Win32的應用程式應使用VirtualLock和VirtualUnlock函數。


-------------------------------------------------------- KeyGTK3Win32GlobalFlags ----
GlobalFlags    GlobalFlags函數返回有關指定的全域記憶體物件的資訊。
語法
參數
【HMEM】標識全域記憶體物件。該手柄由GlobalAlloc或GlobalReAlloc函數返回。
返回值
如果函數成功，則返回值是一個32位元值，用於指定記憶體物件的分配標誌和鎖計數。如果


-------------------------------------------------------- KeyGTK3Win32GlobalFree ----
GlobalFree    GlobalFree函數釋放指定的全域記憶體物件並使其控制碼無效。
語法
參數
【HMEM】標識全域記憶體物件。該手柄由GlobalAlloc或GlobalReAlloc函數返回。
返回值
如果函數成功，返回值為NULL。如果函數失敗，返回值等於全域記憶體物件的控制碼。要


-------------------------------------------------------- KeyGTK3Win32GlobalGetAtomName ----
GlobalGetAtomName    GlobalGetAtomName函數檢索與指定的全域原子相關聯的字串的副本。
語法
參數
【納多馬斯】標識與要檢索的字串相關聯的全域原子。【lpBuffer】指向字串的緩衝區。【服務提供者】指定緩衝區的大小（以字元為單位）。
返回值
如果函數成功，則返回值是複製到緩衝區的


-------------------------------------------------------- KeyGTK3Win32GlobalHandle ----
GlobalHandle    GlobalHandle函數檢索與指定的指標關聯到全域區塊的控制碼。
語法
參數
【PME?】指向全域區塊的第一個位元組。該指標由GlobalLock函數返回。
返回值
如果函數成功，則返回值是指定的全域記憶體物件的控制碼。如果函數失敗，返回值為NULL。要獲取擴展錯誤信


-------------------------------------------------------- KeyGTK3Win32GlobalLock ----
GlobalLock    GlobalLock函數鎖定全域記憶體物件，並返回指向物件區塊第一個位元組的指標。與鎖定的記憶體物件相關聯的記憶體塊不能被移動或丟棄。對於使用GMEM_MOVEABLE標誌分配的記憶體物件，該函數會增加與記憶體物件關聯的鎖定計數。
語法
參數
【HMEM】標識全域記憶體物件。該手柄由GlobalAlloc或GlobalReAlloc函數返回。
返回值
如果函數成功，則返回值是指向區塊第一個位元組的指標。如果函數失敗，返回值為NU


-------------------------------------------------------- KeyGTK3Win32GlobalLRUNewest ----
GlobalLRUNewest         GlobalLRUNewest函數已過時。此函數僅用於與16位元版本的Windows相容。基於Win32的應用程式應使用VirtualLock和VirtualUnlock函數。


-------------------------------------------------------- KeyGTK3Win32GlobalLRUOldest ----
GlobalLRUOldest        GlobalLRUOldest函數已過時。此函數僅用於與16位元版本的Windows相容。基於Win32的應用程式應使用VirtualLock和VirtualUnlock函數。


-------------------------------------------------------- KeyGTK3Win32GlobalMemoryStatus ----
GlobalMemoryStatus    GlobalMemoryStatus函數檢索有關當前可用記憶體的資訊。該函數返回有關物理和虛擬記憶體的資訊。此函數取代GetFreeSpace函數。
語法
參數
【lpBuffer】指向MEMORYSTATUS結構，其中返回有關當前記憶體可用性的資訊。在調用此函數之前，調用進程應設置此結構的dwLength成員。
返回值
此函數不返回值。
描述



-------------------------------------------------------- KeyGTK3Win32GlobalReAlloc ----
GlobalReAlloc    GlobalReAlloc函數更改指定的全域記憶體物件的大小或屬性。尺寸可以增減。
語法
參數
【HMEM】標識要重新分配的全域記憶體物件。該控制碼由GlobalAlloc或GlobalReAlloc函數返回。【dwBytes】指定區塊的新大小（以位元組為單位）。如果此參數為零，並且【uF


-------------------------------------------------------- KeyGTK3Win32GlobalSize ----
GlobalSize    GlobalSize函數檢索指定的全域記憶體物件的當前大小（以位元組為單位）。
語法
參數
【HMEM】標識全域記憶體物件。該手柄由GlobalAlloc或GlobalReAlloc函數返回。
返回值
如果函數成功，則返回值是指定的全域記憶體物件的大小（以位元組為單位）。如果指定的句


-------------------------------------------------------- KeyGTK3Win32GlobalUnfix ----
GlobalUnfix       GlobalUnfix函數已過時。此函數僅用於與16位元版本的Windows相容。它在32位環境中沒有任何意義。


-------------------------------------------------------- KeyGTK3Win32GlobalUnlock ----
GlobalUnlock    GlobalUnlock函數減少與使用GMEM_MOVEABLE標誌分配的記憶體物件關聯的鎖定計數。此函數對使用GMEM_FIXED標誌分配的記憶體物件沒有影響。
語法
參數
【HMEM】標識全域記憶體物件。該手柄由GlobalAlloc或GlobalReAlloc函數返回。
返回值
如果記憶體物件在遞減鎖定計數後仍然被鎖定，則返回值為非零值。如果函數失敗，返回值


-------------------------------------------------------- KeyGTK3Win32GlobalUnWire ----
GlobalUnWire      GlobalUnWire函數已過時。需要鎖定全域記憶體物件的應用程式應使用GlobalLock和GlobalUnlock函數。此函數僅用於與16位元版本的Windows相容。新的基於Win32的應用程式不應該使用此函數。


-------------------------------------------------------- KeyGTK3Win32GlobalWire ----
GlobalWire       GlobalWire函數已過時。此函數僅用於與16位元版本的Windows相容。基於Win32的應用程式應使用GlobalLock和GlobalUnlock函數。


-------------------------------------------------------- KeyGTK3Win32GrayString ----
GrayString    GrayString函數在指定位置繪製灰色文本。該函數通過將文本複製到記憶體點陣圖中，使點陣圖變灰，然後將點陣圖複製到螢幕來繪製文本。無論選定的畫筆和背景如何，該函數都會灰化文本。GrayString使用當前為指定的設備上下文選擇的字體。如果【lpOutputFunc】參數為NULL，則GDI使用TextOut函數，並且【的lpData】參數被假定為要輸出的字串的指標。如果要輸出的字元不能由TextOut處理（例如，字串作為點陣圖存儲），應用程式必須提供自己的輸出函數。
語法
參數
【hDC】標識設備上下文。【HBRUSH】標識用於變灰的畫筆。如果此參數為NULL，則文本將與用於繪製視窗文本的相同畫筆呈灰色。【lpOutputFunc】指向將繪製字串的應用程式定義的函


-------------------------------------------------------- KeyGTK3Win32Handler ----
{處理常式} 999796002    處理器函數是服務進程指定為特定服務的控制處理函數的函數。該函數可以有任何應用程式定義的名稱。VOID WINAPI處理常式DWORD 【fdwControl】//請求控制代碼);
參數
【fdwControl】表示所請求的控制代碼。該值可以是表中的標準控制代碼之一，也可以是128到255範圍內的用戶定義的控制代碼。對於使用者定義的控制代碼，服務定義與控制代碼相關聯的操作。值含


-------------------------------------------------------- KeyGTK3Win32HandlerRoutine ----
HandlerRoutine    一個HandlerRoutine函數是控制台進程指定的一個函數來處理進程接收到的控制信號。該函數可以有任何名稱。
語法
參數
【dwCtrlType】指示處理常式接收到的控制信號的類型。此值為以下之一：信號描述CTRL_C_EVENT從鍵盤輸入或由GenerateConsoleCtrlEvent函數生成的信號接收到


-------------------------------------------------------- KeyGTK3Win32HeapAlloc ----
HeapAlloc    HeapAlloc函數從堆中分配一個區塊。分配的記憶體不可移動。
語法
參數
【hHeap】指定將從其分配記憶體的堆。此參數是由HeapCreate或GetProcessHeap函數返回的控制碼。【dwFlags中】指定堆分配的幾個可控方面。指定任何這些標誌將覆蓋使用He


-------------------------------------------------------- KeyGTK3Win32HeapCompact ----
HeapCompact    HeapCompact函數嘗試壓縮指定的堆。它通過合併相鄰的空閒區塊來壓縮堆，並且消除大的可用區塊。
語法
參數
【hHeap】處理堆的函數將嘗試壓縮。【dwFlags中】在函數操作期間控制堆訪問的一組位元標誌。以下位標誌有意義：值含義HEAP_NO_SERIALIZE如果設置此標誌，則HeapCompa


-------------------------------------------------------- KeyGTK3Win32HeapCreate ----
HeapCreate    HeapCreate函數創建一個可以由調用進程使用的堆物件。該函數在進程的虛擬位址空間中保留一個連續的塊，並為此塊的指定初始部分分配物理存儲。
語法
參數
【flOptions】指定新堆的可選屬性。這些標誌將通過調用堆函數（HeapAlloc，HeapFree，HeapReAlloc和HeapSize）來影響對新堆的後續訪問。您可以指定以下一個


-------------------------------------------------------- KeyGTK3Win32HeapDestroy ----
HeapDestroy    HeapDestroy函數會銷毀指定的堆物件。HeapDestroy解除並釋放專用堆物件的所有頁面，並使堆的控制碼無效。
語法
參數
【hHeap】指定要銷毀的堆。該參數應該是由HeapCreate函數返回的堆處理。不應使用GetProcessHeap函數返回的堆處理。
返回值
如果函數成功，返回值不為零。如果函數失敗


-------------------------------------------------------- KeyGTK3Win32HeapLock ----
HeapLock    HeapLock函數嘗試獲取與指定堆相關聯的關鍵部分物件或鎖定。如果函數成功，調用執行緒擁有堆鎖。只有調用執行緒才能從堆中分配或釋放記憶體。如果該執行緒嘗試從堆中分配或釋放記憶體，則調用進程的任何其他執行緒的執行將被阻止。這樣的執行緒將保持阻塞，直到擁有堆鎖的執行緒調用HeapUnlock 函數。
語法
參數
【hHeap】處理堆以鎖定調用執行緒的獨佔訪問。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
HeapLo


-------------------------------------------------------- KeyGTK3Win32HeapReAlloc ----
HeapReAlloc    HeapReAlloc函數從堆中重新分配一塊記憶體。此函數使您可以調整區塊大小並更改其他區塊屬性。分配的記憶體不可移動。
語法
參數
【hHeap】指定將重新分配記憶體的堆。這是由HeapCreate或GetProcessHeap函數返回的控制碼。【dwFlags中】指定堆重新分配的幾個可控方面。當使用HeapCreate函數


-------------------------------------------------------- KeyGTK3Win32HeapSize ----
HeapSize    HeapSize函數返回由HeapAlloc或HeapReAlloc函數從堆分配的區塊的大小（以位元組為單位）。
語法
參數
【hHeap】指定區塊所在的堆。該控制碼由HeapCreate或GetProcessHeap函數返回。【dwFlags中】指定訪問區塊的幾個可控方面。目前只有一個標誌被定義;然而，所有其他


-------------------------------------------------------- KeyGTK3Win32HeapUnlock ----
HeapUnlock    HeapUnlock函數釋放與指定堆相關聯的關鍵部分物件或鎖定的所有權。HeapUnlock函數可以反轉HeapLock 函數的動作。
語法
參數
【hHeap】處理堆堆解鎖。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
HeapLock函數主要用於在


-------------------------------------------------------- KeyGTK3Win32HeapValidate ----
HeapValidate    HeapValidate函數嘗試驗證指定的堆。該函數掃描堆中的所有區塊，並驗證作業系統的堆管理器維護的堆控制結構是否處於一致狀態。您也可以使用HeapValidate函數來驗證指定堆中的單個區塊，而不檢查整個堆的有效性。
語法
參數
【hHeap】處理感興趣的堆。HeapValidate函數嘗試驗證此堆或此堆內的單個區塊。【dwFlags中】在函數操作期間控制堆訪問的一組位元標誌。以下位標誌有意義：值含義HEAP_NO_


-------------------------------------------------------- KeyGTK3Win32HeapWalk ----
HeapWalk    HeapWalk函數枚舉指定堆中的區塊。
語法
參數
【hHeap】處理到要記錄的區塊的堆中。【dwFlags中】指向維護特定堆枚舉的狀態資訊的PROCESS_HEAP_ENTRY 結構。如果HeapWalk函數成功，則返回值TRUE，此結構


-------------------------------------------------------- KeyGTK3Win32HideCaret ----
HideCaret    HideCaret函數從螢幕中刪除插入符號。隱藏插入符號不會破壞其當前形狀或使插入點無效。
語法
參數
【的hWnd】標識擁有插入符號的視窗。如果此參數為NULL，則HideCaret將搜索具有插入符號的視窗的當前任務。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取


-------------------------------------------------------- KeyGTK3Win32HiliteMenuItem ----
HiliteMenuItem    HiliteMenuItem函數突出顯示或刪除功能表列中專案的突出顯示。
語法
參數
【HWND】標識包含功能表的視窗。【HMENU】標識包含要突出顯示的專案的功能表列。【uItemHilite】指定要突出顯示的功能表項目。此參數是功能表項目的識別字或功能表列中功能表項目的偏移量，具體取決於【


-------------------------------------------------------- KeyGTK3Win32ImageList_Add ----
ImageList_Add    ImageList_Add函數將圖像或圖像添加到圖像清單。
語法
參數
【HIML】處理圖像清單。【hbmImagexh】處理包含圖像或圖像的點陣圖。從點陣圖的寬度推斷圖像的數量。【hbmMask】處理包含遮罩的點陣圖。如果圖像清單中沒有使用遮罩，則忽略該參數。
返


-------------------------------------------------------- KeyGTK3Win32ImageList_AddMasked ----
ImageList_AddMasked    ImageList_AddMasked函數將圖像或圖像添加到圖像清單，從指定的點陣圖生成蒙版。
語法
參數
【HIML】處理圖像清單。【hbmImagexh】處理包含一個或多個圖像的點陣圖。從點陣圖的寬度推斷圖像的數量。【crMask】用於生成面具的顏色。指定點陣圖中此顏色的每個圖元都變為黑色，遮罩中的


-------------------------------------------------------- KeyGTK3Win32ImageList_BeginDrag ----
ImageList_BeginDrag    ImageList_BeginDrag函數開始拖動圖像。
語法
參數
【himlTrack】處理圖像清單。【iTrack】索引要拖動的圖像。【dxHotspot】和【dyHotspot】拖動位置相對于圖像左上角的位置。
返回值
如果函數成功，返回值不為零。


-------------------------------------------------------- KeyGTK3Win32ImageList_Create ----
ImageList_Create    ImageList_Create函數創建一個新的圖像清單。
語法



-------------------------------------------------------- KeyGTK3Win32ImageList_Destroy ----
ImageList_Destroy    ImageList_Destroy函數會銷毀圖像清單。
語法



-------------------------------------------------------- KeyGTK3Win32ImageList_DragEnter ----
ImageList_DragEnter    ImageList_DragEnter函數在拖動操作期間將更新鎖定到指定的視窗，並將拖動圖像顯示在視窗中的指定位置。
語法
參數
【hwndLock】處理擁有拖動圖像的視窗。【x】指定顯示拖動圖像的x座標。座標相對于視窗的左上角，而不是客戶區。【y】指定顯示拖動圖像的y座標。座標相對于視窗的左上角，而不是客戶區。
返


-------------------------------------------------------- KeyGTK3Win32ImageList_DragLeave ----
ImageList_DragLeave    ImageList_DragLeave函數解鎖指定的視窗並隱藏拖動圖像，允許更新視窗。
語法



-------------------------------------------------------- KeyGTK3Win32ImageList_DragMove ----
ImageList_DragMove    ImageList_DragMove函數在拖放操作期間移動正在拖動的圖像。此函數通常回應於WM_MOUSEMOVE消息而被調用。
語法
參數
【x】指定顯示拖動圖像的x座標。座標相對于視窗的左上角，而不是客戶區。【y】指定顯示拖動圖像的y座標。座標相對于視窗的左上角，而不是客戶區。
返回值
如果函數成功，返回值不為零。如果函數


-------------------------------------------------------- KeyGTK3Win32ImageList_DragShowNolock ----
ImageList_DragShowNolock    ImageList_DragShowNolock函數顯示或隱藏正在拖動的圖像。
語法



-------------------------------------------------------- KeyGTK3Win32ImageList_Draw ----
ImageList_Draw    ImageList_Draw函數在指定的設備上下文中繪製一個圖像清單項。
語法



-------------------------------------------------------- KeyGTK3Win32ImageList_DrawEx ----
ImageList_DrawEx    ImageList_DrawEx函數在指定的設備上下文中繪製一個圖像清單項。該函數使用指定的繪圖樣式並將圖像與指定的顏色混合。
語法
參數
【HIML】處理圖像清單【i】要繪製的圖像的索引。【hdcDst】處理目標設備上下文。【x】指定在指定的設備上下文中繪製的x座標。【y】指定在指定的設備上下文中繪製的y座標。【dx】指定要繪


-------------------------------------------------------- KeyGTK3Win32ImageList_EndDrag ----
ImageList_EndDrag    ImageList_EndDrag函數結束拖動操作。BOOL ImageList_EndDrag(VOID)
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。


-------------------------------------------------------- KeyGTK3Win32ImageList_ExtractIcon ----
ImageList_ExtractIcon    ImageList_ExtractIcon函數根據圖像清單中的圖像和遮罩創建一個圖示或游標。ImageList_ExtractIcon是一個調用ImageList_GetIcon函數的巨集。
語法
參數
【hi】Ignored; set to zero.【HIML】處理圖像清單。【i】圖像索引
返回值
如果函數成功，則返回值是圖示或游標的控制碼。如果函數失敗，返回值為NULL。



-------------------------------------------------------- KeyGTK3Win32ImageList_GetBkColor ----
ImageList_GetBkColor    ImageList_GetBkColor函數檢索圖像清單的當前背景顏色。
語法



-------------------------------------------------------- KeyGTK3Win32ImageList_GetDragImage ----
ImageList_GetDragImage    ImageList_GetDragImage函數檢索用於拖動圖像的臨時圖像清單。該函數還檢索當前拖動位置，以及拖動圖像相對於拖動位置的偏移量。
語法
參數
【PPT】指向接收當前拖動位置的POINT結構的指標。可以為NULL。【pptHotSpot】指向POINT結構的指標，該結構接收拖動圖像相對於拖動位置的偏移量。可以為NULL。
返回值



-------------------------------------------------------- KeyGTK3Win32ImageList_GetIcon ----
ImageList_GetIcon    ImageList_GetIcon函數根據圖像清單中的圖像和遮罩創建一個圖示或游標。
語法
參數
【HIML】處理圖像清單。【i】圖像索引【旗】組合指定繪圖樣式的標誌。有關值清單，請參閱ImageList_Draw函數的說明。
返回值
如果函數成功，則返回值是圖示或游標的控制碼。如果函


-------------------------------------------------------- KeyGTK3Win32ImageList_GetIconSize ----
ImageList_GetIconSize    ImageList_GetIconSize函數檢索圖像清單中圖像的尺寸。圖像清單中的所有圖像具有相同的尺寸。
語法



-------------------------------------------------------- KeyGTK3Win32ImageList_GetImageCount ----
ImageList_GetImageCount    ImageList_GetImageCount函數檢索圖像清單中的圖像數。
語法



-------------------------------------------------------- KeyGTK3Win32ImageList_GetImageInfo ----
ImageList_GetImageInfo    ImageList_GetImageInfo函數檢索有關圖像的資訊。
語法
參數
【HIML】處理圖像清單。【i】圖像索引【pImageInfo】指向IMAGEINFO結構的指標，可以接收有關圖像的資訊。該結構中的資訊可用於直接操作圖像的點陣圖。
返回值
如果函數成功，


-------------------------------------------------------- KeyGTK3Win32ImageList_LoadBitmap ----
ImageList_LoadBitmap    ImageList_LoadBitmap函數從指定的點陣圖資源創建一個圖像清單。ImageList_LoadBitmap是一個調用ImageList_LoadImage函數的巨集。
語法
參數
【hi】處理包含點陣圖資源的實例。【lpbmp】資源名稱【cx】每張圖片的寬度。每個圖像的高度和圖像的初始數量都由指定點陣圖的尺寸推斷。【cGrow】當系統需要調整清單大小以為新圖像騰出空間時，


-------------------------------------------------------- KeyGTK3Win32ImageList_LoadImage ----
ImageList_LoadImage    ImageList_LoadImage函數從指定的點陣圖，游標或圖示資源創建一個圖像清單。
語法
參數
【hi】處理包含資源的實例。如果【hi】參數為零，則此參數的低位字必須是要載入的OEM映射的識別字。OEM圖像識別字在WINUSER.H中定義。以下是識別字首碼及其含義：字首含義OBM_OE


-------------------------------------------------------- KeyGTK3Win32ImageList_Merge ----
ImageList_Merge    ImageList_Merge函數通過組合兩個現有圖像創建新圖像。該函數還創建一個新的圖像清單來存儲圖像。
語法



-------------------------------------------------------- KeyGTK3Win32ImageList_Read ----
ImageList_Read    ImageList_Read函數從流中讀取圖像清單。
語法



-------------------------------------------------------- KeyGTK3Win32ImageList_Remove ----
ImageList_Remove    ImageList_Remove函數從圖像清單中刪除圖像。
語法



-------------------------------------------------------- KeyGTK3Win32ImageList_Replace ----
ImageList_Replace    ImageList_Replace函數用圖像替換圖像清單中的圖像。
語法
參數
【HIML】處理圖像清單。【i】要替換的圖像的索引。【hbmImagexh】處理包含圖像的點陣圖。【hbmMask】處理包含遮罩的點陣圖。如果圖像清單中沒有使用遮罩，則忽略該參數。
返回值



-------------------------------------------------------- KeyGTK3Win32ImageList_ReplaceIcon ----
ImageList_ReplaceIcon    ImageList_ReplaceIcon函數用圖示或游標替換圖像。
語法
參數
【HIML】處理圖像清單。【i】要替換的圖像的索引。【HICON】處理包含新圖像的點陣圖和遮罩的圖示或游標。
返回值
如果函數成功，則返回值是圖像的索引。如果函數失敗，返回值為-1。
描


-------------------------------------------------------- KeyGTK3Win32ImageList_SetBkColor ----
ImageList_SetBkColor    ImageList_SetBkColor函數設置圖像清單的背景顏色。
語法



-------------------------------------------------------- KeyGTK3Win32ImageList_SetDragCursorImage ----
ImageList_SetDragCursorImage    ImageList_SetDragCursorImage函數通過將指定的圖像（通常是滑鼠游標圖像）與當前拖動圖像組合來創建新的拖動圖像。
語法



-------------------------------------------------------- KeyGTK3Win32ImageList_SetIconSize ----
ImageList_SetIconSize    ImageList_SetIconSize函數設置圖像清單中圖像的尺寸，並從清單中刪除所有圖像。
語法



-------------------------------------------------------- KeyGTK3Win32ImageList_SetOverlayImage ----
ImageList_SetOverlayImage    ImageList_SetOverlayImage函數將圖像的索引添加到要用作疊加遮罩的圖像清單中。清單中最多可添加四個索引。
語法
參數
【HIML】處理圖像清單。【圖像】圖像用作覆蓋蒙版。【iOverlay】疊加遮罩的一個索引。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
覆蓋蒙版是在另一個


-------------------------------------------------------- KeyGTK3Win32ImageList_Write ----
ImageList_Write    ImageList_Write函數將圖像清單寫入流。
語法



-------------------------------------------------------- KeyGTK3Win32ImmAssociateContext ----
ImmAssociateContext    [Now Supported on Windows NT]ImmAssociateContext函數將指定的輸入上下文與指定的視窗相關聯。如果【hIMC】為NULL，該函數將刪除視窗可能與輸入上下文的任何關聯。預設情況下，系統會將預設輸入上下文與創建的每個視窗相關聯。
語法



-------------------------------------------------------- KeyGTK3Win32ImmConfigureIME ----
ImmConfigureIME    [Now Supported on Windows NT]ImmConfigureIME函數顯示IME的配置對話方塊。
語法



-------------------------------------------------------- KeyGTK3Win32ImmCreateContext ----
ImmCreateContext    [Now Supported on Windows NT]ImmCreateContext函數創建一個新的輸入上下文，為上下文分配記憶體並進行初始化。應用程式調用此函數來準備其自己的輸入上下文。HIMC ImmCreateContext(void);
返回值
如果函數成功，則返回值是新輸入上下文的控制碼。如果函數失敗，返回值為NULL。


-------------------------------------------------------- KeyGTK3Win32ImmDestroyContext ----
ImmDestroyContext    [Now Supported on Windows NT]ImmDestroyContext函數釋放輸入上下文，並釋放與之相關聯的任何記憶體。
語法
參數
【hIMC】處理輸入上下文以釋放。
返回值
如果函數成功，則返回值為非零值。如果函數失敗，返回值為零。
描述
使用ImmCreateContext函數創建輸入上下文的任何應用程式都必


-------------------------------------------------------- KeyGTK3Win32ImmEnumRegisterWord ----
ImmEnumRegisterWord    [Now Supported on Windows NT]ImmEnumRegisterWord函數枚舉具有指定讀取字串，樣式和寄存器字串的寄存器字串。
語法
參數
【hKL】處理鍵盤配置。【lpfnEnumProc】指向回呼函數。有關更多資訊，請參閱EnumRegisterWordProc.【lpszReading】指向要列舉的閱讀字串。如果為NUL


-------------------------------------------------------- KeyGTK3Win32ImmEscape ----
ImmEscape    [Now Supported on Windows NT]ImmEscape函數執行IME特定的子函數，主要用於國家/地區的函數。
語法



-------------------------------------------------------- KeyGTK3Win32ImmGetCandidateList ----
ImmGetCandidateList    [Now Supported on Windows NT]ImmGetCandidateList函數檢索指定的候選清單，將列表複製到指定的緩衝區。
語法
參數
【hIMC】處理輸入上下文。【deIndex】基於零的候選人名單索引。【lpCandList】指向接收候選清單的CANDIDATELIST結構的指標。【dwBufLen】緩衝區的大小，以位元組


-------------------------------------------------------- KeyGTK3Win32ImmGetCandidateListCount ----
ImmGetCandidateListCount    [Now Supported on Windows NT]ImmGetCandidateListCount函數檢索候選清單的大小（以位元組為單位）。
語法
參數
【hIMC】處理輸入上下文。【lpdwListCount】指向接收候選清單大小的32位元變數的指標。
返回值
返回接收所有候選清單所需的位元組數。
描述
回應於IMN_OPENCANDI


-------------------------------------------------------- KeyGTK3Win32ImmGetCandidateWindow ----
ImmGetCandidateWindow    [Now Supported on Windows NT]ImmGetCandidateWindow函數獲取有關候選清單視窗的資訊。
語法
參數
【hIMC】處理輸入上下文。【dwBufLen】接收資訊的緩衝區的大小（以位元組為單位）。【lpCandidate】指向CANDIDATEFORM結構的指標，可以接收有關候選視窗的資訊。
返


-------------------------------------------------------- KeyGTK3Win32ImmGetCompositionFont ----
ImmGetCompositionFont    [Now Supported on Windows NT]ImmGetCompositionFont函數檢索有關當前用於在合成視窗中顯示字元的邏輯字體的資訊。
語法
參數
【hIMC】處理輸入上下文。【lplf】指向接收字體資訊的LOGFONT結構的指標。
返回值
如果函數成功，則返回值為非零值。如果函數失敗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32ImmGetCompositionString ----
ImmGetCompositionString    [Now Supported on Windows NT]ImmGetCompositionString函數檢索有關組合字串的資訊。
語法
參數
【hIMC】處理輸入上下文。【dwIndex】要檢索的資訊的索引。該參數可以是輸入法編輯器常量中“IME Composition String Values”表中給出的值之一。對於除GCS_


-------------------------------------------------------- KeyGTK3Win32ImmGetCompositionWindow ----
ImmGetCompositionWindow    [Now Supported on Windows NT]ImmGetCompositionWindow函數獲取有關組合視窗的資訊。
語法
參數
【hIMC】處理輸入上下文。【lpCompForm】指向COMPOSITIONFORM結構的指標，該結構接收有關組合視窗的資訊。
返回值
如果函數成功，則返回值為非零值。如果函數失敗，返


-------------------------------------------------------- KeyGTK3Win32ImmGetContext ----
ImmGetContext    [Now Supported on Windows NT]ImmGetContext函數檢索與指定視窗相關聯的輸入上下文。
語法



-------------------------------------------------------- KeyGTK3Win32ImmGetConversionList ----
ImmGetConversionList    [Now Supported on Windows NT]ImmGetConversionList函數從一個字元或單詞中檢索字元或單詞的清單。
語法
參數
【hKL】處理鍵盤配置。【hIMC】處理輸入上下文。【lpSrc】指向空終止字串的指標。【Pointer to a null-terminated character string.】指向


-------------------------------------------------------- KeyGTK3Win32ImmGetConversionStatus ----
ImmGetConversionStatus    [Now Supported on Windows NT]ImmGetConversionStatus函數獲取當前的轉換狀態。
語法



-------------------------------------------------------- KeyGTK3Win32ImmGetDefaultIMEWnd ----
ImmGetDefaultIMEWnd    [Now Supported on Windows NT]ImmGetDefaultIMEWnd函數獲取IME類的預設窗口控制碼。
語法
參數
【的hWnd】處理視窗的應用程式。
返回值
如果函數成功，則返回值是IME類的預設窗口控制碼。如果函數失敗，返回值為NULL。
描述
系統為每個執行緒創建一個預設的IME視窗。IME窗口


-------------------------------------------------------- KeyGTK3Win32ImmGetDescription ----
ImmGetDescription    [Now Supported on Windows NT]ImmGetDescription函數將IME的描述複製到指定的緩衝區。
語法



-------------------------------------------------------- KeyGTK3Win32ImmGetGuideLine ----
ImmGetGuideLine    [Now Supported on Windows NT]ImmGetGuideLine函數獲取有關錯誤的資訊。應用程式使用該資訊通知使用者。
語法



-------------------------------------------------------- KeyGTK3Win32ImmGetIMEFileName ----
ImmGetIMEFileName    [Now Supported on Windows NT]ImmGetIMEFileName函數獲取與指定鍵盤配置相關聯的IME的檔案名。
語法



-------------------------------------------------------- KeyGTK3Win32ImmGetOpenStatus ----
ImmGetOpenStatus    [Now Supported on Windows NT]ImmGetOpenStatus函數檢查IME是打開還是關閉。
語法



-------------------------------------------------------- KeyGTK3Win32ImmGetProperty ----
ImmGetProperty    [Now Supported on Windows NT]ImmGetProperty函數獲取與指定鍵盤配置相關聯的IME的屬性和函數。
語法



-------------------------------------------------------- KeyGTK3Win32ImmGetRegisterWordStyle ----
ImmGetRegisterWordStyle    [Now Supported on Windows NT]ImmGetRegisterWordStyle函數獲取與指定鍵盤配置相關聯的IME支援的樣式清單。
語法
參數
【hKL】處理鍵盤配置。【有限la】緩衝區可容納的最大樣式數。【lpStyleBuf】指向接收樣式資訊的STYLEBUF結構的指標。
返回值
返回值是複製到緩衝區的佈局控制碼的數量，或者如


-------------------------------------------------------- KeyGTK3Win32ImmGetStatusWindowPos ----
ImmGetStatusWindowPos    [Now Supported on Windows NT]ImmGetStatusWindowPos函數獲取狀態視窗的位置。
語法
參數
【hIMC】處理輸入上下文。【同步讀取操作期間的檔結束測試很簡單，如下例所示：】指向接收位置座標的POINT結構的指標。這些是相對于螢幕左上角的螢幕座標。
返回值
如果函數成功，則返回


-------------------------------------------------------- KeyGTK3Win32ImmGetVirtualKey ----
ImmGetVirtualKey    [Now Supported on Windows NT]ImmGetVirtualKey函數恢復與已經由IME處理的金鑰輸入消息相關聯的原始虛擬鍵值。
語法



-------------------------------------------------------- KeyGTK3Win32ImmInstallIME ----
ImmInstallIME    [Now Supported on Windows NT]ImmInstallIME函數將IME安裝到系統中。
語法



-------------------------------------------------------- KeyGTK3Win32ImmIsIME ----
ImmIsIME    [Now Supported on Windows NT]ImmIsIME函數檢查指定的控制碼是否識別IME。
語法



-------------------------------------------------------- KeyGTK3Win32ImmIsUIMessage ----
ImmIsUIMessage    [Now Supported on Windows NT]ImmIsUIMessage函數檢查用於IME視窗的消息，並將這些消息發送到指定的視窗。
語法



-------------------------------------------------------- KeyGTK3Win32ImmNotifyIME ----
ImmNotifyIME    [Now Supported on Windows NT]ImmNotifyIME函數通知IME有關輸入上下文狀態的更改。
語法



-------------------------------------------------------- KeyGTK3Win32ImmRegisterWord ----
ImmRegisterWord    [Now Supported on Windows NT]ImmRegisterWord函數將字串註冊到與指定鍵盤配置相關聯的IME的字典中。
語法



-------------------------------------------------------- KeyGTK3Win32ImmReleaseContext ----
ImmReleaseContext    [Now Supported on Windows NT]ImmReleaseContext函數釋放輸入上下文並解鎖上下文中相關的記憶體。對於ImmGetContext函數的每次調用，應用程式都必須調用此函數。
語法
參數
【的hWnd】處理到之前檢索到輸入上下文的視窗。【hIMC】處理輸入上下文。
返回值
如果函數成功，則返回值為非零值。如果函數失敗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32ImmSetCandidateWindow ----
ImmSetCandidateWindow    [Now Supported on Windows NT]ImmSetCandidateWindow函數設置有關候選清單視窗的資訊。
語法
參數
【hIMC】處理輸入上下文。【lpCandidate】指向CANDIDATEFORM結構的指標，其中包含有關候選視窗的資訊。
返回值
如果函數成功，則返回值為非零值。如果函數失敗，返回值


-------------------------------------------------------- KeyGTK3Win32ImmSetCompositionFont ----
ImmSetCompositionFont    [Now Supported on Windows NT]ImmSetCompositionFont函數設置用於在合成視窗中顯示字元的邏輯字體。
語法
參數
【hIMC】處理輸入上下文。【lplf】指向包含要設置的字體資訊的LOGFONT結構。
返回值
如果函數成功，則返回值為非零值。如果函數失敗，返回值為零。
描述
即使應用程式從不使用


-------------------------------------------------------- KeyGTK3Win32ImmSetCompositionString ----
ImmSetCompositionString    [Now Supported on Windows NT]ImmSetCompositionString函數設置組合和讀取字串的字元，屬性和子句。
語法
參數
【hIMC】處理輸入上下文。【dwIndex】要設置的資訊類型。此參數可以是以下值之一：值含義SCS_SETSTR設置組合字串，讀取字串或兩者。【lpComp】和【lpReadga】參數


-------------------------------------------------------- KeyGTK3Win32ImmSetCompositionWindow ----
ImmSetCompositionWindow    [Now Supported on Windows NT]ImmSetCompositionWindow函數設置組合視窗的位置。
語法
參數
【hIMC】處理輸入上下文。【lpCompForm】指向包含新位置的COMPOSITIONFORM結構以及有關組合視窗的其他相關資訊。
返回值
如果函數成功，則返回值為非零值。如果函數失


-------------------------------------------------------- KeyGTK3Win32ImmSetConversionStatus ----
ImmSetConversionStatus    [Now Supported on Windows NT]ImmSetConversionStatus函數設置當前的轉換狀態。
語法



-------------------------------------------------------- KeyGTK3Win32ImmSetOpenStatus ----
ImmSetOpenStatus    [Now Supported on Windows NT]ImmSetOpenStatus函數打開或關閉IME。
語法
參數
【hIMC】處理輸入上下文。【FOPEN】Open flag. If TRUE, the IME is opened; otherwise, it is closed.
返回值
如果函數


-------------------------------------------------------- KeyGTK3Win32ImmSetStatusWindowPos ----
ImmSetStatusWindowPos    [Now Supported on Windows NT]ImmSetStatusWindowPos函數設置狀態視窗的位置。
語法
參數
【hIMC】處理輸入上下文。【同步讀取操作期間的檔結束測試很簡單，如下例所示：】指向POINT結構的指標，可以接收狀態視窗的新位置。
返回值
如果函數成功，則返回值為非零值。如果函數失


-------------------------------------------------------- KeyGTK3Win32ImmSimulateHotKey ----
ImmSimulateHotKey    [Now Supported on Windows NT]ImmSimulateHotKey函數類比指定的IME熱鍵，導致與使用者在指定視窗中按下熱鍵相同的回應。
語法



-------------------------------------------------------- KeyGTK3Win32ImmUnregisterWord ----
ImmUnregisterWord    [Now Supported on Windows NT]ImmUnregisterWord函數從與指定鍵盤配置相關聯的IME的字典中刪除註冊字串。
語法



-------------------------------------------------------- KeyGTK3Win32ImpersonateDdeClientWindow ----
ImpersonateDdeClientWindow    ImpersonateDdeClientWindow函數使DDE伺服器應用程式能夠類比DDE用戶端應用程式的安全上下文，以保護安全的伺服器資料免遭未經授權的DDE用戶端。
語法
參數
【hWndClient】標識要類比的DDE用戶端窗口。用戶端視窗必須與由【hWndServer】參數標識的伺服器視窗建立DDE會話。【hWndServer】標識DDE伺服器視窗。在調用此函數


-------------------------------------------------------- KeyGTK3Win32ImpersonateLoggedOnUser ----
ImpersonateLoggedOnUser    ImpersonateLoggedOnUser函數允許調用執行緒模仿一個用戶。用戶由權杖控制碼表示。
語法
參數
【hToken】處理代表登錄用戶的主要或模擬訪問權杖。這可以是通過調用LogonUser，DuplicateToken，DuplicateTokenEx，OpenProcessToken或O


-------------------------------------------------------- KeyGTK3Win32ImpersonateNamedPipeClient ----
ImpersonateNamedPipeClient    ImpersonateNamedPipeClient函數類比具名管道用戶端應用程式。
語法
參數
【hNamedPipe】標識一個具名管道。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError函數。
描述
Impers


-------------------------------------------------------- KeyGTK3Win32ImpersonateSelf ----
ImpersonateSelf    ImpersonateSelf函數獲取類比調用進程的安全上下文的訪問權杖。權杖被分配給調用執行緒。
語法
參數
【ImpersonationLevel】指定一個SECURITY_IMPERSONATION_LEVEL枚舉類型，提供新權杖的模擬級別。
返回值
如果函數成功，返回值不為零。如果函數失敗


-------------------------------------------------------- KeyGTK3Win32InflateRect ----
InflateRect    InflateRect函數可以增加或減小指定矩形的寬度和高度。InflateRect函數將【dy】單位添加到矩形的左側和右側，並將【dy】單位添加到頂部和底部。【dx】和【dy】參數是有符號值;正值增加寬度和高度，負值減小。
語法
參數
【LPRC】指向尺寸增加或減小的RECT結構。【dx】指定增加或減少矩形寬度的數量。該參數必須為負值才能減小寬度。【dy】指定增加或減少矩形高度的數量。該參數必須為負值才能降低高度。
返回


-------------------------------------------------------- KeyGTK3Win32InitAtomTable ----
InitAtomTable    InitAtomTable函數初始化本地原子表並將其設置為指定的大小。
語法
參數
【服務提供者】指定原子表的表條目中的大小。該值應該是素數。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
應用程式不需要使用此函數來使用本地atom表。本地和


-------------------------------------------------------- KeyGTK3Win32InitCommonControls ----
InitCommonControls    InitCommonControls函數可確保載入公共控制動態連結程式庫（DLL）。void InitCommonControls(VOID);
返回值
此函數不返回值。


-------------------------------------------------------- KeyGTK3Win32InitializeAcl ----
InitializeAcl    InitializeAcl函數創建一個新的ACL結構。ACL是存取控制清單。
語法
參數
【ACL】指向由此函數初始化的ACL結構。【nAclLength】指定【ACL】參數指向的緩衝區的長度（以位元組為單位）。該值必須足夠大以包含ACL頭和所有存取控制條目（ACE）存儲在ACL中


-------------------------------------------------------- KeyGTK3Win32InitializeCriticalSection ----
InitializeCriticalSection    InitializeCriticalSection函數初始化一個關鍵部分物件。
語法
參數
【lpCriticalSection】指向臨界區對象。
返回值
此函數不返回值。
描述
單個進程的執行緒可以使用關鍵部分物件進行互斥同步。該過程負責分配關鍵部分物件使用的記憶體，該物件可


-------------------------------------------------------- KeyGTK3Win32InitializeSecurityDescriptor ----
InitializeSecurityDescriptor    InitializeSecurityDescriptor函數初始化一個新的安全性描述元。
語法
參數
【pSecurityDescriptor】指向函數初始化的SECURITY_DESCRIPTOR結構。【dwRevision】指定要分配給安全性描述元的修訂級別。這必須是SECURITY_DE


-------------------------------------------------------- KeyGTK3Win32InitializeSid ----
InitializeSid    InitializeSid函數初始化SID結構。SID是安全性識別碼。
語法
參數
【希德】指向要初始化的SID結構。【pIdentifierAuthority】指向要設置SID結構的SID_IDENTIFIER_AUTHORITY結構。【nSubAuthorityCoun


-------------------------------------------------------- KeyGTK3Win32InitiateSystemShutdown ----
InitiateSystemShutdown    InitiateSystemShutdown函數啟動指定電腦的關機和可選重新啟動。
語法
參數
【lpMachineName】指向以空值終止的字串，指定要關閉的電腦的網路名稱。如果【lpMachineName】為NULL或指向空字串，該函數將關閉本地電腦。【// address


-------------------------------------------------------- KeyGTK3Win32InSendMessage ----
InSendMessage    InSendMessage函數指定當前視窗過程是否正在處理通過調用SendMessage函數從另一個執行緒發送的消息。
語法
參數
此函數無參數。
返回值
如果視窗過程使用SendMessage函數處理從另一個執行緒發送的消息，則返回值不為零。如果視窗過程沒有使用SendMessage函數處理從另一個執行緒發送的消息，返


-------------------------------------------------------- KeyGTK3Win32InsertMenu ----
InsertMenu    InsertMenu函數將一個新的功能表項目插入功能表，將其他專案向下移動到菜單中。InsertMenuItem函數已被InsertMenuItem函數取代。但是，如果您不需要InsertMenuItem的任何擴展函數，您仍然可以使用InsertMenu.
語法
參數
【HMENU】標識要更改的功能表。【uPositionbs】指定由【uFlags】參數確定的要插入新功能表項目的功能表項目。【uFlags】指定控制【uPositionbs】參數的解釋以及新功能表項目的內


-------------------------------------------------------- KeyGTK3Win32InsertMenuItem ----
InsertMenuItem    [Now Supported on Windows NT]InsertMenuItem函數在功能表中的指定位置插入一個新的功能表項目。
語法
參數
【HMENU】處理插入新功能表項目的功能表。【藤】在插入新專案之前的功能表項目的識別字或位置。該參數的含義取決於【fByPosition】的值。【fByPosition】指定【藤】的含義的值。如果此參


-------------------------------------------------------- KeyGTK3Win32Int32x32To64 ----
Int32x32To64    Int32x32To64函數將兩個帶符號的32位元整數相乘，返回帶符號的64位元整數結果。該函數在所有Win32平臺上執行最佳。
語法
參數
【乘數】指定乘法的第一個帶符號的32位元整數。【被乘數】指定乘法的第二個帶符號的32位元整數。
返回值
返回值是乘法的帶符號64位元整數結果。
描述
該函數通過最佳內聯代碼在所有平臺上實現


-------------------------------------------------------- KeyGTK3Win32Int64ShllMod32 ----
Int64ShllMod32    Int64ShllMod32函數對無符號64位元整數值執行左邏輯移位元操作。該函數提供了用於左邏輯移位元的改進的移位代碼，其中移位元數目在0-31範圍內。
語法
參數
【值】指定要移位元的無符號64位元整數。【ShiftCount】指定移位元數目範圍0  -  31。
返回值
返回值是左邏輯移位元操作的無符號64位元整數結果。
描述
移位元數目是值的位移動的位


-------------------------------------------------------- KeyGTK3Win32Int64ShraMod32 ----
Int64ShraMod32    Int64ShraMod32函數對有符號的64位元整數值執行正確的算術移位操作。該函數提供了改進的移位代碼，用於右移算，其中移位元數目範圍為0  -  31。
語法
參數
【值】指定要移位元的帶符號的64位元整數。【ShiftCount】指定移位元數目範圍0  -  31。
返回值
返回值是右側算術移位元操作的帶符號64位元整數結果。
描述
移位元數目是值的位移動


-------------------------------------------------------- KeyGTK3Win32Int64ShrlMod32 ----
Int64ShrlMod32    Int64ShrlMod32函數對無符號64位元整數值執行正確的邏輯移位元操作。該函數為移位元數目範圍為0  -  31的正確邏輯移位元提供了改進的移位代碼。
語法
參數
【值】指定要移位元的無符號64位元整數。【ShiftCount】指定移位元數目範圍0  -  31。
返回值
返回值是正確的邏輯移位元操作的無符號64位元整數結果。
描述
移位元數目是值的位移動


-------------------------------------------------------- KeyGTK3Win32InterlockedCompareExchange ----
InterlockedCompareExchange    [New - Windows NT]InterlockedCompareExchange函數將根據比較結果對【目的地】和【Comperand】參數中指定的值進行原子比較，並交換值。該函數可防止多個執行緒同時使用相同的變數。
語法
參數
【目的地】指定目標值的位址。這是一個32位值。標誌被忽略。【交換】指定交換值。這是一個32位值。標誌被忽略。【Comperand】指定與【目的地】進行比較的值。這是一個32位值。標誌被忽略。


-------------------------------------------------------- KeyGTK3Win32InterlockedDecrement ----
InterlockedDecrement    InterlockedDecrement函數同時減少（減少1）指定的32位元變數的值，並檢查結果值。該函數可防止多個執行緒同時使用相同的變數。
語法
參數
【// address of the variable to increment】指向32位元變數遞減。
返回值
如果減量的結果為零，返回值為零。如果減量的結果小於零，則返回值小於零。如果


-------------------------------------------------------- KeyGTK3Win32InterlockedExchange ----
InterlockedExchange    InterlockedExchange函數以原子方式交換一對32位元值。該函數可防止多個執行緒同時使用相同的變數。
語法
參數
【目標】LONG的交易位址。該函數將此LONG值設置為【值】，並返回其先前的值。【值】指定【目標】指向的LONG值的新值。
返回值
該函數返回【目標】指向的LONG值的先前值。
描述



-------------------------------------------------------- KeyGTK3Win32InterlockedExchangeAdd ----
InterlockedExchangeAdd    [New - Windows NT]InterlockExchangeAdd函數對加數變數執行增量值的原子加法。該函數可防止多個執行緒同時使用相同的變數。AddendPLONG 【加數】,//指向加數的指標LONG 【增量】//增加值);
參數
【加數】指定添加了【增量】號碼的號碼的位址。【增量】指定要添加到【加數】參數指向的變數的數位。
返回值
返回值是【加數】參數的初始值。
描述
函數InterlockedExchang


-------------------------------------------------------- KeyGTK3Win32InterlockedIncrement ----
InterlockedIncrement    InterlockedIncrement函數同時增加（增加1）指定的32位元變數的值，並檢查結果值。該函數可防止多個執行緒同時使用相同的變數。
語法
參數
【// address of the variable to increment】指向32位元變數增量。
返回值
如果增量的結果為零，返回值為零。如果增量的結果小於零，則返回值小於零。如果


-------------------------------------------------------- KeyGTK3Win32IntersectClipRect ----
IntersectClipRect    IntersectClipRect函數從當前裁剪區域和指定矩形的交點創建一個新的裁剪區域。
語法
參數
【HDC】標識設備上下文。【nLeftRect】指定矩形左上角的邏輯x座標。【nTopRect】指定矩形左上角的邏輯y座標。【nRightRect】指定矩形右下角的邏輯x座標。【nBotto


-------------------------------------------------------- KeyGTK3Win32IntersectRect ----
IntersectRect    IntersectRect函數計算兩個源矩形的交集，並將交點矩形的座標放置到目標矩形中。如果源矩形不相交，則將空矩形（其中所有座標設置為零）放入目標矩形。
語法
參數
【lprcDst】指向RECT結構的接收【lprcSrc1】和【lprcSrc2】參數指向的矩形的交點。【lprcSrc1】指向包含第一個源矩形的RECT結構。【lprcSrc2】指向包含第


-------------------------------------------------------- KeyGTK3Win32InvalidateRect ----
InvalidateRect    InvalidateRect函數向指定的視窗的更新區域添加一個矩形。更新區域表示必須重新繪製的視窗的用戶端區域的部分。
語法
參數
【的hWnd】標識更新區域已更改的視窗。如果此參數為NULL，則Windows會使所有視窗無效並重新繪製，並在函數返回之前將WM_ERASEBKGND和WM_NCPAINT消息發送到視窗過程


-------------------------------------------------------- KeyGTK3Win32InvalidateRgn ----
InvalidateRgn    InvalidateRgn函數將指定區域中的用戶端區域添加到視窗的當前更新區域，使其無效。無效區域以及更新區域中的所有其他區域在下一個WM_PAINT消息發生時被標記為繪畫。
語法
參數
【的hWnd】標識具有要修改的更新區域的視窗。【HRGN】標識要添加到更新區域的區域。假設該區域具有用戶端座標。如果此參數為NULL，則將整個用戶端區域添加到更新區域。【// erase-b


-------------------------------------------------------- KeyGTK3Win32InvertRect ----
InvertRect    InvertRect函數通過對矩形內部的每個圖元的顏色值執行邏輯NOT操作來反轉視窗中的矩形。
語法
參數
【hDC】標識設備上下文。【LPRC】指向包含要反轉的矩形的邏輯座標的RECT結構。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLas


-------------------------------------------------------- KeyGTK3Win32InvertRgn ----
InvertRgn    InvertRgn函數可以反轉指定區域的顏色。
語法
參數
【HDC】標識設備上下文。【HRGN】標識顏色反轉的區域。該區域的座標被推定為邏輯座標。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
在單色螢幕上，Inve


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_CHECK_VERIFY ----
IOCTL_DISK_CHECK_VERIFYIOCTL_DISK_CHECK_VERIFY函數已被IOCTL_STORAGE_CHECK_VERIFY函數取代。


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_EJECT_MEDIA ----
IOCTL_DISK_EJECT_MEDIAIOCTL_DISK_EJECT_MEDIA函數已被IOCTL_STORAGE_EJECT_MEDIA函數取代。


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_FORMAT_TRACKS ----
IOCTL_DISK_FORMAT_TRACKS    IOCTL_DISK_FORMAT_TRACKS DeviceIoControl操作格式化磁片上指定的，連續的磁軌集。dwIoControlCode = IOCTL_DISK_FORMAT_TRACKS;   //操作代碼lpInBuffer;         //輸入緩衝區的位址nInBufferSize;      //輸入緩衝區的大小lpOutBuffer = NULL; //輸出緩衝區的位址不曾用過;必須為NULLnOutBufferSize = 0; //輸出緩衝區的大小不曾用過;必須為零lpBytesReturned;    //輸出的實際位元組的位址
參數
【lpInBuffer】指向包含FORMAT_PARAMETERS資料結構的緩衝區。【nInBufferSize】指定由【lpInBuffer】指向的緩衝區的大小（以位元組為單位），該大小必須


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_GET_DRIVE_GEOMETRY ----
IOCTL_DISK_GET_DRIVE_GEOMETRY    IOCTL_DISK_GET_DRIVE_GEOMETRY DeviceIoControl操作返回有關物理磁片幾何的資訊：類型，柱面數，每個磁軌的磁軌，每個磁軌的磁區以及每個磁區的位元組數。dwIoControlCode = IOCTL_DISK_GET_DRIVE_GEOMETRY;   //操作代碼lpInBuffer = NULL;  //輸入緩衝區的位址不曾用過;必須為NULLnInBufferSize = 0;  //輸入緩衝區的大小不曾用過;必須為零lpOutBuffer ;       //輸出緩衝區的位址nOutBufferSize ;    //輸出緩衝區的大小lpBytesReturned ;   //輸出的實際位元組的位址
參數
【lpInBuffer】指向輸入緩衝區。不用於此操作。設置為NULL。【nInBufferSize】指定【lpInBuffer】指向的緩衝區的大小（以位元組為單位）。不用於此操作。設置為零。【


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_GET_DRIVE_LAYOUT ----
IOCTL_DISK_GET_DRIVE_LAYOUT    IOCTL_DISK_GET_DRIVE_LAYOUT DeviceIoControl操作返回有關磁片上分區數和每個分區的函數的資訊。dwIoControlCode = IOCTL_DISK_GET_DRIVE_LAYOUT;   //操作代碼lpInBuffer = NULL;  //輸入緩衝區的位址不曾用過;必須為NULLnInBufferSize = 0;  //輸入緩衝區的大小不曾用過;必須為零lpOutBuffer ;       //輸出緩衝區的位址nOutBufferSize ;    //輸出緩衝區的大小lpBytesReturned ;   //輸出的實際位元組的位址
參數
【lpInBuffer】指向輸入緩衝區。不用於此操作。設置為NULL。【nInBufferSize】指定【lpInBuffer】指向的緩衝區的大小（以位元組為單位）。不用於此操作。設置為零。【


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_GET_MEDIA_TYPES ----
IOCTL_DISK_GET_MEDIA_TYPESIOCTL_DISK_GET_MEDIA_TYPES函數已被IOCTL_STORAGE_GET_MEDIA_TYPES函數取代。


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_GET_PARTITION_INFO ----
IOCTL_DISK_GET_PARTITION_INFO    IOCTL_DISK_GET_PARTITION_INFO DeviceIoControl操作返回有關磁碟分割的類型，大小和性質的資訊。dwIoControlCode = IOCTL_DISK_GET_PARTITION_INFO ;   //操作代碼lpInBuffer = NULL;  //輸入緩衝區的位址不曾用過;必須為NULLnInBufferSize = 0;  //輸入緩衝區的大小不曾用過;必須為零lpOutBuffer;        //輸出緩衝區的位址nOutBufferSize;     //輸出緩衝區的大小lpBytesReturned;    //輸出的實際位元組的位址
參數
【lpInBuffer】指向輸入緩衝區。不用於此操作。設置為NULL。【nInBufferSize】指定【lpInBuffer】指向的緩衝區的大小（以位元組為單位）。不用於此操作。設置為零。【


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_LOAD_MEDIA ----
IOCTL_DISK_LOAD_MEDIAIOCTL_DISK_LOAD_MEDIA函數已被IOCTL_STORAGE_LOAD_MEDIA函數取代。


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_MEDIA_REMOVAL ----
IOCTL_DISK_MEDIA_REMOVALIOCTL_DISK_MEDIA_REMOVAL函數已被IOCTL_STORAGE_MEDIA_REMOVAL函數取代。


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_PERFORMANCE ----
IOCTL_DISK_PERFORMANCE    IOCTL_DISK_PERFORMANCE DeviceIoControl操作提供磁片性能資訊。dwIoControlCode = IOCTL_DISK_PERFORMANCE;   //操作代碼lpInBuffer = NULL; //輸入緩衝區的位址不曾用過;必須為NULLnInBufferSize = 0; //輸入緩衝區的大小不曾用過;必須為零lpOutBuffer;       //輸出緩衝區的位址nOutBufferSize;    //輸出緩衝區的大小lpBytesReturned;   //輸出的實際位元組的位址
參數
【lpInBuffer】指向輸入緩衝區。不用於此操作。設置為NULL。【nInBufferSize】指定【lpInBuffer】指向的緩衝區的大小（以位元組為單位）。不用於此操作。設置為零。【


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_REASSIGN_BLOCKS ----
IOCTL_DISK_REASSIGN_BLOCKS    IOCTL_DISK_REASSIGN_BLOCKS DeviceIoControl操作指示磁片設備將一個或多個塊映射到其備用塊池。dwIoControlCode = IOCTL_DISK_REASSIGN_BLOCKS;   //操作代碼lpInBuffer;          //輸入緩衝區的位址nInBufferSize;       //輸入緩衝區的大小lpOutBuffer = NULL;  //輸出緩衝區的位址不曾用過;必須為NULLnOutBufferSize = 0;  //輸出緩衝區的大小不曾用過;必須為零lpBytesReturned;     //輸出的實際位元組的位址
參數
【lpInBuffer】指向包含REASSIGN_BLOCKS資料結構的緩衝區，指定要重新分配給其備用塊池的塊。【nInBufferSize】指定由【lpInBuffer】指向的緩衝區的大小


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_SET_DRIVE_LAYOUT ----
IOCTL_DISK_SET_DRIVE_LAYOUT    IOCTL_DISK_SET_DRIVE_LAYOUT DeviceIoControl操作按驅動器佈局和分區資訊資料指定分區磁片。dwIoControlCode = IOCTL_DISK_SET_DRIVE_LAYOUT;   //操作代碼lpInBuffer;          //輸入緩衝區的位址nInBufferSize;       //輸入緩衝區的大小lpOutBuffer = NULL;  //輸出緩衝區的位址不曾用過;必須為NULLnOutBufferSize = 0;  //輸出緩衝區的大小不曾用過;必須為零lpBytesReturned;     //輸出的實際位元組的位址
參數
【lpInBuffer】指向包含驅動器佈局和分區資訊資料的緩衝區。資料以DRIVE_LAYOUT_INFORMATION資料結構和一系列PARTITION_INFORMATION資料結構的形


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_SET_PARTITION_INFO ----
IOCTL_DISK_SET_PARTITION_INFO    IOCTL_DISK_SET_PARTITION_INFO DeviceIoControl操作設置指定磁碟分割的分區類型。dwIoControlCode = IOCTL_DISK_SET_PARTITION_INFO;   //操作代碼lpInBuffer;          //輸入緩衝區的位址nInBufferSize;       //輸入緩衝區的大小lpOutBuffer = NULL;  //輸出緩衝區的位址不曾用過;必須為NULLnOutBufferSize = 0;  //輸出緩衝區的大小不曾用過;必須為零lpBytesReturned;     //輸出的實際位元組的位址
參數
【lpInBuffer】指向包含要設置的分區數據的緩衝區。資料以SET_PARTITION_INFORMATION資料結構存在。【nInBufferSize】指定由【lpInBuffer】指


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_VERIFY ----
IOCTL_DISK_VERIFY    IOCTL_DISK_VERIFY DeviceIoControl操作在磁片上執行指定盤區的邏輯格式。dwIoControlCode = IOCTL_DISK_VERIFY;   //操作代碼lpInBuffer;          //輸入緩衝區的位址nInBufferSize;       //輸入緩衝區的大小lpOutBuffer = NULL;  //輸出緩衝區的位址不曾用過;必須為NULLnOutBufferSize = 0;  //輸出緩衝區的大小不曾用過;必須為零lpBytesReturned;     //輸出的實際位元組的位址
參數
【lpInBuffer】指向包含VERIFY_INFORMATION資料結構的緩衝區。【nInBufferSize】指定由【lpInBuffer】指向的緩衝區的大小（以位元組為單位），該大小必


-------------------------------------------------------- KeyGTK3Win32IOCTL_SERIAL_LSRMST_INSERT ----
IOCTL_SERIAL_LSRMST_INSERT    IOCTL_SERIAL_LSRMST_INSERT DeviceIoControl操作啟用或禁用將線路狀態和數據機狀態值放置在應用程式通過ReadFile函數獲取的常規資料流程中。當啟用此線路狀態和數據機狀態資料放置模式時，轉義字元將在資料流程中的狀態值前面。使用者可定義的轉義字元由IOCTL_SERIAL_LSRMST_INSERT操作設置。狀態值由1到3 BYTE s組成。有關狀態值詳細資訊，請參閱下面的備註部分。dwIoControlCode = IOCTL_SERIAL_LSRMST_INSERT;     //操作代碼lpInBuffer;         //輸入緩衝區的位址nInBufferSize;      //輸入緩衝區的大小lpOutBuffer = NULL; //輸出緩衝區的位址不曾用過;必須為NULLnOutBufferSize = 0; //輸出緩衝區的大小不曾用過;必須為零lpBytesReturned;    //輸出的實際位元組的位址
參數
【lpInBuffer】指向包含單個BYTE的緩衝區。如果BYTE是非零值，則它是所需的線路狀態和數據機狀態值轉義字元。操作將打開LSRMST_INSERT線路狀態和數據機狀態資料放


-------------------------------------------------------- KeyGTK3Win32IOCTL_STORAGE_CHECK_VERIFY ----
IOCTL_STORAGE_CHECK_VERIFY  IOCTL_STORAGE_CHECK_VERIFY DeviceIoControl操作確定設備的介質是否可訪問;例如，媒體是否在設備中。dwIoControlCode = IOCTL_STORAGE_CHECK_VERIFY ;   //操作代碼lpInBuffer = NULL;  //輸入緩衝區的位址不曾用過;必須為NULLnInBufferSize = 0;  //輸入緩衝區的大小不曾用過;必須為零lpOutBuffer = NULL; //輸出緩衝區的位址不曾用過;必須為NULLnOutBufferSize = 0; //輸出緩衝區的大小不曾用過;必須為零lpBytesReturned;    //輸出的實際位元組的位址
參數
【lpInBuffer】指向輸入緩衝區。不用於此操作。設置為NULL。【nInBufferSize】指定【lpInBuffer】指向的緩衝區的大小（以位元組為單位）。不用於此操作。設置為零。【


-------------------------------------------------------- KeyGTK3Win32IOCTL_STORAGE_EJECT_MEDIA ----
IOCTL_STORAGE_EJECT_MEDIA  IOCTL_STORAGE_EJECT_MEDIA DeviceIoControl操作會導致從SCSI設備彈出介質。dwIoControlCode = IOCTL_STORAGE_EJECT_MEDIA;   //操作代碼lpInBuffer = NULL;  //輸入緩衝區的位址不曾用過;必須為NULLnInBufferSize = 0;  //輸入緩衝區的大小不曾用過;必須為零lpOutBuffer = NULL; //輸出緩衝區的位址不曾用過;必須為NULLnOutBufferSize = 0; //輸出緩衝區的大小不曾用過;必須為零lpBytesReturned;    //輸出的實際位元組的位址
參數
【lpInBuffer】指向輸入緩衝區。不用於此操作。設置為NULL。【nInBufferSize】指定【lpInBuffer】指向的緩衝區的大小（以位元組為單位）。不用於此操作。設置為零。【


-------------------------------------------------------- KeyGTK3Win32IOCTL_STORAGE_GET_MEDIA_TYPES ----
IOCTL_STORAGE_GET_MEDIA_TYPES  IOCTL_STORAGE_GET_MEDIA_TYPES DeviceIoControl操作返回有關設備驅動程式支援的媒體類型的資訊。dwIoControlCode = IOCTL_STORAGE_GET_MEDIA_TYPES;   //操作代碼lpInBuffer = NULL;  //輸入緩衝區的位址不曾用過;必須為NULLnInBufferSize = 0;  //輸入緩衝區的大小不曾用過;必須為零lpOutBuffer ;       //輸出緩衝區的位址nOutBufferSize ;    //輸出緩衝區的大小lpBytesReturned;    //輸出的實際位元組的位址
參數
【lpInBuffer】指向輸入緩衝區。不用於此操作。設置為NULL。【nInBufferSize】指定【lpInBuffer】指向的緩衝區的大小（以位元組為單位）。不用於此操作。設置為零。【


-------------------------------------------------------- KeyGTK3Win32IOCTL_STORAGE_LOAD_MEDIA ----
IOCTL_STORAGE_LOAD_MEDIA  IOCTL_STORAGE_LOAD_MEDIA DeviceIoControl操作會將介質載入到設備中。dwIoControlCode = IOCTL_STORAGE_LOAD_MEDIA;   //操作代碼lpInBuffer = NULL;  //輸入緩衝區的位址不曾用過;必須為NULLnInBufferSize = 0;  //輸入緩衝區的大小不曾用過;必須為零lpOutBuffer = NULL; //輸出緩衝區的位址不曾用過;必須為NULLnOutBufferSize = 0; //輸出緩衝區的大小不曾用過;必須為零lpBytesReturned;    //輸出的實際位元組的位址
參數
【lpInBuffer】指向輸入緩衝區。不用於此操作。設置為NULL。【nInBufferSize】指定【lpInBuffer】指向的緩衝區的大小（以位元組為單位）。不用於此操作。設置為零。【


-------------------------------------------------------- KeyGTK3Win32IOCTL_STORAGE_MEDIA_REMOVAL ----
IOCTL_STORAGE_MEDIA_REMOVAL  IOCTL_STORAGE_MEDIA_REMOVAL DeviceIoControl操作啟用或禁用彈出介質的機制，對於具有該鎖定函數的設備。dwIoControlCode = IOCTL_STORAGE_MEDIA_REMOVAL;   //操作代碼lpInBuffer;         //輸入緩衝區的位址nInBufferSize;      //輸入緩衝區的大小lpOutBuffer = NULL; //輸出緩衝區的位址不曾用過;必須為NULLnOutBufferSize = 0; //輸出緩衝區的大小不曾用過;必須為零lpBytesReturned;    //輸出的實際位元組的位址
參數
【lpInBuffer】指向包含PREVENT_MEDIA_REMOVAL資料結構的緩衝區。該結構的PreventMediaRemoval成員的TRUE值指定禁止介質刪除（設備已鎖定）。FA


-------------------------------------------------------- KeyGTK3Win32IsBadCodePtr ----
IsBadCodePtr    IsBadCodePtr函數確定調用進程是否具有對指定位址的記憶體的讀存取權限。
語法
參數
【lpfn】指向記憶體中的位址。
返回值
如果調用進程具有對指定記憶體的讀取存取權限，返回值為零。如果調用進程沒有對指定記憶體的讀取存取權限，則返回值不為零。要獲取擴展錯誤資訊，請調用GetL


-------------------------------------------------------- KeyGTK3Win32IsBadHugeReadPtr ----
IsBadHugeReadPtr    IsBadHugeReadPtr函數驗證調用進程是否具有對指定範圍的記憶體的讀取存取權限。
語法
參數
【lp】指向區塊的第一個位元組。【UCB】指定區塊的大小（以位元組為單位）。如果此參數為零，返回值為零。
返回值
如果調用進程對指定記憶體範圍內的所有位元組具有讀取存取權限，返回值為零。如果


-------------------------------------------------------- KeyGTK3Win32IsBadHugeWritePtr ----
IsBadHugeWritePtr    IsBadHugeWritePtr函數驗證調用進程是否具有對指定範圍的記憶體的寫存取權限。
語法
參數
【lp】指向區塊的第一個位元組。【UCB】指定區塊的大小（以位元組為單位）。如果此參數為零，返回值為零。
返回值
如果調用進程對指定記憶體範圍內的所有位元組具有寫入存取權限，返回值為零。如果


-------------------------------------------------------- KeyGTK3Win32IsBadReadPtr ----
IsBadReadPtr    IsBadReadPtr函數驗證調用進程是否具有對指定範圍的記憶體的讀取存取權限。
語法
參數
【lp】指向區塊的第一個位元組。【UCB】指定區塊的大小（以位元組為單位）。如果此參數為零，返回值為零。
返回值
如果調用進程對指定記憶體範圍內的所有位元組具有讀取存取權限，返回值為零。如果


-------------------------------------------------------- KeyGTK3Win32IsBadStringPtr ----
IsBadStringPtr    IsBadStringPtr函數驗證調用進程是否具有對字串指標指向的記憶體範圍的讀取存取權限。
語法
參數
【lpsz】指向一個空值終止的字串，Unicode或ASCII。【// maximum storage capacity of buffer】指定字串的最大大小（以字元為單位）。該函數檢


-------------------------------------------------------- KeyGTK3Win32IsBadWritePtr ----
IsBadWritePtr    IsBadWritePtr函數驗證調用進程是否具有對指定範圍的記憶體的寫存取權限。
語法
參數
【lp】指向區塊的第一個位元組。【UCB】指定區塊的大小（以位元組為單位）。如果此參數為零，返回值為零。
返回值
如果調用進程對指定記憶體範圍內的所有位元組具有寫入存取權限，返回值為零。如果


-------------------------------------------------------- KeyGTK3Win32IsCharAlpha ----
IsCharAlpha    IsCharAlpha函數確定字元是否是字母字元。該確定基於用戶在設置期間或通過使用控制台選擇的語言的語義。
語法
參數
【ch】指定要測試的字元。
返回值
如果字元是字母，則返回值不為零。如果字元不是字母，則返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32IsCharAlphaNumeric ----
IsCharAlphaNumeric    IsCharAlphaNumeric函數確定字元是字母還是數位字元。該確定基於用戶在設置期間或通過使用控制台選擇的語言的語義。
語法
參數
【ch】指定要測試的字元。
返回值
如果字元是字母數位，則返回值不為零。如果字元不是字母數位，則返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32IsCharLower ----
IsCharLower    IsCharLower函數確定字元是否為小寫。該確定基於用戶在設置期間或通過使用控制台選擇的語言的語義。
語法
參數
【ch】指定要測試的字元。
返回值
如果字元是小寫，則返回值不為零。如果字元不是小寫，則返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32IsCharUpper ----
IsCharUpper    IsCharUpper函數可確定字元是大寫字母。該確定基於用戶在設置期間或通過使用控制台選擇的語言的語義。
語法
參數
【ch】指定要測試的字元。
返回值
如果字元是大寫的，則返回值不為零。如果字元不是大寫，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32IsChild ----
IsChild    IsChild函數測試視窗是否為指定父視窗的子視窗或後代視窗。如果父視窗位於父視窗的鏈中，則子視窗是指定父視窗的直接後代;父視窗鏈從原始的重疊窗口或快顯視窗引導到子窗口。
語法
參數
【hWndParent】標識父視窗。【的hWnd】標識要測試的視窗。
返回值
如果視窗是指定父視窗的子視窗或後代視窗，則返回值不為零。如果視窗不是指定父視窗的子視窗或後代視窗，返回值為零


-------------------------------------------------------- KeyGTK3Win32IsClipboardFormatAvailable ----
IsClipboardFormatAvailable    IsClipboardFormatAvailable函數確定剪貼板是否包含指定格式的資料。
語法
參數
【格式】指定標準或註冊的剪貼板格式。有關剪貼板格式的說明，請參閱SetClipboardData函數。
返回值
如果剪貼板格式可用，則返回值不為零。如果剪貼板格式不可用，返回值為零。要獲


-------------------------------------------------------- KeyGTK3Win32IsDBCSLeadByte ----
IsDBCSLeadByte    IsDBCSLeadByte函數確定一個字元是一個前導位元組__，即雙位元組字元集（DBCS）中字元的第一個位元組。
語法
參數
【TestChar】指定要測試的字元。
返回值
如果字元是引導位元組，則返回值不為零。如果字元不是引導位元組，則返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
引


-------------------------------------------------------- KeyGTK3Win32IsDBCSLeadByteEx ----
IsDBCSLeadByteEx    IsDBCSLeadByteEx函數確定一個字元是一個前導位元組__，即雙位元組字元集（DBCS）中字元的第一個位元組。
語法



-------------------------------------------------------- KeyGTK3Win32IsDebuggerPresent ----
IsDebuggerPresent    [New - Windows NT]IsDebuggerPresent函數指示調用進程是否在調試器的上下文下運行。此函數從KERNEL32.DLL匯出。
語法
參數
此函數無參數。回報值如果當前進程在調試器的上下文中運行，則返回值不為零。如果當前進程沒有在調試器的上下文中運行，返回值為零。
描述
此函數允許應用程式確定是否正在調試它，以便它可以修改其


-------------------------------------------------------- KeyGTK3Win32IsDialogMessage ----
IsDialogMessage    IsDialogMessage函數確定消息是否針對指定的對話方塊，如果是，則處理消息。
語法
參數
【hDlg】標識對話方塊。【LPMSG】指向包含要檢查的消息的MSG結構。
返回值
如果消息已經被處理，則返回值不為零。如果消息未被處理，返回值為零。
描述
雖然IsDialogMes


-------------------------------------------------------- KeyGTK3Win32IsDlgButtonChecked ----
IsDlgButtonChecked    IsDlgButtonChecked函數確定按鈕控制項是否在其旁邊有核取記號，還是三態按鈕控制項是否為灰色，已檢查或兩者都不是。
語法
參數
【hDlg】標識包含按鈕控制項的對話方塊。【nIDButton】指定按鈕控制項的整數識別字。
返回值
使用BS_AUTOCHECKBOX，BS_AUTORADIOBUTTON，BS_AUTO3


-------------------------------------------------------- KeyGTK3Win32IsIconic ----
IsIconic    IsIconic函數確定指定的視窗是否被最小化（標誌）。
語法
參數
【的hWnd】標識視窗。
返回值
如果視窗是標誌性的，則返回值不為零。如果視窗不是標誌性的，返回值為零。



-------------------------------------------------------- KeyGTK3Win32IsMenu ----
IsMenu    IsMenu函數確定控制碼是否是功能表控制碼。
語法



-------------------------------------------------------- KeyGTK3Win32IsProcessorFeaturePresent ----
IsProcessorFeaturePresent    [New - Windows NT]IsProcessorFeaturePresent函數確定當前機器上至少有一個處理器是否支援指定的處理器函數。
語法



-------------------------------------------------------- KeyGTK3Win32IsRectEmpty ----
IsRectEmpty    IsRectEmpty函數確定指定的矩形是否為空。空矩形是沒有區域的矩形;也就是說，右側的座標小於或等於左側的座標，或者底側的座標小於或等於頂側的座標。
語法
參數
【LPRC】指向包含矩形的邏輯座標的RECT結構。
返回值
如果矩形為空，則返回值不為零。如果矩形不為空，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32IsTextUnicode ----
IsTextUnicode    IsTextUnicode函數確定緩衝區是否可能包含一種Unicode文本形式。該函數使用各種統計和確定性方法，在通過【LPI】傳遞的標誌的控制下進行確定。當函數返回時，這些測試的結果通過【LPI】報告。如果所有指定的測試都被傳遞，函數返回TRUE;否則返回FALSE。
語法



-------------------------------------------------------- KeyGTK3Win32IsValidAcl ----
IsValidAcl    IsValidAcl函數驗證存取控制清單（ACL）。
語法
參數
【ACL】指向此函數驗證的ACL結構。這必須是非NULL值。
返回值
如果ACL有效，則返回值不為零。如果ACL無效，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32IsValidCodePage ----
IsValidCodePage    IsValidCodePage確定指定的內碼表是否有效。
語法
參數
【CodePage】指定要檢查的內碼表。每個內碼表由唯一的數位識別碼。
返回值
如果內碼表有效，則返回值不為零。如果內碼表無效，返回值為零。要獲取擴展錯誤資訊，請調用GetLastErro


-------------------------------------------------------- KeyGTK3Win32IsValidLocale ----
IsValidLocale    IsValidLocale函數對地區設定識別碼應用有效性測試。【dwFlags中】參數確定有效性測試的性質。目前，該函數測試是否在呼叫系統上安裝或支援地區設定識別碼。
語法
參數
【語言環境】指定要驗證的地區設定識別碼。您可以使用MAKELCID宏創建地區設定識別碼。【dwFlags中】指定應用於地區設定識別碼的有效性測試。此參數可以是以下值之一：值含義LCID_IN


-------------------------------------------------------- KeyGTK3Win32IsValidSecurityDescriptor ----
IsValidSecurityDescriptor    IsValidSecurityDescriptor函數驗證SECURITY_DESCRIPTOR結構。通過檢查安全性描述元中每個元件的修訂級別來執行驗證。
語法
參數
【pSecurityDescriptor】指向函數驗證的SECURITY_DESCRIPTOR結構。
返回值
如果安全性描述元的結構有效，則返回值不為零。如果安全性描述元的結構無效，返回值為


-------------------------------------------------------- KeyGTK3Win32IsValidSid ----
IsValidSid    IsValidSid函數通過驗證修訂版本號是否在已知範圍內，並且子許可權的數量小於最大值來驗證SID結構。SID是安全性識別碼。
語法
參數
【PSID】指向要驗證的SID結構。這必須是非NULL值。
返回值
如果SID結構有效，則返回值不為零。如果SID結構無效，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError


-------------------------------------------------------- KeyGTK3Win32IsWindow ----
IsWindow    IsWindow函數確定指定的視窗控制碼是否標識現有視窗。
語法
參數
【的hWnd】指定視窗控制碼。
返回值
如果視窗控制碼標識現有視窗，則返回值不為零。如果視窗控制碼不標識現有視窗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32IsWindowEnabled ----
IsWindowEnabled    IsWindowEnabled函數確定是否為滑鼠和鍵盤輸入啟用了指定的視窗。
語法
參數
【的hWnd】標識要測試的視窗。
返回值
如果啟用該視窗，則返回值不為零。如果視窗未啟用，返回值為零。
描述
子視窗只有在啟用和可見時才接收輸入。



-------------------------------------------------------- KeyGTK3Win32IsWindowUnicode ----
IsWindowUnicode    IsWindowUnicode函數確定指定的視窗是否是本地Unicode視窗。
語法



-------------------------------------------------------- KeyGTK3Win32IsWindowVisible ----
IsWindowVisible    IsWindowVisible函數檢索指定視窗的可見性狀態。
語法
參數
【的hWnd】標識視窗。
返回值
如果指定的視窗及其父視窗具有WS_VISIBLE樣式，則返回值不為零。如果指定的視窗及其父視窗沒有WS_VISIBLE樣式，返回值為零。因為返回值指定窗


-------------------------------------------------------- KeyGTK3Win32IsZoomed ----
IsZoomed    IsZoomed函數確定視窗是否最大化。
語法
參數
【的hWnd】標識視窗。
返回值
如果視窗縮放，則返回值不為零。如果視窗沒有縮放，返回值為零。



-------------------------------------------------------- KeyGTK3Win32JournalPlaybackProc ----
JournalPlaybackProc    JournalPlaybackProc掛接過程是將滑鼠和鍵盤消息插入到系統訊息佇列中的回呼函數。通常，應用程式使用此鉤子過程播放先前由JournalRecordProc掛鉤過程記錄的一系列滑鼠和鍵盤消息。只要安裝JournalPlaybackProc掛鉤程式，禁用常規滑鼠和鍵盤輸入。
語法
參數
【碼】指定掛鉤過程用於確定如何處理消息的代碼。此參數可以是以下值之一：值含義HC_GETNEXT掛鉤過程必須將當前滑鼠或鍵盤消息複製到【lParam的】參數指向的EVENTMSG結構。HC_


-------------------------------------------------------- KeyGTK3Win32JournalRecordProc ----
JournalRecordProc    JournalRecordProc掛接過程是一個回呼函數，用於記錄系統從系統訊息佇列中刪除的消息。之後，應用程式可以使用JournalPlaybackProc掛鉤過程來播放消息。
語法
參數
【碼】指定如何處理消息。此參數可以是以下值之一：值含義HC_ACTION【lParam的】參數指向EVENTMSG結構，其中包含有關從系統佇列中刪除的消息的資訊。掛鉤過程必須通過將結構複製到


-------------------------------------------------------- KeyGTK3Win32keybd_event ----
keybd_event     keybd_event函數合成了一個按鍵。系統可以使用這樣一個合成的按鍵來生成WM_KEYUP或WM_KEYDOWN消息。鍵盤驅動程式的中斷處理常式調用{??989796012}函數。
語法
參數
【BVK】指定虛擬鍵代碼。代碼必須是1到254範圍內的值。【BSCAN】指定金鑰的硬體掃描代碼。【dwFlags中】一組標誌位元，指定函數操作的各個方面。應用程式可以使用以下預定義常量值的任意


-------------------------------------------------------- KeyGTK3Win32KeyboardProc ----
KeyboardProc    KeyboardProc掛接過程是應用程式定義或庫定義的回呼函數，系統在應用程式調用{??989796011}或PeekMessage函數時調用，並且有一個鍵盤消息（WM_KEYUP或WM_KEYDOWN）為處理。
語法
參數
【碼】指定掛鉤過程用於確定如何處理消息的代碼。此參數可以是以下值之一：值含義HC_ACTION【wParam中】和【lParam的】參數包含有關擊鍵消息的資訊。HC_NOREMOVE【wPa


-------------------------------------------------------- KeyGTK3Win32KillTimer ----
KillTimer    KillTimer函數會破壞指定的計時器。
語法
參數
【的hWnd】標識與指定計時器相關聯的視窗。該值必須與傳遞給創建計時器的SetTimer函數的【的hWnd】值相同。【uIDEvent】指定要銷毀的計時器。如果傳遞給SetTimer的視窗句


-------------------------------------------------------- KeyGTK3Win32LBItemFromPt ----
LBItemFromPt    LBItemFromPt函數將在清單方塊中的指定點檢索專案的索引。
語法
參數
【hLB】處理清單方塊以進行檢查。【pt】POINT結構包含要檢查的螢幕座標。【bAutoScroll】滾動標誌。如果此參數為TRUE，並且該點直接位於清單方塊的上方或下方，該函數將清單方塊滾動一


-------------------------------------------------------- KeyGTK3Win32LCMapString ----
LCMapString    LCMapString函數將一個字串映射到另一個字串，執行指定的區域設置相關轉換。該函數也可用於為輸入字串生成排序鍵。
語法
參數
【語言環境】指定地區設定識別碼。語言環境為字串映射或排序鍵生成提供了一個上下文。應用程式可以使用MAKELCID巨集創建地區設定識別碼。【dwMapFlags】一組標誌，指示在字串映射或排


-------------------------------------------------------- KeyGTK3Win32LeaveCriticalSection ----
LeaveCriticalSection    LeaveCriticalSection函數釋放指定的關鍵段物件的所有權。
語法
參數
【lpCriticalSection】指向臨界區對象。
返回值
此函數不返回值。
描述
單個進程的執行緒可以使用臨界區物件進行互斥同步。該過程負責分配關鍵部分物件使用的記憶體，它可以通過


-------------------------------------------------------- KeyGTK3Win32LimitEmsPages ----
LimitEmsPages     LimitEmsPages函數已過時。此函數僅用於與16位元版本的Windows相容。新的基於Win32的應用程式不需要此函數。


-------------------------------------------------------- KeyGTK3Win32LineDDA ----
LineDDA    LineDDA函數決定了由指定的起點和終點定義的行應突出顯示哪些圖元。
語法
參數
【nXStart】指定線的起始點的x座標。【nYStart】指定線的起始點的y座標。【nXEnd】指定行的終點的x座標。【nYEnd】指定線的終點的y座標。【lpLineFunc】指定應用程


-------------------------------------------------------- KeyGTK3Win32LineDDAProc ----
LineDDAProc    LineDDAProc函數是一個應用程式定義的回呼函數，用於處理LineDDA函數中的座標。類型為LINEDDAPROC的值是指向此類函數的指標。
語法
參數
【X】指定當前點的x座標。【Y】指定當前點的y座標。【的lpData】指向應用程式定義的資料。
描述
LineDDAProc是應用程式定義的函數名稱的預留位置。應用程式通過將其位址傳遞給L


-------------------------------------------------------- KeyGTK3Win32LineTo ----
LineTo    LineTo函數從當前位置繪製一條線，但不包括指定點。
語法
參數
【HDC】標識設備上下文。【nXEnd】指定行的終點的x座標。【nYEnd】指定線的終點的y座標。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
行的結束點的


-------------------------------------------------------- KeyGTK3Win32LoadAccelerators ----
LoadAccelerators    LoadAccelerators函數載入指定的加速器表。
語法
參數
【的hInstance】標識可執行檔包含要載入的加速表的模組實例。【lpTableName】指向一個以null結尾的字串，命名要載入的加速表。或者，該參數可以指定低位字中的加速器表資源的


-------------------------------------------------------- KeyGTK3Win32LoadBitmap ----
LoadBitmap    LoadBitmap函數從模組的可執行檔中載入指定的點陣圖資源。
語法
參數
【的hInstance】標識可執行檔包含要載入的點陣圖的模組的實例。【lpBitmapName】指向一個以null結尾的字串，其中包含要載入的點陣圖資源的名稱。或者，該參數可以由低位字中的資


-------------------------------------------------------- KeyGTK3Win32LoadCursor ----
LoadCursor    LoadCursor函數從與應用程式實例關聯的可執行檔（.EXE）檔載入指定的游標資源。
語法
參數
【的hInstance】標識可執行檔包含要載入的游標的模組實例。【lpCursorName】指向一個以null結尾的字串，其中包含要載入的游標資源的名稱。或者，該參數可以由低位字中的資源


-------------------------------------------------------- KeyGTK3Win32LoadCursorFromFile ----
LoadCursorFromFile    LoadCursorFromFile函數根據檔中包含的資料創建一個游標。該檔由其名稱或系統游標識別字指定。該函數返回新創建的游標的控制碼。包含游標資料的檔可以是游標（.CUR）或動畫游標（.ANI）格式。
語法
參數
【lpFileName】表示要用於創建游標的檔資料的來源。檔中的資料必須是.CUR或.ANI格式。如果【lpszFileName】的高位字是非零的，它是指向一個字串的指標，該字串是包


-------------------------------------------------------- KeyGTK3Win32LoadIcon ----
LoadIcon    LoadIcon函數從與應用程式實例關聯的可執行檔（.EXE）檔載入指定的圖示資源。
語法
參數
【的hInstance】標識可執行檔包含要載入的圖示的模組實例。載入標準圖示時，此參數必須為NULL。【lpIconName】指向一個以null結尾的字串，其中包含要載入的圖示資源的名稱


-------------------------------------------------------- KeyGTK3Win32LoadImage ----
LoadImage    [Now Supported on Windows NT]LoadImage函數載入圖示，游標或點陣圖。
語法
參數
【HINST】標識包含要載入的圖像的模組實例。要載入OEM映射，請將此參數設置為零。【lpszName】標識要載入的圖像。如果【HINST】參數為非空，並且【fuLoad】參數不包含LR_L


-------------------------------------------------------- KeyGTK3Win32LoadKeyboardLayout ----
LoadKeyboardLayout    Windows 95和Windows NT中的LoadKeyboardLayout的實現有很大的不同。為了適應這些差異，本參考頁首先顯示Windows 95實現，其次是Windows NT版本。
語法
參數
【pwszKLID】指向指定鍵盤配置名稱的緩衝區。該名稱是由主要語言識別字（低字）和設備識別字（高字）的十六進位值組成的字串。例如，美國英語的語言識別字為0x0409，所以主要的美國英文版


-------------------------------------------------------- KeyGTK3Win32LoadLibrary ----
LoadLibrary    LoadLibrary函數將指定的可執行模組映射到調用進程的位址空間。
語法
參數
【lpLibFileName】指向以空字元結尾的字串，命名可執行模組（一個.DLL或.EXE文件）。指定的名稱是模組的檔案名，並且與庫模組本身中存儲的名稱無關，如模組定義（.DEF）文件中


-------------------------------------------------------- KeyGTK3Win32LoadLibraryEx ----
LoadLibraryEx    LoadLibraryEx函數將指定的可執行模組映射到調用進程的位址空間。可執行模組可以是.DLL或.EXE文件。指定的模組可能會導致其他模組映射到位址空間。
語法
參數
【lpLibFileName】指向一個以空值終止的字串，命名一個Win32可執行模組（.DLL或.EXE文件）。指定的名稱是可執行模組的檔案名。該名稱與庫模組本身存儲的名稱無關，如模組定義


-------------------------------------------------------- KeyGTK3Win32LoadMenu ----
LoadMenu    LoadMenu函數從與應用程式實例關聯的可執行檔（.EXE）檔載入指定的菜單資源。
語法
參數
【的hInstance】標識包含要載入的功能表資源的模組的實例。【lpMenuName】指向包含菜單資源名稱的以null結尾的字串。或者，該參數可以由低位字中的資源識別字和高階字中的零組成。


-------------------------------------------------------- KeyGTK3Win32LoadMenuIndirect ----
LoadMenuIndirect    LoadMenuIndirect函數將指定的功能表範本載入到記憶體中。
語法
參數
【lpMenuTemplate】指向功能表範本或擴展功能表範本。功能表範本由MENUITEMTEMPLATEHEADER結構組成，後跟一個或多個連續的MENUITEMTEMPLATE結構。擴展菜單


-------------------------------------------------------- KeyGTK3Win32LoadModule ----
LoadModule    LoadModule函數載入並執行基於Windows的應用程式或創建現有基於Windows的應用程式的新實例。提供此函數以相容早期版本的Windows。基於Win32的應用程式應使用CreateProcess函數。
語法
參數
【lpModuleName】指向包含要運行的應用程式的檔案名的以null結尾的字串。如果【lpModuleName】參數不包含目錄路徑，Windows將按以下循序搜尋可執行檔：1.應用程


-------------------------------------------------------- KeyGTK3Win32LoadResource ----
LoadResource    LoadResource函數將指定的資源載入到全域記憶體中。
語法
參數
【HMODULE】標識可執行檔包含資源的模組。如果【HMODULE】為NULL，Windows將從用於創建當前進程的模組載入資源。【hResInfo】標識要載入的資源。必須使用FindRe


-------------------------------------------------------- KeyGTK3Win32LoadString ----
LoadString    LoadString函數從與指定模組相關聯的可執行檔中載入字串資源，將字串複製到緩衝區中，並附加一個終止空字元。
語法
參數
【的hInstance】標識可執行檔包含字串資源的模組實例。【uID】指定要載入的字串的整數識別字。【lpBuffer】指向緩衝區以接收字串。【nBufferMax】指定緩衝區的大小


-------------------------------------------------------- KeyGTK3Win32LocalAlloc ----
LocalAlloc    LocalAlloc函數從堆中分配指定的位元組數。在線性Win32 API環境中，本地堆和全域堆之間沒有區別。
語法
參數
【uFlags】指定如何分配記憶體。如果指定為零，則預設值為LMEM_FIXED標誌。除了具體注明的不相容的組合外，還可以指定以下標誌的任意組合。要指示函數是分配固定或可移動記憶體，請指定前六個


-------------------------------------------------------- KeyGTK3Win32LocalCompact ----
LocalCompact      LocalCompact函數已過時。此函數僅用於與16位元版本的Windows相容。


-------------------------------------------------------- KeyGTK3Win32LocalDiscard ----
LocalDiscard    LocalDiscard函數將丟棄指定的本地記憶體物件。記憶體物件的鎖計數必須為零。
語法
參數
【hlocMemhmn】標識本地記憶體物件。該手柄由LocalAlloc或LocalReAlloc函數返回。
返回值
如果函數成功，則返回值是本地記憶體物件的控制碼。如果函數失敗，返回值為NU


-------------------------------------------------------- KeyGTK3Win32LocalFileTimeToFileTime ----
LocalFileTimeToFileTime    LocalFileTimeToFileTime函數根據協調世界時（UTC）將本地檔時間轉換為檔時間。
語法
參數
【lpLocalFileTime】指向FILETIME結構，指定將本地檔時間轉換為基於UTC的檔時間。【lpFileTime】指向FILETIME結構以接收基於UTC的檔轉換時間。此參


-------------------------------------------------------- KeyGTK3Win32LocalFlags ----
LocalFlags    LocalFlags函數返回有關指定的本地記憶體物件的資訊。
語法
參數
【HMEM】標識本地記憶體物件。該手柄由LocalAlloc或LocalReAlloc函數返回。
返回值
如果函數成功，則返回值是32位元值，用於指定記憶體物件的分配標誌和鎖計數。如果函數失敗


-------------------------------------------------------- KeyGTK3Win32LocalFree ----
LocalFree    LocalFree函數釋放指定的本地記憶體物件並使其控制碼無效。
語法
參數
【HMEM】標識本地記憶體物件。該手柄由LocalAlloc或LocalReAlloc函數返回。
返回值
如果函數成功，返回值為NULL。如果函數失敗，返回值等於本地記憶體物件的控制碼。要獲取


-------------------------------------------------------- KeyGTK3Win32LocalHandle ----
LocalHandle    LocalHandle函數檢索與指定的本地記憶體物件指標關聯的控制碼。
語法
參數
【PME?】指向本地記憶體物件的第一個位元組。該指標由LocalLock函數返回。
返回值
如果函數成功，則返回值是指定的本地記憶體物件的控制碼。如果函數失敗，返回值為NULL。要獲取擴展錯誤信


-------------------------------------------------------- KeyGTK3Win32LocalLock ----
LocalLock    LocalLock函數鎖定本地記憶體物件，並返回指向物件區塊第一個位元組的指標。與鎖定的記憶體物件相關聯的記憶體塊不能被移動或丟棄。對於使用LMEM_MOVEABLE標誌分配的記憶體物件，該函數會增加物件的鎖定計數。
語法
參數
【HMEM】標識本地記憶體物件。該手柄由LocalAlloc或LocalReAlloc函數返回。
返回值
如果函數成功，則返回值是指向區塊第一個位元組的指標。如果函數失敗，返回值為NULL


-------------------------------------------------------- KeyGTK3Win32LocalReAlloc ----
LocalReAlloc    LocalReAlloc函數更改指定的本地記憶體物件的大小或屬性。尺寸可以增減。
語法
參數
【HMEM】標識要重新分配的本地記憶體物件。該控制碼由LocalAlloc或LocalReAlloc函數返回。【指向包含要寫入檔的資料的緩衝區。】指定區塊的新大小（以位元組為單位）。如果此參數


-------------------------------------------------------- KeyGTK3Win32LocalShrink ----
LocalShrink     LocalShrink函數已過時。此函數僅用於與16位元版本的Windows相容。它在32位環境中沒有任何意義。


-------------------------------------------------------- KeyGTK3Win32LocalSize ----
LocalSize    LocalSize函數返回指定本地記憶體物件的當前大小（以位元組為單位）。
語法
參數
【HMEM】標識本地記憶體物件。該手柄由LocalAlloc，LocalReAlloc或LocalHandle函數返回。
返回值
如果函數成功，則返回值是指定本地記憶體物件的大小（以位元組為單


-------------------------------------------------------- KeyGTK3Win32LocalUnlock ----
LocalUnlock    LocalUnlock函數減少與使用LMEM_MOVEABLE標誌分配的記憶體物件關聯的鎖定計數。此函數對使用LMEM_FIXED標誌分配的記憶體物件沒有影響。
語法
參數
【HMEM】標識本地記憶體物件。該手柄由LocalAlloc或LocalReAlloc函數返回。
返回值
如果記憶體物件在遞減鎖定計數後仍然被鎖定，則返回值不為零。如果函數失敗，返回值為零。


-------------------------------------------------------- KeyGTK3Win32LockFile ----
LockFile    LockFile函數鎖定打開檔中的區域。鎖定區域可防止其他進程訪問該區域。
語法
參數
【HFILE】標識要鎖定的區域的檔。必須使用GENERIC_READ或GENERIC_WRITE訪問檔（或兩者）創建檔案控制代碼。【dwFileOffsetLow】指定鎖應該開始的檔中起始


-------------------------------------------------------- KeyGTK3Win32LockFileEx ----
LockFileEx    LockFileEx函數鎖定打開的檔中的位元組範圍以進行共用或獨佔訪問。
語法
參數
【HFILE】標識一個檔的打開控制碼，該檔要鎖定一段位元組，用於共用或獨佔訪問。必須使用GENERIC_READ或GENERIC_WRITE訪問該檔創建控制碼。【dwFlags中】指定修改此


-------------------------------------------------------- KeyGTK3Win32LockResource ----
LockResource    LockResource函數將指定的資源鎖定在記憶體中。
語法
參數
【hResData】標識要鎖定的資源。LoadResource函數返回此控制碼。
返回值
如果載入的資源被鎖定，則返回值是指向資源的第一個位元組的指標;否則為NULL。
描述
基於Win


-------------------------------------------------------- KeyGTK3Win32LockSegment ----
LockSegment     LockSegment函數已過時。此函數僅用於與16位元版本的Windows相容。它在32位環境中沒有任何意義。


-------------------------------------------------------- KeyGTK3Win32LockServiceDatabase ----
LockServiceDatabase    LockServiceDatabase函數鎖定指定的資料庫。
語法
參數
【hSCManager】標識服務控制管理器資料庫。OpenSCManager函數返回此控制碼，該控制碼必須具有SC_MANAGER_LOCK存取權限。
返回值
如果函數成功，則返回值是指定的


-------------------------------------------------------- KeyGTK3Win32LockWindowUpdate ----
LockWindowUpdate    LockWindowUpdate函數在指定的視窗中禁用或重新啟用繪圖。一次只能鎖定一個視窗。
語法
參數
【hWndLock】指定繪圖將被禁用的視窗。如果此參數為NULL，則啟用鎖定視窗中的繪圖。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零，表示發生錯誤或其他視窗已被鎖定。


-------------------------------------------------------- KeyGTK3Win32LogonUser ----
LogonUser    LogonUser函數嘗試執行使用者登錄操作。您指定具有用戶名和域的用戶，並使用純文字密碼對用戶進行身份驗證。如果函數成功，您將收到一個代表登錄用戶的權杖的控制碼。然後，您可以使用此權杖控制碼模擬指定的使用者，或者在大多數情況下，創建在指定用戶的上下文中運行的進程。
語法
參數
【lpszUsername】指向指定用戶名的空終止字串的指標。這是要登錄的使用者帳戶的名稱。【lpszDo mainhu】指向指定要登錄到的域或伺服器的以空值終止的字串的指標。如果此參數為


-------------------------------------------------------- KeyGTK3Win32LookupAccountName ----
LookupAccountName    LookupAccountName函數接受系統和帳戶的名稱作為輸入。它檢索帳戶的安全性識別碼（SID）和找到該帳戶的域的名稱。
語法
參數
【lpSystemName】指向指定系統的以null結尾的字串。該字串可以是遠端電腦的名稱。如果此字串為NULL，則會在本地系統上查找帳戶名稱。【lpAccountName】指向指定


-------------------------------------------------------- KeyGTK3Win32LookupAccountSid ----
LookupAccountSid    LookupAccountSid函數接受安全性識別碼（SID）作為輸入。它檢索此SID的帳戶的名稱以及找到此SID的第一個域的名稱。
語法
參數
【lpSystemName】指向指定系統的以null結尾的字串。該字串可以是遠端電腦的名稱。如果此字串為NULL，則會在本地系統上查找SID。【希德】指向要查找帳戶名稱的SID結構。


-------------------------------------------------------- KeyGTK3Win32LookupIconIdFromDirectory ----
LookupIconIdFromDirectory    LookupIconIdFromDirectory函數可以搜索最符合當前顯示裝置的圖示或游標的圖示或游標資料。
語法
參數
【presbits】指向圖示或游標目錄資料。因為此函數不能驗證資來源資料，所以如果【presbits】未指向有效的資來源資料，則會導致一般保護（GP）故障或返回未定義的值。【FICON】指定是否


-------------------------------------------------------- KeyGTK3Win32LookupIconIdFromDirectoryEx ----
LookupIconIdFromDirectoryEx    [Now Supported on Windows NT]LookupIconIdFromDirectoryEx函數可以搜索最符合當前顯示裝置的圖示或游標的圖示或游標資料。
語法
參數
【presbits】指向圖示或游標目錄資料。因為此函數不會驗證資來源資料，所以如果【presbits】未指向有效的資來源資料，則會導致一般保護（GP）故障或返回未定義的值。【FICON】指定是否


-------------------------------------------------------- KeyGTK3Win32LookupPrivilegeDisplayName ----
LookupPrivilegeDisplayName    LookupPrivilegeDisplayName函數檢索表示指定許可權的可顯示名稱。
語法
參數
【lpSystemName】指向一個以null結尾的字串，指定查看可顯示特權名稱的系統的名稱。如果指定了一個空字串，該函數將嘗試在本地系統上查找可顯示的名稱。【lpName】指向一個以空


-------------------------------------------------------- KeyGTK3Win32LookupPrivilegeName ----
LookupPrivilegeName    LookupPrivilegeName函數通過指定的本地唯一識別碼（LUID）檢索與特定系統上表示的許可權相對應的名稱。
語法
參數
【lpSystemName】指向一個以null結尾的字串，指定查詢特權名稱的系統的名稱。如果指定了空字串，則該函數嘗試在本地系統上查找特權名稱。【lpLuid】指向目標系統上已知特權的本


-------------------------------------------------------- KeyGTK3Win32LookupPrivilegeValue ----
LookupPrivilegeValue    LookupPrivilegeValue函數檢索在指定系統上使用的本地唯一識別碼（LUID）以本地表示指定的許可權名稱。
語法
參數
【lpSystemName】指向一個以null結尾的字串，指定查詢特權名稱的系統的名稱。如果指定了空字串，則該函數嘗試在本地系統上查找特權名稱。【lpName】指向一個以空值終止的字串


-------------------------------------------------------- KeyGTK3Win32LookupSecurityDescriptorParts ----
LookupSecurityDescriptorParts    [New - Windows NT]LookupSecurityDescriptorParts函數從自相關安全性描述元中檢索安全資訊。
語法
參數
【pOwner】指向接收指向TRUSTEE結構的指標的變數的指標。該函數將在【pSD】安全性描述元中查找與所有者SID關聯的名稱，並返回指向TRUSTEE結構的ptstrNameaf成員中的名


-------------------------------------------------------- KeyGTK3Win32LPtoDP ----
LPtoDP    LPtoDP函數將邏輯座標轉換為設備座標。轉換取決於設備上下文的映射模式，視窗和視口的起點和擴展區的設置以及世界變換。
語法
參數
【HDC】識別DC。【lpPoints】指向POINT結構的陣列。每個POINT結構中包含的x座標和y座標將被轉換。【NCOUNT】指定陣列中的點數。
返回值
如果函數成功，返回值不為零


-------------------------------------------------------- KeyGTK3Win32LSEnumProviders ----
LSEnumProviders    注意：這是Microsoft Windows的將來版本中將支援的技術的初步文檔。LSEnumProviders函數為每個已安裝的許可證系統服務提供程式返回唯一的字串。
語法
參數
【指數】[in]指定服務提供者的索引。第一個提供者的索引為零，第二個索引為1，依此類推。每個連續調用LSEnumProviders，呼叫者應該增加該索引，直到它返回LS_BAD_INDEX狀


-------------------------------------------------------- KeyGTK3Win32LSFreeHandle ----
LSFreeHandle    注意：這是Microsoft Windows的將來版本中將支援的技術的初步文檔。LSFreeHandle函數釋放許可控制碼上下文。
語法
參數
【LicenseHandle】[in]指定不再有效的許可證上下文的控制碼。該參數必須是使用LSRequest函數創建的控制碼。
返回值
沒有。
描述
在調用LSRelease函數後，或L


-------------------------------------------------------- KeyGTK3Win32LSGetMessage ----
LSGetMessage    注意：這是Microsoft Windows的將來版本中將支援的技術的初步文檔。LSGetMessage函數返回與許可證服務函數狀態碼相關聯的消息字串。
語法
參數
【LicenseHandle】[in]指定許可上下文的控制碼。該參數必須是使用LSRequest 函數創建的控制碼。【值】[in]指定許可證服務函數返回的任何狀態碼。【緩衝】[out]指向將返


-------------------------------------------------------- KeyGTK3Win32LSQuery ----
LSQuery    注意：這是Microsoft Windows的將來版本中將支援的技術的初步文檔。LSQuery函數返回有關通過調用LSRequest函數獲得的與指定控制碼相關聯的服務提供者或許可證系統上下文的資訊。
語法
參數
【LicenseHandle】[in]指定許可上下文的控制碼。此參數必須是使用LSRequest函數創建的控制碼。【資訊】[in]指定標識要返回的資訊的索引。【InfoBuffer】[out]指


-------------------------------------------------------- KeyGTK3Win32LSRelease ----
LSRelease    注意：這是Microsoft Windows的將來版本中將支援的技術的初步文檔。LSRelease函數請求許可證系統發佈與由【LicenseHandle】參數標識的許可證上下文相關聯的許可資源。
語法
參數
【LicenseHandle】[in]指定許可上下文的控制碼。此參數必須是使用LSRequest 函數創建的控制碼。【TotUnitsConsumed】[in]指定自LSRequest函數的初始


-------------------------------------------------------- KeyGTK3Win32LSRequest ----
LSRequest    注意：這是Microsoft Windows的將來版本中將支援的技術的初步文檔。LSRequest函數要求許可證系統授予許可資源，以便調用應用程式可以執行。
語法
參數
【LicenseSystem】[in]指向唯一標識特定許可證系統的字串。您可以使用LSEnumProviders函數獲取此字串。如果指定了常量LS_ANY，則將搜索所有許可證系統提供程式


-------------------------------------------------------- KeyGTK3Win32lstrcat ----
lstrcat    lstrcat函數將一個字串附加到另一個字串。
語法
參數
【lpString1】指向一個以null結尾的字串。緩衝區必須足夠大以容納兩個字串。【lpString2】指向要附加到【lpString1】參數中指定的字串的以null結尾的字串。



-------------------------------------------------------- KeyGTK3Win32LSTRCMP ----
LSTRCMP     LSTRCMP函數比較兩個字串。比較區分大小寫。
語法
參數
【lpString1】指向要比較的第一個以null結尾的字串。【lpString2】指向要比較的第二個以null結尾的字串。
返回值
如果函數成功，【lpString1】指向的字串


-------------------------------------------------------- KeyGTK3Win32LSTRCMPI ----
LSTRCMPI    LSTRCMPI函數比較兩個字串。比較不區分大小寫。
語法
參數
【lpString1】指向要比較的第一個以null結尾的字串。【lpString2】指向要比較的第二個以null結尾的字串。
返回值
如果函數成功，【lpString1】指向的字串


-------------------------------------------------------- KeyGTK3Win32lstrcpy ----
lstrcpy    lstrcpy函數將字串複製到緩衝區。
語法
參數
【lpString1】指向緩衝區以接收【lpString2】參數指向的字串的內容。緩衝區必須足夠大以容納字串，包括終止空字元。【lpString2】指向要複製的以null結尾的字串。



-------------------------------------------------------- KeyGTK3Win32lstrcpyn ----
lstrcpyn    lstrcpyn函數將指定數量的字元從源字串複製到緩衝區。
語法
參數
【lpString1】指向函數複製字元的緩衝區。緩衝區必須足夠大以包含由【iMaxLength】指定的位元組數（ANSI版本）或字元（Unicode版本），包括終止空字元的空間。【lpStri


-------------------------------------------------------- KeyGTK3Win32lstrlen ----
lstrlen    lstrlen函數返回指定字串的長度（ANSI版本）或字元（Unicode版本）（不包括終止空字元）。
語法
參數
【lpString】指向一個以null結尾的字串。
返回值
如果函數成功，返回值將以位元組（ANSI版本）或字元（Unicode版本）指定字串的長度。



-------------------------------------------------------- KeyGTK3Win32LSUpdate ----
LSUpdate    注意：這是Microsoft Windows的將來版本中將支援的技術的初步文檔。LSUpdate函數更新許可的應用程式軟體和許可證系統之間的同步。
語法
參數
【LicenseHandle】[in]指定許可上下文的控制碼。該參數必須是使用LSRequest 函數創建的控制碼。【TotUnitsConsumed】[in]指定自LSRequest函數的初始


-------------------------------------------------------- KeyGTK3Win32LZClose ----
LZClose    LZClose函數關閉使用LZOpenFile函數打開的檔。
語法
參數
【HFILE】標識要關閉的原始檔案。
返回值
此函數不返回值。
描述
必須通過調用LZOpenFile函數檢索識別檔的控制碼。如果通過調用CreateFile或OpenFile函數檢索


-------------------------------------------------------- KeyGTK3Win32LZCopy ----
LZCopy    LZCopy函數將原始檔案複製到目的檔案。如果使用Microsoft檔案壓縮實用程式（COMPRESS.EXE）壓縮原始檔案，則此函數將創建一個解壓縮的目的檔案。如果原始檔案未壓縮，則此函數將複製原始檔。
語法
參數
【hfSource】標識原始檔案。【hfDest】標識目的檔案。
返回值
如果函數成功，則返回值指定目的檔案的大小（以位元組為單位）。如果函數失敗，則返回值為LZERROR_ *代碼。這些代


-------------------------------------------------------- KeyGTK3Win32LZDone ----
LZDone      LZDone函數已過時。它僅用於與16位版本的Windows相容。基於Win32的應用程式應使用LZOpenFile函數。


-------------------------------------------------------- KeyGTK3Win32LZInit ----
LZInit    LZInit函數為解壓縮檔所需的內部資料結構分配記憶體，然後創建並初始化它們。
語法



-------------------------------------------------------- KeyGTK3Win32LZOpenFile ----
LZOpenFile    LZOpenFile函數創建，打開，重新打開或刪除指定的檔。
語法
參數
【lpFileName】指向指定檔案名稱的字串。【lpReOpenBuf】指向OFSTRUCT結構，即在檔首次打開時接收有關檔的資訊。該結構可用於後續調用LZOpenFile函數以引用


-------------------------------------------------------- KeyGTK3Win32LZRead ----
LZRead    LZRead函數從檔中讀取（最多）指定的位元組數，並將它們複製到緩衝區中。
語法
參數
【HFILE】標識原始檔案。【lpBuffer】指向從檔讀取的位元組的緩衝區。【cbReaden】指定要讀取的位元組數。
返回值
如果函數成功，則返回值指定讀取的位元組數。如果函數失敗，則返回


-------------------------------------------------------- KeyGTK3Win32LZSeek ----
LZSeek    LZSeek函數將一個檔指標從起始位置移動多個位元組。
語法
參數
【HFILE】標識原始檔案。【我偏移fy】指定移動檔指標的位元組數。【iOrigin】指定指針的起始位置。此參數必須是以下值之一：值含義0從文件的開頭移動文件指標【我偏移fy】個位元組。1從當前


-------------------------------------------------------- KeyGTK3Win32LZStart ----
LZStart     LZStart函數已過時。它僅用於與16位版本的Windows相容。基於Win32的應用程式應使用LZCopy函數。


-------------------------------------------------------- KeyGTK3Win32MakeAbsoluteSD ----
MakeAbsoluteSD    MakeAbsoluteSD函數通過使用自相關格式的安全性描述元作為範本，以絕對格式創建安全性描述元。
語法
參數
【pSelfRelativeSecurityDescriptor】以自相關格式指向SECURITY_DESCRIPTOR結構。該函數創建此安全性描述元的絕對格式版本，而不修改原始安全性描述元。【


-------------------------------------------------------- KeyGTK3Win32MakeDragList ----
MakeDragList    MakeDragList函數將指定的單選清單方塊更改為拖動清單方塊。
語法



-------------------------------------------------------- KeyGTK3Win32MakeProcInstance ----
MakeProcInstance     MakeProcInstance函數已過時。Win32函數可以直接調用。此函數僅用於與16位元版本的Windows相容。基於Win32的應用程式不應該使用此函數。


-------------------------------------------------------- KeyGTK3Win32MakeSelfRelativeSD ----
MakeSelfRelativeSD    MakeSelfRelativeSD函數通過使用絕對格式的安全性描述元作為範本，以自相關格式創建安全性描述元。
語法
參數
【pAbsoluteSecurityDescriptor】以絕對格式指向SECURITY_DESCRIPTOR結構。該函數以自相關格式創建此安全性描述元的版本，無需修改原始檔。【pSelfR


-------------------------------------------------------- KeyGTK3Win32MapDialogRect ----
MapDialogRect    MapDialogRect函數將指定的對話方塊單位轉換（映射）為螢幕單位（圖元）。該函數用轉換的座標替換指定的RECT結構中的座標，允許使用該結構創建對話方塊或在對話方塊中定位控制項。
語法
參數
【hDlg】標識一個對話方塊。此函數僅接受由對話方塊創建函數之一創建的對話方塊的控制碼;其他視窗的控制碼無效。【LPRECT】指向包含要轉換的對話方塊座標的RECT結構。
返回值
如果函數成功，返回


-------------------------------------------------------- KeyGTK3Win32MapGenericMask ----
MapGenericMask    MapGenericMask函數將存取遮罩中的通用存取權限映射到特定的和標準的存取權限。該函數應用GENERIC_MAPPING結構中提供的映射。
語法
參數
【AccessMask】指向存取遮罩，接收從通用存取權限映射的特定和標準許可權。【GenericMapping】指向GENERIC_MAPPING結構，指定通用訪問類型到特定和標準訪問類型的映


-------------------------------------------------------- KeyGTK3Win32MapViewOfFile ----
MapViewOfFile    MapViewOfFile函數將檔的視圖映射到調用進程的位址空間。
語法
參數
【hFileMappingObject】標識檔映射物件的打開控制碼。CreateFileMapping和OpenFileMapping函數返回此控制碼。【dwDesiredAccess】指定對


-------------------------------------------------------- KeyGTK3Win32MapViewOfFileEx ----
MapViewOfFileEx    MapViewOfFileEx函數將檔的視圖映射到調用進程的位址空間。此擴展函數允許調用進程為映射視圖指定建議的記憶體位址。此函數僅適用於基於Win32的應用程式。
語法
參數
【hFileMappingObject】標識檔映射物件的打開控制碼。CreateFileMapping和OpenFileMapping函數返回此控制碼。【dwDesiredAccess】指定對


-------------------------------------------------------- KeyGTK3Win32MapVirtualKey ----
MapVirtualKey    MapVirtualKey函數將虛擬鍵代碼（映射）為掃描代碼或字元值，或將掃描代碼轉換為虛擬鍵代碼。
語法
參數
【UCODE】指定金鑰的虛擬金鑰代碼或掃描代碼。該值如何解釋取決於【uMapType】參數的值。【uMapType】指定要執行的翻譯。該參數的值取決於【UCODE】參數的值：值含義0【UCO


-------------------------------------------------------- KeyGTK3Win32MapVirtualKeyEx ----
MapVirtualKeyEx    [Now Supported on Windows NT]MapVirtualKeyEx函數將虛擬鍵代碼（映射）為掃描代碼或字元值，或將掃描代碼轉換為虛擬鍵代碼。該函數使用由給定鍵盤配置控制碼標識的輸入語言和物理鍵盤配置來轉換代碼。
語法
參數
【UCODE】指定金鑰的虛擬金鑰代碼或掃描代碼。該值如何解釋取決於【uMapType】參數的值。【uMapType】指定要執行的翻譯。該參數的值取決於【UCODE】參數的值：值含義0【UCO


-------------------------------------------------------- KeyGTK3Win32MapWindowPoints ----
MapWindowPoints    MapWindowPoints函數將相對於一個視窗的座標空間中的一組點轉換（映射）到相對於另一個視窗的座標空間。
語法
參數
【hWndFrom】標識要轉換點的視窗。如果此參數為NULL或HWND_DESKTOP，則假定該點處於螢幕座標。【hWndTo】標識要轉換點的視窗。如果此參數為NULL或HWND_DESKT


-------------------------------------------------------- KeyGTK3Win32MenuHelp ----
MenuHelp    MenuHelp函數處理WM_MENUSELECT和WM_COMMAND消息，並在指定的狀態視窗中顯示有關當前功能表的説明文本。
語法
參數
【uMsg】WM_MENUSELECT或WM_COMMAND訊息。【wParam中】第一個消息參數。【lParam的】第二個消息參數。【hMainMenu】處理應用程式的主功能表。【HINST


-------------------------------------------------------- KeyGTK3Win32MenuItemFromPoint ----
MenuItemFromPoint    [Now Supported on Windows NT]MenuItemFromPoint函數確定哪個功能表項目（如果有）位於指定位置。
語法
參數
【的hWnd】處理到包含功能表的視窗。【HMENU】處理到包含功能表項目的功能表進行測試。【ptScreennl】POINT結構，指定要測試的位置。如果【HMENU】指定功能表列，則此參數在視窗座標中


-------------------------------------------------------- KeyGTK3Win32MessageBeep ----
MessageBeep    MessageBeep函數播放波形。每個聲音類型的波形聲音由註冊表的[sounds]部分中的條目標識。
語法
參數
【UTYPE】指定由註冊表的[sounds]部分中的條目標識的聲音類型。此參數可以是以下值之一：值聲音0xFFFFFFFF使用電腦揚聲器進行標準蜂鳴MB_ICONASTERISKSystem


-------------------------------------------------------- KeyGTK3Win32MessageBox ----
MessageBox    MessageBox函數創建，顯示和操作訊息方塊。訊息方塊包含應用程式定義的消息和標題，以及預定義圖示和按鈕的任意組合。
語法
參數
【的hWnd】標識要創建的訊息方塊的所有者窗口。如果此參數為NULL，則訊息方塊不具有所有者窗口。【lpText】指向包含要顯示的消息的以null結尾的字串。【lpCaption】指向用於對話


-------------------------------------------------------- KeyGTK3Win32MessageBoxEx ----
MessageBoxEx    MessageBoxEx函數創建，顯示和操作訊息方塊。訊息方塊包含應用程式定義的消息和標題，以及預定義圖示和按鈕的任意組合。【wLanguageId】參數指定用於預定義按鈕的語言資源集。有關MessageBoxEx的其他參數的完整說明，請參閱MessageBox.
語法
參數
【的hWnd】標識要創建的訊息方塊的所有者窗口。如果此參數為NULL，則訊息方塊不具有所有者窗口。【lpCaption】指向包含要顯示的消息的以null結尾的字串。【lpszTitle】指向用


-------------------------------------------------------- KeyGTK3Win32MessageBoxIndirect ----
MessageBoxIndirect    [Now Supported on Windows NT]MessageBoxIndirect函數創建，顯示和操作訊息方塊。訊息方塊包含應用程式定義的消息文本和標題，任何圖示以及預定義按鈕的任意組合。
語法
參數
【lpMsgBoxParams】指向MSGBOXPARAMS結構的指標，其中包含用於顯示訊息方塊的資訊。
返回值
如果沒有足夠的記憶體創建訊息方塊，返回值為零。如果函數成功，則返回值是對話方塊返


-------------------------------------------------------- KeyGTK3Win32MessageProc ----
MessageProc    MessageProc掛接過程是系統在對話方塊，訊息方塊，功能表或捲軸中發生輸入事件之後但在處理輸入事件生成的消息之前調用的應用程式定義的回呼函數。掛鉤過程可以監視由特定應用程式或所有應用程式創建的對話方塊，訊息方塊，功能表或捲軸的消息。
語法
參數
【碼】指定生成消息的輸入事件的類型。此參數可以是以下值之一：值含義MSGF_DDEMGR當動態資料交換管理庫（DDEML）等待同步交易完成時，輸入事件發生。有關DDEML的更多資訊，請參閱動


-------------------------------------------------------- KeyGTK3Win32ModifyMenu ----
ModifyMenu    ModifyMenu函數可以更改現有的功能表項目。此函數用於指定功能表項目的內容，外觀和行為。SetMenuItemInfo函數已被SetMenuItemInfo函數取代。但是，如果您不需要SetMenuItemInfo的任何擴展函數，您仍然可以使用ModifyMenu.
語法
參數
【的程式設計實例bs】標識要更改的功能表。【uPositionbs】指定要更改的功能表項目，由【uFlags】參數確定。【uFlags】指定控制【uPositionbs】參數的解釋以及功能表項目的內容，外


-------------------------------------------------------- KeyGTK3Win32ModifyWorldTransform ----
ModifyWorldTransform    ModifyWorldTransform函數使用指定的模式更改設備上下文的世界變換。
語法
參數
【HDC】指定設備上下文。【lpXform】指向XFORM結構，用於修改給定設備上下文的世界轉換。【iMode平臺】指定轉換資料如何修改當前世界轉換。此參數必須是以下值之一：值描述MWT_I


-------------------------------------------------------- KeyGTK3Win32MouseProc ----
MouseProc    MouseProc掛接過程是應用程式定義或庫定義的回呼函數，系統在應用程式調用{??989796010}或PeekMessage函數時調用，並且有一個要處理的滑鼠消息。
語法
參數
【NCODE】指定掛鉤過程用於確定如何處理消息的代碼。此參數可以是以下值之一：值含義HC_ACTION【wParam中】和【lParam的】參數包含有關滑鼠消息的資訊。HC_NOREMOVE


-------------------------------------------------------- KeyGTK3Win32mouse_event ----
mouse_event     mouse_event函數可以合成滑鼠移動和按鈕點擊。
語法
參數
【dwFlags中】一組標誌位元，指定滑鼠運動和按鈕點擊的各個方面。此參數中的位可以是以下值的任何合理組合：值含義MOUSEEVENTF_ABSOLUTE指定【dx】和【dy】參數包含歸一化的


-------------------------------------------------------- KeyGTK3Win32MoveFile ----
MoveFile    MoveFile函數重命名現有檔或目錄（包括其所有子項）。
語法
參數
【lpExistingFileName】指向以空字元結尾的字串，命名現有檔或目錄。【lpNewFileName】指向指定檔或目錄的新名稱的以null結尾的字串。新名稱不能存在。新文件


-------------------------------------------------------- KeyGTK3Win32MoveFileEx ----
MoveFileEx    MoveFileEx函數重命名現有的檔或目錄。
語法
參數
【lpExistingFileName】指向以空字元結尾的字串，命名現有檔或目錄。【lpNewFileName】指向一個以null結尾的字串，指定新名稱【lpExistingFileN


-------------------------------------------------------- KeyGTK3Win32MoveMemory ----
MoveMemory    MoveMemory函數將一個區塊從一個位置移動到另一個位置。
語法
參數
【目的地】指向移動目的地的起始位址。【資源】指向要移動的區塊的起始位址。【長度】指定要移動的區塊的大小（以位元組為單位）。
返回值
該函數沒有返回值。
描述
源和目標塊可能重疊。



-------------------------------------------------------- KeyGTK3Win32MoveToEx ----
MoveToEx    MoveToEx函數將當前位置更新到指定點，並可選地返回上一個位置。
語法
參數
【HDC】標識設備上下文。【X】以邏輯單位指定新位置的x座標。【Y】以邏輯單位指定新位置的y座標。【LPPOINT】指向存儲先前當前位置的POINT結構。如果此參數是NULL指針，則不返回上


-------------------------------------------------------- KeyGTK3Win32MoveWindow ----
MoveWindow    MoveWindow函數可以更改指定視窗的位置和尺寸。對於頂級視窗，位置和尺寸相對于螢幕的左上角。對於子視窗，它們相對于父視窗的用戶端區域的左上角。
語法
參數
【的hWnd】標識視窗。【X】指定視窗左邊的新位置。【Y】指定視窗頂部的新位置。【nWidth】指定視窗的新寬度。【nHeight參數】指定視窗的新高度。【bRepaint】指定視窗是否要重


-------------------------------------------------------- KeyGTK3Win32MsgWaitForMultipleObjects ----
MsgWaitForMultipleObjects    當發生以下其中一種情況時，MsgWaitForMultipleObjects函數返回：*任何一個或所有指定的物件都處於信號狀態。物件可以包括使用【dwWakeMask】參數指定的輸入事件物件。*經過了超時間隔。請注意，如果佇列中存在指定類型的以前未讀的輸入，則MsgWaitForMultipleObjects不返回。輸入到達時才醒來。
語法
參數
【NCOUNT】指定【蠟燭xh】指向的陣列中的物件控制碼數。物件控制碼的最大數量為MAXIMUM_WAIT_OBJECTS減1。【蠟燭xh】指向一組對象控制碼。有關可以指定控制碼的物件類型的清單，請


-------------------------------------------------------- KeyGTK3Win32MsgWaitForMultipleObjectsEx ----
MsgWaitForMultipleObjectsEx    [New - Windows NT]當發生以下其中一種情況時，MsgWaitForMultipleObjectsEx函數返回：*任何一個或所有指定的物件都處於信號狀態。物件陣列可以包括使用【dwWakeMask】參數指定的輸入事件物件。* I / O完成常式或非同步程序呼叫（APC）排隊等待中的執行緒。*經過了超時間隔。如果佇列中指定類型的未讀取輸入為MsgWaitForMultipleObjectsEx函數，則不返回。僅當新輸入到達時才返回。
語法
參數
【NCOUNT】指定【蠟燭xh】指向的陣列中的物件控制碼數。物件控制碼的最大數量為MAXIMUM_WAIT_OBJECTS減1。【蠟燭xh】指向一組對象控制碼。有關可以指定控制碼的物件類型的清單，請


-------------------------------------------------------- KeyGTK3Win32MulDiv ----
MulDiv    MulDiv函數將兩個32位元值相乘，然後將64位結果除以第三個32位值。返回值向上或向下舍入到最接近的整數。
語法
參數
【n已接收】指定被乘數。【// 32-bit signed multiplier】指定乘數。【// 32-bit signed divisor】指定乘法運算結果（【n已接收】 * 【// 3


-------------------------------------------------------- KeyGTK3Win32MultiByteToWideChar ----
MultiByteToWideChar    MultiByteToWideChar函數將字串映射為寬字元（Unicode）字串。由該函數映射的字串不一定來自多位元組字元集。
語法
參數
【CodePage】指定要用於執行轉換的內碼表。該參數可以被賦予在系統中安裝或可用的任何內碼表的值。以下值可用於指定系統預設內碼表之一：值含義CP_ACPANSI內碼表CP_MACCPMac


-------------------------------------------------------- KeyGTK3Win32MultinetGetConnectionPerformance ----
MultinetGetConnectionPerformance    MultinetGetConnectionPerformance函數返回有關用於訪問網路資源的連接的預期性能的資訊。此函數僅可用於請求重定向到網路資源的本地設備的資訊，或者對於當前連接的網路資源。
語法
參數
【lpNetResource】指定以下網路資源之一：值含義【lpLocalName】指向指定本地設備的緩衝區的指標，例如“F：”或“LPT1”，被重定向到要查詢的網路資源。如果此參數為NUL


-------------------------------------------------------- KeyGTK3Win32NDdeGetErrorString ----
NDdeGetErrorString    調用NDdeGetErrorString函數將網路DDE函數返回的錯誤代碼轉換為解釋返回的錯誤代碼的錯誤字串。
語法



-------------------------------------------------------- KeyGTK3Win32NDdeGetShareSecurity ----
NDdeGetShareSecurity    調用NDdeGetShareSecurity函數來獲取與DDE共用關聯的SECURITY_DESCRIPTOR.這是通常進行編輯。
語法
參數
【lpszServer】DSDM所在的伺服器名稱的地址。【lpszShareName】要從DSDM檢索其安全性描述元的共用名稱的地址。此參數不能為NULL。【si】標識要從與該共用相關聯的SEC


-------------------------------------------------------- KeyGTK3Win32NDdeGetTrustedShare ----
NDdeGetTrustedShare    調用NDdeGetTrustedShare函數來檢索與伺服器使用者的受信任共用列表中的DDE共用相關聯的選項。
語法
參數
【lpszServer】DSDM所在的伺服器名稱的地址。【lpszShareName】正在查詢受信任狀態的共用名稱稱的位址。此參數不能為NULL。【lpdwTrustOptions】將存儲TR


-------------------------------------------------------- KeyGTK3Win32NDdeIsValidAppTopicList ----
NDdeIsValidAppTopicList    調用NDdeIsValidAppTopicList函數來檢查應用程式和主題字串（“【AppName】 | 【TopicName】”）以獲得正確的語法。
語法
參數
【targetTopic】應用程式的位址和要驗證的主題字串。此參數不能為NULL。
返回值
如果【targetTopic】參數具有有效的語法，則返回值不為零。如果函數失敗，返回值為零。


-------------------------------------------------------- KeyGTK3Win32NDdeIsValidShareName ----
NDdeIsValidShareName    調用NDdeIsValidShareName函數來檢查共用名稱稱以獲取正確的語法。
語法
參數
【SHARENAME】共用名稱稱的位址進行驗證。此參數不能為NULL。
返回值
如果共用名稱稱具有有效的語法，則返回值不為零。如果共用名稱稱沒有有效的語法，則返回值為零。
描述
此函數在創


-------------------------------------------------------- KeyGTK3Win32NDdeSetShareSecurity ----
NDdeSetShareSecurity    調用NDdeSetShareSecurity函數來設置與DDE共用關聯的SECURITY_DESCRIPTOR.這通常在編輯分配給DDE共用的DACL後完成。
語法
參數
【lpszServer】要修改DSDM的伺服器名稱的地址。【lpszShareName】要在DSDM中修改安全性描述元的共用名稱的地址。此參數不能為NULL。【si】指定SECURITY_INF


-------------------------------------------------------- KeyGTK3Win32NDdeSetTrustedShare ----
NDdeSetTrustedShare    調用NDdeSetTrustedShare函數以在當前使用者的上下文中授予引用的DDE共用信任狀態。
語法
參數
【lpszServer】要修改DSDM的伺服器名稱的地址。【lpszShareName】共用名稱稱的位址被授予信任狀態。此參數不能為NULL。【dwTrustOptions】指定影響DDE共用


-------------------------------------------------------- KeyGTK3Win32NDdeShareAdd ----
NDdeShareAdd    調用NDdeShareAdd函數來創建和添加一個新的DDE共用到DDE共用資料庫管理器（DSDM）。
語法
參數
【lpszServer】要修改DSDM的伺服器名稱的地址。【n級】一定是2。【pSD】將與此共用相關聯的SECURITY_DESCRIPTOR的位址，以及將在後續啟動此共用時執行哪些訪問檢查


-------------------------------------------------------- KeyGTK3Win32NDdeShareDel ----
NDdeShareDel    調用NDdeShareDel函數從DSDM中刪除DDE共用。
語法



-------------------------------------------------------- KeyGTK3Win32NDdeShareEnum ----
NDdeShareEnum    調用NDdeShareEnum函數列出DSDM中可用的DDE共用。
語法



-------------------------------------------------------- KeyGTK3Win32NDdeShareGetInfo ----
NDdeShareGetInfo    調用NDdeShareGetInfo函數從DSDM中檢索DDE共用資訊。這通常用於編輯。
語法
參數
【lpszServer】DSDM所在的伺服器名稱的地址。【lpszShareName】要從DSDM檢索其資訊的共用名稱稱的位址。此參數不能為NULL。【n級】必須是2。【lpBuffer】要接


-------------------------------------------------------- KeyGTK3Win32NDdeShareSetInfo ----
NDdeShareSetInfo    調用NDdeShareSetInfo函數來修改存儲在NetDDE DSDM中的DDE共用資訊。這通常在編輯之後完成。
語法
參數
【lpszServer】要修改DSDM的伺服器名稱的地址。【lpszShareName】要在DSDM中修改其資訊的共用名稱稱的位址。此參數不能為NULL。【n級】必須是2。【lpBuffer】


-------------------------------------------------------- KeyGTK3Win32NDdeTrustedShareEnum ----
NDdeTrustedShareEnum    NDdeTrustedShareEnum函數列出了在調用進程上下文中受信任的所有網路DDE共用的名稱。
語法



-------------------------------------------------------- KeyGTK3Win32NetAccessAdd ----
NetAccessAdd    NetAccessAdd函數已過時。基於Win32的應用程式應使用GetFileSecurity和SetFileSecurity函數。


-------------------------------------------------------- KeyGTK3Win32NetAccessCheck ----
NetAccessCheck    NetAccessCheck函數已過時。基於Win32的應用程式應使用AccessCheck函數。


-------------------------------------------------------- KeyGTK3Win32NetAccessDel ----
NetAccessDel    NetAccessDel函數已過時。基於Win32的應用程式應使用GetFileSecurity和SetFileSecurity函數。


-------------------------------------------------------- KeyGTK3Win32NetAccessEnum ----
NetAccessEnum    NetAccessEnum函數已過時。基於Win32的應用程式應使用GetFileSecurity和SetFileSecurity函數。


-------------------------------------------------------- KeyGTK3Win32NetAccessGetInfo ----
NetAccessGetInfo    NetAccessGetInfo函數已過時。基於Win32的應用程式應使用GetFileSecurity和SetFileSecurity函數。


-------------------------------------------------------- KeyGTK3Win32NetAccessGetUserPerms ----
NetAccessGetUserPerms    NetAccessGetUserPerms函數已過時。基於Win32的應用程式應使用GetFileSecurity和SetFileSecurity函數。


-------------------------------------------------------- KeyGTK3Win32NetAccessSetInfo ----
NetAccessSetInfo    NetAccessSetInfo函數已過時。基於Win32的應用程式應使用GetFileSecurity和SetFileSecurity函數。


-------------------------------------------------------- KeyGTK3Win32NetAlertRaise ----
NetAlertRaise    NetAlertRaise函數通知所有註冊的用戶端發生特定事件。
語法
參數
【AlertEventName】指向要引發的中斷消息的Unicode字串的指標。【緩衝】指向要發送給偵聽此中斷消息的用戶端的資料的指標。資料應由STD_ALERT結構組成，後面是來自ADM


-------------------------------------------------------- KeyGTK3Win32NetAlertRaiseEx ----
NetAlertRaiseEx    NetAlertRaiseEx函數簡化了管理員中斷消息的提升。
語法
參數
【AlertEventName】指向Unicode字串的指標，該字串指定要提升的中斷消息類型。【VariableInfo】資訊放入管理員中斷消息。【VariableInfoSize】可變


-------------------------------------------------------- KeyGTK3Win32NetApiBufferAllocate ----
NetApiBufferAllocate    NetApiBufferAllocate函數從堆中分配記憶體。僅當需要與NetApiBufferFree函數相容時才能使用此函數。否則，請使用LocalAlloc.
語法
參數
【ByteCount】要分配的位元組數。【緩衝】指向存儲指向分配緩衝區的指標的位置的指標。



-------------------------------------------------------- KeyGTK3Win32NetApiBufferFree ----
NetApiBufferFree    NetApiBufferFree函數釋放NetApiBufferAllocate分配的記憶體。使用此函數釋放其他LAN Manager函數返回的記憶體。
語法
參數
【緩衝】指向之前在函式呼叫中返回的其他LAN Manager函數的資訊緩衝區。



-------------------------------------------------------- KeyGTK3Win32NetApiBufferReallocate ----
NetApiBufferReallocate    NetApiBufferReallocate函數更改使用NetApiBufferAllocate分配的緩衝區的大小。
語法
參數
【OldBuffer】指向重定位緩衝區的指標。【NewByteCount】緩衝區的新大小。【NewBuffer】指向以前在函式呼叫中返回的函數資訊緩衝區。



-------------------------------------------------------- KeyGTK3Win32NetApiBufferSize ----
NetApiBufferSize    NetApiBufferSize函數使用NetApiBufferAllocate返回分配緩衝區的大小（以位元組為單位）。
語法
參數
【緩衝】指向以前在函式呼叫中返回的函數資訊緩衝區。【ByteCount】緩衝區的大小。



-------------------------------------------------------- KeyGTK3Win32NetAuditClear ----
NetAuditClear    NetAuditClear函數已過時。它包含與16位版本的Windows相容。基於Win32的應用程式應該使用事件記錄.


-------------------------------------------------------- KeyGTK3Win32NetAuditRead ----
NetAuditRead    NetAuditRead函數已過時。它包含與16位版本的Windows相容。基於Win32的應用程式應該使用事件記錄.


-------------------------------------------------------- KeyGTK3Win32Netbios ----
{的NetBIOS} 999796002    Netbios的函數解釋並執行指定的網路控制塊（NCB）。
語法
參數
【pncb】指向描述網路控制塊的NCB結構的指標。
返回值
對於同步請求，返回值是NCB 結構的返回碼。該值也在NCB結構的ncb_retcode成員中返回。接受的非同步請求有兩個返回值的


-------------------------------------------------------- KeyGTK3Win32NetConfigGet ----
NetConfigGet    NetConfigGet函數已過時。它包含與16位版本的Windows相容。基於Win32的應用程式應使用註冊處.


-------------------------------------------------------- KeyGTK3Win32NetConfigGetAll ----
NetConfigGetAll    NetConfigGetAll函數已過時。它包含與16位版本的Windows相容。基於Win32的應用程式應使用註冊處.


-------------------------------------------------------- KeyGTK3Win32NetConfigSet ----
NetConfigSet    NetConfigSet函數已過時。它包含與16位版本的Windows相容。基於Win32的應用程式應使用註冊處.


-------------------------------------------------------- KeyGTK3Win32NetConnectionEnum ----
NetConnectionEnum    NetConnectionEnum函數已過時。它僅用於與LAN Manager和16位版本的Windows相容。基於Win32的應用程式應使用WNetEnumResource函數。


-------------------------------------------------------- KeyGTK3Win32NetErrorLogClear ----
NetErrorLogClear    NetErrorLogClear函數已過時。它包含與16位版本的Windows相容。基於Win32的應用程式應該使用事件記錄.


-------------------------------------------------------- KeyGTK3Win32NetErrorLogRead ----
NetErrorLogRead    NetErrorLogRead函數已過時。它包含與16位版本的Windows相容。基於Win32的應用程式應該使用事件記錄.


-------------------------------------------------------- KeyGTK3Win32NetFileClose ----
NetFileClose    在基於Win32的應用程式設計發展介面（API）中，NetFileClose函數已過時。它包含與16位版本的Windows相容。


-------------------------------------------------------- KeyGTK3Win32NetFileEnum ----
NetFileEnum    NetFileEnum函數提供有關伺服器上某些或所有打開檔的資訊，允許使用者提供一個簡歷控制碼，並通過重複調用函數獲取所需的資訊。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【基本路徑】指向包含返回資訊限定詞的Unicode字串。如果為NULL，則枚舉


-------------------------------------------------------- KeyGTK3Win32NetFileGetInfo ----
NetFileGetInfo    NetFileGetInfo函數檢索有關伺服器資源特定開放的資訊。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【FILEID】要向其返回資訊的打開資源的檔識別字。【FILEID】值必須是在


-------------------------------------------------------- KeyGTK3Win32NetGetAnyDCName ----
NetGetAnyDCName    NetGetAnyDCName函數獲取由伺服器名稱直接信任的域的任何網域控制站的名稱。
語法
參數
【ServerName】指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。【DomainName】指定域的名稱（主域為


-------------------------------------------------------- KeyGTK3Win32NetGetDCName ----
NetGetDCName    NetGetDCName函數返回指定域的網域主控站（PDC）的名稱。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【功能變數名稱】指向包含功能變數名稱稱的Unicode字串。【】 NULL指標或字串表示該函


-------------------------------------------------------- KeyGTK3Win32NetGetDisplayInformationIndex ----
NetGetDisplayInformationIndex    NetGetDisplayInformationIndex函數獲取第一個顯示資訊條目的索引，其名稱以指定的字串開頭，或按字母順序排列。您可以使用此函數確定對NetQueryDisplayInformation函數的後續調用的起始索引。
語法
參數
【ServerName】指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。【水準】指定以下值之一來返回提供的資訊級別。


-------------------------------------------------------- KeyGTK3Win32NetGroupAdd ----
NetGroupAdd    NetGroupAdd函數在安全資料庫中創建一個通用群組。
語法
參數
伺服器名稱指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。水準指定以下值之一來設置BUF參數中指向的資訊級別。值含義0指定組名。BUF參數包含


-------------------------------------------------------- KeyGTK3Win32NetGroupAddUser ----
NetGroupAddUser    NetGroupAddUser函數為現有通用群組中的現有使用者帳戶成員資格提供。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【GroupName】指向包含要向用戶提供成員身份的通用群組的名稱的Unicode


-------------------------------------------------------- KeyGTK3Win32NetGroupDel ----
NetGroupDel    NetGroupDel函數從帳戶資料庫中刪除全域群組帳戶。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【GROUPNAME】指向包含要刪除的全域群組帳戶名稱的Unicode字串。



-------------------------------------------------------- KeyGTK3Win32NetGroupDelUser ----
NetGroupDelUser    NetGroupDelUser函數從安全資料庫中的特定通用群組中刪除用戶。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【GroupName】指向一個Unicode字串，其中包含要從中刪除用戶成員身


-------------------------------------------------------- KeyGTK3Win32NetGroupEnum ----
NetGroupEnum    NetGroupEnum函數檢索有關每個全域群組帳戶的資訊。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【水準】指定以下值之一返回【bufptrig】參數中指向的資訊級別。值含義0返回


-------------------------------------------------------- KeyGTK3Win32NetGroupGetInfo ----
NetGroupGetInfo    NetGroupGetInfo函數檢索有關伺服器上特定全域群組帳戶的資訊。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【GROUPNAME】指向包含要在其上返回資訊的全域群組帳戶的名稱的Unicode


-------------------------------------------------------- KeyGTK3Win32NetGroupGetUsers ----
NetGroupGetUsers    NetGroupGetUsers函數檢索安全資料庫中特定通用群組成員的列表。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【GROUPNAME】指向包含要列出其成員的通用群組的名稱的Unicode字串。


-------------------------------------------------------- KeyGTK3Win32NetGroupSetInfo ----
NetGroupSetInfo    NetGroupSetInfo函數設置全域群組帳戶的參數。
語法
參數
伺服器名稱指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。GROUPNAME指向包含要設置資訊的全域群組帳戶名稱的Unicode字串。水準指定


-------------------------------------------------------- KeyGTK3Win32NetGroupSetUsers ----
NetGroupSetUsers    NetGroupSetUsers函數設置指定通用群組的通用群組成員資格。指定的每個用戶都是通用群組的成員。未指定但目前為全球組成員的用戶將被撤銷。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【GROUPNAME】指向包含指定用戶所屬的通用群組名稱的Unicode字串。【


-------------------------------------------------------- KeyGTK3Win32NetHandleGetInfo ----
NetHandleGetInfo    NetHandleGetInfo函數可檢索特定字元設備和具名管道控制碼的資訊。
語法
參數
【hHandle】標識通信設備佇列或具名管道。【sLevelen】指定要求的詳細程度（1或2）。注意只有當【hHandle】參數的值是遠端伺服器上存在的具名管道或字元設備的有效控制碼時，才能在


-------------------------------------------------------- KeyGTK3Win32NetHandleSetInfo ----
NetHandleSetInfo    NetHandleSetInfo函數設置字元設備和具名管道控制碼特定的資訊。
語法
參數
【hHandle】標識通信設備佇列或具名管道。【sLevelen】Specifies the level of detail provided; must be 1.【此函數通常用於生成隨機


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupAdd ----
NetLocalGroupAdd    NetLocalGroupAdd函數在安全資料庫中創建本機群組。
語法
參數
伺服器名稱指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。水準指定以下值之一來設置BUF參數中指向的資訊級別。值含義0指定用戶的本機群組名。指定


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupAddMember ----
NetLocalGroupAddMemberNetLocalGroupAddMember函數已過時。基於Win32的應用程式應使用NetLocalGroupAddMembers函數。


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupAddMembers ----
NetLocalGroupAddMembers    NetLocalGroupAddMembers函數將一個或多個現有使用者帳戶或通用群組的成員資格添加到現有本機群組。該函數不會更改當前是本機群組成員的用戶或通用群組的成員資格狀態。
語法
參數
【伺服器名稱】指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。【LocalGroupName】指向一個null終止的


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupDel ----
NetLocalGroupDel    NetLocalGroupDel函數從帳戶資料庫中刪除本地群組帳戶及其所有成員。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【LocalGroupName】指向包含要刪除的本地群組帳戶名稱的Unicode字


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupDelMember ----
NetLocalGroupDelMember    NetLocalGroupDelMember函數已過時。基於Win32的應用程式應使用NetLocalGroupDelMembers函數。


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupDelMembers ----
NetLocalGroupDelMembers    NetLocalGroupDelMembers函數從現有本機群組中刪除一個或多個成員。
語法
參數
【伺服器名稱】指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。【LocalGroupName】指向以null結尾的U


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupEnum ----
NetLocalGroupEnum    NetLocalGroupEnum函數檢索有關每個本地群組帳戶的資訊。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【水準】指定以下值之一返回【bufptrig】參數中指向的資訊級別。值含義0返回


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupGetInfo ----
NetLocalGroupGetInfo    NetLocalGroupGetInfo函數檢索有關伺服器上特定本地群組帳戶的資訊。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【LocalGroupName】指向包含要在其上返回資訊的本地群組帳戶的名稱的Un


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupGetMembers ----
NetLocalGroupGetMembers    NetLocalGroupGetMembers函數檢索安全資料庫中特定本機群組成員的列表。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【localgroupname】指向包含要列出其成員的本機群組的名稱的Unicod


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupSetInfo ----
NetLocalGroupSetInfo    NetLocalGroupSetInfo函數設置本機群組的參數。
語法
參數
伺服器名稱指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。LocalGroupName指向包含要設置資訊的本地群組帳戶名稱的Unicode字串


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupSetMembers ----
NetLocalGroupSetMembers    NetLocalGroupSetMembers函數設置指定本機群組的本機群組成員資格。指定的每個用戶或通用群組都是本機群組的成員。未指定但目前為本機群組成員的用戶或通用群組將撤銷成員身份。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【LocalGroupName】指向包含指定用戶或通用群組所屬的本機群組的名稱的Un


-------------------------------------------------------- KeyGTK3Win32NetMessageBufferSend ----
NetMessageBufferSend    NetMessageBufferSend函數將資訊緩衝區發送到已註冊的消息別名。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【msgname】指向包含應發送訊息緩衝區的消息名稱的Unicode字串。【F


-------------------------------------------------------- KeyGTK3Win32NetMessageNameAdd ----
NetMessageNameAdd    NetMessageNameAdd函數在消息名稱表中註冊消息別名。此函數要求啟動Messenger服務。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【msgname】指向包含要添加的消息名稱的Unicode字串。字串不能超過


-------------------------------------------------------- KeyGTK3Win32NetMessageNameDel ----
NetMessageNameDel    NetMessageNameDel函數從電腦上的消息別名表中刪除消息別名。此函數要求啟動Messenger服務。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【msgname】指向包含要刪除的消息名稱的Unicode字串。字串不能超過


-------------------------------------------------------- KeyGTK3Win32NetMessageNameEnum ----
NetMessageNameEnum    NetMessageNameEnum函數列出將在指定的電腦上接收消息的消息別名。此函數要求啟動Messenger服務。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【水準】指定以下值之一返回所提供的所請求的資訊級別。值含義0【bufptrig】


-------------------------------------------------------- KeyGTK3Win32NetMessageNameGetInfo ----
NetMessageNameGetInfo    NetMessageNameGetInfo函數在消息名稱表中檢索有關特定郵件別名的資訊。此函數要求啟動Messenger服務。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【msgname】指向包含要在其上返回資訊的消息名稱的Unicode字串。【水


-------------------------------------------------------- KeyGTK3Win32NetQueryDisplayInformation ----
NetQueryDisplayInformation    NetQueryDisplayInformation函數返回使用者，電腦或全域群組帳戶資訊。使用此函數快速枚舉使用者介面中顯示的帳號資訊。
語法
參數
【ServerName】指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。【水準】指定以下值之一來返回提供的資訊級別。


-------------------------------------------------------- KeyGTK3Win32NetRemoteTOD ----
NetRemoteTOD    NetRemoteTOD函數返回指定伺服器的時間資訊。
語法



-------------------------------------------------------- KeyGTK3Win32NetReplExportDirAdd ----
NetReplExportDirAdd    NetReplExportDirAdd函數在匯出路徑中註冊要複製的現有目錄。
語法
參數
伺服器名稱指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。水準指定以下值來設置提供的資訊級別。值含義1BUF參數指向


-------------------------------------------------------- KeyGTK3Win32NetReplExportDirDel ----
NetReplExportDirDel    NetReplExportDirDel函數刪除了複製目錄的註冊。
語法
參數
【伺服器名稱】指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。【目錄名】指向一個空值終止的Unicode字串，其中


-------------------------------------------------------- KeyGTK3Win32NetReplExportDirEnum ----
NetReplExportDirEnum    NetReplExportDirEnum函數列出匯出路徑中的複製目錄。
語法
參數
【伺服器名稱】指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。【水準】指定以下值之一來返回提供的資訊級別。值含義0【


-------------------------------------------------------- KeyGTK3Win32NetReplExportDirGetInfo ----
NetReplExportDirGetInfo    NetReplExportDirGetInfo函數檢索複製目錄的控制資訊。
語法
參數
【伺服器名稱】指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。【目錄名】指向一個以null結尾的Unicode字串


-------------------------------------------------------- KeyGTK3Win32NetReplExportDirLock ----
NetReplExportDirLock    NetReplExportDirLock函數鎖定複製目錄，以便可以暫停從其複製。此函數會增加指定目錄的鎖定引用計數。
語法
參數
【伺服器名稱】指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。【目錄名】指向一個null終止的Unicode字串，


-------------------------------------------------------- KeyGTK3Win32NetReplExportDirSetInfo ----
NetReplExportDirSetInfo    NetReplExportDirSetInfo函數修改複製目錄的控制資訊。
語法
參數
伺服器名稱指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。目錄名指向一個null終止的Unicode字串，其中包含


-------------------------------------------------------- KeyGTK3Win32NetReplExportDirUnlock ----
NetReplExportDirUnlock    NetReplExportDirUnlock函數解鎖了一個目錄，以便可以恢復它。該函數減少指定目錄的鎖引用計數。
語法
參數
【伺服器名稱】指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。【目錄名】指向一個null終止的Unicode字串，


-------------------------------------------------------- KeyGTK3Win32NetReplGetInfo ----
NetReplGetInfo    NetReplGetInfo函數檢索Replicator服務的配置資訊。
語法
參數
【伺服器名稱】指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。【水準】指定以下值返回提供的資訊級別。值含義0【buf


-------------------------------------------------------- KeyGTK3Win32NetReplImportDirAdd ----
NetReplImportDirAdd    NetReplImportDirAdd函數在導入路徑中註冊現有目錄，以從主機接收複製。
語法
參數
伺服器名稱指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。水準指定以下值來設置提供的資訊級別。值含義0BUF參數指向


-------------------------------------------------------- KeyGTK3Win32NetReplImportDirDel ----
NetReplImportDirDel    NetReplImportDirDel函數刪除目錄的註冊，使其不再從主機接收更新。請注意，該函數實際上並不從檔案系統中刪除該目錄。Replicator服務可以隨時自動註冊目錄服務。要防止導入某些Replicator服務匯出的目錄，請改用NetReplImportDirLock函數。
語法
參數
【伺服器名稱】指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。【目錄名】指向以空值終止的Unicode字串，其中包


-------------------------------------------------------- KeyGTK3Win32NetReplImportDirEnum ----
NetReplImportDirEnum    NetReplImportDirEnum函數列出導入路徑中的複製目錄。
語法
參數
【伺服器名稱】指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。【水準】指定以下值之一來返回提供的資訊級別。值含義0【


-------------------------------------------------------- KeyGTK3Win32NetReplImportDirGetInfo ----
NetReplImportDirGetInfo    NetReplImportDirGetInfo函數檢索用戶端複製目錄上的狀態資訊。
語法
參數
【伺服器名稱】指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。【目錄名】指向一個以null結尾的Unicode字串


-------------------------------------------------------- KeyGTK3Win32NetReplImportDirLock ----
NetReplImportDirLock    NetReplImportDirLock函數鎖定複製目錄，以便可以暫停對它的複製。此函數會增加指定目錄的鎖定引用計數。
語法
參數
【伺服器名稱】指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。【目錄名】指向一個null終止的Unicode字串，


-------------------------------------------------------- KeyGTK3Win32NetReplImportDirUnlock ----
NetReplImportDirUnlock    NetReplImportDirUnlock函數解鎖了一個目錄，以便可以恢復它。該函數減少指定目錄的鎖引用計數。
語法
參數
【伺服器名稱】指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。【目錄名】指向一個null終止的Unicode字串，


-------------------------------------------------------- KeyGTK3Win32NetReplSetInfo ----
NetReplSetInfo    NetReplSetInfo函數修改Replicator服務配置資訊。
語法
參數
伺服器名稱指向一個以null結尾的Unicode字串，其中包含要執行該函數的遠端伺服器的名稱。NULL指標或字串指定本地電腦。水準指定以下值之一來設置提供的資訊級別。值含義0BUF參數


-------------------------------------------------------- KeyGTK3Win32NetScheduleJobAdd ----
NetScheduleJobAdd    NetScheduleJobAdd函數提交作業以在指定的未來時間和日期運行。此函數要求在提交作業的電腦上啟動Schedule服務。
語法



-------------------------------------------------------- KeyGTK3Win32NetScheduleJobDel ----
NetScheduleJobDel    NetScheduleJobDel函數刪除排隊等待在電腦上運行的作業範圍。此函數要求在發送作業刪除請求的電腦上啟動計畫服務。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【MinJobId】最小作業識別字。作業識別字小於【MinJobId】的作業將不


-------------------------------------------------------- KeyGTK3Win32NetScheduleJobEnum ----
NetScheduleJobEnum    NetScheduleJobEnum函數列出了在指定電腦上排隊的作業。此函數要求啟動Schedule服務。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【PointerToBuffer】返回時，返回資訊結構的指標返回到【Pointe


-------------------------------------------------------- KeyGTK3Win32NetScheduleJobGetInfo ----
NetScheduleJobGetInfo    NetScheduleJobGetInfo函數檢索有關指定電腦上排隊的特定作業的資訊。此函數要求啟動Schedule服務。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【JobId】有關工作的工作識別字。【PointerToBuffer】返回指向緩


-------------------------------------------------------- KeyGTK3Win32NetServerDiskEnum ----
NetServerDiskEnum    NetServerDiskEnum函數檢索伺服器上的磁碟機列表。此函數將其結果作為三個字串的陣列（磁碟機代號，冒號，NULL）返回。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【水準】指定以下值返回提供的資訊級別。值含義100【bufptrig】參數指向S


-------------------------------------------------------- KeyGTK3Win32NetServerEnum ----
NetServerEnum    NetServerEnum函數列出了在指定域中可見的指定類型的所有伺服器。例如，應用程式可以調用NetServerEnum列出所有網域控制站或僅列出所有SQL伺服器。您可以組合位元遮罩列出幾種類型。例如，0x00000003的值組合了SV_TYPE_WORKSTATION（0x00000001）和SV_TYPE_SERVER（0x00000002）的位元遮罩。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【水準】指定以下值之一來返回提供的資訊級別。值含義100【bufptrig】參數


-------------------------------------------------------- KeyGTK3Win32NetServerGetInfo ----
NetServerGetInfo    NetServerGetInfo函數檢索有關指定伺服器的資訊。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【水準】指定以下值之一來返回提供的資訊級別。值含義100【bufptrig】參數


-------------------------------------------------------- KeyGTK3Win32NetServerSetInfo ----
NetServerSetInfo    NetServerSetInfo函數設置伺服器的指令引數;它可以單獨設置或集體設置。該資訊以允許系統重新初始化後保持有效的方式進行存儲。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【水準】要設置的資訊級別。SERVER_INFO_100，SERVER_INFO


-------------------------------------------------------- KeyGTK3Win32NetServerTransportAdd ----
NetServerTransportAdd    NetServerTransportAdd函數將伺服器綁定到傳輸。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【水準】指定以下值來設置提供的資訊級別。值含義0【bufptrig】參數指向SE


-------------------------------------------------------- KeyGTK3Win32NetServerTransportDel ----
NetServerTransportDel    NetServerTransportDel函數將傳輸協定從伺服器解除綁定（或斷開連接）。實際上，伺服器不能再使用傳輸協議與用戶端進行通信。伺服器將不再處理活動傳輸協議（如TCP，NetBEUI和XNS）的用戶端請求。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【transportname】指向包含要解除綁定的傳輸協定名稱的Unicode字


-------------------------------------------------------- KeyGTK3Win32NetServerTransportEnum ----
NetServerTransportEnum    NetServerTransportEnum函數提供有關由伺服器管理的傳輸的資訊。
語法



-------------------------------------------------------- KeyGTK3Win32NetServiceControl ----
NetServiceControl    NetServiceControl函數已過時。它包含與16位版本的Windows相容。基於Win32的應用程式應使用服務函數.


-------------------------------------------------------- KeyGTK3Win32NetServiceEnum ----
NetServiceEnum    NetServiceEnum函數已過時。它包含與16位版本的Windows相容。基於Win32的應用程式應使用服務函數.


-------------------------------------------------------- KeyGTK3Win32NetServiceGetInfo ----
NetServiceGetInfo    NetServiceGetInfo函數已過時。它包含與16位版本的Windows相容。基於Win32的應用程式應使用服務函數.


-------------------------------------------------------- KeyGTK3Win32NetServiceInstall ----
NetServiceInstall    NetServiceInstall函數已過時。它包含與16位版本的Windows相容。基於Win32的應用程式應使用服務函數.


-------------------------------------------------------- KeyGTK3Win32NetSessionDel ----
NetSessionDel    NetSessionDel函數結束伺服器和工作站之間的會話。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【UncClientName】指向包含要斷開連接的用戶端電腦名的Unicode


-------------------------------------------------------- KeyGTK3Win32NetSessionEnum ----
NetSessionEnum    NetSessionEnum函數提供有關所有當前會話的資訊。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【UncClientName】指向包含要返回資訊的電腦會話名稱的Unicode


-------------------------------------------------------- KeyGTK3Win32NetSessionGetInfo ----
NetSessionGetInfo    NetSessionGetInfo函數檢索有關在特定伺服器和工作站之間建立的會話的資訊。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【UncClientName】指向包含要返回資訊的電腦會話名稱的Unicode


-------------------------------------------------------- KeyGTK3Win32NetShareAdd ----
NetShareAdd    NetShareAdd函數共用伺服器資源。
語法
參數
伺服器名稱指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。水準指定以下值之一來設置提供的資訊級別。值含義2BUF參數指向SHARE_INFO_


-------------------------------------------------------- KeyGTK3Win32NetShareCheck ----
NetShareCheck    NetShareCheck函數檢查伺服器是否共用設備。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【設備】指向包含要檢查共用訪問的設備名稱的Unicode字串。【類型】指向包含


-------------------------------------------------------- KeyGTK3Win32NetShareDel ----
NetShareDel    NetShareDel函數從伺服器的共用資源清單中刪除共用名稱稱，斷開與共用資源的所有連接。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【網路名】指向包含要刪除的共用的網路名稱的Unicode字串。【保留的】保留，


-------------------------------------------------------- KeyGTK3Win32NetShareEnum ----
NetShareEnum    NetShareEnum函數已過時。它僅用於與LAN Manager和16位版本的Windows相容。基於Win32的應用程式應使用WNetEnumResource函數。


-------------------------------------------------------- KeyGTK3Win32NetShareGetInfo ----
NetShareGetInfo    NetShareGetInfo函數檢索有關伺服器上特定共用資源的資訊。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【網路名】指向包含要返回資訊的共用的網路名稱的Unicode字串。【水準】指定


-------------------------------------------------------- KeyGTK3Win32NetShareSetInfo ----
NetShareSetInfo    NetShareSetInfo函數設置共用資源的參數。
語法
參數
伺服器名稱指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。網路名指向包含要設置資訊的共用的網路名稱的Unicode字串。水準指定以下值之一來


-------------------------------------------------------- KeyGTK3Win32NetStatisticsGet ----
NetStatisticsGet    NetStatisicsGet函數已過時。基於Win32的應用程式應使用NetStatisticsGet2函數


-------------------------------------------------------- KeyGTK3Win32NetStatisticsGet2 ----
NetStatisticsGet2    NetStatisticsGet2檢索服務的運行統計資訊。目前，只支援Workstation和Server服務。
語法
參數
【伺服器】指向包含要在其上執行NetStatisticsGet2的伺服器名稱的Unicode字串。NULL指標或空字串指定本地電腦。【服務】指向一個Unicode字串，其中包含獲取統


-------------------------------------------------------- KeyGTK3Win32NetUseAdd ----
NetUseAdd    NetUseAdd函數已過時。它僅用於與LAN Manager和16位版本的Windows相容。基於Win32的應用程式應使用WNetAddConnection2函數。


-------------------------------------------------------- KeyGTK3Win32NetUseDel ----
NetUseDel    NetUseDel函數已過時。它僅用於與LAN Manager和16位版本的Windows相容。基於Win32的應用程式應使用WNetCancelConnection2函數。


-------------------------------------------------------- KeyGTK3Win32NetUseEnum ----
NetUseEnum    NetUseEnum函數已過時。它僅用於與LAN Manager和16位版本的Windows相容。基於Win32的應用程式應使用WNetEnumResource函數。


-------------------------------------------------------- KeyGTK3Win32NetUseGetInfo ----
NetUseGetInfo    NetUseGetInfo函數已過時。它僅用於與LAN Manager和16位版本的Windows相容。基於Win32的應用程式應使用WNetGetConnection函數。


-------------------------------------------------------- KeyGTK3Win32NetUserAdd ----
NetUserAdd    NetUserAdd函數添加使用者帳戶並分配密碼和許可權級別。
語法
參數
伺服器名稱指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。水準指定以下值之一來設置提供的資訊級別。值含義1BUF參數指向USER_INFO_1


-------------------------------------------------------- KeyGTK3Win32NetUserChangePassword ----
NetUserChangePassword    NetUserChangePassword函數可更改指定網路服務器或域的使用者密碼。
語法
參數
【功能變數名稱】指向指定遠端伺服器或域的名稱的以null結尾的Unicode字串的指標。NetUserChangePassword函數可以更改該遠端伺服器或域上的使用者密碼。【功能變數名稱】參數中的值為空，


-------------------------------------------------------- KeyGTK3Win32NetUserDel ----
NetUserDel    NetUserDel函數從伺服器中刪除使用者帳號。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【用戶名】指向要刪除的使用者帳戶名稱的Unicode字串。
描述
用戶或應用


-------------------------------------------------------- KeyGTK3Win32NetUserEnum ----
NetUserEnum    NetUserEnum函數提供有關伺服器上所有使用者帳戶的資訊。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【水準】指定以下值之一來返回提供的資訊級別。值含義0【bufptrig】參數指向


-------------------------------------------------------- KeyGTK3Win32NetUserGetGroups ----
NetUserGetGroups    NetUserGetGroups函數檢索指定使用者所屬的通用群組列表。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定在本地電腦上運行的伺服器程式。【用戶名】指向包含要在每個群組帳戶中搜索的用戶名稱的Unico


-------------------------------------------------------- KeyGTK3Win32NetUserGetInfo ----
NetUserGetInfo    NetUserGetInfo函數檢索有關伺服器上特定使用者帳戶的資訊。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【用戶名】指向包含要在其上返回資訊的使用者帳戶名稱的Unicode字串。【水準】


-------------------------------------------------------- KeyGTK3Win32NetUserGetLocalGroups ----
NetUserGetLocalGroups    NetUserGetLocalGroups函數檢索指定使用者所屬的本機群組列表。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【用戶名】指向包含用於返回通用群組成員身份的用戶名稱的Unicode字串。此參數


-------------------------------------------------------- KeyGTK3Win32NetUserModalsGet ----
NetUserModalsGet    NetUserModalsGet函數檢索安全資料庫中所有使用者和通用群組的全域資訊。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【水準】指定以下值之一來返回提供的資訊級別。值含義0【bufptrig】參數指向


-------------------------------------------------------- KeyGTK3Win32NetUserModalsSet ----
NetUserModalsSet    NetUserModalsSet函數為安全資料庫中的所有使用者和通用群組設置全域資訊。
語法
參數
伺服器名稱指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。水準指定以下值之一來設置提供的資訊級別。值含義0BUF參數指向USER_MODALS


-------------------------------------------------------- KeyGTK3Win32NetUserSetGroups ----
NetUserSetGroups    NetUserSetGroups函數為指定的使用者帳戶設置通用群組成員資格。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【用戶名】指向包含用於設置通用群組成員資格的用戶名稱的Unicode字串。【水準


-------------------------------------------------------- KeyGTK3Win32NetUserSetInfo ----
NetUserSetInfo    NetUserSetInfo函數設置使用者帳戶的參數。
語法
參數
伺服器名稱指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。用戶名指向包含使用者帳戶名稱的Unicode字串以設置資訊。水準指定以下值之一來設置


-------------------------------------------------------- KeyGTK3Win32NetWkstaGetInfo ----
NetWkstaGetInfo    NetWkstaGetInfo函數返回有關工作站的配置元素的資訊。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【水準】指定以下值之一來返回提供的資訊級別。值含義100【bufptrig】參數


-------------------------------------------------------- KeyGTK3Win32NetWkstaSetInfo ----
NetWkstaSetInfo    NetWkstaSetInfo函數配置工作站。該資訊在系統重新初始化後仍然有效。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【水準】指定以下值之一來設置提供的資訊級別。值含義100【緩衝】參數指向WKST


-------------------------------------------------------- KeyGTK3Win32NetWkstaTransportAdd ----
NetWkstaTransportAdd    NetWkstaTransportAdd函數將重定向器綁定（或連接）到傳輸器。重定向器是用戶端電腦上為伺服器電腦生成檔請求的軟體。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【水準】指定以下值來設置提供的資訊級別。值含義0【BUF】參數指向WKSTA_T


-------------------------------------------------------- KeyGTK3Win32NetWkstaTransportDel ----
NetWkstaTransportDel    NetWkstaTransportDel函數從轉發程式中取消綁定傳輸協定，這是用戶端電腦上向伺服器電腦生成檔請求的軟體。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【transportname】指向包含要解除綁定的傳輸名稱的Unicode字串


-------------------------------------------------------- KeyGTK3Win32NetWkstaTransportEnum ----
NetWkstaTransportEnum    NetWkstaTransportEnum函數提供有關由重定向器管理的傳輸協定的資訊，這是用戶端電腦上為伺服器電腦生成檔請求的軟體。
語法
參數
伺服器名稱Ppointer指向包含要在其上執行該函數的遠端伺服器的名稱的Unicode字串。NULL指標或字串指定本地電腦。水準指定以下值返回提供的資訊級別。值含義0bufptrig參


-------------------------------------------------------- KeyGTK3Win32NetWkstaUserEnum ----
NetWkstaUserEnum    NetWkstaUserEnum函數列出了有關當前登錄到工作站的所有使用者的資訊。此清單包括互動式，服務和批量登錄。
語法
參數
【伺服器名稱】指向包含要執行該函數的遠端伺服器名稱的Unicode字串。NULL指標或字串指定本地電腦。【水準】指定以下值之一來返回提供的資訊級別。值含義0【bufptrig】參數指向


-------------------------------------------------------- KeyGTK3Win32NetWkstaUserGetInfo ----
NetWkstaUserGetInfo    NetWkstaUserGetInfo函數返回有關當前登錄的使用者的資訊。必須在登錄使用者的上下文中調用此函數。
語法
參數
【保留的】此參數必須設置為NULL。【水準】指定以下值之一來返回提供的資訊級別。值含義0【bufptrig】參數指向WKSTA_USER_INFO_0結構。1【bufptrig】參數指向WK


-------------------------------------------------------- KeyGTK3Win32NetWkstaUserSetInfo ----
NetWkstaUserSetInfo    NetWkstaUserSetInfo函數設置有關工作站的配置元素的使用者特定資訊。
語法
參數
保留的該參數必須設置為零。水準指定以下值之一來設置提供的資訊級別。值含義0BUF參數指向WKSTA_USER_INFO_0結構。1BUF參數指向WKSTA_USER_INFO_1結構。110


-------------------------------------------------------- KeyGTK3Win32NotifyBootConfigStatus ----
NotifyBootConfigStatus    NotifyBootConfigStatus函數通知服務控制管理員有關啟動系統的配置的可接受性。可接受的配置觸發該配置的存儲作為最後一個已知的良好配置;不可接受的配置觸發系統重新開機。
語法



-------------------------------------------------------- KeyGTK3Win32NotifyChangeEventLog ----
NotifyChangeEventLog    NotifyChangeEventLog函數允許應用程式在將事件寫入【hEventLog】參數指定的事件日誌檔時收到通知。當事件寫入事件日誌檔時，該函數會使由【活動】參數指定的事件物件發出信號。
語法
參數
【hEventLog】處理通過調用OpenEventLog函數獲取的事件日誌檔。當事件被寫入此日誌檔時，【活動】指定的事件變為信號。【活動】一個Win32事件的控制碼。這是當事件寫入由【h


-------------------------------------------------------- KeyGTK3Win32ObjectCloseAuditAlarm ----
ObjectCloseAuditAlarm    當刪除物件的控制碼時，ObjectCloseAuditAlarm函數會生成審核消息。當前版本的Windows NT不支持警報。
語法
參數
【SubsystemName】指向一個以null結尾的字串，指定調用該函數的子系統的名稱，例如“DEBUG”或“WIN32”。【HandleId】指定一個唯一的32位元值，表示用戶端物件的句


-------------------------------------------------------- KeyGTK3Win32ObjectDeleteAuditAlarm ----
ObjectDeleteAuditAlarm    [New - Windows NT]刪除物件時，ObjectDeleteAuditAlarm函數會生成審核消息。Windows NT安全性不支援警報。
語法
參數
【SubsystemName】指向以null結尾的字串的指標，指定調用該函數的子系統的名稱;例如“DEBUG”或“WIN32”。此字串顯示在該物件的審核日誌中。【HandleId】指定一


-------------------------------------------------------- KeyGTK3Win32ObjectOpenAuditAlarm ----
ObjectOpenAuditAlarm    當用戶端應用程式嘗試訪問物件或創建新物件時，ObjectOpenAuditAlarm函數將生成審核消息。當前版本的Windows NT不支持警報。
語法
參數
【SubsystemName】指向一個以null結束的字串，指定調用此函數的子系統，例如“DEBUG”或“WIN32”。【HandleId】指向一個唯一的32位元值，表示用戶端物件的控制碼。如


-------------------------------------------------------- KeyGTK3Win32ObjectPrivilegeAuditAlarm ----
ObjectPrivilegeAuditAlarm    由於用戶端嘗試使用該物件已經打開的控制碼對伺服器應用程式物件執行特權操作，ObjectPrivilegeAuditAlarm函數將生成審核消息。當前版本的Windows NT不支持警報。
語法
參數
【SubsystemName】指向一個以null結尾的字串，指定調用函數的子系統的名稱;例如“DEBUG”或“WIN32”。【HandleId】指向一個唯一的32位元值，表示用戶端物件的控制碼


-------------------------------------------------------- KeyGTK3Win32OemKeyScan ----
OemKeyScan    OEM代碼0到0x0FF的OemKeyScan函數將映射到OEM掃描代碼和移位元狀態。該函數提供的資訊允許程式通過類比鍵盤輸入將OEM文本發送到另一個程式。
語法
參數
【wOemChar】指定OEM字元的ASCII值。
返回值
如果函數成功，返回值的低位元字包含給定OEM字元的掃描碼，高位字包含移位元狀態，它可以是以下標誌位元的組合：位含義1按SHIFT鍵。


-------------------------------------------------------- KeyGTK3Win32OemToAnsi ----
OemToAnsi  OemToAnsi函數已過時。為了與16位元版本的Windows相容，此函數實現為調用OemToChar函數的巨集，該函數應用於新的基於Win32的應用程式。


-------------------------------------------------------- KeyGTK3Win32OemToAnsiBuff ----
OemToAnsiBuff  OemToAnsiBuff函數已過時。為了與16位元版本的Windows相容，此函數實現為調用OemToCharBuff函數的巨集，該函數應用於基於Win32的應用程式。


-------------------------------------------------------- KeyGTK3Win32OemToChar ----
OemToChar    OemToChar函數將一個字串從OEM定義的字元集轉換為ANSI或寬字串。（OEM代表原始設備製造商。）此函數取代OemToAnsi函數。
語法
參數
【lpszSrc】指向OEM定義的字元集中以空字元結尾的字串。【lpszDst】指向緩衝區的翻譯字串。如果OemToChar函數用作ANSI函數，則可以通過將【lpszDst】參數設置為


-------------------------------------------------------- KeyGTK3Win32OemToCharBuff ----
OemToCharBuff    OemToCharBuff函數將字串中指定數量的字元從OEM定義的字元集轉換為ANSI或寬字串。（OEM代表原始設備製造商。）此函數取代OemToAnsiBuff函數。
語法
參數
【lpszSrc】指向包含OEM定義字元集中的一個或多個字元的緩衝區。【lpszDst】指向緩衝區的翻譯字串。如果OemToCharBuff函數用作ANSI函數，則可以通過將【lpszDs


-------------------------------------------------------- KeyGTK3Win32OffsetClipRgn ----
OffsetClipRgn    OffsetClipRgn函數將設備上下文的裁剪區域移動指定的偏移量。
語法
參數
【HDC】標識設備上下文。【nXOffset】指定向左或向右移動的邏輯單位數。【nYOffset】指定上下移動的邏輯單位數。
返回值
如果函數成功，則返回值指定新區域的複雜度，並且可以是


-------------------------------------------------------- KeyGTK3Win32OffsetRect ----
OffsetRect    OffsetRect函數將指定的矩形移動指定的偏移量。
語法
參數
【LPRC】指向包含要移動的矩形的邏輯座標的RECT結構。【dx】指定向左或向右移動矩形的量。此參數必須是負值才能將矩形向左移動。【dy】指定向上或向下移動矩形的量。此參數必須為負值才能將矩


-------------------------------------------------------- KeyGTK3Win32OffsetRgn ----
OffsetRgn    OffsetRgn函數將區域移動指定的偏移量。
語法



-------------------------------------------------------- KeyGTK3Win32OffsetViewportOrgEx ----
OffsetViewportOrgEx    OffsetViewportOrgEx函數使用指定的水準和垂直偏移修改設備上下文的視口原點。
語法
參數
【HDC】標識設備上下文。【nXOffset】以設備為單位指定水準偏移。【nYOffset】以設備為單位指定垂直偏移。【LPPOINT】指向POINT結構。以前的視口原點（以設備為單位）放置


-------------------------------------------------------- KeyGTK3Win32OffsetWindowOrgEx ----
OffsetWindowOrgEx    OffsetWindowOrgEx函數使用指定的水準和垂直偏移修改設備上下文的視窗原點。
語法



-------------------------------------------------------- KeyGTK3Win32OFNHookProc ----
OFNHookProc    一個OFNHookProc掛接過程是一個應用程式定義或庫定義的回檔過程，它與Explorer風格的Open和Save As常用對話方塊一起使用。掛鉤過程接收從公共對話方塊發送的通知消息。掛鉤過程還會接收通過指定子對話方塊範本定義的任何其他控制項的消息。如果您在創建“打開”或“另存為公共”對話方塊時未指定OFN_EXPLORER標誌，並且希望使用掛鉤過程，則必須使用舊式OFNHookProcOldStyle掛接過程。在這種情況下，對話方塊將具有舊式使用者介面。
語法
參數
【hdlg】處理“打開”或“另存為”對話方塊的子對話方塊。使用GetParent函數獲取打開或另存為對話方塊視窗的控制碼。【uiMsg】標識正在接收的消息。【wParam中】指定有關該消息的附加資訊


-------------------------------------------------------- KeyGTK3Win32OFNHookProcOldStyle ----
OFNHookProcOldStyle    一個OFNHookProcOldStyle掛接過程是一個應用程式定義或庫定義的回檔過程，與“打開和另存為”常用對話方塊一起使用。掛鉤過程接收針對對話方塊過程的消息或通知。如果您在創建“打開”或“另存為公共”對話方塊時指定OFN_EXPLORER標誌，並且想要掛鉤過程，則必須使用資源管理器風格的OFNHookProc掛接過程。
語法
參數
【hdlg】處理打開或另存為對話方塊視窗，其消息的目的是。【uiMsg】標識正在接收的消息。【wParam中】指定有關該消息的附加資訊。具體含義取決於【uiMsg】參數的值。【lParam的】


-------------------------------------------------------- KeyGTK3Win32OpenBackupEventLog ----
OpenBackupEventLog    OpenBackupEventLog函數打開備份事件日誌的控制碼。該手柄可以與BackupEventLog函數一起使用。
語法
參數
【lpUNCServerName】指向以空字元結尾的字串，該字串指定要執行此操作的伺服器的通用命名慣例（UNC）名稱。如果此參數為NULL，則在本地電腦上執行該操作。【lpFileNa


-------------------------------------------------------- KeyGTK3Win32OpenClipboard ----
OpenClipboard    OpenClipboard函數打開剪貼板進行檢查，並阻止其他應用程式修改剪貼板內容。
語法
參數
【hWndNewOwner】標識與打開的剪貼板關聯的視窗。如果此參數為NULL，則打開的剪貼板與當前任務相關聯。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展


-------------------------------------------------------- KeyGTK3Win32OpenDesktop ----
OpenDesktop    OpenDesktop函數返回一個現有桌面的控制碼。桌面是包含在視窗站物件內的安全物件。桌面具有邏輯顯示面，並包含視窗，功能表和掛鉤。
語法
參數
【lpszDesktop】指向以空字元結尾的字串，指定要打開的桌面的名稱。桌面名稱不區分大小寫。【dwFlags中】一個位標誌參數，用於控制呼叫應用程式將如何與桌面上的其他應用程式配合使用


-------------------------------------------------------- KeyGTK3Win32OpenEvent ----
OpenEvent    OpenEvent函數返回現有命名事件物件的控制碼。
語法
參數
【dwDesiredAccess】指定對事件物件的請求訪問。對於支持對象安全性的系統，如果指定物件的安全性描述元不允許調用進程的請求訪問，則該函數將失敗。此參數可以是以下值的任意組合：訪問描述


-------------------------------------------------------- KeyGTK3Win32OpenEventLog ----
OpenEventLog    OpenEventLog函數打開事件日誌的控制碼。
語法
參數
【lpUNCServerName】指向以空字元結尾的字串，指定要在其上打開事件日誌的伺服器的通用命名慣例（UNC）名稱。如果此參數為NULL，則在本地電腦上打開該日誌。【lpSource


-------------------------------------------------------- KeyGTK3Win32OpenFile ----
OpenFile    OpenFile函數創建，打開，重新打開或刪除檔。此函數用於與16位元版本的Windows相容。特別地，OpenFile函數無法打開具名管道。基於Win32的應用程式應使用CreateFile函數。
語法
參數
【lpFileName】指向以空字元結尾的字串，命名要打開的檔。字串必須包含來自Windows 3.【x】字元集的字元。OpenFile函數不支援Unicode檔案名。【lpReOpe


-------------------------------------------------------- KeyGTK3Win32OpenFileMapping ----
OpenFileMapping    OpenFileMapping函數打開一個命名的檔映射物件。
語法
參數
【dwDesiredAccess】指定對檔映射物件的訪問。Windows NT：對目的檔案映射物件上的任何安全性描述元檢查此訪問。Windows 95：Windows 95不支援檔映射物件


-------------------------------------------------------- KeyGTK3Win32OpenIcon ----
OpenIcon    OpenIcon函數將最小化（標誌性）視窗恢復到其先前的大小和位置;然後啟動視窗。
語法
參數
【的hWnd】標識要恢復和啟動的窗口。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
OpenIcon向給


-------------------------------------------------------- KeyGTK3Win32OpenInputDesktop ----
OpenInputDesktop    OpenInputDesktop函數返回一個接收使用者輸入的桌面的控制碼。輸入桌面是與登錄使用者相關聯的視窗臺上的桌面。
語法
參數
【dwFlags中】一個位標誌參數，用於控制呼叫應用程式將如何與桌面上的其他應用程式配合使用。此參數可以指定零或以下值：值描述DF_ALLOWOTHERACCOUNTHOOK允許進程在桌面上


-------------------------------------------------------- KeyGTK3Win32OpenMutex ----
OpenMutex    OpenMutex函數返回一個現有的命名互斥物件的控制碼。
語法
參數
【dwDesiredAccess】指定對互斥體對象的請求訪問。對於支持對象安全性的系統，如果指定物件的安全性描述元不允許調用進程的請求訪問，則該函數將失敗。此參數可以是以下值的任意組合：訪問描


-------------------------------------------------------- KeyGTK3Win32OpenPrinter ----
OpenPrinter    OpenPrinter函數可檢索識別指定印表機或印表伺服器的控制碼。
語法
參數
【pPrinterName】指向以空字元結尾的字串，指定印表機或印表伺服器的名稱。【phPrinter】指向接收標識打開的印表機或印表伺服器物件的控制碼的變數。【pDefault】指向PRI


-------------------------------------------------------- KeyGTK3Win32OpenProcess ----
OpenProcess    OpenProcess函數返回現有進程物件的控制碼。
語法
參數
【dwDesiredAccess】指定對進程物件的訪問。對於支援安全檢查的作業系統，將針對目標進程的任何安全性描述元檢查此訪問。除了STANDARD_RIGHTS_REQUIRED訪問標誌之外


-------------------------------------------------------- KeyGTK3Win32OpenProcessToken ----
OpenProcessToken    OpenProcessToken函數打開與進程關聯的訪問權杖。
語法
參數
【ProcessHandle】標識訪問權杖打開的進程。【DesiredAccess】指定一個存取遮罩，指定訪問權杖的請求類型。這些請求的訪問類型與權杖的自由存取控制清單（ACL）進行比較，以


-------------------------------------------------------- KeyGTK3Win32OpenSCManager ----
OpenSCManager    OpenSCManager函數在指定的電腦上建立與服務控制管理器的連接，並打開指定的資料庫。
語法
參數
【lpMachineName】指向以目的電腦命名的以null結尾的字串。如果指標為NULL或指向空字串，則該函數將連接到本地電腦上的服務控制管理器。【lpDatabaseName】指


-------------------------------------------------------- KeyGTK3Win32OpenSemaphore ----
OpenSemaphore    OpenSemaphore函數返回一個現有的命名信號量物件的控制碼。
語法
參數
【dwDesiredAccess】指定對信號量物件的請求訪問。對於支持對象安全性的系統，如果指定物件的安全性描述元不允許調用進程的請求訪問，則該函數將失敗。此參數可以是以下值的任意組合：訪問描


-------------------------------------------------------- KeyGTK3Win32OpenService ----
OpenService    OpenService函數打開現有服務的控制碼。
語法
參數
【hSCManager】標識服務控制管理器（SCM）資料庫。OpenSCManager函數返回此控制碼。【lpServiceName】指向以空字元結尾的字串，命名要打開的服務。最大字串長度


-------------------------------------------------------- KeyGTK3Win32OpenThreadToken ----
OpenThreadToken    OpenThreadToken函數打開與執行緒相關聯的訪問權杖。
語法
參數
【ThreadHandle】標識其訪問權杖被打開的執行緒。【DesiredAccess】指定一個存取遮罩，指定訪問權杖的請求類型。這些請求的訪問類型與權杖的自由存取控制清單（ACL）進行協調，


-------------------------------------------------------- KeyGTK3Win32OpenWaitableTimer ----
OpenWaitableTimer    [New - Windows NT]OpenWaitableTimer函數返回一個現有命名的“等待”計時器物件的控制碼。
語法
參數
【dwDesiredAccess】指定對計時器對象的請求訪問。對於支持對象安全性的系統，如果指定物件的安全性描述元不允許調用進程的請求訪問，則該函數將失敗。此參數可以是以下值的任意組合：值含義


-------------------------------------------------------- KeyGTK3Win32OpenWindowStation ----
OpenWindowStation    OpenWindowStation函數返回一個現有視窗站的控制碼。
語法
參數
【lpszWinSta】指向以空字元結尾的字串，指定要打開的視窗站的名稱。窗口站名稱不區分大小寫。【Finherit】指定在創建新進程時是否繼承返回的控制碼。如果此值為TRUE，則新進程將繼


-------------------------------------------------------- KeyGTK3Win32ORASADFunc ----
ORASADFunc    ORASADFunc函數是一個應用程式定義的回呼函數，可用於為自動撥號提供自訂使用者介面。提供此原型是為了與早期版本的Windows相容。新應用程式應使用RASADFunc回呼函數。在以後版本的RAS中可能會刪除對該原型的支持。
語法
參數
【hwndOwner】處理所有者視窗。【lpszEntry】指向指定要使用的電話簿條目的以空值終止的字串的指標。【dwFlags中】Reserved; must be zero.【lpdw


-------------------------------------------------------- KeyGTK3Win32OutputDebugString ----
OutputDebugString    OutputDebugString函數向當前應用程式的調試器發送一個字串。
語法



-------------------------------------------------------- KeyGTK3Win32OutputProc ----
OutputProc    OutputProc函數是一個應用程式定義的回呼函數，它通過調用GrayString函數來繪製一個字串。
語法
參數
【HDC】標識至少具有【nWidth】和【nHeight參數】傳遞給GrayString的參數指定的寬度和高度的點陣圖的設備上下文。【的lpData】指向要繪製的字串。【//要繪製的字串的


-------------------------------------------------------- KeyGTK3Win32PackDDElParam ----
PackDDElParam    PackDDElParam函數將DDE 【lParam的】值打包到用於在進程之間共用DDE資料的內部結構中。
語法
參數
【味精】指定要發佈的DDE消息。【uiLoga】指定與要發佈的DDE消息的{389796046}參數的Windows 3.【x】低位字對應的值。【uiHi】指定對應於要發佈的DDE消息的{3


-------------------------------------------------------- KeyGTK3Win32PagePaintHook ----
PagePaintHook    一個PagePaintHook掛接過程是與“頁面設置”對話方塊一起使用的應用程式定義或庫定義的回檔過程。掛鉤過程接收允許您在“頁面設置”對話方塊中自訂樣本頁面的消息。
語法
參數
【hdlg】處理頁面設置對話方塊視窗。【uiMsg】標識正在接收的消息。【wParam中】指定有關該消息的附加資訊。具體含義取決於【uiMsg】參數的值。【lParam的】指定有關該消息的附加


-------------------------------------------------------- KeyGTK3Win32PageSetupDlg ----
PageSetupDlg    PageSetupDlg函數創建一個“頁面設置”對話方塊，使使用者可以指定列印頁面的屬性。這些屬性包括紙張尺寸和來源，頁面方向（縱向或橫向）以及頁邊距的寬度。
語法
參數
【lppsd】指向PAGESETUPDLG結構的指標，其中包含用於初始化對話方塊的資訊。當函數返回時，結構接收有關使用者選擇的資訊。
返回值
如果使用者按一下確定按鈕，則返回值不為零。PAGES


-------------------------------------------------------- KeyGTK3Win32PageSetupHook ----
PageSetupHook    一個PageSetupHook掛接過程是與頁面設置公用對話方塊一起使用的應用程式定義或庫定義的回檔過程。掛鉤過程接收預設對話方塊過程的消息或通知。
語法
參數
【hdlg】處理該消息所針對的頁面設置對話方塊視窗。【uiMsg】標識正在接收的消息。【wParam中】指定有關該消息的附加資訊。具體含義取決於【uiMsg】參數的值。【lParam的】指定有


-------------------------------------------------------- KeyGTK3Win32PaintDesktop ----
PaintDesktop    [Now Supported on Windows NT]PaintDesktop函數使用桌面圖案或壁紙填充指定設備上下文中的裁剪區域。該函數主要用於外殼桌面。
語法



-------------------------------------------------------- KeyGTK3Win32PaintRgn ----
PaintRgn    PaintRgn函數通過使用當前選定的畫筆在設備上下文中繪製指定的區域。
語法
參數
【HDC】標識設備上下文。【HRGN】標識要填充的區域。該區域的座標被推定為邏輯座標。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32PatBlt ----
PatBlt    PatBlt函數使用當前在指定設備上下文中選擇的畫筆來繪製給定的矩形。通過使用給定的光柵操作來組合畫筆顏色和表面顏色。
語法
參數
【HDC】標識設備上下文。【nXLeft】指定要填充的矩形左上角的x座標（以邏輯為單位）。【nYLeft】指定要填充的矩形左上角的y座標（以邏輯為單位）。【nWidth】指定矩形的邏輯單位寬


-------------------------------------------------------- KeyGTK3Win32PathToRegion ----
PathToRegion    PathToRegion函數從選擇到指定設備上下文的路徑中創建一個區域。
語法
參數
【HDC】標識包含封閉路徑的設備上下文。
返回值
如果函數成功，則返回值標識有效區域。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.GetLastErro


-------------------------------------------------------- KeyGTK3Win32PeekConsoleInput ----
PeekConsoleInput    PeekConsoleInput函數從指定的控制台輸入緩衝區中讀取資料，而不從緩衝區中刪除它。
語法
參數
【hConsoleInput】標識輸入緩衝區。控制碼必須具有GENERIC_READ許可權。【lpBuffer】指向接收輸入緩衝區資料的INPUT_RECORD緩衝區。【nLength】指定由【


-------------------------------------------------------- KeyGTK3Win32PeekMessage ----
PeekMessage    PeekMessage函數檢查執行緒訊息佇列中的消息，並將消息（如果有）放在指定的結構中。
語法
參數
【LPMSG】指向MSG結構，其中包含基於Windows的應用程式佇列中的消息資訊。【的hWnd】標識要檢查其消息的視窗。【wMsgFilterMin】指定要檢查的消息範圍內的第一條消息的值


-------------------------------------------------------- KeyGTK3Win32PeekNamedPipe ----
PeekNamedPipe    PeekNamedPipe函數將資料從命名或匿名管道複製到緩衝區，而不從管道中刪除。它還返回有關管道中資料的資訊。
語法
參數
【hNamedPipe】標識管道。該參數可以是CreateNamedPipe或CreateFile函數返回的具名管道實例的控制碼，或者它可以是CreatePipe函數返回的匿名管道的讀取端的句


-------------------------------------------------------- KeyGTK3Win32Pie ----
餡餅    餡餅函數繪製一個由橢圓和兩個徑向交點界定的餅形楔形。通過使用當前筆並使用當前畫筆填充圓形圖。BOOL Pie(HDC 【HDC】,//處理設備上下文INT 【nLeftRect】,// x-coord。邊框的左上角INT 【nTopRect】,//的y座標。邊框的左上角INT 【nRightRect】,// x-coord。邊框的右下角INT 【nBottomRect】,//的y座標。邊框的右下角INT 【nXRadial1】,// x-coord。的第一個徑向的終點INT 【nYRadial1】,//的y座標。的第一個徑向的終點INT 【nXRadial2】,// x-coord。的第二徑向端點INT 【nYRadial2】//的y座標。的第二徑向端點);
參數
【HDC】標識設備上下文。【nLeftRect】指定邊界矩形左上角的x座標。【nTopRect】指定邊界矩形左上角的y座標。【nRightRect】指定邊界矩形右下角的x座標。【nBotto


-------------------------------------------------------- KeyGTK3Win32PlayEnhMetaFile ----
PlayEnhMetaFile    PlayEnhMetaFile函數顯示存儲在指定的增強格式圖中繼檔中的圖片。
語法
參數
【HDC】標識出現圖像的輸出設備的設備上下文。【HEMF】識別增強的圖中繼檔。【LPRECT】指向RECT結構，其中包含用於顯示圖片的邊界矩形的座標。座標以邏輯單位指定。
返回值
如果函


-------------------------------------------------------- KeyGTK3Win32PlayEnhMetaFileRecord ----
PlayEnhMetaFileRecord    通過執行由記錄識別的圖形裝置介面（GDI）函數，PlayEnhMetaFileRecord函數播放增強型中繼檔記錄。
語法
參數
【HDC】標識傳遞給EnumEnhMetaFile函數的設備上下文。【這裡ndletable】指向演示圖中繼檔時使用的GDI物件的控制碼表。此表中的第一個條目包含增強型圖中繼檔控制碼。【lpEn


-------------------------------------------------------- KeyGTK3Win32PlayMetaFile ----
PlayMetaFile    PlayMetaFile函數顯示存儲在指定設備上給定的Windows格式中繼檔的圖片。此函數用於與16位元版本的Windows相容。基於Win32的應用程式應使用PlayEnhMetaFile函數。
語法
參數
【HDC】標識設備上下文。【HMF】標識Windows格式的圖中繼檔。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
Windows格式的圖中繼檔不支持新的曲


-------------------------------------------------------- KeyGTK3Win32PlayMetaFileRecord ----
PlayMetaFileRecord    PlayMetaFileRecord函數通過執行該記錄中包含的圖形裝置介面（GDI）函數來播放Windows格式的圖中繼檔記錄。此函數用於與16位元版本的Microsoft Windows相容。基於Win32的應用程式應使用PlayEnhMetaFileRecord函數。
語法
參數
【HDC】標識設備上下文。【這裡ndletable】指向演示圖中繼檔時使用的GDI物件的控制碼表。【lpMetaRecord】指向Windows格式的圖中繼檔記錄。【nHandles】指定控制碼


-------------------------------------------------------- KeyGTK3Win32PlgBlt ----
PlgBlt    PlgBlt函數執行將源設備上下文中指定矩形的顏色資料位元的位元塊傳輸到目標設備上下文中指定的平行四邊形。如果給定的位元遮罩控制碼識別有效的單色點陣圖，則該函數使用該點陣圖來遮罩源矩形中顏色資料的位元。
語法
參數
【hdcDest】標識目標設備上下文。【LPPOINT】指向邏輯空間中的三個點的陣列，其中標識目標平行四邊形的三個角。源矩形的左上角被映射到該陣列中的第一個點，右上角到該陣列中的第二個點，左


-------------------------------------------------------- KeyGTK3Win32PolyBezier ----
PolyBezier    PolyBezier函數繪製一個或多個B zier曲線。
語法
參數
【HDC】標識設備上下文。【LPPT】指向包含曲線的端點和控制點的POINT結構陣列。【cPointsen】指定【LPPT】陣列中的點數。該值必須是要繪製的曲線數量的三倍以上，因為每個B z


-------------------------------------------------------- KeyGTK3Win32PolyBezierTo ----
PolyBezierTo    PolyBezierTo函數繪製一個或多個B zier曲線。
語法
參數
【HDC】標識設備上下文。【LPPT】指向包含端點和控制點的POINT結構陣列。【cCount】指定【LPPT】陣列中的點數。該值必須是要繪製的曲線數量的三倍，因為每個B zier曲線需要兩


-------------------------------------------------------- KeyGTK3Win32PolyDraw ----
PolyDraw    PolyDraw函數繪製一組線段和B zier曲線。
語法
參數
【HDC】標識設備上下文。【LPPT】指向POINT結構的陣列，其中包含每個線段的端點以及每個B zier曲線的端點和控制點。【lpbTypes】指向一個陣列，指定如何使用【LPPT】陣列中


-------------------------------------------------------- KeyGTK3Win32Polygon ----
多邊形    多邊形函數繪製由直線連接的兩個或多個頂點組成的多邊形。使用當前筆並使用當前畫筆和多邊形填充模式填充多邊形。BOOL Polygon(HDC 【HDC】,//處理設備上下文CONST POINT *【lpPoints】,//指向多邊形頂點的指標INT 【NCOUNT】//多邊形頂點數);
參數
【HDC】標識設備上下文。【lpPoints】指向指定多邊形頂點的POINT結構陣列。【NCOUNT】指定陣列中的頂點數。該值必須大於或等於2。
返回值
如果函數成功，返回值不為零。如果


-------------------------------------------------------- KeyGTK3Win32Polyline ----
折線    折線函數通過連接指定陣列中的點來繪製一系列線段。BOOL Polyline(HDC 【HDC】,//設備上下文的控制碼CONST POINT *【LPPT】,//包含端點的陣列的位址INT 【cPointsen】//陣列中的點數);
參數
【HDC】標識設備上下文。【LPPT】指向POINT結構的陣列。陣列中的每個結構標識邏輯空間中的一個點。【cPointsen】指定陣列中的點數。該數位必須大於或等於2。
返回值
如果函數


-------------------------------------------------------- KeyGTK3Win32PolylineTo ----
PolylineTo    PolylineTo函數繪製一條或多條直線。
語法
參數
【HDC】標識設備上下文。【LPPT】指向包含該行頂點的POINT結構的陣列。【cCount】指定陣列中的點數。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述



-------------------------------------------------------- KeyGTK3Win32PolyPolygon ----
PolyPolygon    PolyPolygon函數繪製一系列封閉的多邊形。通過使用當前筆並使用當前畫筆和多邊形填充模式填充每個多邊形。由此函數繪製的多邊形可以重疊。
語法
參數
【HDC】標識設備上下文。【lpPoints】指向定義多邊形頂點的POINT結構陣列。多邊形連續指定。每個多邊形通過從最後一個頂點到第一個頂點繪製一條線來自動關閉。每個頂點應該被指定一次。【


-------------------------------------------------------- KeyGTK3Win32PolyPolyline ----
PolyPolyline    PolyPolyline函數可繪製多個連接的線段。
語法
參數
【HDC】標識設備上下文。【LPPT】指向包含折線的頂點的POINT結構的陣列。折線是連續指定的。【lpdwPolyPoints】指向一組變數，指定相應折線的【LPPT】陣列中的點數。每個條


-------------------------------------------------------- KeyGTK3Win32PolyTextOut ----
PolyTextOut    PolyTextOut函數使用當前在指定的設備上下文中選擇的字體和文本顏色繪製多個字串。
語法
參數
【HDC】標識設備上下文。【pptxt】指向描述要繪製的字串的POLYTEXT結構的陣列。該陣列包含要繪製的每個字串的一個結構。【cStrings】指定【pptxt】陣列中POLYTEX


-------------------------------------------------------- KeyGTK3Win32PostAppMessage ----
PostAppMessage    PostAppMessage函數已過時。該函數僅用於與16位元版本的Windows相容。基於Win32的應用程式應使用PostThreadMessage函數。


-------------------------------------------------------- KeyGTK3Win32PostMessage ----
PostMessage    PostMessage函數將消息放置在與創建指定視窗的執行緒相關聯的訊息佇列中，然後返回，而不等待中的執行緒處理消息。通過調用GetMessage或PeekMessage函數檢索訊息佇列中的消息。
語法
參數
【的hWnd】標識視窗程式接收消息的視窗。兩個值有特殊含義：值含義HWND_BROADCAST該消息被發佈到系統中的所有頂級視窗，包括禁用或不可見的未知視窗，重疊視窗和快顯視窗。消息未發佈到


-------------------------------------------------------- KeyGTK3Win32PostQueuedCompletionStatus ----
PostQueuedCompletionStatus    通過PostQueuedCompletionStatus函數，您可以將I / O完成資料包發送到I / O完成埠。I / O完成資料包將滿足對GetQueuedCompletionStatus函數的未完成調用。GetQueuedCompletionStatus函數返回三個作為調用PostQueuedCompletionStatus的第二個，第三個和第四個參數傳遞的值。
語法
參數
【CompletionPort】處理要發佈I / O完成資料包的I / O完成埠。【dwNumberOfBytesTransferred】指定通過GetQueuedCompletionSt


-------------------------------------------------------- KeyGTK3Win32PostQuitMessage ----
PostQuitMessage    PostQuitMessage函數向Windows指出執行緒已經請求終止（退出）。它通常用於回應WM_DESTROY消息。
語法
參數
【nExitCode】指定應用程式退出代碼。該值用作WM_QUIT消息的【wParam中】參數。
返回值
此函數不返回值。
描述
PostQuitMessage函數向執行緒的訊息佇列發


-------------------------------------------------------- KeyGTK3Win32PostThreadMessage ----
PostThreadMessage    PostThreadMessage函數將消息放置在指定執行緒的訊息佇列中，然後返回，而不等待中的執行緒處理消息。
語法
參數
【idThread】標識消息將被發佈到的執行緒。如果指定的執行緒沒有訊息佇列，該函數將失敗。當執行緒首次調用Win32 USER或GDI函數之一時，系統會創建執行緒的訊息佇列。有關詳細資訊，請參閱備


-------------------------------------------------------- KeyGTK3Win32PrepareTape ----
PrepareTape    PrepareTape函數準備要訪問或刪除的磁帶。
語法
參數
【hDevice】標識準備磁帶的設備。該控制碼是通過使用CreateFile函數創建的。【// preparation method】指定如何準備磁帶設備。此參數可以是以下值之一：值含義TAP


-------------------------------------------------------- KeyGTK3Win32PrintDlg ----
PrintDlg    PrintDlg函數顯示“列印”對話方塊或“列印設置”對話方塊。“列印”對話方塊使用戶能夠指定特定列印工作的屬性。“列印設置”對話方塊不應在新應用程式中使用。它已被PageSetupDlg函數創建的Page Setup常用對話方塊所取代。
語法
參數
【LPPD】指向PRINTDLG結構的指標，其中包含用於初始化對話方塊的資訊。當PrintDlg返回時，此結構包含有關使用者選擇的資訊。
返回值
如果使用者按一下確定按鈕，則返回值不為零。【LP


-------------------------------------------------------- KeyGTK3Win32PrinterMessageBox ----
PrinterMessageBox    PrinterMessageBox函數顯示一個訊息方塊，允許正在列印的應用程式通知使用者列印工作錯誤。如果作業的所有者遠端登入，該函數會向所有者發送一個網路快顯視窗。如果使用者在訊息方塊中選擇“取消”，該函數將取消列印工作;否則，該函數將清除作業錯誤狀態，系統再次嘗試列印工作。
語法
參數
【hPrinter】標識作業發送到的印表機。【錯誤】指定發生的錯誤。此參數可以是以下值之一：值含義ERROR_OUT_OF_PAPER印表機缺紙。ERROR_NOT_READY印表機尚未就緒


-------------------------------------------------------- KeyGTK3Win32PrinterProperties ----
PrinterProperties    PrinterProperties函數顯示指定印表機的印表機屬性對話方塊。
語法
參數
【的hWnd】標識對話方塊的父視窗。【hPrinter】標識印表機物件。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.


-------------------------------------------------------- KeyGTK3Win32PrintHookProc ----
PrintHookProc    一個PrintHookProc掛接過程是一個應用程式定義或庫定義的回檔過程，與列印公共對話方塊一起使用。掛鉤過程接收預設對話方塊過程的消息或通知。
語法
參數
【hdlg】處理列印公共對話方塊視窗，消息的目的是打開公共對話方塊視窗。【uiMsg】標識正在接收的消息。【wParam中】指定有關該消息的附加資訊。具體含義取決於【uiMsg】參數的值。【lP


-------------------------------------------------------- KeyGTK3Win32PrivilegeCheck ----
PrivilegeCheck    PrivilegeCheck函數測試由特定訪問權杖表示的安全上下文，以發現它是否包含指定的許可權。伺服器應用程式通常會調用此函數來檢查用戶端訪問權杖的許可權。
語法
參數
【ClientToken】標識表示用戶端進程的訪問權杖。必須通過打開假冒用戶端的執行緒的權杖來獲取此控制碼。必須打開權杖才能進行TOKEN_QUERY訪問。【RequiredPrivileges


-------------------------------------------------------- KeyGTK3Win32PrivilegedServiceAuditAlarm ----
PrivilegedServiceAuditAlarm    當嘗試執行特權系統服務操作時，PrivilegedServiceAuditAlarm函數會生成審核消息。當前版本的Windows NT不支持警報。
語法
參數
【SubsystemName】指向一個以null結尾的字串，指定調用該函數的子系統的名稱，例如“DEBUG”或“WIN32”。【ServiceName】指向一個以空值終止的字串，指定特權


-------------------------------------------------------- KeyGTK3Win32PropEnumProc ----
PropEnumProc    一個PropEnumProc函數是一個應用程式定義的回呼函數，它從視窗的屬性清單接收屬性條目。作為調用EnumProps函數的結果，調用PropEnumProc函數。類型為PROPENUMPROC的值是指向PropEnumProc函數的指標。
語法
參數
【HWND】處理清單屬性清單的視窗。【lpszStringhu】指向空終止字串的指標。此字串是屬性清單條目的字串元件。當通過調用SetProp函數將屬??性添加到視窗的屬性清單時，這是


-------------------------------------------------------- KeyGTK3Win32PropEnumProcEx ----
PropEnumProcEx    一個PropEnumProcEx函數是一個應用程式定義的回呼函數，它從視窗的屬性清單接收屬性條目。作為調用EnumPropsEx函數的結果，調用PropEnumProcEx函數。類型為PROPENUMPROCEX的值是指向PropEnumProcEx函數的指標。
語法
參數
【HWND】處理清單屬性清單的視窗。【lpszStringhu】指向空終止字串的指標。此字串是屬性清單條目的字串元件。當通過調用SetProp函數將屬??性添加到視窗的屬性清單時，這是


-------------------------------------------------------- KeyGTK3Win32PropertySheet ----
PropertySheet    PropertySheet函數創建一個屬性工作表，並添加在指定的屬性工作表頭結構中定義的頁面。
語法
參數
【Returns a positive value if successful or - 1 otherwise.】指向定義屬性工作表的框架和頁面的PROPSHEETHEADER結構的指標。



-------------------------------------------------------- KeyGTK3Win32PropSheetPageProc ----
PropSheetPageProc    PropSheetPageProc函數指定了一個應用程式定義的回呼函數，當創建一個頁面時以及當它被破壞時，該屬性工作表將調用該函數。應用程式可以使用此函數對頁面進行初始化和清理操作。
語法
參數
【HWND】Reserved; must be NULL.【uMsg】動作標誌此參數可以是以下值之一：值含義PSPCB_CREATE正在創建一個頁面。返回非零，以允許創建頁面或為零阻止它。P


-------------------------------------------------------- KeyGTK3Win32PropSheetProc ----
PropSheetProc    PropSheetProc函數是一個應用程式定義的回呼函數，系統在創建和初始化屬性工作表時調用該函數。
語法
參數
【hwndDlg】處理到屬性工作表對話方塊。【uMsg】標識正在接收的消息。此參數是以下值之一：值含義PSCB_INITIALIZED表示正在初始化屬性工作表。此消息的【lParam的】值為零。PSC


-------------------------------------------------------- KeyGTK3Win32PtInRect ----
PtInRect    PtInRect函數確定指定的點是否在指定的矩形內。如果一個點位於左側或上側，或者在四面內，則該點在矩形內。右側或下側的點被認為在矩形之外。
語法
參數
【LPRC】指向包含指定矩形的RECT結構。【pt】指定包含指定點的POINT結構。
返回值
如果指定的點位於矩形內，則返回值不為零。如果指定的點不在矩形內，返回值為零。要獲取擴展錯誤信


-------------------------------------------------------- KeyGTK3Win32PtInRegion ----
PtInRegion    PtInRegion函數確定指定點是否在指定的區域內。
語法
參數
【HRGN】確定要檢查的區域。【X】指定點的x座標。【Y】指定點的y座標。
返回值
如果指定的點在區域中，則返回值不為零。如果指定點不在區域中，返回值為零。



-------------------------------------------------------- KeyGTK3Win32PtVisible ----
PtVisible    PtVisible函數指示指定點是否在設備上下文的裁剪區域內。
語法
參數
【HDC】標識設備上下文。【X】指定點的邏輯x座標。【Y】指定點的邏輯y座標。
返回值
如果指定的點在設備上下文的裁剪區域內，返回值不為零。如果指定的點不在設備上下文的裁剪區域內，返回值


-------------------------------------------------------- KeyGTK3Win32PulseEvent ----
PulseEvent    PulseEvent函數提供了一個單獨的操作，用於設置（發出信號）指定事件物件的狀態，然後在釋放適當數量的等待中的執行緒後將其重置（無信號）。
語法
參數
【活動】標識事件物件。CreateEvent或OpenEvent函數返回此控制碼。Windows NT：控制碼必須有EVENT_MODIFY_STATE存取權限。有關詳細資訊，請參閱進程間同步對


-------------------------------------------------------- KeyGTK3Win32PurgeComm ----
PurgeComm    PurgeComm函數可以丟棄指定通信資源的輸出或輸入緩衝區中的所有字元。它還可以終止對資源的等待讀取或寫入操作。
語法
參數
【HFILE】標識通信資源。CreateFile函數返回此控制碼。【dwFlags中】指定要執行的操作。此參數可以是以下值的組合：值含義PURGE_TXABORT終止所有未完成的寫操作並立即返


-------------------------------------------------------- KeyGTK3Win32QueryDosDevice ----
QueryDosDevice    QueryDosDevice函數允許應用程式獲取有關MS-DOS設備名稱的資訊。該函數可以獲得特定MS-DOS設備名稱的當前映射。該函數還可以獲取所有現有MS-DOS設備名稱的清單。MS-DOS設備名稱作為符號連結存儲在Windows NT物件名稱空間中。將MS-DOS路徑轉換為相應的Windows NT路徑的代碼使用這些符號連結映射MS-DOS設備和磁碟機代號。QueryDosDevice函數提供了一種機制，基於Win32的應用程式可以查詢用於實現MS-DOS設備命名空間的符號連結的名稱以及每個特定符號連結的值。
語法
參數
【lpDeviceName】指向指定查詢目標的MS-DOS設備名稱字串的指標。此參數可以為NULL。在這種情況下，QueryDosDevice函數將將所有現有的MS-DOS設備名稱清單存儲


-------------------------------------------------------- KeyGTK3Win32QueryPerformanceCounter ----
QueryPerformanceCounter    QueryPerformanceCounter函數檢索高解析度效能計數器的當前值（如果存在）。
語法
參數
【lpPerformanceCount】指向函數以計數方式設置為當前效能計數器值的變數。如果安裝的硬體不支援高解析度效能計數器，則此參數可以為零。
返回值
如果安裝的硬體支援高解析度性能


-------------------------------------------------------- KeyGTK3Win32QueryPerformanceFrequency ----
QueryPerformanceFrequency    QueryPerformanceFrequency函數檢索高解析度效能計數器的頻率（如果存在）。
語法
參數
【lpFrequency】指向函數以每秒計數為當前效能計數器頻率的變數。如果安裝的硬體不支援高解析度效能計數器，則此參數可以為零。
返回值
如果安裝的硬體支援高解析度效能計數器，則返回值


-------------------------------------------------------- KeyGTK3Win32QueryServiceConfig ----
QueryServiceConfig    QueryServiceConfig函數檢索指定服務的配置參數。
語法
參數
【hService】標識服務。該控制碼由OpenService或CreateService函數返回，並且必須具有SERVICE_QUERY_CONFIG存取權限。【lpServiceConfi


-------------------------------------------------------- KeyGTK3Win32QueryServiceLockStatus ----
QueryServiceLockStatus    QueryServiceLockStatus函數檢索指定的服務控制管理器資料庫的鎖定狀態。
語法
參數
【hSCManager】標識服務控制管理器資料庫。OpenSCManager函數返回此控制碼，該控制碼必須具有SC_MANAGER_QUERY_LOCK_STATUS存取權限。【lpLockSt


-------------------------------------------------------- KeyGTK3Win32QueryServiceObjectSecurity ----
QueryServiceObjectSecurity    QueryServiceObjectSecurity函數檢索保護服務物件的安全性描述元的副本。
語法
參數
【hService】標識服務。該控制碼由OpenService或CreateService函數返回，並且必須具有READ_CONTROL存取權限。【dwSecurityInformation】


-------------------------------------------------------- KeyGTK3Win32QueryServiceStatus ----
QueryServiceStatus    QueryServiceStatus函數檢索指定服務的當前狀態。
語法
參數
【hService】標識服務。該控制碼由OpenService或CreateService函數返回，並且必須具有SERVICE_QUERY_STATUS存取權限。【lpServiceStatu


-------------------------------------------------------- KeyGTK3Win32QueueUserAPC ----
QueueUserAPC    [New - Windows NT]QueueUserAPC函數將使用者模式非同步程序呼叫（APC）物件添加到指定執行緒的APC佇列中。
語法
參數
【pfnAPC】指向應用程式提供的APC函數，以便在指定的執行緒執行可警告的等待操作時調用。【hThread】指定執行緒的控制碼。控制碼必須具有THREAD_SET_CONTEXT存取權限。有關詳細


-------------------------------------------------------- KeyGTK3Win32RaiseException ----
RaiseException    RaiseException函數在調用執行緒中引發異常。
語法
參數
【dwExceptionCode】指定引發異常的應用程式定義異常代碼。例外處理常式的篩檢程式運算式和例外處理常式塊可以使用GetExceptionCode函數來檢索該值。請注意，系統將會清除【


-------------------------------------------------------- KeyGTK3Win32RASADFunc ----
RASADFunc    [New - Windows NT]RASADFunc函數是一個應用程式定義的回呼函數，可用於為自動撥出提供自訂使用者介面。
語法
參數
【lpszPhonebook】Windows NT：指向指定電話簿（.PBK）檔的完整路徑和檔案名的以空值終止的字串的指標。如果此參數為NULL，則該函數使用當前的預設電話簿檔。默認電


-------------------------------------------------------- KeyGTK3Win32RasAdminAcceptNewConnection ----
RasAdminAcceptNewConnection    [New - Windows NT]RasAdminAcceptNewConnection函數是由協力廠商RAS伺服器管理DLL匯出的應用程式定義函數。當用戶嘗試建立與RAS伺服器的遠端連接時，RAS會調用此函數。該函數決定使用者是否允許連接。RAS伺服器在多鏈路連接中為每個埠調用一次RasAdminAcceptNewConnection.
語法
參數
【pRasPort1】指向包含關於掛起連接的RAS資料的RAS_PORT_1結構的指標。此結構包含您需要作出關於連接的決定的相關連接資訊。【pRasStats】指向包含埠統計資訊的RAS_


-------------------------------------------------------- KeyGTK3Win32RasAdminConnectionHangupNotification ----
RasAdminConnectionHangupNotification    [New - Windows NT]RasAdminConnectionHangupNotification函數是由協力廠商RAS伺服器管理DLL匯出的應用程式定義函數。當RAS斷開現有連接時，它會調用此函數來通知您的DLL。RAS伺服器在多鏈路連接中為每個埠調用一次RasAdminConnectionHangupNotification.
語法
參數
【pRasPort1】指向RAS_PORT_1結構的指標，其中包含關於結束的連接的RAS資料。此結構包含可用於確定埠連接多長時間的相關連接資訊。【pRasStats】指向包含埠統計資訊的


-------------------------------------------------------- KeyGTK3Win32RasAdminFreeBuffer ----
RasAdminFreeBuffer    [New - Windows NT]RasAdminFreeBuffer函數釋放由RAS代表呼叫者分配的記憶體。
語法
參數
【指標】指向要釋放的緩衝區。
返回值
如果函數成功，則返回值為ERROR_SUCCESS。如果函數失敗，則返回值可以是以下錯誤代碼。值含義ERROR_INVALID_PARAMETER【


-------------------------------------------------------- KeyGTK3Win32RasAdminGetErrorString ----
RasAdminGetErrorString    [New - Windows NT]RasAdminGetErrorString函數檢索與RAS伺服器管理（RasAdmin）函數之一返回的RAS錯誤代碼相對應的消息字串。這些消息字串是作為RAS的一部分安裝的RASMSG.DLL檢索的。
語法
參數
【ResourceId】指定由其中一個RasAdmin函數返回的錯誤代碼。該值必須在RASERROR.H中定義的RASBASE到RASBASEEND的錯誤代碼範圍內。【lpszStringh


-------------------------------------------------------- KeyGTK3Win32RasAdminGetIpAddressForUser ----
RasAdminGetIpAddressForUser    [New - Windows NT]RasAdminGetIpAddressForUser函數是由協力廠商RAS伺服器管理DLL匯出的應用程式定義函數。RAS調用此函數獲取已撥入遠端用戶端的IP地址。
語法
參數
【lpszUserName】指向一個空值終止的Unicode字串，其中包含需要IP位址的遠端使用者的名稱。【lpszPortName】指向以null終止的Unicode字串的指標，其中包含


-------------------------------------------------------- KeyGTK3Win32RasAdminGetUserAccountServer ----
RasAdminGetUserAccountServer    [New - Windows NT]RasAdminGetUserAccountServer函數檢索具有使用者帳戶資料庫的伺服器的名稱。您可以使用RasAdminUserGetInfo和RasAdminUserSetInfo函數中返回的伺服器名稱來獲取或設置有關指定使用者的資訊。
語法
參數
【lpszDo mainhu】指向一個空值終止的Unicode字串，其中包含RAS伺服器所屬的域的名稱。如果您在沒有參與Windows NT域的Windows NT工作站或伺服器上運行RA


-------------------------------------------------------- KeyGTK3Win32RasAdminPortClearStatistics ----
RasAdminPortClearStatistics    [New - Windows NT]RasAdminPortClearStatistics函數重置表示RAS_PORT_STATISTICS結構中RasAdminPortGetInfo函數報告的各種統計資訊的計數器。計數器將重置為零，並從此開始累加。
語法
參數
【lpszServer】指向包含Windows NT RAS伺服器名稱的以null終止的Unicode字串。使用前導“\\\\”字元指定名稱，格式為：\\\\ 【伺服器名稱】.【lpszP


-------------------------------------------------------- KeyGTK3Win32RasAdminPortDisconnect ----
RasAdminPortDisconnect    [New - Windows NT]RasAdminPortDisconnect函數會斷開當前正在使用的埠。
語法



-------------------------------------------------------- KeyGTK3Win32RasAdminPortEnum ----
RasAdminPortEnum    [New - Windows NT]RasAdminPortEnum函數枚舉指定RAS伺服器上的所有埠。對於伺服器上的每個埠，該函數返回一個包含埠資訊的RAS_PORT_0結構。
語法
參數
【lpszServer】指向包含Windows NT RAS伺服器名稱的以null終止的Unicode字串。用“\\\\”字元指定名稱，格式為：\\\\ 【伺服器名稱】.【ppRasPor


-------------------------------------------------------- KeyGTK3Win32RasAdminPortGetInfo ----
RasAdminPortGetInfo    [New - Windows NT]RasAdminPortGetInfo函數檢索指定伺服器上指定埠的資訊【.】
語法
參數
【lpszServer】指向包含Windows NT RAS伺服器名稱的以null終止的Unicode字串。使用前導“\\\\”字元指定名稱，格式為：\\\\ 【伺服器名稱】.【lpszP


-------------------------------------------------------- KeyGTK3Win32RasAdminReleaseIpAddress ----
RasAdminReleaseIpAddress    [New - Windows NT]RasAdminReleaseIpAddress函數是由協力廠商RAS伺服器管理DLL匯出的應用程式定義函數。RAS調用此函數通知您的DLL，遠端用戶端已斷開連接，並且該IP位址應該被釋放。
語法
參數
【lpszUserName】指向以null終止的Unicode字串，其中包含使用RasAdminGetIpAddressForUser函數之前獲取IP位址的遠端用戶的名稱。【lpszPor


-------------------------------------------------------- KeyGTK3Win32RasAdminServerGetInfo ----
RasAdminServerGetInfo    [New - Windows NT]RasAdminServerGetInfo函數可獲取RAS伺服器的伺服器配置。
語法
參數
【lpszServer】指向包含Windows NT RAS伺服器名稱的以null終止的Unicode字串。如果此參數為NULL，則該函數返回有關本地電腦的資訊。使用前導“\\\\”字元


-------------------------------------------------------- KeyGTK3Win32RasAdminUserGetInfo ----
RasAdminUserGetInfo    [New - Windows NT]RasAdminUserGetInfo函數獲取指定使用者的RAS許可權和回檔電話號碼資訊。
語法
參數
【lpszUserAccountServer】指向一個空值終止的Unicode字串，其中包含具有使用者帳戶資料庫的網域主控站或備份網域控制站的名稱。使用RasAdminGetUserAccou


-------------------------------------------------------- KeyGTK3Win32RasAdminUserSetInfo ----
RasAdminUserSetInfo    [New - Windows NT]RasAdminUserSetInfo函數設置指定使用者的RAS許可權和回撥電話號碼。
語法
參數
【lpszUserAccountServer】指向一個空值終止的Unicode字串，其中包含具有使用者帳戶資料庫的網域主控站或備份網域控制站的名稱。使用RasAdminGetUserAccou


-------------------------------------------------------- KeyGTK3Win32RasConnectionNotification ----
RasConnectionNotification    [New - Windows NT]RasConnectionNotification函數指定在創建或終止RAS連接時系統設置為信號狀態的事件物件。
語法
參數
【活動】指定事件物件的控制碼。使用CreateEvent函數創建事件物件。【dwFlags中】指示導致系統發出【活動】參數指定的事件物件的RAS事件。此參數可以是以下值的組合。值含義RASCN


-------------------------------------------------------- KeyGTK3Win32RasCreatePhonebookEntry ----
RasCreatePhonebookEntry    RasCreatePhonebookEntry函數創建一個新的電話簿條目。該函數顯示一個對話方塊，使用者在其中鍵入有關電話簿條目的資訊。
語法
參數
【HWND】處理到對話方塊的父視窗。【lpszPhonebook】Windows NT：指向指定電話簿（.PBK）檔的完整路徑和檔案名的空終止字串的指標。如果此參數為NULL，則該函數使用


-------------------------------------------------------- KeyGTK3Win32RasDeleteEntry ----
RasDeleteEntry    [New - Windows NT]RasDeleteEntry函數從電話簿中刪除一個條目。
語法
參數
【lpszPhonebook】Windows NT：指向指定電話簿（.PBK）檔的完整路徑和檔案名的以空值終止的字串的指標。如果此參數為NULL，則該函數使用當前的預設電話簿檔。默認電


-------------------------------------------------------- KeyGTK3Win32RasDial ----
RasDial    RasDial函數在RAS用戶端和RAS伺服器之間建立RAS連接。連接資料包括回撥和使用者認證資訊。
語法
參數
【lpRasDialExtensions】Windows NT：指向RASDIALEXTENSIONS結構，指定一組RasDial擴展函數啟用。如果您不需要啟用任何擴展，請將此參數設置為NU


-------------------------------------------------------- KeyGTK3Win32RasDialDlg ----
RasDialDlg    [New - Windows NT]RasDialDlg函數嘗試使用指定的電話簿條目和已登錄用戶的憑據建立RAS連接。該函數顯示指示連接操作狀態的對話方塊流。
語法
參數
【lpszPhonebook】指向指定電話簿（.PBK）檔的完整路徑和檔案名的以空值終止的字串的指標。如果此參數為NULL，則該函數使用當前的預設電話簿檔。預設電話簿檔是使用者在撥號網


-------------------------------------------------------- KeyGTK3Win32RasDialFunc ----
RasDialFunc    RasDialFunc函數是在RAS連接過程中發生狀態更改時，RasDial函式呼叫的應用程式定義或庫定義的回呼函數。
語法
參數
【unMsg】指定發生的事件的類型。目前，唯一定義的事件是WM_RASDIALEVENT。【rasconnstate】指定RASCONNSTATE枚舉器值，該值指示RasDial遠端存取連接


-------------------------------------------------------- KeyGTK3Win32RasDialFunc1 ----
RasDialFunc1    RasDialFunc1函數是在遠端存取連接過程中發生狀態更改時，RasDial函式呼叫的應用程式定義或庫定義的回呼函數。RasDialFunc1函數與RasDialFunc函數相當，但通過添加兩個參數來增強：RAS連接的控制碼和擴展錯誤代碼。
語法
參數
【hrasconn】提供RasDial返回的RAS連接的控制碼。【unMsg】指定發生的事件的類型。目前，唯一定義的事件是WM_RASDIALEVENT。【刮】指定RASCONNSTATE枚舉


-------------------------------------------------------- KeyGTK3Win32RasDialFunc2 ----
RasDialFunc2    [New - Windows NT]RasDialFunc2函數是在遠端存取連接過程中發生狀態更改時，RasDial函式呼叫的應用程式定義或庫定義的回呼函數。RasDialFunc2函數與RasDialFunc1回呼函數類似，不同之處在於它提供了多連結連接的附加資訊。
語法
參數
【dwCallbackId】提供在RASDIALPARAMS結構中RASDIALPARAMS結構中傳遞給RasDial的結構中指定的應用程式定義值。【dwSubEntry】指定與此連接相關聯


-------------------------------------------------------- KeyGTK3Win32RasEditPhonebookEntry ----
RasEditPhonebookEntry    RasEditPhonebookEntry函數會編輯現有的電話簿條目。該函數顯示一個對話方塊，使用者可以在其中修改現有資訊。
語法
參數
【HWND】處理到對話方塊的父視窗。【lpszPhonebook】指標，它指定電話簿（的.pbk）檔的完整路徑和檔案名的空終止字串。如果此參數為NULL，則該函數使用當前的預設電話簿檔。


-------------------------------------------------------- KeyGTK3Win32RasEntryDlg ----
RasEntryDlg    [New - Windows NT]RasEntryDlg函數顯示允許使用者操作電話簿條目的模態屬性工作表。如果編輯或複製現有的電話簿條目，該函數將顯示電話簿條目屬性工作表。當使用者關閉屬性工作表時，RasEntryDlg函數返回。
語法
參數
【lpszPhonebook】指向指定電話簿（.PBK）檔的完整路徑和檔案名的以空值終止的字串的指標。如果此參數為NULL，則該函數使用當前的預設電話簿檔。預設電話簿檔是使用者在撥號網


-------------------------------------------------------- KeyGTK3Win32RasEnumAutodialAddresses ----
RasEnumAutodialAddresses    [New - Windows NT]RasEnumAutodialAddresses函數返回AutoDial映射資料庫中所有位址的清單。
語法
參數
【// pointer to buffer that receives network address strings】指向字串指標陣列的指標，其餘空間用於在緩衝區的末尾存儲字串本身。每


-------------------------------------------------------- KeyGTK3Win32RasEnumConnections ----
RasEnumConnections    RasEnumConnections函數列出所有活動的RAS連接。它返回每個連接的控制碼和電話簿條目名稱。
語法
參數
【// buffer to receive connections data】指向接收RASCONN結構陣列的緩衝區，每個RAS連接一個。在調用該函數之前，應用程式必須將緩衝區中的第一個RA


-------------------------------------------------------- KeyGTK3Win32RasEnumDevices ----
RasEnumDevices    [New - Windows NT]RasEnumDevices函數返回所有可用RAS設備的名稱和類型。
語法
參數
【lpRasDevInfo】指向接收RASDEVINFO結構陣列的緩衝區的指標，每個支援RAS的設備一個。在調用該函數之前，將緩衝區中第一個RASDEVINFO結構的的dwSize成員設置為


-------------------------------------------------------- KeyGTK3Win32RasEnumEntries ----
RasEnumEntries    RasEnumEntries函數列出了遠端存取電話簿中的所有條目名稱。
語法
參數
【保留的】Reserved; must be NULL.【lpszPhonebook】Windows NT：指向指定電話簿（.PBK）檔的完整路徑和檔案名的以空值終止的字串的指標。如果此


-------------------------------------------------------- KeyGTK3Win32RasGetAutodialAddress ----
RasGetAutodialAddress    [New - Windows NT]RasGetAutodialAddress函數檢索與自動撥號映射資料庫中的網路位址相關聯的所有AutoDial條目的資訊。
語法
參數
【lpszAddresshu】指向指定要求哪個資訊的位址的以空值終止的字串的指標。這可以是IP位址（“127.95.1.4”），Internet主機名稱（“www.microsoft.com


-------------------------------------------------------- KeyGTK3Win32RasGetAutodialEnable ----
RasGetAutodialEnable    [New - Windows NT]RasGetAutodialEnable函數指示是否為指定的TAPI撥號位置啟用了自動撥號函數。有關TAPI撥號位置的更多資訊，請參閱Win32 Telephony（TAPI）程式師參考。
語法
參數
【dwDialingLocation】指定TAPI撥號位置的識別字。【// pointer to variable that receives AutoDial state for this


-------------------------------------------------------- KeyGTK3Win32RasGetAutodialParam ----
RasGetAutodialParam    [New - Windows NT]RasGetAutodialParam函數檢索AutoDial參數的值。
語法
參數
【dwKey】表示要檢索的AutoDial參數。此參數可以是以下值之一。值含義RASADP_DisableConnectionQuery【lpvValue】參數返回一個DWORD值。如果此值


-------------------------------------------------------- KeyGTK3Win32RasGetConnectStatus ----
RasGetConnectStatus    RasGetConnectStatus函數檢索有關指定遠端存取連接的當前狀態的資訊。應用程式可以使用此調用來確定非同步RasDial呼叫何時完成。
語法
參數
【hrasconn】標識要檢索狀態的遠端存取連接。此手柄必須已經從RasDial或RasEnumConnections獲得。【lprasconnstatus】指向函數填充狀態資訊的RASCO


-------------------------------------------------------- KeyGTK3Win32RasGetCountryInfo ----
RasGetCountryInfo    [New - Windows NT]RasGetCountryInfo函數從Windows Telephony國家/地區清單中檢索國家/地區的撥號資訊。有關國家特定撥號資訊和TAPI國家識別字的更多資訊，請參閱Win32 Telephony（TAPI）程式師參考。
語法
參數
【lpRasCtryInfo】指向RASCTRYINFO結構的指標，可以接收國家/地區特定撥號資訊，後跟國家/地區描述字串的附加位元組。在調用該函數之前，將結構的的dwSize成員設置為si


-------------------------------------------------------- KeyGTK3Win32RasGetCredentials ----
RasGetCredentials    [New - Windows NT]RasGetCredentials函數檢索與指定的RAS電話簿條目關聯的使用者憑據。
語法
參數
【lpszPhonebook】指向指定電話簿（.PBK）檔的完整路徑和檔案名的以空值終止的字串的指標。如果此參數為NULL，則該函數使用當前的預設電話簿檔。預設電話簿檔是使用者在撥號網


-------------------------------------------------------- KeyGTK3Win32RasGetEntryDialParams ----
RasGetEntryDialParams    RasGetEntryDialParams函數可以檢索上次成功呼叫保存的連接資訊到指定電話簿條目的RasDial或RasSetEntryDialParams函數。
語法
參數
【lpszPhonebook】Windows NT：指向指定電話簿（.PBK）檔的完整路徑和檔案名的以空值終止的字串的指標。如果此參數為NULL，則該函數使用當前的預設電話簿檔。默認電


-------------------------------------------------------- KeyGTK3Win32RasGetEntryProperties ----
RasGetEntryProperties    [New - Windows NT]RasGetEntryProperties函數檢索電話簿條目的屬性。
語法
參數
【lpszPhonebook】Windows NT：指向指定電話簿（.PBK）檔的完整路徑和檔案名的以空值終止的字串的指標。如果此參數為NULL，則該函數使用當前的預設電話簿檔。默認電


-------------------------------------------------------- KeyGTK3Win32RasGetErrorString ----
RasGetErrorString    RasGetErrorString函數獲取指定RAS錯誤值的錯誤消息字串。
語法
參數
【uErrorValue】指定感興趣的錯誤值。這些是由RAS函數之一返回的值：RAS標頭檔中列出的值。【lpszErrorString】指向緩衝區，該函數將寫入錯誤字串。此參數不能為NUL


-------------------------------------------------------- KeyGTK3Win32RasGetProjectionInfo ----
RasGetProjectionInfo    RasGetProjectionInfo函數獲取有關指定遠端存取元件協定的遠端存取投影操作的資訊。
語法
參數
【hrasconn】處理感興趣的遠端存取連接。應用程式從RasDial或RasEnumConnections函數獲取RAS連接控制碼。【rasprojection】枚舉類型值RASPROJEC


-------------------------------------------------------- KeyGTK3Win32RasGetSubEntryHandle ----
RasGetSubEntryHandle    [New - Windows NT]RasGetSubEntryHandle函數檢索多連結連接的指定子條目的連接控制碼。
語法
參數
【hrasconn】指定RasDial函數返回的多鏈路電話簿條目的HRASCONN連接控制碼。【dwSubEntry】指定電話簿條目的有效子條目索引。【lphrasconn】指向HRASCON


-------------------------------------------------------- KeyGTK3Win32RasGetSubEntryProperties ----
RasGetSubEntryProperties    [New - Windows NT]RasGetSubEntryProperties函數檢索有關指定電話簿條目的子條目的資訊。
語法
參數
【lpszPhonebook】Windows NT：指向指定電話簿（.PBK）檔的完整路徑和檔案名的以空值終止的字串的指標。如果此參數為NULL，則該函數使用當前的預設電話簿檔。默認電


-------------------------------------------------------- KeyGTK3Win32RasHangUp ----
RasHangUp    RasHangUp函數終止遠端存取連接。連接由RAS連接控制碼指定。該函數釋放與控制碼相關聯的所有RASAPI32.DLL資源。
語法
參數
【hrasconn】標識要終止的遠端存取連接。這是從以前調用RasDial或RasEnumConnections返回的控制碼。
返回值
如果函數成功，返回值為零。如果函數失敗，則返回值是R


-------------------------------------------------------- KeyGTK3Win32RasMonitorDlg ----
RasMonitorDlg    [New - Windows NT]RasMonitorDlg函數顯示描述RAS連接狀態的撥號網路監控屬性工作表。
語法
參數
【lpszDeviceName】指向以空值終止的字串，指定最初顯示的設備的名稱。如果此參數為NULL，或者指定的設備不??存在，屬性工作表將顯示第一個設備。【lpinfoit】指向RASMON


-------------------------------------------------------- KeyGTK3Win32RasPBDlgFunc ----
RasPBDlgFunc    [New - Windows NT]RasPBDlgFunc函數是一個應用程式定義的回呼函數，在RasPhonebookDlg對話方塊打開時接收用戶活動的通知。
語法
參數
【dwCallbackId】表示傳遞給RasPhonebookDlg函數的RASPBDLG結構RASPBDLG結構中指定的應用程式定義值。【// indicates the event th


-------------------------------------------------------- KeyGTK3Win32RasPhonebookDlg ----
RasPhonebookDlg    [New - Windows NT]RasPhonebookDlg函數顯示主撥號網路對話方塊。從該強制回應對話方塊中，用戶可以撥打，編輯或刪除所選電話簿條目，創建新的電話簿條目或指定使用者首選項。對話方塊關閉時，RasPhonebookDlg函數返回。
語法
參數
【lpszPhonebook】指向指定電話簿（.PBK）檔的完整路徑和檔案名的以空值終止的字串的指標。如果此參數為NULL，則該函數使用當前的預設電話簿檔。預設電話簿檔是使用者在撥號網


-------------------------------------------------------- KeyGTK3Win32RasRenameEntry ----
RasRenameEntry    [New - Windows NT]RasRenameEntry函數可更改電話簿中條目的名稱。
語法
參數
【lpszPhonebook】Windows NT：指向指定電話簿（.PBK）檔的完整路徑和檔案名的以空值終止的字串的指標。如果此參數為NULL，則該函數使用當前的預設電話簿檔。默認電


-------------------------------------------------------- KeyGTK3Win32RasSecurityDialogBegin ----
RasSecurityDialogBegin    [New - Windows NT]RasSecurityDialogBegin函數是Windows NT RAS伺服器在遠端用戶嘗試連接時調用的協力廠商RAS安全性DLL入口點。這使安全性DLL能夠開始對遠端用戶的身份驗證。
語法
參數
【hPort】指定RAS埠控制碼。安全性DLL在其他RAS安全函數（如RasSecurityDialogSend和RasSecurityDialogReceive）中使用此控制碼來標識此身份驗


-------------------------------------------------------- KeyGTK3Win32RasSecurityDialogComplete ----
RasSecurityDialogComplete    [New - Windows NT]RasSecurityDialogComplete函數通知RAS伺服器協力廠商安全認證交易的結果。協力廠商RAS安全性DLL在完成對遠端用戶的身份驗證後，會調用RasSecurityDialogComplete.當伺服器調用安全DLL的RasSecurityDialogBegin入口點時，RAS伺服器會傳遞一個指向RasSecurityDialogComplete函數的指標。
語法
參數
【pSecMsg】指向包含認證交易結果的SECURITY_MESSAGE結構。
返回值
沒有。
描述
當安全性DLL完成對遠端用戶的身份驗證後，它調用RasSecurityDialo


-------------------------------------------------------- KeyGTK3Win32RasSecurityDialogEnd ----
RasSecurityDialogEnd    [New - Windows NT]RasSecurityDialogEnd函數是Windows NT RAS伺服器調用終止認證交易的協力廠商RAS安全性DLL入口點。
語法
參數
【hPort】指定RAS伺服器在此驗證事務的RasSecurityDialogBegin調用中傳遞給安全性DLL的埠控制碼。
返回值
如果安全DLL返回NO_ERROR，則RAS伺服器不


-------------------------------------------------------- KeyGTK3Win32RasSecurityDialogGetInfo ----
RasSecurityDialogGetInfo    [New - Windows NT]RAS安全性DLL調用RasSecurityDialogGetInfo函數來獲取有關RAS伺服器埠的資訊。要調用此函數，必須先調用LoadLibrary函數來載入RASMAN.DLL。然後調用GetProcAddress函數來獲取DLL的RasSecurityDialogGetInfo入口點。
語法
參數
【hPort】指定RAS伺服器在此驗證事務的RasSecurityDialogBegin調用中傳遞給安全性DLL的埠控制碼。【p緩衝器】指向RAS_SECURITY_INFO結構的指標，可以


-------------------------------------------------------- KeyGTK3Win32RasSecurityDialogReceive ----
RasSecurityDialogReceive    [New - Windows NT]RasSecurityDialogReceive函數啟動非同步作業，從遠端用戶接收回應。回應是使用者在遠端電腦上的終端視窗中鍵入的輸入。協力廠商RAS安全性DLL將此函數稱為遠端使用者驗證的一部分。要調用此函數，必須先調用LoadLibrary函數來載入RASMAN.DLL。然後調用GetProcAddress函數來獲取DLL的RasSecurityDialogReceive入口點。
語法
參數
【hPort】指定在此驗證事務的RasSecurityDialogBegin調用中RAS伺服器傳遞到安全性DLL的埠控制碼。【p緩衝器】指向在RasSecurityDialogBegin調用


-------------------------------------------------------- KeyGTK3Win32RasSecurityDialogSend ----
RasSecurityDialogSend    [New - Windows NT]RasSecurityDialogSend函數發送一條消息，顯示在遠端電腦的終端視窗中。協力廠商RAS安全性DLL作為遠端用戶驗證的一部分發送此消息。要調用此函數，必須先調用LoadLibrary函數來載入RASMAN.DLL。然後調用GetProcAddress函數來獲取DLL的RasSecurityDialogSend入口點。
語法
參數
【hPort】指定RAS伺服器在此驗證事務的RasSecurityDialogBegin調用中傳遞給安全性DLL的埠控制碼。【p緩衝器】指向在RasSecurityDialogBegin調用


-------------------------------------------------------- KeyGTK3Win32RasSetAutodialAddress ----
RasSetAutodialAddress    [New - Windows NT]RasSetAutodialAddress函數可以向AutoDial映射資料庫添加一個位址。或者，該函數可以刪除或修改與資料庫中現有位址相關聯的資料。
語法
參數
【lpszAddresshu】指向指定要添加，刪除或修改的地址的以空值終止的字串。這可以是IP位址（“127.95.1.4”），Internet主機名稱（“www.microsoft.com


-------------------------------------------------------- KeyGTK3Win32RasSetAutodialEnable ----
RasSetAutodialEnable    [New - Windows NT]RasSetAutodialEnable函數設置是否為指定的TAPI撥號位置啟用了自動撥號函數。有關TAPI撥號位置的更多資訊，請參閱Win32 Telephony（TAPI）程式師參考。
語法
參數
【dwDialingLocation】指定TAPI撥號位置的識別字。【fEnabled】指定TRUE以為指定的撥號位置啟用自動撥號，或選擇FALSE禁用它。
返回值
如果函數成功，返回值


-------------------------------------------------------- KeyGTK3Win32RasSetAutodialParam ----
RasSetAutodialParam    [New - Windows NT]RasSetAutodialParam函數設置AutoDial參數的值。
語法
參數
【dwKey】表示要設置的AutoDial參數。此參數可以是以下值之一。值含義RASADP_DisableConnectionQuery【lpvValue】參數指向DWORD值。如果此值為零


-------------------------------------------------------- KeyGTK3Win32RasSetCredentials ----
RasSetCredentials    [New - Windows NT]RasSetCredentials函數設置與指定的RAS電話簿條目關聯的使用者憑據。
語法
參數
【lpszPhonebook】指向指定電話簿（.PBK）檔的完整路徑和檔案名的以空值終止的字串的指標。如果此參數為NULL，則該函數使用當前的預設電話簿檔。預設電話簿檔是使用者在撥號網


-------------------------------------------------------- KeyGTK3Win32RasSetEntryDialParams ----
RasSetEntryDialParams    RasSetEntryDialParams函數將上次成功呼叫保存的連接資訊更改為指定電話簿條目的RasDial或RasSetEntryDialParams函數。
語法
參數
【lpszPhonebook】Windows NT：指向指定電話簿（.PBK）檔的完整路徑和檔案名的空終止字串的指標。如果此參數為NULL，則該函數使用當前的預設電話簿檔。預設電話簿文


-------------------------------------------------------- KeyGTK3Win32RasSetEntryProperties ----
RasSetEntryProperties    [New - Windows NT]RasSetEntryProperties函數更改電話簿中條目的連接資訊或創建新的電話簿條目。
語法
參數
【lpszPhonebook】Windows NT：指向指定電話簿（.PBK）檔的完整路徑和檔案名的以空值終止的字串的指標。如果此參數為NULL，則該函數使用當前的預設電話簿檔。默認電


-------------------------------------------------------- KeyGTK3Win32RasSetSubEntryProperties ----
RasSetSubEntryProperties    [New - Windows NT]RasSetSubEntryProperties函數創建新的子條目或修改指定電話簿條目的現有子條目。
語法
參數
【lpszPhonebook】Windows NT：指向指定電話簿（.PBK）檔的完整路徑和檔案名的以空值終止的字串的指標。如果此參數為NULL，則該函數使用當前的預設電話簿檔。默認電


-------------------------------------------------------- KeyGTK3Win32RasValidateEntryName ----
RasValidateEntryName    [New - Windows NT]RasValidateEntryName函數驗證連接條目名的格式。該名稱必須至少包含一個非空白字母數位字元。
語法
參數
【lpszPhonebook】Windows NT：指向指定電話簿（.PBK）檔的完整路徑和檔案名的以空值終止的字串的指標。如果此參數為NULL，則該函數使用當前的預設電話簿檔。默認電


-------------------------------------------------------- KeyGTK3Win32ReadConsole ----
ReadConsole    ReadConsole函數從控制台輸入緩衝區讀取字元輸入，並將其從緩衝區中刪除。
語法
參數
【hConsoleInput】標識控制台輸入緩衝區。控制碼必須具有GENERIC_READ許可權。【lpBuffer】指向緩衝區，接收從控制台輸入緩衝區讀取的資料。【nNumberOfChars


-------------------------------------------------------- KeyGTK3Win32ReadConsoleInput ----
ReadConsoleInput    ReadConsoleInput函數從控制台輸入緩衝區讀取資料，並將其從緩衝區中刪除。
語法
參數
【hConsoleInput】標識輸入緩衝區。控制碼必須具有GENERIC_READ許可權。【lpBuffer】指向接收輸入緩衝區資料的INPUT_RECORD緩衝區。【nLength】指定由【


-------------------------------------------------------- KeyGTK3Win32ReadConsoleOutput ----
ReadConsoleOutput    ReadConsoleOutput函數從控制台螢幕緩衝區中的矩形塊字元單元讀取字元和顏色屬性資料，並將該資料寫入目標緩衝區中指定位置的矩形塊。
語法
參數
【hConsoleOutput】標識螢幕緩衝區。控制碼必須具有GENERIC_READ許可權。【lpBuffer】指向接收從螢幕緩衝區讀取的資料的目標緩衝區。該指針被視為由【dwBufferSi


-------------------------------------------------------- KeyGTK3Win32ReadConsoleOutputAttribute ----
ReadConsoleOutputAttribute    ReadConsoleOutputAttribute函數從指定位置開始，從控制台螢幕緩衝區的連續儲存格中複製指定數量的前景和背景顏色屬性。
語法
參數
【hConsoleOutput】標識控制台螢幕緩衝區。控制碼必須具有GENERIC_READ許可權。【lpAttribute】指向緩衝區，接收從螢幕緩衝區讀取的屬性。【nLength】指定要讀取


-------------------------------------------------------- KeyGTK3Win32ReadConsoleOutputCharacter ----
ReadConsoleOutputCharacter    ReadConsoleOutputCharacter函數從指定位置開始，從控制台螢幕緩衝區的連續儲存格中複製多個字元。
語法
參數
【hConsoleOutput】標識控制台螢幕緩衝區。控制碼必須具有GENERIC_READ許可權。【lpCharacter】指向緩衝區，接收從螢幕緩衝區讀取的字元。【nLength】指定要讀取


-------------------------------------------------------- KeyGTK3Win32ReadDirectoryChangesW ----
ReadDirectoryChangesW    [New - Windows NT]ReadDirectoryChangesW函數返回描述在目錄中發生的更改的資訊。
語法
參數
【hDirectory】標識要觀看的目錄。必須使用FILE_LIST_DIRECTORY存取權限打開此目錄。【lpBuffer】指定要在其中返回讀取結果的格式化緩衝區的位址。該緩衝區的結構由


-------------------------------------------------------- KeyGTK3Win32ReadEventLog ----
ReadEventLog    ReadEventLog函數從指定的事件日誌讀取整個條目。該函數可用于以正向或反向時間順序讀取日誌條目。
語法
參數
【hEventLog】標識要讀取的事件日誌。該控制碼由OpenEventLog函數返回。【dwReadFlags】指定讀取操作如何繼續。此參數可以是以下值的任意組合：值含義EVENTLOG_F


-------------------------------------------------------- KeyGTK3Win32ReadFile ----
ReadFile    ReadFile函數從檔指標所指定的位置開始讀取資料。讀取操作完成後，檔指針將按實際讀取的位元組數進行調整，除非使用overlap屬性創建檔案控制代碼。如果為重疊的輸入和輸出（I / O）創建檔案控制代碼，則應用程式必須在讀取操作後調整檔指標的位置。
語法
參數
【HFILE】標識要讀取的檔。必須使用GENERIC_READ訪問該檔創建檔案控制代碼。Windows NT對於非同步讀取操作，【HFILE】可以是使用CreateFile函數的FILE_FL


-------------------------------------------------------- KeyGTK3Win32ReadFileEx ----
ReadFileEx    ReadFileEx函數從非同步讀取檔中的資料。它專為非同步作業而設計，不同於專為同步和非同步作業而設計的ReadFile函數。ReadFileEx允許應用程式在檔讀取操作期間執行其他處理。
語法
參數
【HFILE】指定要讀取的檔實體的打開控制碼。必須使用FILE_FLAG_OVERLAPPED標誌創建此檔案控制代碼，並且必須對該檔具有GENERIC_READ許可權。Windows NT： 【


-------------------------------------------------------- KeyGTK3Win32ReadPrinter ----
ReadPrinter    ReadPrinter函數從指定的印表機檢索資料。
語法
參數
【hPrinter】標識要檢索資料的印表機。【PBUFlb】指向接收印表機資料的位元組陣列。【cbBuf】指定【PBUFlb】指向的緩衝區的大小（以位元組為單位）。【pNoBytesRead】指


-------------------------------------------------------- KeyGTK3Win32ReadProcessMemory ----
ReadProcessMemory    ReadProcessMemory函數在指定的進程中讀取記憶體。要讀取的整個區域必須可訪問，否則操作失敗。
語法
參數
【hProcess】標識讀取記憶體的進程的打開控制碼。該控制碼必須具有進程的PROCESS_VM_READ存取權限。【lpBaseAddress】指向要讀取的指定進程中的基底位址。在發生任何數據傳


-------------------------------------------------------- KeyGTK3Win32RealizePalette ----
RealizePalette    RealizePalette函數將調色板條目從當前邏輯調色板映射到系統調色板。
語法
參數
【HDC】標識已選擇邏輯調色板的設備上下文（DC）。
返回值
如果函數成功，則返回值是映射到系統調色板的邏輯調色板中的條目數。如果函數失敗，返回值為GDI_ERROR。要獲取擴展錯誤資訊


-------------------------------------------------------- KeyGTK3Win32Rectangle ----
矩形    長方形函數繪製一個矩形。使用當前筆並使用當前畫筆填充矩形。BOOL Rectangle(HDC 【HDC】,//設備上下文的控制碼INT 【nLeftRect】,// x-coord。邊框的左上角INT 【nTopRect】,//的y座標。邊框的左上角INT 【nRightRect】,// x-coord。邊框的右下角INT 【nBottomRect】//的y座標。邊框的右下角);
參數
【HDC】標識設備上下文。【nLeftRect】指定矩形左上角的邏輯x座標。【nTopRect】指定矩形左上角的邏輯y座標。【nRightRect】指定矩形右下角的邏輯x座標。【nBotto


-------------------------------------------------------- KeyGTK3Win32RectInRegion ----
RectInRegion    RectInRegion函數確定指定矩形的任何部分是否在區域的邊界內。
語法
參數
【HRGN】識別該地區。【LPRC】指向包含矩形座標的RECT結構。不包括矩形的下邊和右邊。
返回值
如果指定矩形的任何部分位於該區域的邊界內，則返回值不為零。如果指定矩形的任何部分都不


-------------------------------------------------------- KeyGTK3Win32RectVisible ----
RectVisible    RectVisible函數確定指定矩形的任何部分是否位於設備上下文的裁剪區域內。
語法
參數
【HDC】標識設備上下文。【LPRC】指向包含指定矩形的邏輯座標的RECT結構。
返回值
如果指定矩形的某些部分位於裁剪區域內，則返回值不為零。如果指定矩形的任何部分都不在裁剪區域內，返


-------------------------------------------------------- KeyGTK3Win32RedrawWindow ----
RedrawWindow    RedrawWindow函數可更新視窗客戶區中指定的矩形或區域。
語法
參數
【的hWnd】標識要重繪的視窗。如果此參數為NULL，則會更新桌面視窗。【lprcUpdate】指向包含更新矩形座標的RECT結構。如果【hrgnUpdate】參數標識一個區域，則忽略該參數


-------------------------------------------------------- KeyGTK3Win32RegCloseKey ----
RegCloseKey    RegCloseKey函數釋放指定鍵的控制碼。
語法
參數
【的hKeyru-Latn】標識要關閉的打開鍵。
返回值
如果函數成功，則返回值為ERROR_SUCCESS。如果函數失敗，返回值是在WINERROR.H中定義的非零錯誤代碼。您可以使用


-------------------------------------------------------- KeyGTK3Win32RegConnectRegistry ----
RegConnectRegistry    RegConnectRegistry函數與其他電腦上的預定義註冊表控制碼建立連接。
語法
參數
【lpMachineName】指向一個以空字元結尾的字串，其中包含遠端電腦的名稱。該字串具有以下形式：\\【電腦名】如果【lpMachineName】為NULL，則使用本地電腦名稱


-------------------------------------------------------- KeyGTK3Win32RegCreateKey ----
RegCreateKey    RegCreateKey函數創建指定的鍵。如果金鑰已經存在於註冊表中，則該函數將打開它。此函數用於與Windows 3.1版相容。基於Win32的應用程式應使用RegCreateKeyEx函數。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegCreateKeyEx ----
RegCreateKeyEx    RegCreateKeyEx函數創建指定的鍵。如果金鑰已經存在於註冊表中，則該函數將打開它。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegDeleteKey ----
RegDeleteKey    Windows 95： RegDeleteKey函數刪除一個鍵及其所有後代。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegDeleteValue ----
RegDeleteValue    RegDeleteValue函數從指定的註冊表項中刪除一個命名值。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegEnumKey ----
RegEnumKey    RegEnumKey函數枚舉指定的打開註冊表項的子項。該函數在每次調用時檢索一個子項的名稱。此函數用於與Windows 3.1版相容。基於Win32的應用程式應使用RegEnumKeyEx函數。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegEnumKeyEx ----
RegEnumKeyEx    RegEnumKeyEx函數枚舉指定的打開註冊表項的子項。該函數在每次調用時檢索有關一個子項的資訊。與RegEnumKey函數不同，RegEnumKeyEx檢索子項的類名和上次修改的時間。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegEnumValue ----
RegEnumValue    RegEnumValue函數枚舉指定打開的註冊表項的值。該函數在每次調用時複製一個索引值名稱和資料塊。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegFlushKey ----
RegFlushKey    RegFlushKey函數將指定的打開金鑰的所有屬性寫入註冊表。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegGetKeySecurity ----
RegGetKeySecurity    RegGetKeySecurity函數檢索保護指定的打開註冊表項的安全性描述元的副本。
語法
參數
【的hKeyru-Latn】標識要檢索安全性描述元的打開金鑰。【SecurityInformation】指定一個SECURITY_INFORMATION結構，指示所請求的安全性資訊。【pSec


-------------------------------------------------------- KeyGTK3Win32RegisterClass ----
RegisterClass    RegisterClass函數註冊一個視窗類，用於隨後在CreateWindow或CreateWindowEx函數的調用中使用。
語法
參數
【lpWndClass】指向WNDCLASS結構。在將結構傳遞給函數之前，必須使用適當的類屬性來填充結構。
返回值
如果函數成功，則返回值是唯一標識正在註冊的類的原子。如果函數失敗，返回


-------------------------------------------------------- KeyGTK3Win32RegisterClassEx ----
RegisterClassEx    [Now Supported on Windows NT]RegisterClassEx函數註冊一個視窗類，用於在CreateWindow或CreateWindowEx函數的調用中進行後續使用。RegisterClass函數不允許您設置小圖示。
語法
參數
【lpwcx】指向WNDCLASSEX結構。在將結構傳遞給函數之前，必須使用適當的類屬性來填充結構。
返回值
如果函數成功，則返回值是唯一標識正在註冊的類的原子。如果函數失敗，返回值為零


-------------------------------------------------------- KeyGTK3Win32RegisterClipboardFormat ----
RegisterClipboardFormat    RegisterClipboardFormat函數註冊新的剪貼板格式。然後可以將此格式用作有效的剪貼板格式。
語法
參數
【lpszFormat】指向以空字元結尾的字串，命名新格式。
返回值
如果函數成功，則返回值標識已註冊的剪貼板格式。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastE


-------------------------------------------------------- KeyGTK3Win32RegisterDialogClasses ----
RegisterDialogClasses    RegisterDialogClasses函數註冊螢幕保護裝置程式配置對話方塊所需的任何非標準視窗類。
語法
參數
【HINST】標識註冊視窗類的模組的實例。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
Register


-------------------------------------------------------- KeyGTK3Win32RegisterEventSource ----
RegisterEventSource    RegisterEventSource函數返回一個可以與ReportEvent函數一起使用的控制碼來記錄一個事件。可以使用任何源名稱;它將在事件日誌記錄中攜帶，以便事件檢視器可以使用它進行過濾。
語法
參數
【lpUNCServerName】指向以空字元結尾的字串，該字串指定要執行此操作的伺服器的通用命名慣例（UNC）名稱。如果此參數為NULL，則在本地電腦上執行該操作。【lpSource


-------------------------------------------------------- KeyGTK3Win32RegisterHotKey ----
RegisterHotKey    RegisterHotKey函式定義當前執行緒的熱鍵。
語法
參數
【的hWnd】標識將接收熱鍵生成的WM_HOTKEY消息的視窗。如果此參數為NULL，WM_HOTKEY消息將發送到調用執行緒的訊息佇列，並且必須在消息迴圈中處理。【id】指定熱鍵的識別字。調


-------------------------------------------------------- KeyGTK3Win32RegisterServiceCtrlHandler ----
RegisterServiceCtrlHandler    RegisterServiceCtrlHandler函數註冊一個函數來處理服務的服務控制請求。
語法
參數
【lpServiceName】指向以空字元結尾的字串，命名由調用執行緒運行的服務。這是在創建服務時在CreateService函數中指定的服務名稱。【lpHandlerProc】指向要註冊的


-------------------------------------------------------- KeyGTK3Win32RegisterWindowMessage ----
RegisterWindowMessage    RegisterWindowMessage函式定義了一個新的視窗消息，保證在整個系統中是唯一的。當調用SendMessage或PostMessage函數時，可以使用返回的消息值。
語法
參數
【lpString】指向指定要註冊的消息的以null結尾的字串。
返回值
如果消息成功註冊，則返回值是0xC000到0xFFFF範圍內的消息識別字。如果函數失敗，返回值為零。
描述



-------------------------------------------------------- KeyGTK3Win32RegLoadKey ----
RegLoadKey    RegLoadKey函數在HKEY_USER或HKEY_LOCAL_MACHINE下創建一個子項，並將指定檔的註冊資訊存儲到該子項中。這種註冊資訊是蜂巢的形式。配置單元是一個獨立的鍵，子項和值，它們以root註冊表層次結構的頂部為根。配置單元由單個檔和.LOG檔支援。
語法
參數
【的hKeyru-Latn】指定子項將被創建的鍵。這可以是預定義的保留控制碼值，或者是調用RegConnectRegistry返回的控制碼。預定義的保留控制碼值為：HKEY_LOCAL_MACHI


-------------------------------------------------------- KeyGTK3Win32RegNotifyChangeKeyValue ----
RegNotifyChangeKeyValue    RegNotifyChangeKeyValue函數通知調用者對指定註冊表項的屬性或內容的更改。請注意，如果指定的鍵被刪除，該函數不通知調用者。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegOpenKey ----
RegOpenKey    RegOpenKey函數打開指定的鍵。此函數用於與Windows 3.1版相容。基於Win32的應用程式應使用RegOpenKeyEx函數。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegOpenKeyEx ----
RegOpenKeyEx    RegOpenKeyEx函數打開指定的鍵。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegQueryInfoKey ----
RegQueryInfoKey    RegQueryInfoKey函數檢索有關指定註冊表項的資訊。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegQueryMultipleValues ----
RegQueryMultipleValues    RegQueryMultipleValues函數檢索與打開的註冊表項相關聯的值名稱清單的類型和資料。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何預定義的保留控制碼值：HKEY_CLASSES_ROOT
HEY_CURRENT_USER
HKEY_LOCAL_MACHINE
HKE


-------------------------------------------------------- KeyGTK3Win32RegQueryValue ----
RegQueryValue    RegQueryValue函數檢索與註冊表中指定鍵的未命名值相關聯的值。註冊表中的值具有名稱，類型和資料元件。此函數檢索具有NULL名稱的鍵的第一個值的資料。此函數用於與Windows 3.1版相容。基於Win32的應用程式應使用RegQueryValueEx函數。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegQueryValueEx ----
RegQueryValueEx    RegQueryValueEx函數檢索與打開的註冊表項相關聯的指定值名稱的類型和資料。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegReplaceKey ----
RegReplaceKey    RegReplaceKey函數用另一個檔替換支援一個金鑰及其所有子金鑰的檔，這樣當系統下次啟動時，金鑰和子金鑰將具有存儲在新檔中的值。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegRestoreKey ----
RegRestoreKey    RegRestoreKey函數讀取指定檔中的註冊表資訊，並將其複製到指定的鍵上。該註冊表資訊可以是金鑰和多級子金鑰的形式。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegSaveKey ----
RegSaveKey    RegSaveKey函數將指定的鍵及其所有子項和值保存到新檔中。
語法
參數
【的hKeyru-Latn】指定要開始保存操作的鍵的控制碼或以下任何預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACH


-------------------------------------------------------- KeyGTK3Win32RegSetKeySecurity ----
RegSetKeySecurity    RegSetKeySecurity函數設置打開註冊表項的安全性。
語法
參數
【的hKeyru-Latn】標識設置安全性描述元的打開金鑰。【SecurityInformation】指定一個SECURITY_INFORMATION結構，指示所提供的安全性描述元的內容。因為子


-------------------------------------------------------- KeyGTK3Win32RegSetValue ----
RegSetValue    RegSetValue函數將值與指定的鍵相關聯。此值必須是文本字串，不能有名稱。此函數用於與Windows 3.1版相容。基於Win32的應用程式應使用RegSetValueEx函數，該函數允許應用程式設置任意數量的任何資料類型的命名值。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegSetValueEx ----
RegSetValueEx    RegSetValueEx函數將資料存儲在打開的註冊表項的值欄位中。它還可以為指定的鍵設置附加值和類型資訊。
語法
參數
【的hKeyru-Latn】標識當前打開的鍵或任何以下預定義保留控制碼值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegUnLoadKey ----
RegUnLoadKey    RegUnLoadKey函數從註冊表中卸載指定的鍵和子項。
語法
參數
【的hKeyru-Latn】指定要卸載的金鑰。這可以是預定義的預留控制碼值，或者是調用RegConnectRegistry返回的控制碼。預定義的保留控制碼值為：HKEY_LOCAL_MACHINE


-------------------------------------------------------- KeyGTK3Win32ReleaseCapture ----
ReleaseCapture    ReleaseCapture函數從當前執行緒中的視窗釋放滑鼠捕獲，並恢復正常的滑鼠輸入處理。捕獲滑鼠的視窗接收所有滑鼠輸入，無論游標的位置如何，除非當游標熱點位於另一個執行緒的視窗中時按一下滑鼠按鈕。
語法
參數
此函數無參數。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
調用SetCapture函數後，應用程式調用此函數。Windows 95：調用此函數會導致失去鼠


-------------------------------------------------------- KeyGTK3Win32ReleaseDC ----
ReleaseDC    ReleaseDC函數釋放設備上下文（DC），將其釋放供其他應用程式使用。ReleaseDC函數的效果取決於設備上下文的類型。它只釋放普通和視窗設備上下文。它對類或私有設備上下文沒有影響。
語法
參數
【的hWnd】標識要釋放設備上下文的視窗。【hDC】標識要釋放的設備上下文。
返回值
返回值指定設備上下文是否被釋放。如果設備上下文被釋放，則返回值為1。如果設備上下文未釋放，則返回值為


-------------------------------------------------------- KeyGTK3Win32ReleaseMutex ----
ReleaseMutex    ReleaseMutex函數釋放指定的互斥物件的所有權。
語法
參數
【hMutex】標識互斥體物件。CreateMutex或OpenMutex函數返回此控制碼。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用Get


-------------------------------------------------------- KeyGTK3Win32ReleaseSemaphore ----
ReleaseSemaphore    ReleaseSemaphore函數將指定信號量物件的計數增加指定量。
語法
參數
【// handle of the semaphore object】標識信號量物件。CreateSemaphore或OpenSemaphore函數返回此控制碼。Windows NT：此控制碼必


-------------------------------------------------------- KeyGTK3Win32RemoveDirectory ----
RemoveDirectory    RemoveDirectory函數刪除現有的空目錄。
語法
參數
【lpPathName】指向一個以null結尾的字串，指定要刪除的目錄的路徑。該路徑必須指定一個空目錄，並且調用進程必須具有對目錄的刪除存取權限。
返回值
如果函數成功，返回值不為零。


-------------------------------------------------------- KeyGTK3Win32RemoveFontResource ----
RemoveFontResource    RemoveFontResource函數從Windows字體表中刪除指定檔中的字體。
語法
參數
【lpFileName】指向以空字元結尾的字串，命名字體資源檔。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32RemoveMenu ----
RemoveMenu    RemoveMenu函數從指定的功能表中刪除功能表項目。如果功能表項目打開一個下拉式功能表或子功能表，RemoveMenu不會破壞功能表或其控制碼，允許功能表重複使用。在調用此函數之前，GetSubMenu函數應該檢索下拉式功能表或子功能表的控制碼。
語法
參數
【HMENU】標識要更改的功能表。【uPositionbs】指定要刪除的功能表項目，由【uFlags】參數確定。【uFlags】指定如何解釋【uPositionbs】參數。此參數必須是以下值之一：


-------------------------------------------------------- KeyGTK3Win32RemoveProp ----
RemoveProp    RemoveProp函數從指定視窗的屬性清單中刪除一個條目。指定的字串標識要刪除的條目。
語法
參數
【的hWnd】標識要更改屬性清單的視窗。【lpString】指向以null結尾的字串或包含標識字串的原子。如果此參數是原子，則必須使用AddAtom函數創建。原子，16位值，必須放在【l


-------------------------------------------------------- KeyGTK3Win32ReplaceText ----
ReplaceText    ReplaceText函數創建一個系統定義的無強制回應對話方塊，允許使用者指定要搜索的字串和替換字串，以及用於控制查找和替換操作的選項。
語法
參數
【LPFR】指向FINDREPLACE結構的指標，其中包含用於初始化對話方塊的資訊。該對話方塊使用此結構將有關使用者輸入的資訊發送到您的應用程式。有關詳細資訊，請參閱以下備註部分。
返回值
如


-------------------------------------------------------- KeyGTK3Win32ReplyMessage ----
ReplyMessage    ReplyMessage函數用於回復通過SendMessage函數發送的消息，而不返回對稱為SendMessage的函數的控制。
語法
參數
【LRESULT】指定消息處理的結果。可能的值基於發送的消息。
返回值
如果調用執行緒正在處理從另一個執行緒或進程發送的消息，則返回值不為零。如果調用執行緒沒有處理從另一個執行緒或進程發送的消息


-------------------------------------------------------- KeyGTK3Win32ReportEvent ----
ReportEvent    ReportEvent函數在指定事件日誌的末尾寫入一個條目。
語法
參數
【hEventLog】標識事件日誌。該控制碼由RegisterEventSource函數返回。【WTYPE】指定正在記錄的事件的類型。此參數可以是以下值之一：值含義EVENTLOG_ERROR


-------------------------------------------------------- KeyGTK3Win32ResetDC ----
ResetDC    ResetDC函數根據指定結構中的資訊更新給定的印表機或繪圖器設備上下文。
語法
參數
【HDC】標識要更新的設備上下文。【lpInitData】指向DEVMODE結構，其中包含有關新設備上下文的資訊。
返回值
如果函數成功，則返回值是原始設備上下文的控制碼。如果函數失敗，返


-------------------------------------------------------- KeyGTK3Win32ResetEvent ----
ResetEvent    ResetEvent函數將指定的事件物件的狀態設置為非信號。
語法
參數
【活動】標識事件物件。CreateEvent或OpenEvent函數返回此控制碼。Windows NT：控制碼必須有EVENT_MODIFY_STATE存取權限。有關詳細資訊，請參閱進程間同步對


-------------------------------------------------------- KeyGTK3Win32ResetPrinter ----
ResetPrinter    ResetPrinter函數允許應用程式指定用於列印由StartDocPrinter函數提交的文檔的資料類型和設備模式值。一旦文檔列印開始，可以使用SetJob函數覆蓋這些值。
語法
參數
【hPrinter】識別印表機。【pDefault】指向PRINTER_DEFAULTS結構。ResetPrinter函數忽略PRINTER_DEFAULTS結構的DesiredAccess


-------------------------------------------------------- KeyGTK3Win32ResizePalette ----
ResizePalette    ResizePalette函數根據指定的值增加或減少邏輯調色板的大小。
語法
參數
【HPAL】標識要更改的調色板。【的nentries】指定調色板大小後的條目數。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastE


-------------------------------------------------------- KeyGTK3Win32RestoreDC ----
RestoreDC    RestoreDC函數將設備上下文（DC）恢復到指定的狀態。通過從先前調用SaveDC函數創建的堆疊彈出狀態資訊來恢復設備上下文。
語法
參數
【HDC】標識設備上下文。【nSavedDC】指定要恢復的設備上下文的實例。如果此參數為正，則【nSavedDC】表示要還原的設備上下文的特定實例。如果此參數為負，則【nSavedDC】表示


-------------------------------------------------------- KeyGTK3Win32ResumeThread ----
ResumeThread    ResumeThread函數減少執行緒的掛起計數。當暫停計數遞減到零時，執行緒的執行被恢復。
語法
參數
【hThread】指定要重新啟動的執行緒的控制碼。Windows NT：控制碼必須具有對執行緒的THREAD_SUSPEND_RESUME存取權限。有關詳細資訊，請參閱執行緒物件.
返回值
如果函


-------------------------------------------------------- KeyGTK3Win32ReuseDDElParam ----
ReuseDDElParam    ReuseDDElParam函數允許應用程式重新使用打包的DDE 【lParam的】參數，而不是分配新的打包【lParam的】.使用此函數可減少通過打包DDE消息的應用程式的重新分配。
語法
參數
【lParam的】指定正在重用的發佈的DDE消息的【lParam的】參數。【的MsgIn】指定接收的DDE消息的識別字。【msgOut】指定要發佈的DDE消息的識別字。DDE消息將重新使用打


-------------------------------------------------------- KeyGTK3Win32RevertToSelf ----
RevertToSelf    RevertToSelf函數終止用戶端應用程式的類比。
語法
參數
此函數無參數。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
在使用DdeImpersonateClien


-------------------------------------------------------- KeyGTK3Win32RoundRect ----
RoundRect    RoundRect函數繪製一個帶圓角的矩形。使用當前筆並使用當前畫筆填充矩形。
語法
參數
【HDC】標識設備上下文。【nLeftRect】指定矩形左上角的x座標。【nTopRect】指定矩形左上角的y座標。【nRightRect】指定矩形右下角的x座標。【nBottomRect】


-------------------------------------------------------- KeyGTK3Win32SaveDC ----
SaveDC    通過將描述所選物件和圖形模式（如點陣圖，畫筆，調色板，字體，筆，區域，繪圖模式和映射模式）的資料複製到SaveDC函數來保存指定設備上下文（DC）的當前狀態，上下文堆疊。
語法
參數
【HDC】標識要保存的設備上下文。
返回值
如果函數成功，則返回值標識已保存的設備上下文。如果函數失敗，返回值為零。
描述
可以使用SaveDC函數任意次數來保存設備上下文狀態的任何


-------------------------------------------------------- KeyGTK3Win32ScaleViewportExtEx ----
ScaleViewportExtEx    ScaleViewportExtEx函數通過使用指定的乘數和除數形成的比例來修改設備上下文（DC）的視口。
語法
參數
【HDC】標識設備上下文。【XNUM】指定用於乘以當前水準範圍的量。【//水準除數】指定用於劃分當前水準範圍的量。【// vertical multiplicand】指定乘以當前垂直範圍的量


-------------------------------------------------------- KeyGTK3Win32ScaleWindowExtEx ----
ScaleWindowExtEx    ScaleWindowExtEx函數使用指定的乘數和除數形成的比率修改設備上下文的視窗。
語法
參數
【HDC】標識設備上下文。【XNUM】指定用於乘以當前水準範圍的量。【//水準除數】指定用於劃分當前水準範圍的量。【// vertical multiplicand】指定乘以當前垂直範圍的量


-------------------------------------------------------- KeyGTK3Win32ScheduleJob ----
ScheduleJob    ScheduleJob函數請求列印多工緩衝處理器安排指定的列印工作進行列印。
語法
參數
【hPrinter】手柄指定列印工作的印表機。這必須是配置為周邊同作印表機的本地印表機。如果【hPrinter】是遠端印表機連接的控制碼，或者如果印表機配置為直接列印，則ScheduleJob函


-------------------------------------------------------- KeyGTK3Win32ScreenSaverConfigureDialog ----
ScreenSaverConfigureDialog    ScreenSaverConfigureDialog函數接收發送到螢幕保護裝置程式配置對話方塊的消息。允許使用者配置的螢幕保護裝置程式必須支援此函數。
語法
參數
【hDlg】標識配置對話方塊。【資訊】指定消息。【wParam中】指定附加的消息特定資訊。【lParam的】指定附加的消息特定資訊。
返回值
如果函數處理消息，返回值為TRUE;否則，它是


-------------------------------------------------------- KeyGTK3Win32ScreenSaverProc ----
ScreenSaverProc    ScreenSaverProc函數接收發送到指定螢幕保護裝置程式視窗的消息。
語法
參數
【的hWnd】標識視窗。【資訊】指定消息。【wParam中】指定附加的消息特定資訊。【lParam的】指定附加的消息特定資訊。
返回值
返回值是消息處理的結果，取決於發送的消息。
描述


-------------------------------------------------------- KeyGTK3Win32ScreenToClient ----
ScreenToClient    ScreenToClient函數將螢幕上指定點的螢幕座標轉換為用戶端座標。
語法
參數
【的hWnd】識別用戶端區域將用於轉換的視窗。【LPPOINT】指向包含要轉換的螢幕座標的POINT結構。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
該函


-------------------------------------------------------- KeyGTK3Win32ScrollConsoleScreenBuffer ----
ScrollConsoleScreenBuffer    ScrollConsoleScreenBuffer函數在螢幕緩衝區中移動一組資料。可以通過指定剪切矩形來限制移動的效果，因此剪切矩形外的螢幕緩衝區的內容不變。
語法
參數
【hConsoleOutput】標識控制台螢幕緩衝區。控制碼必須具有GENERIC_WRITE許可權。【lpScrollRectangle】指向SMALL_RECT結構，其成員指定要移動的螢幕緩


-------------------------------------------------------- KeyGTK3Win32ScrollDC ----
ScrollDC    ScrollDC函數水準和垂直捲動一個位矩形。
語法
參數
【hDC】標識包含要滾動的位元的設備上下文。【dx】指定水準滾動的設備單位數量。該參數必須是負值才能向左滾動。【dy】指定垂直捲動的設備單位數量。該參數必須是負值才能向上滾動。【lprcScr


-------------------------------------------------------- KeyGTK3Win32ScrollWindow ----
ScrollWindow    ScrollWindow函數滾動指定視窗的用戶端區域的內容。此函數存在向後相容性。對於新的應用程式，請使用ScrollWindowEx函數。
語法
參數
【的hWnd】標識要滾動用戶端區域的視窗。【XAmount】指定水準滾動的設備單位數量。如果要滾動的視窗具有CS_OWNDC或CS_CLASSDC樣式，則此參數使用邏輯單元而不是設備單位。該


-------------------------------------------------------- KeyGTK3Win32ScrollWindowEx ----
ScrollWindowEx    ScrollWindowEx函數滾動指定視窗的用戶端區域的內容。此函數與ScrollWindow函數類似，但具有其他函數。
語法
參數
【的hWnd】標識要滾動用戶端區域的視窗。【dx】指定水準滾動的設備單位數量。該參數必須是負值才能向左滾動。【dy】指定垂直捲動的設備單位數量。該參數必須是負值才能向上滾動。【// addr


-------------------------------------------------------- KeyGTK3Win32SearchPath ----
SearchPath    SearchPath函數搜索指定的檔。
語法
參數
【lpPath】指向以空字元結尾的字串，指定要搜索檔的路徑。如果此參數為NULL，則該函數按以下循序搜尋以下目錄中的匹配檔：1.應用程式載入的目錄。2.目前的目錄。3.Windows 9


-------------------------------------------------------- KeyGTK3Win32SelectClipPath ----
SelectClipPath    SelectClipPath函數將當前路徑選擇為設備上下文的裁剪區域，通過使用指定的模式將新區域與任何現有的裁剪區域組合。
語法
參數
【HDC】標識路徑的設備上下文。【iMode平臺】指定使用路徑的方式。允許以下值：值含義RGN_AND新的剪輯區域包括當前剪輯區域和當前路徑的交點（重疊區域）。RGN_COPY新剪輯區域是當


-------------------------------------------------------- KeyGTK3Win32SelectClipRgn ----
SelectClipRgn    SelectClipRgn函數選擇一個區域作為指定設備上下文的當前裁剪區域。
語法
參數
【HDC】標識設備上下文。【HRGN】標識要選擇的區域。
返回值
如果函數成功，則返回值指定區域的複雜度，可以是以下值之一：值含義NULLREGION區域是空的SIMPLEREGION區


-------------------------------------------------------- KeyGTK3Win32SelectObject ----
SelectObject    SelectObject函數在指定的設備上下文中選擇一個物件。新物件將替換同一類型的上一個物件。
語法
參數
【HDC】標識設備上下文。【hgdiobj】標識要選擇的物件。必須使用以下函數之一創建指定的物件：目的函數點陣圖CreateBitmap, CreateBitmapIndirect, Crea


-------------------------------------------------------- KeyGTK3Win32SelectPalette ----
SelectPalette    SelectPalette函數將指定的邏輯調色板選擇到設備上下文中。
語法
參數
【HDC】標識設備上下文。【HPAL】標識要選擇的邏輯調色板。【bForceBackground】指定邏輯調色板是否被強制為背景調色板。如果此值為TRUE，則RealizePalette函數


-------------------------------------------------------- KeyGTK3Win32SendAsyncProc ----
SendAsyncProc    SendAsyncProc函數是一個應用程式定義的回呼函數，當調用SendMessageCallback函數時，作業系統調用該函數。系統在將消息傳遞到目標視窗過程後，將消息傳遞給回呼函數。類型為SENDASYNCPROC的值是指向此類函數的指標。
語法
參數
【HWND】標識視窗程式接收到消息的視窗。如果SendMessageCallback函數的【HWND】參數設置為HWND_BROADCAST，則作業系統會為每個頂級視窗調用一次SendAsy


-------------------------------------------------------- KeyGTK3Win32SendDlgItemMessage ----
SendDlgItemMessage    SendDlgItemMessage函數在對話方塊中向指定的控制項發送消息。
語法
參數
【hDlg】標識包含控制項的對話方塊。【nIDDlgItem】指定接收消息的控制項的識別字。【消息】指定要發送的消息。【wParam中】指定附加的消息特定資訊。【lParam的】指定附加的消息特定


-------------------------------------------------------- KeyGTK3Win32SendMessage ----
SendMessage    SendMessage函數將指定的消息發送到視窗或視窗。該函式呼叫指定視窗的視窗過程，並且在視窗過程處理該消息之前不返回。相反，PostMessage函數將消息發佈到執行緒的訊息佇列，並立即返回。
語法
參數
【的hWnd】標識視窗程式將接收消息的視窗。如果此參數為HWND_BROADCAST，則會將消息發送到系統中的所有頂級視窗，包括禁用或不可見的未知視窗，重疊視窗和快顯視窗;但消息不會發送到子


-------------------------------------------------------- KeyGTK3Win32SendMessageCallback ----
SendMessageCallback    SendMessageCallback函數將指定的消息發送到視窗或視窗。該函式呼叫指定視窗的視窗過程並立即返回。視窗過程處理消息後，系統調用指定的回呼函數，將消息處理的結果和應用程式定義的值傳遞給回呼函數。
語法
參數
【的hWnd】標識視窗程式將接收消息的視窗。如果此參數為HWND_BROADCAST，則會將消息發送到系統中的所有頂級視窗，包括禁用或不可見的未知視窗，重疊視窗和快顯視窗;但消息不會發送到子


-------------------------------------------------------- KeyGTK3Win32SendMessageTimeout ----
SendMessageTimeout    SendMessageTimeout函數將指定的消息發送到視窗或視窗。該函式呼叫指定視窗的視窗過程，如果指定的視窗屬於不同的執行緒，則在視窗過程已處理該消息或指定的超時期限過去之前不會返回。如果接收到該消息的視窗屬於與當前執行緒相同的佇列，則直接調用視窗過程__忽略超時值。
語法
參數
【的hWnd】標識視窗程式將接收消息的視窗。如果此參數為HWND_TOPMOST，則會將消息發送到系統中的所有頂級視窗，包括禁用或不可見的未知窗口。【消息】指定要發送的消息。【wParam中


-------------------------------------------------------- KeyGTK3Win32SendNotifyMessage ----
SendNotifyMessage    SendNotifyMessage函數將指定的消息發送到視窗。如果視窗是由調用執行緒創建的，SendNotifyMessage調用該視窗的視窗過程，直到視窗過程處理該消息才返回。如果視窗由不同的執行緒創建，SendNotifyMessage將消息傳遞到視窗過程並立即返回;它不等待視窗過程來完成處理消息。
語法
參數
【的hWnd】標識視窗程式將接收消息的視窗。如果此參數為HWND_BROADCAST，則會將消息發送到系統中的所有頂級視窗，包括禁用或不可見的未知視窗，重疊視窗和快顯視窗;但消息不會發送到子


-------------------------------------------------------- KeyGTK3Win32ServiceMain ----
ServiceMain    ServiceMain函數是服務進程指定為特定服務的入口點函數的函數。該函數可以有任何應用程式定義的名稱。
語法
參數
【dwArgc】指定【lpszArgv】陣列中的參數數。【lpszArgv】指向指向以null結尾的參數字串的指標陣列。陣列中的第一個參數是服務的名稱，後續參數是由調用StartServi


-------------------------------------------------------- KeyGTK3Win32SetAbortProc ----
SetAbortProc    SetAbortProc函數設置應用程式定義的中止函數，允許在周邊同作期間取消列印工作。此函數替代SETABORTPROC印表機轉義。
語法
參數
【HDC】標識列印工作的設備上下文。【lpAbortProc】指向應用程式定義的中止函數。有關回呼函數的更多資訊，請參閱AbortProc回呼函數。
返回值
如果函數成功，返回值大於零。


-------------------------------------------------------- KeyGTK3Win32SetAclInformation ----
SetAclInformation    SetAclInformation函數設置有關存取控制清單（ACL）的資訊。
語法
參數
【ACL】指向ACL結構。該函數設置此ACL中的資訊。【pAclInformation】指向包含要設置的資訊的緩衝區。對於當前版本的Windows NT，這必須是ACL_REVISION_I


-------------------------------------------------------- KeyGTK3Win32SetActiveWindow ----
SetActiveWindow    SetActiveWindow函數啟動一個視窗。
語法
參數
【的hWnd】標識要啟動的頂級窗口。
返回值
如果函數成功，則返回值是以前啟動的窗口的控制碼。
描述
SetActiveWindow函數啟動一個視窗，但是如果應用程式在後臺，則不會啟用


-------------------------------------------------------- KeyGTK3Win32SetArcDirection ----
SetArcDirection    SetArcDirection設置用於圓弧和矩形函數的繪圖方向。
語法



-------------------------------------------------------- KeyGTK3Win32SetBitmapBits ----
SetBitmapBits    SetBitmapBits函數將點陣圖的顏色資料位元設置為指定值。
語法
參數
【骨形態發生蛋白】標識要設置的點陣圖。【cBytes】指定【LP位元元ca】參數指向的位元組數。【LP位元元ca】指向包含指定點陣圖的顏色資料的位元組陣列。
返回值
如果函數成功，則返回值是用於設置


-------------------------------------------------------- KeyGTK3Win32SetBitmapDimensionEx ----
SetBitmapDimensionEx    SetBitmapDimensionEx函數將優選的尺寸分配給點陣圖。這些尺寸可以由應用程式使用;但是，它們不被Windows使用。
語法
參數
【HBITMAP】標識點陣圖。點陣圖不能是DIB部分點陣圖。【nWidth】指定點陣圖的寬度（以0.1毫米為單位）。【nHeight參數】指定點陣圖的高度（以0.1毫米為單位）。【lpsiz到】指向S


-------------------------------------------------------- KeyGTK3Win32SetBkColor ----
SetBkColor    SetBkColor函數將當前背景顏色設置為指定的顏色值，如果設備無法表示指定的顏色值，則將其設置為最近的物理顏色。
語法
參數
【HDC】標識設備上下文。【crColor】指定新的背景顏色。
返回值
如果函數成功，則返回值將前一個背景顏色指定為COLORREF值。如果函數失敗，返回值為CLR_INVALID。



-------------------------------------------------------- KeyGTK3Win32SetBkMode ----
SetBkMode    SetBkMode函數設置指定設備上下文的後臺混合模式。背景混合模式與文本，陰影畫筆和不是實線的筆式樣一起使用。
語法
參數
【HDC】標識設備上下文。【iBkMode】指定背景模式。此參數可以是以下值之一：值描述OPAQUE在繪製文本，陰影畫筆或鋼筆之前，背景填充當前的背景顏色。TRANSPARENT背景保持不變


-------------------------------------------------------- KeyGTK3Win32SetBoundsRect ----
SetBoundsRect    SetBoundsRect函數控制指定設備上下文的邊界矩形資訊的累積。Windows可以維護所有繪圖操作的邊界矩形。應用程式可以檢查並設置此矩形。繪圖邊界對於無效點陣圖緩存非常有用。
語法
參數
【HDC】標識要累積邊界矩形的設備上下文。【lprcBounds】指向RECT結構，用於設置邊界矩形。矩形尺寸為邏輯座標。此參數可以為NULL。【旗】指定新矩形如何與累積的矩形組合。此參數可


-------------------------------------------------------- KeyGTK3Win32SetBrushOrgEx ----
SetBrushOrgEx    SetBrushOrgEx函數將GDI指定給應用程式選擇的【下一個】畫筆的畫筆原點設置到指定的設備上下文中。
語法
參數
【HDC】標識設備上下文。【nXOrg】指定新筆刷原點的設備單位的x座標。如果該值大於畫筆寬度，則使用模數運算子（【nXOrg】 mod畫筆寬度）減小其值。【nYOrg】指定新筆刷原點的設備


-------------------------------------------------------- KeyGTK3Win32SetCapture ----
SetCapture    SetCapture函數將滑鼠捕獲設置為屬於當前執行緒的指定視窗。一旦視窗捕獲了滑鼠，所有的滑鼠輸入都被定向到該視窗，無論游標是否在該窗口的邊框內。一次只能有一個視窗可以捕獲滑鼠。如果滑鼠游標位於由另一個執行緒創建的視窗上，系統將只有在滑鼠按鈕關閉時才將滑鼠輸入到指定的視窗。
語法
參數
【的hWnd】標識當前執行緒中捕獲滑鼠的視窗。
返回值
如果函數成功，則返回值是先前捕獲滑鼠的視窗的控制碼。如果沒有這樣的視窗，則返回值為NULL。
描述
只有前景視窗才能捕獲滑鼠。當後


-------------------------------------------------------- KeyGTK3Win32SetCaretBlinkTime ----
SetCaretBlinkTime    SetCaretBlinkTime函數將插入符號閃爍時間設置為指定的毫秒數。閃爍時間是反轉插入符號所需的經過時間（以毫秒為單位）。
語法
參數
【uMSeconds】指定新的閃爍時間（以毫秒為單位）。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
用


-------------------------------------------------------- KeyGTK3Win32SetCaretPos ----
SetCaretPos    SetCaretPos函數將插入符移動到指定的座標。如果使用CS_OWNDC類樣式創建擁有插入符號的視窗，則指定的座標將受到與該視窗關聯的設備上下文的映射模式的約束。
語法
參數
【X】指定插入符號的新x座標。【Y】指定插入符的新y座標。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述



-------------------------------------------------------- KeyGTK3Win32SetClassLong ----
SetClassLong    SetClassLong函數將指定偏移處的指定的32位（長）值替換為指定視窗所屬類的額外類記憶體或WNDCLASS結構。
語法
參數
【的hWnd】標識視窗，間接地標識視窗所屬的類。【參數nIndex】指定要替換的32位值。要在額外的類記憶體中設置一個32位元值，請指定要設置的值的正零，基於零的位元組偏移量。有效值範圍為零，通過


-------------------------------------------------------- KeyGTK3Win32SetClassWord ----
SetClassWord    SetClassWord函數將指定偏移處的16位（字）值替換為指定視窗所屬的視窗類的額外類記憶體。
語法
參數
【的hWnd】標識視窗，間接地標識視窗所屬的類。【參數nIndex】指定要替換的值的基於零的位元組偏移量。有效值範圍為零，通過類記憶體的位元組數減去2;例如，如果您指定了10個或更多位元組的額外類內


-------------------------------------------------------- KeyGTK3Win32SetClipboardData ----
SetClipboardData    SetClipboardData函數將資料以指定的剪貼板格式放置在剪貼板上。該視窗必須是當前的剪貼板所有者，應用程式必須調用OpenClipboard函數。（當回復WM_RENDERFORMAT和WM_RENDERALLFORMATS消息時，剪貼板所有者在致電SetClipboardData之前不得致電OpenClipboard）。
語法
參數
【UFormat】指定剪貼板格式。此參數可以是註冊格式或以下備註部分中列出的任何標準剪貼板格式。有關註冊剪貼板格式的資訊，請參閱RegisterClipboardFormat函數。【HMEM


-------------------------------------------------------- KeyGTK3Win32SetClipboardViewer ----
SetClipboardViewer    SetClipboardViewer函數將指定的視窗添加到剪貼板檢視器鏈。每當剪貼板的內容發生變化時，剪貼板檢視器視窗將收到WM_DRAWCLIPBOARD消息。
語法
參數
【hWndNewViewer】標識要添加到剪貼板鏈的窗口。
返回值
如果函數成功，則返回值標識剪貼板檢視器鏈中的下一個視窗。如果發生錯誤或剪貼板檢視器鏈中沒有其他視窗，則返回值為NULL


-------------------------------------------------------- KeyGTK3Win32SetColorAdjustment ----
SetColorAdjustment    SetColorAdjustment函數使用指定的值設置設備上下文的顏色調整值。
語法
參數
【HDC】標識設備上下文。【LPCA】指向包含顏色調整值的COLORADJUSTMENT結構。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用G


-------------------------------------------------------- KeyGTK3Win32SetColorSpace ----
SetColorSpace    SetColorSpace函數設置指定設備上下文的顏色空間，定義CIE XYZ空間中邏輯RGB空間的端點。
語法
參數
【HDC】處理設備上下文。【hColorSpace】處理邏輯色彩空間。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32SetCommBreak ----
SetCommBreak    SetCommBreak函數暫停指定通信設備的字元傳輸，並將傳輸線路置於中斷狀態，直到調用ClearCommBreak函數為止。
語法
參數
【HFILE】識別通信設備。CreateFile函數返回此控制碼。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描


-------------------------------------------------------- KeyGTK3Win32SetCommConfig ----
SetCommConfig    [Now Supported on Windows NT]SetCommConfig函數設置通信設備的當前配置。
語法
參數
【hCommDev】標識開放的通信設備。【lpCC】指向COMMCONFIG結構。【的dwSize】指定【lpCC】指向的結構的大小（以位元組為單位）。
返回值
如果函數成功，返回值不為零


-------------------------------------------------------- KeyGTK3Win32SetCommMask ----
SetCommMask    SetCommMask函數指定要監視通信設備的一組事件。
語法
參數
【HFILE】識別通信設備。CreateFile函數返回此控制碼。【dwEvtMask】指定要啟用的事件。值為零將禁用所有事件。此參數可以是以下值的組合：值含義EV_BREAK輸入時檢測到中斷


-------------------------------------------------------- KeyGTK3Win32SetCommState ----
SetCommState    SetCommState函數根據設備控制塊（DCB結構）中的規格配置通信設備。該函數重新初始化所有硬體和控制設置，但不會清空輸出或輸入佇列。
語法
參數
【HFILE】識別通信設備。CreateFile函數返回此控制碼。【lpDCB】指向DCB結構，其中包含指定通信設備的配置資訊。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為


-------------------------------------------------------- KeyGTK3Win32SetCommTimeouts ----
SetCommTimeouts    SetCommTimeouts函數設置指定通信設備上所有讀取和寫入操作的超時參數。
語法
參數
【HFILE】識別通信設備。CreateFile函數返回此控制碼。【lpCommTimeouts】指向包含新的超時值的COMMTIMEOUTS結構。
返回值
如果函數成功，返回值不為零。如


-------------------------------------------------------- KeyGTK3Win32SetComputerName ----
SetComputerName    SetComputerName函數設置下次重新開機系統時使用的電腦名稱。
語法
參數
【lpComputerName】指向一個空值終止的字串，指定下一次啟動電腦時電腦名稱的名稱。該名稱不得超過MAX_COMPUTERNAME_LENGTH個字元。Windows 95：如


-------------------------------------------------------- KeyGTK3Win32SetConsoleActiveScreenBuffer ----
SetConsoleActiveScreenBuffer    SetConsoleActiveScreenBuffer函數將指定的螢幕緩衝區設置為當前顯示的控制台螢幕緩衝區。
語法
參數
【hConsoleOutput】標識控制台螢幕緩衝區。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
控制


-------------------------------------------------------- KeyGTK3Win32SetConsoleCP ----
SetConsoleCP    SetConsoleCP函數設置與調用進程相關聯的控制台使用的輸入內碼表。控制台使用其輸入內碼表將鍵盤輸入轉換為相應的字元值。
語法
參數
【wCodePageID】指定要設置的內碼表的識別字。本地電腦上可用的內碼表的識別字將以以下金鑰存儲在註冊表中。HKEY_LOCAL_MACHINE\SYSTEM\CurrentContr


-------------------------------------------------------- KeyGTK3Win32SetConsoleCtrlHandler ----
SetConsoleCtrlHandler    SetConsoleCtrlHandler函數從調用進程的處理函數清單中添加或刪除應用程式定義的HandlerRoutine函數。如果沒有指定處理常式函數，則該函數設置一個可繼承屬性，該屬性確定調用進程是否忽略CTRL + C信號。
語法
參數
【HandlerRoutine】指向應用程式定義的HandlerRoutine函數添加或刪除。此參數可以為NULL。【加】指定是否從處理常式列表中添加或刪除【HandlerRoutine】參


-------------------------------------------------------- KeyGTK3Win32SetConsoleCursorInfo ----
SetConsoleCursorInfo    SetConsoleCursorInfo函數設置指定控制台螢幕緩衝區的游標的大小和可見性。
語法
參數
【hConsoleOutput】標識控制台螢幕緩衝區。控制碼必須具有GENERIC_WRITE許可權。【lpConsoleCursorInfo】指向CONSOLE_CURSOR_INFO結構，其


-------------------------------------------------------- KeyGTK3Win32SetConsoleCursorPosition ----
SetConsoleCursorPosition    SetConsoleCursorPosition函數在指定的控制台螢幕緩衝區中設置游標位置。
語法
參數
【hConsoleOutput】標識控制台螢幕緩衝區。控制碼必須具有GENERIC_WRITE許可權。【dwCursorPosition】指定包含新游標位置的COORD結構。座標是螢幕緩衝區字元


-------------------------------------------------------- KeyGTK3Win32SetConsoleMode ----
SetConsoleMode    SetConsoleMode函數設置控制台輸入緩衝區的輸入模式或控制台螢幕緩衝區的輸出模式。
語法
參數
【hConsoleHandle】標識控制台輸入緩衝區或螢幕緩衝區。控制碼必須具有GENERIC_WRITE許可權。【dwMode】指定要設置的輸入或輸出模式。如果【hConsoleHandle】


-------------------------------------------------------- KeyGTK3Win32SetConsoleOutputCP ----
SetConsoleOutputCP    SetConsoleOutputCP函數設置與調用進程關聯的控制台使用的輸出內碼表。控制台使用其輸出內碼表將由各種輸出函數寫入的字元值轉換為控制台視窗中顯示的圖像。
語法
參數
【wCodePageID】指定要設置的內碼表的識別字。本地電腦上可用的內碼表的識別字將以以下金鑰存儲在註冊表中。HKEY_LOCAL_MACHINE\SYSTEM\CurrentContr


-------------------------------------------------------- KeyGTK3Win32SetConsoleScreenBufferSize ----
SetConsoleScreenBufferSize    SetConsoleScreenBufferSize函數可以更改指定的控制台螢幕緩衝區的大小。
語法
參數
【hConsoleOutput】標識控制台螢幕緩衝區。控制碼必須具有GENERIC_WRITE許可權。【的dwSize】指定包含螢幕緩衝區的行和列的新大小的COORD結構。指定的寬度和高度不能小


-------------------------------------------------------- KeyGTK3Win32SetConsoleTextAttribute ----
SetConsoleTextAttribute    SetConsoleTextAttribute函數設置由WriteFile或WriteConsole函數寫入螢幕緩衝區的字元的前景（文本）和背景顏色屬性，或由ReadFile或ReadConsole函數回顯。此函數僅影響函式呼叫後寫入的文本。
語法
參數
【hConsoleOutput】標識控制台螢幕緩衝區。控制碼必須具有GENERIC_READ許可權。【wAttributes】指定前景色和背景顏色屬性。可以指定以下值的任意組合：FOREGROU


-------------------------------------------------------- KeyGTK3Win32SetConsoleTitle ----
SetConsoleTitle    SetConsoleTitle函數設置當前控制台視窗的標題列字串。
語法
參數
【lpConsoleTitle】指向一個以null結尾的字串，其中包含要顯示在控制台視窗的標題列中的字串。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯


-------------------------------------------------------- KeyGTK3Win32SetConsoleWindowInfo ----
SetConsoleWindowInfo    SetConsoleWindowInfo函數設置控制台螢幕緩衝區視窗的當前大小和位置。
語法
參數
【hConsoleOutput】標識控制台螢幕緩衝區。控制碼必須具有GENERIC_WRITE許可權。【bAbsolute】指定如何使用【lpConsoleWindow】參數指向的結構中的座標。


-------------------------------------------------------- KeyGTK3Win32SetCurrentDirectory ----
SetCurrentDirectory    SetCurrentDirectory函數更改當前進程的目前的目錄。
語法
參數
【lpPathName】指向一個以null結尾的字串，指定新的目前的目錄的路徑。該參數可以是相對路徑或完全限定路徑。在任一情況下，計算指定目錄的完全限定路徑並將其存儲為目前的目錄。
返回值



-------------------------------------------------------- KeyGTK3Win32SetCursor ----
SetCursor    SetCursor函數建立游標形狀。
語法
參數
【HCURSORpt】標識游標。游標必須由CreateCursor創建或由LoadCursor或LoadImage函數載入。如果此參數為NULL，則將游標從螢幕中刪除。Windows 95：


-------------------------------------------------------- KeyGTK3Win32SetCursorPos ----
SetCursorPos    SetCursorPos函數將游標移動到指定的螢幕座標。如果新座標不在最新的ClipCursor函數設置的螢幕矩形內，Windows會自動調整座標，使游標停留在矩形內。
語法
參數
【X】指定游標的螢幕座標中的新x座標。【Y】指定游標的螢幕座標中的新y座標。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastErr


-------------------------------------------------------- KeyGTK3Win32SetDebugErrorLevel ----
SetDebugErrorLevel    SetDebugErrorLevel函數設置Windows將生成調試事件的最小錯誤級別，並將其傳遞給調試器。
語法



-------------------------------------------------------- KeyGTK3Win32SetDefaultCommConfig ----
SetDefaultCommConfig    [Now Supported on Windows NT]SetDefaultCommConfig函數設置通信設備的預設配置。
語法
參數
【lpszName】指向指定設備名稱的以null結尾的字串。【lpCC】指向COMMCONFIG結構。如果此參數為NULL，則將預設配置設置為設備驅動程式的預設值。【的dwSize】指定【


-------------------------------------------------------- KeyGTK3Win32SetDeviceGammaRamp ----
SetDeviceGammaRamp    SetDeviceGammaRamp函數設置直接彩色顯示板上的伽瑪斜坡。
語法
參數
【HDC】處理設備上下文。【lpRamp】指向一組256位元組元素的三個陣列。這些陣列是幀緩衝器和DAC值之間的顏色值之間的映射。第一個陣列是紅色，下一個是綠色，最後一個是藍色。
返回值



-------------------------------------------------------- KeyGTK3Win32SetDIBColorTable ----
SetDIBColorTable    SetDIBColorTable函數在當前選定到指定設備上下文的與設備無關的點陣圖（DIB）的顏色表中的條目範圍內設置RGB（紅，綠，藍）顏色值。
語法
參數
【HDC】指定設備上下文。必須在設備上下文中選擇與設備無關的點陣圖。【uStartIndex】基於零的顏色表索引，指定要設置的第一個顏色表條目。【cEntries】指定要設置的顏色表條目數。【


-------------------------------------------------------- KeyGTK3Win32SetDIBits ----
SetDIBits    SetDIBits函數使用指定的與設備無關的點陣圖（DIB）中找到的顏色資料設置點陣圖中的圖元。
語法
參數
【HDC】標識設備上下文。【骨形態發生蛋白】使用指定DIB的顏色資料標識要更改的點陣圖。【uStartScan】指定由【lpvBits】參數指向的陣列中與設備無關的顏色資料的起始掃描行。【cS


-------------------------------------------------------- KeyGTK3Win32SetDIBitsToDevice ----
SetDIBitsToDevice    SetDIBitsToDevice函數使用來自設備無關點陣圖（DIB）的顏色資料設置與目標設備上下文關聯的設備上指定矩形中的圖元。
語法
參數
【HDC】標識設備上下文。【XDest】指定目標矩形左上角的x座標（以邏輯為單位）。【YDest】指定目標矩形左上角的y座標（以邏輯為單位）。【dwWidthmt】指定DIB的邏輯單位寬度。


-------------------------------------------------------- KeyGTK3Win32SetDlgItemInt ----
SetDlgItemInt    SetDlgItemInt函數將對話方塊中的控制項的文本設置為指定整數值的字串表示形式。
語法
參數
【hDlg】標識包含控制項的對話方塊。【nIDDlgItem】指定要更改的控制項。【uValue】指定用於生成專案文本的整數值。【bSigned】指定【uValue】參數是否已簽名或無符號。如果此


-------------------------------------------------------- KeyGTK3Win32SetDlgItemText ----
SetDlgItemText    SetDlgItemText函數在對話方塊中設置控制項的標題或文本。
語法
參數
【hDlg】標識包含控制項的對話方塊。【nIDDlgItem】標識要設置的標題或文本的控制項。【lpString】指向包含要複製到控制項的文本的以null結尾的字串。
返回值
如果函數成功，返


-------------------------------------------------------- KeyGTK3Win32SetDoubleClickTime ----
SetDoubleClickTime    SetDoubleClickTime函數設置滑鼠的按兩下時間。按兩下是一系列兩次點擊滑鼠按鈕，第二次發生在第一個指定的時間之後。按兩下時間是按兩下的第一次和第二次點擊之間可能發生的最大毫秒數。
語法
參數
【// double-click interval】指定按兩下第一次和第二次點擊之間可能發生的毫秒數。如果此參數設置為零，Windows將使用默認按兩下500毫秒的時間。
返回值
如果函數成


-------------------------------------------------------- KeyGTK3Win32SetEndOfFile ----
SetEndOfFile    SetEndOfFile函數將指定檔的檔末尾（EOF）位置移動到文件指標的當前位置。
語法
參數
【HFILE】標識檔以使其EOF位置移動。必須使用GENERIC_WRITE訪問該檔創建檔案控制代碼。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，


-------------------------------------------------------- KeyGTK3Win32SetEnhMetaFileBits ----
SetEnhMetaFileBits    SetEnhMetaFileBits函數從提供的資料創建基於記憶體的增強格式的中繼檔。
語法
參數
【cbBuffer】指定所提供資料的大小（以位元組為單位）。【的lpData】指向包含增強型圖中繼檔資料的緩衝區。（假設通過調用GetEnhMetaFileBits函數獲得緩衝區中的資料。）



-------------------------------------------------------- KeyGTK3Win32SetEntriesInAcl ----
SetEntriesInAcl    [New - Windows NT]SetEntriesInAcl函數通過將新的存取控制或審計控制資訊合併到現有的ACL中來創建新的存取控制清單（ACL）。
語法
參數
【cCountOfExplicitEntries】在【pListOfExplicitEntries陣列。】中指定EXPLICIT_ACCESS結構的數量【pListOfExplicitEnt


-------------------------------------------------------- KeyGTK3Win32SetEnvironmentVariable ----
SetEnvironmentVariable    SetEnvironmentVariable函數設置當前進程的環境變數的值。
語法
參數
【lpName】指向一個以null結尾的字串，指定其值正在設置的環境變數。作業系統創建環境變數（如果不存在），並且【lpValue】不為空。【lpValue】指向包含指定環境變數的新值的以


-------------------------------------------------------- KeyGTK3Win32SetErrorMode ----
SetErrorMode    SetErrorMode函數控制作業系統處理多種嚴重錯誤的方式。您可以指定作業系統將處理這些錯誤或應用程式將接收和處理它們。
語法



-------------------------------------------------------- KeyGTK3Win32SetEvent ----
SetEvent    SetEvent函數將指定的事件物件的狀態設置為發信號。
語法
參數
【活動】標識事件物件。CreateEvent或OpenEvent函數返回此控制碼。Windows NT：控制碼必須有EVENT_MODIFY_STATE存取權限。有關詳細資訊，請參閱進程間同步對


-------------------------------------------------------- KeyGTK3Win32SetFileApisToANSI ----
SetFileApisToANSI    SetFileApisToANSI函數導致一組Win32檔函數使用ANSI字元集內碼表。此函數對於8位元控制台輸入和輸出操作非常有用。
語法
參數
此函數無參數。
返回值
該函數沒有返回值。
描述
SetFileApisToANSI函數補充了SetFileApisToOEM函數，這使得同一組Win32檔函數使用OEM字元集代碼


-------------------------------------------------------- KeyGTK3Win32SetFileApisToOEM ----
SetFileApisToOEM    SetFileApisToOEM函數使一組Win32檔函數使用OEM字元集內碼表。此函數對於8位元控制台輸入和輸出操作非常有用。
語法
參數
此函數無參數。
返回值
該函數沒有返回值。
描述
SetFileApisToOEM函數由SetFileApisToANSI函數補充，導致同一組Win32檔函數使用ANSI字元集代碼


-------------------------------------------------------- KeyGTK3Win32SetFileAttributes ----
SetFileAttributes    SetFileAttributes函數設置檔的屬性。
語法
參數
【lpFileName】指向一個字串，指定要設置其屬性的檔的名稱。Windows 95：此字串不得超過MAX_PATH個字元。Windows NT： MAX_PATH字元的路徑的預設字


-------------------------------------------------------- KeyGTK3Win32SetFilePointer ----
SetFilePointer    SetFilePointer函數移動打開檔的檔指標。
語法
參數
【HFILE】標識檔指標要移動的文件。必須使用GENERIC_READ或GENERIC_WRITE訪問該檔創建檔案控制代碼。【lDistanceToMove】指定移動檔指標的位元組數。正值將


-------------------------------------------------------- KeyGTK3Win32SetFileSecurity ----
SetFileSecurity    SetFileSecurity函數設置檔或目錄物件的安全性。
語法
參數
【lpFileName】指向以空值終止的字串，指定設置了安全性的檔或目錄。【SecurityInformation】指定SECURITY_INFORMATION結構，標識由【pSecur


-------------------------------------------------------- KeyGTK3Win32SetFileTime ----
SetFileTime    SetFileTime函數設置檔創建，上次訪問或上次修改的日期和時間。
語法
參數
【HFILE】標識要設置日期和時間的檔。必須使用GENERIC_WRITE訪問該檔創建檔案控制代碼。【lpCreationTime】指向包含創建檔的日期和時間的FILETIME結構。如果應


-------------------------------------------------------- KeyGTK3Win32SetFocus ----
SetFocus    SetFocus函數將鍵盤焦點設置為指定的視窗。窗口必須與調用執行緒的訊息佇列相關聯。
語法
參數
【的hWnd】標識將接收鍵盤輸入的視窗。如果此參數為NULL，則將忽略擊鍵。
返回值
如果函數成功，則返回值是以前具有鍵盤焦點的視窗的控制碼。如果【的hWnd】參數無效或視窗與調用執行緒的消


-------------------------------------------------------- KeyGTK3Win32SetForegroundWindow ----
SetForegroundWindow    SetForegroundWindow函數將創建指定視窗的執行緒放入前臺並啟動該視窗。鍵盤輸入指向視窗，並為使用者更改各種視覺提示。
語法
參數
【的hWnd】標識應該被啟動並被帶到前臺的視窗。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
前臺窗口是


-------------------------------------------------------- KeyGTK3Win32SetForm ----
SetForm    SetForm函數設置指定印表機的表單資訊。
語法
參數
【hPrinter】標識設置表單資訊的印表機。【pFormName】指向以空值終止的字串，指定表單資訊設置的表單名稱。【水準】指定【P成型】指向的結構的版本。此值必須為1。【P成型】指向F


-------------------------------------------------------- KeyGTK3Win32SetGraphicsMode ----
SetGraphicsMode    SetGraphicsMode函數設置指定設備上下文的圖形模式。
語法
參數
【HDC】標識設備上下文。【iMode平臺】指定圖形模式。此參數可以是以下值之一：值含義GM_COMPATIBLE設置與Windows 3.1版相容的圖形模式。這是預設模式。如果指定了此值，


-------------------------------------------------------- KeyGTK3Win32SetHandleCount ----
SetHandleCount    SetHandleCount函數設置可用於進程的檔案控制代碼數。此函數在Windows NT和Windows 95下無效，因為這些平臺上的應用程式沒有明確的檔案控制代碼限制。在Win32s下，預設情況下只有20個檔案控制代碼可用於進程;但是您可以使用SetHandleCount來允許進程最多使用255個檔案控制代碼。
語法



-------------------------------------------------------- KeyGTK3Win32SetHandleInformation ----
SetHandleInformation    SetHandleInformation函數設置物件控制碼的某些屬性。資訊被指定為一組位元標誌。
語法
參數
【hObject】指定對象的控制碼。SetHandleInformation函數設置與此物件控制碼相關聯的資訊。【dwMask】指定要更改的位元標誌的遮罩。使用與【dwFlags中】描述相同的標誌


-------------------------------------------------------- KeyGTK3Win32SetICMMode ----
SetICMMode    SetICMMode函數啟用或禁用指定設備上下文的影像色彩調配。
語法



-------------------------------------------------------- KeyGTK3Win32SetICMProfile ----
SetICMProfile    SetICMProfile函數設置指定設備上下文的色彩設定檔。
語法
參數
【HDC】處理設備上下文。【lpFileName】指向以空字元結尾的字串的指標，用於命名色彩設定檔。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32SetJob ----
SetJob    SetJob函數在指定的印表機上暫停，恢復，取消或重新啟動列印工作。您還可以使用SetJob函數來設置列印工作參數，例如列印工作優先順序和文檔名稱。
語法
參數
【hPrinter】處理感興趣的印表機物件。【JobId】指定列印工作的識別字。通過調用AddJob函數或StartDoc函數獲取列印工作識別字。Windows NT：如果【水準】參數設置為


-------------------------------------------------------- KeyGTK3Win32SetKernelObjectSecurity ----
SetKernelObjectSecurity    SetKernelObjectSecurity函數設置內核對象的安全性。例如，這可以是進程，執行緒或事件。
語法
參數
【處理】標識設置了安全資訊的內核對象。【SecurityInformation】指定SECURITY_INFORMATION結構，標識由【SecurityDescriptor】參數指向的安全


-------------------------------------------------------- KeyGTK3Win32SetKeyboardState ----
SetKeyboardState    SetKeyboardState函數將256位元組的鍵盤鍵狀態陣列複製到調用執行緒的鍵盤輸入狀態表中。這與GetKeyboardState和GetKeyState函數訪問的表格相同。對此表的更改不會影響到任何其他執行緒的鍵盤輸入。
語法
參數
【lpKeyState】指向包含鍵盤鍵狀態的256位元組陣列。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述



-------------------------------------------------------- KeyGTK3Win32SetLastError ----
SetLastError    SetLastError函數設置調用執行緒的最後一個錯誤代碼。
語法
參數
【dwErrCode】指定執行緒的最後一個錯誤代碼。
描述
錯誤代碼是32位元值（位31是最高有效位）。位元29保留用於應用程式定義的錯誤代碼;沒有Win32 API錯誤代碼已經設置了這一位。


-------------------------------------------------------- KeyGTK3Win32SetLastErrorEx ----
SetLastErrorEx    SetLastErrorEx函數設置最後一個錯誤代碼。在Windows 95和Windows NT中，此函數與SetLastError函數相同。第二個參數未實現。
語法
參數
【dwErrCode】指定執行緒的最後一個錯誤代碼。【dwType】指定錯誤類型。如果此過程由調試程序控制，調試器可能會根據錯誤類型執行操作。此參數可以具有以下值之一：值含義SLE_ERROR


-------------------------------------------------------- KeyGTK3Win32SetLocaleInfo ----
SetLocaleInfo    SetLocaleInfo函數設置一個區域設置資訊項。它通過在語言環境表的過程部分中創建一個條目來實現。此設置僅影響使用者覆蓋區域設置的部分;它不設置系統預設值。此函數只能設置某些類型的區域設置資訊，或LCTYPE值。有關LCTYPE值的清單，請參見以下注釋部分。在Unicode（W）版本的函數中，區域設置資訊始終以空值終止的Unicode字串形式傳遞，並作為ANSI（A）版本中的以null結尾的ANSI字串。此函數不允許使用整數;任何數值必須指定為Unicode或ANSI文本。每個LCTYPE都有一個特定的格式，如區域識別字所述。
語法
參數
【語言環境】指定函數將設置的資訊的區域設置。【LCType】指定要由函數設置的區域設置資訊的類型。請注意，每個呼叫只能指定一個LCTYPE.並非所有LCTYPE值都有效;請參閱以下備註部分中


-------------------------------------------------------- KeyGTK3Win32SetLocalTime ----
SetLocalTime    SetLocalTime函數設置當前的本地時間和日期。
語法
參數
【lpSystemTime】指向包含當前本地日期和時間的SYSTEMTIME結構。SYSTEMTIME結構的wDayOfWeek成員將被忽略。
返回值
如果函數成功，返回值不為零。如果函


-------------------------------------------------------- KeyGTK3Win32SetMailslotInfo ----
SetMailslotInfo    SetMailslotInfo函數設置指定郵槽使用的讀取操作的超時值。
語法
參數
【hMailslot】標識一個郵槽。CreateMailslot函數必須創建此控制碼。【lReadTimeout】指定在超時發生之前，讀取操作可以等待消息寫入郵槽的時間（以毫秒為單位）。以下值


-------------------------------------------------------- KeyGTK3Win32SetMapMode ----
SetMapMode    SetMapMode函數設置指定設備上下文的映射模式。映射模式定義了用於將頁面空間單元轉換為設備空間單元的度量單位，還定義了設備的x軸和y軸的方向。
語法
參數
【HDC】標識設備上下文。【fnMapMode】指定新的映射模式。它可以是以下值之一：值描述MM_ANISOTROPIC邏輯單位通過任意縮放的軸映射到任意單位。使用SetWindowExtE


-------------------------------------------------------- KeyGTK3Win32SetMapperFlags ----
SetMapperFlags    SetMapperFlags函數更改字體映射器將邏輯字體映射到物理字體時使用的演算法。
語法
參數
【HDC】標識包含font-mapper標誌的設備上下文。【dwFlag】指定字體映射器是否應嘗試將字體的寬高比與當前設備的寬高比相匹配。如果設置了位零，則映射器僅選擇匹配的字體。
返回值


-------------------------------------------------------- KeyGTK3Win32SetMenu ----
SetMenu    SetMenu函數將一個新功能表分配給指定的視窗。
語法
參數
【的hWnd】標識要分配功能表的視窗。【HMENU】標識新功能表。如果此參數為NULL，則會刪除該視窗的當前功能表。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯


-------------------------------------------------------- KeyGTK3Win32SetMenuContextHelpId ----
SetMenuContextHelpId    SetMenuContextHelpId函數將説明上下文識別字與功能表相關聯。功能表中的所有項共用此識別字。無法將幫助上下文識別字附加到單個功能表項目。
語法
參數
【HMENU】處理到與説明上下文標識相關聯的功能表。【dwContextHelpId】幫助上下文識別字。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32SetMenuDefaultItem ----
SetMenuDefaultItem    [Now Supported on Windows NT]SetMenuDefaultItem函數設置指定功能表的預設功能表項目。
語法
參數
【HMENU】處理功能表以設置預設專案。【藤】新的默認功能表項目的識別字或位置，或 - 預設選項為 -  1。該參數的含義取決於【fByPos】的值。【fByPos】指定【藤】的含義的值。如果此參


-------------------------------------------------------- KeyGTK3Win32SetMenuItemBitmaps ----
SetMenuItemBitmaps    SetMenuItemBitmaps函數將指定的點陣圖與功能表項目相關聯。無論功能表項目是選中還是取消選中，Windows將在功能表項目旁邊顯示相應的點陣圖。
語法
參數
【HMENU】標識包含要接收新的核取記號點陣圖的專案的菜單。【uPositionbs】指定要更改的功能表項目，由【uFlags】參數確定。【uFlags】指定如何解釋【uPositionbs】參數


-------------------------------------------------------- KeyGTK3Win32SetMenuItemInfo ----
SetMenuItemInfo    [Now Supported on Windows NT]SetMenuItemInfo函數可更改有關功能表項目的資訊。
語法
參數
【HMENU】處理包含功能表項目的功能表。【藤】要更改的功能表項目的識別字或位置。該參數的含義取決於【fByPosition】的值。【fByPosition】指定【藤】的含義的值。如果此參數為FALS


-------------------------------------------------------- KeyGTK3Win32SetMessageExtraInfo ----
SetMessageExtraInfo    SetMessageExtraInfo函數設置當前執行緒的額外消息資訊。附加消息資訊是與當前執行緒的訊息佇列相關聯的應用程式或驅動程式定義的32位元值。應用程式可以使用GetMessageExtraInfo函數來檢索執行緒的額外消息資訊。
語法
參數
【lParam的】指定與當前執行緒相關聯的32位值。
返回值
返回值是先前的32位值。



-------------------------------------------------------- KeyGTK3Win32SetMessageQueue ----
SetMessageQueue  SetMessageQueue函數已過時。此函數僅適用於16位元版本的Windows的相容性。此函數在Win32平臺上不起作用，因為根據需要動態展開訊息佇列。


-------------------------------------------------------- KeyGTK3Win32SetMetaFileBitsEx ----
SetMetaFileBitsEx    SetMetaFileBitsEx函數從提供的資料創建一個基於記憶體的Windows格式的中繼檔。提供此函數以相容早期版本的Microsoft Windows。基於Win32的應用程式應使用SetEnhMetaFileBits函數。
語法
參數
【服務提供者】指定Windows格式圖中繼檔的大小（以位元組為單位）。【的lpData】指向包含Windows格式圖中繼檔的緩衝區。（假設通過使用GetMetaFileBitsEx函數獲得資料


-------------------------------------------------------- KeyGTK3Win32SetMetaRgn ----
SetMetaRgn    SetMetaRgn函數與指定設備上下文的當前裁剪區域與當前的區域相交，並將組合區域保存為指定設備上下文的新區域。剪輯區域將重置為零區域。
語法
參數
【HDC】標識設備上下文。
返回值
如果函數成功，則返回值指定新的裁剪區域的複雜度，並且可以是以下值之一：值含義NULLREGION區域是空的SIMPLEREGION區域是單個矩形。CO


-------------------------------------------------------- KeyGTK3Win32SetMiterLimit ----
SetMiterLimit    SetMiterLimit函數設置指定設備上下文的斜接連接長度的限制。
語法
參數
【HDC】標識設備上下文。【eNewLimit】指定設備上下文的新斜角限制。【peOldLimit】指向接收上一個斜度限制的浮點值。如果此參數為NULL，則不會返回上一個斜度限制。
返回值


-------------------------------------------------------- KeyGTK3Win32SetNamedPipeHandleState ----
SetNamedPipeHandleState    SetNamedPipeHandleState函數設置指定具名管道的讀取模式和阻塞模式。如果指定的控制碼是指向具名管道的用戶端，並且如果具名管道伺服器進程在遠端電腦上，則該函數也可用於控制本地緩衝。
語法
參數
【hNamedPipe】標識命名的管道實例。此參數可以由CreateNamedPipe函數返回的管道的伺服器端的控制碼，或CreateFile函數返回的管道的用戶端。控制碼必須具有對具名管道的G


-------------------------------------------------------- KeyGTK3Win32SetPaletteEntries ----
SetPaletteEntries    SetPaletteEntries函數在邏輯調色板的一系列條目中設置RGB（紅，綠，藍）顏色值和標誌。
語法
參數
【HPAL】標識邏輯調色板。【ISTART】指定要設置的第一個邏輯調色板條目。【cEntries】指定要設置的邏輯調色板條目數。【LPPE】指向包含RGB值和標誌的PALETTEENTRY結


-------------------------------------------------------- KeyGTK3Win32SetParent ----
SetParent    SetParent函數更改指定子視窗的父視窗。
語法
參數
【hWndChild】標識子視窗。【hWndNewParent】標識新的父視窗。如果此參數為NULL，則桌面視窗將變為新的父視窗。
返回值
如果函數成功，則返回值是上一個父視窗的控制碼。如


-------------------------------------------------------- KeyGTK3Win32SetPixel ----
SetPixel    SetPixel函數將指定座標處的圖元設置為指定的顏色。
語法
參數
【HDC】標識設備上下文。【X】指定要設置的點的x座標，以邏輯單位表示。【Y】指定要設置的點的y座標，以邏輯單位表示。【crColor】指定用於繪製點的顏色。
返回值
如果函數成功，則返


-------------------------------------------------------- KeyGTK3Win32SetPixelV ----
SetPixelV    SetPixelV函數將指定座標處的圖元設置為指定顏色的最接近的近似值。該點必須在裁剪區域和設備表面的可見部分。
語法
參數
【HDC】標識設備上下文。【X】指定要設置的點的x座標，以邏輯單位表示。【Y】指定要設置的點的y座標，以邏輯單位表示。【crColor】指定用於繪製點的顏色。
返回值
如果函數成功，返回


-------------------------------------------------------- KeyGTK3Win32SetPolyFillMode ----
SetPolyFillMode    SetPolyFillMode函數設置填充多邊形的函數的多邊形填充模式。
語法
參數
【HDC】標識設備上下文。【iPolyFillMode】指定新的填充模式。此參數可以是以下值之一：值含義ALTERNATE選擇交替模式（填充每個掃描線上奇數和偶數多邊形邊之間的區域）。WIN


-------------------------------------------------------- KeyGTK3Win32SetPort ----
SetPort    [New - Windows NT]SetPort函數設置與印表機埠相關聯的狀態。
語法
參數
【PNAME】指向零終止字串的指標，該字串指定埠連接到的印表機伺服器的名稱。如果埠在本地機器上，則將此參數設置為NULL。【pPortName】指向指定印表機埠名稱的零終止字串的


-------------------------------------------------------- KeyGTK3Win32SetPrinter ----
SetPrinter    SetPrinter函數通過暫停列印，恢復列印或清除所有列印工作來設置指定印表機的狀態。該函數也可用於設置印表機資料。
語法
參數
【hPrinter】處理感興趣的印表機【水準】Windows 95：指定【pPrinter】中包含的資料類型。該參數必須為0,2,3,4或5。如果【命令】不等於零，則此參數必須為零。Wind


-------------------------------------------------------- KeyGTK3Win32SetPrinterData ----
SetPrinterData    SetPrinterData函數設置印表機的配置資料。
語法
參數
【hPrinter】標識應設置配置資料的印表機。【pValueName】指向一個以null結尾的字串，指定要設置的資料類型。【類型】指定要作為值的資料存儲的資訊的類型。此參數可以是以下值之


-------------------------------------------------------- KeyGTK3Win32SetPriorityClass ----
SetPriorityClass    SetPriorityClass函數設置指定進程的優先順序。該值與進程的每個執行緒的優先順序值一起確定每個執行緒的基本優先順序。
語法
參數
【hProcess】標識過程。Windows NT：控制碼必須具有PROCESS_SET_INFORMATION許可權。有關詳細資訊，請參閱過程物件.【dwPriorityClass】指定進程的


-------------------------------------------------------- KeyGTK3Win32SetPrivateObjectSecurity ----
SetPrivateObjectSecurity    SetPrivateObjectSecurity函數修改私有物件的安全性描述元。
語法
參數
【SecurityInformation】指定SECURITY_INFORMATION結構，標識由【ModificationDescriptor】參數指向的安全性描述元的內容。【Modific


-------------------------------------------------------- KeyGTK3Win32SetProcessAffinityMask ----
SetProcessAffinityMask    [New - Windows NT]SetProcessAffinityMask函數為指定進程的執行緒設置處理器關連遮罩。過程關連遮罩是一個位向量，其中每個位元表示允許進程的執行緒運行的處理器。過程相關性遮罩的值必須是由GetProcessAffinityMask函數獲取的遮罩值的正確子集。
語法
參數
【hProcess】處理過程的控制碼，其親和力遮罩函數集。該控制碼必須具有PROCESS_SET_INFORMATION許可權。有關詳細資訊，請參閱過程物件.【dwProcessAffinityM


-------------------------------------------------------- KeyGTK3Win32SetProcessPriorityBoost ----
SetProcessPriorityBoost    [New - Windows NT]SetProcessPriorityBoost函數禁用Windows NT臨時提升指定進程的執行緒優先順序的函數。
語法
參數
【hProcess】處理過程。該控制碼必須具有PROCESS_SET_INFORMATION許可權。有關詳細資訊，請參閱過程物件.【DisablePriorityBoost】一個用於設置優先順序提


-------------------------------------------------------- KeyGTK3Win32SetProcessShutdownParameters ----
SetProcessShutdownParameters    SetProcessShutdownParameters函數設置當前調用進程的關閉參數。此函數為進程設置相對於系統中其他進程的關機順序。
語法
參數
【//原子或字串的位址】指定進程相對於系統中其他進程的關閉優先順序。該系統關閉從高【//原子或字串的位址】值到低的進程。最高和最低的關閉優先順序保留給系統元件。此參數必須在以下值範圍內：值含


-------------------------------------------------------- KeyGTK3Win32SetProcessWindowStation ----
SetProcessWindowStation    SetProcessWindowStation函數將一個視窗站分配給調用進程。這使得進程能夠訪問視窗站中的物件，如桌面，剪貼板和全域原子。視窗站上的所有後續操作都使用授予【hWinSta】的存取權限。
語法
參數
【hWinSta】標識要分配給呼叫進程的視窗站。該控制碼由CreateWindowStation和OpenWindowStation函數返回。
返回值
如果函數成功，返回值不為零。如果函數


-------------------------------------------------------- KeyGTK3Win32SetProcessWorkingSetSize ----
SetProcessWorkingSetSize    SetProcessWorkingSetSize函數設置指定進程的最小和最大工作集大小。進程的工作集是物理RAM記憶體中進程可見的一組記憶體頁。這些頁面是駐留的，可供應用程式使用，而不會觸發分頁錯誤。進程的工作集的大小以位元組為單位指定。最小和最大工作集大小影響進程的虛擬記憶體分頁行為。
語法
參數
【hProcess】將設置其工作集大小的進程的打開控制碼。Windows NT：控制碼必須具有PROCESS_SET_QUOTA存取權限。有關詳細資訊，請參閱過程物件.【dwMinimumWor


-------------------------------------------------------- KeyGTK3Win32SetProp ----
SetProp    SetProp函數添加一個新條目或更改指定視窗的屬性清單中的現有條目。如果清單中不存在指定的字串，該函數將向清單中添加一個新條目。新條目包含字串和控制碼。否則，該函數將使用指定的控制碼替換字串的當前控制碼。
語法
參數
【的hWnd】識別屬性清單接收到新條目的窗口。【lpString】指向一個空值終止的字串或包含一個標識字串的原子。如果這個參數是一個原子，它必須是由前一次調用GlobalAddAtom函


-------------------------------------------------------- KeyGTK3Win32SetRect ----
SetRect    SetRect函數設置指定矩形的座標。這相當於將左，上，右和底參數分配給RECT結構的相應成員。
語法
參數
【LPRC】指向包含要設置的矩形的RECT結構。【xLeft】指定矩形左上角的x座標。【的y topsv】指定矩形左上角的y座標。【Xright確定】指定矩形右下角的x座標。【// 底部】指


-------------------------------------------------------- KeyGTK3Win32SetRectEmpty ----
SetRectEmpty    SetRectEmpty函數創建一個空矩形，其中所有座標都設置為零。
語法
參數
【LPRC】指向包含矩形座標的RECT結構。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32SetRectRgn ----
SetRectRgn    SetRectRgn函數將區域更改為具有指定座標的矩形區域。
語法
參數
【HRGN】識別該地區。【nLeftRect】指定矩形區域左上角的x座標。【nTopRect】指定矩形區域左上角的y座標。【nRightRect】指定矩形區域右下角的x座標。【nBottom


-------------------------------------------------------- KeyGTK3Win32SetROP2 ----
SetROP2    SetROP2函數設置當前前臺混合模式。GDI使用前景混合模式，將已填充物件的筆和內部結合到已經在螢幕上的顏色。前景混合模式定義如何組合來自畫筆或筆的顏色和現有圖像中的顏色。
語法
參數
【HDC】標識設備上下文。【fnDrawMode】指定新的混合模式。此參數可以是以下值之一：混合模式描述R2_BLACK圖元始終為0。R2_COPYPEN圖元是筆的顏色。R2_MASKNOT


-------------------------------------------------------- KeyGTK3Win32SetScrollInfo ----
SetScrollInfo    SetScrollInfo函數設置捲軸的參數，包括最小和最大滾動位置，頁面大小和滾動框（拇指）的位置。如果需要，該函數也會重繪捲軸。
語法
參數
【HWND】根據【fnBar】參數的值，標識捲軸控制項或具有標準捲軸的視窗。【fnBar】指定要設置參數的捲軸的類型。此參數可以是以下值之一：值含義SB_CTL設置捲軸控制項的參數。【H


-------------------------------------------------------- KeyGTK3Win32SetScrollPos ----
SetScrollPos    SetScrollPos函數將捲軸（拇指）的位置設置在指定的捲軸中，如果需要，重新繪製捲軸以反映捲軸的新位置。提供SetScrollPos函數以與Windows 3相容。【x】.基於Win32的應用程式應使用SetScrollInfo函數。
語法
參數
【的hWnd】根據【NBAR】參數的值，標識捲軸控制項或具有標準捲軸的視窗。【NBAR】指定要設置的捲軸。此參數可以是以下值之一：值含義SB_CTL在捲軸控制項中設置滾動框的位置。【的h


-------------------------------------------------------- KeyGTK3Win32SetScrollRange ----
SetScrollRange    SetScrollRange函數設置指定捲軸的最小和最大位置值。它也可用於隱藏或顯示標準捲軸。SetScrollRange函數用於與Windows 3相容。【x】.基於Win32的應用程式應使用SetScrollInfo函數。
語法
參數
【的hWnd】根據【NBAR】參數的值，標識捲軸控制項或帶有標準捲軸的視窗。【NBAR】指定要設置的捲軸。此參數可以是以下值之一：值含義SB_CTL設置捲軸控制項的範圍。【的hWnd】參


-------------------------------------------------------- KeyGTK3Win32SetSecurityDescriptorDacl ----
SetSecurityDescriptorDacl    SetSecurityDescriptorDacl函數在自由存取控制清單（ACL）中設置資訊。如果安全性描述元中已經存在自由ACL，則會被替換。
語法
參數
【pSecurityDescriptor】指向函數添加自由ACL的SECURITY_DESCRIPTOR結構。此安全性描述元必須為絕對格式，這意味著其成員必須是指向其他結構的指標，而不是對連續


-------------------------------------------------------- KeyGTK3Win32SetSecurityDescriptorGroup ----
SetSecurityDescriptorGroup    SetSecurityDescriptorGroup函數設置絕對格式安全性描述元的主組資訊，替換已經存在於安全性描述元中的任何主組資訊。
語法
參數
【pSecurityDescriptor】指向由此函數設置其主組的SECURITY_DESCRIPTOR結構。該函數將使用新的主組替換任何現有的主組。【PGROUP】指向SID結構的函數集作


-------------------------------------------------------- KeyGTK3Win32SetSecurityDescriptorOwner ----
SetSecurityDescriptorOwner    SetSecurityDescriptorOwner函數設置絕對格式安全性描述元的所有者資訊。它替換已經存在于安全性描述元中的所有者資訊。
語法
參數
【pSecurityDescriptor】指向由此函數設置其所有者的SECURITY_DESCRIPTOR結構。該函數將替換任何現有的擁有者與新的所有者。【pOwner】指向SID結構的函數


-------------------------------------------------------- KeyGTK3Win32SetSecurityDescriptorSacl ----
SetSecurityDescriptorSacl    SetSecurityDescriptorSacl函數在系統存取控制清單（ACL）中設置資訊。如果安全性描述元中已經存在系統ACL，則會被替換。
語法
參數
【pSecurityDescriptor】指向函數添加系統ACL的SECURITY_DESCRIPTOR結構。此安全性描述元必須為絕對格式，這意味著其成員必須是指向其他結構的指標，而不是對連續


-------------------------------------------------------- KeyGTK3Win32SetSecurityInfo ----
SetSecurityInfo    [New - Windows NT]SetSecurityInfo函數在指定物件的安全性描述元中設置指定的安全資訊。調用者通過控制碼識別物件。
語法
參數
【處理】用於設置安全資訊的物件的控制碼。【ObjectType】指定SE_OBJECT_TYPE枚舉中指示由【處理】參數標識的物件類型的值。【SecurityInfo】一組SECURITY_I


-------------------------------------------------------- KeyGTK3Win32SetServiceBits ----
SetServiceBits    SetServiceBits函數將服務的服務類型與服務控制管理器和伺服器服務註冊。然後，伺服器服務可以將註冊的服務類型公佈為當前支援的類型。LAN Manager函數NetServerGetInfo和NetServerEnum獲取指定的機器支援的服務類型。服務類型表示為一組位元標誌; SetServiceBits函數設置或清除這些位元標誌的組合。
語法
參數
【hServiceStatus】服務控制管理員的服務狀態資訊結構的控制碼。服務通過調用RegisterServiceCtrlHandler函數獲取SERVICE_STATUS_HANDLE值。


-------------------------------------------------------- KeyGTK3Win32SetServiceObjectSecurity ----
SetServiceObjectSecurity    SetServiceObjectSecurity函數設置服務物件的安全性描述元。
語法
參數
【hService】標識服務。該控制碼由OpenService或CreateService函數返回。此控制碼所需的訪問取決於【dwSecurityInformation】參數中指定的安全資訊。【


-------------------------------------------------------- KeyGTK3Win32SetServiceStatus ----
SetServiceStatus    SetServiceStatus函數可更新主叫服務的服務控制管理員的狀態資訊。
語法
參數
【hServiceStatus~】指定當前服務的服務控制管理器狀態資訊結構的控制碼。該控制碼由RegisterServiceCtrlHandler函數返回。【lpServiceStatus】指向


-------------------------------------------------------- KeyGTK3Win32SetStdHandle ----
SetStdHandle    SetStdHandle函數用於設置標準輸入，標準輸出或標準錯誤設備的控制碼。後續調用GetStdHandle函數可以使用指定的控制碼來引用輸入，輸出或錯誤設備。
語法
參數
【nStdHandle】指定要設置的控制碼。此參數可以具有以下值之一：值含義STD_INPUT_HANDLE標準輸入手柄STD_OUTPUT_HANDLE標準輸出手柄STD_ERROR_HAN


-------------------------------------------------------- KeyGTK3Win32SetStretchBltMode ----
SetStretchBltMode    SetStretchBltMode函數設置指定設備上下文中的點陣圖拉伸模式。
語法
參數
【HDC】標識設備上下文。【iStretchMode】指定拉伸模式。它可以是以下值之一：值描述BLACKONWHITE使用已消除和現有圖元的顏色值執行布林AND運算。如果點陣圖是單色點陣圖，則此


-------------------------------------------------------- KeyGTK3Win32SetSwapAreaSize ----
SetSwapAreaSize  SetSwapAreaSize函數已過時。此函數僅用於與16位元版本的Windows相容。它在32位環境中沒有任何意義。


-------------------------------------------------------- KeyGTK3Win32SetSysColors ----
SetSysColors    SetSysColors函數設置一個或多個顯示元素的顏色。顯示元素是視窗的各個部分和顯示在系統顯示幕幕上的Windows顯示。
語法
參數
【//要更改的元素數量】指定【// address of array of elements】參數指向的陣列中的顯示元素數。【// address of array of elements】


-------------------------------------------------------- KeyGTK3Win32SetSysModalWindow ----
SetSysModalWindow  SetSysModalWindow函數已過時。此函數僅用於與16位元版本的Windows相容。新的輸入模型不允許System Modal視窗。


-------------------------------------------------------- KeyGTK3Win32SetSystemCursor ----
SetSystemCursor    SetSystemCursor函數用【HCUR】指定的游標的內容替換【id】指定的系統游標的內容，然後銷毀【HCUR】.此函數允許應用程式自訂系統游標。
語法
參數
【HCUR】處理游標。該函數將由【HCUR】處理的游標的內容替換【id】指定的系統游標的內容。然後該函數通過調用DestroyCursor（【HCURSORpt】）來銷毀【HCUR】.【id


-------------------------------------------------------- KeyGTK3Win32SetSystemPaletteUse ----
SetSystemPaletteUse    SetSystemPaletteUse函數允許應用程式指定系統調色板是否包含2或20個靜態顏色。預設系統調色板包含20個靜態顏色。（當應用程式實現邏輯調色板時，無法更改靜態顏色。）
語法
參數
【HDC】標識設備上下文。此設備上下文必須引用支援調色板的設備。【uUsage】指定系統調色板的新用法。此參數可以是以下值之一：值含義SYSPAL_NOSTATIC系統調色板包含兩種靜態顏色


-------------------------------------------------------- KeyGTK3Win32SetSystemPowerState ----
SetSystemPowerState    SetSystemPowerState函數通過關閉電源來暫停系統。根據【ForceFlag】參數，該函數可以在此之前立即暫停運行或請求所有應用程式和設備驅動程式的許可權。
語法
參數
【Suspension technique.】懸掛技術en如果為TRUE，系統將暫停使用RAM存活技術。否則，暫停使用hibernate技術。【fForce】強制停牌。如果為TRUE，則該函


-------------------------------------------------------- KeyGTK3Win32SetSystemTime ----
SetSystemTime    SetSystemTime函數設置當前系統的時間和日期。系統時間以協調世界時（UTC）表示。
語法
參數
【lpSystemTime】指向包含當前系統日期和時間的SYSTEMTIME結構。SYSTEMTIME結構的wDayOfWeek成員將被忽略。
返回值
如果函數成功，返回值不為零。如果函


-------------------------------------------------------- KeyGTK3Win32SetSystemTimeAdjustment ----
SetSystemTimeAdjustment    SetSystemTimeAdjustment函數告訴系統啟用或禁用對其時鐘時鐘的週期性時間調整。這種時間調整用於將時間與其他一些時間資訊源進行同步。當啟用週期性時間調整時，它們在每個時鐘中斷時被應用。
語法
參數
【dwTimeAdjustment】指定如果啟用週期性時間調整，則在每個時鐘中斷時間添加到時鐘時鐘的100納秒單位數。【bTimeAdjustmentDisabled】指定系統使用的時間調整


-------------------------------------------------------- KeyGTK3Win32SetTapeParameters ----
SetTapeParameters    SetTapeParameters函數指定磁帶的塊大小或配置磁帶設備。
語法
參數
【hDevice】標識要設置配置資訊的設備。該控制碼是通過使用CreateFile函數創建的。【// preparation method】指定要設置的資訊類型。此參數必須是以下值之一：值描述


-------------------------------------------------------- KeyGTK3Win32SetTapePosition ----
SetTapePosition    SetTapePosition設置指定設備上的磁帶位置。
語法
參數
【hDevice】標識要設置磁帶位置的設備。該控制碼是通過使用CreateFile函數創建的。【dwPositionMethod】指定要執行的定位類型。此參數必須是以下值之一：值含義TAPE_


-------------------------------------------------------- KeyGTK3Win32SetTextAlign ----
SetTextAlign    SetTextAlign函數設置指定設備上下文的文本對齊標誌。
語法
參數
【HDC】標識設備上下文。【FMODE】通過使用以下列表中的值的遮罩來指定文本對齊。只有一個標誌可以從影響水準和垂直對齊的那些標誌中選出。另外，只能改變當前位置的兩個標誌之一。值含義TA_B


-------------------------------------------------------- KeyGTK3Win32SetTextCharacterExtra ----
SetTextCharacterExtra    SetTextCharacterExtra函數設置字元間距。當Windows寫入一行文本時，會將字元間距添加到每個字元，包括中斷字元。
語法
參數
【HDC】標識設備上下文。【nCharExtra】指定要添加到每個字元的邏輯單位的額外空間量。如果當前映射模式不是MM_TEXT，則【nCharExtra】參數將被轉換並舍入為最近的圖元。



-------------------------------------------------------- KeyGTK3Win32SetTextColor ----
SetTextColor    SetTextColor函數將指定設備上下文的文本顏色設置為指定的顏色。
語法
參數
【HDC】標識設備上下文。【crColor】指定文本的顏色。
返回值
如果函數成功，則返回值是上一個文本顏色的顏色引用。如果函數失敗，返回值為CLR_INVALID。要獲取擴展錯誤資訊，


-------------------------------------------------------- KeyGTK3Win32SetTextJustification ----
SetTextJustification    SetTextJustification函數指定Windows應添加到文本字串中的中斷字元的空間量。當應用程式調用{??989796011}或ExtTextOut函數時，將添加空格。
語法
參數
【HDC】標識設備上下文。【nBreakExtra】指定要添加到文本行的邏輯單位的總額外空間。如果當前映射模式不是MM_TEXT，則【nBreakExtra】參數標識的值將被轉換並舍入為最近


-------------------------------------------------------- KeyGTK3Win32SetThreadAffinityMask ----
SetThreadAffinityMask    SetThreadAffinityMask函數為指定執行緒設置處理器關連遮罩。執行緒相關性遮罩是一個位向量，其中每個位表示允許執行緒運行的處理器。執行緒關連遮罩必須是執行緒的包含進程的進程關連遮罩的正確子集。執行緒只允許在其進程允許運行的處理器上運行。
語法
參數
【hThread】執行緒的控制碼，其親和力遮罩的函數集。Windows NT：此控制碼必須具有與之相關聯的THREAD_SET_INFORMATION存取權限。有關詳細資訊，請參閱執行緒物件.【dw


-------------------------------------------------------- KeyGTK3Win32SetThreadContext ----
SetThreadContext    SetThreadContext函數設置指定執行緒中的上下文。
語法
參數
【hThread】標識要寫入上下文的執行緒的打開控制碼。Windows NT：控制碼必須對執行緒具有THREAD_SET_CONTEXT存取權限。有關詳細資訊，請參閱執行緒物件.【lpContext】


-------------------------------------------------------- KeyGTK3Win32SetThreadDesktop ----
SetThreadDesktop    SetThreadDesktop函數將一個桌面分配給調用執行緒。桌面上的所有後續操作都使用授予【//分配給該執行緒的桌面的控制碼】的存取權限。
語法
參數
【//分配給該執行緒的桌面的控制碼】標識要分配給調用執行緒的桌面。該控制碼由CreateDesktop，GetThreadDesktop和OpenDesktop函數返回。如果調用執行緒在其當前桌面上有


-------------------------------------------------------- KeyGTK3Win32SetThreadIdealProcessor ----
SetThreadIdealProcessor    [New - Windows NT]SetThreadIdealProcessor函數用於為執行緒指定首選處理器。系統可能在其首選處理器上調度執行緒。
語法
參數
【hThread】處理要設置其優選處理器的執行緒。控制碼必須具有與之相關聯的THREAD_SET_INFORMATION存取權限。有關詳細資訊，請參閱執行緒物件.【dwIdealProcessor


-------------------------------------------------------- KeyGTK3Win32SetThreadLocale ----
SetThreadLocale    SetThreadLocale函數設置調用執行緒當前的區域設置。
語法
參數
【語言環境】指定調用執行緒的新區域設置。此參數可以是由MAKELCID宏或以下預定義值之一創建的地區設定識別碼：LOCALE_SYSTEM_DEFAULT默認系統地區設定。LOCALE_USE


-------------------------------------------------------- KeyGTK3Win32SetThreadPriority ----
SetThreadPriority    SetThreadPriority函數設置指定執行緒的優先順序值。該值與執行緒進程的優先順序類一起確定執行緒的基本優先順序。
語法
參數
【hThread】標識要設置優先順序值的執行緒。Windows NT：控制碼必須具有與之相關聯的THREAD_SET_INFORMATION存取權限。有關詳細資訊，請參閱執行緒物件.【優先】指定執行緒


-------------------------------------------------------- KeyGTK3Win32SetThreadPriorityBoost ----
SetThreadPriorityBoost    [New - Windows NT]SetThreadPriorityBoost函數禁用Windows NT臨時提升執行緒優先順序的函數。
語法
參數
【hThread】處理優先順序提升的執行緒。該執行緒必須具有與之相關聯的THREAD_SET_INFORMATION存取權限。有關詳細資訊，請參閱執行緒物件.【DisablePriorityBoos


-------------------------------------------------------- KeyGTK3Win32SetThreadToken ----
SetThreadToken    SetThreadToken函數為執行緒分配假冒權杖。該函數還可能導致執行緒停止使用模擬權杖。
語法
參數
【線】指向函數分配類比權杖的執行緒的控制碼。如果【線】為NULL，則該函數會將類比權杖分配給調用執行緒。【代幣】模擬權杖的打開控制碼分配給執行緒。必須使用TOKEN_IMPERSONATE存取權限打開


-------------------------------------------------------- KeyGTK3Win32SetTimer ----
SetTimer    SetTimer函數創建一個具有指定超時值的計時器。
語法
參數
【的hWnd】標識與計時器關聯的視窗。該窗口必須由調用執行緒擁有。如果此參數為NULL，則不會與計時器關聯窗口，並忽略【nIDEvent】參數。【nIDEvent】指定非零計時器識別字。如果【


-------------------------------------------------------- KeyGTK3Win32SetTimeZoneInformation ----
SetTimeZoneInformation    SetTimeZoneInformation函數設置當前時區參數。這些參數控制從協調世界時（UTC）到本地時間的轉換。
語法
參數
【lpTimeZoneInformation】指向TIME_ZONE_INFORMATION結構，其中包含要設置的時區參數。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零


-------------------------------------------------------- KeyGTK3Win32SetTokenInformation ----
SetTokenInformation    SetTokenInformation函數設置指定訪問權杖的各種類型的資訊。其設置的資訊將替換現有資訊。調用進程必須具有設置資訊的適當存取權限。
語法
參數
【TokenHandle】標識要設置資訊的訪問權杖。【TokenInformationClass】指定TOKEN_INFORMATION_CLASS枚舉類型的變數，標識函數集的資訊類型。來自


-------------------------------------------------------- KeyGTK3Win32SetUnhandledExceptionFilter ----
SetUnhandledExceptionFilter    SetUnhandledExceptionFilter函數允許應用程式取代Win32放置在每個執行緒和進程頂部的頂級例外處理常式。調用此函數後，如果在未調試的進程中發生異常，並且異常會使其返回到Win32未處理的異常篩檢程式，該篩檢程式將調用【lpTopLevelExceptionFilter】參數指定的異常篩檢程式函數。
語法
參數
【lpTopLevelExceptionFilter】提供頂級異常篩檢程式函數的位址，只要UnhandledExceptionFilter 函數獲得控制，該進程將被調用，並且進程未被調試。此參


-------------------------------------------------------- KeyGTK3Win32SetupComm ----
SetupComm    SetupComm函數初始化指定通信設備的通信參數。
語法
參數
【HFILE】識別通信設備。CreateFile函數返回此控制碼。【dwInQueue】指定設備內部輸入緩衝區的推薦大小（以位元組為單位）。【dwOutQueue】指定設備內部輸出緩衝區的推薦大


-------------------------------------------------------- KeyGTK3Win32SetupHookProc ----
SetupHookProc    一個SetupHookProc掛接過程是一個應用程式定義或庫定義的回檔過程，與列印設置公共對話方塊一起使用。掛鉤過程接收預設對話方塊過程的消息或通知。
語法
參數
【hdlg】處理列印設置公共對話方塊視窗，消息的目的是。【uiMsg】標識正在接收的消息。【wParam中】指定有關該消息的附加資訊。具體含義取決於【uiMsg】參數的值。【lParam的】指


-------------------------------------------------------- KeyGTK3Win32SetUserObjectInformation ----
SetUserObjectInformation    SetUserObjectInformation函數設置有關視窗站或桌面物件的資訊。
語法
參數
【hObjhr】標識要設置物件資訊的視窗台或桌面物件。該值可以是HDESK或HWINSTA控制碼（例如，CreateWindowStation OpenWindowStation，Create


-------------------------------------------------------- KeyGTK3Win32SetUserObjectSecurity ----
SetUserObjectSecurity    SetUserObjectSecurity函數設置使用者物件的安全性。這可以是例如視窗或DDE對話。
語法
參數
【hObjhr】標識設置了安全資訊的使用者物件。【pSIRequested】指向SECURITY_INFORMATION結構，描述正在設置的安全資訊。【pSID】指向包含新安全資訊的SECUR


-------------------------------------------------------- KeyGTK3Win32SetViewportExtEx ----
SetViewportExtEx    SetViewportExtEx函數通過使用指定的值設置設備上下文的視口的水準和垂直範圍。
語法
參數
【HDC】標識設備上下文。【nXExtent】指定視口的水準範圍（以設備為單位）。【nYExtent】指定視口的垂直範圍（以設備為單位）。【lpsiz到】指向SIZE結構。以前的視口範圍（以


-------------------------------------------------------- KeyGTK3Win32SetViewportOrgEx ----
SetViewportOrgEx    SetViewportOrgEx函數通過使用指定的座標設置設備上下文的視口原點。
語法
參數
【HDC】標識設備上下文。【X】指定新視口原點的設備單位的x座標。【Y】指定新視口原點的以y為單位的y座標。【LPPOINT】指向POINT結構。以前的視口原點（在設備座標中）放置在此結構中


-------------------------------------------------------- KeyGTK3Win32SetVolumeLabel ----
SetVolumeLabel    SetVolumeLabel函數設置檔案系統卷的標籤。
語法
參數
【lpRootPathName】指向一個以null結尾的字串，指定檔案系統卷的根目錄。這是函數標籤的音量。如果此參數為NULL，則使用目前的目錄的根。【lpVolumeName】指向指定卷名


-------------------------------------------------------- KeyGTK3Win32SetWaitableTimer ----
SetWaitableTimer    [New - Windows NT]SetWaitableTimer函數啟動指定的“等待”計時器。當到達時間到達時，計時器發出信號，設置計時器的執行緒調用可選的完成常式。
語法
參數
【hTimer】標識計時器物件。CreateWaitableTimer或OpenWaitableTimer函數返回此控制碼。【pDueTime】指定何時將計時器的狀態設置為發信號，以100納秒


-------------------------------------------------------- KeyGTK3Win32SetWindowContextHelpId ----
SetWindowContextHelpId    SetWindowContextHelpId函數將説明上下文識別字與指定的視窗相關聯。
語法
參數
【HWND】處理到與其關聯説明上下文識別字的視窗。【dwContextHelpId】幫助上下文識別字。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
如果子窗


-------------------------------------------------------- KeyGTK3Win32SetWindowExtEx ----
SetWindowExtEx    SetWindowExtEx函數通過使用指定的值設置設備上下文的視窗的水準和垂直範圍。
語法
參數
【HDC】標識設備上下文。【nXExtent】以邏輯單位指定視窗的水準範圍。【nYExtent】以邏輯單位指定視窗的垂直範圍。【lpsiz到】指向SIZE結構。以前的視窗範圍（以邏輯單位）放


-------------------------------------------------------- KeyGTK3Win32SetWindowLong ----
SetWindowLong    SetWindowLong函數更改指定視窗的屬性。該函數還將指定偏移量的32位（長）值設置為視窗的額外視窗記憶體。
語法
參數
【的hWnd】標識視窗，間接地標識視窗所屬的類。【參數nIndex】指定要設置的值的基於零的偏移量。有效值的範圍為零，通過額外的視窗記憶體的位元組數減去4;例如，如果指定了12個或更多位元組的額外


-------------------------------------------------------- KeyGTK3Win32SetWindowOrgEx ----
SetWindowOrgEx    SetWindowOrgEx函數使用指定的座標設置設備上下文的視窗原點。
語法
參數
【HDC】標識設備上下文。【X】指定新視窗原點的邏輯x座標。【Y】指定新視窗原點的邏輯y座標。【LPPOINT】指向POINT結構。視窗的以前的起源放在這個結構中。如果【LPPOINT】為N


-------------------------------------------------------- KeyGTK3Win32SetWindowPlacement ----
SetWindowPlacement    SetWindowPlacement函數設置指定視窗的顯示狀態和還原，最小化和最大化的位置。
語法
參數
【的hWnd】標識視窗。【lpwndplel，LATN】指向WINDOWPLACEMENT結構，指定新的顯示狀態和視窗位置。在致電SetWindowPlacement之前，將WINDOWPL


-------------------------------------------------------- KeyGTK3Win32SetWindowPos ----
SetWindowPos    SetWindowPos函數可以更改小孩，彈出式視窗或頂級視窗的大小，位置和Z順序。孩子，快顯視窗和頂級視窗根據螢幕上的外觀進行排序。最頂層的視窗接收到最高等級，是Z順序中的第一個視窗。
語法
參數
【的hWnd】標識視窗。【hWndInsertAfter】標識Z錨定視窗之前的視窗。此參數必須是視窗控制碼或以下值之一：值含義HWND_BOTTOM將視窗放在Z順序的底部。如果【的hWnd】參


-------------------------------------------------------- KeyGTK3Win32SetWindowRgn ----
SetWindowRgn    SetWindowRgn函數設置視窗的視窗區域。視窗區域確定作業系統允許繪製的視窗內的區域。作業系統不顯示位於視窗區域之外的視窗的任何部分
語法
參數
【的hWnd】處理要設置視窗區域的視窗。【HRGN】處理一個地區。該函數將視窗的視窗區域設置為該區域。如果【HRGN】為NULL，則該函數將視窗區域設置為NULL。【bRedraw】布林值，


-------------------------------------------------------- KeyGTK3Win32SetWindowsHook ----
SetWindowsHook  SetWindowsHook函數已過時。此函數僅用於與16位元版本的Windows相容。基於Win32的應用程式應使用SetWindowsHookEx函數。


-------------------------------------------------------- KeyGTK3Win32SetWindowsHookEx ----
SetWindowsHookEx    SetWindowsHookEx函數將一個應用程式定義的鉤子過程安裝到一個鉤子鏈中。應用程式安裝掛接過程來監視系統的某些類型的事件。掛鉤過程可以監視與特定執行緒或系統中所有執行緒相關聯的事件。此函數取代SetWindowsHook函數。
語法
參數
【idHook】指定要安裝的掛鉤過程的類型。此參數可以是以下值之一：值描述WH_CALLWNDPROC在系統將其發送到目標視窗過程之前，安裝一個監視消息的掛接過程。有關詳細資訊，請參閱Cal


-------------------------------------------------------- KeyGTK3Win32SetWindowText ----
SetWindowText    SetWindowText函數可以更改指定視窗標題列的文本（如果有）。如果指定的視窗是控制項，控制項的文本將被更改。
語法
參數
【的hWnd】標識要更改其文本的視窗或控制項。【lpString】指向要用作新標題或控制項文本的以null結尾的字串。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取


-------------------------------------------------------- KeyGTK3Win32SetWindowWord ----
SetWindowWord    SetWindowWord函數將指定偏移量的16位（字）值替換為指定視窗的額外視窗記憶體。
語法
參數
【的hWnd】標識視窗，間接地標識視窗所屬的類。【參數nIndex】指定要替換的值的基於零的位元組偏移量。視窗記憶體的位元組數減去2，有效值範圍為零;例如，如果您指定了10個或更多位元組的額外的窗


-------------------------------------------------------- KeyGTK3Win32SetWinMetaFileBits ----
SetWinMetaFileBits    SetWinMetaFileBits函數將圖中繼檔從較舊的Windows格式轉換為新的增強格式，並將新的圖中繼檔存儲在記憶體中。
語法
參數
【cbBuffer】指定包含Windows格式中繼檔的緩衝區的大小（以位元組為單位）。【lpbBuffer】指向包含Windows格式中繼檔資料的緩衝區。（假設使用GetMetaFileBit


-------------------------------------------------------- KeyGTK3Win32SetWorldTransform ----
SetWorldTransform    SetWorldTransform函數設置指定設備上下文的世界空間和頁面空間之間的二維線性轉換。此轉換可用於縮放，旋轉，剪切或翻譯圖形輸出。
語法
參數
【HDC】標識設備上下文。【lpXform】指向包含轉換資料的XFORM結構。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
對於世界空間中的任何座標（x，y


-------------------------------------------------------- KeyGTK3Win32SHAddToRecentDocs ----
SHAddToRecentDocs    [Now Supported on Windows NT]將文檔添加到shell的最近使用的文檔列表中，或從列表中清除所有文檔。使用者通過Windows工作列的“開始”功能表訪問清單。WINSHELLAPI void WINAPI SHAddToRecentDocs（UINT【uFlags】, LPCVOID 【pv】 );



-------------------------------------------------------- KeyGTK3Win32SHAppBarMessage ----
SHAppBarMessage    [Now Supported on Windows NT]向系統發送應用程式欄消息。WINSHELLAPI UINT APIENTRY SHAppBarMessage（laDWORD 【//指向結構的指標】, PAPPBARDATA 【的pData】 );
參數
【//指向結構的指標】要發送的應用程式欄消息的識別字。此參數可以是以下值之一：ABM_ACTIVATE通知系統應用程式欄已被啟動。ABM_GETAUTOHIDEBAR檢索與螢幕特定邊緣相關聯


-------------------------------------------------------- KeyGTK3Win32SHBrowseForFolder ----
SHBrowseForFolder    [Now Supported on Windows NT]顯示一個對話方塊，使使用者可以選擇一個shell資料夾。WINSHELLAPI LPITEMIDLIST WINAPI SHBrowseForFolder（LPBROWSEINFO 【LPBI】 );
參數
【LPBI】指向BROWSEINFO結構的指標，其中包含用於顯示對話方塊的資訊。
返回值
返回指向項目識別字列表的指標，該列表指定所選資料夾相對於名稱空間根目錄的位置。如果用戶在對話方塊中選


-------------------------------------------------------- KeyGTK3Win32SHChangeNotify ----
SHChangeNotify    [Now Supported on Windows NT]通知應用程式執行的事件的系統。如果應用程式執行可能影響shell的操作，應該使用此函數。WINSHELLAPI void WINAPI SHChangeNotify（LONG 【wEventId】, UINT 【uFlags】, LPCVOID 【dwItem2】, LPCVOID 【Array of flags that specifies the events.】 );



-------------------------------------------------------- KeyGTK3Win32ShellAbout ----
ShellAbout    ShellAbout函數顯示“Shell關於”對話方塊。
語法



-------------------------------------------------------- KeyGTK3Win32ShellExecute ----
ShellExecute    ShellExecute函數打開或列印指定的檔。該檔可以是可執行檔或文檔檔。另見ShellExecuteEx.
語法
參數
【HWND】指定父視窗。此視窗接收應用程式生成的任何訊息方塊。例如，應用程式可能通過生成訊息方塊來報告錯誤。【lpOperation】指向指定要執行的操作的以空值結尾的字串的指標。以下操作字元


-------------------------------------------------------- KeyGTK3Win32ShellExecuteEx ----
ShellExecuteEx    [Now Supported on Windows NT]ShellExecuteEx函數對檔執行操作。該檔可以是可執行檔或文檔。
語法
參數
【lpExecInfo】指向SHELLEXECUTEINFO結構的指標，其中包含並接收有關啟動應用程式的資訊。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯


-------------------------------------------------------- KeyGTK3Win32ShellProc ----
ShellProc    ShellProc掛接過程是一個應用程式定義或庫定義的回呼函數，shell應用程式用於從系統接收有用的通知。
語法
參數
【NCODE】指定掛鉤代碼。此參數可以是以下值之一：值含義HSHELL_ACTIVATESHELLWINDOW外殼應啟動其主窗口。HSHELL_GETMINRECT僅Windows 95：窗


-------------------------------------------------------- KeyGTK3Win32Shell_NotifyIcon ----
Shell_NotifyIcon    [Now Supported on Windows NT]向系統發送消息，以從工作列狀態欄域添加，修改或刪除圖示。WINSHELLAPI BOOL WINAPI Shell_NotifyIcon（DWORD 【//指向結構的指標】,//消息識別字frPNOTIFYICONDATA 【PNID】//指向結構的指標);



-------------------------------------------------------- KeyGTK3Win32SHFileOperation ----
SHFileOperation    [Now Supported on Windows NT]對檔案系統物件執行複製，移動，重命名或刪除操作。WINSHELLAPI int WINAPI SHFileOperation（LPSHFILEOPSTRUCT 【lpFileOp】 );
參數
【lpFileOp】指向SHFILEOPSTRUCT結構的指標，其中包含函數執行操作的資訊。
返回值
如果發生錯誤，返回零，否則返回0。



-------------------------------------------------------- KeyGTK3Win32SHFreeNameMappings ----
SHFreeNameMappings    [Now Supported on Windows NT]釋放由SHFileOperation函數檢索的檔案名映射物件。WINSHELLAPI void WINAPI SHFreeNameMappings（;HANDLE 【hNameMappings】 );



-------------------------------------------------------- KeyGTK3Win32SHGetDataFromIDList ----
SHGetDataFromIDList    [Now Supported on Windows NT]ShGetDataFromIDList函數從相對IDList中檢索擴展屬性資料。
語法



-------------------------------------------------------- KeyGTK3Win32SHGetDesktopFolder ----
SHGetDesktopFolder    [Now Supported on Windows NT]檢索桌面資料夾的IShellFolder介面，該資料夾是shell名稱空間的根。WINSHELLAPI HRESULT WINAPI SHGetDesktopFolder（LPSHELLFOLDER *【ppshf】 );
參數
【ppshf】接收桌面資料夾的IShellFolder介面指標的位址。呼叫應用程式負責通過調用其發佈方法來最終釋放介面。
返回值
如果成功返回NOERROR，否則返回OLE定義的錯誤結果


-------------------------------------------------------- KeyGTK3Win32SHGetFileInfo ----
SHGetFileInfo    [Now Supported on Windows NT]檢索有關檔案系統中的物件的資訊，例如檔，資料夾，目錄或驅動器根目錄。WINSHELLAPI DWORD WINAPI SHGetFileInfoLPCTSTR 【* PSFI】, DWORD 【dwFileAttributes】, SHFILEINFO FAR 【* PSFI】, UINT 【cbFileInfo】, UINT 【uFlags】 );



-------------------------------------------------------- KeyGTK3Win32SHGetInstanceExplorer ----
SHGetInstanceExplorer    [Now Supported on Windows NT]檢索資源管理器的IUnknown介面的位址。WINSHELLAPI HRESULT WINAPI SHGetInstanceExplorer（IUnknown 【ppunk】 );



-------------------------------------------------------- KeyGTK3Win32SHGetMalloc ----
SHGetMalloc    [Now Supported on Windows NT]檢索指向shell的IMalloc介面的指標。shell擴展必須使用此介面來分配稍後由shell釋放的記憶體。HRESULT SHGetMallocLPMALLOC 【* ppMalloc】 );



-------------------------------------------------------- KeyGTK3Win32SHGetPathFromIDList ----
SHGetPathFromIDList    [Now Supported on Windows NT]將項目識別字清單轉換為檔案系統路徑。WINSHELLAPI BOOL WINAPI SHGetPathFromIDList（LPCITEMIDLIST 【PIDL】, LPSTR 【* PSFI】 );



-------------------------------------------------------- KeyGTK3Win32SHGetSpecialFolderLocation ----
SHGetSpecialFolderLocation    [Now Supported on Windows NT]檢索特殊資料夾的位置。WINSHELLAPI HRESULT WINAPI SHGetSpecialFolderLocation（;HWND 【hwndOwner】, INT 【n資料夾da】, LPITEMIDLIST *【ppidl】 );



-------------------------------------------------------- KeyGTK3Win32SHLoadInProc ----
SHLoadInProc    [Now Supported on Windows NT]從shell進程的上下文中創建指定物件類的實例。WINSHELLAPI HRESULT WINAPI SHLoadInProc（REFCLSID 【rclsid】 );



-------------------------------------------------------- KeyGTK3Win32ShowCaret ----
ShowCaret    ShowCaret函數使插入符在插入符當前位置的螢幕上可見。當插入符可見時，它會自動閃爍。
語法
參數
【的hWnd】標識擁有插入符號的視窗。如果此參數為NULL，則ShowCaret將搜索具有插入符號的視窗的當前任務。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取


-------------------------------------------------------- KeyGTK3Win32ShowCursor ----
ShowCursor    ShowCursor函數顯示或隱藏游標。
語法
參數
【bShow】指定內部顯示計數器是遞增還是遞減。如果【bShow】為TRUE，則顯示計數增加1。如果【bShow】為FALSE，則顯示計數減1。
返回值
返回值指定新的顯示計數器。
描


-------------------------------------------------------- KeyGTK3Win32ShowHideMenuCtl ----
ShowHideMenuCtl    ShowHideMenuCtl函數設置或刪除指定的功能表項目的核取記號屬性，並顯示或隱藏相應的控制項。該函數在指定的功能表項目中沒有一個核取記號，然後顯示相應的控制項。如果功能表項目已經有核取記號，該函數將刪除核取記號並隱藏相應的控制項。
語法



-------------------------------------------------------- KeyGTK3Win32ShowOwnedPopups ----
ShowOwnedPopups    ShowOwnedPopups函數顯示或隱藏指定視窗所有的所有快顯視窗。
語法
參數
【的hWnd】標識擁有要顯示或隱藏的快顯視窗的視窗。【fShow】指定快顯視窗是否顯示或隱藏。如果此參數為TRUE，則會顯示所有隱藏的快顯視窗。如果此參數為FALSE，則所有可見的快顯視窗都


-------------------------------------------------------- KeyGTK3Win32ShowScrollBar ----
ShowScrollBar    ShowScrollBar函數顯示或隱藏指定的捲軸。
語法
參數
【的hWnd】根據【wBar】參數的值標識捲軸控制項或帶有標準捲軸的視窗。【wBar】指定要顯示或隱藏的捲軸。此參數可以是以下值之一：值含義SB_BOTH顯示或隱藏視窗的標準水準和垂直滾


-------------------------------------------------------- KeyGTK3Win32ShowWindow ----
ShowWindow    ShowWindow函數設置指定視窗的顯示狀態。
語法
參數
【的hWnd】標識視窗。【nCmdShow】指定視窗的顯示方式。如果啟動應用程式的程式提供STARTUPINFO結構，則此應用程式第一次調用ShowWindow時將忽略此參數。否則，第一次調


-------------------------------------------------------- KeyGTK3Win32ShowWindowAsync ----
ShowWindowAsync    [Now Supported on Windows NT]ShowWindowAsync函數設置由不同執行緒創建的視窗的顯示狀態。
語法
參數
【的hWnd】標識視窗。【nCmdShow】指定視窗的顯示方式。有關可能值的清單，請參閱ShowWindow函數的說明。
返回值
如果視窗以前可見，則返回值不為零。如果視窗以前被隱藏，返


-------------------------------------------------------- KeyGTK3Win32SignalObjectAndWait ----
SignalObjectAndWait    [New - Windows NT]SignalObjectAndWait函數允許調用者以原子方式發送一個物件並等待另一個物件。
語法
參數
【hObjectToSignal】指定要發送信號的物件的控制碼。此物件可以是信號量，互斥體或事件。如果控制碼是信號量，則需要SEMAPHORE_MODIFY_STATE訪問。如果控制碼是事件，則需


-------------------------------------------------------- KeyGTK3Win32SizeofResource ----
SizeofResource    SizeofResource函數返回指定資源的大小（以位元組為單位）。
語法
參數
【HMODULE】標識可執行檔包含資源的模組。【hResInfo】標識資源。必須使用FindResource或FindResourceEx函數創建此控制碼。
返回值
如果函數成功，則返回


-------------------------------------------------------- KeyGTK3Win32Sleep ----
睡眠    睡覺函數暫停執行當前執行緒指定的時間間隔。VOID睡眠（DWORD dwMilliseconds//以毫秒為單位的休眠時間);
參數
dwMilliseconds指定暫停執行的時間（以毫秒為單位）。值為零會使執行緒將剩餘時間片段放棄準備運行的任何其他具有相同優先順序的執行緒。如果沒有其他具有相同優先順序的執行緒準備運行，該函數將立即


-------------------------------------------------------- KeyGTK3Win32SleepEx ----
SleepEx    SleepEx函數使當前執行緒進入等候狀態，直到出現以下情況之一：*調用I / O完成回呼函數*非同步程序呼叫（APC）排隊等待中的執行緒。*經過了超時間隔
語法
參數
【dwMilliseconds】指定延遲發生的時間（以毫秒為單位）。值為零會使函數立即返回。INFINITE的值導致無限延遲。【bAlertable】指定函數是否由於I / O完成回呼函數或


-------------------------------------------------------- KeyGTK3Win32SnmpExtensionInit ----
SnmpExtensionInit    可擴展代理調用擴展代理程式DLL中的SnmpExtensionInit函數來執行擴展和可擴展代理的雙向初始化。
語法
參數
【dwTimeZeroReference】[in]指定擴展代理的時間零參考。【hPollForTrapEvent】[out]指向事件控制碼，當可擴展代理輪詢SnmpExtensionTrap函


-------------------------------------------------------- KeyGTK3Win32SnmpExtensionInitEx ----
SnmpExtensionInitEx  SnmpExtensionInitEx函數可識別擴展代理支援的任何其他管理資訊庫（MIB）子樹。可擴展代理在可擴展代理的服務啟動期間調用擴展代理DLL中的SnmpExtensionInitEx函數。
語法
參數
【supportedView】[out]指向AsnObjectIdentifier結構的指標，指定擴展代理支援的下一個MIB子樹。
返回值
如果【supportedView】參數已使用附


-------------------------------------------------------- KeyGTK3Win32SnmpExtensionQuery ----
SnmpExtensionQuery    可擴展代理程式調用擴展代理程式DLL中的SnmpExtensionQuery函數來解析在一個或多個擴展代理的已註冊MIB子樹中包含變數的SNMP請求。
語法
參數
【請求類型】[in]指定SNMP請求類型。此參數可以是以下值之一：值含義ASN_RFC1157_GETREQUEST搜索並從指定的變數接收值。ASN_RFC1157_GETNEXTREQUE


-------------------------------------------------------- KeyGTK3Win32SnmpExtensionTrap ----
SnmpExtensionTrap    可擴展代理調用擴展代理DLL中的SnmpExtensionTrap函數來檢索擴展代理生成的陷阱。
語法
參數
【企業】[out]指向生成陷阱的源對象的物件識別碼。可擴展代理不會釋放此變數的記憶體。【genericTrap】[out]指出通用陷阱的指示。此參數可以是以下值之一：值含義SNMP_GENER


-------------------------------------------------------- KeyGTK3Win32SnmpMgrClose ----
SnmpMgrClose    SnmpMgrClose函數關閉與指定會話關聯的通信通訊端和資料結構。
語法
參數
【會議】[in]指向內部結構，指定要關閉的會話。
返回值
如果函數成功，返回值為TRUE。如果函數失敗，返回值為FALSE。此函數可能會返回Windows Sockets錯誤代碼。



-------------------------------------------------------- KeyGTK3Win32SnmpMgrGetTrap ----
SnmpMgrGetTrap    如果啟用了陷阱接收，SnmpMgrGetTrap函數返回未完成的陷阱資料，如果呼叫者未接收到該資料。
語法
參數
【企業】[out]指向生成SNMP陷阱的企業的物件識別碼。【IPAddress】[out]指向生成SNMP陷阱的企業的IP地址。【genericTrap】[out]指向通用陷阱的指示器。此參


-------------------------------------------------------- KeyGTK3Win32SnmpMgrOidToStr ----
SnmpMgrOidToStr    SnmpMgrStrToOid函數將內建物件識別字轉換為字串物件識別碼或物件描述符表示。BOOL SnmpMgrOidToStr(AsnObjectIdentifier *【有關uz】,//要轉換的物件識別碼LPSTR *【串】//字串物件識別碼表示);
參數
【有關uz】[in]指向要轉換的物件識別碼變數。【串】[out]指向將接收轉換值的以null結尾的字串。
返回值
如果函數成功，返回值為TRUE。如果函數失敗，返回值為FALSE。此函


-------------------------------------------------------- KeyGTK3Win32SnmpMgrOpen ----
SnmpMgrOpen    SnmpMgrOpen函數初始化通信通訊端和資料結構，允許與指定代理進行通信。
語法
參數
【lpAgentAddress】[in]指向一個空值終止的字串，指定可以解析為IP位址，IPX位址（8.12標記法）或乙太網位址的點分十進位IP地址或主機名稱。【lpAgentCommuni


-------------------------------------------------------- KeyGTK3Win32SnmpMgrRequest ----
SnmpMgrRequest    SnmpMgrRequest函數請求指定的代理執行指定的操作。
語法
參數
【會議】[in]指向內部結構，指定執行請求的會話。【請求類型】[in]指定SNMP請求類型。此參數可以是以下值之一：值含義ASN_RFC1157_GETREQUEST搜索並從指定的變數接收值


-------------------------------------------------------- KeyGTK3Win32SnmpMgrStrToOid ----
SnmpMgrStrToOid    SnmpMgrStrToOid函數將字串物件識別碼或物件描述符表示形式轉換為內建物件識別字。
語法
參數
【串】[in]指向要轉換的以null結尾的字串。【有關uz】[out]指向將接收轉換值的物件識別碼變數。
返回值
如果函數成功，返回值為TRUE。如果函數失敗，返回值為FALSE。此函


-------------------------------------------------------- KeyGTK3Win32SnmpMgrTrapListen ----
SnmpMgrTrapListen    SnmpMgrTrapListen函數註冊管理應用程式接收SNMP陷阱的能力。
語法
參數
【phTrapAvailable】[out]指向將用於指示有陷阱可用的事件控制碼，並且應用程式應調用SnmpMgrGetTrap函數。
返回值
如果函數成功，返回值為TRUE。如果函數失敗


-------------------------------------------------------- KeyGTK3Win32SnmpUtilMemAlloc ----
SnmpUtilMemAlloc  SnmpUtilMemAlloc函數從進程堆分配動態記憶體。
語法
參數
【尺寸】[in]為記憶體物件分配的位元組數。
返回值
如果函數成功，則返回值是指向新分配的記憶體物件的指標。如果函數失敗，返回值為NULL。
描述
使用SnmpUtilMemFree函數釋


-------------------------------------------------------- KeyGTK3Win32SnmpUtilMemFree ----
SnmpUtilMemFree  SnmpUtilMemFree函數釋放指定的記憶體物件。
語法
參數
【位址】[in/out]指向要釋放的記憶體物件的指標。
返回值
沒有。
描述
使用SnmpUtilMemAlloc函數分配記憶體。



-------------------------------------------------------- KeyGTK3Win32SnmpUtilMemReAlloc ----
SnmpUtilMemReAlloc  SnmpUtilMemReAlloc函數更改指定記憶體物件的大小。
語法
參數
【位址】[in]指向要調整大小的記憶體物件的指標。【尺寸】[in]要為新記憶體物件分配的位元組數。
返回值
如果函數成功，則返回值是指向新分配的記憶體物件的指標。如果函數失敗，返回值為NULL。


-------------------------------------------------------- KeyGTK3Win32SnmpUtilOidAppend ----
SnmpUtilOidAppend    SnmpUtilOidAppend函數將源物件識別碼附加到目標物件識別碼。
語法
參數
【DestObjId】[in/out]指向AsnObjectIdentifier 結構以接收副本。【SrcObjId】[in]指向要附加的AsnObjectIdentifier結構。
返回


-------------------------------------------------------- KeyGTK3Win32SnmpUtilOidCmp ----
SnmpUtilOidCmp    SnmpUtilOidCmp函數比較兩個物件識別碼。
語法
參數
【ObjIdA】[in]指向AsnObjectIdentifier結構進行比較。【ObjIdB】[in]指向要比較的AsnObjectIdentifier結構。
返回值
如果【ObjId


-------------------------------------------------------- KeyGTK3Win32SnmpUtilOidCpy ----
SnmpUtilOidCpy    SnmpUtilOidCpy函數將【SrcObjId】參數指向的變數複製到【DestObjId】參數，為目標的副本分配必要的記憶體。
語法
參數
【DestObjId】[out]指向AsnObjectIdentifier結構以接收副本。【SrcObjId】[in]指向要複製的AsnObjectIdentifier結構。
返回值
如


-------------------------------------------------------- KeyGTK3Win32SnmpUtilOidFree ----
SnmpUtilOidFree    SnmpUtilOidFree函數釋放與物件識別碼相關聯的任何已分配資料。
語法
參數
【OBJ】[in/out]指向應分配資料的AsnObjectIdentifier結構。
返回值
無返回值。



-------------------------------------------------------- KeyGTK3Win32SnmpUtilOidNCmp ----
SnmpUtilOidNCmp    SnmpUtilOidNCmp函數將兩個物件識別碼變數與【只】參數指定的長度進行比較。
語法
參數
【ObjIdA】[in]指向AsnObjectIdentifier結構進行比較。【ObjIdB】[in]指向AsnObjectIdentifier結構進行比較。【只】[in]表示要比較的子識


-------------------------------------------------------- KeyGTK3Win32SnmpUtilVarBindCpy ----
SnmpUtilVarBindCpy    SnmpUtilVarBindCpy函數複製RFC1157VarBind結構，並分配目標結構所需的任何記憶體。
語法
參數
【DSTen】[out]指向RFC1157VarBind結構以接收副本。【SRC】[in]指向要複製的RFC1157VarBind結構。
返回值
如果函數成功，返回值為TRUE。如果函數


-------------------------------------------------------- KeyGTK3Win32SnmpUtilVarBindFree ----
SnmpUtilVarBindFree    SnmpUtilVarBindFree函數釋放與RFC1157VarBind結構相關聯的任何已分配資料。
語法
參數
【VarBind】[in/out]指向應分配資料的RFC1157VarBind結構。
返回值
無返回值。



-------------------------------------------------------- KeyGTK3Win32SnmpUtilVarBindListCpy ----
SnmpUtilVarBindListCpy    SnmpUtilVarBindListCpy函數複製RFC1157VarBindList結構，並為目標的副本分配任何必要的記憶體。
語法
參數
【DSTen】[out]指向RFC1157VarBindList結構以接收副本。【SRC】[in]指向要複製的RFC1157VarBindList結構。
返回值
如果函數成功，返回值為T


-------------------------------------------------------- KeyGTK3Win32SnmpUtilVarBindListFree ----
SnmpUtilVarBindListFree    SnmpUtilVarBindListFree函數釋放與RFC1157VarBindList結構相關聯的任何已分配資料。
語法
參數
【VarBindList】[in/out]指向應分配資料的RFC1157VarBindList結構。
返回值
無返回值。



-------------------------------------------------------- KeyGTK3Win32SOBailOut ----
SOBailOut允許檔解析器返回錯誤條件。在調用此函數後，解析器應儘快從VwReadStreamFunc函數返回。虛空SOBailOut（WORD 【錯誤標誌此參數可以是以下值之一：】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOBeginTable ----
SOBeginTable啟動表定義，指示後續輸出調用中的文本是表的一部分。必須在段落之間調用此函數，然後指定行和單元格格式。VOID SOBeginTable（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOEndColumnInfo ----
SOEndColumnInfo結束列資訊的定義。在設置列資訊後，檔解析器必須立即調用此函數。該函數只能從VwStreamSection函式呼叫。VOID SOEndColumnInfo（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOEndFieldInfo ----
SOEndFieldInfo結束欄位資訊的定義。檔解析器必須先前稱為SOStartFieldInfo函數。檔解析器在設置欄位資訊後立即調用此函數。此函數只能從VwStreamSection函式呼叫。VOID SOEndFieldInfo（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOEndFontTable ----
SOEndFontTable結束字體表的定義。檔解析器必須在設置字體條目後立即調用此函數。該函數只能從VwStreamSection函式呼叫。VOID SOEndFontTable（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOEndPalette ----
SOEndPalette結束調色板的定義。檔解析器在指定最後一個調色板條目後立即調用此函數。VOID SOEndPalette（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOEndTable ----
SOEndTable結束表定義，指示後續輸出調用中的文本不再是表的一部分。必須在分行後調用該函數。VOID SOEndTable（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOEndTabStops ----
SOEndTabStops結束段落的定位停駐點置的定義。要設置定位停駐點，請使用SOPutTabStop函數。檔解析器在設置段落的最後一個選項卡停止後立即調用此函數。VOID SOEndTabStops（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOGetInfo ----
SOGetInfo檢索有關試算表的資訊。VOID SOGetInfo（WORD 【*pInfo】, 無效VWPTR 【* PINFO】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOGetScanLineBuffer ----
SOGetScanLineBuffer檢索用於存儲當前掃描線的緩衝區的位址。對於每個生成的掃描線，從VwStreamReadFunc函式呼叫此函數。此函數將指向的變數設置為應構建掃描行資料的位址。WORD SOGetScanLineBufferVOID VWPTR 【*ppScanLineData】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutBitmapHeader ----
SOPutBitmapHeader輸出有關點陣圖的資訊。VOID SOPutBitmapHeader（PSOBITMAPHEADER 【pBitmapHeader】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutBreak ----
SOPutBreak設置段落，儲存格，記錄，頁面，部分或其他類型的中斷。在試算表部分中，部分中的最後一個儲存格必須在SO_SECTIONBREAK或SO_EOFBREAK中斷前關聯SO_CELLBREAK中斷。在資料庫部分中，部分中的最後一條記錄必須在SO_SECTIONBREAK或SO_EOFBREAK中斷前關聯SO_RECORDBREAK中斷。在文字處理部分，在SO_SECTIONBREAK或SO_EOFBREAK中斷之前，最後一段不需要SO_PARABREAK中斷。WORD SOPutBreak（WORD 【WTYPE】, DWORD 【dwInfo】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutChar ----
SOPutChar輸出一個字元，應用當前的字體，高度和屬性。該字元被假定屬於由打開的函數選擇的字元集，並且是可數和可見的。VOID SOPutChar（WORD 【WCH】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutCharAttr ----
SOPutCharAttr設置文本中字元的樣式屬性。VOID SOPutCharAttr（WORD 【wAttr】, WORD 【wState】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutCharFontById ----
SOPutCharFontById設置文本中字元的字體。VOID SOPutCharFontById（DWORD 【dwFontId】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutCharFontByName ----
SOPutCharFontByName設置文本中字元的字體。VOID SOPutCharFontByName（WORD 【wFontType】, WORD 【pFontName】, HPROC【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutCharHeight ----
SOPutCharHeight設置文本中一個字元的高度（以半分）。VOID SOPutCharHeight（WORD 【身高，半分，角色。】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutCharX ----
SOPutCharX輸出一個字元，應用指定的字元類型。假設該字元屬於由打開函數選擇的字元集。VOID SOPutCharX（WORD 【WCH】, WORD 【WTYPE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutColumnInfo ----
SOPutColumnInfo設置列資訊。調用此函數之前，檔解析器必須調用SOStartColumnInfo函數。此函數只能從VwStreamSection函式呼叫。VOID SOPutColumnInfo（PSOCOLUMN 【pColumn】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutDataCell ----
SOPutDataCell輸出儲存格的資料。VOID SOPutCell（PSODATACELL 【的pCell】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutEmbeddedObject ----
SOPutEmbeddedObject設置嵌入式圖形物件。檔解析器必須使用適當的值設置SOEMBEDDEDOBJECT結構。VOID SOPutEmbeddedObject（PSOEMBEDDEDOBJECT 【pObjectbsbs】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutField ----
SOPutField輸出欄位的資料。除了SO_FIELDTEXTVAR值以外，所有wStorage類型都使用此函數。VOID SOPutField（無效VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutFieldInfo ----
SOPutFieldInfo設置欄位資訊。調用此函數之前，檔解析器必須調用SOStartFieldInfo函數。此函數只能從VwStreamSection函式呼叫。VOID SOPutFieldInfo（PSOFIELD 【pfield】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutFontTableEntry ----
SOPutFontTableEntry設置字體表條目。調用此函數之前，檔解析器必須調用SOStartFontTable函數。對於要添加到表的每個字體，必須調用一次SOPutFontTableEntry.字體識別字必須是唯一的，但可以按任何順序給出。該函數只能從VwStreamSection函式呼叫。
語法



-------------------------------------------------------- KeyGTK3Win32SOPutHdrEntry ----
SOPutHdrEntry設置標題資訊的字串。該函數只能從VwStreamSection函式呼叫。VOID SOPutHdrEntry（char VWPTR 【* PLABEL】, char VWPTR 【* pData所】, WORD 【WID】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutMoreText ----
SOPutMoreText輸出儲存格的文本，並指示儲存格是否有更多文本輸出。此函數用於輸出使用SOPutText函數初始啟動的文本序列。如果要輸出的文本多，則檔解析器必須使用後續調用或調用SOPutMoreText函數來輸出文本。128位元組限制是為了方便函數處理SOPutMoreText.
語法



-------------------------------------------------------- KeyGTK3Win32SOPutMoreVarField ----
SOPutMoreVarField輸出變數欄位的資料，並指示是否有更多的資料要輸出的欄位。此函數可以調用多次。如果要輸出的資料更多，則檔解析器必須使用後續調用或調用SOPutMoreVarField來輸出資料。128位元組限制是為了方便函數處理SOPutMoreVarField.此函數用於輸出使用SOPutVarField函數初始啟動的資料序列。
語法



-------------------------------------------------------- KeyGTK3Win32SOPutPaletteEntry ----
SOPutPaletteEntry設置調色板條目的顏色。調用此函數之前，檔解析器必須調用SOStartPalette函數。調用此函數的順序確定圖像顏色表中條目的順序。第一個調色板條目為彩色0，為值為0的圖元顯示顏色;第二個調色板條目是顏色1;等等。VOID SOPutPaletteEntry（無符號字元 【紅】, 無符號字元 【綠色】, 無符號字元 【藍色】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutParaAlign ----
SOPutParaAlign設置段落的對齊方式。VOID SOPutParAlign（WORD 【WTYPE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutParaIndents ----
SOPutParaIndents設置段落的縮進。縮進相對於相應的左邊距或右邊距。VOID SOPutParaIndents（LONG 【dwLeft】, LONG 【dwRight】, LONG 【Width, in twips, of the left indent.】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutParaMargins ----
SOPutParaMargins設置段落邊距。邊距相對于頁面的左邊緣或右邊緣。VOID SOPutParaMargins（LONG 【dwLeft】, LONG 【dwRight】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutParaSpacing ----
SOPutParaSpacing設置段落的間距。VOID SOPutParaSpacing（WORD 【wLineHeightType】, DWORD 【dwLineHeight】, DWORD 【dwSpaceBefore】, DWORD 【dwSpaceAfter】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutScanLineData ----
SOPutScanLineData在點陣圖的單個掃描行中設置位元值。以前必須使用SOPutBitmapHeader函式定義點陣圖格式。VOID SOPutScanLineData（U_BYTE VWPTR 【*pScanLineData】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutSectionName ----
SOPutSectionName設置部分的名稱。VOID SOPutSectionName（char VWPTR 【* PNAME】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutSectionType ----
SOPutSectionType輸出節類型。VOID SOPutSectionType（WORD 【WTYPE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutSpecialCharX ----
SOPutSpecialCharX輸出特殊字元，應用指定的字元類型。VOID SOPutSpecialCharX（WORD 【WCH】, WORD【WTYPE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutSubdocInfo ----
SOPutSubdocInfo輸出子文檔資料。VOID SOPutSubdocInfo（WORD 【WTYPE】, WORD【wSubType】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutTableCellInfo ----
SOPutTableCellInfo設置儲存格資訊。VOID SOPutTableCellInfo（PSOTABLECELLINFO 【pCellInfo】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutTableRowFormat ----
SOPutTableRowFormat設置表格中一行的格式。VOID SOPutTableRowFormat（WORD 【wLeftEdge】, WORD 【wRowHeight】, WORD 【wRowHeightType】, WORD 【wCellMargin】, WORD 【wRowAlignment】, WORD 【wNumCells】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutTabStop ----
SOPutTabStop設置段落的定位停駐點。調用此函數之前，檔解析器必須調用SOStartTabStops函數，並可以通過多次調用來為段落設置多個定位停駐點。在設置定位字元停止時，檔解析器不得調用任何其他輸出函數，並且必須在設置最後一個定位字元停止後調用SOEndTabStops函數。VOID SOPutTabStop（PSOTAB 【PTAB】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutTextCell ----
SOPutTextCell輸出儲存格的文本，並指示儲存格是否有更多文本輸出。如果有更多文本輸出，則檔解析器必須使用後續調用或調用SOPutMoreText函數來輸出文本。VOID SOPutTextCell（PSOTEXTCELL 【的pCell】, WORD 【wCount】, char VWPTR 【* pText】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutVarField ----
SOPutVarField輸出變數欄位的資料，並指示是否有更多的資料要輸出的欄位。如果有更多的資料要輸出，則檔解析器必須使用後續調用或調用SOPutMoreVarField函數來輸出資料。VOID SOPutVarField（無效VWPTR 【* pData所】, WORD 【wCount】, WORD 【Address of the data for the variable field.】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutVectorHeader ----
SOPutVectorHeader輸出向量標題，指定顯示解析度，x軸和y軸方向，背景顏色和顏色數值型別（RGB或調色板）。VOID SOPutVectorHeader（PSOVECTORHEADER 【pVectorHeader】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOSetDateBase ----
SOSetDateBase設置基準日期。所有後續日期均計算為基準日期和給定日期值之和。該函數只能從VwStreamSection函式呼叫。VOID SOSetDataBase（DWORD 【dwBaseht】, WORD 【wFlags】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOStartColumnInfo ----
SOStartColumnInfo啟動列資訊的定義。在設置資訊之前，檔解析器必須立即調用此函數。該函數只能從VwStreamSection函式呼叫。VOID SOStartColumnInfo（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOStartFieldInfo ----
SOStartFieldInfo開始欄位資訊的定義。檔解析器在設置欄位資訊之前立即調用此函數。該函數只能從VwStreamSection函式呼叫。VOID SOStartFieldInfo（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOStartFontTable ----
SOStartFontTable啟動字體表的定義。在設置字體條目之前，檔解析器必須立即調用此函數。該函數只能從VwStreamSection函式呼叫。VOID SOStartFontTable（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOStartPalette ----
SOStartPalette啟動調色板的定義。檔解析器在定義調色板條目之前立即調用此函數。VOID SOStartPalette（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOStartTabStops ----
SOStartTabStops開始段落的定位停駐點置的定義。要設置定位停駐點，請使用SOPutTabStop函數。檔解析器在設置段落的第一個選項卡停止之前立即調用此函數。VOID SOStartTabStops（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SoundSentryProc ----
SoundSentryProc    SoundSentryProc函數是一個庫定義的回呼函數，當SoundSentry輔助函數打開時，會產生自訂的視覺信號，而基於Windows的應用程式（或在視窗中運行的非基於Windows的應用程式）通過電腦內置揚聲器。
語法
參數
【dwMillisecel-Latn】指定當基於Windows的應用程式（或在視窗中運行的非基於Windows的應用程式）生成聲音時顯示的視覺信號的持續時間（以毫秒為單位）。【fdwEffe


-------------------------------------------------------- KeyGTK3Win32SOVectorAttr ----
SOVectorAttr設置與繪圖向量圖形物件相關的屬性。VOID SOVectorAttr（INT 【nItemId】, DWORD 【wDataSize】, VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOVectorObject ----
SOVectorObject繪製或定義給定的向量圖形物件。VOID SOVectorObject（INT 【nItemId】, DWORD 【wDataSize】, VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32StartDoc ----
StartDoc    StartDoc函數啟動列印工作。此函數替換STARTDOC印表機轉義。
語法
參數
【HDC】標識列印工作的設備上下文。【LPdi】指向DOCINFO結構，其中包含文檔檔的名稱和輸出檔的名稱。
返回值
如果函數成功，返回值大於零。該值是文檔的列印工作識別字。如果函數


-------------------------------------------------------- KeyGTK3Win32StartDocPrinter ----
StartDocPrinter    StartDocPrinter函數通知列印多工緩衝處理器要將周邊同作文檔進行列印。
語法
參數
【hPrinter】標識印表機。【水準】指定【pDocInfo】指向的結構的版本。對於Windows NT，此值必須為1。對於Windows 95，還可以選擇值2。（見DOC_INFO_2以


-------------------------------------------------------- KeyGTK3Win32StartPage ----
StartPage    StartPage函數準備印表機驅動程式接受資料。
語法
參數
【hDC】標識列印工作的設備上下文。
返回值
如果函數成功，返回值大於零。如果函數失敗，返回值小於或等於零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
系統在Star


-------------------------------------------------------- KeyGTK3Win32StartPagePrinter ----
StartPagePrinter    StartPagePrinter函數通知周邊同作程式頁面即將列印在指定的印表機上。
語法
參數
【hPrinter】識別印表機。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
通過調用OpenPrint


-------------------------------------------------------- KeyGTK3Win32StartService ----
StartService    StartService函數開始執行服務。
語法
參數
【hService】標識服務。該控制碼由OpenService或CreateService函數返回，並且必須具有SERVICE_START存取權限。【dwNumServiceArgs】指定【l


-------------------------------------------------------- KeyGTK3Win32StartServiceCtrlDispatcher ----
StartServiceCtrlDispatcher    StartServiceCtrlDispatcher函數將服務進程的主執行緒連接到服務控制管理器，這將使執行緒成為調用進程的服務控制分派器執行緒。
語法
參數
【lpServiceStartTable】指向SERVICE_TABLE_ENTRY結構的陣列，其中包含可在調用進程中執行的每個服務的一個條目。表中最後一個條目的成員必須具有NULL值來指定


-------------------------------------------------------- KeyGTK3Win32StretchBlt ----
StretchBlt    StretchBlt函數將點陣圖從源矩形複製到目標矩形中，如有必要，可以拉伸或壓縮點陣圖以適應目標矩形的尺寸。Windows根據目標設備上下文中設置的拉伸模式，拉伸或壓縮點陣圖。
語法
參數
【hdcDest】標識目標設備上下文。【nXOriginDest】指定目標矩形左上角的x座標（以邏輯為單位）。【nYOriginDest】指定目標矩形左上角的y座標（以邏輯為單位）。【nWi


-------------------------------------------------------- KeyGTK3Win32StretchDIBits ----
StretchDIBits    StretchDIBits函數將設備無關點陣圖（DIB）中的圖元矩形的顏色資料複製到指定的目標矩形。如果目標矩形大於源矩形，則該函數會拉伸顏色資料的行和列以適合目標矩形。如果目標矩形小於源矩形，則此函數使用指定的柵格操作來壓縮行和列。
語法
參數
【HDC】標識目標設備上下文。【XDest】指定目標矩形左上角的x座標（以邏輯為單位）。【YDest】指定目標矩形左上角的y座標（以邏輯為單位）。【nDestWidth】指定目標矩形的邏輯單


-------------------------------------------------------- KeyGTK3Win32StrokeAndFillPath ----
StrokeAndFillPath    StrokeAndFillPath函數可以關閉路徑中的任何打開的圖形，使用當前筆觸發路徑的輪廓，並使用當前畫筆填充其內部。
語法
參數
【HDC】標識設備上下文。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.GetLastError可能會返回以下錯誤代


-------------------------------------------------------- KeyGTK3Win32StrokePath ----
StrokePath    StrokePath函數通過使用當前筆來呈現指定的路徑。
語法
參數
【HDC】標識包含封閉路徑的設備上下文。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.GetLastError可能會


-------------------------------------------------------- KeyGTK3Win32SubtractRect ----
SubtractRect    SubtractRect函數獲取通過從另一個減去一個矩形確定的矩形的座標。
語法
參數
【lprcDst】指向RECT結構，通過從【lprcSrc1】指向的矩形中減去【lprcSrc2】指向的矩形確定的矩形座標。【lprcSrc1】指向RECT結構，該函數從該結構中減去【lpr


-------------------------------------------------------- KeyGTK3Win32SuspendThread ----
SuspendThread    SuspendThread函數掛起指定的執行緒。
語法
參數
【hThread】標識執行緒。Windows NT：控制碼必須具有THREAD_SUSPEND_RESUME存取權限。有關詳細資訊，請參閱執行緒物件.
返回值
如果函數成功，返回值是執行緒以前的


-------------------------------------------------------- KeyGTK3Win32SUUserPopData ----
SUUserPopData彈出使用者資料。必須先使用SUUserPushData函數推送資料。VOID SUUserPopData（VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SUUserPushData ----
SUUserPushData推送使用者資料。可以使用SUUserPopData函數檢索資料。VOID SUUserPushData（VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SUUserRetrieveData ----
SUUserRetrieveData檢索使用者資料。以前必須使用SUUserSaveData函數保存資料。不應該使用此函數。應該使用SUUserPopData函數。VOID SUUserRetrieveData（WORD 【WINDEX】, VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SUUserSaveData ----
SUUserSaveData保存使用者資料。不應該使用此函數。應該使用SUUserPushData函數。VOID SUUserSaveData（VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SwapMouseButton ----
SwapMouseButton    SwapMouseButton函數可以反轉或恢復滑鼠左鍵和右鍵的含義。
語法
參數
【// reverse or restore buttons】指定滑鼠按鈕的含義是否相反或恢復。如果此參數為TRUE，左側按鈕將生成右鍵消息，右側按鈕會生成左鍵消息。如果此參數為FALSE，


-------------------------------------------------------- KeyGTK3Win32SwitchDesktop ----
SwitchDesktop    SwitchDesktop函數使桌面可見，並啟動它。這使桌面能夠接收用戶的輸入。調用進程必須具有DESKTOP_SWITCHDESKTOP訪問桌面才能使SwitchDesktop函數成功。
語法
參數
【//分配給該執行緒的桌面的控制碼】標識要顯示和啟動的桌面。該控制碼由CreateDesktop和OpenDesktop函數返回。如果桌面屬於不可見視窗台，SwitchDesktop函數將失敗。



-------------------------------------------------------- KeyGTK3Win32SwitchToFiber ----
SwitchToFiber    SwitchToFiber函數調度光纖。
語法
參數
【//指向要刪除的光纖的指標】指定要切換到的光纖的位址。
返回值
此函數不返回值。
描述
SwitchToFiber函數用於手動調度光纖。該函數保存當前光纖的狀態資訊，恢復指定光纖的


-------------------------------------------------------- KeyGTK3Win32SwitchToThread ----
SwitchToThread    [New - Windows NT]SwitchToThread函數導致調用執行緒對另一個準備在當前處理器上運行的執行緒執行執行。作業系統選擇要產生的執行緒。
語法
參數
此函數無參數。
返回值
如果調用SwitchToThread函數導致作業系統將執行切換到另一個執行緒，則返回值不為零。如果沒有其他執行緒準備好執行，則作業系統不會將執行切換到另一個執行緒，並且


-------------------------------------------------------- KeyGTK3Win32SysMsgProc ----
SysMsgProc    SysMsgProc掛接過程是系統在對話方塊，訊息方塊，功能表或捲軸中發生輸入事件之後但在處理輸入事件生成的消息之前調用的庫定義的回呼函數。掛鉤過程可以監視系統中任何對話方塊，訊息方塊，功能表或捲軸的消息。
語法
參數
【NCODE】指定生成消息的輸入事件的類型。此參數可以是以下值之一：值含義MSGF_DIALOGBOX輸入事件發生在訊息方塊或對話方塊中。MSGF_MENU輸入事件發生在功能表中。MSGF_SCR


-------------------------------------------------------- KeyGTK3Win32SystemParametersInfo ----
SystemParametersInfo    SystemParametersInfo函數查詢或設置系統範圍的參數。此函數還可以在設置參數時更新使用者設定檔。
語法
參數
【uiAction】指定要查詢或設置的系統範圍參數。此參數可以是以下值之一：值含義SPI_GETACCESSTIMEOUT檢索與輔助函數相關聯的超時期的資訊。【pvParam】參數必須指向接


-------------------------------------------------------- KeyGTK3Win32SystemTimeToFileTime ----
SystemTimeToFileTime    SystemTimeToFileTime函數將系統時間轉換為檔時間。
語法
參數
【lpSystemTime】指向包含要轉換時間的SYSTEMTIME結構。SYSTEMTIME結構的wDayOfWeek成員將被忽略。【lpFileTime】指向FILETIME結構以接收轉


-------------------------------------------------------- KeyGTK3Win32SystemTimeToTzSpecificLocalTime ----
SystemTimeToTzSpecificLocalTime    SystemTimeToTzSpecificLocalTime函數將協調世界時（UTC）轉換為指定時區的相應本地時間。
語法
參數
【lpTimeZoneInformation】指向TIME_ZONE_INFORMATION結構的指標，指定感興趣的時區。如果【lpTimeZoneInformation】為NULL，則該函


-------------------------------------------------------- KeyGTK3Win32TabbedTextOut ----
TabbedTextOut    TabbedTextOut函數在指定位置寫入一個字串，將定位字元擴展為一個tab-stop位置陣列中指定的值。文本以當前選定的字體編寫。
語法
參數
【hDC】標識設備上下文。【X】以邏輯單位指定字串起始點的x座標。【Y】以邏輯單位指定字串起始點的y座標。【lpString】指向要繪製的字串。字串不需要為零終止，因為【NCOUNT


-------------------------------------------------------- KeyGTK3Win32TerminateProcess ----
TerminateProcess    TerminateProcess函數終止指定的進程及其所有執行緒。
語法
參數
【hProcess】標識要終止的過程。Windows NT：控制碼必須具有PROCESS_TERMINATE存取權限。有關詳細資訊，請參閱過程物件.【uExitCode】指定進程的退出代碼，以


-------------------------------------------------------- KeyGTK3Win32TerminateThread ----
TerminateThread    TerminateThread函數終止執行緒。
語法
參數
【hThread】標識要終止的執行緒。Windows NT：控制碼必須具有THREAD_TERMINATE存取權限。有關詳細資訊，請參閱執行緒物件.【dwExitCode】指定執行緒的退出代碼。使用


-------------------------------------------------------- KeyGTK3Win32TextOut ----
TextOut    TextOut函數使用當前選定的字體在指定的位置寫入一個字串。
語法
參數
【HDC】標識設備上下文。【nXStart】指定Windows用於對齊字串的參考點的邏輯x座標。【nYStart】指定Windows用於對齊字串的參考點的邏輯y座標。【lpString】


-------------------------------------------------------- KeyGTK3Win32TileWindows ----
TileWindows    [Now Supported on Windows NT]TileWindows函數將分配指定的視窗或指定父視窗的子視窗。
語法
參數
【hwndParent】標識父視窗。如果此參數為NULL，則假定桌面視窗。【wHow】指定不排列的視窗類型，以及是垂直還是水平平鋪。該參數可以是與CascadeWindows函數列出的零個或


-------------------------------------------------------- KeyGTK3Win32TimerProc ----
TimerProc    TimerProc函數是一個應用程式定義的回呼函數，用於處理WM_TIMER消息。
語法
參數
【HWND】標識與計時器相關聯的窗口。【uMsg】指定WM_TIMER消息。【IdEvent】指定計時器的識別字。【dwTime】指定自Windows啟動以來經過的毫秒數。這是GetTick


-------------------------------------------------------- KeyGTK3Win32TlsAlloc ----
TlsAlloc    TlsAlloc函數分配執行緒本機存放區（TLS）索引。該進程的任何執行緒隨後可以使用此索引來存儲和檢索執行緒本地的值。
語法
參數
此函數無參數。
返回值
如果函數成功，則返回值為TLS索引。如果函數失敗，返回值為0xFFFFFFFF。要獲取擴展錯誤資訊，請調用GetLastError.
描述
進程的執行緒可以在後


-------------------------------------------------------- KeyGTK3Win32TlsFree ----
TlsFree    TlsFree函數釋放執行緒本機存放區（TLS）索引，使其可重用。
語法
參數
【dwTlsIndex】指定由TlsAlloc函數分配的TLS索引。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32TlsGetValue ----
TlsGetValue    TlsGetValue函數檢索調用執行緒的執行緒本機存放區（TLS）插槽中指定TLS索引的值。進程的每個執行緒都有自己的每個TLS索引的插槽。
語法
參數
【dwTlsIndex】指定由TlsAlloc函數分配的TLS索引。
返回值
如果函數成功，則返回值是存儲在與指定索引關聯的調用執行緒的TLS插槽中的值。如果函數失敗，返回值為零。要獲取擴


-------------------------------------------------------- KeyGTK3Win32TlsSetValue ----
TlsSetValue    TlsSetValue函數在調用執行緒的執行緒本機存放區（TLS）插槽中存儲指定TLS索引的值。進程的每個執行緒都有自己的每個TLS索引的插槽。
語法
參數
【dwTlsIndex】指定由TlsAlloc函數分配的TLS索引。【lpTlsValue】指定要存儲在由【dwTlsIndex】指定的調用執行緒的TLS插槽中的值。
返回值
如果函數成功


-------------------------------------------------------- KeyGTK3Win32ToAscii ----
ToAscii    ToAscii函數將指定的虛擬鍵代碼和鍵盤狀態轉換為相應的Windows字元或字元。該函數使用由給定的鍵盤配置控制碼標識的輸入語言和物理鍵盤配置來轉換代碼。
語法
參數
【uVirtKey】指定要翻譯的虛擬鍵代碼。【uScanCode】指定要翻譯的鍵的硬體掃描代碼。如果鍵已經起作用（未按下），則該值的高位被置位元。【lpKeyState】指向包含當前鍵盤狀態的


-------------------------------------------------------- KeyGTK3Win32ToAsciiEx ----
ToAsciiEx    [Now Supported on Windows NT]ToAsciiEx函數將指定的虛擬鍵代碼和鍵盤狀態轉換為相應的Windows字元或字元。該函數使用由給定的鍵盤配置控制碼標識的輸入語言和物理鍵盤配置來轉換代碼。
語法
參數
【uVirtKey】指定要翻譯的虛擬鍵代碼。【uScanCode】指定要翻譯的鍵的硬體掃描代碼。如果鍵已經起作用（未按下），則該值的高位被置位元。【lpKeyState】指向包含當前鍵盤狀態的


-------------------------------------------------------- KeyGTK3Win32ToUnicode ----
ToUnicode    ToUnicode函數將指定的虛擬鍵代碼和鍵盤狀態轉換為相應的Unicode字元或字元。
語法
參數
【wVirtKey】指定要翻譯的虛擬鍵代碼。【wScanCode】指定要翻譯的鍵的硬體掃描代碼。該鍵的高位被設置為鍵。【lpKeyState】指向包含當前鍵盤狀態的256位元組陣列。陣列中的每


-------------------------------------------------------- KeyGTK3Win32ToUnicodeEx ----
ToUnicodeExToUnicodeEx函數將指定的虛擬鍵代碼和鍵盤狀態轉換為相應的Unicode字元或字元。
語法
參數
【wVirtKey】指定要翻譯的虛擬鍵代碼。【wScanCode】指定要翻譯的鍵的硬體掃描代碼。該鍵的高位被設置為鍵。【lpKeyState】指向包含當前鍵盤狀態的256位元組陣列。陣列中的每


-------------------------------------------------------- KeyGTK3Win32TrackMouseEvent ----
TrackMouseEvent    [New - Windows NT]當滑鼠指標離開視窗或者在視窗上懸停指定的時間時，TrackMouseEvent函數會發佈消息。
語法
參數
【lpEventTrack】指向TRACKMOUSEEVENT結構。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.函


-------------------------------------------------------- KeyGTK3Win32TrackPopupMenu ----
TrackPopupMenu    TrackPopupMenu函數在指定位置顯示快顯功能表，並跟蹤功能表中專案的選擇。快顯功能表可以出現在螢幕上的任何地方。
語法
參數
【HMENU】標識要顯示的快顯功能表。可以通過調用CreatePopupMenu創建新的快顯功能表或通過調用GetSubMenu來檢索與現有功能表項目相關聯的子功能表的控制碼來獲取控制碼。【uFlags】


-------------------------------------------------------- KeyGTK3Win32TrackPopupMenuEx ----
TrackPopupMenuEx    [Now Supported on Windows NT]TrackPopupMenuEx函數在指定位置顯示快顯功能表，並跟蹤快顯功能表上項目的選擇。快顯功能表可以出現在螢幕上的任何地方。
語法
參數
【HMENU】手柄到要顯示的快顯功能表。可以通過調用CreatePopupMenu函數創建新的快顯功能表或通過調用GetSubMenu函數來檢索與現有功能表項目相關聯的子功能表的控制碼來獲取該控制碼。【f


-------------------------------------------------------- KeyGTK3Win32TransactNamedPipe ----
TransactNamedPipe    TransactNamedPipe函數將單個網路操作組合到從指定的具名管道寫入消息並從其讀取消息的函數。
語法
參數
【hNamedPipe】標識CreateNamedPipe或CreateFile函數返回的具名管道。【lpInBuffer】指向包含寫入管道的資料的緩衝區。【nInBufferSize】指定


-------------------------------------------------------- KeyGTK3Win32TranslateAccelerator ----
TranslateAccelerator    TranslateAccelerator函數處理功能表命令的快速鍵。該函數將WM_KEYDOWN或WM_SYSKEYDOWN消息轉換為WM_COMMAND或WM_SYSCOMMAND消息（如果在指定的加速器表中有金鑰條目），然後將WM_COMMAND或WM_SYSCOMMAND消息直接發送到相應的視窗程式。TranslateAccelerator不會返回，直到視窗過程處理消息。
語法
參數
【的hWnd】標識要翻譯其消息的視窗。【hAccTable】標識一個加速器表。加速表必須通過調用LoadAccelerators函數載入，或者通過調用CreateAcceleratorTab


-------------------------------------------------------- KeyGTK3Win32TranslateCharsetInfo ----
TranslateCharsetInfo    [Now Supported on Windows NT]TranslateCharsetInfo函數基於指定的字元集，內碼表或字體簽名值進行轉換，將目標結構的所有成員設置為適當的值。
語法
參數
【lpSrc】由【dwFlags中】參數定義的地址或值。如果【dwFlags中】為TCI_SRCFONTSIG，則此參數為FONTSIGNATURE結構fsCsb成員的位址。否則，此參數是3


-------------------------------------------------------- KeyGTK3Win32TranslateMDISysAccel ----
TranslateMDISysAccel    TranslateMDISysAccel函數處理與指定的MDI客戶機視窗相關聯的多重文件介面（MDI）子視窗的視窗功能表命令的快速鍵擊。該函數將WM_KEYUP和WM_KEYDOWN消息轉換為WM_SYSCOMMAND消息，並將其發送到相應的MDI子窗口。
語法
參數
【hWndClient】標識MDI用戶端視窗。【LPMSG】指向使用GetMessage或PeekMessage函數檢索到的郵件。消息必須是MSG結構，並包含應用程式訊息佇列中的消息資訊。



-------------------------------------------------------- KeyGTK3Win32TranslateMessage ----
TranslateMessage    TranslateMessage函數將虛擬鍵消息轉換為字元消息。字元消息被發佈到調用執行緒的訊息佇列中，以便下次執行緒調用GetMessage或PeekMessage函數時被讀取。
語法
參數
【LPMSG】指向MSG結構，其中包含使用GetMessage或PeekMessage函數從調用執行緒的訊息佇列中檢索的消息資訊。
返回值
如果消息被翻譯（即，字元消息被發佈到執行緒的消息隊


-------------------------------------------------------- KeyGTK3Win32TransmitCommChar ----
TransmitCommChar    TransmitCommChar函數在指定通信設備的輸出緩衝區中的任何待處理資料之前傳送指定的字元。
語法
參數
【HFILE】識別通信設備。CreateFile函數返回此控制碼。【灰燼】指定要發送的字元。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用Get


-------------------------------------------------------- KeyGTK3Win32TryEnterCriticalSection ----
TryEnterCriticalSection    [New - Windows NT]TryEnterCriticalSection函數嘗試在不阻止的情況下輸入關鍵部分。如果呼叫成功，呼叫執行緒將獲得關鍵部分的所有權。
語法
參數
【lpCriticalSection】指定臨界區對象。
返回值
如果關鍵部分成功輸入或當前執行緒已經擁有關鍵部分，則返回值不為零。如果另一個執行緒已經擁有關鍵部分，則返回值為零。
描述



-------------------------------------------------------- KeyGTK3Win32UInt32x32To64 ----
UInt32x32To64    UInt32x32To64函數將兩個無符號32位元整數相乘，返回一個無符號的64位元整數結果。該函數在所有Win32平臺上執行最佳。
語法
參數
【乘數】指定乘法的第一個無符號32位元整數。【被乘數】指定乘法的第二個無符號32位元整數。
返回值
返回值是乘法的無符號64位元整數結果。
描述
該函數通過最佳內聯代碼在所有平臺上實現：單


-------------------------------------------------------- KeyGTK3Win32UndeleteFile ----
UndeleteFile  UndeleteFile函數是一個應用程式定義的回呼函數，當用戶從“檔案管理員檔”功能表中選擇“取消刪除”命令時，檔案管理員將調用該函數。
語法



-------------------------------------------------------- KeyGTK3Win32UnhandledExceptionFilter ----
UnhandledExceptionFilter    如果進程被調試，UnhandledExceptionFilter函數將未處理的異常傳遞給調試器。否則，它可選地顯示一個應用程式錯誤訊息方塊，並導致例外處理常式被執行。只能從嘗試  -  除例外處理常式的篩檢程式運算式中調用此函數。
語法
參數
【ExceptionInfo】指向EXCEPTION_POINTERS結構，其中包含異常描述和異常時的處理器上下文。該指標是調用GetExceptionInformation函數的返回值。



-------------------------------------------------------- KeyGTK3Win32UnhookWindowsHook ----
UnhookWindowsHook  UnhookWindowsHook函數已過時，但提供與16位版本Windows的相容性。對於基於Win32的應用程式，請使用UnhookWindowsHookEx函數。


-------------------------------------------------------- KeyGTK3Win32UnhookWindowsHookEx ----
UnhookWindowsHookEx    UnhookWindowsHookEx函數通過SetWindowsHookEx函數刪除掛鉤鏈中安裝的鉤子過程。
語法
參數
【HHK】標識要刪除的鉤子。此參數是通過先前調用SetWindowsHookEx獲得的鉤子控制碼。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。
描述
即使在Unho


-------------------------------------------------------- KeyGTK3Win32UnionRect ----
UnionRect    UnionRect函數創建兩個矩形的並集。聯合是包含兩個源矩形的最小矩形。
語法
參數
【lprcDst】指向RECT結構的接收包含【lprcSrc1】和【lprcSrc2】參數指向的矩形的矩形。【lprcSrc1】指向包含第一個源矩形的RECT結構。【lprcSrc2】指向包


-------------------------------------------------------- KeyGTK3Win32UnloadKeyboardLayout ----
UnloadKeyboardLayout    UnloadKeyboardLayout函數刪除鍵盤配置。
語法
參數
【HKL】標識要卸載的鍵盤配置。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。該函數可能失敗，原因如下：*傳遞了無效的鍵盤配置控制碼。*佈局預載入。*佈局正在使用中。



-------------------------------------------------------- KeyGTK3Win32UnlockFile ----
UnlockFile    UnlockFile函數解鎖打開檔中的區域。解鎖區域使其他進程可以訪問該區域。
語法
參數
【HFILE】標識包含用LockFile鎖定的區域的檔。必須使用GENERIC_READ或GENERIC_WRITE訪問該檔創建檔案控制代碼。【dwFileOffsetLow】指定鎖定區域開


-------------------------------------------------------- KeyGTK3Win32UnlockFileEx ----
UnlockFileEx    UnlockFileEx函數解鎖了打開檔中之前鎖定的位元組範圍。
語法
參數
【HFILE】標識要將現有鎖定區域解鎖的檔的打開控制碼。必須使用GENERIC_READ或GENERIC_WRITE訪問該檔創建控制碼。【//保留，必須設置為零】Reserved param


-------------------------------------------------------- KeyGTK3Win32UnlockResource ----
UnlockResource  UnlockResource函數已過時。此函數僅用於與16位元版本的Windows相容。基於Win32的應用程式不需要解鎖資源。
另請參見
LoadResource, LockResource


-------------------------------------------------------- KeyGTK3Win32UnlockSegment ----
UnlockSegment  UnlockSegment函數已過時。此函數僅用於與16位元版本的Windows相容。段在32位環境中沒有任何意義。


-------------------------------------------------------- KeyGTK3Win32UnlockServiceDatabase ----
UnlockServiceDatabase    UnlockServiceDatabase函數通過釋放指定的鎖來解鎖服務控制管理器資料庫。
語法
參數
【ScLock】指定從以前調用LockServiceDatabase函數獲取的鎖。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLast


-------------------------------------------------------- KeyGTK3Win32UnmapViewOfFile ----
UnmapViewOfFile    UnmapViewOfFile函數從調用進程的位址空間中解除映射的文件映射。
語法
參數
【lpBaseAddress】指向要解映射的文件的映射視圖的基址。該值必須與先前調用MapViewOfFile或MapViewOfFileEx函數返回的值相同。
返回值
如果函數成功，則


-------------------------------------------------------- KeyGTK3Win32UnpackDDElParam ----
UnpackDDElParam    UnpackDDElParam函數將從發佈的DDE消息中收到的DDE 【lParam的】值進行解包。
語法
參數
【味精】指定發佈的DDE消息。【lParam的】指定已發送的DDE消息的【lParam的】參數。應用程式必須通過調用FreeDDElParam函數來釋放【lParam的】參數指定的記憶體物件。


-------------------------------------------------------- KeyGTK3Win32UnrealizeObject ----
UnrealizeObject    UnrealizeObject函數重置邏輯調色板。它指示系統實現調色板，就好像它以前沒有被實現一樣。下一次應用程式調用指定調色板的RealizePalette函數時，系統會將邏輯調色板完全重新映射到系統調色板。如果【hgdiobj】是一個畫筆，UnrealizeObject什麼也不做，該函數返回TRUE。使用SetBrushOrgEx設置畫筆的原點。
語法
參數
【hgdiobj】標識要重置的邏輯調色板。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
Unrealiz


-------------------------------------------------------- KeyGTK3Win32UnregisterClass ----
UnregisterClass    UnregisterClass函數刪除一個視窗類，釋放該類所需的記憶體。
語法
參數
【lpClassName】指向一個空值終止的字串或是一個整數原子。如果此參數是整數原子，則它必須是由先前調用GlobalAddAtom函數創建的全域原子。原子，小於0xC000的16位值必


-------------------------------------------------------- KeyGTK3Win32UnregisterHotKey ----
UnregisterHotKey    UnregisterHotKey函數釋放先前由調用執行緒註冊的熱鍵。
語法
參數
【的hWnd】標識與要釋放的熱鍵相關聯的窗口。如果熱鍵不與視窗相關聯，則該參數應為NULL。【id】指定要釋放的熱鍵的識別字。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為


-------------------------------------------------------- KeyGTK3Win32UpdateColors ----
UpdateColors    UpdateColors函數通過將客戶區中的使用中色彩重新映射到當前實現的邏輯調色板來更新指定設備上下文的客戶區。
語法
參數
【HDC】標識設備上下文。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.
描述
應用程式可以通過調用GetDev


-------------------------------------------------------- KeyGTK3Win32UpdateICMRegKey ----
UpdateICMRegKey    UpdateICMRegKey函數安裝，刪除或查詢標識ICC色彩設定檔或顏色匹配DLL的註冊表項。該函數執行【nCommand】參數指定的動作。
語法
參數
【//保留，必須設置為零】Reserved; must be zero.【CMID】要與設定檔一起使用的顏色匹配DLL的設定檔識別字。【lpszFileName】指向根據【nComman


-------------------------------------------------------- KeyGTK3Win32UpdateResource ----
UpdateResource    UpdateResource函數添加，刪除或替換可執行檔中的資源。
語法
參數
【更新】指定一個更新檔案控制代碼。該控制碼由BeginUpdateResource函數返回。【//數值型別緩衝區的位址】指向要終止的字串，指定要更新的資源類型。此參數也可以是傳遞給MAKEINTR


-------------------------------------------------------- KeyGTK3Win32UpdateWindow ----
UpdateWindow    如果視窗的更新區域不為空，則UpdateWindow函數通過向視窗發送WM_PAINT消息來更新指定視窗的客戶區。該函數將WM_PAINT消息直接發送到指定視窗的視窗過程，繞過應用程式佇列。如果更新區域為空，則不會發送任何消息。
語法
參數
【的hWnd】標識要更新的視窗。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。



-------------------------------------------------------- KeyGTK3Win32ValidateRect ----
ValidateRect    ValidateRect函數通過從指定視窗的更新區域中移除矩形來驗證矩形內的客戶區。
語法
參數
【的hWnd】標識要更新其更新區域的視窗。如果此參數為NULL，Windows將無效並重新繪製所有視窗，並在函數返回之前將WM_ERASEBKGND和WM_NCPAINT消息發送到視窗過程。


-------------------------------------------------------- KeyGTK3Win32ValidateRgn ----
ValidateRgn    ValidateRgn函數通過從指定視窗的當前更新區域中刪除區域來驗證區域內的客戶區。
語法
參數
【的hWnd】標識要更新其更新區域的視窗。【HRGN】標識定義要從更新區域中刪除的區域的區域。如果此參數為NULL，則將刪除整個客戶機區域。
返回值
如果函數成功，返回值不為零。如果函數


-------------------------------------------------------- KeyGTK3Win32VerFindFile ----
VerFindFile    根據是否在系統中找到檔的另一個版本，VerFindFile函數決定了在哪裡安裝檔。指定緩衝區中的值VerFindFile返回值將用於後續調用VerInstallFile.與其他檔安裝函數一樣，VerFindFile只能與Win32檔映射配合使用。不支援16位Windows檔映射。
語法
參數
【dwFlags中】包含一個標誌的位元遮罩。該參數可以是以下值：旗描述VFFF_ISSHAREDFILE原始檔案可以由多個應用程式共用。應用程式可以使用此資訊來確定檔應在哪裡複製。
所有其他


-------------------------------------------------------- KeyGTK3Win32VerInstallFile ----
VerInstallFile    VerInstallFile函數根據VerFindFile函數返回的資訊嘗試安裝指定的檔。VerInstallFile解壓縮檔，如有必要，分配唯一的檔案名，並檢查錯誤，如過時的檔。與其他檔安裝函數一樣，VerInstallFile只能與Win32檔映射配合使用。不支援16位Windows檔映射。
語法
參數
【uFlags】包含一個標誌的位元遮罩。此參數可以是以下值之一：旗描述VIFF_FORCEINSTALL安裝檔，不管版本號不一致。該函數僅在安裝過程中檢查物理錯誤。VIFF_DONTDELE


-------------------------------------------------------- KeyGTK3Win32VerLanguageName ----
VerLanguageName    VerLanguageName函數檢索與指定的二進位Microsoft語言識別字相關聯的語言的描述字串。
語法
參數
【wLang】指定二進位Microsoft語言識別字。有關Win32支援的語言識別字的完整清單，請參閱語言識別字.例如，與語言識別字0x040A相關聯的描述字串是“西班牙語（傳統排序）”。


-------------------------------------------------------- KeyGTK3Win32VerQueryValue ----
VerQueryValue    VerQueryValue函數從指定的版本資訊資源返回所選版本資訊。要檢索相應的資源，必須在VerQueryValue之前調用GetFileVersionInfo函數。與其他檔安裝函數一樣，VerQueryValue只能與Win32檔映射配合使用。不支援16位Windows檔映射。
語法
參數
【pBlock】指向包含GetFileVersionInfo返回的版本資訊資源的緩衝區。【lpSubBlock】指向一個零終止的字串，指定要檢索的版本資訊值。字串由以反斜線（\\）分隔的


-------------------------------------------------------- KeyGTK3Win32VirtualAlloc ----
VirtualAlloc    VirtualAlloc函數在調用進程的虛擬位址空間中保留或提交一個頁面區域。由此函數分配的記憶體將自動初始化為零。
語法
參數
【lpAddress】指定要分配的區域的所需起始位址。如果正在保留記憶體，則指定的位址將舍入到下一個64千位元組的邊界。如果記憶體已經被保留並被提交，位址被向下舍入到下一頁邊界。要確定主機上頁面


-------------------------------------------------------- KeyGTK3Win32VirtualAllocEx ----
VirtualAllocEx    [New - Windows NT]VirtualAllocEx函數在指定進程的虛擬位址空間中保留，提交或同時存儲記憶體區域。該函數初始化其分配給零的記憶體。
語法
參數
【hProcess】處理過程。該函數在該進程的虛擬位址空間內分配記憶體。您必須具有PROCESS_VM_OPERATION存取權限。如果沒有，則該函數失敗。【lpAddress】指針，指定要分


-------------------------------------------------------- KeyGTK3Win32VirtualFree ----
VirtualFree    VirtualFree函數在調用進程的虛擬位址空間中釋放或分解（或兩者）一個頁面的區域。
語法
參數
【lpAddress】指向要釋放的頁面的基底位址。如果【dwFreeType】參數包含MEM_RELEASE標誌，則當該頁面被保留時，此參數必須是VirtualAlloc函數返回的基址。【的d


-------------------------------------------------------- KeyGTK3Win32VirtualFreeEx ----
VirtualFreeEx    [New - Windows NT]VirtualFreeEx函數在指定進程的虛擬位址空間內釋放，分解或同時釋放記憶體區域。
語法
參數
【hProcess】處理過程。該函數釋放此進程的虛擬位址空間記憶體。您必須具有此進程的PROCESS_VM_OPERATION許可權。如果沒有，則該函數失敗。【lpAddress】指向要釋放的內


-------------------------------------------------------- KeyGTK3Win32VirtualLock ----
VirtualLock    VirtualLock函數將進程的虛擬位址空間的指定區域鎖定到記憶體中，確保對該區域的後續訪問不會導致分頁錯誤。
語法
參數
【lpAddress】指向要鎖定的頁面的基底位址。【的dwSize】指定要鎖定的區域的大小（以位元組為單位）。受影響頁面的所有頁面包含從【lpAddress】參數到（【lpAddress】 + 


-------------------------------------------------------- KeyGTK3Win32VirtualProtect ----
VirtualProtect    VirtualProtect函數可以更改調用進程虛擬位址空間中已提交頁面的訪問保護。此函數不同於VirtualProtectEx ,，它會更改任何進程的訪問保護。
語法
參數
【lpAddress】指向要更改其訪問保護屬性的頁面區域的基址。必須在VirtualAlloc或VirtualAllocEx函數的一次調用中分配指定區域中的所有頁面。這些頁面不能跨越通過單獨


-------------------------------------------------------- KeyGTK3Win32VirtualProtectEx ----
VirtualProtectEx    VirtualProtectEx函數可以更改指定進程的虛擬位址空間中已提交頁面區域的訪問保護。請注意，此函數與VirtualProtect不同，只會調用調用進程的訪問保護。
語法
參數
【hProcess】標識要更改其記憶體保護的進程。控制碼必須具有PROCESS_VM_OPERATION許可權。有關PROCESS_VM_OPERATION的更多資訊，請參閱OpenProcess


-------------------------------------------------------- KeyGTK3Win32VirtualQuery ----
VirtualQuery    VirtualQuery函數提供有關調用進程的虛擬位址空間中的一系列頁面的資訊。
語法
參數
【lpAddress】指向要查詢的頁面的基底位址。該值向下舍入到下一頁邊界。要確定主機上的頁面大小，請使用GetSystemInfo函數。【lpBuffer】指向MEMORY_BASIC_IN


-------------------------------------------------------- KeyGTK3Win32VirtualQueryEx ----
VirtualQueryEx    VirtualQueryEx函數提供有關指定進程的虛擬位址空間內的一系列頁面的資訊。
語法
參數
【hProcess】標識查詢其記憶體資訊的進程。控制碼必須具有PROCESS_QUERY_INFORMATION許可權。【lpAddress】指向要查詢的頁面的基底位址。該值向下舍入到下一頁邊界。要


-------------------------------------------------------- KeyGTK3Win32VirtualUnlock ----
VirtualUnlock    VirtualUnlock函數解鎖進程的虛擬位址空間中的指定範圍的頁面，如果需要，系統可以將頁面切換到分頁檔。
語法
參數
【lpAddress】指向要解鎖的頁面的基底位址。【的dwSize】指定要解鎖的區域的大小（以位元組為單位）。受影響頁面的區域包括從【lpAddress】參數到（【lpAddress】 + 【的


-------------------------------------------------------- KeyGTK3Win32VkKeyScan ----
VkKeyScan    VkKeyScan函數將字元轉換為當前鍵盤的相應虛擬鍵代碼和移位元狀態。
語法
參數
【ch】指定要轉換為虛擬鍵代碼的字元。
返回值
如果函數成功，返回值的低位元位元組包含虛擬鍵代碼，高位位元組包含移位元狀態，它可以是以下標誌位元的組合：位含義1按SHIFT鍵。2按住CTRL鍵。4


-------------------------------------------------------- KeyGTK3Win32VkKeyScanEx ----
VkKeyScanEx    [Now Supported on Windows NT]VkKeyScanEx函數將字元轉換為相應的虛擬鍵代碼和移位元狀態。該函數使用由給定的鍵盤配置控制碼標識的輸入語言和物理鍵盤配置來翻譯字元。
語法
參數
【ch】指定要轉換為虛擬鍵代碼的字元。【dwhkl】標識用於翻譯字元的鍵盤配置。此參數可以是以前由LoadKeyboardLayout函數返回的任何鍵盤配置控制碼。
返回值
如果函數成功，


-------------------------------------------------------- KeyGTK3Win32VwStreamCloseFunc ----
VwStreamCloseFunc關閉文件。檔解析器必須執行任何必要的清理，例如關閉與給定檔相關的任何其他打開的文件。VOID VwStreamCloseFunc（SOFILE 【HFILE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32VwStreamOpenFunc ----
VwStreamOpenFunc檢查指定文件的有效性並返回有關檔解析器的資訊。INT VwStreamOpenFunc（SOFILE 【HFILE】, INT 【wFileId】, U_BYTE VWPTR 【*pFileName】, SOFILTERINFO VWPTR 【*pFilterInfo】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32VwStreamReadFunc ----
VwStreamReadFunc根據當前部分類型和檔內容輸出字元，儲存格或欄位。INT VwStreamReadFunc（SOFILE 【HFILE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32VwStreamReadRecordFunc ----
VwStreamReadRecordFunc通過調用各種流輸出函數輸出單個記錄。此函數應輸出單個記錄，然後在返回之前使用SO_RECORDBREAK值調用SOPutBreak函數。SO_EOFBREAK和SO_SECTIONBREAK條件不需要被此函數所困擾。VOID VwStreamReadRecordFunc（SOFILE 【HFILE】, DWORD 【dwDatacy】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32VwStreamSectionFunc ----
VwStreamSectionFunc設置部分的參數。至少這個函數應該調用SOPutSectionType和SOPutSectionName函數來設置段類型和名稱。如果該部分是試算表，則該函數還應設置儲存格寬度，如果該部分是資料庫，則也應該設置欄位格式。顯示引擎在調用VwStreamOpenFunc函數後調用VwStreamReadFunc函數之前調用該函數。在任何VwStreamReadFunc結束後，還會調用具有SO_SECTIONBREAK值的SOPutBreak函數。INT VwStreamSectionFunc（SOFILE 【HFILE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32VwStreamSeekFunc ----
VwStreamSeekFunc與線路濾波器相同的定義搜索函數。INT VwStreamSeekFunc（SOFILE 【HFILE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32VwStreamTellFunc ----
VwStreamTellFunc與線路濾波器相同的定義告訴函數。INT VwStreamTellFunc（SOFILE 【HFILE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32WaitCommEvent ----
WaitCommEvent    WaitCommEvent函數等待指定通信設備發生事件。由該函數監視的事件集包含在與設備控制碼相關聯的事件遮罩中。
語法
參數
【HFILE】識別通信設備。CreateFile函數返回此控制碼。【lpEvtMask】指向一個32位元變數，接收一個指示發生的事件類型的遮罩。如果發生錯誤，則該值為零;否則，它是以下值之一：值


-------------------------------------------------------- KeyGTK3Win32WaitForDebugEvent ----
WaitForDebugEvent    WaitForDebugEvent函數等待調試事件發生在被調試的進程中。
語法
參數
【lpDebugEvent】指向DEBUG_EVENT結構，其中填寫有關調試事件的資訊。【dwMilliseconds】指定等待調試事件的毫秒數。如果此參數為零，該函數將測試調試事件並立即返


-------------------------------------------------------- KeyGTK3Win32WaitForInputIdle ----
WaitForInputIdle    WaitForInputIdle函數等待直到給定進程正在等待使用者輸入，沒有輸入掛起，或直到超時間隔過去。
語法
參數
【hProcess】標識過程。【dwMilliseconds】指定超時間隔（以毫秒為單位）。如果【dwMilliseconds】為INFINITE，該函數在進程空閒之前不會返回。
返回值



-------------------------------------------------------- KeyGTK3Win32WaitForMultipleObjects ----
WaitForMultipleObjects    當發生以下其中一種情況時，WaitForMultipleObjects函數返回：*任何一個或所有指定的物件都處於信號狀態。*經過了超時間隔。
語法
參數
【NCOUNT】指定【lpHandles】指向的陣列中的物件控制碼數。物件控制碼的最大數量為MAXIMUM_WAIT_OBJECTS。【lpHandles】指向一組對象控制碼。有關可以指定控制碼的對


-------------------------------------------------------- KeyGTK3Win32WaitForMultipleObjectsEx ----
WaitForMultipleObjectsEx    當發生以下其中一種情況時，WaitForMultipleObjectsEx函數返回：*任何一個或所有指定的物件都處於信號狀態。* I / O完成常式或非同步程序呼叫（APC）排隊等待中的執行緒。*經過了超時間隔。
語法
參數
【NCOUNT】指定在【lpHandles】指向的陣列中等待的物件控制碼數。物件控制碼的最大數量為MAXIMUM_WAIT_OBJECTS。【lpHandles】指向一組對象控制碼。有關可以指定句


-------------------------------------------------------- KeyGTK3Win32WaitForPrinterChange ----
WaitForPrinterChange  WaitForPrinterChange函數已過時。此函數僅用於與16位元版本的Windows相容。在印表機或印表伺服器上發生一個或多個請求的更改時，基於Win32的應用程式應使用FindFirstPrinterChangeNotification，FindNextPrinterChangeNotification和FindClosePrinterChangeNotification函數來監視印表機或印表伺服器上發生的請求的更改。


-------------------------------------------------------- KeyGTK3Win32WaitForSingleObject ----
WaitForSingleObject    當發生以下其中一種情況時，WaitForSingleObject函數返回：*指定的物件處於信號狀態。*經過了超時間隔。
語法
參數
【hHandle】標識物件。有關可以指定控制碼的物件類型的清單，請參閱以下備註部分。Windows NT：控制碼必須具有SYNCHRONIZE存取權限。有關詳細資訊，請參閱存取遮罩和存取權限.【


-------------------------------------------------------- KeyGTK3Win32WaitForSingleObjectEx ----
WaitForSingleObjectEx    當發生以下其中一種情況時，WaitForSingleObjectEx函數返回：*指定的物件處於信號狀態。* I / O完成常式或非同步程序呼叫（APC）排隊等待中的執行緒。*經過了超時間隔。
語法
參數
【hHandle】標識物件。有關可以指定控制碼的物件類型的清單，請參閱以下備註部分。Windows NT：控制碼必須具有SYNCHRONIZE存取權限。有關詳細資訊，請參閱存取遮罩和存取權限.【


-------------------------------------------------------- KeyGTK3Win32WaitMessage ----
WaitMessage    當執行緒在其訊息佇列中沒有其他消息時，WaitMessage函數可以控制其他執行緒。WaitMessage函數暫停執行緒，直到新消息被放置在執行緒的訊息佇列中才會返回。
語法
參數
此函數無參數。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.



-------------------------------------------------------- KeyGTK3Win32WaitNamedPipe ----
WaitNamedPipe    WaitNamedPipe函數等待直到超時間隔或指定的具名管道的實例可用於連接（即，管道的伺服器進程在管道上具有待處理的ConnectNamedPipe操作）。
語法
參數
【lpNamedPipeName】指向一個以空字元結尾的字串，指定具名管道的名稱。字串必須包含伺服器進程正在執行的電腦的名稱。如果管道是本地的，則可以使用【伺服器名稱】的時間段。使用以


-------------------------------------------------------- KeyGTK3Win32WideCharToMultiByte ----
WideCharToMultiByte    WideCharToMultiByte函數將寬字元字串映射到新的字串。新的字串不一定來自多位元組字元集。
語法
參數
【CodePage】指定用於執行轉換的內碼表。該參數可以被賦予在系統中安裝或可用的任何內碼表的值。以下值可用於指定系統預設內碼表之一：值含義CP_ACPANSI內碼表CP_MACCPMaci


-------------------------------------------------------- KeyGTK3Win32WidenPath ----
WidenPath    WidenPath函數將當前路徑重新定義為要使用當前選定的筆在指定設備上下文中繪製路徑時繪製的區域。
語法
參數
【HDC】標識包含封閉路徑的設備上下文。
返回值
如果函數成功，返回值不為零。如果函數失敗，返回值為零。要獲取擴展錯誤資訊，請調用GetLastError.GetLastError可能會


-------------------------------------------------------- KeyGTK3Win32WindowFromDC ----
WindowFromDC    WindowFromDC函數返回與給定顯示裝置上下文（DC）關聯的窗口的控制碼。使用給定設備上下文的輸出函數繪製到此視窗中。
語法
參數
【hDC】標識要檢索關聯視窗的控制碼的設備上下文。
返回值
如果函數成功，則返回值是與給定顯示裝置上下文相關聯的窗口的控制碼。如果函數失敗，返回值為NULL。



-------------------------------------------------------- KeyGTK3Win32WindowFromPoint ----
WindowFromPoint    WindowFromPoint函數檢索包含指定點的視窗的控制碼。
語法
參數
【點】指定一個定義要檢查點的POINT結構。
返回值
如果函數成功，則返回值是包含該點的窗口的控制碼。如果給定點沒有視窗，則返回值為NULL。
描述
即使該點在窗口內，WindowFr


-------------------------------------------------------- KeyGTK3Win32WindowProc ----
WindowProc    WindowProc函數是一個應用程式定義的回呼函數，用於處理發送到視窗的消息。
語法
參數
【HWND】標識視窗。【uMsg】指定消息。【wParam中】指定附加消息資訊。該參數的內容取決於【uMsg】參數的值。【lParam的】指定附加消息資訊。該參數的內容取決於【uMsg】參數


-------------------------------------------------------- KeyGTK3Win32WinExec ----
WinExec    WinExec函數運行指定的應用程式。提供此函數以相容早期版本的Windows。對於基於Win32的應用程式，請使用CreateProcess函數。
語法
參數
【lpCmdLine】指向包含要執行的應用程式的命令列（filename加上可選參數）的以null結尾的字串。如果【lpCmdLine】參數中的可執行檔的名稱不包含目錄路徑，Window


-------------------------------------------------------- KeyGTK3Win32WinHelp ----
WinHelp    WinHelp函數啟動Windows説明（WINHELP.EXE），並傳遞指示應用程式請求的説明性質的其他資料。應用程式指定要顯示的説明檔的名稱以及需要的目錄路徑。
語法
參數
【hWndMain】標識請求説明的視窗。WinHelp函數使用此控制碼來跟蹤哪些應用程式已請求説明。【lpszHelp】指向包含路徑的空終止字串（如有必要）以及輔助應用程式要顯示的説明檔的


-------------------------------------------------------- KeyGTK3Win32WinLoadTrustProvider ----
WinLoadTrustProvider[New - Windows NT]WinLoadTrustProvider函數將信任提供者DLL載入到調用進程的位址空間中。該函數將已註冊的信任提供程式載入為能夠處理指定的操作識別字。您可以使用WinLoadTrustProvider來確定本地電腦是否具有支援指定操作識別字的信任提供程式。WinLoadTrustProvider不執行該操作。
語法
參數
【ActionID】指向標識信任提供者操作的GUID結構的指標。WinTrust服務旨在與由協力廠商實施的信任提供商合作。每個信任提供者都提供自己唯一的一組操作識別字。有關信任提供程式支援的操


-------------------------------------------------------- KeyGTK3Win32WinMain ----
WinMain    系統調用WinMain函數作為基於Win32的應用程式的初始入口點。
語法
參數
【的hInstance】標識應用程式的當前實例。【hPrevInstance】標識應用程式的上一個實例。對於基於Win32的應用程式，此參數始終為空。如果需要檢測是否存在另一個實例，請使用C


-------------------------------------------------------- KeyGTK3Win32WinSubmitCertificate ----
WinSubmitCertificate[New - Windows NT]WinSubmitCertificate函數將WIN_CERTIFICATE結構傳遞給所有在WinTrust伺服器上註冊的信任提供者。
語法
參數
【lpCertificate】指向WIN_CERTIFICATE結構。
返回值
如果函數成功，則返回值為非零值。如果【lpCertificate】參數無效，返回值為零。要獲取擴展錯誤資訊


-------------------------------------------------------- KeyGTK3Win32WinTrustProviderClientInitialize ----
WinTrustProviderClientInitialize[New - Windows NT]WinTrustProviderClientInitialize函數是WinTrust在載入信任提供者DLL的用戶端元件時調用的初始化函數。每個信任提供者必須匯出WinTrustProviderClientInitialize函數。
語法
參數
【dwWinTrustRevision】表示調用此函數的WinTrust元件的修訂級別。WinTrust將此值設置為WIN_TRUST_REVISION_1_0。【lpWinTrustInf


-------------------------------------------------------- KeyGTK3Win32WinTrustProviderClientUnload ----
WinTrustProviderClientUnload[New - Windows NT]WinTrustProviderClientUnload函數表示WinTrust準備從用戶端應用程式卸載信任提供者DLL。但是，WinTrust不保證在用戶端進程退出之前調用此函數。因此，如有必要，信任提供者應使用其他清理機制。
語法
參數
【lpTrustProviderInfo】指向信任提供者在初始化過程中分配的緩衝區。信任提供者在WinTrustProviderClientInitialize呼叫中將此指針傳遞給WinTr


-------------------------------------------------------- KeyGTK3Win32WinTrustProviderPing ----
WinTrustProviderPing[New - Windows NT]WinTrustProviderPing函數使信任提供商的用戶端元件與其伺服器對應方聯繫。WinTrust的當前版本不包括WinTrust伺服器組件。因此，WinTrust不實現此函數，並且信任提供者DLL不需要實現它。
語法
參數
【lpProviderName】指向包含信任提供程式名稱的以null結尾的Unicode字串。系統管理員將此名稱分配給用於存儲信任提供程式的配置資訊的註冊表項。WinTrust將此名稱傳遞


-------------------------------------------------------- KeyGTK3Win32WinTrustProviderServerInitialize ----
WinTrustProviderServerInitialize[New - Windows NT]WinTrustProviderServerInitialize函數是WinTrust在載入信任提供者DLL的伺服器元件時調用的初始化函數。WinTrust的當前版本不包括WinTrust伺服器組件。因此，WinTrust不會調用此函數，並且信任提供者DLL不需要匯出它。
語法
參數
【dwWinTrustRevision】表示調用此函數的WinTrust元件的修訂級別。WinTrust將此值設置為WIN_TRUST_REVISION_1_0。【lpWinTrustInf


-------------------------------------------------------- KeyGTK3Win32WinTrustProviderServerUnload ----
WinTrustProviderServerUnload[New - Windows NT]WinTrustProviderServerUnload函數表示WinTrust準備從WinTrust伺服器進程卸載信任提供者DLL。WinTrust的當前版本不包括WinTrust伺服器組件。因此，信任提供者DLL不需要實現此函數。
語法
參數
【lpTrustProviderInfo】指向信任提供者在初始化過程中分配的緩衝區。信任提供者在WinTrustProviderServerInitialize呼叫中將此指針傳遞給WinTr


-------------------------------------------------------- KeyGTK3Win32WinTrustProviderSubmitCertificate ----
WinTrustProviderSubmitCertificate[New - Windows NT]WinTrustProviderSubmitCertificate函數將WIN_CERTIFICATE結構傳遞給信任提供者。當應用程式調用{??989796014}函數時，WinTrust將載入並調用所有註冊的信任提供者的WinTrustProviderSubmitCertificate函數。
語法
參數
【lpCertificate】指向可能包含信任提供者感興趣的證書的WIN_CERTIFICATE結構。
返回值
沒有。
描述
每個信任提供者可以保存證書供將來使用，也可以忽略它。Wi


-------------------------------------------------------- KeyGTK3Win32WinTrustProviderVerifyTrust ----
WinTrustProviderVerifyTrust[New - Windows NT]WinTrustProviderVerifyTrust函數對指定的主題執行指定的驗證操作。當應用程式調用{??989796013}函數時，WinTrust調用支援指定操作識別字的信任提供者的WinTrustProviderVerifyTrust函數。
語法
參數
【HWND】處理來電者的視窗。信任提供者可以使用該值來確定它是否可以與用戶交互以執行由動作識別字指示的驗證操作。然而，信任提供者通常執行驗證操作而不需要使用者的輸入。此參數可以是以下值之一。值


-------------------------------------------------------- KeyGTK3Win32WinTrustSipInitialize ----
WinTrustSipInitialize[New - Windows NT]WinTrustSipInitialize函數是WinTrust載入主題介面包（SIP）DLL時調用的初始化函數。每個SIP都必須匯出一個WinTrustSipInitialize函數。
語法
參數
【dwWinTrustRevision】表示調用此函數的WinTrust元件的修訂級別。WinTrust將此值設置為WIN_TRUST_REVISION_1_0。【lpSipInfo】指向接


-------------------------------------------------------- KeyGTK3Win32WinTrustSubjectCheckContentInfo ----
WinTrustSubjectCheckContentInfo[New - Windows NT]WinTrustSubjectCheckContentInfo函數驗證指定的證書是否充分表示指定主題的內容。
語法
參數
【lpSubject】指向WIN_TRUST_SIP_SUBJECT結構的指標，描述要與證書進行比較的主題。【lpSignedData】指向WIN_CERT_TYPE_PKCS_SIGNED


-------------------------------------------------------- KeyGTK3Win32WinTrustSubjectEnumCertificates ----
WinTrustSubjectEnumCertificates[New - Windows NT]WinTrustSubjectEnumCertificates函數確定主題中捆綁的證書的類型。您可以檢索主題包含的所有證書類型的列表，或者您可以確定主題是否包含指定的證書類型。
語法
參數
【lpSubject】指向WIN_TRUST_SIP_SUBJECT結構的指標，用於標識從中獲取證書資訊的主題。【dwTypeFilter】指定要列出的證書類型。此參數可以為零以列出所有類型


-------------------------------------------------------- KeyGTK3Win32WinTrustSubjectGetCertHeader ----
WinTrustSubjectGetCertHeader[New - Windows NT]WinTrustSubjectGetCertHeader函數從指定的主題中檢索WIN_CERTIFICATE結構的標頭部分。來電者指定要檢索的證書的類型。返回的資訊不包括WIN_CERTIFICATE結構的bCertificate成員中的資料。
語法
參數
【lpSubject】指向WIN_TRUST_SIP_SUBJECT結構的指標，用於標識從中獲取證書頭的主題。【dwCertificateIndex】指定要檢索的證書的類型。您可以調用Win


-------------------------------------------------------- KeyGTK3Win32WinTrustSubjectGetCertificate ----
WinTrustSubjectGetCertificate[New - Windows NT]WinTrustSubjectGetCertificate函數從主題中檢索指定的證書。
語法
參數
【lpSubject】指向WIN_TRUST_SIP_SUBJECT結構的指標，用於標識從中獲取證書的主題。【dwCertificateIndex】指定要檢索的證書的類型。您可以調用WinT


-------------------------------------------------------- KeyGTK3Win32WinTrustSubjectGetName ----
WinTrustSubjectGetName[New - Windows NT]WinTrustSubjectGetName函數從表示主題的PKCS＃7簽名資料證書中檢索主題的名稱。信任提供者可以使用該名稱來存儲和檢索與該主題相關聯的證書。
語法
參數
【lpSubject】指向WIN_TRUST_SIP_SUBJECT結構的指標，用於標識主題的類型。請注意，該函數從【lpSignedData】結構中檢索主題的名稱，而不是主題。【lpSig


-------------------------------------------------------- KeyGTK3Win32WinVerifyTrust ----
WinVerifyTrust[New - Windows NT]WinVerifyTrust函數對指定的主題執行指定的驗證操作。該函數將查詢傳遞給支援操作識別字的信任提供者（如果有的話）。
語法
參數
【HWND】處理來電者的視窗。信任提供者可以使用此值來確定它是否可以與用戶交互。然而，信任提供者通常使用來自用戶的輸入執行驗證操作。此參數可以是以下值之一。值含義INVALID_HANDLE


-------------------------------------------------------- KeyGTK3Win32WNetAddConnection ----
WNetAddConnection    WNetAddConnection函數使呼叫應用程式能夠將本地設備連接到網路資源。一個成功的連接是持久的，這意味著Windows會在後續的登錄操作中自動恢復連接。提供此函數以相容早期版本的Microsoft Windows。對於新的應用程式，請使用WNetAddConnection2函數。
語法
參數
【lpRemoteName】指向指定要連接到的網路資源的以空字元結尾的字串。【//指向密碼字串的指標】指向以空字元結尾的字串，指定用於進行連接的密碼。此參數通常是與當前使用者相關聯的密碼


-------------------------------------------------------- KeyGTK3Win32WNetAddConnection2 ----
WNetAddConnection2    WNetAddConnection2函數連接到網路資源。該函數可以將本地設備重定向到網路資源。
語法
參數
【lpNetResource】指向NETRESOURCE結構，指定建議連接的詳細資訊：有關網路資源，本地設備和網路資源提供程式的資訊。您必須指定NETRESOURCE結構的以下成員：會員描述


-------------------------------------------------------- KeyGTK3Win32WNetAddConnection3 ----
WNetAddConnection3    WNetAddConnection3函數連接到網路資源。該函數可以將本地設備重定向到網路資源。
語法
參數
【hwndOwner】指定網路資源提供者可以用作對話方塊的所有者視窗的視窗。【hwndOwner】參數可能為NULL。如果是，則呼叫WNetAddConnection3相當於調用WNetAdd


-------------------------------------------------------- KeyGTK3Win32WNetCancelConnection ----
WNetCancelConnection    WNetCancelConnection函數打破了現有的網路連接。該函數是為相容早期版本的Microsoft Windows而提供的。對於新的應用程式，請使用WNetCancelConnection2函數。
語法
參數
【lpName】指向一個以null結尾的字串，指定重定向本地設備或要斷開連接的遠端網路資源的名稱。當此參數指定重定向本地設備時，只有指定的設備重定向被破壞。如果參數指定了遠端網路資源，則只


-------------------------------------------------------- KeyGTK3Win32WNetCancelConnection2 ----
WNetCancelConnection2    WNetCancelConnection2函數打破了現有的網路連接。它也可以用於刪除當前未連接的記憶網路連接。此函數取代WNetCancelConnection.
語法
參數
【lpName】指向一個以null結尾的字串，指定重定向本地設備或要斷開連接的遠端網路資源的名稱。如果此參數指定重定向的本地資源，則只會指定重定向;否則，到遠端網路資源的所有連接都將被破壞


-------------------------------------------------------- KeyGTK3Win32WNetCloseEnum ----
WNetCloseEnum    WNetCloseEnum函數將結束由WNetOpenEnum函數啟動的網路資源枚舉。
語法
參數
【henu】標識枚舉實例。這個控制碼必須由WNetOpenEnum函數返回。
返回值
如果函數成功，返回值為NO_ERROR。如果函數失敗，則返回值是錯誤代碼。要獲取擴展錯誤資訊，請調用G


-------------------------------------------------------- KeyGTK3Win32WNetConnectionDialog ----
WNetConnectionDialog    WNetConnectionDialog函數啟動一個常規流覽對話方塊，用於連接到網路資源。
語法
參數
【HWND】標識所屬視窗。【dwType】指定允許連接的資源類型。該參數可以是以下值：值含義RESOURCETYPE_DISK連接到磁片資源。
返回值
如果函數成功，返回值為NO_ERR


-------------------------------------------------------- KeyGTK3Win32WNetDisconnectDialog ----
WNetDisconnectDialog    WNetDisconnectDialog函數啟動一個常規流覽對話方塊，以斷開與網路資源的連接。
語法
參數
【HWND】標識所屬視窗。【dwType】指定要斷開連接的資源類型。此參數可能是以下值之一：值含義RESOURCETYPE_DISK斷開與磁片資源的連接。RESOURCETYPE_PRINT


-------------------------------------------------------- KeyGTK3Win32WNetEnumResource ----
WNetEnumResource    WNetEnumResource函數繼續由WNetOpenEnum函數啟動的網路資源枚舉。
語法
參數
【henu】標識枚舉實例。此控制碼必須由WNetOpenEnum返回。【lpcCount】指向指定所請求條目數的變數。如果請求的號碼為0xFFFFFFFF，則該函數返回盡可能多的條目。當函數成


-------------------------------------------------------- KeyGTK3Win32WNetGetConnection ----
WNetGetConnection    WNetGetConnection函數檢索與本地設備關聯的網路資源的名稱。
語法
參數
【lpLocalName】指向以null結尾的字串，指定獲取網路名稱的本地設備的名稱。【lpRemoteName】指向緩衝區，接收用於進行連接的以空值終止的遠端名稱。【lpnLength】


-------------------------------------------------------- KeyGTK3Win32WNetGetLastError ----
WNetGetLastError    WNetGetLastError函數檢索由Windows網路函數設置的最新的擴展錯誤代碼。
語法
參數
【// pointer to error code】指向接收網路提供商報告的錯誤代碼的變數。錯誤代碼特定于網路提供商。【lpErrorBuf】指向緩衝區，它接收描述錯誤的以null結尾的字元


-------------------------------------------------------- KeyGTK3Win32WNetGetUniversalName ----
WNetGetUniversalName    WNetGetUniversalName函數為網路資源採用基於驅動器的路徑，並獲取包含更通用形式的名稱的資料結構。
語法
參數
【lpLocalPath】指向作為網路資源的基於驅動器的路徑的以null結尾的字串。例如，如果驅動器H已映射到網路磁碟共用，並且感興趣的網路資源是該共用目錄\\ WIN32 \\ EXA


-------------------------------------------------------- KeyGTK3Win32WNetGetUser ----
WNetGetUser    WNetGetUser函數檢索用於建立網路連接的當前預設使用者名或用戶名。
語法
參數
【lpName】指向以空值終止的字串，指定已重定向到網路資源的本地設備的名稱，或指定已建立連接的網路資源的遠端名稱。如果此參數為NULL，Windows將返回該進程的當前使用者的名稱。【lp


-------------------------------------------------------- KeyGTK3Win32WNetOpenEnum ----
WNetOpenEnum    WNetOpenEnum函數啟動網路資源或現有連接的枚舉。
語法
參數
【dwScope】指定枚舉的範圍。此參數可以是以下值之一：值含義RESOURCE_CONNECTED所有當前連接的資源（【dwUsage】參數被忽略）。RESOURCE_GLOBALNET網


-------------------------------------------------------- KeyGTK3Win32WriteConsole ----
WriteConsole    WriteConsole函數將字串寫入從當前游標位置開始的控制台螢幕緩衝區。
語法
參數
【hConsoleOutput】標識要寫入的控制台螢幕緩衝區。控制碼必須具有GENERIC_WRITE許可權。【lpBuffer】指向包含要寫入螢幕緩衝區的字元的緩衝區。【nNumberOfCh


-------------------------------------------------------- KeyGTK3Win32WriteConsoleInput ----
WriteConsoleInput    WriteConsoleInput函數將資料直接寫入控制台輸入緩衝區。
語法
參數
【hConsoleInput】標識輸入緩衝區。控制碼必須具有GENERIC_WRITE許可權。【lpBuffer】指向包含要寫入輸入緩衝區的資料的INPUT_RECORD緩衝區。【nLength


-------------------------------------------------------- KeyGTK3Win32WriteConsoleOutput ----
WriteConsoleOutput    WriteConsoleOutput函數將字元和顏色屬性資料寫入控制台螢幕緩衝區中指定的矩形塊字元儲存格。要寫入的資料取自源緩衝器中指定位置的相應尺寸的矩形塊。
語法
參數
【hConsoleOutput】標識螢幕緩衝區。控制碼必須具有GENERIC_WRITE許可權。【lpBuffer】指向包含要寫入螢幕緩衝區的資料的源緩衝區。該指針被視為由【dwBufferSi


-------------------------------------------------------- KeyGTK3Win32WriteConsoleOutputAttribute ----
WriteConsoleOutputAttribute    WriteConsoleOutputAttribute函數將一些前景和背景顏色屬性複製到控制台螢幕緩衝區的連續儲存格，從指定位置開始。
語法
參數
【hConsoleOutput】標識螢幕緩衝區。控制碼必須具有GENERIC_WRITE許可權。【lpAttribute】指向包含要寫入螢幕緩衝區的屬性的緩衝區。【nLength】指定要寫入的屏


-------------------------------------------------------- KeyGTK3Win32WriteConsoleOutputCharacter ----
WriteConsoleOutputCharacter    WriteConsoleOutputCharacter函數將從指定位置開始，將多個字元複製到控制台螢幕緩衝區的連續儲存格。
語法
參數
【hConsoleOutput】標識螢幕緩衝區。控制碼必須具有GENERIC_WRITE許可權。【lpCharacter】指向包含要寫入螢幕緩衝區的字元的緩衝區。【nLength】指定要寫入的屏


-------------------------------------------------------- KeyGTK3Win32WriteFile ----
WriteFile    WriteFile函數將資料寫入一個檔，並設計用於同步和非同步作業。該函數開始在檔指標指示的位置將資料寫入檔。寫入操作完成後，檔指針將按實際寫入的位元組數進行調整，除非使用FILE_FLAG_OVERLAPPED打開檔。如果為重疊輸入和輸出（I / O）創建了檔案控制代碼，則在寫操作完成後，應用程式必須調整檔指標的位置。
語法
參數
【HFILE】標識要寫入的檔。必須使用GENERIC_WRITE訪問該檔創建檔案控制代碼。Windows NT對於非同步寫入操作，【HFILE】可以是使用CreateFile函數的FILE_F


-------------------------------------------------------- KeyGTK3Win32WriteFileEx ----
WriteFileEx    WriteFileEx函數將資料寫入檔。它專為非同步作業而設計，不同於專為同步和非同步作業而設計的WriteFile.
語法
參數
【HFILE】指定要寫入的檔實體的打開控制碼。必須使用FILE_FLAG_OVERLAPPED標誌創建該檔案控制代碼，並使用該檔對GENERIC_WRITE進行訪問。Windows NT： 【


-------------------------------------------------------- KeyGTK3Win32WritePrinter ----
WritePrinter    WritePrinter函數通知列印多工緩衝處理器資料應寫入指定的印表機。
語法
參數
【hPrinter】標識印表機。【PBUFlb】指向包含應寫入印表機的資料的位元組陣列。【cbBuf】指定陣列的大小（以位元組為單位）。【of variable with count of by


-------------------------------------------------------- KeyGTK3Win32WritePrivateProfileSection ----
WritePrivateProfileSectionWritePrivateProfileSection函數將替換初始設定檔案中指定部分下的鍵和值。此函數用於與16位元基於Windows的應用程式相容。基於Win32的應用程式應該將初始化資訊存儲在註冊表中。
語法
參數
【lpAppName】指向一個以null結束的字串，其中包含寫入資料的部分的名稱。此部分名稱通常是呼叫應用程式的名稱。【lpString】指向緩衝區，其中包含寫入命名部分的新金鑰名稱和相關


-------------------------------------------------------- KeyGTK3Win32WritePrivateProfileString ----
WritePrivateProfileStringWritePrivateProfileString函數將字串複製到指定的初始設定檔案的指定部分。此函數用於與16位元基於Windows的應用程式相容。基於WIn32的應用程式應該將初始化資訊存儲在註冊表中。
語法
參數
【lpAppName】指向一個以null結束的字串，其中包含要複製字串的部分的名稱。如果該部分不存在，則創建它。該部分的名稱與案例無關;字串可以是大寫和小寫字母的任何組合。【lpKey


-------------------------------------------------------- KeyGTK3Win32WritePrivateProfileStruct ----
WritePrivateProfileStructWritePrivateProfileStruct函數將資料複製到初始設定檔案的給定部分中的指定鍵中。當它複製資料時，該函數計算校驗和並將其附加到資料的末尾。GetPrivateProfileStruct函數使用校驗和來確保資料的完整性。此函數用於與16位元基於Windows的應用程式相容。基於Win32的應用程式應該將初始化資訊存儲在註冊表中。
語法
參數
【lpszSection】指向一個以null結束的字串，其中包含要複製字串的部分的名稱。如果該部分不存在，則創建它。該部分的名稱是不區分大小寫的，字串可以是大寫和小寫字母的任何組合。【


-------------------------------------------------------- KeyGTK3Win32WriteProcessMemory ----
WriteProcessMemory    WriteProcessMemory函數在指定的進程中寫入記憶體。要寫入的整個區域必須可訪問，否則操作失敗。
語法
參數
【hProcess】標識要寫入記憶體的進程的打開控制碼。該控制碼必須具有PROCESS_VM_WRITE和PROCESS_VM_OPERATION訪問進程。【lpBaseAddress】指向要寫入


-------------------------------------------------------- KeyGTK3Win32WriteProfileSection ----
WriteProfileSectionWriteProfileSection函數用指定的鍵和值替換WIN.INI檔中指定部分的內容。此函數用於與16位元Windows應用程式的相容性。基於Win32的應用程式應該將初始化資訊存儲在註冊表中。
語法
參數
【lpAppName】指向一個以null結束的字串，其中包含寫入資料的部分的名稱。此部分名稱通常是呼叫應用程式的名稱。【lpString】指向緩衝區，其中包含寫入命名部分的新金鑰名稱和相關


-------------------------------------------------------- KeyGTK3Win32WriteProfileString ----
WriteProfileStringWriteProfileString函數將一個字串複製到WIN.INI檔的指定部分。此函數用於與16位元基於Windows的應用程式相容。基於Win32的應用程式應該將初始化資訊存儲在註冊表中。
語法
參數
【lpAppName】指向一個以null結尾的字串，指定要複製字串的部分。如果該部分不存在，則創建它。該部分的名稱不區分大小寫;字串可以是大寫和小寫字母的任何組合。【lpKeyName


-------------------------------------------------------- KeyGTK3Win32WriteTapemark ----
WriteTapemark    WriteTapemark函數將指定數量的檔標記，設置標記，短文件標記或長檔標記寫入磁帶設備。這些標記將磁帶分區劃分為較小的區域。
語法
參數
【hDevice】標識要寫入標記的設備。該控制碼是通過使用CreateFile函數創建的。【dwTapemarkType】指定要寫入的標記的類型。此參數可以是以下值之一：值描述TAPE_FIL


-------------------------------------------------------- KeyGTK3Win32wsprintf ----
wsprintf    wsprintf函數格式化並將一系列字元和值存儲在緩衝區中。根據格式字串中的相應格式規範，將任何參數轉換並複製到輸出緩衝區。該函數向其寫入的字元附加一個終止空字元，但返回值不包括字元計數中的終止空字元。
語法
參數
【LPOUT】指向緩衝區以接收格式化的輸出。【lpFmt】指向包含格式控制規範的以null結尾的字串。除了普通ASCII字元外，每個參數的格式說明都會出現在此字串中。有關格式說明的詳細信


-------------------------------------------------------- KeyGTK3Win32wvsprintf ----
wvsprintf     函數wvsprintf函數將一系列字元和值存儲在緩衝區中。參數清單指向的專案根據格式控制字串中的相應格式規範進行轉換並複製到輸出緩衝區。該函數向其寫入的字元附加一個終止空字元，但返回值不包括字元計數中的終止空字元。
語法
參數
【POUTPUT】指向緩衝區以接收格式化的輸出。【lpFormat】指向包含格式控制規範的以null結尾的字串。除了普通ASCII字元外，每個參數的格式說明都會出現在此字串中。有關格式規


-------------------------------------------------------- KeyGTK3Win32Yield ----
Yield  產量函數已過時。此函數僅用於與16位元版本的Windows相容。在基於Win32的應用程式設計發展介面（API）中，此函數不起作用。包含視窗的執行緒應使用DispatchMessage，PeekMessage或TranslateMessage函數。消息迴圈函數處理消息同步，並在適當的時間產生。不包含視窗的執行緒應使用休眠時間為零毫秒的睡覺函數放棄其當前時間片段的剩餘部分。創建進程的執行緒可以使用WaitForInputIdle等待新進程完成初始化。
另請參見
DispatchMessage, PeekMessage, 睡覺, TranslateMessage, WaitForInputIdle


-------------------------------------------------------- KeyGTK3Win32ZeroMemory ----
ZeroMemory    ZeroMemory函數用零填充一個區塊。
語法
參數
【目的地】指向區塊的起始位址以填充零。【長度】指定要用零填充的區塊的大小（以位元組為單位）。
返回值
該函數沒有返回值。



-------------------------------------------------------- KeyGTK3Win32_hread ----
_hread     _hread函數從指定的檔讀取資料。此函數用於與16位元版本的Windows相容。基於Win32的應用程式應使用ReadFile函數。
語法
參數
【HFILE】標識指定的檔。【lpBuffer】指向包含從檔讀取的資料的緩衝區。【lBytes】指定要從檔讀取的位元組數。
返回值
返回值表示從檔中實際讀取的位元組數。如果讀取的位元組


-------------------------------------------------------- KeyGTK3Win32_hwrite ----
_hwrite    _hwrite函數將資料寫入指定的檔。此函數用於與16位元版本的Windows相容。基於Win32的應用程式應使用WriteFile函數。
語法
參數
HFILE標識指定的檔。lpBuffer指向包含要寫入檔的資料的緩衝區。lBytes指定要寫入檔的位元組數。
返回值
如果函數成功，則返回值表示實際寫入檔的位元組數。如果函數失敗，返


-------------------------------------------------------- KeyGTK3Win32_lclose ----
_lclose    _lclose函數關閉指定的檔，使其不再可用於閱讀或寫入。此函數用於與16位元版本的Windows相容。基於Win32的應用程式應使用CloseHandle函數。
語法
參數
【HFILE】標識要關閉的檔。該控制碼由創建或最後打開檔的函數返回。
返回值
如果函數成功，返回值為零。如果函數失敗，返回值為HFILE_ERROR。要獲取擴展錯誤資訊，請調用GetL


-------------------------------------------------------- KeyGTK3Win32_lcreat ----
_lcreat    _lcreat函數創建或打開指定的文件。此函數用於與16位元版本的Windows相容。基於Win32的應用程式應使用CreateFile函數。
語法
參數
【lpPathName】指向以空字元結尾的字串，指定要打開的檔。字串必須由Windows ANSI字元集的字元組成。【//檔案屬性】指定檔案屬性。此參數必須是以下值之一：值含義0正常（


-------------------------------------------------------- KeyGTK3Win32_llseek ----
_llseek    _llseek函數重新定位以前打開的文件中的文件指標。此函數用於與16位元版本的Windows相容。基於Win32的應用程式應使用SetFilePointer函數。
語法
參數
【HFILE】標識檔。【我偏移fy】指定檔指標要移動的位元組數。【iOrigin】指定檔指針的起始位置和方向。此參數必須是以下值之一：值含義FILE_BEGIN從文件的開頭移動文件指標【


-------------------------------------------------------- KeyGTK3Win32_lopen ----
_lopen     _lopen函數打開現有檔，並將文件指針設置為文件的開頭。此函數用於與16位元版本的Windows相容。基於Win32的應用程式應使用CreateFile函數。
語法
參數
【lpPathName】指向以空字元結尾的字串，指定要打開的檔。字串必須由Windows ANSI字元集的字元組成。【iReadWrite】指定打開檔的方式。該參數由一個訪問模式和可


-------------------------------------------------------- KeyGTK3Win32_lread ----
_lread     _lread函數從指定的檔讀取資料。此函數用於與16位元版本的Windows相容。基於Win32的應用程式應使用ReadFile函數。
語法
參數
【HFILE】標識指定的檔。【lpBuffer】指向包含從檔讀取的資料的緩衝區。【指向包含要寫入檔的資料的緩衝區。】指定要從檔讀取的位元組數。
返回值
返回值表示從檔中實際讀取的


-------------------------------------------------------- KeyGTK3Win32_lwrite ----
_lwrite    _lwrite函數將資料寫入指定的檔。此函數用於與16位元版本的Windows相容。基於Win32的應用程式應使用WriteFile函數。
語法
參數
【HFILE】標識指定的檔。【lpBuffer】指向包含要寫入檔的資料的緩衝區。【指向包含要寫入檔的資料的緩衝區。】指定要寫入檔的位元組數。
返回值
如果函數成功，則返回值表示實際
 

------------ KeyGTK3GtkAccelGroupFindFunc ----

GtkAccelGroupFindFunc
Syntax
Parameters
data  -  	. [closure]
Since 2.2
See Also
gtk3-Keyboard-Accelerators


------------ KeyGTK3GtkAccelMapForeach ----

GtkAccelMapForeach
語法
參數
data- 使用者資料傳遞給gtk_accel_map_foreach（） orgtk_accel_map_foreach_unfiltered（）
accel_path- 當前加速器的加速路徑
accel_key- 當前加速器的鍵
accel_mods- 當前加速器的修改器
changed- 更改了加速器的標誌（如果為 TRUE，則加速器在運行時已更改，需要在加速器轉儲期間保存）
另請參見
gtk3-Accelerator-Maps


------------ KeyGTK3GtkAssistantPageFunc ----

GtkAssistantPageFunc
gtk_assistant_set_forward_page_func（） 使用的函數，用於知道給定當前頁面的下一頁是哪一頁。它被稱為兩者，用於計算當用戶按下？前進時的下一頁？按鈕和用於處理 “last？按鈕。
語法
參數
current_page- 用於計算下一頁的頁碼。
data- 使用者資料。[關閉]
返回
下一頁碼。
另請參見
GtkAssistant


------------ KeyGTK3GtkBuilderConnectFunc ----

GtkBuilderConnectFunc
這是用於連接信號的函數的簽名。它由gtk_builder_connect_signals（）和gtk_builder_connect_signals_full（）方法使用。它主要用於解釋型語言綁定，但在程式師希望更好地控制信號連接過程時非常有用。請注意，此函數只能調用一次，後續調用將不執行任何操作。
語法
參數
builder- 一GtkBuilder
object- 要將信號連接到的物件
signal_name- 信號名稱
handler_name- 處理常式的名稱
connect_object- a ，如果非空，則使用 g_signal_connect_object（）GObject
flags  -  	GConnectFlags使用
user_data- 自2.12以來的使用者資料
另請參見
GtkBuilder


------------ KeyGTK3GtkCalendarDetailFunc ----

GtkCalendarDetailFunc
這種函數為Pango標記提供了指定日期的詳細資訊。此類詳細資訊的示例包括假期或約會。該函數在沒有可用資訊時返回 NULL。
語法
參數
calendar- 一個.GtkCalendar
year- 需要詳細說明的年份。
month- 需要詳細資訊的月份。
day- 需要詳細資訊的月份日期。
user_data- 與gtk_calendar_set_detail_func（）一起傳遞的資料。
返回
新分配的字串，帶有Pango標記，其中包含指定日期的詳細資訊，或 NULL。
自 2.14 起
另請參見
GtkCalendar


------------ KeyGTK3GtkCellAllocCallback ----

GtkCellAllocCallback
用於反覆運算儲存格渲染器及其在 a 中分配的區域的回呼函數的類型，請參見 gtk_cell_area_foreach_alloc（）。GtkCellArea
語法
參數
renderer- 要操作的儲存格渲染器
cell_area- 分配給渲染器的區域位於矩形的gtk_cell_area_foreach_alloc（）
cell_background- 渲染器的背景區域位於gtk_cell_area_foreach_alloc（）的後臺區域。
data- 使用者提供的資料。[關閉]
返回
TRUE 可停止反覆運算儲存格。
另請參見
GtkCellArea


------------ KeyGTK3GtkCellCallback ----

GtkCellCallback
用於反覆運算 的儲存格呈現器的回呼函數的類型，請參見 gtk_cell_area_foreach（）。GtkCellArea
語法
參數
renderer- 要操作的儲存格渲染器
data- 使用者提供的資料。[關閉]
返回
TRUE 可停止反覆運算儲存格。
另請參見
GtkCellArea


------------ KeyGTK3GtkCellLayoutDataFunc ----

GtkCellLayoutDataFunc
一個函數，應根據需要設置cell_layout的儲存格渲染器的值。
語法
參數
cell_layout- 一GtkCellLayout
cell- 要設置其值的儲存格渲染器
tree_model- 模型
iter- a 指示要為其設置值的行GtkTreeIter
data- 傳遞給gtk_cell_layout_set_cell_data_func（）的使用者資料
另請參見
GtkCellLayout


------------ KeyGTK3GtkClipboardClearFunc ----

GtkClipboardClearFunc
在更改或清除剪貼板的內容時將調用的函數。一旦調用，user_data_or_owner參數將不再使用。
語法
參數
clipboard- 的GtkClipboard
user_data_or_owner- 傳遞給gtk_clipboard_set_with_data（）user_dataargument，或傳遞給gtk_clipboard_set_with_owner（）的所有者論證
另請參見
gtk3-Clipboards


------------ KeyGTK3GtkClipboardGetFunc ----

GtkClipboardGetFunc
將調用該函數以提供所選內容。如果通告了多種類型的資料，則可以通過 info 參數或通過檢查selection_data的目標欄位來確定請求的類型。如果資料可以成功轉換到其中，則應通過調用gtk_selection_data_set（）（或相關函數，如gtk_selection_data_set_text（）））將其存儲到selection_data物件中。如果未設置任何資料，則將通知請求者獲取資料的嘗試失敗。
語法
參數
clipboard- 的GtkClipboard
selection_data- 應存儲所請求資料的參數。GtkSelectionData
info- 與從陣列傳遞到gtk_clipboard_set_with_data（） orgtk_clipboard_set_with_owner（） 的請求目標對應的資訊欄位。GtkTargetEntry
user_data_or_owner- togtk_clipboard_set_with_data（）通過的user_dataargument，或togtk_clipboard_set_with_owner（）傳遞的所有者論證
另請參見
gtk3-Clipboards


------------ KeyGTK3GtkClipboardImageReceivedFunc ----

GtkClipboardImageReceivedFunc
在收到gtk_clipboard_request_image（） 的結果或請求失敗時要調用的函數。
語法
參數
clipboard- 的GtkClipboard
pixbuf- 接收到的圖像
data- gtk_clipboard_request_image（） 的user_datasupplied。
自 2.6 起
另請參見
gtk3-Clipboards


------------ KeyGTK3GtkClipboardReceivedFunc ----

GtkClipboardReceivedFunc
在收到gtk_clipboard_request_contents（） 的結果或請求失敗時要調用的函數。
語法
參數
clipboard- 的GtkClipboard
selection_data- 已收到包含資料的 a。如果檢索資料失敗，則長度欄位selection_datawill為負數。GtkSelectionData
data- gtk_clipboard_request_contents（） 的user_datasupplied。
另請參見
gtk3-Clipboards


------------ KeyGTK3GtkClipboardTargetsReceivedFunc ----

GtkClipboardTargetsReceivedFunc
在收到gtk_clipboard_request_targets（） 的結果或請求失敗時要調用的函數。
語法
參數
clipboard- 的GtkClipboard
atoms- 支援的目標，如 陣列 ，或 NULLif 檢索資料失敗。GdkAtom
n_atoms- 原子陣列的長度。
data- gtk_clipboard_request_targets（） 的user_datasupplied。
2.4 起
另請參見
gtk3-Clipboards


------------ KeyGTK3GtkClipboardTextReceivedFunc ----

GtkClipboardTextReceivedFunc
在收到gtk_clipboard_request_text（） 的結果或請求失敗時要調用的函數。
語法
參數
clipboard- 的GtkClipboard
text- 以 UTF-8 編碼字串形式接收的文本，或 NULLif 檢索資料失敗。
data- user_datasupplied到gtk_clipboard_request_text（）。
另請參見
gtk3-Clipboards


------------ KeyGTK3GtkEntryCompletionMatchFunc ----

GtkEntryCompletionMatchFunc
一個函數，它決定 iter 指示的行是否與給定的鍵匹配，並且應顯示為鍵的可能完成。請注意，鍵是規範化的，並且是大小寫折疊的（請參見 g_utf8_normalize（） 和 g_utf8_casefold（））。如果這不合適，請匹配函數有權訪問未修改的金鑰viagtk_entry_get_text （GTK_ENTRY （gtk_entry_completion_get_entry（）））。
語法
參數
completion- 的GtkEntryCompletion
key- 字串匹配，規範化和大小寫折疊
iter- a 表示要匹配的行GtkTreeIter
user_data- 提供給gtk_entry_completion_set_match_func（）的使用者資料
返回
如果它應該顯示為鍵的可能完成，則為 TRUE
另請參見
GtkEntryCompletion


------------ KeyGTK3GtkFileFilterFunc ----

GtkFileFilterFunc
與自訂篩選器一起使用的函數類型，seegtk_file_filter_add_custom（）。
語法
參數
filter_info- 根據傳遞給gtk_file_filter_add_custom（）的所需旗幟填充GtkFileFilterInfo
data- 傳遞給gtk_file_filter_add_custom（）的使用者資料。[關閉]
返回
如果應顯示檔，則為 TRUE
另請參見
GtkFileFilter


------------ KeyGTK3GtkFlowBoxFilterFunc ----

GtkFlowBoxFilterFunc
每當添加子更改器時將調用的函數。它使您可以控制孩子是否應該可見。
語法
參數
child- 一個可以被過濾的GtkFlowBoxChild
user_data- 使用者資料。[關閉]
返回
如果行應可見，則為 TRUE，否則為
FALSE 自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3GtkFlowBoxForeachFunc ----

GtkFlowBoxForeachFunc
gtk_flow_box_selected_foreach（） 使用的函數。它將在框的每個選定子項上調用。
語法
參數
box- 一GtkFlowBox
child- 一GtkFlowBoxChild
user_data- 使用者資料。[關閉]
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3GtkFlowBoxSortFunc ----

GtkFlowBoxSortFunc
一個函數，用於比較兩個子項，以確定哪個應先來。
語法
參數
child1- 第一個孩子
child2- 第二個孩子
user_data- 使用者資料。[關閉]
返回
如果 child1 應該在 child2 之前，則< 0，如果它們相等，則> 0，否則為 0，因為
3.12
另請參見
GtkFlowBox


------------ KeyGTK3GtkFontFilterFunc ----

GtkFontFilterFunc
用於決定在 中顯示哪些字體的函數類型。請參見 gtk_font_chooser_set_filter_func（）。GtkFontChooser
語法
參數
family- 一PangoFontFamily
face- 屬於家庭PangoFontFace
data- 傳遞給gtk_font_chooser_set_filter_func（）的使用者資料。[關閉]
返回
如果應顯示字體，則為 TRUE
另請參見
GtkFontChooser


------------ KeyGTK3GtkIconViewForeachFunc ----

GtkIconViewForeachFunc
gtk_icon_view_selected_foreach（） 用於映射所有選定行的函數。它將在視圖中的每一行上調用。
語法
參數
icon_view- 一GtkIconView
path- 所選行的GtkTreePath
data- 使用者資料
另請參見
GtkIconView


------------ KeyGTK3GtkListBoxFilterFunc ----

GtkListBoxFilterFunc
每當行更改或添加時，將調用該行，並允許您控制該行是否應可見。
語法
參數
row- 可以過濾的行
user_data- 使用者資料。[關閉]
返回
如果行應可見，則為 TRUE，否則為
FALSE 自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3GtkListBoxSortFunc ----

GtkListBoxSortFunc
比較兩行以確定哪一行應該排在第一位。
語法
參數
row1- 第一行
row2- 第二行
user_data- 使用者資料。[關閉]
返回
如果 row1 應該在 row2 之前，則< 0，如果它們相等，則> 0，否則為 0，否則
為 3.10
另請參見
GtkListBox


------------ KeyGTK3GtkListBoxUpdateHeaderFunc ----

GtkListBoxUpdateHeaderFunc
每當行更改或行更改之前哪一行時，都會調用 this，它允許您更新行上的標題。您可以通過gtk_list_box_row_set_header（）刪除或設置一個新標題，或者只是更改當前標題小部件的狀態。
語法
參數
row- 要更新的行
before- 行前行，如果是第一行，則為 NULL。[允許-無]
user_data- 使用者資料。[關閉]
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3GtkMenuDetachFunc ----

GtkMenuDetachFunc
調用 gtk_menu_attach_to_widget（） 時提供的使用者函數，稍後功能表與小部件分離時將調用該函數。
語法
參數
attach_widget- 菜單正在分離。GtkWidget
menu- 被分離。[br \=“”GtkMenu
另請參見
GtkMenu


------------ KeyGTK3GtkMenuPositionFunc ----

GtkMenuPositionFunc
調用gtk_menu_popup（） 時提供的使用者函數，用於控制功能表在顯示時的位置。該函數將 x 和 y 參數設置為要繪製 themenu 的座標。要使功能表顯示在與滑鼠指標不同的監視器上，必須調用 gtk_menu_set_monitor（）。
語法
參數
menu- 一個.GtkMenu
x- 表示菜單應繪製的水準位置的位址。軟。。。gint
y- 表示菜單應繪製的垂直位置的位址。這是一個輸出參數。軟。。。gint
push_in- 此參數控制如何處理放置在監視器外部的功能表。如果將其設置為 TRUE 並且功能表的一部分位於監視器外部，則 GTK+ 會將視窗推入可見區域，從而有效地修改快顯視窗。請注意，移動並可能調整菜單大小將改變滾動位置以將功能表項目保持在原位，即在不調整大小的情況下處於相同的監視器位置。實際上，此行為僅用於下拉式列示方塊快顯視窗或選項功能表，不能用於簡單地限制功能表以監視邊界。在這種情況下，更改滾動偏移量是不可取的。軟。。。
user_data- 使用者在gtk_menu_popup（）資料參數中提供的資料。
另請參見
GtkMenu


------------ KeyGTK3GtkModuleDisplayInitFunc ----

GtkModuleDisplayInitFunc
多頭感知 GTK+ 模組可能具有與此原型gtk_module_display_init（） 函數。GTK+ 為每個打開的顯示器調用此函數。
語法
參數
display- 自2.2以來開放
GdkDisplay
另請參見
gtk3-General


------------ KeyGTK3GtkModuleInitFunc ----

GtkModuleInitFunc
每個 GTK+ 模組都必須有一個函數 gtk_module_init（） 與此原型。載入模組後調用此函數。
語法
參數
argc- GTK+ 始終為此參數傳遞 NULL。[允許-無]
argv- GTK+ 始終為此參數傳遞 NULL。[允許-無][陣列長度 = argc]
另請參見
gtk3-General


------------ KeyGTK3GtkPageSetupDoneFunc ----

GtkPageSetupDoneFunc
togtk_print_run_page_setup_dialog_async（） 傳遞的函數的類型。當頁面設置對話方塊關閉時，將調用此函數，並且還充當資料的銷毀通知。
語法
參數
page_setup- 那已經GtkPageSetup
data- 已togtk_print_run_page_setup_dialog_async（） 傳遞的使用者資料。[關閉]
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3GtkPrinterFunc ----

GtkPrinterFunc
傳遞給gtk_enumerate_printers（） 的函數類型。請注意，如果要在函數返回後保持對印表機的引用，則需要引用印表機。
語法
參數
printer- 一GtkPrinter
data- 傳遞給gtk_enumerate_printers（）的使用者資料。[關閉]
返回
TRUE 停止枚舉，FALSE 從 2.10 開始繼續
另請參見
GtkPrinter


------------ KeyGTK3GtkPrintJobCompleteFunc ----

GtkPrintJobCompleteFunc
傳遞給 gtk_print_job_send（） 的回檔類型。當列印工作已完全發送時，將調用它。
語法
參數
print_job- 的GtkPrintJob
user_data- 已傳遞給gtk_print_job_send（） 的使用者資料
error- a 如果發送列印工作失敗，則包含錯誤資訊，否則為 NULLGError
另請參見
GtkPrintJob


------------ KeyGTK3GtkRcPropertyParser ----

GtkRcPropertyParser
[syntax]gboolean（*GtkRcPropertyParser） （const *pspec， const *rc_string， *property_value）;[/語法GParamSpecGStringGValue
另請參見
GtkStyle


------------ KeyGTK3GtkRecentFilterFunc ----

GtkRecentFilterFunc
與自訂篩選器一起使用的函數類型，請參見gtk_recent_filter_add_custom（）。
語法
參數
filter_info- 根據傳遞給gtk_recent_filter_add_custom（）的所需旗幟填充GtkRecentFilterInfo
user_data- 使用者資料傳遞給gtk_recent_filter_add_custom（）
返回
如果應顯示檔，則為 TRUE
另請參見
GtkRecentFilter


------------ KeyGTK3GtkSnoopFunc ----

GtkKeySnoopFunc
GtkKeySnoopFunc?()
關鍵窺探函數在正常事件傳遞之前調用。它們可用於實現自訂金鑰事件處理。
語法
參數
grab_widget- 將事件傳遞到的小部件
event- 關鍵事件
func_data- 提供給gtk_key_snooper_install（）
返回
TRUE 表示停止對事件的進一步處理，FALSE 表示繼續。
另請參見
gtk3-General


------------ KeyGTK3GtkTextBufferDeserializeFunc ----

GtkTextBufferDeserializeFunc
調用該函數以反序列化已使用 gtk_text_buffer_serialize（） 序列化的 RTF，並將其插入到反覆運算器中。
語法
參數
register_buffer- 格式註冊為GtkTextBuffer
content_buffer- 反序列化為GtkTextBuffer
iter- 反序列化文本的插入點
data- 要反序列化的數據
length- 數據長度
create_tags- 如果反序列化可能會創建標記，則為 TRUE
user_data- 註冊格式時指定的使用者資料
error- 返回地點GError
返回
成功時為真，否則為假
另請參見
GtkTextBuffer


------------ KeyGTK3GtkTextBufferSerializeFunc ----

GtkTextBufferSerializeFunc
調用以序列化文本緩衝區內容的函數。它必須返回內容的序列化形式。
語法
參數
register_buffer- 為其註冊格式GtkTextBuffer
content_buffer- 序列化GtkTextBuffer
start- 開始序列化的文字區塊
end- 要序列化的文字區塊的末尾
length- 序列化資料長度的返回位置
user_data- 註冊格式時指定的使用者資料
返回
新分配的 guint8 陣列，其中包含序列化資料，如果發生錯誤，則為 NULL
另請參見
GtkTextBuffer


------------ KeyGTK3GtkTreeCellDataFunc ----

GtkTreeCellDataFunc
一個函數，用於設置儲存格的屬性，而不僅僅是使用儲存格和模型之間的直角映射。這對於自訂儲存格渲染器非常有用。例如，函數可能會從tree_model中獲取 aninteger，並將其呈現為 ？text？屬性？儲存格？通過將其轉換為其書面等價物。這是通過調用 gtk_tree_view_column_set_cell_data_func（） 設置的
語法
參數
tree_column- 一GtkTreeViewColumn
cell- tree_column正在渲染GtkCellRenderer
tree_model- 正在渲染GtkTreeModel
iter- 呈現的當前行的 AGtkTreeIter
data- 使用者資料
另請參見
GtkTreeViewColumn


------------ KeyGTK3GtkTreeIterCompareFunc ----

GtkTreeIterCompareFunc
如果 a 在 b 之前排序，a 與 b 排序，或者 a 在 brespective 之後排序，則 GtkTreeIterCompareFunc 應返回負整數、零或正整數。如果兩個反覆運算器的比較相等，則它們在排序模型中的順序是未定義的。為了確保行為符合預期，GtkTreeIterCompareFunc必須在模型上定義一個偏序，即它必須是自反的，反對稱的和傳遞的。例如，如果模型是產品目錄，則 “price？列可以是returnsprice_of（@a） - price_of（@b） 的列。GtkTreeSortable
語法
參數
model- 比較在GtkTreeModel
a- A在模型中GtkTreeIter
b- 另一個在模型中GtkTreeIter
user_data- 分配比較功能時傳遞的資料，例如 bygtk_tree_sortable_set_sort_func（）
返回
負整數、零或正整數，具體取決於在 b 之前、帶還是之後排序
另請參見
GtkTreeSortable


------------ KeyGTK3GtkTreeModelFilterModifyFunc ----

GtkTreeModelFilterModifyFunc
根據模型中的原始值計算顯示值的函數。它必須使用 iter 指示的行中列的顯示值填充值。由於每次資料訪問都調用此函數，因此它不是單獨的高效操作。
語法
參數
model- 的GtkTreeModelFilter
iter- 指向其顯示值已確定的行GtkTreeIter
value- 已使用列的正確類型初始化的 A。[輸出調用方分配]GValue
column- 顯示值確定的列
data- 提供給gtk_tree_model_filter_set_modify_func（）的使用者資料。[關閉]
另請參見
GtkTreeModelFilter


------------ KeyGTK3GtkTreeModelFilterVisibleFunc ----

GtkTreeModelFilterVisibleFunc
一個函數，用於確定 iter 指示的行是否可見。
語法
參數
model- 子模型的GtkTreeModelFilter
iter- 指向模型中可見性確定的行GtkTreeIter
data- 提供給gtk_tree_model_filter_set_visible_func（）的使用者資料。[關閉]
返回
iteris 指示的行是否可見。
另請參見
GtkTreeModelFilter


------------ KeyGTK3GtkTreeModelForeachFunc ----

GtkTreeModelForeachFunc
傳遞給gtk_tree_model_foreach（） 的回檔的類型，以在樹模型中的行上駐留。
語法
參數
model- 正在反覆運算GtkTreeModel
path- 當前GtkTreePath
iter- 當前GtkTreeIter
data- 傳遞給gtk_tree_model_foreach（）的使用者資料
返回
TRUE 表示停止反覆運算，FALSE 表示繼續
另請參見
GtkTreeModel


------------ KeyGTK3GtkTreeSelectionForeachFunc ----

GtkTreeSelectionForeachFunc
gtk_tree_selection_selected_foreach（） 用於映射所有選定行的函數。它將在視圖中的每一行上調用。
語法
參數
model- 被觀看GtkTreeModel
path- 所選行的GtkTreePath
iter- 指向所選行GtkTreeIter
data- 使用者資料。[關閉]
另請參見
GtkTreeSelection


------------ KeyGTK3GtkTreeSelectionFunc ----

GtkTreeSelectionFunc
gtk_tree_selection_set_select_function（） 用於篩選是否可以選擇行的函數。每當行的狀態可能更改時，就會調用它。返回值 TRUE 指示選擇可以更改選擇。
語法
參數
selection- 一GtkTreeSelection
model- 被觀看GtkTreeModel
path- 有問題的行GtkTreePath
path_currently_selected- TRUE，如果路徑當前處於選中狀態
data- 使用者資料。[關閉]
返回
TRUE，如果行的選擇狀態可以切換
另請參見
GtkTreeSelection


------------ KeyGTK3GtkTreeViewColumnDropFunc ----

GtkTreeViewColumnDropFunc
用於確定柱子是否可以放在分離點的函數類型（由prev_column和next_column確定）。從左到右區域設置，prev_column位於潛在放置點的左側，next_column位於右側。在從右到左模式下，這將被反轉。如果點是有效的放置點，則此函數應返回 TRUE。請注意，返回 TRUE 實際上並不表示列刪除已進行，而只是為了向用戶指示可能的刪除點。
語法
參數
tree_view- 一GtkTreeView
column- 被拖拽GtkTreeViewColumn
prev_column- 列一側的 AGtkTreeViewColumn
next_column- 列另一側的 AGtkTreeViewColumn
data- 使用者資料。[關閉]
返回
TRUE，如果列可以放在此位置
另請參見
GtkTreeView


------------ KeyGTK3GtkTreeViewMappingFunc ----

GtkTreeViewMappingFunc
Function used for gtk_tree_view_map_expanded_rows().
Syntax
Parameters
tree_view  -  	A GtkTreeView
path  -  	The path that?s expanded
user_data  -  	user data
See Also
GtkTreeView


------------ KeyGTK3GtkTreeViewRowSeparatorFunc ----

GtkTreeViewRowSeparatorFunc
用於確定 iter 所指向的行是否應呈現為分隔符號的函數類型。實現此目的的常用方法是在模型中具有布林列，其值將返回。GtkTreeViewRowSeparatorFunc
語法
參數
model- 的GtkTreeModel
iter- 指向模型中的一行GtkTreeIter
data- 使用者資料。[關閉]
返回
如果行是分隔符號，則為 TRUE
另請參見
GtkTreeView


------------ KeyGTK3GtkTreeViewSearchEqualFunc ----

GtkTreeViewSearchEqualFunc
用於檢查模型中的行是否與使用者輸入的搜索關鍵字字串匹配的函數。請注意，返回值與通常期望的值相反，儘管它與 strcmp（） 在相等的字串中返回 0 有一些相似之處。
語法
參數
model- 正在搜索GtkTreeModel
column- 由 gtk_tree_view_set_search_column（） 設置的搜索列
key- 要與之比較的鍵字串
iter- 指向應與鍵進行比較的模型行。GtkTreeIter
search_data- 來自gtk_tree_view_set_search_equal_func（）的使用者資料。[關閉]
返回
如果行匹配，則為 FALSE，否則為 TRUE。
另請參見
GtkTreeView


------------ KeyGTK3gtk_adjustment_changed ----

gtk_adjustment_changed
從 發出信號。這通常由 的所有者在更改值以外的任何屬性後調用。?changed?GtkAdjustmentGtkAdjustmentGtkAdjustment
語法
參數
adjustment- 一GtkAdjustment
另請參見
GtkAdjustment


------------ KeyGTK3gtk_adjustment_clamp_page ----

gtk_adjustment_clamp_page
更新該屬性以確保下限和上限之間的範圍位於當前頁中（即介於 和 + 之間）。如果範圍大於頁面大小，則只有它的開頭將位於當前頁面中。如果值更改，將發出信號。?value??value??value??page_size??changed?
語法
參數
adjustment- 一個.GtkAdjustment
lower- 較低的值。
upper- 上限值。
另請參見
GtkAdjustment


------------ KeyGTK3gtk_adjustment_configure ----

gtk_adjustment_configure
一次設置調整的所有屬性。使用此功能可避免信號的多次發射。請參閱 gtk_adjustment_set_lower（） 瞭解將多個發射壓縮為一個發射的替代方法。?changed??changed?
語法
參數
adjustment- 一GtkAdjustment
value- 新值
lower- 新的最小值
upper- 新的最大值
step_increment- 新的步驟增量
page_increment- 新頁面增量
page_size- 新的頁面大小
自 2.14 起
另請參見
GtkAdjustment


------------ KeyGTK3gtk_adjustment_get_lower ----

gtk_adjustment_get_lower
檢索調整的最小值。
語法
參數
adjustment- 一GtkAdjustment
返回
調整的當前最小值。
自 2.14 起
另請參見
GtkAdjustment


------------ KeyGTK3gtk_adjustment_get_minimum_increment ----

gtk_adjustment_get_minimum_increment
獲取步驟增量和頁面增量中較小的一個。
語法
參數
adjustment- 一GtkAdjustment
返回
調整的最小增量
自 3.2 起
另請參見
GtkAdjustment


------------ KeyGTK3gtk_adjustment_get_page_increment ----

gtk_adjustment_get_page_increment
檢索調整的頁面增量。
語法
參數
adjustment- 一GtkAdjustment
返回
調整的當前頁增量。
自 2.14 起
另請參見
GtkAdjustment


------------ KeyGTK3gtk_adjustment_get_page_size ----

gtk_adjustment_get_page_size
檢索調整的頁面大小。
語法
參數
adjustment- 一GtkAdjustment
返回
調整的當前頁面大小。
自 2.14 起
另請參見
GtkAdjustment


------------ KeyGTK3gtk_adjustment_get_step_increment ----

gtk_adjustment_get_step_increment
檢索調整的步長增量。
語法
參數
adjustment- 一GtkAdjustment
返回
調整的當前步長增量。
自 2.14 起
另請參見
GtkAdjustment


------------ KeyGTK3gtk_adjustment_get_upper ----

gtk_adjustment_get_upper
檢索調整的最大值。
語法
參數
adjustment- 一GtkAdjustment
返回
調整的當前最大值。
自 2.14 起
另請參見
GtkAdjustment


------------ KeyGTK3gtk_adjustment_get_value ----

gtk_adjustment_get_value
獲取調整的當前值。Seegtk_adjustment_set_value（）.
語法
參數
adjustment- 一GtkAdjustment
返回
調整的當前值。
另請參見
GtkAdjustment


------------ KeyGTK3gtk_adjustment_new ----

gtk_adjustment_new
創建新的 .GtkAdjustment
語法
參數
value- 初始值。
lower- 最小值。
upper- 最大值。
step_increment- 步長增量。
page_increment- 頁面增量。
page_size- 頁面大小。
返回
一個新的.GtkAdjustment
另請參見
GtkAdjustment


------------ KeyGTK3gtk_adjustment_set_lower ----

gtk_adjustment_set_lower
設置調整的最小值。當通過其個人定位器設置多個調整屬性時，將發出多個信號。但是，由於信號的發射與屬性改變的信號的發射有關，因此可以通過callingg_object_freeze_notify（）將信號壓縮為一個，並在各個設置者的呼叫周圍g_object_thaw_notify（）。或者，對所有要更改的屬性使用單個g_object_set（）或使用gtk_adjustment_configure（）具有壓縮發射的相同效果。?changed??changed??notify??changed??changed?
語法
參數
adjustment- 一GtkAdjustment
lower- 新的最小值
自 2.14 起
另請參見
GtkAdjustment


------------ KeyGTK3gtk_adjustment_set_page_increment ----

gtk_adjustment_set_page_increment
設置調整的頁面增量。請參閱gtk_adjustment_set_lower（） 瞭解如何在設置多個調整屬性時壓縮信號的多次發射。?changed?
語法
參數
adjustment- 一GtkAdjustment
page_increment- 新頁面增量
自 2.14 起
另請參見
GtkAdjustment


------------ KeyGTK3gtk_adjustment_set_page_size ----

gtk_adjustment_set_page_size
設置調整的頁面大小。請參閱gtk_adjustment_set_lower（） 瞭解如何壓縮 Gtk 調整的多個發射：：設置多個調整屬性時更改信號。
語法
參數
adjustment- 一GtkAdjustment
page_size- 新的頁面大小
自 2.14 起
另請參見
GtkAdjustment


------------ KeyGTK3gtk_adjustment_set_step_increment ----

gtk_adjustment_set_step_increment
設置調整的步長增量。請參閱gtk_adjustment_set_lower（） 瞭解如何在設置多個調整屬性時壓縮信號的多次發射。?changed?
語法
參數
adjustment- 一GtkAdjustment
step_increment- 新的步驟增量
自 2.14 起
另請參見
GtkAdjustment


------------ KeyGTK3gtk_adjustment_set_upper ----

gtk_adjustment_set_upper
設置調整的最大值。請注意，如果頁面大小屬性不為零，則值將受到 byupper - 頁面大小的限制。請參閱gtk_adjustment_set_lower（） 瞭解如何在設置多個調整屬性時壓縮信號的多次發射。?changed?
語法
參數
adjustment- 一GtkAdjustment
upper- 新的最大值
自 2.1 起
另請參見
GtkAdjustment


------------ KeyGTK3gtk_adjustment_set_value ----

gtk_adjustment_set_value
設置值。該值被鉗制為位於 和 之間。請注意，對於 在 中使用的調整，允許值的有效範圍從 到 - 。GtkAdjustment?lower??upper?GtkScrollbar?lower??upper??page_size?
語法
參數
adjustment- 一個.GtkAdjustment
value- 新值。
另請參見
GtkAdjustment


------------ KeyGTK3gtk_adjustment_value_changed ----

gtk_adjustment_value_changed
從 發出信號。這通常由所有者在更改屬性後調用。?value_changed?GtkAdjustmentGtkAdjustment?value?
語法
參數
adjustment- 一GtkAdjustment
另請參見
GtkAdjustment


------------ KeyGTK3gtk_alignment_get_padding ----

gtk_alignment_get_padding
獲取小部件不同側面的填充。請參見gtk_alignment_set_padding（）。
語法
參數
alignment- 一GtkAlignment
padding_top- 存儲小部件頂部的填充的位置，或 NULL。[輸出][允許-無]
padding_bottom- 存儲小部件底部填充的位置，或 NULL。[輸出][允許-無]
padding_left- 存儲小部件左側填充的位置，或 NULL。[輸出][允許-無]
padding_right- 位置存儲小部件右側的填充，或 NULL。[輸出][允許-無]
2.4 起
另請參見
GtkAlignment


------------ KeyGTK3gtk_alignment_new ----

gtk_alignment_new
創建新的 .GtkAlignment
語法
參數
xalign- 子構件的水準對齊方式，從 0（左）到 1（右）。
yalign- 子構件的垂直對齊方式，從 0（頂部）到 1（底部）。
xscale- 子小部件水準擴展以填充未使用空間的量，從 0 到 1。值為 0 表示子小部件永遠不應擴展。值為 1 表示子構件將展開以填充為 分配的所有空間。GtkAlignment
yscale- 子小部件垂直擴展以填充未使用空間的量，從 0 到 1。這些值類似於 xscale。
返回
新的 .GtkAlignment
另請參見
GtkAlignment


------------ KeyGTK3gtk_alignment_set ----

gtk_alignment_set
設置值。GtkAlignment
語法
參數
alignment- 一個.GtkAlignment
xalign- 子構件的水準對齊方式，從 0（左）到 1（右）。
yalign- 子構件的垂直對齊方式，從 0（頂部）到 1（底部）。
xscale- 子小部件水準擴展以填充未使用空間的量，從 0 到 1。值為 0 表示子小部件永遠不應擴展。值為 1 表示子構件將展開以填充為 分配的所有空間。GtkAlignment
yscale- 子小部件垂直擴展以填充未使用空間的量，從 0 到 1。這些值類似於 xscale。
另請參見
GtkAlignment


------------ KeyGTK3gtk_alignment_set_padding ----

gtk_alignment_set_padding
設置構件不同側面的填充。填充會向構件的側面添加空白區域。例如，這可以通過在左側添加填充來用於向右縮進子小部件。
語法
參數
alignment- 一GtkAlignment
padding_top- 小部件頂部的填充
padding_bottom- 小部件底部的填充
padding_left- 小部件左側的填充
padding_right- 小部件右側的填充。
自 2.
另請參見
GtkAlignment


------------ KeyGTK3gtk_alternative_dialog_button_order ----

gtk_alternative_dialog_button_order
gtk_alternative_dialog_button_order自版本 3.10 起已棄用，不應在新編寫的代碼中使用。已棄用如果對話方塊需要在螢幕螢幕上使用備用按鈕順序，則返回 TRUE。Seegtk_dialog_set_alternative_button_order（） 瞭解有關替代按鈕順序的更多詳細資訊。如果需要使用此功能，則可能應連接到與螢幕關聯的物件上的 ：：notify：gtk-alternative-button-order 信號，以便在按鈕順序設置更改時收到通知。GtkSettings
語法
參數
screen- a 或 NULL 以使用預設螢幕。[允許-無]GdkScreen
返回
是否應使用備用按鈕順序
自 2.6 起
另請參見
GtkDialog


------------ KeyGTK3gtk_application_add_accelerator ----

gtk_application_add_accelerator
安裝一個加速器，當按下加速器所特有的鍵組合時，該加速器將導致命名操作被啟動。加速器必須是一個字串，可以通過gtk_accelerator_parse（）解析，例如”q“或 ？p?.action_name必須是操作的名稱，因為它將在應用程式功能表中使用，即已添加到應用程式的操作使用？app引用。首碼和視窗特定的操作，帶有 “win.？首碼。GtkApplication 還從 ？accel？屬性在傳遞給gtk_application_set_app_menu（） andgtk_application_set_menubar（），這通常比為每個加速器調用此函數更方便。GMenuModels
語法
參數
application- 一GtkApplication
accelerator- 加速器字串
action_name- 要啟動的操作的名稱
parameter- 啟動操作時要傳遞的參數，如果操作不接受啟動參數，則為 NULL。[允許-無]
自 3.4 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_add_window ----

gtk_application_add_window
向應用程式添加一個視窗。此調用等效於將視窗的屬性設置為應用程式。通常，應用程式和視窗之間的連接將一直保持到視窗被破壞，但您可以使用gtk_application_remove_window（）顯式刪除它。GTK+將保持應用程式運行，只要它具有任何視窗。?application?
語法
參數
application- 一GtkApplication
window- 一GtkWindow
自 3.0 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_get_accels_for_action ----

gtk_application_get_accels_for_action
獲取當前與給定操作關聯的加速器。
語法
參數
application- 一GtkApplication
detailed_action_name- 詳細的操作名稱，指定操作和目標以獲取加速器
返回
用於detailed_action_name的加速器，asa 空終止陣列。不再需要時，可使用 g_strfreev（） 免費。[轉移完整]
自 3.12 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_get_active_window ----

gtk_application_get_active_window
獲取 “活動？”窗口。使用中視窗是最近獲得焦點的視窗（在應用程式內）。如果另一個應用程式有焦點，則此視窗可能此視窗暫時沒有焦點 - 這只是此應用程式中最近最集中的視窗。
語法
參數
application- 一GtkApplication
返回
使用中視窗。[無轉移]
3.6 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_get_app_menu ----

gtk_application_get_app_menu
返回已設置為 withgtk_application_set_app_menu（） 的功能表模型。
語法
參數
application- 一GtkApplication
返回
應用程式的應用程式功能表。[無轉移]
自 3.4 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_get_menubar ----

gtk_application_get_menubar
返回已設置為 withgtk_application_set_menubar（） 的功能表模型。
語法
參數
application- 一GtkApplication
返回
應用程式視窗的功能表列。[無轉移]
自 3.4 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_get_windows ----

gtk_application_get_windows
獲取與應用程式關聯的清單。該清單按最近獲得焦點的視窗進行排序，使得第一元素是當前獲得焦點的視窗。（對於為瞬態視窗選擇父級很有用。不應以任何方式修改返回的清單。它將僅在下一次焦點更改或視窗創建或刪除之前保持有效。GtkWindows
語法
參數
application- 一GtkApplication
返回
的 a 的 。[元素型 GtkWindow][無轉移]GListGtkWindow
自 3.0 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_get_window_by_id ----

gtk_application_get_window_by_id
返回具有給定 ID 的 。GtkApplicationWindow
語法
參數
application- 一GtkApplication
id- 識別字號
返回
ID 為 ID 的視窗，如果沒有 ID 為 ID 的視窗，則為 NULL。
3.6 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_inhibit ----

gtk_application_inhibit
通知會話管理器應禁止某些類型的操作。這不能保證適用於所有平臺和所有類型的操作。應用程式應在開始不應中斷的操作（如創建 CD 或 DVD）時調用此方法。可能被阻止的操作的類型由 flags 參數指定。當應用程式完成操作時，它應該調用gtk_application_uninhibit（）以除去抑制劑。請注意，一個應用程式可以有多個抑制劑，並且所有必須單獨去除。當應用程式退出時，抑制劑也會被清除。應用程式不應期望它們始終能夠阻止該操作。在大多數情況下，使用者可以選擇強制執行操作。原因應該簡短明瞭。如果給出了視窗，會話管理器可能會將使用者指向此視窗，以瞭解有關禁止該操作的原因的詳細資訊。
語法
參數
application- 的GApplication
window- a 或 NULL。[允許-無]GtkWindow
flags- 應禁止哪些類型的行為
reason- 一個簡短的，人類可讀的字串，解釋了為什麼這些操作被禁止。[允許-無]
返回
用於唯一標識此請求的非零 Cookie。它應該用作gtk_application_uninhibit（）的參數，以便刪除請求。如果平臺不支持禁止或請求由於某種原因而失敗，則返回 0。
自 3.4 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_is_inhibited ----

gtk_application_is_inhibited
確定標誌中指定的任何操作當前是否被禁止（可能被其他應用程式禁止）。
語法
參數
application- 的GApplication
flags- 應查詢哪些類型的操作
返回
如果 flags 中指定的任何操作被禁止，則為 TRUE
自 3.4 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_list_action_descriptions ----

gtk_application_list_action_descriptions
列出具有關聯加速器的詳細操作名稱。請參見gtk_application_set_accels_for_action（）。
語法
參數
application- 一GtkApplication
返回
一個以 NULL 結尾的字串陣列，完成時可用，g_strfreev（）。[轉移完整]
自 3.12 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_new ----

gtk_application_new
創建新實例。使用 時，不必手動調用 gtk_init（）。一旦應用程式註冊為主實例，就會立即調用它。具體來說，gtk_init（） 在信號的預設處理常式中調用。因此，在使用任何 GTK+ API 之前，子類應在其處理常式中連結起來。請注意，命令列參數不會傳遞給gtk_init（）。通過命令列參數提供的所有GTK+功能也可以通過設置合適的環境變數（如G_DEBUG）來實現，因此這應該不是一個大問題。如果絕對必須支援 GTK+ 命令列參數，則可以在創建應用程式實例之前顯式調用 gtk_init（）。如果非 NULL，則應用程式 ID 必須有效。Seeg_application_id_is_valid（）.如果未提供應用程式 ID，則某些功能（最明顯的是應用程式唯一性）將被禁用。只有 GTK+ 3.6 或更高版本才允許使用空應用程式 ID。GtkApplicationGtkApplication?startup?GtkApplication?startup?
語法
參數
application_id- 應用程式 ID。 [允許-無]
flags- 應用程式標誌
返回
一個新實例GtkApplication
自 3.0 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_remove_accelerator ----

gtk_application_remove_accelerator
刪除以前使用 gtk_application_add_accelerator（） 添加的加速器。
語法
參數
application- 一GtkApplication
action_name- 要啟動的操作的名稱
parameter- 啟動操作時要傳遞的參數，如果操作不接受啟動參數，則為 NULL。[允許-無]
自 3.4 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_remove_window ----

gtk_application_remove_window
從應用程式中刪除視窗。如果視窗屬於應用程式，則此調用等效於將視窗的屬性設置為 NULL。由於調用此函數，應用程式可能會停止運行。?application?
語法
參數
application- 一GtkApplication
window- 一GtkWindow
自 3.0 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_set_accels_for_action ----

gtk_application_set_accels_for_action
設置零個或多個將觸發給定操作的鍵盤快速鍵。accels 中的第一項將是主加速器，它可能顯示在 UI.To 刪除操作的所有加速器，對 accels 使用空的零終止darray。
語法
參數
application- 一GtkApplication
detailed_action_name- 詳細的操作名稱，指定要與加速器關聯的操作和目標
accels- bygtk_accelerator_parse（）理解的格式的加速器列表。[陣列零終止 = 1]
自 3.1 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_set_app_menu ----

gtk_application_set_app_menu
設置或取消設置應用程式的應用程式功能表。這只能在應用程式的主實例中完成，之後它已被註冊。 是一個好地方來稱呼這個。應用程式功能表是一個功能表，其中包含通常將應用程式作為一個整體來影響的項，而不是作用於特定的視窗或文檔。例如，您會期望看到嗎？偏好？或？退出？在應用程式功能表中，但不是 ？救？阿奎列印？。如果支援，應用程式功能表將由桌面環境呈現。使用基本介面添加操作，以回應用戶選擇這些功能表項目。?startup?GActionMap
語法
參數
application- 一GtkApplication
app_menu- a 或 NULL。[允許-無]GMenuModel
自 3.4 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_set_menubar ----

gtk_application_set_menubar
設置或取消設置應用程式視窗的功能表列。這是傳統意義上的功能表列。這只能在應用程式的主實例中完成，之後它已被註冊。 是一個好地方來稱呼這個。根據桌面環境，這可能顯示在每個視窗的頂部或螢幕的頂部。在某些環境中，如果設置了應用程式功能表和功能表列，則應用程式功能表將顯示為功能表列的第一項。其他環境將兩者視為完全獨立的 - 例如，應用程式功能表可能由桌面shell呈現，而功能表列（如果設置）保留在每個單獨的視窗中。使用基本介面添加操作，以回應用戶選擇這些功能表項目。?startup?GActionMap
語法
參數
application- 一GtkApplication
menubar- a 或 NULL。[允許-無]GMenuModel
自 3.4 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_uninhibit ----

gtk_application_uninhibit
去除已使用 gtk_application_inhibit（） 建立的抑制劑。當應用程式退出時，抑制劑也會被清除。
語法
參數
application- 的GApplication
cookie- 由gtk_application_inhibit（）返回的餅乾
自 3.4 起
另請參見
GtkApplication


------------ KeyGTK3gtk_application_window_get_id ----

gtk_application_window_get_id
返回窗口的唯一 ID。如果尚未將視窗添加到 a ，則返回 0。GtkApplication
語法
參數
window- 一GtkApplicationWindow
返回
視窗的唯一 ID，如果視窗尚未添加到GtkApplication
自 3.
另請參見
GtkApplicationWindow


------------ KeyGTK3gtk_application_window_get_show_menubar ----

gtk_application_window_get_show_menubar
返回視窗是否將根據需要顯示應用程式功能表和功能表列的功能表列。
語法
參數
window- 一GtkApplicationWindow
返回
TRUE 如果視窗在需要時將顯示功能表列，則為 TRUE
自 3.4 起
另請參見
GtkApplicationWindow


------------ KeyGTK3gtk_application_window_new ----

gtk_application_window_new
創建新的 .GtkApplicationWindow
語法
參數
application- 一GtkApplication
返回
新創建的GtkApplicationWindow
自 3.4 起
另請參見
GtkApplicationWindow


------------ KeyGTK3gtk_application_window_set_show_menubar ----

gtk_application_window_set_show_menubar
設置視窗是否根據需要顯示應用程式功能表和功能表列的功能表列。
語法
參數
window- 一GtkApplicationWindow
show_menubar- 是否需要在需要時顯示功能表列
自 3.4 起
另請參見
GtkApplicationWindow


------------ KeyGTK3gtk_app_chooser_button_append_custom_item ----

gtk_app_chooser_button_append_custom_item
將自訂項附加到快顯視窗中顯示的應用程式清單中;每個小元件的專案名稱必須是唯一的。用戶端可以使用提供的名稱作為信號的詳細資訊，以添加對清單中特定自訂項的啟動的回應。另請參見gtk_app_chooser_button_append_separator（）。?custom-item-activated?
語法
參數
self- 一GtkAppChooserButton
name- 自訂項目的名稱
label- 自訂項目的標籤
icon- 自訂專案的圖示
自 3.0 起
另請參見
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_append_separator ----

gtk_app_chooser_button_append_separator
將分隔符號追加到快顯視窗中顯示的應用程式清單。
語法
參數
self- 一GtkAppChooserButton
自 3.0 起
另請參見
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_get_heading ----

gtk_app_chooser_button_get_heading
返回要顯示在對話方塊頂部的文本。
語法
參數
self- 一GtkAppChooserButton
返回
要顯示在對話方塊頂部的文本，或 NULL，在這種情況下，將顯示預設文本
另請參見
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_get_show_default_item ----

gtk_app_chooser_button_get_show_default_item
返回屬性的當前值。?show-default-item?
語法
參數
self- 一GtkAppChooserButton
返回
的價值?show-default-item?
自 3.2 起
另請參見
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_get_show_dialog_item ----

gtk_app_chooser_button_get_show_dialog_item
返回屬性的當前值。?show-dialog-item?
語法
參數
self- 一GtkAppChooserButton
返回
的價值?show-dialog-item?
自 3.0 起
另請參見
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_new ----

gtk_app_chooser_button_new
為應用程式創建新的應用程式，可以處理給定類型的內容。GtkAppChooserButton
語法
參數
content_type- 要顯示應用程式的內容類別型
返回
新創建的GtkAppChooserButton
自 3.0 起
另請參見
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_set_active_custom_item ----

gtk_app_chooser_button_set_active_custom_item
選擇以前添加withgtk_app_chooser_button_append_custom_item（） 的自訂項。使用 gtk_app_chooser_refresh（） 將所選內容置於其初始狀態。
語法
參數
self- 一GtkAppChooserButton
name- 自訂項目的名稱
自 3.0 起
另請參見
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_set_heading ----

gtk_app_chooser_button_set_heading
設置要在對話方塊頂部顯示的文本。如果未設置標題，對話方塊將顯示預設文本。
語法
參數
self- 一GtkAppChooserButton
heading- 包含 Pango 標記的字串[br \=“”
另請參見
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_set_show_default_item ----

gtk_app_chooser_button_set_show_default_item
設置此按鈕的下拉式功能表是否應在頂部顯示給定內容類別型的預設應用程式。
語法
參數
self- 一GtkAppChooserButton
setting- 的新值?show-default-item?
自 3.2 起
另請參見
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_set_show_dialog_item ----

gtk_app_chooser_button_set_show_dialog_item
設置此按鈕的下拉式功能表是否應顯示要觸發 的條目。GtkAppChooserDialog
語法
參數
self- 一GtkAppChooserButton
setting- 的新值?show-dialog-item?
自 3.0 起
另請參見
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_dialog_get_heading ----

gtk_app_chooser_dialog_get_heading
返回要顯示在對話方塊頂部的文本。
語法
參數
self- 一GtkAppChooserDialog
返回
要在對話方塊頂部顯示的文本，或 NULL，在這種情況下，將顯示預設文本
另請參見
GtkAppChooserDialog


------------ KeyGTK3gtk_app_chooser_dialog_get_widget ----

gtk_app_chooser_dialog_get_widget
返回此對話方塊的 。GtkAppChooserWidget
語法
參數
self- 一GtkAppChooserDialog
返回
自我。[無轉移]GtkAppChooserWidget
自 3.0 起
另請參見
GtkAppChooserDialog


------------ KeyGTK3gtk_app_chooser_dialog_new ----

gtk_app_chooser_dialog_new
為提供的 創建一個新的 ，以允許使用者為其選擇應用程式。GtkAppChooserDialogGFile
語法
參數
parent- a 或 NULL。[允許-無]GtkWindow
flags- 此對話方塊的標誌
file- 一GFile
返回
新創建的GtkAppChooserDialog
自 3.0 起
另請參見
GtkAppChooserDialog


------------ KeyGTK3gtk_app_chooser_dialog_new_for_content_type ----

gtk_app_chooser_dialog_new_for_content_type
為提供的內容類別型創建新的內容類別型，以允許使用者為其選擇應用程式。GtkAppChooserDialog
語法
參數
parent- a 或 NULL。[允許-無]GtkWindow
flags- 此對話方塊的標誌
content_type- 內容類別型字串
返回
新創建的GtkAppChooserDialog
自 3.0 起
另請參見
GtkAppChooserDialog


------------ KeyGTK3gtk_app_chooser_dialog_set_heading ----

gtk_app_chooser_dialog_set_heading
設置要在對話方塊頂部顯示的文本。如果未設置標題，對話方塊將顯示預設文本。
語法
參數
self- 一GtkAppChooserDialog
heading- 包含Pango標記的字串
另請參見
GtkAppChooserDialog


------------ KeyGTK3gtk_app_chooser_get_app_info ----

gtk_app_chooser_get_app_info
返回當前選定的應用程式。
語法
參數
self- 一GtkAppChooser
返回
a 表示當前選定的應用程式，如果未選擇任何應用程式，則為 NULL。使用 g_object_unref（） 免費。[轉移完整]GAppInfo
自 3.0 起
另請參見
GtkAppChooser


------------ KeyGTK3gtk_app_chooser_get_content_type ----

gtk_app_chooser_get_content_type
返回屬性的當前值。?content-type?
語法
參數
self- 一GtkAppChooser
返回
自我的內容類別型。免費與g_free（）
自 3.0 起
另請參見
GtkAppChooser


------------ KeyGTK3gtk_app_chooser_refresh ----

gtk_app_chooser_refresh
重新載入應用程式清單。
語法
參數
self- 一GtkAppChooser
自 3.
另請參見
GtkAppChooser


------------ KeyGTK3gtk_app_chooser_widget_get_default_text ----

gtk_app_chooser_widget_get_default_text
返回在沒有可以處理內容類別型的應用程式時顯示的文本。
語法
參數
self- 一GtkAppChooserWidget
返回
的價值?default-text?
自 3.
另請參見
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_get_show_all ----

gtk_app_chooser_widget_get_show_all
返回屬性的當前值。?show-all?
語法
參數
self- 一GtkAppChooserWidget
返回
的價值?show-all?
自 3.0 起
另請參見
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_get_show_default ----

gtk_app_chooser_widget_get_show_default
返回屬性的當前值。?show-default?
語法
參數
self- 一GtkAppChooserWidget
返回
的價值?show-default?
自 3.0 起
另請參見
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_get_show_fallback ----

gtk_app_chooser_widget_get_show_fallback
返回屬性的當前值。?show-fallback?
語法
參數
self- 一GtkAppChooserWidget
返回
的價值?show-fallback?
自 3.0 起
另請參見
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_get_show_other ----

gtk_app_chooser_widget_get_show_other
返回屬性的當前值。?show-other?
語法
參數
self- 一GtkAppChooserWidget
返回
的價值?show-other?
自 3.0 起
另請參見
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_get_show_recommended ----

gtk_app_chooser_widget_get_show_recommended
返回屬性的當前值。?show-recommended?
語法
參數
self- 一GtkAppChooserWidget
返回
的價值?show-recommended?
自 3.0 起
另請參見
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_new ----

gtk_app_chooser_widget_new
為應用程式創建新的應用程式，可以處理給定類型的內容。GtkAppChooserWidget
語法
參數
content_type- 要顯示應用程式的內容類別型
返回
新創建的GtkAppChooserWidget
自 3.0 起
另請參見
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_set_default_text ----

gtk_app_chooser_widget_set_default_text
設置在沒有可以處理內容類別型的應用程式時顯示的文本。
語法
參數
self- 一GtkAppChooserWidget
text- 的新值?default-text?
另請參見
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_set_show_all ----

gtk_app_chooser_widget_set_show_all
設置應用選擇器是否應在簡單清單中顯示所有應用程式。
語法
參數
self- 一GtkAppChooserWidget
setting- 的新值?show-all?
自 3.0 起
另請參見
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_set_show_default ----

gtk_app_chooser_widget_set_show_default
設置應用選擇器是否應在單獨的部分中顯示內容類別型的預設處理常式。
語法
參數
self- 一GtkAppChooserWidget
setting- 的新值?show-default?
自 3.0 起
另請參見
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_set_show_fallback ----

gtk_app_chooser_widget_set_show_fallback
設置應用選擇器是否應在單獨的部分中顯示內容類別型的相關應用程式。
語法
參數
self- 一GtkAppChooserWidget
setting- 的新值?show-fallback?
自 3.0 起
另請參見
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_set_show_other ----

gtk_app_chooser_widget_set_show_other
設置應用選擇器是否應顯示與內容類別型無關的應用程式。
語法
參數
self- 一GtkAppChooserWidget
setting- 的新值?show-other?
自 3.0 起
另請參見
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_set_show_recommended ----

gtk_app_chooser_widget_set_show_recommended
設置應用選擇器是否應在單獨的部分中顯示內容類別型的推薦應用程式。
語法
參數
self- 一GtkAppChooserWidget
setting- 的新值?show-recommended?
自 3.0 起
另請參見
GtkAppChooserWidget


------------ KeyGTK3gtk_arrow_new ----

gtk_arrow_new
創建新的構件。GtkArrow
語法
參數
arrow_type- 一個有效的 .GtkArrowType
shadow_type- 一個有效的 .GtkShadowType
返回
新的小部件。GtkArrow
另請參見
GtkArrow


------------ KeyGTK3gtk_arrow_set ----

gtk_arrow_set
設置 、箭頭的方向和樣式。GtkArrow
語法
參數
arrow- 類型的小部件。GtkArrow
arrow_type- 一個有效的 .GtkArrowType
shadow_type- 一個有效的 .[br \=“”GtkShadowType
另請參見
GtkArrow


------------ KeyGTK3gtk_aspect_frame_new ----

gtk_aspect_frame_new
創建一個新的 .GtkAspectFrame
語法
參數
label- 標籤文本。[允許-無]
xalign- 在 .範圍從 0.0（左對齊）到 1.0（右對齊）GtkAspectFrame
yalign- 在 .範圍從 0.0（頂部對齊）到 1.0（底部對齊）GtkAspectFrame
ratio- 所需的寬高比。
obey_child- 如果為 TRUE，則忽略比例，並且從孩子的要求中獲取縱向。
返回
新的 .GtkAspectFrame
另請參見
GtkAspectFrame


------------ KeyGTK3gtk_aspect_frame_set ----

gtk_aspect_frame_set
為現有 設置參數。GtkAspectFrame
語法
參數
aspect_frame- 一GtkAspectFrame
xalign- 在 .範圍從 0.0（左對齊）到 1.0（右對齊）GtkAspectFrame
yalign- 在 .範圍從 0.0（頂部對齊）到 1.0（底部對齊）GtkAspectFrame
ratio- 所需的寬高比。
obey_child- 如果為 TRUE，則忽略比例，並且從孩子的要求中獲取縱向。[br \=“”
另請參見
GtkAspectFrame


------------ KeyGTK3gtk_assistant_add_action_widget ----

gtk_assistant_add_action_widget
將小部件添加到 的操作區域。GtkAssistant
語法
參數
assistant- 一GtkAssistant
child- 一GtkWidget
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_append_page ----

gtk_assistant_append_page
將頁面追加到助手。
語法
參數
assistant- 一GtkAssistant
page- 一GtkWidget
返回
插入頁面的索引（從 0 開始）
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_commit ----

gtk_assistant_commit
擦除已訪問的頁面歷史記錄，以便不會在當前頁面上關閉後退按鈕，並從後續頁面中刪除取消按鈕。當截至當前頁面的資訊在以後被視為永久資訊且無法修改或撤銷時，請使用此選項。例如，在使用者在確認頁面上按一下“應用”後，向跟蹤跟蹤長時間運行的不可逆操作的進度頁。
語法
參數
assistant- 一GtkAssistant
2.22 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_get_current_page ----

gtk_assistant_get_current_page
返回當前頁的頁碼。
語法
參數
assistant- 一GtkAssistant
返回
助手中當前頁面的索引（從 0 開始），如果助手沒有頁面或沒有當前頁面，則為 -1。
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_get_nth_page ----

gtk_assistant_get_nth_page
返回頁碼 page_num 中包含的子構件。
語法
參數
assistant- 一GtkAssistant
page_num- 助手中頁面的索引，或 -1 獲取最後一頁
返回
子小部件或 NULLif page_numis超出界限。[無轉移]
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_get_n_pages ----

gtk_assistant_get_n_pages
返回助手中的頁數
語法
參數
assistant- 一GtkAssistant
返回
助手中的頁數
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_get_page_complete ----

gtk_assistant_get_page_complete
獲取頁面是否完成。
語法
參數
assistant- 一GtkAssistant
page- 一頁助手
返回
如果頁面已完成，則為 TRUE。
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_get_page_header_image ----

gtk_assistant_get_page_header_image
gtk_assistant_get_page_header_image自版本 3.2 起已棄用，不應在新編寫的代碼中使用。自 GTK+ 3.2 起，不再顯示標頭;改為將頁眉裝飾添加到頁面內容中。獲取頁的標頭圖像。
語法
參數
assistant- 一GtkAssistant
page- 一頁助手
返回
頁面的標題圖像，如果頁面沒有標題圖像，則為 NULL。[無轉移]
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_get_page_side_image ----

gtk_assistant_get_page_side_image
gtk_assistant_get_page_side_image自版本 3.2 起已棄用，不應在新編寫的代碼中使用。從GTK+ 3.2開始，側邊欄圖像不再顯示。獲取頁面的側面圖像。
語法
參數
assistant- 一GtkAssistant
page- 一頁助手
返回
頁面的側面圖像，如果頁面沒有側面圖像，則為 NULL。[無轉移]
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_get_page_title ----

gtk_assistant_get_page_title
獲取頁面的標題。
語法
參數
assistant- 一GtkAssistant
page- 一頁助手
返回
頁面標題
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_get_page_type ----

gtk_assistant_get_page_type
獲取頁面的頁面類型。
語法
參數
assistant- 一GtkAssistant
page- 一頁助手
返回
頁面的頁面類型
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_insert_page ----

gtk_assistant_insert_page
在助手中的給定位置插入頁面。
語法
參數
assistant- 一GtkAssistant
page- 一GtkWidget
position- 要插入頁面的索引（從 0 開始），或 -1 將頁面附加到助手
返回
插入頁面的索引（從 0 開始）
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_new ----

gtk_assistant_new
創建新的 .GtkAssistant
返回
新創建的GtkAssistant
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_next_page ----

gtk_assistant_next_page
導航到下一頁。在沒有下一頁時調用此函數是一個程式設計錯誤。此函數用於創建該類型的頁面。GTK_ASSISTANT_PAGE_CUSTOM
語法
參數
assistant- 一GtkAssistant
自 3.0 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_prepend_page ----

gtk_assistant_prepend_page
將頁面預置到助手之前。
語法
參數
assistant- 一GtkAssistant
page- 一GtkWidget
返回
插入頁面的索引（從 0 開始）
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_previous_page ----

gtk_assistant_previous_page
導航到上一個訪問的頁面。當沒有上一頁可用時調用此函數是一個程式設計錯誤。此函數用於創建該類型的頁面。GTK_ASSISTANT_PAGE_CUSTOM
語法
參數
assistant- 一GtkAssistant
自 3.
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_remove_action_widget ----

gtk_assistant_remove_action_widget
從 的操作區域中刪除小部件。GtkAssistant
語法
參數
assistant- 一GtkAssistant
child- 一GtkWidget
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_remove_page ----

gtk_assistant_remove_page
從助手中刪除page_num的頁面。
語法
參數
assistant- 一GtkAssistant
page_num- 助手中頁面的索引，或 -1 刪除最後一頁
自 3.2 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_set_current_page ----

gtk_assistant_set_current_page
將頁面切換到page_num。請注意，這僅在自訂按鈕中是必需的，因為助手流可以設置為withgtk_assistant_set_forward_page_func（）。
語法
參數
assistant- 一GtkAssistant
page_num- 要切換到的頁面的索引，從 0 開始。如果為負，則將使用最後一頁。如果大於助手中的頁數，則不會執行任何操作。
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_set_forward_page_func ----

gtk_assistant_set_forward_page_func
設置page_func的頁面轉發功能。此功能將用於確定當使用者按下前進按鈕時下一頁的內容。將page_func設置為 NULL 將使助手使用默認的轉發功能，該函數僅轉到下一個可見頁面。
語法
參數
assistant- 一GtkAssistant
page_func- 或 NULLto 使用默認的。[允許-無]GtkAssistantPageFunc
data- page_func使用者資料
destroy- 銷毀資料通知程式
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_set_page_complete ----

gtk_assistant_set_page_complete
設置頁面內容是否完整。這將使助手更新按鈕狀態，以便能夠繼續任務。
語法
參數
assistant- 一GtkAssistant
page- 一頁助手
complete- 頁面的完整性狀態
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_set_page_header_image ----

gtk_assistant_set_page_header_image
gtk_assistant_set_page_header_image自 3.2 版起已棄用，不應在新編寫的代碼中使用。自 GTK+ 3.2 起，不再顯示標頭;改為將頁眉裝飾添加到頁面內容中。設置頁面的頁眉圖像。
語法
參數
assistant- 一GtkAssistant
page- 一頁助手
pixbuf- 新的標題圖像頁面。[允許-無]
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_set_page_side_image ----

gtk_assistant_set_page_side_image
gtk_assistant_set_page_side_image自版本 3.2 起已棄用，不應在新編寫的代碼中使用。從GTK+ 3.2開始，側邊欄圖像不再顯示。設置頁面的側面圖像。當頁面是當前頁面時，此圖像以前顯示在助手的側面區域中。
語法
參數
assistant- 一GtkAssistant
page- 一頁助手
pixbuf- 新的側面圖像頁面。[允許-無]
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_set_page_title ----

gtk_assistant_set_page_title
設置頁面的標題。當頁面是當前頁面時，標題將顯示在助手頁眉區域中。
語法
參數
assistant- 一GtkAssistant
page- 一頁助手
title- 頁面的新標題
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_set_page_type ----

gtk_assistant_set_page_type
設置頁面的頁面類型。頁面類型決定了助手中的頁面行為。
語法
參數
assistant- 一GtkAssistant
page- 一頁助手
type- 頁面的新類型
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3gtk_assistant_update_buttons_state ----

gtk_assistant_update_buttons_state
強制助手重新計算按鈕狀態。GTK+在大多數情況下會自動處理這個問題，例如，當使用者轉到其他頁面時，或者當頁面的可見性或完整性發生變化時。可能需要調用此函數的一種情況是，當更改當前頁面上的值會影響助手的未來頁面流時。
語法
參數
assistant- 一GtkAssistant
自 2.10 起
另請參見
GtkAssistant


------------ KeyGTK3GTK_BINARY_AGE ----

GTK_BINARY_AGE
GTK_BINARY_AGE
與gtk_get_binary_age（）一樣，但來自應用程式編譯時使用的標頭，而不是來自應用程式運行時的庫連結。
另請參見
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_bindings_activate ----

gtk_bindings_activate
查找匹配鍵值和修飾符的鍵綁定，並在物件上啟動綁定。
語法
參數
object- 找到綁定時要啟動的對象
keyval- 綁定的鍵值
modifiers- 綁定的鍵修飾符
返回
如果找到並啟動綁定，則為 TRUE
另請參見
gtk3-Bindings


------------ KeyGTK3gtk_bindings_activate_event ----

gtk_bindings_activate_event
查找物件的鍵綁定以查找一個匹配事件，如果找到一個，請將其啟動。
語法
參數
object- a（通常必須是小部件）GObject
event- 一GdkEventKey
返回
如果找到匹配的鍵綁定，則為 TRUE
2.4 起
另請參見
gtk3-Bindings


------------ KeyGTK3gtk_binding_entry_add_signal ----

gtk_binding_entry_add_signal
使用修飾符覆蓋或安裝 keyval 的新鍵綁定，onbinding_set。啟動綁定後，將在目標小部件上發出signal_name，並使用n_args Varargs 作為參數。
語法
參數
binding_set- a 安裝條目GtkBindingSet
keyval- 綁定到安裝的鍵值
modifiers- 要安裝的綁定的鍵修飾符
signal_name- 啟動時執行的信號
n_args- 要signal_name的參數數
...- signal_name參數
另請參見
gtk3-Bindings


------------ KeyGTK3gtk_binding_entry_add_signall ----

gtk_binding_entry_add_signall
使用修飾符覆蓋或安裝 keyval 的新鍵綁定，onbinding_set。
語法
參數
binding_set- a 添加信號GtkBindingSet
keyval- 鍵值
modifiers- 鍵修飾符
signal_name- 要綁定的信號名稱
binding_args- 信號參數清單。[無轉移][元素型 GtkBindingArg]GtkBindingArg
另請參見
gtk3-Bindings


------------ KeyGTK3gtk_binding_entry_add_signal_from_string ----

gtk_binding_entry_add_signal_from_string
解析來自signal_desc的信號描述，並將其合併到binding_set中。信號描述可以將一個複合鍵綁定到一個或多個信號：1234[/語法] [語法]綁定“鍵”{“信號名稱”（param，...）...}[/語法]
或者它們也可以取消綁定複合鍵：1[/語法] [語法]解綁定“鍵”[/語法]
複合鍵必須採用可以解析bygtk_accelerator_parse（））的格式。
語法
參數
binding_set- 一GtkBindingSet
signal_desc- 信號描述
返回
G_TOKEN_NONE如果信號被成功解析和添加，否則為預期的權杖
自 3.0 起
另請參見
gtk3-Bindings


------------ KeyGTK3gtk_binding_entry_remove ----

gtk_binding_entry_remove
刪除以前在 binding_set 上安裝的 viagtk_binding_entry_add_signal（） 綁定。
語法
參數
binding_set- a 刪除條目GtkBindingSet
keyval- 要刪除的綁定的鍵值
modifiers- 要刪除的綁定的鍵修飾符
另請參見
gtk3-Bindings


------------ KeyGTK3gtk_binding_entry_skip ----

gtk_binding_entry_skip
在 binding_set 上安裝綁定會導致鍵查找中止，以防止啟動較低優先順序集的綁定。
語法
參數
binding_set- a 跳過條目GtkBindingSet
keyval- 要跳過的綁定的鍵值
modifiers- 鍵修飾符的綁定跳過
自 2.12 起
另請參見
gtk3-Bindings


------------ KeyGTK3gtk_binding_set_activate ----

gtk_binding_set_activate
withinbinding_set找到與鍵值和修飾符匹配的鍵綁定，並啟動物件上的綁定。
語法
參數
binding_set- 一個設置啟動GtkBindingSet
keyval- 綁定的鍵值
modifiers- 綁定的鍵修飾符
object- 找到綁定時要啟動的對象
返回
如果找到並啟動綁定，則為 TRUE
另請參見
gtk3-Bindings


------------ KeyGTK3gtk_binding_set_add_path ----

gtk_binding_set_add_path
gtk_binding_set_add_path自 3.0 版起已棄用，不應在新編寫的代碼中使用。此函數由 GtkRC 解析機制在內部使用，用於將匹配模式分配給結構。在 GTK+ 3 中，這些匹配模式未被使用。GtkBindingSet
語法
參數
binding_set- a 添加路徑GtkBindingSet
path_type- 模式適用的路徑類型
path_pattern- 實際匹配模式
priority- 綁定優先順序[br \=“”
另請參見
gtk3-Bindings


------------ KeyGTK3gtk_binding_set_by_class ----

gtk_binding_set_by_class
此函數返回以傳入的類結構的類型名稱命名的綁定集。此函數按需創建新的綁定集。
語法
參數
object_class- 一個有效的類GObject
返回
toobject_class對應的綁定集。
另請參見
gtk3-Bindings


------------ KeyGTK3gtk_binding_set_find ----

gtk_binding_set_find
查找按其全域唯一名稱設置的綁定。set_name可以是用於 gtk_binding_set_new（） 的名稱，也可以是 gtk_binding_set_by_class（） 中使用的類的類型名稱。
語法
參數
set_name- 唯一的綁定集名稱
返回
NULL 或指定的綁定集。[無轉移]
另請參見
gtk3-Bindings


------------ KeyGTK3gtk_binding_set_new ----

gtk_binding_set_new
GTK+ 維護綁定集的全域列表。每個綁定集都有一個唯一的名稱，需要在創建時指定該名稱。
語法
參數
set_name- 此綁定集的唯一名稱
返回
新的綁定集。[轉移完整]
另請參見
gtk3-Bindings


------------ KeyGTK3gtk_bin_get_child ----

gtk_bin_get_child
獲取 的子項，如果 bin 不包含任何子構件，則獲取 NULL。返回的構件沒有添加引用，因此您無需取消引用它。GtkBin
語法
參數
bin- 一GtkBin
返回
指向 的子級的指標。[無轉移][/代碼GtkBin
另請參見
GtkBin


------------ KeyGTK3gtk_border_copy ----

gtk_border_copy
複製 .GtkBorder
語法
參數
border_- 一GtkBorder
返回
border_的副本。
另請參見
GtkStyleContext


------------ KeyGTK3gtk_border_free ----

gtk_border_free
閲婃斁 .GtkBorder
璿硶
鍙傛暟
border_- 涓€GtkBorder
鍙﹁鍙傝
GtkStyleContext


------------ KeyGTK3gtk_border_new ----

gtk_border_new
分配新的元素並將其元素初始化為零。GtkBorder
返回
新分配的 .帶gtk_border_free（）GtkBorder
自 2.14 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_box_get_baseline_position ----

gtk_box_get_baseline_position
獲取由 gtk_box_set_baseline_position（） 設置的值。
語法
參數
box- 一GtkBox
返回
基線位置
自 3.10 起
另請參見
GtkBox


------------ KeyGTK3gtk_box_get_center_widget ----

gtk_box_get_center_widget
檢索框的中心構件。
語法
參數
box- 一GtkBox
返回
中心微件。[無轉移]
自 3.12 起
另請參見
GtkBox


------------ KeyGTK3gtk_box_get_homogeneous ----

gtk_box_get_homogeneous
返回框是否均勻（所有子項的大小相同）。請參見gtk_box_set_homogeneous（）。
語法
參數
box- 一GtkBox
返回
如果框是同質的，則為 TRUE。
另請參見
GtkBox


------------ KeyGTK3gtk_box_get_spacing ----

gtk_box_get_spacing
獲取由 gtk_box_set_spacing（） 設置的值。
語法
參數
box- 一GtkBox
返回
兒童之間的間距
另請參見
GtkBox


------------ KeyGTK3gtk_box_new ----

gtk_box_new
創建新的 .GtkBox
語法
參數
orientation- 盒子的方向。
spacing- 預設情況下要放置在子級之間的圖元數。
返回
一個新的.GtkBox
自 3.0 起
另請參見
GtkBox


------------ KeyGTK3gtk_box_pack_end ----

gtk_box_pack_end
將子項添加到框中，參照框的末尾進行包裝。孩子在參考盒的末端包裝任何其他兒童之後（遠離末端）被包裝。
語法
參數
box- 一GtkBox
child- 要添加到框中GtkWidget
expand- TRUE 如果新子項要分配給 box 的額外空間。額外的空間將在使用此選項的盒子的所有子項之間平均分配
fill- 如果通過擴展選項實際分配給子項而不是只是填充它而給予子項的空間，則為 TRUE。如果展開設置為 FALSE，則此參數不起作用。子 isalways 分配了水準的全高和垂直的全寬。此選項會影響其他維度GtkBoxGtkBox
padding- 在此子項和 itsneighbors 之間放置的額外空間（以圖元為單位），超出屬性指定的全域量。如果 child 是框的其中一端的小部件，則填充圖元也放在子和框的參考邊緣之間?spacing?
另請參見
GtkBox


------------ KeyGTK3gtk_box_pack_start ----

gtk_box_pack_start
將子項添加到框中，參照框的開頭進行包裝。孩子在任何其他孩子包裝後包裝，參考盒子的開始。
語法
參數
box- 一GtkBox
child- 要添加到框中GtkWidget
expand- TRUE 如果新子項要分配給 box 的額外空間。額外的空間將在使用此選項的所有子項之間平均分配
fill- 如果通過擴展選項實際分配給子項而不是只是填充它而給予子項的空間，則為 TRUE。如果展開設置為 FALSE，則此參數不起作用。子 isalways 分配了水準的全高和垂直的全寬。此選項會影響其他維度GtkBoxGtkBox
padding- 在此子項和 itsneighbors 之間放置的額外空間（以圖元為單位），超出屬性指定的全域量。如果 child 是框的其中一端的小部件，則填充圖元也放在子和框的參考邊緣之間?spacing?
另請參見
GtkBox


------------ KeyGTK3gtk_box_query_child_packing ----

gtk_box_query_child_packing
獲取有關如何將兒童包裝到箱子中的資訊。
語法
參數
box- 一GtkBox
child- 要查詢的孩子GtkWidget
expand- 指向擴展子屬性的返回位置的指標。[輸出]
fill- 指向返回填充子屬性位置的指標。[輸出]
padding- 指向返回填充子屬性位置的指標。[輸出]
pack_type- 指向包類型子屬性的返回位置的指標。[輸出]
另請參見
GtkBox


------------ KeyGTK3gtk_box_reorder_child ----

gtk_box_reorder_child
將子項移動到框子項列表中的新位置。該列表包含打包的小部件以及打包的小部件，按照這些小部件被添加到框中的順序排列。構件在框子列表中的位置決定了構件在箱子中的包裝位置。列表中某個位置的子構件將緊隨清單中前面顯示的相同包裝類型的所有其他構件之後進行包裝。GTK_PACK_STARTGTK_PACK_END
語法
參數
box- 一GtkBox
child- 移動GtkWidget
position- 兒童框列表中兒童的新位置，從 0 開始。如果為負，則表示列表的末尾
另請參見
GtkBox


------------ KeyGTK3gtk_box_set_baseline_position ----

gtk_box_set_baseline_position
設置框的基線位置。這個令人敬畏的水準框至少有一個基線對齊子項。如果可用的垂直空間多於請求的空間，並且父級未分配基線，則使用位置來分配基線，以分配外部可用空間。
語法
參數
box- 一GtkBox
position- 一GtkBaselinePosition
自 3.10 起
另請參見
GtkBox


------------ KeyGTK3gtk_box_set_center_widget ----

gtk_box_set_center_widget
設置一個中心小部件;這是一個子小部件，它將相對於框的整個寬度居中，即使兩側的子小部件佔用不同數量的空間。
語法
參數
box- 一GtkBox
widget- 小部件居中。[允許-無]
自 3.1 起
另請參見
GtkBox


------------ KeyGTK3gtk_box_set_child_packing ----

gtk_box_set_child_packing
設置將孩子裝入盒子的方式。
語法
參數
box- 一GtkBox
child- 要設置的孩子GtkWidget
expand- 展開子屬性的新值
fill- 填充子屬性的新值
padding- 填充子屬性的新值
pack_type- 包類型子屬性的新值
另請參見
GtkBox


------------ KeyGTK3gtk_box_set_homogeneous ----

gtk_box_set_homogeneous
設置 box 的屬性，控制 box 的所有子項在框中是否都給定相等的間距。?homogeneous?
語法
參數
box- 一GtkBox
homogeneous- 一個布林值，TRUE 用於創建相等的分配，FALSE 用於變數分配
另請參見
GtkBox


------------ KeyGTK3gtk_box_set_spacing ----

gtk_box_set_spacing
設置 box 的屬性，該屬性是要放置在 box 的子級之間的圖元數。?spacing?
語法
參數
box- 一GtkBox
spacing- 要放在子級之間的圖元數
另請參見
GtkBox


------------ KeyGTK3gtk_buildable_add_child ----

gtk_buildable_add_child
將子項添加到可生成項。type 是一個可選字串，用於描述應如何添加子級。
語法
參數
buildable- 一GtkBuildable
builder- 一GtkBuilder
child- 要添加的子項
type- 子級或 NULL 類型。[允許-無]
自 2.12 起
另請參見
GtkBuildable


------------ KeyGTK3gtk_buildable_construct_child ----

gtk_buildable_construct_child
使用名稱名稱構造可構建的子項。如果 ？構造函數？已在 UI 定義中指定。GtkBuilder
語法
參數
buildable- 一GtkBuildable
builder  -  	GtkBuilder用於構造此物件
name- 要構造的子項的名稱
返回
構造的子項。[轉移完整]
自 2.12 起
另請參見
GtkBuildable


------------ KeyGTK3gtk_buildable_custom_finished ----

gtk_buildable_custom_finished
這類似於gtk_buildable_parser_finished（），但對於可構建物件處理的每個自訂標記，調用一次。
語法
參數
buildable- 一GtkBuildable
builder- 一GtkBuilder
child- 子物件或 NULL 表示非子標記。[允許-無]
tagname- 標籤的名稱
data- 在custom_tag_start中創建的使用者資料
自 2.12 起
另請參見
GtkBuildable


------------ KeyGTK3gtk_buildable_custom_tag_end ----

gtk_buildable_custom_tag_end
這是在可構建物件處理的每個自訂元素的末尾調用的。
語法
參數
buildable- 一GtkBuildable
builder  -  	GtkBuilder用於構造此物件
child- 子物件或 NULL 表示非子標記。[允許-無]
tagname- 標籤名稱
data- 將傳遞到解析器函數的使用者資料。[類型指點儀]
自 2.12 起
另請參見
GtkBuildable


------------ KeyGTK3gtk_buildable_custom_tag_start ----

gtk_buildable_custom_tag_start
這是對下每個未知元素調用的.
語法
參數
buildable- 一GtkBuildable
builder- 用於構造此物件的 aGtkBuilder
child- 子物件或 NULL 表示非子標記。[允許-無]
tagname- 標籤名稱
parser- a 填寫。GMarkupParser
data- 將傳遞到解析器函數中的使用者資料的返回位置。[輸出]
返回
如果物件具有自訂實現，則為 TRUE，如果沒有，則 FALSE。
自 2.12 起
另請參見
GtkBuildable


------------ KeyGTK3gtk_buildable_get_internal_child ----

gtk_buildable_get_internal_child
獲取名為可生成物件的子項的內部子項。
語法
參數
buildable- 一GtkBuildable
builder- 一GtkBuilder
childname- 孩子的名字
返回
可構建物件的內部子級。[無轉移]
自 2.1 起
另請參見
GtkBuildable


------------ KeyGTK3gtk_buildable_get_name ----

gtk_buildable_get_name
獲取可生成物件的名稱。 根據用於構造可構建物件的GtkBuilder UI定義設置名稱。GtkBuilder
語法
參數
buildable- 一GtkBuildable
返回
用 gtk_buildable_set_name（） 設置的名稱
自 2.12 起
另請參見
GtkBuildable


------------ KeyGTK3gtk_buildable_parser_finished ----

gtk_buildable_parser_finished
在生成器完成對 GtkBuilder UI 定義的解析時調用。請注意，每次在生成器上調用gtk_builder_add_from_file（） 或 gtk_builder_add_from_string（） 時，都會調用一次。
語法
參數
buildable- 一GtkBuildable
builder- 一GtkBuilder
自 2.12 起
另請參見
GtkBuildable


------------ KeyGTK3gtk_buildable_set_buildable_property ----

gtk_buildable_set_buildable_property
將屬性名稱名稱設置為可生成物件上的值。
語法
參數
buildable- 一GtkBuildable
builder- 一GtkBuilder
name- 房產名稱
value- 財產價值
自 2.12 起
另請參見
GtkBuildable


------------ KeyGTK3gtk_buildable_set_name ----

gtk_buildable_set_name
設置可生成物件的名稱。
語法
參數
buildable- 一GtkBuildable
name- 要設置的名稱
自 2.12 起
另請參見
GtkBuildable


------------ KeyGTK3gtk_builder_add_callback_symbol ----

gtk_builder_add_callback_symbol
將callback_symbol添加到給定callback_name下的生成器範圍。使用此函數將覆蓋添加的任何回檔符號的 gtk_builder_connect_signals（） 行為。使用此方法可以更好地封裝，因為它不需要在全域命名空間中聲明回檔符號。
語法
參數
builder- 一GtkBuilder
callback_name- 回檔的名稱，如 XML 中預期的那樣
callback_symbol- 回檔指針。[範圍非同步]
自 3.10 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_add_callback_symbols ----

gtk_builder_add_callback_symbols
一個方便的函數，用於為每個符號添加許多回檔而不是callinggtk_builder_add_callback_symbol（）。
語法
參數
builder- 一GtkBuilder
first_callback_name- 回檔的名稱，如 XML 中預期的那樣
first_callback_symbol- 回檔指針。[範圍非同步]
...- 以 NULL 結尾的回檔名稱和回檔符號對的清單
自 3.10 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_add_from_file ----

gtk_builder_add_from_file
解析包含 GtkBuilder UI 定義的檔，並將其與生成器的當前內容合併。大多數用戶可能希望使用gtk_builder_new_from_file（）。錯誤 0 將返回，錯誤將從 或 域中分配 a。嘗試處理此調用的失敗是不合理的。不應將此功能用於不受信任的檔（即：不屬於應用程式的檔）。損壞的檔很容易使程式崩潰，並且記憶體可能洩漏導致報告的故障。當檢測到錯誤時，唯一合理的做法是調用g_error（）。GErrorGTK_BUILDER_ERRORG_MARKUP_ERRORG_FILE_ERRORGtkBuilder
語法
參數
builder- 一GtkBuilder
filename- 要解析的檔的名稱
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
成功時為正值，發生錯誤時為 0
自 2.12 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_add_from_resource ----

gtk_builder_add_from_resource
解析包含 GtkBuilder UI 定義的資源檔，並將其與生成器的當前內容合併。大多數用戶可能希望使用gtk_builder_new_from_resource（）。錯誤 0 將返回，錯誤將從 或 域中分配 a。嘗試處理此調用的失敗是不合理的。當檢測到錯誤時，唯一合理的方法是調用g_error（）。GErrorGTK_BUILDER_ERRORG_MARKUP_ERRORG_RESOURCE_ERROR
語法
參數
builder- 一GtkBuilder
resource_path- 要解析的資源檔的路徑
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
成功時為正值，發生錯誤時為 0
自 3.4 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_add_from_string ----

gtk_builder_add_from_string
分析包含 GtkBuilder UI 定義的字串，並將其與生成器的當前內容合併。大多數用戶可能希望使用gtk_builder_new_from_string（）。錯誤 0 時，將返回錯誤，並且將從 或 域中分配錯誤。嘗試處理此調用的失敗是不合理的。當檢測到錯誤時，唯一合理的方法是調用g_error（）。GErrorGTK_BUILDER_ERRORG_MARKUP_ERROR
語法
參數
builder- 一GtkBuilder
buffer- 要解析的字串
length- 緩衝區的長度（如果緩衝區是 nul 終止的，則可能為 -1）
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
成功時為正值，發生錯誤時為 0
自 2.12 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_add_objects_from_file ----

gtk_builder_add_objects_from_file
解析包含 GtkBuilder UI 定義的檔，僅生成請求的物件，並與生成器的當前內容合併。錯誤 0 將返回，錯誤將從 或 域中分配 a。如果要添加的對象依賴於不是其子物件的對象（例如，依賴於其子物件的 a），則必須在object_ids中顯式列出所有這些物件。GErrorGTK_BUILDER_ERRORG_MARKUP_ERRORG_FILE_ERRORGtkTreeViewGtkTreeModel
語法
參數
builder- 一GtkBuilder
filename- 要解析的檔的名稱
object_ids- 要構建的 nul 終止物件陣列。[陣列零終止 = 1][元素型 utf8]
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
成功時為正值，發生錯誤時為 0
自 2.14 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_add_objects_from_resource ----

gtk_builder_add_objects_from_resource
解析包含 GtkBuilder UI 定義的資源檔，僅構建請求的物件並與構建器的當前內容合併。錯誤 0 將返回，錯誤將從 或 域中分配 a。如果要添加的物件依賴於 notits 子物件的物件（例如，依賴於其子物件的 a），則必須在object_ids中顯式列出所有這些物件。GErrorGTK_BUILDER_ERRORG_MARKUP_ERRORG_RESOURCE_ERRORGtkTreeViewGtkTreeModel
語法
參數
builder- 一GtkBuilder
resource_path- 要解析的資源檔的路徑
object_ids- 要構建的 nul 終止物件陣列。[陣列零終止 = 1][元素型 utf8]
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
成功時為正值，發生錯誤時為 0
自 3.4 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_add_objects_from_string ----

gtk_builder_add_objects_from_string
解析包含 GtkBuilder UI 定義的字串，僅生成請求的物件並與生成器的當前內容合併。錯誤 0 時，將返回錯誤，並且將從 或 域中分配錯誤。如果要添加的對象依賴於不是其子物件的對象（例如，依賴於其子物件的 a），則必須在object_ids中顯式列出所有這些物件。GErrorGTK_BUILDER_ERRORG_MARKUP_ERRORGtkTreeViewGtkTreeModel
語法
參數
builder- 一GtkBuilder
buffer- 要解析的字串
length- 緩衝區的長度（如果緩衝區是 nul 終止的，則可能為 -1）
object_ids- 要構建的 nul 終止物件陣列。[陣列零終止 = 1][元素型 utf8]
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
成功時為正值，發生錯誤時為 0
自 2.14 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_connect_signals ----

gtk_builder_connect_signals
此方法是 gtk_builder_connect_signals_full（） 的更簡單變體。它使用顯式添加到構建器中的符號，並預先調用togtk_builder_add_callback_symbol（）。在符號被顯著添加的情況下;它使用 的內省功能（通過打開模組 NULL）來查看應用程式的符號表。從這裡開始，它嘗試將介面描述中給出的信號處理常式名稱與應用程式中的符號進行匹配，並連接信號。請注意，此函數只能調用一次，後續調用將不執行任何操作。請注意，除非調用gtk_builder_add_callback_symbol（） for 所有由載入的 XML 引用的信號回檔，否則此函數將需要在平臺上受支援。如果依賴符號表中查找回檔的支持，應注意以下細節：在編譯Windows應用程式時，必須聲明信號回檔，否則它們將不會放在符號表中。在Linux和Unices上，這不是必需的;相反，應用程式應該使用 -Wl,--export-dynamic CFLAGS 進行編譯，並連結到反對gmodule-export-2.0。GModuleGModuleGModuleG_MODULE_EXPORT
語法
參數
builder- 一GtkBuilder
user_data- 使用者資料與所有信號一起傳回
自 2.12 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_connect_signals_full ----

gtk_builder_connect_signals_full
這個函數可以被認為是gtk_builder_connect_signals（）的解釋性語言綁定版本，除了它不需要GModule才能正常工作。
語法
參數
builder- 一GtkBuilder
func- 用於連接信號的函數。[範圍調用]
user_data- 將傳遞到連接函數的任意資料
自 2.12 起
另請參見
GtkBuilder


------------ KeyGTK3GTK_BUILDER_ERROR ----

GTK_BUILDER_ERROR
GTK_BUILDER_ERROR
[璿硶]#define GTK_BUILDER_ERROR錛坓tk_builder_error_quark 錛堬級錛塠/璿硶
鍙﹁鍙傝
GtkBuilder


------------ KeyGTK3gtk_builder_expose_object ----

gtk_builder_expose_object
將物件添加到生成器物件集區，以便可以像生成器生成的任何其他物件一樣引用它。
語法
參數
builder- 一GtkBuilder
name- 向構建器公開的物件的名稱
object- 要公開的物件
3.8 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_get_application ----

gtk_builder_get_application
獲取與生成器關聯的 。用於根據請求從構建器正在載入的 XML 創建操作代理。預設情況下，構建器使用預設應用程式：fromg_application_get_default（） 的應用程式。如果要使用其他應用程式來構造代理，請使用 gtk_builder_set_application（）。GtkApplicationGtkApplication
語法
參數
builder- 一GtkBuilder
返回
構建器正在使用的應用程式，或 NULL。[無轉移]
自 3.10 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_get_object ----

gtk_builder_get_object
獲取名為 name 的對象。請注意，此函數不會增加返回物件的引用計數。
語法
參數
builder- 一GtkBuilder
name- 要獲取的對象的名稱
返回
名為 nameor NULL 的物件，如果在物件樹中找不到它。[無轉移]
自 2.12 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_get_objects ----

gtk_builder_get_objects
獲取生成器已構造的所有物件。請注意，此函數不會遞增返回物件的引用計數。
語法
參數
builder- 一GtkBuilder
返回
一個新分配的，包含實例構建的所有物件。它應該byg_slist_free（）釋放。[元素類型 G 物件][轉移容器]GSListGtkBuilder
自 2.12 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_get_translation_domain ----

gtk_builder_get_translation_domain
獲取生成器的轉換域。
語法
參數
builder- 一GtkBuilder
返回
翻譯域。此字串歸生成器物件所有，不得修改或釋放。
自 2.12 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_get_type_from_name ----

gtk_builder_get_type_from_name
使用具有該目的的虛函數按名稱查找類型。這主要在類型上實現介面時使用。GtkBuilderGtkBuildable
語法
參數
builder- 一GtkBuilder
type_name- 鍵入名稱查找
返回
如果未找到任何類型，則為 type_nameor 找到GTypeG_TYPE_INVALID
自 2.12 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_lookup_callback_symbol ----

gtk_builder_lookup_callback_symbol
獲取先前添加到生成器的符號，gtk_builder_add_callback_symbols（）此函數旨在用於語言綁定或用於可能使用gtk_builder_connect_signals_full（） 的信號連接的任何情況
語法
參數
builder- 一GtkBuilder
callback_name- 回檔的名稱
返回
生成器中的回檔符號callback_name，或 NULL
自 3.10 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_new ----

gtk_builder_new
創建新的空生成器物件。僅當您打算togtk_builder_add_from_file（），gtk_builder_add_from_resource（）orgtk_builder_add_from_string（））進行多次調用以便將多個UIdescriptions合併到單個構建器中時，此函數才有用。大多數用戶可能希望使用gtk_builder_new_from_file（），gtk_builder_new_from_resource（）或gtk_builder_new_from_string（）。
返回
一個新的（空的）物件GtkBuilder
自 2.12 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_new_from_file ----

gtk_builder_new_from_file
在檔檔案名中生成 GtkBuilder UI 定義。如果打開檔或解析描述時出錯，則程式將被中止。您只應嘗試解析作為程式的一部分提供的使用者介面描述。
語法
參數
filename- 使用者介面描述檔的檔案名
返回
a 包含所描述的介面GtkBuilder
自 3.10 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_new_from_resource ----

gtk_builder_new_from_resource
在resource_path生成 GtkBuilder UI 定義。如果在查找復活或解析描述時出錯，則程式將被中止。
語法
參數
resource_path- 資源路徑GResource
返回
a 包含所描述的介面GtkBuilder
自 3.10 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_new_from_string ----

gtk_builder_new_from_string
生成由字串（採用GtkBuilder UI定義格式）描述的使用者介面。如果字串以 NULL 結尾，則長度應為 -1。如果 length 不是 -1，則它是字串的長度。如果解析字串時出錯，則程式將被中止。不應嘗試從不受信任的源分析使用者介面描述。
語法
參數
string- 使用者介面 （XML） 描述
length- 字串的長度，或 -1
返回
a 包含字串描述的介面GtkBuilder
自 3.10 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_set_application ----

gtk_builder_set_application
設置與生成器關聯的應用程式。僅當流程中有多個函數時，才需要此函數。應用程式不能為空。GApplication
語法
參數
builder- 一GtkBuilder
application- 一GtkApplication
自 3.10 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_set_translation_domain ----

gtk_builder_set_translation_domain
設置生成器的翻譯域。看。?translation-domain?
語法
參數
builder- 一GtkBuilder
domain- 翻譯域或空。[允許-無]
自 2.12 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_value_from_string ----

gtk_builder_value_from_string
此函數從字串中取消元化值。此函數在值參數上調用g_value_init（），因此無需事先對其進行初始化。此函數可以處理 char、uchar、布林值、int、uint、long、ulong、enum、flags、float、double、string 和 type 值。對類型值的支持仍然要來。出現錯誤時，將返回 FALSE，並從域中分配錯誤。GdkColorGdkRGBAGtkAdjustmentGtkWidgetGErrorGTK_BUILDER_ERROR
語法
參數
builder- 一GtkBuilder
pspec- 為財產GParamSpec
string- 值的字串表示形式
value- 將結果存儲進去。GValue
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
成功時真
自 2.12 起
另請參見
GtkBuilder


------------ KeyGTK3gtk_builder_value_from_string_type ----

gtk_builder_value_from_string_type
與 gtk_builder_value_from_string（） 一樣，此函數從字串中分離出一個值，但採用 a 而不是 .此函數在值參數上調用 g_value_init（），因此無需事先對其進行初始化。出現錯誤時，將返回 FALSE，並從域中分配錯誤。GTypeGParamSpecGErrorGTK_BUILDER_ERROR
語法
參數
builder- 一GtkBuilder
type- 值的GType
string- 值的字串表示形式
value- 將結果存儲進去。GValue
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
成功時真
自 2.12 起
另請參見
GtkBuilder


------------ KeyGTK3GTK_BUILDER_WARN_INVALID_CHILD_TYPE ----

GTK_BUILDER_WARN_INVALID_CHILD_TYPE
GTK_BUILDER_WARN_INVALID_CHILD_TYPE()
此宏應用於在add_child實現中發出有關意外類型值的警告。GtkBuildable
語法
參數
object- 警告發生時所在的GtkBuildable
type- 意外的類型值
另請參見
GtkBuilder


------------ KeyGTK3gtk_button_box_get_child_non_homogeneous ----

gtk_button_box_get_child_non_homogeneous
返回子項是否免於同質化。
語法
參數
widget- 一GtkButtonBox
child- 小部件的子項
返回
如果孩子不受均勻尺寸的影響，則為 TRUE
自 3.2 起
另請參見
GtkButtonBox


------------ KeyGTK3gtk_button_box_get_child_secondary ----

gtk_button_box_get_child_secondary
返回子項是否應出現在子項的輔助組中。
語法
參數
widget- 一GtkButtonBox
child- 小部件的子項
返回
孩子是否應該出現在次要的子群體中。
2.4 起
另請參見
GtkButtonBox


------------ KeyGTK3gtk_button_box_get_layout ----

gtk_button_box_get_layout
檢索用於在按鈕框中排列按鈕的方法。
語法
參數
widget- 一GtkButtonBox
返回
用於在小部件中佈置按鈕的方法。
另請參見
GtkButtonBox


------------ KeyGTK3gtk_button_box_new ----

gtk_button_box_new
Creates a new .GtkButtonBox
Syntax
Parameters
orientation  -  	the box' orientation.
Returns
a new .GtkButtonBox
Since 3.0
See Also
GtkButtonBox


------------ KeyGTK3gtk_button_box_set_child_non_homogeneous ----

gtk_button_box_set_child_non_homogeneous
Sets whether the child is exempted from homogeous sizing.
Syntax
Parameters
widget  -  	a GtkButtonBox
child  -  	a child of widget
non_homogeneous  -  	the new value
Since 3.
See Also
GtkButtonBox


------------ KeyGTK3gtk_button_box_set_child_secondary ----

gtk_button_box_set_child_secondary
Sets whether child should appear in a secondary group of children.A typical use of a secondary child is the help button in a dialog.This group appears after the other children if the styleis GTK_BUTTONBOX_START, GTK_BUTTONBOX_SPREAD orGTK_BUTTONBOX_EDGE, and before the other children if the styleis GTK_BUTTONBOX_END. For horizontal button boxes, the definitionof before/after depends on direction of the widget (seegtk_widget_set_direction()). If the style is GTK_BUTTONBOX_STARTor GTK_BUTTONBOX_END, then the secondary children are aligned atthe other end of the button box from the main children. For theother styles, they appear immediately next to the main children.
Syntax
Parameters
widget  -  	a GtkButtonBox
child  -  	a child of widget
is_secondary  -  	if TRUE, the childappears in a secondary group of thebutton box.
See Also
GtkButtonBox


------------ KeyGTK3gtk_button_box_set_layout ----

gtk_button_box_set_layout
Changes the way buttons are arranged in their container.
Syntax
Parameters
widget  -  	a GtkButtonBox
layout_style  -  	the new layout style
See Also
GtkButtonBox


------------ KeyGTK3gtk_button_clicked ----

gtk_button_clicked
向給定 的 發出信號。?clicked?GtkButton
語法
參數
button- 您要將信號發送到。GtkButton
另請參見
GtkButton


------------ KeyGTK3gtk_button_enter ----

gtk_button_enter
gtk_button_enter自版本 2.20 起已棄用，不應在新編寫的代碼中使用。使用信號。向給定 的 發出信號。?enter-notify-event??enter?GtkButton
語法
參數
button- 您要將信號發送到。GtkButton
另請參見
GtkButton


------------ KeyGTK3gtk_button_get_alignment ----

gtk_button_get_alignment
獲取按鈕中子項的對齊方式。
語法
參數
button- 一GtkButton
xalign- 返回水準對齊的位置。[輸出]
yalign- 返回垂直對齊的位置。[輸出]
2.4 起
另請參見
GtkButton


------------ KeyGTK3gtk_button_get_always_show_image ----

gtk_button_get_always_show_image
返回按鈕是否將忽略設置並始終顯示圖像（如果可用）。?gtk-button-images?
語法
參數
button- 一GtkButton
返回
如果按鈕始終顯示圖像，則為 TRUE
3.6 起
另請參見
GtkButton


------------ KeyGTK3gtk_button_get_event_window ----

gtk_button_get_event_window
如果已實現，則返回按鈕的事件視窗，否則返回 NULL。應該很少需要此功能。
語法
參數
button- 一GtkButton
返回
按鈕的事件視窗。[無轉移]
自 2.2 起
另請參見
GtkButton


------------ KeyGTK3gtk_button_get_focus_on_click ----

gtk_button_get_focus_on_click
返回按鈕在用滑鼠按一下時是否抓住焦點。請參見gtk_button_set_focus_on_click（）。
語法
參數
button- 一GtkButton
返回
如果按鈕在用滑鼠按一下時抓住焦點，則為 TRUE。
2.4 起
另請參見
GtkButton


------------ KeyGTK3gtk_button_get_image ----

gtk_button_get_image
獲取當前設置為按鈕圖像的小部件。這可能由 gtk_button_set_image（） 顯式設置，或由 gtk_button_new_from_stock（） 構造。
語法
參數
button- 一GtkButton
返回
a 或 NULL，以防沒有圖像。[無轉移]GtkWidget
自 2.6 起
另請參見
GtkButton


------------ KeyGTK3gtk_button_get_image_position ----

gtk_button_get_image_position
獲取圖像相對于按鈕內文本的位置。
語法
參數
button- 一GtkButton
返回
位置
自 2.10 起
另請參見
GtkButton


------------ KeyGTK3gtk_button_get_label ----

gtk_button_get_label
從按鈕的標籤中提取文本，如bygtk_button_set_label（） 設置的那樣。如果尚未設置標籤文本，則返回值將為 NULL。如果您創建一個帶有gtk_button_new（）的空按鈕以用作容器，則會出現這種情況。
語法
參數
button- 一GtkButton
返回
標籤微件的文本。此字串歸小部件所有，不得修改或釋放。
另請參見
GtkButton


------------ KeyGTK3gtk_button_get_relief ----

gtk_button_get_relief
返回給定 的當前浮雕樣式。GtkButton
語法
參數
button- 你想要的從。GtkButtonGtkReliefStyle
返回
當前GtkReliefStyle
另請參見
GtkButton


------------ KeyGTK3gtk_button_get_use_stock ----

gtk_button_get_use_stock
gtk_button_get_use_stock自 3.10 版起已棄用，不應在新編寫的代碼中使用。返回按鈕標籤是否為庫存物料。
語法
參數
button- 一GtkButton
返回
如果按鈕標籤用於選擇庫存專案，而不是直接用作標籤文本，則為 TRUE。
另請參見
GtkButton


------------ KeyGTK3gtk_button_get_use_underline ----

gtk_button_get_use_underline
返回按鈕標籤中嵌入的底線是否指示嚴重。請參見 gtk_button_set_use_underline（）。
語法
參數
button- 一GtkButton
返回
如果按鈕標籤中的嵌入式底線指示助記符快速鍵，則為 TRUE。
另請參見
GtkButton


------------ KeyGTK3gtk_button_leave ----

gtk_button_leave
gtk_button_leave自版本 2.20 起已棄用，不應在新編寫的代碼中使用。使用信號。向給定 的 發出信號。?leave-notify-event??leave?GtkButton
語法
參數
button- 您要將信號發送到。GtkButton
另請參見
GtkButton


------------ KeyGTK3gtk_button_new ----

gtk_button_new
創建新的構件。要將子構件添加到按鈕，請使用 gtk_container_add（）。GtkButton
返回
新創建的小部件。GtkButton
另請參見
GtkButton


------------ KeyGTK3gtk_button_new_from_icon_name ----

gtk_button_new_from_icon_name
創建一個新按鈕，其中包含當前圖示主題中的圖示。如果圖示名稱未知，則“損壞的圖像？圖示將被顯示。如果當前圖示主題發生更改，圖示將相應地更新。此函數是圍繞 gtk_button_new（） andgtk_button_set_image（） 的便利包裝器。
語法
參數
icon_name- 圖示名稱
size- 圖示大小。[鍵入整型]
返回
一個新的顯示主題圖示GtkButton
自 3.10 起
另請參見
GtkButton


------------ KeyGTK3gtk_button_new_from_stock ----

gtk_button_new_from_stock
gtk_button_new_from_stock自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用 gtk_button_new_with_label（）。創建一個包含庫存項中的圖像和文本的新項。一些股票 ID 具有前置處理器宏，如 and。如果stock_id未知，則它將被視為助記符標籤（如gtk_button_new_with_mnemonic（））。GtkButtonGTK_STOCK_OKGTK_STOCK_APPLY
語法
參數
stock_id- 庫存項目的名稱
返回
一個新的GtkButton
另請參見
GtkButton


------------ KeyGTK3gtk_button_new_with_label ----

gtk_button_new_with_label
創建一個包含給定文本的子項的小部件。GtkButtonGtkLabel
語法
參數
label- 您希望保留的文本。GtkLabel
返回
新創建的小部件。GtkButton
另請參見
GtkButton


------------ KeyGTK3gtk_button_new_with_mnemonic ----

gtk_button_new_with_mnemonic
創建包含標籤的新標籤。如果標籤中的字元前面帶有底線，則帶有底線。如果需要在標籤中使用文字底線，請使用 ？__？（兩個下分）。第一個帶底線的字元表示稱為助記符的鍵盤增讀器。按 Alt 和該鍵可啟動按鈕。GtkButton
語法
參數
label- 按鈕的文本，在字母字元前面帶有底線
返回
一個新的GtkButton
另請參見
GtkButton


------------ KeyGTK3gtk_button_pressed ----

gtk_button_pressed
gtk_button_pressed自版本 2.20 起已棄用，不應在新編寫的代碼中使用。使用信號。向給定 的 發出信號。?button-press-event??pressed?GtkButton
語法
參數
button- 您要將信號發送到。GtkButton
另請參見
GtkButton


------------ KeyGTK3gtk_button_released ----

gtk_button_released
gtk_button_released自版本 2.20 起已棄用，不應在新編寫的代碼中使用。使用信號。向給定 的 發出信號。?button-release-event??released?GtkButton
語法
參數
button- 您要將信號發送到。GtkButton
另請參見
GtkButton


------------ KeyGTK3gtk_button_set_alignment ----

gtk_button_set_alignment
設置子項的對齊方式。除非子項是 或 .GtkMiscGtkAlignment
語法
參數
button- 一GtkButton
xalign- 子項的水準位置，0.0 為左對齊，1.0 為右對齊
yalign- 子項的垂直位置，0.0 表示頂部對齊，1.0 表示底部對齊
2.4 起
另請參見
GtkButton


------------ KeyGTK3gtk_button_set_always_show_image ----

gtk_button_set_always_show_image
如果為 TRUE，則該按鈕將忽略該設置並始終顯示圖像（如果可用）。如果按鈕在沒有圖像的情況下無用或難以使用，請使用此屬性。?gtk-button-images?
語法
參數
button- 一GtkButton
always_show- 如果功能表項目應始終顯示圖像，則為 TRUE
3.6 起
另請參見
GtkButton


------------ KeyGTK3gtk_button_set_focus_on_click ----

gtk_button_set_focus_on_click
設置按鈕在用滑鼠按一下時是否將獲取焦點。使滑鼠按一下不抓取焦點在您不希望將鍵盤焦點從應用程式的主要區域中刪除的位置非常有用。
語法
參數
button- 一GtkButton
focus_on_click- 按鈕在用滑鼠點擊時是否抓住焦點
2.4 起
另請參見
GtkButton


------------ KeyGTK3gtk_button_set_image ----

gtk_button_set_image
將按鈕的圖像設置為給定的小部件。如果標籤文本為 NULL 或如果為 TRUE，則將顯示圖像。您不必自己在圖像上callgtk_widget_show（）。?always-show-image?
語法
參數
button- 一GtkButton
image- 一個小部件設置為按鈕的圖像
自 2.6 起
另請參見
GtkButton


------------ KeyGTK3gtk_button_set_image_position ----

gtk_button_set_image_position
設置圖像相對于按鈕內文本的位置。
語法
參數
button- 一GtkButton
position- 位置
自 2.10 起
另請參見
GtkButton


------------ KeyGTK3gtk_button_set_label ----

gtk_button_set_label
將按鈕標籤的文本設置為 str。此文本也用於選擇庫存專案（如果使用gtk_button_set_use_stock（）。這還將清除以前設置的任何標籤。
語法
參數
button- 一GtkButton
label- 一個字串
另請參見
GtkButton


------------ KeyGTK3gtk_button_set_relief ----

gtk_button_set_relief
設置給定構件邊緣的浮雕樣式。存在三種風格，GTK_RELIEF_NORMAL，GTK_RELIEF_HALF，GTK_RELIEF_NONE。正如人們所猜測的那樣，預設樣式是GTK_RELIEF_NORMAL。GtkButton
語法
參數
button- 你想設置浮雕樣式的。GtkButton
newstyle- 如上所述的GtkReliefStyle。
另請參見
GtkButton


------------ KeyGTK3gtk_button_set_use_stock ----

gtk_button_set_use_stock
gtk_button_set_use_stock自版本 3.10 起已棄用，不應在新編寫的代碼中使用。如果為 TRUE，則在按鈕上設置的標籤將用作股票 ID，以選擇按鈕的庫存專案。
語法
參數
button- 一GtkButton
use_stock- 如果按鈕應使用庫存專案，則為 TRUE
另請參見
GtkButton


------------ KeyGTK3gtk_button_set_use_underline ----

gtk_button_set_use_underline
如果為 true，則按鈕標籤文本中的底線指示應將下一個字元用於助記符快速鍵。
語法
參數
button- 一GtkButton
use_underline- 如果文本中的底線表示助記符，則為 TRUE
另請參見
GtkButton


------------ KeyGTK3gtk_calendar_clear_marks ----

gtk_calendar_clear_marks
刪除所有視覺標記。
語法
參數
calendar- 一GtkCalendar
另請參見
GtkCalendar


------------ KeyGTK3gtk_calendar_get_date ----

gtk_calendar_get_date
從 中獲取選定的日期。GtkCalendar
語法
參數
calendar- 一GtkCalendar
year- 將年份存儲為小數（例如 2011）或 NULL 的位置。[輸出][允許-無]
month- 存儲月份編號（介於 0 和 11 之間）的位置，或 NULL。[輸出][允許-無]
day- 存儲日期編號（介於 1 和 31 之間）的位置，或 NULL。[輸出][允許-無]
另請參見
GtkCalendar


------------ KeyGTK3gtk_calendar_get_day_is_marked ----

gtk_calendar_get_day_is_marked
如果日曆的日期已被標記，則返回。
語法
參數
calendar- 一GtkCalendar
day- 日期編號介於 1 和 31 之間。
返回
日期是否被標記。
自 3.0 起
另請參見
GtkCalendar


------------ KeyGTK3gtk_calendar_get_detail_height_rows ----

gtk_calendar_get_detail_height_rows
查詢詳細資訊儲存格的高度（以行為單位）。看。?detail-width-chars?
語法
參數
calendar- 一個.GtkCalendar
返回
詳細資訊儲存格的高度（以行為單位）。
自 2.14 起
另請參見
GtkCalendar


------------ KeyGTK3gtk_calendar_get_detail_width_chars ----

gtk_calendar_get_detail_width_chars
查詢詳細資訊儲存格的寬度（以字元為單位）。看。?detail-width-chars?
語法
參數
calendar- 一個.GtkCalendar
返回
詳細資訊儲存格的寬度（以字元為單位）。
自 2.14 起
另請參見
GtkCalendar


------------ KeyGTK3gtk_calendar_get_display_options ----

gtk_calendar_get_display_options
返回日曆的當前顯示選項。
語法
參數
calendar- 一GtkCalendar
返回
顯示選項。
2.4 起
另請參見
GtkCalendar


------------ KeyGTK3gtk_calendar_mark_day ----

gtk_calendar_mark_day
在特定日期放置視覺標記。
語法
參數
calendar- 一GtkCalendar
day- 在 1 和 31 之間標記的日期編號。
另請參見
GtkCalendar


------------ KeyGTK3gtk_calendar_new ----

gtk_calendar_new
創建一個新日曆，並選擇當前日期。
返回
一個新的小部件GtkCalendar
另請參見
GtkCalendar


------------ KeyGTK3gtk_calendar_select_day ----

gtk_calendar_select_day
從當前月份中選擇一天。
語法
參數
calendar- 一個.GtkCalendar
day- 日期編號介於 1 和 31 之間，或 0 可取消選擇當前選定的日期。
另請參見
GtkCalendar


------------ KeyGTK3gtk_calendar_select_month ----

gtk_calendar_select_month
將日曆移動到其他月份。
語法
參數
calendar- 一GtkCalendar
month- 一個介於 0 和 11 之間的月份編號。
year- 月份所在的年份。
另請參見
GtkCalendar


------------ KeyGTK3gtk_calendar_set_detail_func ----

gtk_calendar_set_detail_func
安裝一個功能，為Pango標記提供每天的詳細資訊。此類詳細資訊的示例包括假期或約會。該資訊在設置後每天顯示在下面。如果整個文本不適合詳細資訊區域，或者如果未設置，則會提供包含完整詳細資訊的工具提示。可以通過設置 和 屬性來限制詳細資訊區域的大小。?show-details??show-details??detail-width-chars??detail-height-rows?
語法
參數
calendar- 一個.GtkCalendar
func- 提供每天詳細資訊的功能。
data- 要傳遞給函數的資料。
destroy- 用於發佈資料的功能。
自 2.14 起
另請參見
GtkCalendar


------------ KeyGTK3gtk_calendar_set_detail_height_rows ----

gtk_calendar_set_detail_height_rows
更新細節儲存格的高度。看。?detail-height-rows?
語法
參數
calendar- 一個.GtkCalendar
rows- 以行為單位的詳細高度。
自 2.1 起
另請參見
GtkCalendar


------------ KeyGTK3gtk_calendar_set_detail_width_chars ----

gtk_calendar_set_detail_width_chars
更新細節儲存格的寬度。看。?detail-width-chars?
語法
參數
calendar- 一個.GtkCalendar
chars- 字元中的細節寬度。
自 2.14 起
另請參見
GtkCalendar


------------ KeyGTK3gtk_calendar_set_display_options ----

gtk_calendar_set_display_options
設置顯示選項（是否顯示標題和月標題）。
語法
參數
calendar- 一GtkCalendar
flags- 要設置的顯示選項
2.4 起
另請參見
GtkCalendar


------------ KeyGTK3gtk_calendar_unmark_day ----

gtk_calendar_unmark_day
刪除特定日期的視覺物件標記。
語法
參數
calendar- 一個.GtkCalendar
day- 在 1 和 31 之間取消標記的日期編號。
另請參見
GtkCalendar


------------ KeyGTK3gtk_cell_area_activate ----

gtk_cell_area_activate
啟動區域，通常是通過啟動當前聚焦的儲存格，但是一些在區域中嵌入小部件的子類也可以啟動小部件（如果它當前具有焦點）。
語法
參數
area- 一GtkCellArea
context- 與當前行資料的上下文中GtkCellAreaContext
widget- 該區域正在渲染GtkWidget
cell_area- 與小部件分配相關的區域的大小和位置
flags- 此行資料的區域標誌。GtkCellRendererState
edit_only- 如果為 TRUE，則僅啟動GTK_CELL_RENDERER_MODE_EDITABLEwill的儲存格渲染器。
返回
是否已成功啟動 areawas。
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_activate_cell ----

gtk_cell_area_activate_cell
子類在處理事件以啟動儲存格時使用它，基類在其自己的GtkCellArea->activate（）實現中免費啟動鍵盤事件的儲存格。GtkCellAreaGtkCellArea
語法
參數
area- 一GtkCellArea
widget- 該區域正在渲染到GtkWidget
renderer- 啟動區域GtkCellRenderer
event- 應該發生細胞活化GdkEvent
cell_area- 當前行的渲染器的在小部件相關座標中。GdkRectangle
flags- 用於渲染器GtkCellRendererState
返回
細胞啟動是否成功
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_add ----

gtk_cell_area_add
將渲染器添加到具有預設子儲存格屬性的區域。
語法
參數
area- 一GtkCellArea
renderer- 添加到區域GtkCellRenderer
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_add_focus_sibling ----

gtk_cell_area_add_focus_sibling
將同級添加到渲染器的可聚焦區域，如果渲染器可以聚焦給定行，則焦點將圍繞渲染器及其所有同級進行繪製。由焦點同級處理的事件也可以啟動給定的可聚焦渲染器。
語法
參數
area- 一GtkCellArea
renderer- 期望有焦點GtkCellRenderer
sibling- 添加到渲染器的焦點區域GtkCellRenderer
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_add_with_properties ----

gtk_cell_area_add_with_properties
將渲染器添加到區域，同時設置儲存格屬性。有關詳細資訊，請參閱 gtk_cell_area_add（） 和 gtk_cell_area_cell_set（）。
語法
參數
area- 一GtkCellArea
renderer- 放置在內部區域GtkCellRenderer
first_prop_name- 要設置的第一個儲存格屬性的名稱
...- 以 NULL 結尾的屬性名稱和值清單，以first_prop_name
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_apply_attributes ----

gtk_cell_area_apply_attributes
通過從tree_model中提取值，將任何連接的屬性應用於呈現器區域。
語法
參數
area- 一GtkCellArea
tree_model- 從中提取值GtkTreeModel
iter- in tree_modelto 應用值GtkTreeIter
is_expander- 是否患有兒童
is_expanded- iteris 是否在視圖中展開，並且子級是否可見
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_attribute_connect ----

gtk_cell_area_attribute_connect
連接屬性以應用列中的值以用於正在使用的。GtkTreeModel
語法
參數
area- 一GtkCellArea
renderer- 連接屬性GtkCellRenderer
attribute- 屬性名稱
column- 從中獲取屬性值的列GtkTreeModel
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_attribute_disconnect ----

gtk_cell_area_attribute_disconnect
斷開區域中渲染器的屬性，以便不再使用模型中的值更新屬性。
語法
參數
area- 一GtkCellArea
renderer- 斷開 屬性GtkCellRenderer
attribute- 屬性名稱
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_box_get_spacing ----

gtk_cell_area_box_get_spacing
獲取儲存格呈現器之間添加的間距。
語法
參數
box- 一GtkCellAreaBox
返回
框中儲存格渲染器之間添加的空間。
自 3.0 起
另請參見
GtkCellAreaBox


------------ KeyGTK3gtk_cell_area_box_new ----

gtk_cell_area_box_new
創建新的 .GtkCellAreaBox
返回
新創建的GtkCellAreaBox
自 3.0 起
另請參見
GtkCellAreaBox


------------ KeyGTK3gtk_cell_area_box_pack_end ----

gtk_cell_area_box_pack_end
將渲染器添加到框中，參照框的末尾進行打包。渲染器在參考盒尾的任何其他包裝後（遠離末端）進行打包。GtkCellRenderer
語法
參數
box- 一GtkCellAreaBox
renderer- 要添加GtkCellRenderer
expand- 渲染器在區域接收超過其自然大小時是否應接收額外的空間
align- 渲染器是否應該在相鄰的行中對齊
fixed- 渲染器是否在所有行中都具有相同的大小
自 3.0 起
另請參見
GtkCellAreaBox


------------ KeyGTK3gtk_cell_area_box_pack_start ----

gtk_cell_area_box_pack_start
將渲染器添加到框中，參照框的開頭進行打包。渲染器在任何其他打包後打包，並引用框的開頭。GtkCellRenderer
語法
參數
box- 一GtkCellAreaBox
renderer- 要添加GtkCellRenderer
expand- 渲染器在區域接收超過其自然大小時是否應接收額外的空間
align- 渲染器是否應該在相鄰的行中對齊
fixed- 渲染器是否在所有行中都具有相同的大小
自 3.0 起
另請參見
GtkCellAreaBox


------------ KeyGTK3gtk_cell_area_box_set_spacing ----

gtk_cell_area_box_set_spacing
設置要在框中的儲存格呈現器之間添加的間距。
語法
參數
box- 一GtkCellAreaBox
spacing- 要添加的空間GtkCellRenderers
自 3.
另請參見
GtkCellAreaBox


------------ KeyGTK3gtk_cell_area_cell_get ----

gtk_cell_area_cell_get
獲取區域中呈現器的一個或多個儲存格屬性的值。
語法
參數
area- 一GtkCellArea
renderer- 一個在內部區域GtkCellRenderer
first_prop_name- 要獲取的第一個儲存格屬性的名稱
...- 返回第一個儲存格屬性的位置，後跟更多名稱/返回位置對，後跟 NULL
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_cell_get_property ----

gtk_cell_area_cell_get_property
獲取區域中呈現器的儲存格屬性的值。
語法
參數
area- 一GtkCellArea
renderer- 內部區域GtkCellRenderer
property_name- 要獲取的屬性的名稱
value- 返回值的位置
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_cell_get_valist ----

gtk_cell_area_cell_get_valist
獲取區域中呈現器的一個或多個儲存格屬性的值。
語法
參數
area- 一GtkCellArea
renderer- 內部區域GtkCellRenderer
first_property_name- 要獲取的第一個屬性的名稱
var_args- 返回第一個屬性的位置，後跟更多名稱/返回位置對，後跟 NULL
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_cell_set ----

gtk_cell_area_cell_set
為區域中的儲存格設置一個或多個儲存格屬性。
語法
參數
area- 一GtkCellArea
renderer- a 這是一個細胞內部區域GtkCellRenderer
first_prop_name- 要設置的第一個儲存格屬性的名稱
...- 以 NULL 結尾的屬性名稱和值清單，以first_prop_name
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_cell_set_property ----

gtk_cell_area_cell_set_property
設置區域中渲染器的儲存格屬性。
語法
參數
area- 一GtkCellArea
renderer- 內部區域GtkCellRenderer
property_name- 要設置的儲存格屬性的名稱
value- 要將儲存格屬性設置為的值
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_cell_set_valist ----

gtk_cell_area_cell_set_valist
為區域中的渲染器設置一個或多個儲存格屬性。
語法
參數
area- 一GtkCellArea
renderer- 一個內部區域GtkCellRenderer
first_property_name- 要設置的第一個儲存格屬性的名稱
var_args- 以 NULL 結尾的屬性名稱和值清單，以first_prop_name
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_class_find_cell_property ----

gtk_cell_area_class_find_cell_property
按名稱查找儲存格區域類的儲存格屬性。
語法
參數
aclass- 一GtkCellAreaClass
property_name- 要查找的子屬性的名稱
返回
子屬性的 NULL，如果 aclass 沒有具有該名稱的子屬性。[無轉移]GParamSpec
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_class_install_cell_property ----

gtk_cell_area_class_install_cell_property
在單元區域類上安裝單元屬性。
語法
參數
aclass- 一GtkCellAreaClass
property_id- 房產的id
pspec- 為財產GParamSpec
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_class_list_cell_properties ----

gtk_cell_area_class_list_cell_properties
返回儲存格區域類的所有儲存格屬性。
語法
參數
aclass- 一GtkCellAreaClass
n_properties- 返回找到的儲存格屬性數的位置。[輸出]
返回
新分配的以 NULL 結尾的 * 陣列。陣列必須使用 g_free（） 釋放。[陣列長度 = n_properties][轉移容器]GParamSpec
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_context_allocate ----

gtk_cell_area_context_allocate
為所有要使用上下文劃分的行分配寬度和/或高度。通常，分配僅水準或有時以垂直方式執行，因為一組行通常垂直或水準並排呈現，並且共用相同的寬度或相同的高度。有時，它們同時以水準和垂直方向分配，從而產生均勻的推力效應。啟用時通常就是這種情況。自 3.0 起GtkTreeView?fixed-height-mode?
語法
參數
context- 一GtkCellAreaContext
width- 為使用上下文呈現的所有行分配的寬度，或 -1。GtkTreeModel
height- 為使用上下文呈現的所有行分配的高度，或 -1。GtkTreeModel
另請參見
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_get_allocation ----

gtk_cell_area_context_get_allocation
提取上下文的當前分配大小。如果未按寬度或高度分配上下文，或者最近使用gtk_cell_area_context_reset（） 重置了上下文，則返回值將為 -1。
語法
參數
context- 一GtkCellAreaContext
width- 存儲分配的寬度的位置，或 NULL。[輸出][允許-無]
height- 存儲分配高度的位置，或 NULL。[輸出][允許-無]
自 3.0 起
另請參見
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_get_area ----

gtk_cell_area_context_get_area
獲取此上下文的創建者。佈局小部件通常不需要這樣做;但是，對於上下文實現本身來說，獲取有關其所用區域的資訊非常重要。例如，在GtkCellAreaContextClass.allocate（）time，重要的是要瞭解有關配置的任何單元間距的詳細資訊，以便計算正確的分配。GtkCellAreaGtkCellArea
語法
參數
context- 一GtkCellAreaContext
返回
這個上下文是由創建的。[無轉移]GtkCellArea
自 3.0 起
另請參見
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_get_preferred_height ----

gtk_cell_area_context_get_preferred_height
獲取已使用此上下文請求的所有行的累積首選高度。在調用 gtk_cell_area_context_reset（） 和/或請求 a 的大小之前，返回值為 0。GtkCellArea
語法
參數
context- 一GtkCellAreaContext
minimum_height- 存儲最小高度的位置，或空。[輸出][允許-無]
natural_height- 存儲自然高度的位置，或空。[輸出][允許-無]
自 3.0 起
另請參見
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_get_preferred_height_for_width ----

gtk_cell_area_context_get_preferred_height_for_width
獲取所有行的累積首選寬度高度，這些行已在此上下文中為相同的所述寬度請求。在調用 gtk_cell_area_context_reset（） 和/或請求 a 的大小之前，返回值為 -1。GtkCellArea
語法
參數
context- 一GtkCellAreaContext
width- 建議的分配寬度
minimum_height- 存儲最小高度的位置，或空。[輸出][允許-無]
natural_height- 存儲自然高度的位置，或空。[輸出][允許-無]
自 3.0 起
另請參見
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_get_preferred_width ----

gtk_cell_area_context_get_preferred_width
獲取已使用此上下文請求的所有行的累積首選寬度。在調用 gtk_cell_area_context_reset（） 和/或請求 a 的大小之前，返回值為 0。GtkCellArea
語法
參數
context- 一GtkCellAreaContext
minimum_width- 存儲最小寬度的位置，或空。[輸出][允許-無]
natural_width- 存儲自然寬度的位置，或空。[輸出][允許-無]
自 3.0 起
另請參見
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_get_preferred_width_for_height ----

gtk_cell_area_context_get_preferred_width_for_height
獲取在此上下文中為同一所述高度請求的所有行的累積首選高度寬度。在調用 gtk_cell_area_context_reset（） 和/或請求 a 的大小之前，返回值為 -1。GtkCellArea
語法
參數
context- 一GtkCellAreaContext
height- 建議分配的高度
minimum_width- 存儲最小寬度的位置，或空。[輸出][允許-無]
natural_width- 存儲自然寬度的位置，或空。[輸出][允許-無]
自 3.0 起
另請參見
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_push_preferred_height ----

gtk_cell_area_context_push_preferred_height
如果新建議的尺寸超過當前最小和自然高度，則使最小和/或自然高度增長。在請求過程中，實現在一系列行上使用它，以將請求的高度逐步推送到一系列ofgtk_cell_area_get_preferred_height（）請求上。GtkCellAreaContextGtkTreeModel
語法
參數
context- 一GtkCellAreaContext
minimum_height- 建議的上下文新最小高度
natural_height- 為上下文提議的新自然高度
自 3.
另請參見
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_push_preferred_width ----

gtk_cell_area_context_push_preferred_width
如果新提議的大小超過當前的最小和自然寬度，則使最小和/或自然寬度增大。在請求過程中，實現對一系列行使用此方法，以將請求的寬度逐步推送到一系列ofgtk_cell_area_get_preferred_width（） 請求上。GtkCellAreaContextGtkTreeModel
語法
參數
context- 一GtkCellAreaContext
minimum_width- 建議的上下文的新最小寬度
natural_width- 為上下文提議的新自然寬度
自 3.0 起
另請參見
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_reset ----

gtk_cell_area_context_reset
重置任何以前緩存的請求和分配資料。當基礎資料發生更改時，如果允許縮小內容大小，則重置上下文非常重要。如果僅允許內容大小增長（這通常是視圖呈現大型資料存儲以衡量優化的選項），則只需要（重新）請求插入更改器的行withgtk_cell_area_get_preferred_width（）。當上下文的新總體大小要求分配的大小發生變化時（或者每當此分配發生更改時），需要為每行重新請求變數 rows size。例如，如果行從上到下以相同的寬度顯示，則分配的寬度的變化需要重新計算所有顯示的行高度usinggtk_cell_area_get_preferred_height_for_width（）。自 3.0 起GtkTreeModel
語法
參數
context- 一GtkCellAreaContext
另請參見
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_copy_context ----

gtk_cell_area_copy_context
對於行需要在一個方向上共用對齊，但可能在相反的方向中單獨分組的情況，有時需要這樣做。例如，創建所有圖示（行）具有相同的寬度，並且其儲存格具有相同的地平線對齊方式。但是，每行圖示可能具有單獨的集體高度。 使用此上下文來請求每行的高度，該上下文已用於請求要顯示的所有行寬。GtkIconViewGtkIconView
語法
參數
area- 一GtkCellArea
context- 要複製GtkCellAreaContext
返回
新創建的上下文副本。[轉移完整]GtkCellAreaContext
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_create_context ----

gtk_cell_area_create_context
創建一個用於所有用途的區域。 存儲幾何資訊對於操作它的行，始終對同一行資料使用相同的上下文非常重要（即，應該使用用於請求這些資料行大小的相同來呈現和處理事件）。GtkCellAreaContextGtkCellAreaContextGtkCellAreaContext
語法
參數
area- 一GtkCellArea
返回
一個新創建的，可以與區域一起使用。[轉移完整]GtkCellAreaContext
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_event ----

gtk_cell_area_event
將事件處理委託給 。GtkCellArea
語法
參數
area- 一GtkCellArea
context- 對於這行資料。GtkCellAreaContext
widget- 該區域被渲染到GtkWidget
event- 要處理的GdkEvent
cell_area- 區域的小部件相關座標
flags- 用於此行中的區域。GtkCellRendererState
返回
如果事件按區域處理，則為 TRUE。
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_focus ----

gtk_cell_area_focus
當焦點要傳遞到區域時，或者對於給定的方向和行資料，這應該由區域的擁有佈局微件調用。實現類應該實現這種方法，以自己的方式接收和導航焦點，特別是它如何佈局儲存格。GtkCellArea
語法
參數
area- 一GtkCellArea
direction- 的GtkDirectionType
返回
如果焦點保留在此調用的區域內，則為 TRUE。
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_foreach ----

gtk_cell_area_foreach
每個區域的呼叫回檔。GtkCellRenderer
語法
參數
area- 一GtkCellArea
callback- 要呼叫。[範圍調用]GtkCellCallback
callback_data- 使用者提供的資料指標
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_foreach_alloc ----

gtk_cell_area_foreach_alloc
調用每個區域的回檔，其中cell_area內有已分配的矩形。GtkCellRenderer
語法
參數
area- 一GtkCellArea
context- 對於這行資料。GtkCellAreaContext
widget- 該區域被渲染到GtkWidget
cell_area- 小部件相關座標和區域大小
background_area- 背景區域的小部件相關座標
callback- 要呼叫。[範圍調用]GtkCellAllocCallback
callback_data- 使用者提供的資料指標
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_cell_allocation ----

gtk_cell_area_get_cell_allocation
如果區域要在cell_area中進行渲染，則派生區域內渲染器的分配。
語法
參數
area- 一GtkCellArea
context- 用於保持面積的大小。GtkCellAreaContext
widget- 該區域正在渲染GtkWidget
renderer- 獲取分配GtkCellRenderer
cell_area- 為該區域分配的整個區域在此行的小部件中
allocation- 存儲渲染器分配的位置。[輸出]
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_cell_at_position ----

gtk_cell_area_get_cell_at_position
獲取區域內的 x 和 y 座標，並選擇性地在 cell_area 中返回其的完整儲存格分配。GtkCellRenderer
語法
參數
area- 一GtkCellArea
context- 用於保持面積的大小。GtkCellAreaContext
widget- 該區域正在渲染GtkWidget
cell_area- 為該區域分配的整個區域在此行的小部件中
x- x 位置
y- y 位置
alloc_area- 存儲其翻轉的儲存格渲染器的內部分配區域的位置，或NULL。[輸出][允許-無]
返回
在 xand y. [轉移無]GtkCellRenderer
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_current_path_string ----

gtk_cell_area_get_current_path_string
獲取當前應用的當前字串，這是隱式更新whengtk_cell_area_apply_attributes（） 調用，並可用於與子類中的呈現器交互。GtkTreePathGtkTreeIterGtkCellArea
語法
參數
area- 一GtkCellArea
返回
應用於區域的當前屬性的當前字串。此字串屬於該區域，不應被釋放。GtkTreePath
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_edited_cell ----

gtk_cell_area_get_edited_cell
獲取當前正在編輯的區域。GtkCellRenderer
語法
參數
area- 一GtkCellArea
返回
當前編輯的 .[無轉移]GtkCellRenderer
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_edit_widget ----

gtk_cell_area_get_edit_widget
獲取當前用於編輯當前編輯的儲存格的小部件。GtkCellEditable
語法
參數
area- 一GtkCellArea
返回
當前處於活動狀態的小元件。[無轉移]GtkCellEditable
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_focus_cell ----

gtk_cell_area_get_focus_cell
檢索區域的當前焦點儲存格
語法
參數
area- 一GtkCellArea
返回
區域中當前聚焦的儲存格。[無轉移]
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_focus_from_sibling ----

gtk_cell_area_get_focus_from_sibling
獲取預期可聚焦的呈現器對於哪個呈現器是或可能是同級呈現器。這對於處理事件的子類來說很方便，在確定事件位置的渲染器後，它可以選擇啟動事件單元可能是同級的焦點單元。GtkCellRendererGtkCellArea
語法
參數
area- 一GtkCellArea
renderer- 的GtkCellRenderer
返回
其渲染為同級，或 NULL。[無轉移]GtkCellRenderer
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_focus_siblings ----

gtk_cell_area_get_focus_siblings
獲取呈現器的焦點同級儲存格呈現器。
語法
參數
area- 一GtkCellArea
renderer- 期望有焦點GtkCellRenderer
返回
的 A 的 。返回的列表是內部列表，不應釋放。[元素型 GtkCellRenderer][無轉移]GListGtkCellRenderers
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_preferred_height ----

gtk_cell_area_get_preferred_height
區域將在此過程中在上下文中存儲一些幾何資訊;當請求任意行數的大小時，檢查此調用的minimum_height和natural_height並不重要，而是在一系列請求後諮詢gtk_cell_area_context_get_preferred_height（）。
語法
參數
area- 一GtkCellArea
context- 執行此請求GtkCellAreaContext
widget- 區域將在哪裡渲染GtkWidget
minimum_height- 存儲最小高度的位置，或 NULL。[輸出][允許-無]
natural_height- 存儲自然高度的位置，或 NULL。[輸出][允許-無]
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_preferred_height_for_width ----

gtk_cell_area_get_preferred_height_for_width
檢索儲存格區域的最小高度和自然高度（如果給定指定的寬度）。area 在調用gtk_cell_area_get_preferred_width（） 時在上下文中存儲一些幾何資訊。重要的是，首先執行一系列帶有context的gtk_cell_area_get_preferred_width（）請求，然後分別在每個儲存格區域上調用gtk_cell_area_get_preferred_height_for_width（）以獲取每個完全請求的行的高度寬度。如果在某些時候，單個行的寬度發生變化，則應再次使用gtk_cell_area_get_preferred_width（）請求它，然後再次檢查所請求行的完整寬度withgtk_cell_area_context_get_preferred_width（）。
語法
參數
area- 一GtkCellArea
context- 已經請求的寬度。GtkCellAreaContext
widget- 區域將在哪裡渲染GtkWidget
width- 檢查此區域高度的寬度
minimum_height- 存儲最小高度的位置，或 NULL。[輸出][允許-無]
natural_height- 存儲自然高度的位置，或 NULL。[輸出][允許-無]
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_preferred_width ----

gtk_cell_area_get_preferred_width
檢索儲存格區域的初始最小值和自然寬度。area 將在此過程中在上下文中存儲一些幾何資訊;當請求任意行數的大小時，檢查此調用的minimum_width和natural_width並不重要，而是在一系列請求後協商gtk_cell_area_context_get_preferred_width（）。
語法
參數
area- 一GtkCellArea
context- 執行此請求GtkCellAreaContext
widget- 區域將在哪裡渲染GtkWidget
minimum_width- 存儲最小寬度的位置，或 NULL。[輸出][允許-無]
natural_width- 存儲自然寬度的位置，或 NULL。[輸出][允許-無]
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_preferred_width_for_height ----

gtk_cell_area_get_preferred_width_for_height
檢索儲存格區域的最小寬度和自然寬度（如果給定指定的高度）。area 在調用gtk_cell_area_get_preferred_height（） 時在上下文中存儲一些幾何資訊。重要的是首先執行一系列帶有context的gtk_cell_area_get_preferred_height（）請求，然後分別在每個儲存格區域上調用gtk_cell_area_get_preferred_width_for_height（）以獲取每個完全請求的行的高度寬度。如果在某些時候，單個行的高度發生了變化，則應再次使用gtk_cell_area_get_preferred_height（）請求它，然後再次檢查所請求行的完整高度withgtk_cell_area_context_get_preferred_height（）。
語法
參數
area- 一GtkCellArea
context- 已經請求的寬度。GtkCellAreaContext
widget- 區域將在哪裡渲染GtkWidget
height- 檢查此區域寬度的高度
minimum_width- 存儲最小寬度的位置，或 NULL。[輸出][允許-無]
natural_width- 存儲自然寬度的位置，或 NULL。[輸出][允許-無]
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_request_mode ----

gtk_cell_area_get_request_mode
獲取區域是首選高與寬佈局還是“寬與高”佈局。
語法
參數
area- 一GtkCellArea
返回
按地區首選。GtkSizeRequestMode
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_has_renderer ----

gtk_cell_area_has_renderer
檢查區域是否包含渲染器。
語法
參數
area- 一GtkCellArea
renderer- 檢查GtkCellRenderer
返回
如果該區域中的渲染器為 TRUE。
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_inner_cell_area ----

gtk_cell_area_inner_cell_area
這是一個方便的實現函數，用於獲取給定意志所在的內部區域。它刪除了以前由gtk_cell_area_request_renderer（） 添加的任何填充。GtkCellAreaGtkCellRenderer
語法
參數
area- 一GtkCellArea
widget- 該區域正在渲染到GtkWidget
cell_area- 小部件相關座標，其中一個區域的儲存格被放置
inner_area- 內部儲存格區域的返回位置。[輸出]
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_is_activatable ----

gtk_cell_area_is_activatable
返回區域在將新屬性應用於區域後啟動時是否可以執行任何操作。
語法
參數
area- 一GtkCellArea
返回
區域在啟動時是否可以執行任何操作。
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_is_focus_sibling ----

gtk_cell_area_is_focus_sibling
返回同級是否是呈現器的焦點同級之一（請參見gtk_cell_area_add_focus_sibling（））。
語法
參數
area- 一GtkCellArea
renderer- 期望有焦點GtkCellRenderer
sibling- 對照渲染器的同級列表進行檢查GtkCellRenderer
返回
如果兄弟姐妹是渲染器的焦點兄弟姐妹，則為 TRUE
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_remove ----

gtk_cell_area_remove
從區域中刪除渲染器。
語法
參數
area- 一GtkCellArea
renderer- 從區域中刪除GtkCellRenderer
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_remove_focus_sibling ----

gtk_cell_area_remove_focus_sibling
從渲染器的焦點同級列表中刪除同級（請參見gtk_cell_area_add_focus_sibling（））。
語法
參數
area- 一GtkCellArea
renderer- 期望有焦點GtkCellRenderer
sibling- 從渲染器的焦點區域中刪除GtkCellRenderer
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_render ----

gtk_cell_area_render
根據區域佈局將區域的儲存格渲染到給定座標處的小部件上。
語法
參數
area- 一GtkCellArea
context- 對於這行資料。GtkCellAreaContext
widget- 該區域被渲染到GtkWidget
cr- 渲染cairo_t
background_area- 區域背景的小部件相關座標
cell_area- 區域的小部件相關座標
flags- 用於此行中的區域。GtkCellRendererState
paint_focus- 區域是否應將重點放在聚焦行的聚焦儲存格上。
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_request_renderer ----

gtk_cell_area_request_renderer
這是實現儲存格呈現器請求大小的便利函數。使用此函數請求大小，然後在渲染和事件時使用gtk_cell_area_inner_cell_area（）非常重要，因為此函數將在儲存格周圍添加填充以進行焦點繪製。GtkCellArea
語法
參數
area- 一GtkCellArea
renderer- 請求大小GtkCellRenderer
orientation- 請求大小GtkOrientation
widget- 該區域正在渲染到GtkWidget
for_size- 要請求的分配上下文大小，如果要返回方向的基本請求，則為 -1。
minimum_size- 存儲最小大小的位置，或 NULL。[輸出][允許-無]
natural_size- 存儲自然大小的位置，或 NULL。[輸出][允許-無]
自 3.
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_set_focus_cell ----

gtk_cell_area_set_focus_cell
將當前獲得焦點的儲存格顯式設置為呈現器。這通常由GtkCellAreaClass.focus（）或GtkCellAreaClass.event（）的實現調用，但它也可用于實現諸如gtk_tree_view_set_cursor_on_cell（）之類的函數。
語法
參數
area- 一GtkCellArea
renderer- 給予關注GtkCellRenderer
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_area_stop_editing ----

gtk_cell_area_stop_editing
顯式停止編輯當前編輯的儲存格。如果取消為 TRUE，則當前編輯的儲存格渲染器將發出 ：：editing-cancel 的信號，否則 ：：editing-done 信號將在 currentedit 小部件上發出。請參見 gtk_cell_area_get_edited_cell（） 和 gtk_cell_area_get_edit_widget（）。
語法
參數
area- 一GtkCellArea
canceled- 編輯是否被取消。
自 3.0 起
另請參見
GtkCellArea


------------ KeyGTK3GTK_CELL_AREA_WARN_INVALID_CELL_PROPERTY_ID ----

GTK_CELL_AREA_WARN_INVALID_CELL_PROPERTY_ID
GTK_CELL_AREA_WARN_INVALID_CELL_PROPERTY_ID()
應使用此宏發出有關 set_cell_property（） 和 get_cell_property（） 實現中意外屬性的標準警告。
語法
參數
object- 調用 set_cell_property（） 或 get_cell_property（）GObject
property_id- 屬性的數位 id
pspec- 財產GParamSpec
另請參見
GtkCellArea


------------ KeyGTK3gtk_cell_editable_editing_done ----

gtk_cell_editable_editing_done
發出信號。?editing-done?
語法
參數
cell_editable- 一GtkCellEditable
另請參見
GtkCellEditable


------------ KeyGTK3gtk_cell_editable_remove_widget ----

gtk_cell_editable_remove_widget
發出信號。?remove-widget?
語法
參數
cell_editable- A [br \=“”GtkCellEditable
另請參見
GtkCellEditable


------------ KeyGTK3gtk_cell_editable_start_editing ----

gtk_cell_editable_start_editing
開始在cell_editable上進行編輯。事件是開始編輯過程的 事件。它可能是 NULL，在編輯是通過程式化方式啟動的情況下。GdkEvent
語法
參數
cell_editable- 一GtkCellEditable
event- A 或空值。[允許-無]GdkEvent
另請參見
GtkCellEditable


------------ KeyGTK3gtk_cell_layout_add_attribute ----

gtk_cell_layout_add_attribute
將屬性映射添加到cell_layout中的列表中。列是模型中要從中獲取值的列，而 theattribute 是要從該值設置的儲存格上的參數。例如，如果模型的第 2 列包含字串，則可以擁有？text？的屬性從列 2 獲取其值。GtkCellRendererText
語法
參數
cell_layout- 一GtkCellLayout
cell- 一GtkCellRenderer
attribute- 渲染器上的屬性
column- 模型上要從中獲取屬性的列位置
2.4 起
另請參見
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_clear ----

gtk_cell_layout_clear
取消設置cell_layout上所有渲染器上的所有映射，並從cell_layout中刪除所有渲染器。
語法
參數
cell_layout- 一GtkCellLayout
2.4 起
另請參見
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_clear_attributes ----

gtk_cell_layout_clear_attributes
清除以前withgtk_cell_layout_set_attributes（） 設置的所有現有屬性。
語法
參數
cell_layout- 一GtkCellLayout
cell- a 清除屬性映射GtkCellRenderer
自 2.
另請參見
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_get_area ----

gtk_cell_layout_get_area
返回可能cell_layoutif在 上調用的基礎，或者如果 cell_layout 使用 no，則返回 NULL 的基礎。GtkCellAreaGtkCellAreaGtkCellArea
語法
參數
cell_layout- 一GtkCellLayout
返回
cell_layout使用的儲存格區域。[無轉移]
自 3.0 起
另請參見
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_get_cells ----

gtk_cell_layout_get_cells
返回已添加到cell_layout的儲存格呈現器。
語法
參數
cell_layout- 一GtkCellLayout
返回
儲存格渲染器的列表。列表（但不是呈現器）是新分配的，當不再需要時，應使用 g_list_free（） 釋放。[元素型 GtkCellRenderer][轉移容器]
自 2.12 起
另請參見
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_pack_end ----

gtk_cell_layout_pack_end
將儲存格添加到cell_layout的末尾。如果 expand 為 FALSE，則為 cell 分配的空間不會超過其所需空間。任何未使用的空間在展開為 TRUE 的儲存格之間平均分配。請注意，不支援重用相同的儲存格渲染器。
語法
參數
cell_layout- 一GtkCellLayout
cell- 一GtkCellRenderer
expand- TRUE 如果 cellis 被分配到分配給cell_layout的額外空間
2.4 起
另請參見
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_pack_start ----

gtk_cell_layout_pack_start
將細胞包裝到cell_layout的開頭。如果 expand 為 FALSE，則為該單元分配的空間不超過其所需空間。任何未使用的空間在展開為 TRUE 的儲存格之間均勻分佈。請注意，不支援重用相同的儲存格渲染器。
語法
參數
cell_layout- 一GtkCellLayout
cell- 一GtkCellRenderer
expand- TRUE 如果 cellis 被分配到分配給cell_layout的額外空間
2.4 起
另請參見
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_reorder ----

gtk_cell_layout_reorder
在位置重新插入儲存格。請注意，儲存格已經被打包到cell_layoutfor它才能正常工作。
語法
參數
cell_layout- 一GtkCellLayout
cell- a 重新排序GtkCellRenderer
position- 插入細胞的新位置
2.4 起
另請參見
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_set_attributes ----

gtk_cell_layout_set_attributes
將清單中的屬性設置為cell_layout的屬性。屬性應按屬性/列順序排列，如 ingtk_cell_layout_add_attribute（）。將刪除所有現有屬性，並將其替換為新屬性。
語法
參數
cell_layout- 一GtkCellLayout
cell- 一GtkCellRenderer
...- 以 NULL 結尾的屬性清單
2.4 起
另請參見
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_set_cell_data_func ----

gtk_cell_layout_set_cell_data_func
設置用於cell_layout。此函數用於設置列值，而不是標準屬性映射，並且應根據需要設置 cell_layout'scell 渲染器的值。func 可能為 NULL 以刪除先前設置的函數。GtkCellLayoutDataFunc
語法
參數
cell_layout- 一GtkCellLayout
cell- 一GtkCellRenderer
func- 要使用的，或 NULL。[允許-無]GtkCellLayoutDataFunc
func_data- 功能的使用者資料
destroy- func_data銷毀通知
2.4 起
另請參見
GtkCellLayout


------------ KeyGTK3gtk_cell_renderer_accel_new ----

gtk_cell_renderer_accel_new
創建新的 .GtkCellRendererAccel
返回
新的儲存格渲染器
自 2.1 起
另請參見
GtkCellRendererAccel


------------ KeyGTK3gtk_cell_renderer_activate ----

gtk_cell_renderer_activate
將啟動事件傳遞給儲存格呈現器以進行可能的處理。某些儲存格渲染器可能會使用事件;例如，在按一下滑鼠時切換。GtkCellRendererToggle
語法
參數
cell- 一GtkCellRenderer
event- 一GdkEvent
widget- 接收事件的小部件
path- 事件位置的 widget 相關字串表示形式;例如 for ，字串表示GtkTreeViewGtkTreePath
background_area- 傳遞給gtk_cell_renderer_render（）的背景區域
cell_area- 傳遞給gtk_cell_renderer_render（）的儲存格區域
flags- 渲染標誌
返回
如果事件已被使用/處理，則為 TRUE
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_class_set_accessible_type ----

gtk_cell_renderer_class_set_accessible_type
設置用於為由renderer_class的儲存格呈現器呈現的儲存格創建輔助工具的類型。請注意，將創建多個輔助工具。此函數只能從 cellrenderers 的類 init 函數中調用。
語法
參數
renderer_class- 用於設置輔助類型的類
type- 實現widget_class可訪問的物件類型。類型必須是GtkRendererCellAccessible
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_combo_new ----

gtk_cell_renderer_combo_new
創建新的 .使用物件屬性調整文本的繪製方式。物件屬性可以全域設置（使用g_object_set（））。此外，使用 ，可以將屬性綁定到 中的值。例如，您可以綁定 ？text？屬性，則將 屬性呈現為模型中的字串值，從而在 的每一行中呈現不同的字串。GtkCellRendererComboGtkTreeViewColumnGtkTreeModelGtkTreeView
返回
新的儲存格渲染器
自 2.
另請參見
GtkCellRendererCombo


------------ KeyGTK3gtk_cell_renderer_get_aligned_area ----

gtk_cell_renderer_get_aligned_area
獲取cell_area內儲存格使用的對齊區域。用於查找適當的編輯和焦點矩形。
語法
參數
cell- 一個實例GtkCellRenderer
widget- 此儲存格將呈現為GtkWidget
flags- 渲染標誌
cell_area- 將傳遞給gtk_cell_renderer_render（）的儲存格區域
aligned_area- cell_areathat內部空間的返回位置將用於渲染。[輸出]
自 3.0 起
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_alignment ----

gtk_cell_renderer_get_alignment
用適當的儲存格值填充 xalign 和 yalign。
語法
參數
cell- 一GtkCellRenderer
xalign- 使用儲存格的 x 對齊方式填充的位置，或 NULL。[輸出][允許-無]
yalign- 使用儲存格的y對齊方式填充的位置，或NULL。[輸出][允許-無]
自 2.18 起
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_fixed_size ----

gtk_cell_renderer_get_fixed_size
使用適當的儲存格大小填充寬度和高度。
語法
參數
cell- 一GtkCellRenderer
width- 使用儲存格的固定寬度填充的位置，或 NULL。[輸出][允許-無]
height- 使用儲存格的固定高度填充的位置，或 NULL。[輸出][允許-無]
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_padding ----

gtk_cell_renderer_get_padding
在 xpad 和 ypad 中填充適當的儲存格值。
語法
參數
cell- 一GtkCellRenderer
xpad- 使用儲存格的 x 填充的位置，或 NULL。[輸出][允許-無]
ypad- 使用儲存格的 y 填充填充的位置，或 NULL。[輸出][允許-無]
自 2.18 起
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_preferred_height ----

gtk_cell_renderer_get_preferred_height
在渲染到小部件時提取渲染器的自然大小。
語法
參數
cell- 一個實例GtkCellRenderer
widget- 此儲存格將呈現為GtkWidget
minimum_size- 存儲最小大小的位置，或 NULL。[輸出][允許-無]
natural_size- 存儲自然大小的位置，或 NULL。[輸出][允許-無]
自 3.0 起
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_preferred_height_for_width ----

gtk_cell_renderer_get_preferred_height_for_width
如果儲存格渲染器被渲染為具有指定寬度的微件，則提取該渲染器的最小高度和自然高度。
語法
參數
cell- 一個實例GtkCellRenderer
widget- 此儲存格將呈現為GtkWidget
width- 可用於分配的大小
minimum_height- 用於存儲最小大小的位置，或 NULL。[輸出][允許-無]
natural_height- 用於存儲首選大小的位置，或 NULL。[輸出][允許-無]
自 3.0 起
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_preferred_size ----

gtk_cell_renderer_get_preferred_size
檢索儲存格的最小和自然大小，並考慮小部件對高度寬度管理的首選項。
語法
參數
cell- 一個實例GtkCellRenderer
widget- 此儲存格將呈現為GtkWidget
minimum_size- 用於存儲最小大小的位置，或 NULL。[輸出][允許-無]
natural_size- 用於存儲自然大小的位置，或 NULL。[輸出][允許-無]
自 3.0 起
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_preferred_width ----

gtk_cell_renderer_get_preferred_width
在渲染到小部件時提取渲染器的自然大小。
語法
參數
cell- 一個實例GtkCellRenderer
widget- 此儲存格將呈現為GtkWidget
minimum_size- 存儲最小大小的位置，或 NULL。[輸出][允許-無]
natural_size- 存儲自然大小的位置，或 NULL。[輸出][允許-無]
自 3.0 起
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_preferred_width_for_height ----

gtk_cell_renderer_get_preferred_width_for_height
如果儲存格渲染器被渲染到具有指定高度的微件，則提取該儲存格渲染器的最小寬度和自然寬度。
語法
參數
cell- 一個實例GtkCellRenderer
widget- 此儲存格將呈現為GtkWidget
height- 可用於分配的大小
minimum_width- 用於存儲最小大小的位置，或 NULL。[輸出][允許-無]
natural_width- 用於存儲首選大小的位置，或 NULL。[輸出][允許-無]
自 3.0 起
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_request_mode ----

gtk_cell_renderer_get_request_mode
獲取儲存格呈現器是首選高與寬佈局還是首選“逐高”佈局。
語法
參數
cell- 一個實例GtkCellRenderer
返回
此渲染器的首選。GtkSizeRequestMode
自 3.
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_sensitive ----

gtk_cell_renderer_get_sensitive
返回儲存格渲染器的靈敏度。
語法
參數
cell- 一GtkCellRenderer
返回
如果儲存格渲染器敏感，則為 TRUE
自 2.18 起
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_size ----

gtk_cell_renderer_get_size
gtk_cell_renderer_get_size自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_cell_renderer_get_preferred_size（）。獲取渲染儲存格所需的寬度和高度。視圖微件用於確定傳遞togtk_cell_renderer_render（） cell_area的適當大小。如果 cell_area 不為 NULL，則填充儲存格相對於此位置的 x 和 y 偏移量（如果已設置）。請注意，在寬度和高度中設置的值，以及x_offset和y_offset中設置的值包括 xpad 和 ypad 屬性。
語法
參數
cell- 一GtkCellRenderer
widget- 渲染器正在渲染的小部件
cell_area- 將分配儲存格的區域，或 NULL。[允許-無]
x_offset- 位置返回儲存格相對於cell_area的 x 偏移量，或 NULL。[輸出][允許-無]
y_offset- 位置返回儲存格相對於cell_area的 y 偏移量，或 NULL。[輸出][允許-無]
width- 位置返回渲染儲存格所需的寬度，或 NULL。[輸出][允許-無]
height- 位置返回渲染儲存格所需的高度，或 NULL。[輸出][允許-無]
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_state ----

gtk_cell_renderer_get_state
根據儲存格渲染器和小部件的靈敏度，將儲存格渲染器狀態轉換為 ，並給定的 .GtkStateFlagsGtkCellRendererState
語法
參數
cell- a 或空值GtkCellRenderer
widget- a 或空值GtkWidget
cell_state- 儲存格渲染器狀態
返回
應用於儲存格的微件狀態標誌
自 3.0 起
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_visible ----

gtk_cell_renderer_get_visible
返回儲存格呈現器的可見性。
語法
參數
cell- 一GtkCellRenderer
返回
如果儲存格渲染器可見，則為 TRUE
自 2.18 起
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_is_activatable ----

gtk_cell_renderer_is_activatable
檢查儲存格渲染器在啟動時是否可以執行某些操作。
語法
參數
cell- 一GtkCellRenderer
返回
如果儲存格渲染器在啟動時可以執行任何操作，則為 TRUE
自 3.0 起
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_pixbuf_new ----

gtk_cell_renderer_pixbuf_new
創建新的 .使用物件屬性調整渲染參數。物件屬性可以設置為全域（使用g_object_set（））。此外，使用 ，可以將屬性綁定到 中的值。例如，您可以綁定 ？pixbuf？屬性上的儲存格渲染器在模型中以圖元buf值，從而在每行中呈現不同的圖像。GtkCellRendererPixbufGtkTreeViewColumnGtkTreeModelGtkTreeView
返回
新儲存格渲染
另請參見
GtkCellRendererPixbuf


------------ KeyGTK3gtk_cell_renderer_progress_new ----

gtk_cell_renderer_progress_new
創建新的 .GtkCellRendererProgress
返回
新的儲存格渲染器
自 2.
另請參見
GtkCellRendererProgress


------------ KeyGTK3gtk_cell_renderer_render ----

gtk_cell_renderer_render
調用 的虛擬渲染函數。三個傳入矩形是 cr 中的區域。大多數渲染器將繪製withincell_area;對於cell_area，應尊重的 xalign、yalign、xpad 和 ypad 欄位。background_area包括儲存格周圍的空白區域，以及包含樹擴展器的區域;因此，所有儲存格拼貼background_area矩形以覆蓋整個視窗。GtkCellRendererGtkCellRenderer
語法
參數
cell- 一GtkCellRenderer
cr- 一個開羅語境來畫
widget- 小部件擁有窗口
background_area- 整個細胞區域（包括樹擴展器和側面的可能填充物）
cell_area- 通常由儲存格渲染器渲染的區域
flags- 影響渲染的標誌
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_set_alignment ----

gtk_cell_renderer_set_alignment
在其可用空間內設置渲染器的對齊方式。
語法
參數
cell- 一GtkCellRenderer
xalign- 儲存格渲染器的 x 對齊方式
yalign- 儲存格渲染器的 y 對齊方式
自 2.18 起
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_set_fixed_size ----

gtk_cell_renderer_set_fixed_size
將呈現器大小設置為顯式，獨立於屬性集。
語法
參數
cell- 一GtkCellRenderer
width- 儲存格渲染器的寬度，或 -1
height- 儲存格渲染器的高度，或 -1
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_set_padding ----

gtk_cell_renderer_set_padding
設置渲染器的填充。
語法
參數
cell- 一GtkCellRenderer
xpad- 儲存格渲染器的 x 填充
ypad- 儲存格渲染器的 y 填充
自 2.18 起
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_set_sensitive ----

gtk_cell_renderer_set_sensitive
Sets the cell renderer?s sensitivity.
Syntax
Parameters
cell  -  	A GtkCellRenderer
sensitive  -  	the sensitivity of the cell
Since 2.18
See Also
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_set_visible ----

gtk_cell_renderer_set_visible
Sets the cell renderer?s visibility.
Syntax
Parameters
cell  -  	A GtkCellRenderer
visible  -  	the visibility of the cell
Since 2.18
See Also
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_spinner_new ----

gtk_cell_renderer_spinner_new
Returns a new cell renderer which will show a spinner to indicateactivity.
Returns
a new GtkCellRenderer
Since 2.2
See Also
GtkCellRendererSpinner


------------ KeyGTK3gtk_cell_renderer_spin_new ----

gtk_cell_renderer_spin_new
創建新的 .GtkCellRendererSpin
返回
一個新的GtkCellRendererSpin
自 2.1 起
另請參見
GtkCellRendererSpin


------------ KeyGTK3gtk_cell_renderer_start_editing ----

gtk_cell_renderer_start_editing
將啟動事件傳遞給儲存格呈現器以進行可能的處理。
語法
參數
cell- 一GtkCellRenderer
event- 一GdkEvent
widget- 接收事件的小部件
path- 事件位置的 widget 相關字串表示形式;例如 for ，字串表示GtkTreeViewGtkTreePath
background_area- 傳遞給gtk_cell_renderer_render（）的背景區域
cell_area- 傳遞給gtk_cell_renderer_render（）的儲存格區域
flags- 渲染標誌
返回
新的 或空值。[無轉移]GtkCellEditable
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_stop_editing ----

gtk_cell_renderer_stop_editing
通知儲存格渲染器編輯已停止。如果取消為 TRUE，則儲存格渲染器將發出信號。此函數應由單元呈現器實現調用，以回應 的信號。?editing-canceled??editing-done?GtkCellEditable
語法
參數
cell- 一GtkCellRenderer
canceled- 如果編輯已取消，則為 TRUE
自 2.6 起
另請參見
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_text_new ----

gtk_cell_renderer_text_new
創建新的 .使用物件屬性調整文本的繪製方式。物件屬性可以全域設置（使用g_object_set（））。此外，使用 ，可以將屬性綁定到 中的值。例如，您可以綁定 ？text？屬性在儲存格呈現器上轉換為模型中的字串值，從而在GtkCellRendererTextGtkTreeViewColumnGtkTreeModelGtkTreeView
返回
新的儲存格渲染器
另請參見
GtkCellRendererText


------------ KeyGTK3gtk_cell_renderer_text_set_fixed_height_from_font ----

gtk_cell_renderer_text_set_fixed_height_from_font
將呈現器的高度設置為由 ？font？ 顯式確定。和？y_pad？屬性設置在其上。這些屬性的進一步更改不會影響高度，因此必須伴隨對此函數的後續調用。使用這個函數是不靈活的，只有在計算儲存格的大小太慢（即，顯示大量儲存格）時才應該使用。如果number_of_rows為 -1，則不設置固定高度，並且再次由屬性確定高度。
語法
參數
renderer- 一GtkCellRendererText
number_of_rows- 每個儲存格呈現器分配的文本行數，或 -1[br \=“”
另請參見
GtkCellRendererText


------------ KeyGTK3gtk_cell_renderer_toggle_get_activatable ----

gtk_cell_renderer_toggle_get_activatable
返回儲存格呈現器是否可啟動。Seegtk_cell_renderer_toggle_set_activatable（）.
語法
參數
toggle- 一GtkCellRendererToggle
返回
如果儲存格渲染器是可啟動的，則為 TRUE。
自 2.18 起
另請參見
GtkCellRendererToggle


------------ KeyGTK3gtk_cell_renderer_toggle_get_active ----

gtk_cell_renderer_toggle_get_active
返回儲存格呈現器是否處於活動狀態。Seegtk_cell_renderer_toggle_set_active（）.
語法
參數
toggle- 一GtkCellRendererToggle
返回
如果儲存格渲染器處於活動狀態，則為 TRUE。
另請參見
GtkCellRendererToggle


------------ KeyGTK3gtk_cell_renderer_toggle_get_radio ----

gtk_cell_renderer_toggle_get_radio
返回我們是否正在呈現無線電開關而不是核取方塊。
語法
參數
toggle- 一GtkCellRendererToggle
返回
TRUE，如果我們正在渲染無線電開關而不是核取方塊
另請參見
GtkCellRendererToggle


------------ KeyGTK3gtk_cell_renderer_toggle_new ----

gtk_cell_renderer_toggle_new
創建新的 .使用物件屬性調整渲染參數。物件屬性可以設置為全域（使用g_object_set（））。此外，使用 ，可以將屬性綁定到 中的值。例如，您可以綁定 “活動？”屬性在儲存格渲染器上轉換為模型中的布林值，從而導致檢查按鈕反映模型的狀態。GtkCellRendererToggleGtkTreeViewColumnGtkTreeModel
返回
新的儲存格渲染器
另請參見
GtkCellRendererToggle


------------ KeyGTK3gtk_cell_renderer_toggle_set_activatable ----

gtk_cell_renderer_toggle_set_activatable
使儲存格渲染器可啟動。
語法
參數
toggle- 一個.GtkCellRendererToggle
setting- 要設置的值。
自 2.1 起
另請參見
GtkCellRendererToggle


------------ KeyGTK3gtk_cell_renderer_toggle_set_active ----

gtk_cell_renderer_toggle_set_active
啟動或停用儲存格渲染器。
語法
參數
toggle- 一個.GtkCellRendererToggle
setting- 要設置的值。
另請參見
GtkCellRendererToggle


------------ KeyGTK3gtk_cell_renderer_toggle_set_radio ----

gtk_cell_renderer_toggle_set_radio
如果無線電為 TRUE，則儲存格渲染器將呈現無線電切換（即一組互斥切換中的切換）。如果為 FALSE，則呈現檢查切換（獨立布林選項）。這可以為儲存格渲染器全域設置，也可以在渲染模型中的每個儲存格之前進行更改（對於 ，您可以使用 將模型列與儲存格渲染器屬性相關聯來設置每行設置）。GtkTreeViewGtkTreeViewColumn
語法
參數
toggle- 一GtkCellRendererToggle
radio- TRUE使切換看起來像一個選項按鈕
另請參見
GtkCellRendererToggle


------------ KeyGTK3gtk_cell_view_get_displayed_row ----

gtk_cell_view_get_displayed_row
返回對當前顯示的行的引用。如果當前未顯示任何行，則返回 NULL。GtkTreePath
語法
參數
cell_view- 一GtkCellView
返回
當前顯示的行或 NULL
自 2.6 起
另請參見
GtkCellView


------------ KeyGTK3gtk_cell_view_get_draw_sensitive ----

gtk_cell_view_get_draw_sensitive
獲取是否cell_view配置為在敏感狀態下繪製其儲存格。
語法
參數
cell_view- 一GtkCellView
返回
cell_viewdraws所有處於敏感狀態的電池
自 3.0 起
另請參見
GtkCellView


------------ KeyGTK3gtk_cell_view_get_fit_model ----

gtk_cell_view_get_fit_model
獲取是否cell_view配置為請求空間以適合整個 .GtkTreeModel
語法
參數
cell_view- 一GtkCellView
返回
是否cell_viewrequests空間來適應整個.GtkTreeModel
自 3.
另請參見
GtkCellView


------------ KeyGTK3gtk_cell_view_get_model ----

gtk_cell_view_get_model
返回cell_view模型。如果未使用任何模型，則返回 NULL。
語法
參數
cell_view- 一GtkCellView
返回
已用或空。[無轉移]GtkTreeModel
2.16 起
另請參見
GtkCellView


------------ KeyGTK3gtk_cell_view_get_size_of_row ----

gtk_cell_view_get_size_of_row
gtk_cell_view_get_size_of_row自 3.0 版起已棄用，不應在新編寫的代碼中使用。下拉式列示方塊以前使用它來計算儲存格視圖的大小，現在您可以通過使用該屬性或使用gtk_widget_get_preferred_size（）設置當前顯示的行來實現此目的。將申請設置為cell_view顯示路徑所指向的模型行所需的大小。?fit-model?GtkCellView
語法
參數
cell_view- 一GtkCellView
path- 一GtkTreePath
requisition- 返回大小的位置。[輸出]
返回
真
自 2.6 起
另請參見
GtkCellView


------------ KeyGTK3gtk_cell_view_new ----

gtk_cell_view_new
創建新的構件。GtkCellView
返回
新創建的小部件。GtkCellView
自 2.6 起
另請參見
GtkCellView


------------ KeyGTK3gtk_cell_view_new_with_context ----

gtk_cell_view_new_with_context
創建一個新構件，其中包含特定於佈局儲存格和特定 .為少量儲存格指定相同的上下文可以使底層區域同步這些儲存格的幾何圖形，這樣就可以與其他行的儲存格視圖對齊。GtkCellViewGtkCellAreaGtkCellAreaContext
語法
參數
area- 將儲存格佈局GtkCellArea
context- 計算細胞幾何形狀GtkCellAreaContext
返回
新創建的小部件。GtkCellView
自 2.6 起
另請參見
GtkCellView


------------ KeyGTK3gtk_cell_view_new_with_markup ----

gtk_cell_view_new_with_markup
創建一個新的小部件，向其添加 ，並使其顯示標記。文本可以使用Pango文本標記語言進行標記。GtkCellViewGtkCellRendererText
語法
參數
markup- 要在儲存格視圖中顯示的文本
返回
新創建的小部件。GtkCellView
自 2.6 起
另請參見
GtkCellView


------------ KeyGTK3gtk_cell_view_new_with_pixbuf ----

gtk_cell_view_new_with_pixbuf
創建一個新的小部件，向其添加一個，並使其顯示 pixbuf。GtkCellViewGtkCellRendererPixbuf
語法
參數
pixbuf- 要在儲存格視圖中顯示的圖像
返回
新創建的小部件。GtkCellView
自 2.6 起
另請參見
GtkCellView


------------ KeyGTK3gtk_cell_view_new_with_text ----

gtk_cell_view_new_with_text
創建一個新的構件，向其添加 ，並使其顯示文本。GtkCellViewGtkCellRendererText
語法
參數
text- 要在儲存格視圖中顯示的文本
返回
新創建的小部件。GtkCellView
自 2.6 起
另請參見
GtkCellView


------------ KeyGTK3gtk_cell_view_set_background_color ----

gtk_cell_view_set_background_color
gtk_cell_view_set_background_color自版本 3.4 起已棄用，不應在新編寫的代碼中使用。請改用 gtk_cell_view_set_background_rgba（）。設置視圖的背景色。
語法
參數
cell_view- 一GtkCellView
color- 新的背景顏色
自 2.6 起
另請參見
GtkCellView


------------ KeyGTK3gtk_cell_view_set_background_rgba ----

gtk_cell_view_set_background_rgba
設置cell_view的背景色。
語法
參數
cell_view- 一GtkCellView
rgba- 新的背景顏色
自 3.0 起
另請參見
GtkCellView


------------ KeyGTK3gtk_cell_view_set_displayed_row ----

gtk_cell_view_set_displayed_row
設置當前由 顯示的模型的行。如果路徑未設置，則儲存格視圖的內容？stick？在它們的最後一個值;這通常不是一個期望的結果，但可能是一個需要的中間狀態，如果說，的模型暫時變成空。GtkCellViewGtkCellView
語法
參數
cell_view- 一GtkCellView
path- a 或 NULL 以取消設置。[允許-無]GtkTreePath
自 2.6 起
另請參見
GtkCellView


------------ KeyGTK3gtk_cell_view_set_draw_sensitive ----

gtk_cell_view_set_draw_sensitive
設置cell_view是否應以敏感狀態繪製其儲存格，menus 使用此選項來確保包含子項的不敏感儲存格的行在父功能表項目中顯得敏感。GtkComboBox
語法
參數
cell_view- 一GtkCellView
draw_sensitive- 是否將所有儲存格繪製為敏感狀態。
自 3.0 起
另請參見
GtkCellView


------------ KeyGTK3gtk_cell_view_set_fit_model ----

gtk_cell_view_set_fit_model
設置cell_view是否應請求空間以適合整個 .此參數用於確保下拉式列示方塊按鈕上顯示的儲存格視圖始終獲得足夠的空間，並且在選擇發生更改時不調整大小。GtkTreeModelGtkComboBox
語法
參數
cell_view- 一GtkCellView
fit_model- 是否cell_viewshould請求整個模型的空間。
自 3.0 起
另請參見
GtkCellView


------------ KeyGTK3gtk_cell_view_set_model ----

gtk_cell_view_set_model
設置cell_view的模型。如果cell_view已有模型集，則會在設置新模型之前將其刪除。如果模型是NULL，那麼它將取消設置舊模型。
語法
參數
cell_view- 一GtkCellView
model- 一個.[允許-無]GtkTreeModel
自 2.6 起
另請參見
GtkCellView


------------ KeyGTK3gtk_check_button_new ----

gtk_check_button_new
創建新的 .GtkCheckButton
返回
一個。GtkWidget
另請參見
GtkCheckButton


------------ KeyGTK3gtk_check_button_new_with_label ----

gtk_check_button_new_with_label
創建一個右側帶有 的 new。GtkCheckButtonGtkLabel
語法
參數
label- 檢查按鈕的文本。
返回
一個。GtkWidget
另請參見
GtkCheckButton


------------ KeyGTK3gtk_check_button_new_with_mnemonic ----

gtk_check_button_new_with_mnemonic
創建包含標籤的新標籤。標籤將使用gtk_label_new_with_mnemonic（）創建，因此底線標籤指示檢查按鈕的助記符。GtkCheckButton
語法
參數
label- 按鈕的文本，在字母字元前面帶有底線
返回
一個新的GtkCheckButton[/code
See Also
GtkCheckButton


------------ KeyGTK3gtk_check_menu_item_get_active ----

gtk_check_menu_item_get_active
返回檢查功能表項目是否處於活動狀態。Seegtk_check_menu_item_set_active（）.
語法
參數
check_menu_item- 一GtkCheckMenuItem
返回
如果選中功能表項目，則為 TRUE。
另請參見
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_get_draw_as_radio ----

gtk_check_menu_item_get_draw_as_radio
返回check_menu_item是否看起來像GtkRadioMenuItem
語法
參數
check_menu_item- 一GtkCheckMenuItem
返回
check_menu_itemlooks是否像GtkRadioMenuItem
自 2.
另請參見
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_get_inconsistent ----

gtk_check_menu_item_get_inconsistent
檢索由 gtk_check_menu_item_set_inconsistent（） 設置的值。
語法
參數
check_menu_item- 一GtkCheckMenuItem
返回
如果不一致，則為 TRUE
另請參見
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_new ----

gtk_check_menu_item_new
創建新的 .GtkCheckMenuItem
返回
一個新的.GtkCheckMenuItem
另請參見
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_new_with_label ----

gtk_check_menu_item_new_with_label
創建帶有標籤的新產品。GtkCheckMenuItem
語法
參數
label- 用於標籤的字串。
返回
一個新的.GtkCheckMenuItem
另請參見
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_new_with_mnemonic ----

gtk_check_menu_item_new_with_mnemonic
創建包含標籤的新標籤。標籤將使用gtk_label_new_with_mnemonic（）創建，因此底線標籤指示功能表項目的助記符。GtkCheckMenuItem
語法
參數
label- 按鈕的文本，字元前面有底線
返回
一個新的GtkCheckMenuItem
另請參見
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_set_active ----

gtk_check_menu_item_set_active
設置功能表項目核取方塊的活動狀態。
語法
參數
check_menu_item- 一個.GtkCheckMenuItem
is_active- 指示核取方塊是否處於活動狀態的布林值。
另請參見
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_set_draw_as_radio ----

gtk_check_menu_item_set_draw_as_radio
設置是否 check_menu_item像GtkRadioMenuItem
語法
參數
check_menu_item- 一GtkCheckMenuItem
draw_as_radio- check_menu_itemis畫得是否像一個GtkRadioMenuItem
2.4 起
另請參見
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_set_inconsistent ----

gtk_check_menu_item_set_inconsistent
如果使用者選擇了受布林設置影響的一系列元素（如某些文本或分頁儲存格），並且該範圍內的當前值不一致，則可能需要在“介於兩者之間？”中顯示檢查。州。此功能在兩者之間打開？顯示。通常，如果用戶顯式選擇設置，則會再次關閉不一致狀態。這必須手動執行，gtk_check_menu_item_set_inconsistent（）僅影響視覺外觀，而不會影響小部件的語義。
語法
參數
check_menu_item- 一GtkCheckMenuItem
setting- TRUE 可顯示 ？不一致？第三次狀態檢查
另請參見
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_toggled ----

gtk_check_menu_item_toggled
發出信號。?toggled?
語法
參數
check_menu_item- 一個.GtkCheckMenuItem
另請參見
GtkCheckMenuItem


------------ KeyGTK3GTK_CHECK_VERSION ----

GTK_CHECK_VERSION
GTK_CHECK_VERSION()
如果 GTK+ 標頭檔的版本與傳入的版本相同或更新，則返回 TRUE。
語法
參數
major- 主要版本（例如，版本1.2.5為1）
minor- 次要版本（例如，版本1.2.5為2）
micro- 微型版本（例如 1.2.5 版本為 5）
返回
如果 GTK+ 標頭是新的 enoug，則為 TRUE
另請參見
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_clipboard_clear ----

gtk_clipboard_clear
清除剪貼板的內容。通常，這應該只在您調用gtk_clipboard_set_with_owner（）或gtk_clipboard_set_with_data（）的時間之間調用，以及調用您提供的clear_func。否則，剪貼板可能歸其他人所有。
語法
參數
clipboard- 一GtkClipboard
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_get ----

gtk_clipboard_get
返回給定所選內容的剪貼板物件。有關完整的詳細資訊，請參見 gtk_clipboard_get_for_display（）。
語法
參數
selection- 標識要使用的剪貼板GdkAtom
返回
相應的剪貼板對象。如果不存在剪貼板，則將創建一個新剪貼板。一旦創建了剪貼板物件，它就是持久的，並且由於它由GTK +擁有，因此不得釋放或取消恢復。[無轉移]
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_get_display ----

gtk_clipboard_get_display
獲取與剪貼板關聯的GdkDisplay
語法
參數
clipboard- 一GtkClipboard
返回
與剪貼板關聯的。[無轉移]GdkDisplay
自 2.2 起
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_get_for_display ----

gtk_clipboard_get_for_display
返回給定所選內容的剪貼板物件。剪切/複製/粘貼功能表項目和鍵盤快速鍵應使用預設剪貼板，通過傳遞GDK_SELECTION_CLIPBOARD進行選擇來返回。（出於GDK_SELECTION_CLIPBOARDfor向後相容性原因，支持將GDK_NONE作為同義詞。當前選定的物件或文本應在剪貼板上提供，由 標識。剪切/複製/粘貼功能表項目概念性地將剪貼板的內容複製到預設剪貼板，即它們將選擇複製到使用者視為剪貼板的內容。（傳遞與使用gdk_atom_intern相同（“剪貼板”，FALSE）。請參閱FreeDesktop剪貼板規範，詳細瞭解 ？剪貼板？與。？主要？選擇在 X 視窗系統下。在 Win32 上，剪貼板基本上被忽略。可以有任意命名的剪貼板;如果您發明了新的剪貼板，則應在選擇名稱前面加上 anunderscore 首碼（因為 ICCCM 要求非標準原子以內核為首碼），並為其命名命名空間。例如，如果您的應用程式調用 ？傅？有一個特殊用途的剪貼板，你可以稱之為“_FOO_SPECIAL_CLIPBOARD”。GDK_SELECTION_PRIMARYGDK_SELECTION_PRIMARYGDK_NONEGDK_SELECTION_PRIMARY
語法
參數
display- 要檢索或創建剪貼板的剪貼板。GdkDisplay
selection- a 標識要使用的剪貼板。GdkAtom
返回
相應的剪貼板對象。如果 noclipboard 已經存在，則將創建一個新的。創建剪貼板物件後，它是持久的，並且由於它由GTK +擁有，因此不得釋放或取消引用。[無轉移]
自 2.2 起
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_get_owner ----

gtk_clipboard_get_owner
如果剪貼板內容回檔設置為 withgtk_clipboard_set_with_owner（），並且隨後未調用 gtk_clipboard_set_with_data（） orgtk_clipboard_clear（）， 則返回所有者 setby gtk_clipboard_set_with_owner（）。
語法
參數
clipboard- 一GtkClipboard
返回
剪貼板的所有者（如果有）;否則為 NULL。[無轉移]
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_request_contents ----

gtk_clipboard_request_contents
請求剪貼板的內容作為給定目標。稍後收到結果結果時，將調用提供的回檔。
語法
參數
clipboard- 一GtkClipboard
target- 一個原子，表示剪貼板所有者應將所選內容轉換為的形式。
callback- 接收結果（或檢索失敗）時要調用的函數。如果檢索失敗，則長度欄位ofselection_datawill為負數。[範圍非同步]
user_data- 要傳遞到回檔的使用者資料
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_request_image ----

gtk_clipboard_request_image
請求將剪貼板的內容作為圖像。當收到圖像時，它將轉換為 ，並調用回呼。如果請求成功，則回檔的 pixbuf 參數將包含結果，如果請求失敗，則包含 NULL。發生這種情況的原因有很多，特別是如果剪貼板是空的，或者剪貼板的內容無法轉換為圖像。GdkPixbufGdkPixbuf
語法
參數
clipboard- 一GtkClipboard
callback- 接收到圖像或檢索失敗時調用的函數。（它將永遠以一種或另一種方式調用。[範圍非同步]
user_data- 要傳遞給回檔的使用者資料。
自 2.6 起
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_request_rich_text ----

gtk_clipboard_request_rich_text
請求將剪貼板的內容作為格式文本。稍後收到富文本時，將調用回檔。要回檔的文本參數將包含生成的富文本（如果請求成功），如果請求失敗，則包含 NULL。長度參數將包含文本的長度。此函數可能會因各種原因而失敗，尤其是在剪貼板為空或剪貼板的內容無法轉換為富文本格式時。
語法
參數
clipboard- 一GtkClipboard
buffer- 一GtkTextBuffer
callback- 接收到文本或檢索失敗時調用的函數。（它將永遠以一種或另一種方式調用。[範圍非同步]
user_data- 要傳遞給回檔的使用者資料。
自 2.10 起
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_request_targets ----

gtk_clipboard_request_targets
請求將剪貼板的內容作為受支援目標的清單。稍後收到列表時，將調用回檔。如果請求成功，則要回檔的 targets 參數將包含生成的目標;如果請求失敗，則包含 NULL。
語法
參數
clipboard- 一GtkClipboard
callback- 在收到目標或檢索失敗時要調用的函數。（它將永遠以一種方式或另一種方式調用。[範圍非同步]
user_data- 要傳遞給回檔的使用者資料。
2.4 起
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_request_text ----

gtk_clipboard_request_text
請求將剪貼板的內容作為文本。當收到文本時，如有必要，它將轉換為 UTF-8，並調用回撥。如果請求成功，則要回檔的文本參數將包含生成的文本;如果請求失敗，則包含 NULL。發生這種情況的原因多種多樣，特別是如果剪貼板為空或剪貼板的內容無法轉換為文本形式。
語法
參數
clipboard- 一GtkClipboard
callback- 接收到文本或檢索失敗時調用的函數。（它將永遠以一種或另一種方式調用。[範圍非同步]
user_data- 要傳遞給回檔的使用者資料。
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_request_uris ----

gtk_clipboard_request_uris
請求將剪貼板的內容作為 URI。當收到 URI 時，將調用回檔。如果請求成功，則回檔的 uris 參數將包含生成的 URI 陣列，如果請求失敗，則包含 NULL。發生這種情況的原因有多種，特別是如果剪貼板為空或剪貼板的內容無法轉換為 URI 形式。
語法
參數
clipboard- 一GtkClipboard
callback- 在收到URI或檢索失敗時調用的函數。（它將永遠以一種或另一種方式調用。[範圍非同步]
user_data- 要傳遞給回檔的使用者資料。
自 2.14 起
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_set_can_store ----

gtk_clipboard_set_can_store
提示當應用程式退出或調用 gtk_clipboard_store（） 時，剪貼板資料應存儲在某個位置。當剪貼板所有者更改時，將重置此值。剪貼板資料的存儲位置取決於平臺，有關詳細資訊，請參閱gdk_display_store_clipboard（）。
語法
參數
clipboard- 一GtkClipboard
targets- 包含有關應存儲哪些表單的資訊的陣列或 NULLto 指示應存儲所有表單。[允許-無][陣列長度 = n_targets]
n_targets- 目標中的元素數量
自 2.6 起
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_set_image ----

gtk_clipboard_set_image
將剪貼板的內容設置為給定的 。GTK+將負責回應對圖像的請求，並將圖像轉換為請求的格式。GdkPixbuf
語法
參數
clipboard- 一個物件GtkClipboard
pixbuf- 一GdkPixbuf
自 2.6 起
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_set_text ----

gtk_clipboard_set_text
將剪貼板的內容設置為給定的 UTF-8 字串。GTK+將製作文本的副本，並負責回應文本請求，並將文本轉換為請求的格式。
語法
參數
clipboard- 一個物件GtkClipboard
text- 一個 UTF-8 字串。
len- 文本長度，以位元組為單位，或 -1，在這種情況下，長度將使用 strlen（） 確定。
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_set_with_data ----

gtk_clipboard_set_with_data
通過提供剪貼板資料支援的格式清單和在請求實際資料時調用以獲取實際資料的函數，以虛擬方式設置指定剪貼板的內容。
語法
參數
clipboard- 一GtkClipboard
targets- 包含有關剪貼板資料的可用表單的資訊的陣列。[陣列長度 = n_targets]
n_targets- 目標中的元素數量
get_func- 調用函數以獲取實際的剪貼板資料。[範圍非同步]
clear_func- 當剪貼板內容再次設置時，將調用此函數，並且get_funcwill不會隨後調用。[範圍非同步]
user_data- 要傳遞給get_funcand clear_func的使用者資料。
返回
如果成功設置剪貼板資料，則為 TRUE。如果設置剪貼板資料失敗，則將忽略提供的回呼函數。
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_set_with_owner ----

gtk_clipboard_set_with_owner
通過提供剪貼板資料支援的格式清單和在請求實際資料時調用以獲取實際資料的函數，以虛擬方式設置指定剪貼板的內容。此函數與 gtk_clipboard_set_with_data（） 之間的區別在於，傳入的不是泛型user_data指針。GObject
語法
參數
clipboard- 一GtkClipboard
targets- 包含有關剪貼板資料的可用表單的資訊的陣列。[陣列長度 = n_targets]
n_targets- 目標中的元素數量
get_func- 調用函數以獲取實際的剪貼板資料。[範圍非同步]
clear_func- 當剪貼板內容再次設置時，將調用此函數，並且get_funcwill不會隨後調用。[範圍非同步]
owner- 一個“擁有”的物件資料。此物件將在調用時傳遞給回檔
返回
如果成功設置剪貼板資料，則為 TRUE。如果設置剪貼板資料失敗，則將忽略提供的回呼函數。
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_store ----

gtk_clipboard_store
將當前剪貼板資料存儲在某個位置，以便在應用程式退出後，該資料將保留。
語法
參數
clipboard- 一GtkClipboard
自 2.
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_for_contents ----

gtk_clipboard_wait_for_contents
使用給定目標請求剪貼板的內容。此函數等待使用主迴圈接收資料，因此在等待期間可以調度事件、超時等。
語法
參數
clipboard- 一GtkClipboard
target- 一個原子，表示剪貼板所有者應將所選內容轉換為的形式。
返回
新分配的物件或 NULLif 檢索給定目標失敗。如果不是 NULL，則在完成此值時，必須使用 gtk_selection_data_free（） 釋放它。GtkSelectionData
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_for_image ----

gtk_clipboard_wait_for_image
請求將剪貼板的內容作為圖像，並將結果轉換為 .此函數等待使用主迴圈接收資料，因此在等待期間可能會調度事件，超時等。GdkPixbuf
語法
參數
clipboard- 一GtkClipboard
返回
新分配的物件，如果檢索選擇資料失敗，則必須使用 g_object_unref（） 或 NULL 進行釋放。（這可能是由於各種原因，特別是如果剪貼板是空的，或者剪貼板的內容無法轉換為圖像。[轉移完整]GdkPixbuf
自 2.6 起
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_for_rich_text ----

gtk_clipboard_wait_for_rich_text
請求將剪貼板的內容作為格式文本。此函數等待使用主迴圈接收資料，因此在等待期間可以調度事件、超時等。
語法
參數
clipboard- 一GtkClipboard
buffer- 一GtkTextBuffer
format- 返回資料格式的返回位置。[輸出]
length- 返回資料長度的返回位置。[輸出]
返回
新分配的二進位資料塊，如果檢索選擇資料失敗，則必須使用 g_free（） 或 NULL 進行freed。（這可能出於各種原因而發生，特別是如果剪貼板是空的，或者剪貼板的內容無法轉換為文本形式。[陣列長度 = 長度][轉移完整]
自 2.10 起
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_for_targets ----

gtk_clipboard_wait_for_targets
返回剪貼板上存在的目標清單，或者返回沒有任何可用目標的 NULLif。返回的列表必須使用g_free（） 進行freed。此函數等待使用主環路接收資料，因此在等待期間可能會調度事件、超時等。
語法
參數
clipboard- 一GtkClipboard
targets- 位置存儲目標陣列。此處存儲的結果必須使用 g_free（） 進行釋放。[輸出][陣列長度 = n_targets][轉移容器]
n_targets- 位置存儲目標中的專案數量。[輸出]
返回
如果剪貼板上存在任何目標，則為 TRUE，否則為 FALSE。
2.4 起
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_for_text ----

gtk_clipboard_wait_for_text
請求將剪貼板的內容作為文本，並在必要時將結果轉換為 UTF-8。此函數等待使用主迴圈接收資料，因此在等待期間可能會調度事件，超時等。
語法
參數
clipboard- 一GtkClipboard
返回
新分配的 UTF-8 字串，必須使用 g_free（） 釋放該字串，如果檢索選擇資料失敗，則為 NULL。（由於各種原因，可能會發生這種情況，特別是如果剪貼板是空的，或者剪貼板的內容無法轉換為文本形式。
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_for_uris ----

gtk_clipboard_wait_for_uris
請求將剪貼板的內容作為 URI。此函數等待使用主迴圈接收資料，因此在等待期間可以調度事件，超時等。
語法
參數
clipboard- 一GtkClipboard
返回
新分配的 NULL 終止字串陣列，必須使用 g_strfreev（） 釋放該陣列，如果檢索選擇資料失敗，則為 NULL。（發生這種情況的原因有很多，特別是如果剪貼板是空的，或者剪貼板的內容無法轉換為URI形式。[陣列零終止 = 1][元素型 utf8][轉移完整]
自 2.14 起
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_is_image_available ----

gtk_clipboard_wait_is_image_available
測試以查看是否有可供粘貼的圖像這是通過請求目標原子並檢查它是否包含任何受支援的圖像目標來完成的。此函數等待使用主迴圈接收資料，因此在等待期間可以調度事件、超時等。此函數比callinggtk_clipboard_wait_for_image（） 快一點，因為它不需要檢索實際的圖像資料。
語法
參數
clipboard- 一GtkClipboard
返回
TRUE 是有可用的圖像，否則為 FALSE。
自 2.6 起
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_is_rich_text_available ----

gtk_clipboard_wait_is_rich_text_available
測試以查看是否有可供粘貼的富文本這是通過請求 TARGETS 原子並檢查它是否包含任何受支援的富文本目標來完成的。此函數等待使用主迴圈接收資料，因此在等待期間可以調度事件、超時等。此函數比callinggtk_clipboard_wait_for_rich_text（） 快一點，因為它不需要檢索實際文本。
語法
參數
clipboard- 一GtkClipboard
buffer- 一GtkTextBuffer
返回
TRUE 是有可用的富文本，否則為 FALSE。
自 2.10 起
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_is_target_available ----

gtk_clipboard_wait_is_target_available
檢查剪貼板是否支援粘貼給定類型的資料。此函數可用於確定 ？糊？功能表項目是否應不敏感。如果要查看剪貼板上是否有可用的文本，請改為usegtk_clipboard_wait_is_text_available（）。
語法
參數
clipboard- 一GtkClipboard
target- 指示要查找的目標。GdkAtom
返回
如果目標可用，則為 TRUE，否則為 FALSE。
自 2.6 起
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_is_text_available ----

gtk_clipboard_wait_is_text_available
測試以查看是否有可粘貼的文本這是通過請求 TARGETS 原子並檢查它是否包含任何受支援的文本目標來完成的。此函數等待使用主迴圈接收資料，因此在等待期間可以調度事件、超時等。此函數比callinggtk_clipboard_wait_for_text（） 快一點，因為它不需要檢索實際文本。
語法
參數
clipboard- 一GtkClipboard
返回
TRUE 是有可用的文本，否則為 FALSE。
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_is_uris_available ----

gtk_clipboard_wait_is_uris_available
測試以查看是否有可供粘貼的 URI 清單這是通過請求目標原子並檢查它是否包含 URI 目標來完成的。此函數等待使用主迴圈接收資料，因此可以在等待期間調度事件、超時等。此函數比callinggtk_clipboard_wait_for_uris（） 快一點，因為它不需要檢索實際的 URI 資料。
語法
參數
clipboard- 一GtkClipboard
返回
TRUE 是有一個可用的 URI 列表，否則為 FALSE。
自 2.14 起
另請參見
gtk3-Clipboards


------------ KeyGTK3gtk_color_button_get_alpha ----

gtk_color_button_get_alpha
gtk_color_button_get_alpha自版本 3.4 起已棄用，不應在新編寫的代碼中使用。請改用 gtk_color_chooser_get_rgba（）。返回當前 Alpha 值。
語法
參數
button- 一GtkColorButton
返回
介於 0 和 65535 之間的整數
2.4 起
另請參見
GtkColorButton


------------ KeyGTK3gtk_color_button_get_color ----

gtk_color_button_get_color
gtk_color_button_get_color自 3.4 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_color_chooser_get_rgba（）。將顏色設置為微件中的使用中色彩。GtkColorButton
語法
參數
button- 一GtkColorButton
color- a 以填充使用中色彩。[輸出]GdkColor
2.4 起
另請參見
GtkColorButton


------------ KeyGTK3gtk_color_button_get_rgba ----

gtk_color_button_get_rgba
gtk_color_button_get_rgba自 3.4 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_color_chooser_get_rgba（）。將 rgba 設置為微件中的使用中色彩。GtkColorButton
語法
參數
button- 一GtkColorButton
rgba- a 以填充使用中色彩。[輸出]GdkRGBA
自 3.0 起
另請參見
GtkColorButton


------------ KeyGTK3gtk_color_button_get_title ----

gtk_color_button_get_title
獲取顏色選擇對話方塊的標題。
語法
參數
button- 一GtkColorButton
返回
內部字串，不釋放返回值
自 2.
另請參見
GtkColorButton


------------ KeyGTK3gtk_color_button_get_use_alpha ----

gtk_color_button_get_use_alpha
gtk_color_button_get_use_alpha自版本 3.4 起已棄用，不應在新編寫的代碼中使用。請改用 gtk_color_chooser_get_use_alpha（）。顏色選擇對話方塊是否使用 Alpha 通道？
語法
參數
button- 一GtkColorButton
返回
如果顏色樣本使用 Alpha 通道，則為 TRUE;如果不使用，則為 FALSE
2.4 起
另請參見
GtkColorButton


------------ KeyGTK3gtk_color_button_new ----

gtk_color_button_new
創建新的顏色按鈕。這將以小按鈕的形式返回一個小部件，其中包含表示當前所選顏色的色板。按一下按鈕時，將打開一個顏色選擇對話方塊，允許用戶選擇一種顏色。當用戶完成時，色板將更新以反映新顏色。
返回
新的顏色按鈕
2.4 起
另請參見
GtkColorButton


------------ KeyGTK3gtk_color_button_new_with_color ----

gtk_color_button_new_with_color
gtk_color_button_new_with_color自 3.4 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_color_button_new_with_rgba（）。創建新的顏色按鈕。
語法
參數
color- A 用於設置使用中色彩GdkColor
返回
新的顏色按鈕
2.4 起
另請參見
GtkColorButton


------------ KeyGTK3gtk_color_button_new_with_rgba ----

gtk_color_button_new_with_rgba
創建新的顏色按鈕。
語法
參數
rgba- A 用於設置使用中色彩GdkRGBA
返回
新的顏色按鈕
自 3.0 起
另請參見
GtkColorButton


------------ KeyGTK3gtk_color_button_set_alpha ----

gtk_color_button_set_alpha
gtk_color_button_set_alpha自 3.4 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_color_chooser_set_rgba（）。將當前不透明度設置為 alpha。
語法
參數
button- 一GtkColorButton
alpha- 介於 0 和 65535 之間的整數
2.4 起
另請參見
GtkColorButton


------------ KeyGTK3gtk_color_button_set_color ----

gtk_color_button_set_color
gtk_color_button_set_color已棄用，不應在新編寫的代碼中使用。請改用 gtk_color_chooser_set_rgba（）。將使用中色彩設置為顏色。
語法
參數
button- 一GtkColorButton
color- A 用於設置使用中色彩GdkColor
2.4 起
另請參見
GtkColorButton


------------ KeyGTK3gtk_color_button_set_rgba ----

gtk_color_button_set_rgba
gtk_color_button_set_rgba自 3.4 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_color_chooser_set_rgba（）。將使用中色彩設置為 rgba。
語法
參數
button- 一GtkColorButton
rgba- a 用於設置使用中色彩GdkRGBA
自 3.0 起
另請參見
GtkColorButton


------------ KeyGTK3gtk_color_button_set_title ----

gtk_color_button_set_title
設置顏色選擇對話方塊的標題。
語法
參數
button- 一GtkColorButton
title- 包含新視窗標題的字串
2.4 起
另請參見
GtkColorButton


------------ KeyGTK3gtk_color_button_set_use_alpha ----

gtk_color_button_set_use_alpha
gtk_color_button_set_use_alpha自 3.4 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_color_chooser_set_use_alpha（）。設置顏色按鈕是否應使用 Alpha 通道。
語法
參數
button- 一GtkColorButton
use_alpha- TRUE 如果顏色按鈕應使用 Alpha 通道，則為 FALSE（如果不是）
2.4 起
另請參見
GtkColorButton


------------ KeyGTK3gtk_color_chooser_add_palette ----

gtk_color_chooser_add_palette
將調色板添加到顏色選擇器。如果方向是水準的，則顏色分組為行，每行colors_per_line顏色。如果水準為 FALSE，則顏色將分組到列中。has27 顏色的默認調色板，以 3 種顏色的列進行組織。默認的灰色轎子在一行中有 9 個灰色。顏色選擇器小部件的佈局在主題有 9-10 列時效果最佳。首次調用此函數具有從顏色選擇器中刪除默認顏色和灰色調色板的副作用。如果顏色為 NULL，則刪除以前添加的所有調色板。GtkColorChooserWidget
語法
參數
chooser- 一GtkColorChooser
orientation- GTK_ORIENTATION_HORIZONTAL調色板是否應以行顯示，GTK_ORIENTATION_VERTICAL列
colors_per_line- 每行/列中顯示的顏色數量
n_colors- 顏色元素的總數
colors- 調色板的顏色，或 NULL。[允許-無][陣列長度 = n_colors]
自 3.
另請參見
GtkColorChooser


------------ KeyGTK3gtk_color_chooser_dialog_new ----

gtk_color_chooser_dialog_new
創建新的 .GtkColorChooserDialog
語法
參數
title- 對話方塊的標題，或 NULL。[允許-無]
parent- 對話方塊的瞬態父級，或 NULL。[允許-無]
返回
一個新的GtkColorChooserDialog
自 3.
另請參見
GtkColorChooserDialog


------------ KeyGTK3gtk_color_chooser_get_rgba ----

gtk_color_chooser_get_rgba
獲取當前選定的顏色。
語法
參數
chooser- 一GtkColorChooser
color- a 以填充使用中色彩。[輸出]GdkRGBA
自 3.4 起
另請參見
GtkColorChooser


------------ KeyGTK3gtk_color_chooser_get_use_alpha ----

gtk_color_chooser_get_use_alpha
返回顏色選擇器是否顯示 Alpha 通道。
語法
參數
chooser- 一GtkColorChooser
返回
如果顏色選擇器使用 Alpha 通道，則為 TRUE，如果不是，則為 FALSE
自 3.4 起
另請參見
GtkColorChooser


------------ KeyGTK3gtk_color_chooser_set_rgba ----

gtk_color_chooser_set_rgba
設置顏色。
語法
參數
chooser- 一GtkColorChooser
color- 新顏色
自 3.4 起
另請參見
GtkColorChooser


------------ KeyGTK3gtk_color_chooser_set_use_alpha ----

gtk_color_chooser_set_use_alpha
設置顏色選擇器是否應使用 Alpha 通道。
語法
參數
chooser- 一GtkColorChooser
use_alpha- 如果顏色選擇器應使用 Alpha 通道，則為 TRUE，如果不是，則為 FALSE
自 3.4 起
另請參見
GtkColorChooser


------------ KeyGTK3gtk_color_chooser_widget_new ----

gtk_color_chooser_widget_new
創建新的 .GtkColorChooserWidget
返回
一個新的GtkColorChooserWidget
自 3.
另請參見
GtkColorChooserWidget


------------ KeyGTK3gtk_color_selection_dialog_get_color_selection ----

gtk_color_selection_dialog_get_color_selection
gtk_color_selection_dialog_get_color_selection已棄用，不應在新編寫的代碼中使用。檢索嵌入在對話方塊中的小部件。GtkColorSelection
語法
參數
colorsel- 一GtkColorSelectionDialog
返回
嵌入式 .[無轉移]GtkColorSelection
自 2.1 起
另請參見
GtkColorSelectionDialog


------------ KeyGTK3gtk_color_selection_dialog_new ----

gtk_color_selection_dialog_new
gtk_color_selection_dialog_new已棄用，不應在新編寫的代碼中使用。創建新的 .GtkColorSelectionDialog
語法
參數
title- 包含對話方塊標題文本的字串。
返回
一個。GtkColorSelectionDialog
另請參見
GtkColorSelectionDialog


------------ KeyGTK3gtk_color_selection_get_current_alpha ----

gtk_color_selection_get_current_alpha
gtk_color_selection_get_current_alpha已棄用，不應在新編寫的代碼中使用。返回當前 Alpha 值。
語法
參數
colorsel- 一GtkColorSelection
返回
介於 0 和 65535 之間的整數
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_get_current_color ----

gtk_color_selection_get_current_color
gtk_color_selection_get_current_color自 3.4 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_color_selection_get_current_rgba（）。將顏色設置為 GtkColorSelection 構件中的使用中色彩。
語法
參數
colorsel- 一GtkColorSelection
color- a 以填充使用中色彩。[輸出]GdkColor
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_get_current_rgba ----

gtk_color_selection_get_current_rgba
gtk_color_selection_get_current_rgba已棄用，不應在新編寫的代碼中使用。將 rgba 設置為 GtkColorSelection 構件中的使用中色彩。
語法
參數
colorsel- 一GtkColorSelection
rgba- a 以填充使用中色彩。[輸出]GdkRGBA
自 3.0 起
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_get_has_opacity_control ----

gtk_color_selection_get_has_opacity_control
gtk_color_selection_get_has_opacity_control已棄用，不應在新編寫的代碼中使用。確定 colorel 是否具有不透明度控制項。
語法
參數
colorsel- 一GtkColorSelection
返回
如果顏色具有不透明度控制項，則為 TRUE，如果顏色不透明，則為 FALSE
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_get_has_palette ----

gtk_color_selection_get_has_palette
gtk_color_selection_get_has_palette已棄用，不應在新編寫的代碼中使用。確定顏色選擇器是否具有調色板。
語法
參數
colorsel- 一GtkColorSelection
返回
如果選擇器具有調色板，則為 TRUE;如果選擇器沒有調色板，則為 FALSE
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_get_previous_alpha ----

gtk_color_selection_get_previous_alpha
gtk_color_selection_get_previous_alpha已棄用，不應在新編寫的代碼中使用。返回上一個 Alpha 值。
語法
參數
colorsel- 一GtkColorSelection
返回
介於 0 和 65535 之間的整數
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_get_previous_color ----

gtk_color_selection_get_previous_color
gtk_color_selection_get_previous_color自 3.4 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_color_selection_get_previous_rgba（）。用原始顏色值填充顏色。
語法
參數
colorsel- 一GtkColorSelection
color- a 用原始顏色值填充。[輸出]GdkColor
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_get_previous_rgba ----

gtk_color_selection_get_previous_rgba
gtk_color_selection_get_previous_rgba已棄用，不應在新編寫的代碼中使用。用原始顏色值填充 rgba。
語法
參數
colorsel- 一GtkColorSelection
rgba- a 用原始顏色值填充。[輸出]GdkRGBA
自 3.0 起
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_is_adjusting ----

gtk_color_selection_is_adjusting
gtk_color_selection_is_adjusting已棄用，不應在新編寫的代碼中使用。獲取顏色的當前狀態。
語法
參數
colorsel- 一GtkColorSelection
返回
如果用戶當前正在拖動顏色，則為 TRUE;如果選擇已停止，則為 FALSE
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_new ----

gtk_color_selection_new
gtk_color_selection_new已棄用，不應在新編寫的代碼中使用。創建新的 GtkColorSelection。
返回
一個新的GtkColorSelection
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_palette_from_string ----

gtk_color_selection_palette_from_string
gtk_color_selection_palette_from_string已棄用，不應在新編寫的代碼中使用。解析調色板字串;該字串是gdk_color_parse（） 可讀的顏色名稱的冒號分隔列表。
語法
參數
str- 編碼調色板的字串
colors- 返回的已分配陣列的位置。[輸出][陣列長度 = n_colors]GdkColor
n_colors- 陣列長度的返回位置
返回
如果調色板已成功解析，則為 TRUE
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_palette_to_string ----

gtk_color_selection_palette_to_string
gtk_color_selection_palette_to_string已棄用，不應在新編寫的代碼中使用。將調色板編碼為字串，這對於持久性存儲很有用。
語法
參數
colors- 一系列顏色。[陣列長度 = n_colors]
n_colors- 陣列的長度
返回
已分配的字串對調色板進行編碼
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_change_palette_with_screen_hook ----

gtk_color_selection_set_change_palette_with_screen_hook
gtk_color_selection_set_change_palette_with_screen_hook已棄用，不應在新編寫的代碼中使用。安裝一個全域函數，每當使用者修改顏色選擇中的調色板時調用該函數。此函數應保存新的調色板內容，並更新 GtkSettings 屬性，以便修改所有GtkColorSelection 構件。?gtk-color-palette?
語法
參數
func- 當自訂調色盤需要保存時調用的函數
返回
以前的更改調色板掛鉤（已替換）
自 2.2 起
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_current_alpha ----

gtk_color_selection_set_current_alpha
gtk_color_selection_set_current_alpha已棄用，不應在新編寫的代碼中使用。將當前不透明度設置為 alpha。第一次調用它時，它還會將原始不透明度設置為 alpha。
語法
參數
colorsel- 一GtkColorSelection
alpha- 介於 0 和 65535 之間的整數
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_current_color ----

gtk_color_selection_set_current_color
gtk_color_selection_set_current_color自版本 3.4 起已棄用，不應在新編寫的代碼中使用。請改用 gtk_color_selection_set_current_rgba（）。將使用中色彩設置為顏色。第一次調用時，它還會將原始顏色設置為顏色。
語法
參數
colorsel- 一GtkColorSelection
color- a 用於設置使用中色彩GdkColor
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_current_rgba ----

gtk_color_selection_set_current_rgba
gtk_color_selection_set_current_rgba已棄用，不應在新編寫的代碼中使用。將使用中色彩設置為 rgba。第一次調用時，它還會將原始顏色設置為rgba。
語法
參數
colorsel- 一GtkColorSelection
rgba- A 用於設置使用中色彩GdkRGBA
自 3.0 起
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_has_opacity_control ----

gtk_color_selection_set_has_opacity_control
gtk_color_selection_set_has_opacity_control已棄用，不應在新編寫的代碼中使用。將色帶設置為使用或不使用不透明度。
語法
參數
colorsel- 一GtkColorSelection
has_opacity- TRUE 如果 colorelcan 設置不透明度，否則為 FALSE
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_has_palette ----

gtk_color_selection_set_has_palette
gtk_color_selection_set_has_palette已棄用，不應在新編寫的代碼中使用。根據has_palette的值顯示和隱藏調色板。
語法
參數
colorsel- 一GtkColorSelection
has_palette- 如果調色板是可見的，則為 TRUE，否則為 FALSE
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_previous_alpha ----

gtk_color_selection_set_previous_alpha
gtk_color_selection_set_previous_alpha已棄用，不應在新編寫的代碼中使用。設置 ？上一個？阿爾法成為阿爾法。調用此函數時應有一些猶豫，因為進行 alpha 更改可能會令人困惑。
語法
參數
colorsel- 一GtkColorSelection
alpha- 介於 0 和 65535 之間的整數
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_previous_color ----

gtk_color_selection_set_previous_color
gtk_color_selection_set_previous_color自 3.4 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_color_selection_set_previous_rgba（）。設置 ？上一個？顏色是顏色。調用此函數時應有一些猶豫，因為更改顏色可能會令人困惑。調用 gtk_color_selection_set_current_color（） 也會在第一次調用時設置此顏色。
語法
參數
colorsel- 一GtkColorSelection
color- a 設置以前的顏色GdkColor
另請參見
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_previous_rgba ----

gtk_color_selection_set_previous_rgba
gtk_color_selection_set_previous_rgba已棄用，不應在新編寫的代碼中使用。設置 ？上一個？顏色是 rgba。調用此函數時應有一些猶豫，因為更改顏色可能會令人困惑。調用 gtk_color_selection_set_current_rgba（） 也會在第一次調用時設置此顏色。
語法
參數
colorsel- 一GtkColorSelection
rgba- a 設置以前的顏色GdkRGBA
自 3.0 起
另請參見
GtkColorSelection


------------ KeyGTK3gtk_combo_box_get_active ----

gtk_combo_box_get_active
返回當前活動項的索引，如果存在非活動項，則返回 -1。如果模型是非平面樹模型，並且活動項不是樹根的直接子項，則此函數returnsgtk_tree_path_get_indices（path）[0]，其中路徑是活動項的。GtkTreePath
語法
參數
combo_box- 一GtkComboBox
返回
一個整數，它是當前活動項的索引，如果沒有活動項，則為 -1。
2.4 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_active_id ----

gtk_combo_box_get_active_id
返回combo_box的活動行的 ID。此值取自活動行和 combo_box 的屬性指定的列（請參見 gtk_combo_box_set_id_column（））。返回的值是一個暫存字串，這意味著您可以按值將指標比作其他暫存字串，並且您必須不釋放它。如果未設置 combo_box 的屬性，或者沒有行處於活動狀態，或者活動行具有 NULL ID 值，則返回 NULLis。?id-column??id-column?
語法
參數
combo_box- 一GtkComboBox
返回
活動行的 ID，或 NULL
自 3.0 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_active_iter ----

gtk_combo_box_get_active_iter
將 iter 設置為指向當前活動項（如果存在）。
語法
參數
combo_box- 一GtkComboBox
iter- 未初始化的.[輸出]GtkTreeIter
返回
TRUE，如果 iterwas set
2.4 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_add_tearoffs ----

gtk_combo_box_get_add_tearoffs
gtk_combo_box_get_add_tearoffs自 3.10 版起已棄用，不應在新編寫的代碼中使用。獲取 ：add-tearoffs 屬性的當前值。
語法
參數
combo_box- 一GtkComboBox
返回
屬性的當前值：
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_button_sensitivity ----

gtk_combo_box_get_button_sensitivity
返回下拉式列示方塊是否在模型中沒有項時設置對下拉清單按鈕敏感。
語法
參數
combo_box- 一GtkComboBox
返回
GTK_SENSITIVITY_ON如果下拉清單按鈕在模型為空時敏感，GTK_SENSITIVITY_OFFif該按鈕始終不敏感orGTK_SENSITIVITY_AUTO如果它僅在模型有一個要選擇的項目時才敏感。
自 2.14 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_column_span_column ----

gtk_combo_box_get_column_span_column
返回包含combo_box列跨度資訊的列。
語法
參數
combo_box- 一GtkComboBox
返回
列跨度列。
自 2.6 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_entry_text_column ----

gtk_combo_box_get_entry_text_column
返回combo_box用於獲取字串以在內部條目中顯示的列。
語法
參數
combo_box- 一.GtkComboBox
返回
combo_box的資料來源模型中的列。
自 2.24 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_focus_on_click ----

gtk_combo_box_get_focus_on_click
返回下拉式列示方塊在用滑鼠按一下時是否抓住焦點。請參見gtk_combo_box_set_focus_on_click（）。
語法
參數
combo- 一GtkComboBox
返回
如果下拉式列示方塊在用滑鼠按一下時抓住焦點，則為 TRUE。
自 2.6 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_has_entry ----

gtk_combo_box_get_has_entry
返回下拉式列示方塊是否具有條目。
語法
參數
combo_box- 一GtkComboBox
返回
combo_box中是否有條目。
自 2.24 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_id_column ----

gtk_combo_box_get_id_column
返回combo_box用於從中獲取字串 IDsfor 值的列。
語法
參數
combo_box- 一GtkComboBox
返回
combo_box的資料來源模型中的列。
自 3.0 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_model ----

gtk_combo_box_get_model
返回充當combo_box資料來源的 it。GtkTreeModel
語法
參數
combo_box- 一GtkComboBox
返回
A 在施工期間通過。[無轉移]GtkTreeModel
2.4 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_popup_accessible ----

gtk_combo_box_get_popup_accessible
獲取與下拉式列示方塊的快顯視窗對應的輔助對象。此功能主要用於協助工具技術;應用程式應該很少使用它。
語法
參數
combo_box- 一GtkComboBox
返回
對應於下拉式列示方塊快顯視窗的可訪問對象。[無轉移]
自 2.6 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_popup_fixed_width ----

gtk_combo_box_get_popup_fixed_width
獲取快顯視窗是否使用與下拉式列示方塊的已分配寬度匹配的固定寬度。
語法
參數
combo_box- 一GtkComboBox
返回
如果快顯視窗使用固定寬度，則為 TRUE
自 3.
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_row_separator_func ----

gtk_combo_box_get_row_separator_func
返回當前行分隔符號函數。
語法
參數
combo_box- 一GtkComboBox
返回
當前行分隔符號函數。
自 2.6 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_row_span_column ----

gtk_combo_box_get_row_span_column
返回包含combo_box行範圍資訊的列。
語法
參數
combo_box- 一GtkComboBox
返回
行跨度列。
自 2.6 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_title ----

gtk_combo_box_get_title
gtk_combo_box_get_title自 3.10 版起已棄用，不應在新編寫的代碼中使用。獲取處於分離模式的功能表的當前標題。Seegtk_combo_box_set_add_tearoffs（）.
語法
參數
combo_box- 一GtkComboBox
返回
功能表的標題處於撕裂模式。這是一個不能被釋放的字串的內部副本。
自 2.10 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_wrap_width ----

gtk_combo_box_get_wrap_width
返回換行寬度，該寬度用於確定彈出菜單的列數。如果換行寬度大於 1，則下拉式列示方塊處於表模式。
語法
參數
combo_box- 一GtkComboBox
返回
換行寬度。
自 2.6 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_new ----

gtk_combo_box_new
創建新的空 .GtkComboBox
返回
一個新的.GtkComboBox
2.4 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_new_with_area ----

gtk_combo_box_new_with_area
創建一個新的空使用區域來佈局儲存格。GtkComboBox
語法
參數
area- 用於佈局儲存格渲染器GtkCellArea
返回
一個新的.GtkComboBox
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_new_with_area_and_entry ----

gtk_combo_box_new_with_area_and_entry
創建一個帶有條目的新空。新的下拉式列示方塊將使用區域來佈局儲存格。GtkComboBox
語法
參數
area- 用於佈局儲存格渲染器GtkCellArea
返回
一個新的.GtkComboBox
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_new_with_entry ----

gtk_combo_box_new_with_entry
創建一個帶有條目的新空。GtkComboBox
返回
一個新的.GtkComboBox
自 2.24 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_new_with_model ----

gtk_combo_box_new_with_model
創建一個將模型初始化為模型的新模型。GtkComboBox
語法
參數
model- 一.GtkTreeModel
返回
一個新的.GtkComboBox
2.4 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_new_with_model_and_entry ----

gtk_combo_box_new_with_model_and_entry
創建一個帶有條目的新空，並將模型初始化為模型。GtkComboBox
語法
參數
model- 一GtkTreeModel
返回
一個新的GtkComboBox
自 2.24 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_popdown ----

gtk_combo_box_popdown
隱藏combo_box的菜單或下拉清單。此功能主要用於協助工具技術;應用程式應該很少使用它。
語法
參數
combo_box- 一GtkComboBox
2.4 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_popup ----

gtk_combo_box_popup
彈出combo_box菜單或下拉清單。此功能主要用於協助工具技術;應用程式應該很少使用它。
語法
參數
combo_box- 一GtkComboBox
2.4 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_popup_for_device ----

gtk_combo_box_popup_for_device
彈出combo_box功能表或下拉清單，快顯視窗將被抓取，因此只有設備及其關聯的指標/鍵盤才能向其發送事件。GdkDevices
語法
參數
combo_box- 一GtkComboBox
device- 一GdkDevice
自 3.0 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_active ----

gtk_combo_box_set_active
將combo_box的活動項設置為索引處的項。
語法
參數
combo_box- 一GtkComboBox
index_- 模型中在構造期間傳遞的索引，或 -1 表示沒有活動項
2.4 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_active_id ----

gtk_combo_box_set_active_id
將combo_box的活動行更改為 ID 等於 toactive_id行，如果active_id為 NULL，則取消設置活動行。具有 NULL ID 字串的行不能由此函數啟動。如果未設置 combo_box 的屬性，或者 norow 具有給定的 ID，則該函數不執行任何操作並返回 FALSE。?id-column?
語法
參數
combo_box- 一GtkComboBox
active_id- 要選擇的行的 ID，或 NULL。[允許-無]
返回
如果找到具有匹配 ID 的行，則為 TRUE。如果給定NULLactive_idwas來取消設置活動行，則函數式 way 將返回 TRUE。
自 3.0 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_active_iter ----

gtk_combo_box_set_active_iter
將當前活動項設置為 iter 引用的項，或者如果它為 NULL，則取消設置活動項。
語法
參數
combo_box- 一GtkComboBox
iter- 或空值。[允許-無]GtkTreeIter
2.4 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_add_tearoffs ----

gtk_combo_box_set_add_tearoffs
gtk_combo_box_set_add_tearoffs自版本 3.10 起已棄用，不應在新編寫的代碼中使用。設置彈出功能表是否應具有撕裂線項。
語法
參數
combo_box- 一GtkComboBox
add_tearoffs- TRUE 添加撕下功能表項目
自 2.6 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_button_sensitivity ----

gtk_combo_box_set_button_sensitivity
設置下拉式列示方塊的下拉按鈕是應始終敏感（GTK_SENSITIVITY_ON）、從不敏感（GTK_SENSITIVITY_OFF）還是僅在至少要顯示一個專案時（GTK_SENSITIVITY_AUTO）。
語法
參數
combo_box- 一GtkComboBox
sensitivity- 指定下拉按鈕的靈敏度
自 2.14 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_column_span_column ----

gtk_combo_box_set_column_span_column
將包含combo_box列跨度資訊的列設置為becolumn_span。列跨度列包含整數，這些整數指示一個專案應跨越的列數。
語法
參數
combo_box- 一GtkComboBox
column_span- 模型中在施工期間通過的列
2.4 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_entry_text_column ----

gtk_combo_box_set_entry_text_column
設置combo_box應使用該列從中獲取要text_column的字串的模型列。combo_boxmust模型中text_column列的類型為 G_TYPE_STRING。僅當combo_box已創建為 TRUE 時，這才相關。?has-entry?
語法
參數
combo_box- 一GtkComboBox
text_column- 模型中的一列，用於從中獲取內部條目的字串
自 2.24 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_focus_on_click ----

gtk_combo_box_set_focus_on_click
設置下拉式列示方塊在用滑鼠按一下時是否將獲取焦點。使滑鼠按一下不抓取焦點在工具列等位置非常有用，在這些位置中，您不希望將鍵盤焦點從應用程式的主區域中刪除。
語法
參數
combo- 一GtkComboBox
focus_on_click- 使用滑鼠按一下下拉式列示方塊時是否抓住焦點
自 2.6 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_id_column ----

gtk_combo_box_set_id_column
設置combo_box應用于從中獲取值的字串 ID 的模型列。combo_boxmust模型中id_column列的類型為 G_TYPE_STRING。
語法
參數
combo_box- 一GtkComboBox
id_column- 模型中的一列，用於獲取來自
自 3.0 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_model ----

gtk_combo_box_set_model
將combo_box使用的模型設置為模型。將取消設置先前的設置模型（如果適用）。如果模型為 NULL，則它將取消設置模型。請注意，此函數不會清除儲存格渲染器，如果需要為新模型設置 differentcell 渲染器，則必須自行調用 gtk_cell_layout_clear（）。
語法
參數
combo_box- 一GtkComboBox
model- 一.[允許-無]GtkTreeModel
2.4 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_popup_fixed_width ----

gtk_combo_box_set_popup_fixed_width
指定快顯視窗的寬度是否應為與下拉式列示方塊的已分配寬度匹配的固定寬度。
語法
參數
combo_box- 一GtkComboBox
fixed- 是否使用固定的快顯視窗寬度
自 3.0 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_row_separator_func ----

gtk_combo_box_set_row_separator_func
設置行分隔符號函數，該函數用於確定是否應將一行繪製為分隔符號。如果行分隔符號函數為 NULL，則不繪製分隔符號。這是預設值。
語法
參數
combo_box- 一GtkComboBox
func- 一GtkTreeViewRowSeparatorFunc
data- 要傳遞給 func 或 NULL 的使用者資料。[允許-無]
destroy- 銷毀資料的通知程式，或 NULL。[允許-無]
自 2.6 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_row_span_column ----

gtk_combo_box_set_row_span_column
設置包含要row_span combo_box行範圍資訊的列。行範圍列包含指示應跨越多少行數項的整數。
語法
參數
combo_box- 一.GtkComboBox
row_span- 模型中在構造過程中通過的列。
2.4 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_title ----

gtk_combo_box_set_title
gtk_combo_box_set_title自 3.10 版起已棄用，不應在新編寫的代碼中使用。將功能表的標題設置為撕裂模式。
語法
參數
combo_box- 一GtkComboBox
title- 在撕裂模式下功能表的標題
自 2.10 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_wrap_width ----

gtk_combo_box_set_wrap_width
將combo_box的包裝寬度設置為寬度。換行寬度基本上是您希望快顯視窗佈置在表格中時的首選列數。
語法
參數
combo_box- 一GtkComboBox
width- 首選列數
2.4 起
另請參見
GtkComboBox


------------ KeyGTK3gtk_combo_box_text_append ----

gtk_combo_box_text_append
將文本追加到存儲在combo_box中的字串清單中。如果 id 為非 NULL，則將其用作行的 ID。這與調用gtk_combo_box_text_insert（） 的 aposition 為 -1 相同。
語法
參數
combo_box- 一GtkComboBoxText
id- 此值的字串 ID 或 NULL。[允許-無]
text- 一個字串
自 2.24 起
另請參見
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_append_text ----

gtk_combo_box_text_append_text
將文本追加到存儲在combo_box中的字串清單中。這與調用gtk_combo_box_text_insert_text（） 的置位為 -1 相同。
語法
參數
combo_box- 一GtkComboBoxText
text- 一個字串
自 2.24 起
另請參見
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_get_active_text ----

gtk_combo_box_text_get_active_text
Returns the currently active string in combo_box, or NULLif none is selected. If combo_box contains an entry, thisfunction will return its contents (which will not necessarilybe an item from the list).
Syntax
Parameters
combo_box  -  	A GtkComboBoxText
Returns
a newly allocated string containing thecurrently active text. Must be freed with g_free(). [transfer full]
Since 2.2
See Also
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_insert ----

gtk_combo_box_text_insert
Inserts text at position in the list of strings stored in combo_box.If id is non-NULL then it is used as the ID of the row.  See.If position is negative then text is appended.?id-column?
Syntax
Parameters
combo_box  -  	A GtkComboBoxText
position  -  	An index to insert text
id  -  	 a string ID for this value, or NULL. [allow-none]
text  -  	A string to display
Since 3.0
See Also
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_insert_text ----

gtk_combo_box_text_insert_text
Inserts text at position in the list of strings stored in combo_box.If position is negative then text is appended.This is the same as calling gtk_combo_box_text_insert() with a NULLID string.
Syntax
Parameters
combo_box  -  	A GtkComboBoxText
position  -  	An index to insert text
text  -  	A string
Since 2.24
See Also
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_new ----

gtk_combo_box_text_new
Creates a new , which is a  just displayingstrings.GtkComboBoxTextGtkComboBox
Returns
A new GtkComboBoxText
Since 2.24
See Also
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_new_with_entry ----

gtk_combo_box_text_new_with_entry
創建一個新的 ，它只是一個顯示字串。此函數創建的下拉式列示方塊有一個條目。GtkComboBoxTextGtkComboBox
返回
一個新的GtkComboBoxText
自 2.24 起
另請參見
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_prepend ----

gtk_combo_box_text_prepend
將文本附加到存儲在combo_box中的字串清單。如果 id 為非 NULL，則將其用作行的 ID。這與調用gtk_combo_box_text_insert（） 的置位為 0 相同。
語法
參數
combo_box- 一GtkComboBox
id- 此值的字串 ID 或 NULL。[允許-無]
text- 一個字串
自 2.24 起
另請參見
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_prepend_text ----

gtk_combo_box_text_prepend_text
將文本附加到存儲在combo_box中的字串清單。這與調用gtk_combo_box_text_insert_text（） 的置位為 0 相同。
語法
參數
combo_box- 一GtkComboBox
text- 一個字串
自 2.24 起
另請參見
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_remove ----

gtk_combo_box_text_remove
從combo_box中刪除位置處的字串。
語法
參數
combo_box- 一GtkComboBox
position- 要刪除的專案的索引
自 2.24 起
另請參見
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_remove_all ----

gtk_combo_box_text_remove_all
從下拉式列示方塊中刪除所有文本條目。
語法
參數
combo_box- 一GtkComboBoxText
自 3.0 起
另請參見
GtkComboBoxText


------------ KeyGTK3gtk_container_add ----

gtk_container_add
將小部件添加到容器。通常用於簡單容器，如 、 、 或 ;對於更複雜的佈局容器，如 或 ，此函數將選擇可能不正確的默認打包參數。Soconsider函數，如gtk_box_pack_start（） andgtk_grid_attach（）作為gtk_container_add（）在這種情況下的替代方法。一個小部件一次只能添加到一個容器中;您不能將同一個小部件放在兩個不同的容器中。請注意，某些容器（如 or）可能會在添加的小部件和容器之間添加中間子級。GtkWindowGtkFrameGtkButtonGtkBoxGtkGridGtkScrolledWindowGtkListBox
語法
參數
container- 一GtkContainer
widget- 放置在容器內的小部件
另請參見
GtkContainer


------------ KeyGTK3gtk_container_add_with_properties ----

gtk_container_add_with_properties
將小部件添加到容器，同時設置子屬性。有關詳細資訊，請參閱 gtk_container_add（） 和 gtk_container_child_set（）。
語法
參數
container- 一GtkContainer
widget- 放置在容器內的小部件
first_prop_name- 要設置的第一個子屬性的名稱
...- 以 NULL 結尾的屬性名稱和值清單，以first_prop_name
另請參見
GtkContainer


------------ KeyGTK3gtk_container_child_get ----

gtk_container_child_get
獲取子屬性和容器的一個或多個子屬性的值。
語法
參數
container- 一GtkContainer
child- 一個小部件，它是容器的子項
first_prop_name- 要獲取的第一個屬性的名稱
...- 返回第一個屬性的位置，後跟更多名稱/返回位置對，後跟 NULL
另請參見
GtkContainer


------------ KeyGTK3gtk_container_child_get_property ----

gtk_container_child_get_property
獲取子屬性和容器的子屬性的值。
語法
參數
container- 一GtkContainer
child- 一個小部件，它是容器的子項
property_name- 要獲取的屬性的名稱
value- 返回值的位置
另請參見
GtkContainer


------------ KeyGTK3gtk_container_child_get_valist ----

gtk_container_child_get_valist
獲取子屬性和容器的一個或多個子屬性的值。
語法
參數
container- 一GtkContainer
child- 一個小部件，它是容器的子項
first_property_name- 要獲取的第一個屬性的名稱
var_args- 返回第一個屬性的位置，後跟更多名稱/返回位置對，後跟 NULL
另請參見
GtkContainer


------------ KeyGTK3gtk_container_child_notify ----

gtk_container_child_notify
在小部件上為子propertychild_property發出信號。這是子屬性的 g_object_notify（） 的類似物。另請參見 gtk_widget_child_notify（）。?child-notify?
語法
參數
container- 的GtkContainer
child- 子小部件
child_property- 安裝在容器類上的子屬性的名稱
自 3.2 起
另請參見
GtkContainer


------------ KeyGTK3gtk_container_child_set ----

gtk_container_child_set
為子屬性和容器設置一個或多個子屬性。
語法
參數
container- 一GtkContainer
child- 一個小部件，它是容器的子項
first_prop_name- 要設置的第一個屬性的名稱
...- 以 NULL 結尾的屬性名稱和值清單，以first_prop_name
另請參見
GtkContainer


------------ KeyGTK3gtk_container_child_set_property ----

gtk_container_child_set_property
設置子屬性和容器的子屬性。
語法
參數
container- 一GtkContainer
child- 一個小部件，它是容器的子項
property_name- 要設置的屬性的名稱
value- 要將屬性設置為的值
另請參見
GtkContainer


------------ KeyGTK3gtk_container_child_set_valist ----

gtk_container_child_set_valist
為子屬性和容器設置一個或多個子屬性。
語法
參數
container- 一GtkContainer
child- 一個小部件，它是容器的子項
first_property_name- 要設置的第一個屬性的名稱
var_args- 以 NULL 結尾的屬性名稱和值清單，以first_prop_name
另請參見
GtkContainer


------------ KeyGTK3gtk_container_child_type ----

gtk_container_child_type
返回容器支援的子級的類型。請注意，這可能會返回G_TYPE_NONE，以指示不能再添加子級，例如，對於已經有兩個子級的論壇。GtkPaned
語法
參數
container- 一GtkContainer
返回
一個。GType
另請參見
GtkContainer


------------ KeyGTK3gtk_container_class_find_child_property ----

gtk_container_class_find_child_property
按名稱查找容器類的子屬性。
語法
參數
cclass- 一個.[類型 GtkContainerClass]GtkContainerClass
property_name- 要查找的子屬性的名稱
返回
子屬性的 NULL，如果 class 沒有具有該名稱的子屬性。[無轉移]GParamSpec
另請參見
GtkContainer


------------ KeyGTK3gtk_container_class_handle_border_width ----

gtk_container_class_handle_border_width
修改 子類 以自動添加和刪除 GtkContainer 上的邊框寬度設置。這允許子類在其大小請求中忽略邊框寬度並分配方法。其目的是讓子類在其class_init function.gtk_container_class_handle_border_width（）中調用 this 是必要的，因為它會嚴重破壞 API，使此行為成為默認行為。Sosubclasses 必須選擇加入？到父類處理border_widthfor它們。GtkContainerClass
語法
參數
klass- 子類的類結構[br \=“”GtkContainer
另請參見
GtkContainer


------------ KeyGTK3gtk_container_class_install_child_property ----

gtk_container_class_install_child_property
在容器類上安裝子屬性。
語法
參數
cclass- 一GtkContainerClass
property_id- 房產的id
pspec- 為財產GParamSpec
另請參見
GtkContainer


------------ KeyGTK3gtk_container_class_list_child_properties ----

gtk_container_class_list_child_properties
返回容器類的所有子屬性。
語法
參數
cclass- 一個.[類型 GtkContainerClass]GtkContainerClass
n_properties- 返回找到的子屬性數量的位置
返回
新分配的以 NULL 結尾的 * 陣列。必須使用 g_free（） 釋放陣列。[陣列長度 = n_properties][轉移容器]GParamSpec
另請參見
GtkContainer


------------ KeyGTK3gtk_container_forall ----

gtk_container_forall
在容器的每個子級上調用回檔，包括被視為 “內部” 的子級？（容器的實現細節）。?內部？子級通常不是由容器的用戶添加的，而是由容器實現本身添加的。大多數應用程式應該使用gtk_container_foreach（），而不是gtk_container_forall（）。
語法
參數
container- 一GtkContainer
callback- 回檔。[範圍調用][結束callback_data]
callback_data- 回檔使用者資料
另請參見
GtkContainer


------------ KeyGTK3gtk_container_foreach ----

gtk_container_foreach
在容器的每個非內部子級上調用回檔。Seegtk_container_forall（） 瞭解有關什麼構成內部的詳細資訊？孩子。大多數應用程式應usegtk_container_foreach（），而不是gtk_container_forall（）。
語法
參數
container- 一GtkContainer
callback- 回檔。[範圍調用]
callback_data- 回檔使用者資料
另請參見
GtkContainer


------------ KeyGTK3gtk_container_get_border_width ----

gtk_container_get_border_width
媯€緔㈠鍣ㄧ殑杈規瀹藉害銆係eegtk_container_set_border_width錛堬級.
璿硶
鍙傛暟
container- 涓€GtkContainer
榪斿洖
褰撳墠杈規瀹藉害
鍙﹁鍙傝
GtkContainer


------------ KeyGTK3gtk_container_get_children ----

gtk_container_get_children
返回容器的非內部子項。Seegtk_container_forall（））瞭解有關“內部”子項構成的詳細資訊。
語法
參數
container- 一GtkContainer
返回
容器的非內部子項的新分配列表。[element-type GtkWidget][轉移容器]
另請參見
GtkContainer


------------ KeyGTK3gtk_container_get_focus_chain ----

gtk_container_get_focus_chain
檢索容器的焦點鏈（如果已顯式設置）。如果沒有顯式設置焦點鏈，GTK+ 將根據子項的位置計算焦點鏈。在這種情況下，GTK+ 將 NULL 存儲infocusable_widgets並返回 FALSE。
語法
參數
container- 一GtkContainer
focusable_widgets- 位置存儲容器的焦點鏈，或 NULL。完成後，您應該使用g_list_free（）釋放此列表，但是不會向焦點鏈中的單個小部件添加額外的引用計數。[element-type GtkWidget][輸出][轉移容器]
返回
如果容器的焦點鏈已顯式設置，則為 TRUE。
另請參見
GtkContainer


------------ KeyGTK3gtk_container_get_focus_child ----

gtk_container_get_focus_child
返回容器內的當前焦點子構件。這不是當前集中的小部件。這可以通過callinggtk_window_get_focus（）獲得。
語法
參數
container- 一GtkContainer
返回
當 conatineris 聚焦時，它將在容器內接收焦點的子小部件，如果未設置任何子集，則為 NULL。[無轉移]
自 2.14 起
另請參見
GtkContainer


------------ KeyGTK3gtk_container_get_focus_hadjustment ----

gtk_container_get_focus_hadjustment
檢索容器的水準焦點調整。Seegtk_container_set_focus_hadjustment（）.
語法
參數
container- 一GtkContainer
返回
水準焦點調整，或已設置 NULL ifnone。[無轉移]
另請參見
GtkContainer


------------ KeyGTK3gtk_container_get_focus_vadjustment ----

gtk_container_get_focus_vadjustment
檢索容器的垂直焦點調整。Seegtk_container_set_focus_vadjustment（）.
語法
參數
container- 一GtkContainer
返回
垂直焦點調整，或已設置 NULL ifnone。[無轉移]
另請參見
GtkContainer


------------ KeyGTK3gtk_container_get_path_for_child ----

gtk_container_get_path_for_child
返回新創建的小元件路徑，該路徑表示從子節點到子項（包括子項）的所有小部件層次結構。
語法
參數
container- 一GtkContainer
child- 容器的子項
返回
新創建的GtkWidgetPath
另請參見
GtkContainer


------------ KeyGTK3gtk_container_get_resize_mode ----

gtk_container_get_resize_mode
gtk_container_get_resize_mode自版本 3.12 起已棄用，不應在新編寫的代碼中使用。已棄用調整大小模式。它們不再是必需的，因為幀時鐘，如果使用，可能會引入晦澀的錯誤。返回容器的調整大小模式。Seegtk_container_set_resize_mode（）.
語法
參數
container- 一GtkContainer
返回
當前調整大小模式
另請參見
GtkContainer


------------ KeyGTK3gtk_container_propagate_draw ----

gtk_container_propagate_draw
當容器收到對 draw 函數的調用時，它必須向所有沒有自己的子級發送合成調用。此函數提供了一種方便的方法來執行此操作。一個容器，當它收到對其函數的調用時，為每個子級調用gtk_container_propagate_draw（）一次，傳入cr的容器received.gtk_container_propagate_draw（）負責轉換cr的起源，並決定是否需要將繪製發送給子級。這是一種方便和優化的方式，可以直接在孩子身上獲得與callinggtk_widget_draw（）相同的效果。在大多數情況下，容器可以簡單地從 繼承實現，或者進行一些繪製，然後連結到 ：:d raw 實現 from 。?draw?GdkWindows?draw??draw?GtkContainerGtkContainer
語法
參數
container- 一GtkContainer
child- 容器的子項
cr- 傳遞到容器的開羅上下文。如果要使用 crin 容器的 draw 函數，請考慮在調用此函數之前使用 cairo_save（） andcairo_restore（）。
另請參見
GtkContainer


------------ KeyGTK3gtk_container_remove ----

gtk_container_remove
從容器中刪除小部件。小部件必須位於容器內。請注意，容器將擁有對小部件的引用，並且這可能是最後一個保留的引用;因此，從其容器中刪除小部件可能會破壞該小部件。如果你想使用 widgetagain，你需要在它不是容器內部時，使用 g_object_ref（） 添加對它的引用。如果您不想使用 widgetagain，直接使用 gtk_widget_destroy（） 直接銷毀它通常更有效，因為這會將其從容器中刪除，並有助於打破任何迴圈引用計數迴圈。
語法
參數
container- 一GtkContainer
widget- 容器的當前子級
另請參見
GtkContainer


------------ KeyGTK3gtk_container_resize_children ----

gtk_container_resize_children
gtk_container_resize_children自 3.10 版起已棄用，不應在新編寫的代碼中使用。
語法
參數
container- 一GtkContainer
另請參見
GtkContainer


------------ KeyGTK3gtk_container_set_border_width ----

gtk_container_set_border_width
設置容器的邊框寬度。容器的邊框寬度是容器外部要留出的空間量。唯一的例外是;因為豪華的窗戶不能在外面留下空間，所以它們把空間留在裡面。邊框將添加到容器的所有邊上。要僅向一側添加空間，一種方法是創建一個小部件，調用gtk_widget_set_size_request（）為其指定大小，並將其放置在容器的一側作為間隔條。GtkWindowGtkAlignment
語法
參數
container- 一GtkContainer
border_width- 將空白空間留在容器外部。有效值在 0-65535 圖元範圍內。
另請參見
GtkContainer


------------ KeyGTK3gtk_container_set_focus_chain ----

gtk_container_set_focus_chain
設置焦點鏈，覆蓋 GTK+ 自動計算的焦點鏈。原則上，鏈中的每個小部件都應該是容器的後代，但這不是由此方法強制執行的，因為它允許在打包小部件之前設置焦點鏈，或者在鏈中有一個並不總是打包的小部件。當焦點鏈實際遍歷時，將進行必要的檢查。
語法
參數
container- 一GtkContainer
focusable_widgets- 新的焦點鏈。[無轉移][element-type GtkWidget]
另請參見
GtkContainer


------------ KeyGTK3gtk_container_set_focus_child ----

gtk_container_set_focus_child
設置，如果子項為 NULL，則取消設置，如果子項是容器的焦點子項。此函數發出 GtkContainer：：set_focus_child信號。的實現可以通過覆蓋此信號的類閉包來覆蓋默認行為。這個功能主要是為了小部件使用。應用程式可以usegtk_widget_grab_focus（）手動將焦點設置為特定的小部件。GtkContainer
語法
參數
container- 一GtkContainer
child- a 或 NULL。[允許-無]GtkWidget
另請參見
GtkContainer


------------ KeyGTK3gtk_container_set_focus_hadjustment ----

gtk_container_set_focus_hadjustment
將調整掛接到容器中的焦點處理，因此當容器的子項聚焦時，將滾動調整以顯示該小角。此函數設置水準對齊方式。有關獲取調整的典型方法，請參閱 gtk_scrolled_window_get_hadjustment（）;有關設置垂直調整的gtk_container_set_focus_vadjustment（）。調整必須採用圖元單位，並且必須與容器的直接子項的分配採用相同的坐標系。
語法
參數
container- 一GtkContainer
adjustment- 當焦點在容器的後代之間移動時應進行調整的調整
另請參見
GtkContainer


------------ KeyGTK3gtk_container_set_focus_vadjustment ----

gtk_container_set_focus_vadjustment
將調整掛接到容器中的焦點處理，因此當容器的子項聚焦時，將滾動調整以顯示該小部件。此函數設置垂直對齊方式。Seegtk_scrolled_window_get_vadjustment（） 表示獲取調整的典型方法，gtk_container_set_focus_hadjustment（） 表示設置水準調整。調整必須採用圖元單位，並且必須與容器的直接子項的分配採用相同的坐標系。
語法
參數
container- 一GtkContainer
adjustment- 當焦點在容器的後代之間移動時應進行調整的調整
另請參見
GtkContainer


------------ KeyGTK3gtk_container_set_reallocate_redraws ----

gtk_container_set_reallocate_redraws
將容器的 reallocate_redraws 標誌設置為給定值。請求重新分配重繪的容器，如果其任何子項更改了分配，則會自動重新繪製。
語法
參數
container- 一GtkContainer
needs_redraws- 容器reallocate_redrawsflag的新值
另請參見
GtkContainer


------------ KeyGTK3gtk_container_set_resize_mode ----

gtk_container_set_resize_mode
gtk_container_set_resize_mode自版本 3.12 起已棄用，不應在新編寫的代碼中使用。已棄用調整大小模式。它們不再是必需的，因為幀時鐘，如果使用，可能會引入晦澀的錯誤。設置容器的大小調整模式。容器的調整大小模式確定是否將調整大小請求傳遞給容器的父級，並排隊等待以後立即執行的執行程式。
語法
參數
container- 一GtkContainer
resize_mode- 新的調整大小模式
另請參見
GtkContainer


------------ KeyGTK3gtk_container_unset_focus_chain ----

gtk_container_unset_focus_chain
刪除使用 gtk_container_set_focus_chain（） 顯式設置的焦點鏈。
語法
參數
container- 一GtkContainer
另請參見
GtkContainer


------------ KeyGTK3GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID ----

GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID
GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID()
應使用此宏發出有關 set_child_property（） 和 get_child_property（） 實現中意外屬性的標準警告。
語法
參數
object- 調用 set_child_property（） 或 get_child_property（）GObject
property_id- 屬性的數位 id
pspec- 財產GParamSpec
另請參見
GtkContainer


------------ KeyGTK3gtk_css_provider_get_default ----

gtk_css_provider_get_default
返回包含用作所有構件的回退的樣式設置的提供程式。
返回
用於回退樣式的提供程式。此記憶體歸 GTK+ 所有，您不得釋放它。[無轉移]
另請參見
GtkCssProvider


------------ KeyGTK3gtk_css_provider_get_named ----

gtk_css_provider_get_named
從常用主題路徑載入主題
語法
參數
name- 主題名稱
variant- 載入的變體，例如，“dark”，或預設值的NULL。[允許-無]
返回
a，並載入主題。此記憶體歸 GTK+ 所有，您不得釋放它。[無轉移]GtkCssProvider
另請參見
GtkCssProvider


------------ KeyGTK3gtk_css_provider_load_from_data ----

gtk_css_provider_load_from_data
將資料載入到css_provider，使其清除以前載入的任何資訊。
語法
參數
css_provider- 一GtkCssProvider
data- CSS資料載入到記憶體中。[陣列長度 = 長度][元素型膠體8]
length- 資料在位元組中的長度，或 -1 表示 NUL 終止的字串。如果lengthis不是-1，代碼將假定它不是NUL終止的，並且會進行複製。
error- 返回 的位置，或 NULL。[輸出][允許-無]GError
返回
真。返回值已棄用，並且僅當發生錯誤不是 NULL 並且發生載入錯誤時，才會出於向後相容性原因返回 FALSE。要在載入CSS時跟蹤錯誤，請連接到GtkCssProvider：:p arsing-error信號。
另請參見
GtkCssProvider


------------ KeyGTK3gtk_css_provider_load_from_file ----

gtk_css_provider_load_from_file
將檔中包含的資料載入到css_provider中，使其清晰地顯示以前載入的任何資訊。
語法
參數
css_provider- 一GtkCssProvider
file  -  	GFile指向要載入的檔
error- 返回 的位置，或 NULL。[輸出][允許-無]GError
返回
真。返回值已棄用，並且僅當發生錯誤不是 NULL 並且發生載入錯誤時，才會出於向後相容性原因返回 FALSE。要在載入CSS時跟蹤錯誤，請連接到GtkCssProvider：:p arsing-error信號。
另請參見
GtkCssProvider


------------ KeyGTK3gtk_css_provider_load_from_path ----

gtk_css_provider_load_from_path
將 path 中包含的資料載入到css_provider中，使其清除以前載入的任何資訊。
語法
參數
css_provider- 一GtkCssProvider
path- 要載入的檔案名的路徑，在GLib檔案名編碼中
error- 返回 的位置，或 NULL。[輸出][允許-無]GError
返回
真。返回值已棄用，並且僅當發生錯誤不是 NULL 並且發生載入錯誤時，才會出於向後相容性原因返回 FALSE。要在載入CSS時跟蹤錯誤，請連接到GtkCssProvider：:p arsing-error信號。
另請參見
GtkCssProvider


------------ KeyGTK3gtk_css_provider_new ----

gtk_css_provider_new
返回新創建的 .GtkCssProvider
返回
一個新的GtkCssProvider
另請參見
GtkCssProvider


------------ KeyGTK3gtk_css_provider_to_string ----

gtk_css_provider_to_string
將提供程式轉換為 CSSformat 中的字串表示形式。在創建withgtk_css_provider_new（） 的新提供程式上使用具有此函數返回值的 gtk_css_provider_load_from_data（） 基本上將創建此提供程式的副本。
語法
參數
provider- 寫入字串的提供程式
返回
表示提供程式的新字串。
自 3.2 起
另請參見
GtkCssProvider


------------ KeyGTK3gtk_css_section_get_end_line ----

gtk_css_section_get_end_line
返回 CSS 文檔中本節結束的行。行號為 0 索引，因此文檔的第一行將返回 0。如果尚未完全解析此函數，則在將來調用此函數時，此值可能會更改。例如，這將發生在GtkCssProvider：:p arsing-error信號中。對於未能成功解析任何內容的截面，結束位置和行可能與起始位置和行相同。
語法
參數
section- 部分
返回
行號
自 3.2 起
另請參見
GtkCssProvider


------------ KeyGTK3gtk_css_section_get_end_position ----

gtk_css_section_get_end_position
返回從當前行的開頭開始的偏移量（以位元組為單位），通過 gtk_css_section_get_end_line（） 返回。如果尚未完全解析此函數，則在將來調用此函數時，此值可能會更改。例如，這將在GtkCssProvider：:p arsing-error信號中出現。對於未能成功解析任何內容的截面，結束位置和行可能與起始位置和行相同。
語法
參數
section- 部分
返回
從行首開始的偏移量（以位元組為單位）。
自 3.2 起
另請參見
GtkCssProvider


------------ KeyGTK3gtk_css_section_get_file ----

gtk_css_section_get_file
獲取從中分析節的檔。如果不存在這樣的檔，例如因為 CSS 是viagtk_css_provider_load_from_data（） 載入的，則返回 NULL。
語法
參數
section- 部分
返回
該部分從中解析，如果該部分從其他資料解析，則為 NULL。[無轉移]GFile
自 3.2 起
另請參見
GtkCssProvider


------------ KeyGTK3gtk_css_section_get_parent ----

gtk_css_section_get_parent
獲取給定節的父節。父部分是包含此部分的部分。特殊情況是 類型 。它們的父級要麼是NULLif，要麼是bygtk_css_provider_load_from_file（）載入的原始CSS文檔，要麼是類型部分，如果它使用來自不同檔的導入規則載入。GTK_CSS_SECTION_DOCUMENTGTK_CSS_SECTION_IMPORT
語法
參數
section- 部分
返回
父部分或 NULL（如果沒有）
自 3.2 起
另請參見
GtkCssProvider


------------ KeyGTK3gtk_css_section_get_section_type ----

gtk_css_section_get_section_type
獲取部分描述的資訊類型。
語法
參數
section- 部分
返回
截面類型
自 3.2 起
另請參見
GtkCssProvider


------------ KeyGTK3gtk_css_section_get_start_line ----

gtk_css_section_get_start_line
返回 CSS 文檔中此部分開始的行。行號為 0 索引，因此文檔的第一行將返回 0。
語法
參數
section- 部分
返回
行號
自 3.2 起
另請參見
GtkCssProvider


------------ KeyGTK3gtk_css_section_get_start_position ----

gtk_css_section_get_start_position
返回從當前行的開頭開始的偏移量（以位元組為單位），通過 gtk_css_section_get_start_line（） 返回。
語法
參數
section- 部分
返回
從行首開始的偏移量（以位元組為單位）。
自 3.2 起
另請參見
GtkCssProvider


------------ KeyGTK3gtk_css_section_ref ----

gtk_css_section_ref
遞增節的引用計數。
語法
參數
section- 一GtkCssSection
返回
截取自己。
自 3.2 起
另請參見
GtkCssProvider


------------ KeyGTK3gtk_css_section_unref ----

gtk_css_section_unref
減少截面上的引用計數，如果引用計數達到 0，則釋放結構。
語法
參數
section- 一GtkCssSection
自 3.
另請參見
GtkCssProvider


------------ KeyGTK3gtk_device_grab_add ----

gtk_device_grab_add
在設備上添加一個 GTK+ 抓取，以便設備上的所有事件及其關聯的指標或鍵盤（如果有）都傳遞到小部件。如果block_others參數為 TRUE，則在抓取過程中，任何其他設備將無法與小部件進行交互。
語法
參數
widget- 一GtkWidget
device- 一個抓住。GdkDevice
block_others- TRUE可防止其他設備與小部件交互。
自 3.0 起
另請參見
gtk3-General


------------ KeyGTK3gtk_device_grab_remove ----

gtk_device_grab_remove
從給定的小部件中刪除設備抓取。您必須將調用配對到 gtk_device_grab_add（） andgtk_device_grab_remove（）。
語法
參數
widget- 一GtkWidget
device- 一GdkDevice
自 3.0 起
另請參見
gtk3-General


------------ KeyGTK3gtk_dialog_add_action_widget ----

gtk_dialog_add_action_widget
將可啟動的小部件添加到 的操作區域，連接一個信號處理常式，該處理常式將在啟動小部件時在對話方塊中發出信號。該微件位於對話方塊操作區域的末尾。如果要添加非可啟動的小部件，只需將其打包到結構的action_area欄位中即可。GtkDialog?response?GtkDialog
語法
參數
dialog- 一GtkDialog
child- 一個可啟動的小部件
response_id- 兒童的回應 ID
另請參見
GtkDialog


------------ KeyGTK3gtk_dialog_add_button ----

gtk_dialog_add_button
添加一個具有給定文本的按鈕並進行設置，以便按一下該按鈕將發出具有給定response_id的信號。該按鈕將附加到對話方塊的操作區域的末尾。按鈕小部件被返回，但通常你不需要它。?response?
語法
參數
dialog- 一GtkDialog
button_text- 按鈕文本
response_id- 按鈕的回應 ID
返回
已添加的小部件。[無轉移]GtkButton
另請參見
GtkDialog


------------ KeyGTK3gtk_dialog_add_buttons ----

gtk_dialog_add_buttons
添加更多按鈕，與重複調用gtk_dialog_add_button（）相同。變數參數清單應為 NULL 終止，gtk_dialog_new_with_buttons（）。每個按鈕必須同時具有文本和回應 ID。
語法
參數
dialog- 一GtkDialog
first_button_text- 按鈕文本
...- 第一個按鈕的回應ID，然後是更多文本response_id對
另請參見
GtkDialog


------------ KeyGTK3gtk_dialog_get_action_area ----

gtk_dialog_get_action_area
gtk_dialog_get_action_area自版本 3.12 起已棄用，不應在新編寫的代碼中使用。不鼓勵直接進入行動區;使用 gtk_dialog_add_button（） 等。返回對話方塊的操作區域。
語法
參數
dialog- 一GtkDialog
返回
操作區域。[無轉移]
自 2.14 起
另請參見
GtkDialog


------------ KeyGTK3gtk_dialog_get_content_area ----

gtk_dialog_get_content_area
返回對話方塊的內容區域。
語法
參數
dialog- 一GtkDialog
返回
內容區域 。[無轉移]GtkBox
自 2.14 起
另請參見
GtkDialog


------------ KeyGTK3gtk_dialog_get_header_bar ----

gtk_dialog_get_header_bar
返回對話方塊的標題列。請注意，僅當屬性為 TRUE 時，對話方塊才會使用標題列。?use-header-bar?
語法
參數
dialog- 一GtkDialog
返回
標題列。[無轉移]
自 3.12 起
另請參見
GtkDialog


------------ KeyGTK3gtk_dialog_get_response_for_widget ----

gtk_dialog_get_response_for_widget
獲取對話方塊操作區域中小部件的回應 ID。
語法
參數
dialog- 一GtkDialog
widget- 對話方塊操作區域中的小部件
返回
小部件的回應 ID，或GTK_RESPONSE_NONEif小部件沒有設置回應 ID。
自 2.8 起
另請參見
GtkDialog


------------ KeyGTK3gtk_dialog_get_widget_for_response ----

gtk_dialog_get_widget_for_response
獲取在對話方塊的操作區域中使用給定回應 ID 的小部件按鈕。
語法
參數
dialog- 一GtkDialog
response_id- 對話方塊小道使用的回應 ID
返回
使用givenresponse_id的小部件按鈕，或 NULL。[無轉移]
自 2.20 起
另請參見
GtkDialog


------------ KeyGTK3gtk_dialog_new ----

gtk_dialog_new
創建一個新對話方塊。小部件不應直接打包到此內容中，而應打包到 vbox 和action_area中，如上所述。GtkWindow
返回
將新對話方塊作為GtkWidget
另請參見
GtkDialog


------------ KeyGTK3gtk_dialog_new_with_buttons ----

gtk_dialog_new_with_buttons
創建一個帶有標題（默認標題為 NULL;請參閱gtk_window_set_title（））和臨時父級（或無標題為 NULL;請參閱gtk_window_set_transient_for（）））的新標題。flagsargument 可用于使對話方塊成為模式 （） 和/或將其與其瞬態父節點 （） 一起銷毀。在標誌之後，應列出按鈕文本/回應 ID 對，並在列表末尾使用 NULL 指針。按鈕文本可以是任意文本。回應 ID 可以是正數，也可以是枚舉中的值之一。如果使用者按一下其中一個對話方塊按鈕， 將發出具有相應響應 ID 的信號。如果 a 收到信號，它將發出響應 ID 為 的 ：：response。但是，銷毀對話方塊不會發出 ：：response 信號;因此在使用該標誌時要小心依賴 ：：response。按鈕是從左到右，因此清單中的第一個按鈕將是對話方塊中最左側的按鈕。這裡有一個簡單的例子：12345678910[/語法] [語法]GtkWidget *對話方塊;GtkDialogFlags 標誌 = GTK_DIALOG_MODAL |GTK_DIALOG_DESTROY_WITH_PARENT;dialog = gtk_dialog_new_with_buttons （“My dialog”， main_app_window， flags， _（“_OK”）， GTK_RESPONSE_ACCEPT， _（“_Cancel”）， GTK_RESPONSE_REJECT， NULL）;[/語法]GtkDialogGTK_DIALOG_MODALGTK_DIALOG_DESTROY_WITH_PARENTGtkResponseTypeGtkDialog?response?GtkDialog?delete-event?GTK_RESPONSE_DELETE_EVENTGTK_DIALOG_DESTROY_WITH_PARENT
語法
參數
title- 對話方塊的標題，或 NULL。[允許-無]
parent- 對話方塊的瞬態父級，或 NULL。[允許-無]
flags- 從GtkDialogFlags
first_button_text- 文本進入第一個按鈕，或空。[允許-無]
...- 第一個按鈕的回應 ID，然後是其他按鈕，以 NULL 結尾
返回
一個新的GtkDialog
另請參見
GtkDialog


------------ KeyGTK3gtk_dialog_response ----

gtk_dialog_response
發出具有給定回應 ID 的信號。用於指示使用者已以某種方式回應對話方塊;通常，您或gtk_dialog_run（） 將監視：：回應信號並採取適當的操作。?response?
語法
參數
dialog- 一GtkDialog
response_id- 回應 ID
另請參見
GtkDialog


------------ KeyGTK3gtk_dialog_run ----

gtk_dialog_run
在遞迴主迴圈中阻塞，直到對話發出信號或被破壞。如果在調用 gtk_dialog_run（） 期間對話方塊被破壞，則返回 gtk_dialog_run（）。否則，它將從：：回應信號發射返回回應 ID。在進入遞迴主迴圈之前，gtk_dialog_run（） callsgtk_widget_show（） 在對話方塊中為您準備。請注意，您仍然需要自己顯示對話方塊的任何子級。在 gtk_dialog_run（） 期間，的默認行為被禁用;如果對話方塊收到 ：:d elete_event，它不會像通常的窗口那樣被破壞，並且gtk_dialog_run（） 將返回。此外，在gtk_dialog_run（）期間，對話方塊將是模態的。您可以隨時通過調用 gtk_dialog_response（） 發出 ：：response 信號來強制 gtk_dialog_run（） 返回。在gtk_dialog_run（）期間銷毀對話方塊是一個非常糟糕的主意，因為您的post-run代碼將不知道對話方塊是否被銷毀。gtk_dialog_run（） 返回後，如果您願意，則負責隱藏或破壞對話方塊。此函數的典型用法可能是：1234567891011[/語法] [語法]gint result = gtk_dialog_run （GTK_DIALOG （dialog））;switch （result） { case GTK_RESPONSE_ACCEPT： do_application_specific_something （）; break; default： do_nothing_since_dialog_was_cancelled （）; break; }gtk_widget_destroy（對話方塊）;[/語法]
請注意，即使遞迴主迴圈具有非強制回應對話方塊的效果（它阻止用戶在對話方塊運行時與同一視窗組中的其他視窗進行交互），也會在gtk_dialog_run（）調用期間觸發回檔，例如超時，IO 通道監視，DND 丟棄等。?response?GTK_RESPONSE_NONE?delete-event?GTK_RESPONSE_DELETE_EVENT
語法
參數
dialog- 一GtkDialog
返回
回應 ID
另請參見
GtkDialog


------------ KeyGTK3gtk_dialog_set_alternative_button_order ----

gtk_dialog_set_alternative_button_order
gtk_dialog_set_alternative_button_order自 3.10 版起已棄用，不應在新編寫的代碼中使用。已棄用設置備用按鈕順序。如果將設置設置為 TRUE，則對話按鈕將根據傳遞給此函數的回應 ID 的順序重新排序。預設情況下，GTK+ 對話方塊使用“GNOME 人機界面指南”所宣導的按鈕順序，最右邊是肯定按鈕，左邊是取消按鈕。但是內置的GTK +對話方塊確實提供了一個替代按鈕順序，這在某些平臺上更合適，例如Windows.將所有按鈕添加到對話方塊後使用此功能，如下面的示例所示：12345678910111213141516171819[/語法] [語法]cancel_button = gtk_dialog_add_button（GTK_DIALOG（對話方塊），_（“_Cancel”），GTK_RESPONSE_CANCEL）;ok_button = gtk_dialog_add_button（GTK_DIALOG（對話方塊）， _（“_OK”）， GTK_RESPONSE_OK）;gtk_widget_grab_default （ok_button）;help_button = gtk_dialog_add_button （GTK_DIALOG （dialog）， _（“_Help”）， GTK_RESPONSE_HELP）;gtk_dialog_set_alternative_button_order （GTK_DIALOG （dialog）， GTK_RESPONSE_OK， GTK_RESPONSE_CANCEL， GTK_RESPONSE_HELP， -1）;[/語法]?gtk-alternative-button-order?GtkMessageDialogs
語法
參數
dialog- 一GtkDialog
first_response_id- 一個對話方塊的按鈕使用的響應 id
...- 對話方塊按鈕的更多回應id清單，以-1結尾
自 2.6 起
另請參見
GtkDialog


------------ KeyGTK3gtk_dialog_set_alternative_button_order_from_array ----

gtk_dialog_set_alternative_button_order_from_array
gtk_dialog_set_alternative_button_order_from_array自版本 3.10 起已棄用，不應在新編寫的代碼中使用。已棄用設置備用按鈕順序。如果該設置設置為 TRUE，則對話按鈕將根據 new_order 中回應 id 的順序重新排序。有關詳細資訊，請參閱 gtk_dialog_set_alternative_button_order（）。此函數供語言綁定使用。?gtk-alternative-button-order?
語法
參數
dialog- 一GtkDialog
n_params- new_order中的回應 id 數
new_order- 一個響應 id 的陣列的對話方塊的按鈕。[陣列長度 = n_params]
自 2.
另請參見
GtkDialog


------------ KeyGTK3gtk_dialog_set_default_response ----

gtk_dialog_set_default_response
使用給定的response_idas對話方塊的給定視窗小部件設置對話方塊操作區域中的最後一個微件。緊迫？進入？通常啟動默認小部件。
語法
參數
dialog- 一GtkDialog
response_id- 回應 ID
另請參見
GtkDialog


------------ KeyGTK3gtk_dialog_set_response_sensitive ----

gtk_dialog_set_response_sensitive
使用給定response_id為對話方塊操作區域中的每個小部件調用gtk_widget_set_sensitive（小部件，@setting）。一種使對話方塊按鈕敏感化/脫敏的便捷方法。
語法
參數
dialog- 一GtkDialog
response_id- 回應 ID
setting- 對於敏感
另請參見
GtkDialog


------------ KeyGTK3gtk_disable_setlocale ----

gtk_disable_setlocale
防止gtk_init（）、gtk_init_check（）、gtk_init_with_args（） andgtk_parse_args（） 自動調用 setlocale （LC_ALL， “”）。如果要將程式的區域設置設置為使用者區域設置以外的其他值，或者要為不同的區域設置類別設置不同的值，則可以使用此函數。大多數程式不需要調用此函數。
另請參見
gtk3-General


------------ KeyGTK3gtk_drag_begin ----

gtk_drag_begin
gtk_drag_begin自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_drag_begin_with_coordinates（）。
語法
參數
widget- 源小部件。
targets- 來源可以提供資料的目標（資料格式）。
actions- 此拖動允許的拖動操作的位元遮罩。
button- 使用者按一下以開始拖動的按鈕。
event- 觸發拖動開始的事件。
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_begin_with_coordinates ----

gtk_drag_begin_with_coordinates
在源端啟動拖動。該函數僅在應用程式啟動拖動自身時才需要使用，而whengtk_drag_source_set（） 則不需要。該事件用於檢索將在內部用於抓取指針的時間戳記。如果事件為 NULL，則將使用GDK_CURRENT_TIME。但是，您應該嘗試在所有情況下傳遞真實事件，因為可以使用該事件來獲取有關拖動的資訊。通常有三種情況，當您想要通過調用此功能來手動啟動拖動時：在處理常式期間，如果要在使用者按下滑鼠按鈕時立即啟動拖動。傳遞處理常式中的事件。在處理常式期間，如果要在按下按鈕後滑鼠移動超過特定閾值距離時啟動拖動。傳遞處理常式中的事件。在超時處理常式期間，如果要在按住滑鼠按鈕一段時間後開始拖動。嘗試使用gdk_event_copy（）保存從滑鼠中獲取的最後一個事件，並將其傳遞給此函數（完成後請記住使用gdk_event_free（）釋放事件）。如果您真的無法通過真實事件，請改用。?button-press-event??button-press-event??motion-notify-event??motion-notify-event?NULL
語法
參數
widget- 源小部件。
targets- 來源可以提供資料的目標（資料格式）。
actions- 此拖動允許的拖動操作的位元遮罩。
button- 使用者按一下以開始拖動的按鈕。
event- 觸發拖動開始的事件。
x- 從小部件的座標空間中開始拖動的初始 x 座標。如果傳遞 -1，則從事件或當前指針位置檢索座標。
y- 從小部件的座標空間中開始拖動的初始 y 座標。如果傳遞 -1，則從事件或當前指針位置檢索座標。
返回
此拖動的上下文。[無轉移]
自 3.10 起
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_check_threshold ----

gtk_drag_check_threshold
語法
參數
widget- 一GtkWidget
start_x- X座標的開始拖動
start_y- 拖動開始的Y座標
current_x- 當前 X 座標
current_y- 當前Y座標
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_add_image_targets ----

gtk_drag_dest_add_image_targets
語法
參數
widget- 一個拖曳的目的地GtkWidget
自 2.6 起
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_add_text_targets ----

gtk_drag_dest_add_text_targets
語法
參數
widget- 一個拖曳的目的地GtkWidget
自 2.6 起
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_add_uri_targets ----

gtk_drag_dest_add_uri_targets
語法
參數
widget- 一個拖曳的目的地GtkWidget
自 2.6 起
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_find_target ----

gtk_drag_dest_find_target
語法
參數
widget- 拖動目標小部件
context- 拖動上下文
target_list- 可放置目標清單，或 NULL 以usegtk_drag_dest_get_target_list（小部件）。[允許-無]
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_get_target_list ----

gtk_drag_dest_get_target_list
璿硶
鍙傛暟
widget- 涓€GtkWidget
鍙﹁鍙傝
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_get_track_motion ----

gtk_drag_dest_get_track_motion
語法
參數
widget- 一個拖曳的目的地GtkWidget
自 2.10 起
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_set ----

gtk_drag_dest_set
Syntax
Parameters
widget  -  	a GtkWidget
flags  -  	which types of default drag behavior to use
targets  -  	 a pointer to an array of indicating the drop types that this widgetwill accept, or NULL.Later you can access the list with gtk_drag_dest_get_target_list()and gtk_drag_dest_find_target(). [allow-none][array length=n_targets]GtkTargetEntrys
n_targets  -  	the number of entries in targets
actions  -  	a bitmask of possible actions for a drop onto this widget.
See Also
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_set_proxy ----

gtk_drag_dest_set_proxy
語法
參數
widget- 一GtkWidget
proxy_window- 將事件向前拖動到的窗口
protocol- proxy_windowaccepts拖動協定（您可以使用gdk_drag_get_protocol（）來確定這一點）
use_coordinates- 如果為 TRUE，則將相同的座標發送到目的地，因為它是嵌入式子視窗。
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_set_target_list ----

gtk_drag_dest_set_target_list
語法
參數
widget- 一個拖曳的目的地GtkWidget
target_list- 可丟棄目標的清單，或 NULL 表示無。[允許-無]
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_set_track_motion ----

gtk_drag_dest_set_track_motion
語法
參數
widget- 一個拖曳的目的地GtkWidget
track_motion- 是否接受所有目標
自 2.10 起
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_unset ----

gtk_drag_dest_unset
璿硶
鍙傛暟
widget- 涓€GtkWidget
鍙﹁鍙傝
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_finish ----

gtk_drag_finish
語法
參數
context- 拖動上下文。
success- 指示放置是否成功的標誌
del- 指示源是否應刪除原始資料的標誌。（對於移動，這應該是正確的）
time_- 信號的時間戳記。?drag-drop?
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_get_data ----

gtk_drag_get_data
語法
參數
widget- 將接收信號的小部件。?drag-data-received?
context- 拖動上下文
target- 要檢索的目標（資料的形式）。
time_- 用於檢索資料的時間戳記。這通常是在“或”信號中接收的時間。?drag-motion??drag-drop?
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_get_source_widget ----

gtk_drag_get_source_widget
語法
參數
context- 一個（目標側）拖動上下文
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_highlight ----

gtk_drag_highlight
璿硶
鍙傛暟
widget- 涓€涓皬閮ㄤ歡紿佸嚭鏄劇ず
鍙﹁鍙傝
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_set_icon_default ----

gtk_drag_set_icon_default
將特定拖動的圖示設置為預設圖示。
語法
參數
context- 拖動的上下文。（這必須與拖動的源端的上下文一起調用）
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_set_icon_gicon ----

gtk_drag_set_icon_gicon
設置給定圖示中給定拖動的圖示。有關在拖放中使用圖示的更多詳細資訊，請參閱gtk_drag_set_icon_name（） 的文檔。
語法
參數
context- 拖動的上下文。（這必須與拖動的源端的上下文一起調用）
icon- 一GIcon
hot_x- 圖示內熱點的 X 偏移量
hot_y- 圖示內熱點的 Y 偏移量
自 3.2 起
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_set_icon_name ----

gtk_drag_set_icon_name
設置從命名主題圖示進行給定拖動的圖示。有關更多詳細資訊，請參閱文檔。請注意，圖示的大小取決於圖示主題（圖示以符號大小載入），因此hot_x，並且必須謹慎使用hot_y。GtkIconThemeGTK_ICON_SIZE_DND
語法
參數
context- 拖動的上下文。（這必須與拖動的源端的上下文一起調用）
icon_name- 要使用的圖示名稱
hot_x- 圖示內熱點的 X 偏移量
hot_y- 圖示內熱點的 Y 偏移量
自 2.8 起
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_set_icon_pixbuf ----

gtk_drag_set_icon_pixbuf
將 pixbuf 設置為給定拖動的圖示。
語法
參數
context- 拖動的上下文。（這必須與拖動的源端的上下文一起調用）
pixbuf- 用作拖動圖示。GdkPixbuf
hot_x- 熱點小部件內的 X 偏移量。
hot_y- 熱點小部件內的 Y 偏移。
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_set_icon_stock ----

gtk_drag_set_icon_stock
gtk_drag_set_icon_stock自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_drag_set_icon_name（）。設置從股票 ID 進行給定拖動的圖示。
語法
參數
context- 拖動的上下文。（這必須與拖動的源端的上下文一起調用）
stock_id- 用於拖動的庫存圖示的 ID。
hot_x- 熱點圖示內的 X 偏移量。
hot_y- 熱點圖示內的 Y 偏移量。
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_set_icon_surface ----

gtk_drag_set_icon_surface
將表面設置為給定拖動的圖示。GTK+ 保留參數的引用，並在不再需要它們時釋放它們。要相對於滑鼠定位曲面，請在曲面上usecairo_surface_set_device_offset（）。滑鼠游標將位於表面的 （0，0） 座標處。
語法
參數
context- 拖動的上下文。（這必須與拖動的源端的上下文一起調用）
surface- 用作圖示的表面
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_set_icon_widget ----

gtk_drag_set_icon_widget
將微件的圖示更改為給定的構件。GTK+不會破壞圖示，所以如果你不想堅持下去，你應該連接到？drag-end？發出信號並自己銷毀它。
語法
參數
context- 拖動的上下文。（這必須與拖動的源端的上下文一起調用）
widget- 一個可用作圖示的超豪華視窗。
hot_x- 熱點小部件內的 X 偏移量。
hot_y- 熱點小部件內的 Y 偏移。
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_add_image_targets ----

gtk_drag_source_add_image_targets
語法
參數
widget- a that？s 是一個拖動源GtkWidget
自 2.6 起
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_add_text_targets ----

gtk_drag_source_add_text_targets
將 支援的文本目標添加到拖動源的目標清單中。目標的添加資訊 = 0。如果需要其他值，請使用 gtk_target_list_add_text_targets（） andgtk_drag_source_set_target_list（）。GtkSelection
語法
參數
widget- a that？s 是一個拖動源GtkWidget
自 2.6 起
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_add_uri_targets ----

gtk_drag_source_add_uri_targets
語法
參數
widget- a that？s 是一個拖動源GtkWidget
自 2.
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_get_target_list ----

gtk_drag_source_get_target_list
語法
參數
widget- 一GtkWidget
2.4 起
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_set ----

gtk_drag_source_set
語法
參數
widget- 一GtkWidget
start_button_mask- 可以開始拖動的按鈕的位元遮罩
targets- 拖動將支援的目標表，可能為 NULL。[允許-無][陣列長度 = n_targets]
n_targets- 目標中的專案數
actions- 從此小部件拖動的可能操作的位元遮罩
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_set_icon_gicon ----

gtk_drag_source_set_icon_gicon
設置將用於從特定源到圖示拖動的圖示。有關更多詳細資訊，請參閱文檔。GtkIconTheme
語法
參數
widget- 一GtkWidget
icon- 一GIcon
自 3.2 起
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_set_icon_name ----

gtk_drag_source_set_icon_name
設置將用於從特定源拖動到主題圖示的圖示。有關更多詳細資訊，請參閱文檔。GtkIconTheme
語法
參數
widget- 一GtkWidget
icon_name- 要使用的圖示名稱
自 2.8 起
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_set_icon_pixbuf ----

gtk_drag_source_set_icon_pixbuf
璿硶
鍙傛暟
widget- 涓€GtkWidget
pixbuf- 鐢ㄤ簬鎷栧姩鍥炬爣GdkPixbuf
鍙﹁鍙傝
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_set_icon_stock ----

gtk_drag_source_set_icon_stock
gtk_drag_source_set_icon_stock自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_drag_source_set_icon_name（）。設置將用於從特定源拖動到常用圖示的圖示。
語法
參數
widget- 一GtkWidget
stock_id- 要使用的股票圖示的ID
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_set_target_list ----

gtk_drag_source_set_target_list
語法
參數
widget- 一個拖拽源GtkWidget
target_list- 可拖動目標的清單，或 NULL 表示無。[允許-無]
2.4 起
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_unset ----

gtk_drag_source_unset
璿硶
鍙傛暟
widget- 涓€GtkWidget
鍙﹁鍙傝
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_unhighlight ----

gtk_drag_unhighlight
語法
參數
widget- 一個小部件，從中刪除高亮。
另請參見
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drawing_area_new ----

gtk_drawing_area_new
創建新的繪圖區域。
返回
一個新的GtkDrawingArea[/code
See Also
GtkDrawingArea


------------ KeyGTK3gtk_draw_insertion_cursor ----

gtk_draw_insertion_cursor
gtk_draw_insertion_cursor自 3.4 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_render_insertion_cursor（）。在位置的 cr 上繪製文本插入符號。這不是一個樣式函數，而只是繪製標準游標形狀的便利函數。
語法
參數
widget- 一GtkWidget
cr- 開羅語境來畫
location- 繪製游標的位置（位置>忽略的寬度）
is_primary- 如果游標應該是主游標顏色。
direction- 游標是從左到右還是從右到左。永遠不應該GTK_TEXT_DIR_NONE
draw_arrow- TRUE 在游標上繪製方向箭頭。應為 FALSE，除非游標已拆分。
自 3.0 起
另請參見
GtkStyle


------------ KeyGTK3gtk_editable_copy_clipboard ----

gtk_editable_copy_clipboard
複製可編輯中當前選定內容的內容，並將其放在剪貼板上。
語法
參數
editable- 一GtkEditable
另請參見
GtkEditable


------------ KeyGTK3gtk_editable_cut_clipboard ----

gtk_editable_cut_clipboard
刪除可編輯中當前所選內容的內容，並將其放在剪貼板上。
語法
參數
editable- 一GtkEditable
另請參見
GtkEditable


------------ KeyGTK3gtk_editable_delete_selection ----

gtk_editable_delete_selection
刪除可編輯的當前選定文本。如果沒有選定的文本，則此調用不會執行任何操作。
語法
參數
editable- 一GtkEditable
另請參見
GtkEditable


------------ KeyGTK3gtk_editable_delete_text ----

gtk_editable_delete_text
刪除一系列字元。刪除的字元是介於start_pos到（但不包括end_pos）的位置的字元。如果end_pos為負數，則刪除的字元是從start_pos到文本末尾的字元。請注意，位置以字元而不是位元組為單位指定。
語法
參數
editable- 一GtkEditable
start_pos- 起始位置
end_pos- 結束位置
另請參見
GtkEditable


------------ KeyGTK3gtk_editable_get_chars ----

gtk_editable_get_chars
檢索字元序列。檢索到的字元是位於從start_pos到（但不包括end_pos）的位置的字元。如果end_pos為負數，則刪除的字元是從start_pos到文本末尾的字元。請注意，位置以字元而不是位元組為單位指定。
語法
參數
editable- 一GtkEditable
start_pos- 文本開頭
end_pos- 文本結尾
返回
指向小部件內容的指標作為字串。此字串由實現分配，應由調用方釋放。GtkEditable
另請參見
GtkEditable


------------ KeyGTK3gtk_editable_get_editable ----

gtk_editable_get_editable
媯€緔㈠彲緙栬緫鏄惁鍙紪杈戙€係eegtk_editable_set_editable錛堬級.
璿硶
鍙傛暟
editable- 涓€GtkEditable
榪斿洖
濡傛灉鍙紪杈戜負鐪熷彲緙栬緫
鍙﹁鍙傝
GtkEditable


------------ KeyGTK3gtk_editable_get_position ----

gtk_editable_get_position
檢索游標相對于可編輯內容的起始位置的當前位置。請注意，此位置以字元為單位，而不是以位元組為單位。
語法
參數
editable- 一GtkEditable
返回
游標位置
另請參見
GtkEditable


------------ KeyGTK3gtk_editable_get_selection_bounds ----

gtk_editable_get_selection_bounds
檢索可編輯的選區邊界。start_pos將填充選擇的開始，並以結束end_pos。如果未選擇任何文本，則兩者將相同，並且將返回 FALSE。請注意，位置以字元而不是位元組為單位指定。
語法
參數
editable- 一GtkEditable
start_pos- 存儲起始位置的位置，或 NULL。[輸出][允許-無]
end_pos- 存儲結束位置的位置，或 NULL。[輸出][允許-無]
返回
如果選擇了某個區域，則為 TRUE，否則為 FALSE
另請參見
GtkEditable


------------ KeyGTK3gtk_editable_insert_text ----

gtk_editable_insert_text
Inserts new_text_length bytes of new_text into the contents of thewidget, at position position.Note that the position is in characters, not in bytes. The function updates position to point after the newly inserted text.
Syntax
Parameters
editable  -  	a GtkEditable
new_text  -  	the text to append
new_text_length  -  	the length of the text in bytes, or -1
position  -  	 location of the position text will be inserted at. [inout]
See Also
GtkEditable


------------ KeyGTK3gtk_editable_paste_clipboard ----

gtk_editable_paste_clipboard
將剪貼板的內容粘貼到可編輯中游標的當前位置。
語法
參數
editable- 一GtkEditable
另請參見
GtkEditable


------------ KeyGTK3gtk_editable_select_region ----

gtk_editable_select_region
選擇文本區域。選擇的字元是位於從start_pos到（但不包括end_pos）的位置的字元。如果end_pos為負數，則選擇的字元是從start_pos到文本末尾的字元。請注意，位置以字元而不是位元組為單位指定。
語法
參數
editable- 一GtkEditable
start_pos- 區域開始
end_pos- 區域末期
另請參見
GtkEditable


------------ KeyGTK3gtk_editable_set_editable ----

gtk_editable_set_editable
確定使用者是否可以編輯可編輯小道中的文本。
語法
參數
editable- 一GtkEditable
is_editable- TRUE，如果允許使用者編輯小部件中的文本
另請參見
GtkEditable


------------ KeyGTK3gtk_editable_set_position ----

gtk_editable_set_position
將可編輯的游標位置設置為給定值。游標顯示在可編輯內容中具有給定（基數為 0）索引的字元之前。該值必須小於或等於可編輯中的字元數。值 -1 表示位置應設置在可編輯的最後一個字元之後。請注意，位置以字元為單位，而不是以位元組為單位。
語法
參數
editable- 一GtkEditable
position- 游標的位置
另請參見
GtkEditable


------------ KeyGTK3gtk_entry_buffer_delete_text ----

gtk_entry_buffer_delete_text
從緩衝區中刪除一系列字元。n_chars字元從位置開始刪除。如果n_chars為負數，則刪除文本末尾的所有字元。如果位置或n_chars超出界限，那麼他們就會被迫進行評估。請注意，位置以字元而不是位元組為單位指定。
語法
參數
buffer- 一GtkEntryBuffer
position- 刪除文本的位置
n_chars- 要刪除的字元數
返回
刪除的字元數。
自 2.18 起
另請參見
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_emit_deleted_text ----

gtk_entry_buffer_emit_deleted_text
在子類化時使用GtkEntryBuffer
語法
參數
buffer- 一GtkEntryBuffer
position- 刪除文本的位置
n_chars- 刪除的字元數
自 2.18 起
另請參見
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_emit_inserted_text ----

gtk_entry_buffer_emit_inserted_text
在子類化時使用GtkEntryBuffer
語法
參數
buffer- 一GtkEntryBuffer
position- 插入文本的位置
chars- 插入的文本
n_chars- 插入的字元數
自 2.1 起
另請參見
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_get_bytes ----

gtk_entry_buffer_get_bytes
檢索緩衝區的長度（以位元組為單位）。請參見gtk_entry_buffer_get_length（）。
語法
參數
buffer- 一GtkEntryBuffer
返回
緩衝區的位元組長度。
自 2.18 起
另請參見
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_get_length ----

gtk_entry_buffer_get_length
檢索緩衝區的長度（以字元為單位）。
語法
參數
buffer- 一GtkEntryBuffer
返回
緩衝區中的字元數。
自 2.18 起
另請參見
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_get_max_length ----

gtk_entry_buffer_get_max_length
檢索文本緩衝區的最大允許長度。請參見gtk_entry_buffer_set_max_length（）。
語法
參數
buffer- 一GtkEntryBuffer
返回
允許的最大字元數in，如果沒有最大值，則為 0。GtkEntryBuffer
自 2.18 起
另請參見
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_get_text ----

gtk_entry_buffer_get_text
檢索緩衝區的內容。此調用返回的記憶體指標不會更改此物件發出信號或完成。
語法
參數
buffer- 一GtkEntryBuffer
返回
指向小部件內容的指標作為字串。此字串指向緩衝區中內部分配的存儲，不得釋放、修改或存儲。
自 2.18 起
另請參見
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_insert_text ----

gtk_entry_buffer_insert_text
將字元的n_chars字元插入到緩衝區的內容中，位於位置位置。如果n_chars為負數，則在找到空結束字元之前，將插入字元中的字元。如果位置或n_chars出站，或者超出了最大緩衝區文本長度，則它們將遵循合理的值。請注意，位置和長度以字元為單位，而不是以位元組為單位。
語法
參數
buffer- 一GtkEntryBuffer
position- 插入文本的位置。
chars- 要插入到緩衝區中的文本。
n_chars- 以字元為單位的文本長度，或 -1
返回
實際插入的字元數。
自 2.18 起
另請參見
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_new ----

gtk_entry_buffer_new
創建一個新的 GtkEntryBuffer 物件。（可選）指定要在緩衝區中設置的初始文本。
語法
參數
initial_chars- 初始緩衝區文本，或 NULL。[允許-無]
n_initial_chars- initial_chars中的字元數，或 -1
返回
一個新的 GtkEntryBuffer 物件。
自 2.18 起
另請參見
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_set_max_length ----

gtk_entry_buffer_set_max_length
Sets the maximum allowed length of the contents of the buffer. Ifthe current contents are longer than the given length, then theywill be truncated to fit.
Syntax
Parameters
buffer  -  	a GtkEntryBuffer
max_length  -  	the maximum length of the entry buffer, or 0 for no maximum.(other than the maximum length of entries.) The value passed in willbe clamped to the range 0-65536.
Since 2.18
See Also
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_set_text ----

gtk_entry_buffer_set_text
設置緩衝區中的文本。這大致相當於調用 gtk_entry_buffer_delete_text（） 和 gtk_entry_buffer_insert_text（）。請注意，n_chars以字元為單位，而不是以位元組為單位。
語法
參數
buffer- 一GtkEntryBuffer
chars- 新文本
n_chars- 文本中的字元數，或 -1
自 2.18 起
另請參見
GtkEntryBuffer


------------ KeyGTK3gtk_entry_completion_complete ----

gtk_entry_completion_complete
請求完成操作，或者換句話說，使用當前鍵使用完成來重新映射當前列表。完成列表視圖將相應地更新。
語法
參數
completion- 一GtkEntryCompletion
2.4 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_compute_prefix ----

gtk_entry_completion_compute_prefix
計算由完成中以 key 開頭的所有行共用的公共首碼。如果沒有與鍵匹配的行，則返回 NULL。請注意，必須設置文本列才能使此函數正常工作，有關詳細資訊，請參閱gtk_entry_completion_set_text_column（）。
語法
參數
completion- 輸入完成
key- 要完成的文本
返回
通用首碼 all 行都以鍵或 NULL 開頭，如果沒有與鍵匹配的行。[轉移完整]
自 3.4 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_delete_action ----

gtk_entry_completion_delete_action
從完成的操作列表中刪除index_處的操作。
語法
參數
completion- 一GtkEntryCompletion
index_- 要刪除的專案的索引
2.4 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_completion_prefix ----

gtk_entry_completion_get_completion_prefix
Get the original text entered by the user that triggeredthe completion or NULL if there?s no completion ongoing.
Syntax
Parameters
completion  -  	a GtkEntryCompletion
Returns
the prefix for the current completion
Since 2.12
See Also
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_entry ----

gtk_entry_completion_get_entry
獲取已附加到的條目完成。
語法
參數
completion- 一GtkEntryCompletion
返回
條目完成已附加到。[無轉移]
2.4 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_inline_completion ----

gtk_entry_completion_get_inline_completion
返回是否應自動在條目中插入可能的完成項的公共首碼。
語法
參數
completion- 一GtkEntryCompletion
返回
如果串聯完成已打開，則為 TRUE
自 2.6 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_inline_selection ----

gtk_entry_completion_get_inline_selection
如果內聯選擇模式處於打開狀態，則返回 TRUE。
語法
參數
completion- 一GtkEntryCompletion
返回
如果內聯選擇模式處於打開狀態，則為 TRUE
自 2.12 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_minimum__length ----

gtk_entry_completion_get_minimum_key_length
gtk_entry_completion_get_minimum_key_length?()
Returns the minimum key length as set for completion.
Syntax
Parameters
completion  -  	a GtkEntryCompletion
Returns
The currently used minimum key length
Since 2.4
See Also
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_model ----

gtk_entry_completion_get_model
Returns NULL if the model is unset.
Syntax
Parameters
completion  -  	a GtkEntryCompletion
Returns
A , or NULL if noneis currently being used. [transfer none]GtkTreeModel
Since 2.4
See Also
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_popup_completion ----

gtk_entry_completion_get_popup_completion
返回是否應在快顯視窗中顯示完成。
語法
參數
completion- 一GtkEntryCompletion
返回
如果快顯視窗完成功能已打開，則為 TRUE
自 2.6 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_popup_set_width ----

gtk_entry_completion_get_popup_set_width
返回是否將完成快顯視窗的大小調整為條目的寬度。
語法
參數
completion- 一GtkEntryCompletion
返回
如果快顯視窗的大小將調整為條目的寬度，則為 TRUE
自 2.8 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_popup_single_match ----

gtk_entry_completion_get_popup_single_match
返回即使只有一個匹配項，是否也會顯示完成快顯視窗。
語法
參數
completion- 一GtkEntryCompletion
返回
如果快顯視窗將出現而不考慮匹配項的數量，則為 TRUE
自 2.
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_text_column ----

gtk_entry_completion_get_text_column
返回完成模型中要從中獲取字串的列。
語法
參數
completion- 一GtkEntryCompletion
返回
包含字串的列
自 2.6 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_insert_action_markup ----

gtk_entry_completion_insert_action_markup
在完成的措施項清單中的標記標記標記位置index_with插入動作。
語法
參數
completion- 一GtkEntryCompletion
index_- 要插入的專案的索引
markup- 要插入的專案的標記
2.4 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_insert_action_text ----

gtk_entry_completion_insert_action_text
在完成措施項清單中的文本文本位置插入index_with動作。如果希望措施項具有標記，usegtk_entry_completion_insert_action_markup（）。
語法
參數
completion- 一GtkEntryCompletion
index_- 要插入的專案的索引
text- 要插入的專案的文本
2.4 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_insert_prefix ----

gtk_entry_completion_insert_prefix
請求首碼插入。
語法
參數
completion- 一GtkEntryCompletion
自 2.6 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_new ----

gtk_entry_completion_new
創建新對象。GtkEntryCompletion
返回
新創建的對象GtkEntryCompletion
2.4 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_new_with_area ----

gtk_entry_completion_new_with_area
使用指定的區域創建新物件，以在下拉式功能表的基礎中佈局儲存格。GtkEntryCompletionGtkTreeViewColumn
語法
參數
area- 用於佈局儲存格GtkCellArea
返回
新創建的對象GtkEntryCompletion
自 3.0 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_inline_completion ----

gtk_entry_completion_set_inline_completion
設置是否應自動在條目中插入可能的完成項的公共首碼。
語法
參數
completion- 一GtkEntryCompletion
inline_completion- TRUE 執行內聯完成
自 2.6 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_inline_selection ----

gtk_entry_completion_set_inline_selection
設置是否可以在條目內迴圈完成可能的完成。
語法
參數
completion- 一GtkEntryCompletion
inline_selection- TRUE做內聯選擇
自 2.12 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_match_func ----

gtk_entry_completion_set_match_func
將完成匹配函數設置為 func。匹配函數用於確定某一行是否應在完成列表中。
語法
參數
completion- 一GtkEntryCompletion
func- 使用GtkEntryCompletionMatchFunc
func_data- 功能的使用者資料
func_notify- func_data銷毀通知。
2.4 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_minimum__length ----

gtk_entry_completion_set_minimum_key_length
gtk_entry_completion_set_minimum_key_length?()
要求完成搜索鍵的長度至少為長度。這對於長列表很有用，其中使用小鍵完成需要花費大量時間，並且無論如何都會得出無意義的結果（即，資料集太大）。
語法
參數
completion- 一GtkEntryCompletion
length- 金鑰的最小長度，以便開始完成
2.4 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_model ----

gtk_entry_completion_set_model
設置 的模型。如果已完成已設置模型，則會在設置新模型之前將其刪除。如果模型為 NULL，則它將取消設置模型。GtkEntryCompletion
語法
參數
completion- 一GtkEntryCompletion
model- .[允許-無]GtkTreeModel
2.4 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_popup_completion ----

gtk_entry_completion_set_popup_completion
設置是否應在快顯視窗中顯示完成。
語法
參數
completion- 一GtkEntryCompletion
popup_completion- 真做彈出完成
自 2.6 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_popup_set_width ----

gtk_entry_completion_set_popup_set_width
設置是否將完成快顯視窗的大小調整為與條目相同的寬度。
語法
參數
completion- 一GtkEntryCompletion
popup_set_width- TRUE 使快顯視窗的寬度與條目相同
自 2.8 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_popup_single_match ----

gtk_entry_completion_set_popup_single_match
設置即使只有一個匹配項，是否也會顯示完成快顯視窗。如果您使用的是內聯完成，則可能需要將其設置為 FALSE。
語法
參數
completion- 一GtkEntryCompletion
popup_single_match- 如果快顯視窗即使對於單個匹配項也應該顯示，則為 TRUE
自 2.8 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_text_column ----

gtk_entry_completion_set_text_column
用於設置此代碼最常用情況的便利函數：僅包含字串的完整清單。此函數將設置完成，以具有一個顯示完成清單中所有（和僅）字串的清單，並從完成模型中的列中獲取這些字串。此函數為所選列創建並添加 。如果需要設置文本列，但不需要 cellrenderer，請使用 g_object_set（） 直接設置屬性。GtkCellRendererText?text-column?
語法
參數
completion- 一GtkEntryCompletion
column- 完成模型中的列，用於從中獲取字串
2.4 起
另請參見
GtkEntryCompletion


------------ KeyGTK3gtk_entry_get_activates_default ----

gtk_entry_get_activates_default
檢索由 gtk_entry_set_activates_default（） 設置的值。
語法
參數
entry- 一GtkEntry
返回
如果條目將啟動默認小部件，則為 TRUE
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_alignment ----

gtk_entry_get_alignment
獲取由 gtk_entry_set_alignment（） 設置的值。
語法
參數
entry- 一GtkEntry
返回
對齊方式
2.4 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_attributes ----

gtk_entry_get_attributes
獲取在條目usinggtk_entry_set_attributes（） 上設置的屬性清單（如果有）。
語法
參數
entry- 一GtkEntry
返回
屬性清單，或 NULLif 未設置。[無轉移]
3.6 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_buffer ----

gtk_entry_get_buffer
獲取保存文本的物件是小部件。GtkEntryBuffer
語法
參數
entry- 一GtkEntry
返回
對象。[無轉移]GtkEntryBuffer
自 2.18 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_completion ----

gtk_entry_get_completion
Returns the auxiliary completion object currently in use by entry.
Syntax
Parameters
entry  -  	A GtkEntry
Returns
The auxiliary completion object currentlyin use by entry. [transfer none]
Since 2.4
See Also
GtkEntry


------------ KeyGTK3gtk_entry_get_current_icon_drag_source ----

gtk_entry_get_current_icon_drag_source
Returns the index of the icon which is the source of the currentDND operation, or -1.This function is meant to be used in a callback.?drag-data-get?
Syntax
Parameters
entry  -  	a GtkEntry
Returns
index of the icon which is the source of the currentDND operation, or -1.
Since 2.16
See Also
GtkEntry


------------ KeyGTK3gtk_entry_get_cursor_hadjustment ----

gtk_entry_get_cursor_hadjustment
檢索條目的水準游標調整。請參見gtk_entry_set_cursor_hadjustment（）。
語法
參數
entry- 一GtkEntry
返回
水準游標調整，或 NULLif 未設置任何設置。[無轉移]
自 2.12 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_has_frame ----

gtk_entry_get_has_frame
獲取由 gtk_entry_set_has_frame（） 設置的值。
語法
參數
entry- 一GtkEntry
返回
條目是否具有斜角框架
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_activatable ----

gtk_entry_get_icon_activatable
返回圖示是否可啟動。
語法
參數
entry- 一GtkEntry
icon_pos- 圖示位置
返回
如果圖示是可啟動的，則為 TRUE。
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_area ----

gtk_entry_get_icon_area
獲取在icon_pos處繪製條目圖示的區域。當在繪製回檔中將某些內容繪製到條目時，此函數很有用。如果條目未實現或在給定位置沒有圖示，則icon_area用零填充。另請參見 gtk_entry_get_text_area（）
語法
參數
entry- 一GtkEntry
icon_pos- 圖示位置
icon_area- 返回圖示區域的位置。[輸出]
自 3.0 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_at_pos ----

gtk_entry_get_icon_at_pos
查找給定位置處的圖示並返回其索引。位置的座標相對于條目的左上角。如果 x， y 不在圖示內，則返回 -1。此函數旨在用於信號處理常式。?query-tooltip?
語法
參數
entry- 一GtkEntry
x- 要查找的位置的 x 座標
y- 要查找的位置的 y 座標
返回
給定位置處圖示的索引，或 -1
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_gicon ----

gtk_entry_get_icon_gicon
Retrieves the  used for the icon, or NULL if there isno icon or if the icon was set by some other method (e.g., bystock, pixbuf, or icon name).GIcon
Syntax
Parameters
entry  -  	A GtkEntry
icon_pos  -  	Icon position
Returns
A , or NULL if no icon is setor if the icon is not a . [transfer none]GIconGIcon
Since 2.16
See Also
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_name ----

gtk_entry_get_icon_name
檢索用於圖示的圖示名稱，如果沒有圖示，或者如果圖示是由其他方法（例如，bypixbuf、stock 或 gicon）設置的，則檢索 NULL。
語法
參數
entry- 一GtkEntry
icon_pos- 圖示位置
返回
圖示名稱，如果未設置圖示，或者如果圖示不是從圖示名稱設置的，則為 NULL
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_pixbuf ----

gtk_entry_get_icon_pixbuf
檢索用於圖示的圖像。與設置和獲取圖示資料的其他方法不同，無論圖示是使用、、股票專案還是圖示名稱設置的，此方法都可以使用。GdkPixbufGIcon
語法
參數
entry- 一GtkEntry
icon_pos- 圖示位置
返回
如果沒有為此位置設置圖示，則為 NULL。[無轉移]GdkPixbuf
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_sensitive ----

gtk_entry_get_icon_sensitive
返回圖示是顯示為敏感還是不敏感。
語法
參數
entry- 一GtkEntry
icon_pos- 圖示位置
返回
如果圖示敏感，則為 TRUE。
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_stock ----

gtk_entry_get_icon_stock
gtk_entry_get_icon_stock自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_entry_get_icon_name（）。檢索用於圖示的庫存 ID，如果沒有圖示，或者如果圖示是由其他方法（例如，bypixbuf、圖示名稱或 gicon）設置的，則檢索 NULL。
語法
參數
entry- 一GtkEntry
icon_pos- 圖示位置
返回
股票 ID，如果未設置圖示，或者如果圖示不是從股票 ID 設置的，則為 NULL
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_storage_type ----

gtk_entry_get_icon_storage_type
獲取 icon 用於存儲圖像資料的表示形式類型。如果圖示沒有圖像資料，則返回值將GTK_IMAGE_EMPTY。
語法
參數
entry- 一GtkEntry
icon_pos- 圖示位置
返回
正在使用的圖像表示
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_tooltip_markup ----

gtk_entry_get_icon_tooltip_markup
獲取入口中指定位置的圖示上工具提示的內容。
語法
參數
entry- 一GtkEntry
icon_pos- 圖示位置
返回
工具提示文本，或 NULL。完成後，使用g_free（） 釋放返回的字串。
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_tooltip_text ----

gtk_entry_get_icon_tooltip_text
獲取入口中指定位置的圖示上工具提示的內容。
語法
參數
entry- 一GtkEntry
icon_pos- 圖示位置
返回
工具提示文本，或 NULL。完成後，使用g_free（） 釋放返回的字串。
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_inner_border ----

gtk_entry_get_inner_border
gtk_entry_get_inner_border自 3.4 版起已棄用，不應在新編寫的代碼中使用。使用標準邊框和填充 CSS 屬性（通過和 ）等物件此函數返回的值將被 忽略。此函數返回條目的屬性。Seegtk_entry_set_inner_border（） 瞭解更多資訊。GtkStyleContextGtkCssProviderGtkEntry?inner-border?
語法
參數
entry- 一GtkEntry
返回
該條目 ，如果未設置任何條目，則為 NULL。[無轉移]GtkBorder
自 2.10 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_input_hints ----

gtk_entry_get_input_hints
獲取屬性的值。?input-hints?
語法
參數
entry- 一GtkEntry
自 3.
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_input_purpose ----

gtk_entry_get_input_purpose
獲取屬性的值。?input-purpose?
語法
參數
entry- 一GtkEntry
3.6 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_invisible_char ----

gtk_entry_get_invisible_char
檢索顯示的字元，以代替可見性設置為 false 的條目的真實字元。請參見gtk_entry_set_invisible_char（）。
語法
參數
entry- 一GtkEntry
返回
當前不可見字元，或 0（如果條目根本不顯示不可見文本）。
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_layout ----

gtk_entry_get_layout
獲取用於顯示條目的 。該佈局可用于例如將文本位置轉換為圖元位置，並結合gtk_entry_get_layout_offsets（）。返回的佈局歸條目所有，調用方不得修改或釋放該佈局。請記住，佈局文本可能包含 preedit 字串，sogtk_entry_layout_index_to_text_index（） andgtk_entry_text_index_to_layout_index（） 需要將佈局中的位元組索引轉換為條目內容中的位元組索引。PangoLayout
語法
參數
entry- 一GtkEntry
返回
對於此條目。[無轉移]PangoLayout
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_layout_offsets ----

gtk_entry_get_layout_offsets
獲取用於在條目中呈現文本的 視窗小部件座標中的位置。如果要將條目中的文本與其他文本對齊，例如，當使用theentry在工作表小部件中實現可編輯儲存格時，非常有用。將滑鼠事件轉換為內部座標也很有用，例如，如果按一下了輸入文本的某些部分，則採取某些操作。請注意，當用戶在條目中滾動時，偏移量將發生變化;您需要連接到 “notify：：scroll-offset” 信號來跟蹤此情況。請記住，在使用需要與圖元（usingPANGO_PIXELS（） 或 usingPANGO_PIXELS） 進行轉換的函數時。請記住，佈局文本可能包含 preedit 字串，sogtk_entry_layout_index_to_text_index（） andgtk_entry_text_index_to_layout_index（） 需要將佈局中的位元組索引轉換為條目內容中的位元組索引。PangoLayoutPangoLayoutPangoLayoutPANGO_SCALE
語法
參數
entry- 一GtkEntry
x- 存儲佈局的 X 偏移量的位置，或 NULL。[輸出][允許-無]
y- 存儲佈局的 Y 偏移量或 NULL 的位置。[輸出][允許-無]
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_max_length ----

gtk_entry_get_max_length
檢索文本輸入的最大允許長度。請參見gtk_entry_set_max_length（）。這相當於： 123[/語法] [語法]GtkEntryBuffer *buffer;buffer = gtk_entry_get_buffer （entry）;gtk_entry_buffer_get_max_length （buffer）;[/語法]
語法
參數
entry- 一GtkEntry
返回
允許的最大字元數in，如果沒有最大值，則為 0。GtkEntry
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_max_width_chars ----

gtk_entry_get_max_width_chars
檢索所需的最大條目寬度（以字元為單位）。請參見gtk_entry_set_max_width_chars（）。
語法
參數
entry- 一GtkEntry
返回
條目的最大寬度，以字元為單位
自 3.12 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_overwrite_mode ----

gtk_entry_get_overwrite_mode
獲取由 gtk_entry_set_overwrite_mode（） 設置的值。
語法
參數
entry- 一GtkEntry
返回
鍵入時文本是否被覆蓋。
自 2.14 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_placeholder_text ----

gtk_entry_get_placeholder_text
檢索當條目為空且未聚焦時將顯示的文本
語法
參數
entry- 一GtkEntry
返回
指向以字串形式存在的預留位置文字的指標。此字串指向小部件中內部分配的存儲，不得釋放、修改或存儲。
自 3.2 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_progress_fraction ----

gtk_entry_get_progress_fraction
返回已完成任務的當前部分。請參見gtk_entry_set_progress_fraction（）。
語法
參數
entry- 一GtkEntry
返回
從 0.0 到 1.0 的分數
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_progress_pulse_step ----

gtk_entry_get_progress_pulse_step
Retrieves the pulse step set with gtk_entry_set_progress_pulse_step().
Syntax
Parameters
entry  -  	a GtkEntry
Returns
a fraction from 0.0 to 1.0
Since 2.16
See Also
GtkEntry


------------ KeyGTK3gtk_entry_get_tabs ----

gtk_entry_get_tabs
獲取使用 gtk_entry_set_tabs（）， ifany 在條目上設置的定位停駐點。
語法
參數
entry- 一GtkEntry
返回
定位停駐點，如果未設置任何定位字元，則為 NULL。[無轉移]
自 3.10 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_text ----

gtk_entry_get_text
檢索條目構件的內容。另請參見 gtk_editable_get_chars（）。這相當於： 123[/語法] [語法]GtkEntryBuffer *buffer;buffer = gtk_entry_get_buffer （entry）;gtk_entry_buffer_get_text （buffer）;[/語法]
語法
參數
entry- 一GtkEntry
返回
指向小部件內容的指標作為字串。此字串指向小部件中的內部分配存儲，不得釋放、修改或存儲。
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_text_area ----

gtk_entry_get_text_area
獲取繪製條目文本的區域。在繪製回檔中的條目中繪製某些內容時，此函數很有用。如果未實現該條目，text_area將用零填充。另請參見 gtk_entry_get_icon_area（）。
語法
參數
entry- 一GtkEntry
text_area- 返回文本區域的位置。[輸出]
自 3.0 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_text_length ----

gtk_entry_get_text_length
檢索文本輸入的當前長度。這相當於： 123[/語法] [語法]GtkEntryBuffer *buffer;buffer = gtk_entry_get_buffer （entry）;gtk_entry_buffer_get_length （buffer）;[/語法]
語法
參數
entry- 一GtkEntry
返回
當前字元數，如果沒有，則為 0。GtkEntry
自 2.14 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_visibility ----

gtk_entry_get_visibility
檢索條目中的文本是否可見。Seegtk_entry_set_visibility（）.
語法
參數
entry- 一GtkEntry
返回
如果文本當前可見，則為 TRUE
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_get_width_chars ----

gtk_entry_get_width_chars
Gets the value set by gtk_entry_set_width_chars().
Syntax
Parameters
entry  -  	a GtkEntry
Returns
number of chars to request space for, or negative if unset
See Also
GtkEntry


------------ KeyGTK3gtk_entry_im_context_filter_press ----

gtk_entry_im_context_filter_keypress
gtk_entry_im_context_filter_keypress?()
允許輸入法在內部處理按鍵和釋放事件。如果此函數返回 TRUE，則不應對此關鍵事件執行進一步處理。Seegtk_im_context_filter_keypress（）.請注意，在重寫金鑰事件處理時，您需要從處理常式調用此函數。當您需要在 輸入法和 的默認鍵事件處理之間插入自己的鍵處理時，需要這樣做。有關使用示例，請參見 gtk_text_view_reset_im_context（）。GtkEntryGtkEntry
語法
參數
entry- 一GtkEntry
event- 關鍵事件。[類型 Gdk.EventKey]
返回
如果輸入法處理鍵事件，則為 TRUE。
2.22 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_layout_index_to_text_index ----

gtk_entry_layout_index_to_text_index
從條目內容中的位置（由 gtk_entry_get_text（）返回）轉換為條目中的位置（由 gtk_entry_get_layout（） 返回），文本通過 pango_layout_get_text（）） 檢索）。PangoLayout
語法
參數
entry- 一GtkEntry
layout_index- 將位元組索引放入條目佈局文本
返回
輸入內容的位元組索引
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_new ----

gtk_entry_new
創建新條目。
返回
一個新的.GtkEntry
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_new_with_buffer ----

gtk_entry_new_with_buffer
使用指定的文本緩衝區創建新條目。
語法
參數
buffer- 用於新 .GtkEntry
返回
一個新的GtkEntry
自 2.18 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_progress_pulse ----

gtk_entry_progress_pulse
表示取得了一些進展，但您不知道取得了多少進展。使條目的進度指示器進入“活動模式”，其中塊來回反彈。每次調用togtk_entry_progress_pulse（）都會導致塊移動一點點（每個脈衝的移動量bygtk_entry_set_progress_pulse_step（））確定）。
語法
參數
entry- 一GtkEntry
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_reset_im_context ----

gtk_entry_reset_im_context
如果需要，重置條目的輸入法上下文。在修改緩衝區會混淆正在進行的輸入法行為的情況下，這可能是必要的。
語法
參數
entry- 一GtkEntry
2.22 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_activates_default ----

gtk_entry_set_activates_default
如果設置為 TRUE，則在條目中按 Enter 鍵將啟動包含該條目的窗口的預設小路。這通常意味著包含該條目的對話方塊將關閉，因為預設小道通常是對話方塊按鈕之一。（對於專家：如果設置為 TRUE，則條目在包含該條目的窗口上callsgtk_window_activate_default（） 在信號的預設處理常式中。?activate?
語法
參數
entry- 一GtkEntry
setting- TRUE 在 Enter 按鍵時啟動視窗的預設小部件
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_alignment ----

gtk_entry_set_alignment
設置條目內容的對齊方式。當顯示的文本短於條目的寬度時，這將控制內容的水準定位。
語法
參數
entry- 一GtkEntry
xalign- 水準對齊，從 0（左）到 1（右）。針對 RTL 佈局反轉
2.4 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_attributes ----

gtk_entry_set_attributes
設置 ;清單中的屬性將應用于條目文本。PangoAttrList
語法
參數
entry- 一GtkEntry
attrs- 一PangoAttrList
3.6 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_buffer ----

gtk_entry_set_buffer
設置保存文本的物件是小部件。GtkEntryBuffer
語法
參數
entry- 一GtkEntry
buffer- 一GtkEntryBuffer
自 2.18 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_completion ----

gtk_entry_set_completion
Sets completion to be the auxiliary completion object to use with entry.All further configuration of the completion mechanism is done oncompletion using the  API. Completion is disabled ifcompletion is set to NULL.GtkEntryCompletion
Syntax
Parameters
entry  -  	A GtkEntry
completion  -  	 The  or NULL. [allow-none]GtkEntryCompletion
Since 2.4
See Also
GtkEntry


------------ KeyGTK3gtk_entry_set_cursor_hadjustment ----

gtk_entry_set_cursor_hadjustment
將調整與條目中的游標位置掛鉤，以便在移動游標時滾動調整以顯示該位置。有關獲取調整的典型方法，請參閱 gtk_scrolled_window_get_hadjustment（）。調整必須以圖元單位為單位，並且與條目處於同一坐標系中。
語法
參數
entry- 一GtkEntry
adjustment- 當游標移動時應進行調整的調整，或 NULL
自 2.12 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_has_frame ----

gtk_entry_set_has_frame
設置條目周圍是否有斜角框架。
語法
參數
entry- 一GtkEntry
setting- 新值
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_activatable ----

gtk_entry_set_icon_activatable
設置圖示是否可啟動。
語法
參數
entry- 一GtkEntry
icon_pos- 圖示位置
activatable- 如果圖示應該是可啟動的，則為 TRUE
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_drag_source ----

gtk_entry_set_icon_drag_source
在給定位置設置圖示，以便 GTK+ 在使用者按一下並拖動圖示時啟動拖動操作。要處理拖動操作，您需要連接到通常（或可能）的信號，並使用gtk_entry_get_current_icon_drag_source（）inyy您的信號處理常式來查明拖動是否從圖示開始。預設情況下，GTK+ 使用圖示作為拖動圖示。您可以使用信號設置其他圖示。請注意，您必須使用 g_signal_connect_after（） 來確保信號處理常式在預設處理常式之後執行。?drag-data-get??drag-data-delete??drag-begin?
語法
參數
entry- 一GtkEntry
icon_pos- 圖示位置
target_list- 可以提供資料的目標（資料格式）
actions- 允許的拖動操作的位元遮罩
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_from_gicon ----

gtk_entry_set_icon_from_gicon
設置條目中顯示的圖示位於當前圖示主題的指定位置。如果圖示未知，則“損壞的圖像？圖示將顯示為不規則。如果 icon 為 NULL，則指定位置不會顯示任何圖示。
語法
參數
entry- 一GtkEntry
icon_pos- 設置圖示的位置
icon- 要設置的圖示，或 NULL。[允許-無]
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_from_icon_name ----

gtk_entry_set_icon_from_icon_name
設置條目中顯示的圖示位於當前圖示主題的指定位置。如果圖示名稱未知，則“損壞的圖像？圖示將顯示為不規則。如果icon_name為 NULL，則指定位置不會顯示任何圖示。
語法
參數
entry- 一GtkEntry
icon_pos- 設置圖示的位置
icon_name- 圖示名稱，或 NULL。[允許-無]
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_from_pixbuf ----

gtk_entry_set_icon_from_pixbuf
使用圖元插頁設置在指定位置顯示的圖示。如果 pixbuf 為 NULL，則指定位置不會顯示任何圖示。
語法
參數
entry- 一GtkEntry
icon_pos- 圖示位置
pixbuf- A 或空值。[允許-無]GdkPixbuf
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_from_stock ----

gtk_entry_set_icon_from_stock
gtk_entry_set_icon_from_stock自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_entry_set_icon_from_icon_name（）。設置條目中顯示的圖示，該圖示位於庫存圖像的指定位置。如果stock_id為 NULL，則指定位置不會顯示任何圖示。
語法
參數
entry- 一GtkEntry
icon_pos- 圖示位置
stock_id- 庫存物料的名稱，或 NULL。[允許-無]
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_sensitive ----

gtk_entry_set_icon_sensitive
設置指定圖示的敏感度。
語法
參數
entry- 一GtkEntry
icon_pos- 圖示位置
sensitive- 指定圖示是應顯示為敏感還是不敏感
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_tooltip_markup ----

gtk_entry_set_icon_tooltip_markup
將工具提示設置為指定位置處圖示的工具提示的內容。工具提示假定使用 Pango 文本標記語言進行標記。對工具提示使用 NULL 可刪除現有工具提示。另請參見 gtk_widget_set_tooltip_markup（） 和 gtk_entry_set_icon_tooltip_text（）。
語法
參數
entry- 一GtkEntry
icon_pos- 圖示位置
tooltip- 圖示的工具提示的內容，或 NULL。[允許-無]
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_tooltip_text ----

gtk_entry_set_icon_tooltip_text
將工具提示設置為指定位置處的圖示的工具提示的內容。對工具提示使用 NULL 可刪除現有工具提示。另請參見 gtk_widget_set_tooltip_text（） 和 gtk_entry_set_icon_tooltip_markup（）。
語法
參數
entry- 一GtkEntry
icon_pos- 圖示位置
tooltip- 圖示的工具提示的內容，或 NULL。[允許-無]
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_inner_border ----

gtk_entry_set_inner_border
gtk_entry_set_inner_border自 3.4 版起已棄用，不應在新編寫的代碼中使用。使用標準邊框和填充 CSS 屬性（通過和 ）等物件使用此函數設置的值將被 忽略。將 entry 的內部邊界屬性設置為 border，或者在 NULLis 通過時清除它。內邊框是條目文本周圍的區域，但位於其框架的旁邊。如果設置，此屬性將覆蓋內部邊框樣式屬性。當您想要在畫布或清單構件中對某些文本進行位置編輯時，覆蓋樣式提供的邊框非常有用，其中條目的圖元精確定位很重要。GtkStyleContextGtkCssProviderGtkEntry
語法
參數
entry- 一GtkEntry
border- a 或 NULL。[允許-無]GtkBorder
自 2.10 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_input_hints ----

gtk_entry_set_input_hints
設置屬性，該屬性允許輸入方法微調其行為。?input-hints?
語法
參數
entry- 一GtkEntry
hints- 提示
3.6 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_input_purpose ----

gtk_entry_set_input_purpose
設置螢幕鍵盤和其他輸入方法可用于調整其行為的屬性。?input-purpose?
語法
參數
entry- 一GtkEntry
purpose- 目的
3.6 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_invisible_char ----

gtk_entry_set_invisible_char
設置要用來代替實際文本的字元 whengtk_entry_set_visibility（） 已調用，以將文本可見性設置為 FALSE。即，這是在密碼模式下使用的字元？向使用者顯示已鍵入的字元數。預設情況下，GTK+ 會選取當前字體中可用的最佳不可見字元。如果將不可見字元設置為0，則用戶將完全不會得到任何回饋;當他們鍵入時，螢幕上不會有文本。
語法
參數
entry- 一GtkEntry
ch- 一個統一碼字元
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_max_length ----

gtk_entry_set_max_length
設置構件內容允許的最大長度。如果當前內容的長度超過給定的長度，則它們將被截斷以適合。這相當於： 123[/語法] [語法]GtkEntryBuffer *buffer;buffer = gtk_entry_get_buffer （entry）;gtk_entry_buffer_set_max_length （buffer， max）;[/語法]
語法
參數
entry- 一GtkEntry
max- 條目的最大長度，或 0 表示無最大值。（條目的最大長度除外。傳入的值將被鉗制到 0-65536 範圍內。
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_max_width_chars ----

gtk_entry_set_max_width_chars
設置所需的最大寬度（以條目字元為單位）。
語法
參數
entry- 一GtkEntry
n_chars- 新所需的最大寬度，以字元為單位
自 3.12 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_overwrite_mode ----

gtk_entry_set_overwrite_mode
設置在 中鍵入 時是否覆蓋文本。GtkEntry
語法
參數
entry- 一GtkEntry
overwrite- 新值
自 2.14 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_placeholder_text ----

gtk_entry_set_placeholder_text
設置文本在空且未聚焦時在條目中顯示。這可用於提供 預期內容的視覺提示。請注意，由於預留位置文字在條目獲得焦點時會被刪除，因此，如果條目在視窗中給定初始焦點，則使用此功能會有點問題。有時，可以通過延遲初始焦點設置直到第一個關鍵事件到達來解決此問題。GtkEntry
語法
參數
entry- 一GtkEntry
text- 當條目清空未聚焦或 NULL 時要顯示的字串
自 3.2 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_progress_fraction ----

gtk_entry_set_progress_fraction
導致條目的進度指示器“填寫”橫條圖的給定分割。分數應介於 0.0 和 1.0 之間（包括 0.0 和 1.0）。
語法
參數
entry- 一GtkEntry
fraction- 已完成任務的一小部分
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_progress_pulse_step ----

gtk_entry_set_progress_pulse_step
設置總入口寬度的分數，以將每次調用的進度切換塊移動到 gtk_entry_progress_pulse（）。
語法
參數
entry- 一GtkEntry
fraction- 介於 0.0 和 1.0 之間的分數
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_tabs ----

gtk_entry_set_tabs
設置 ;陣列中的定位停駐點將應用于條目文本。PangoTabArray
語法
參數
entry- 一GtkEntry
tabs- 一PangoTabArray
自 3.10 起
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_set_text ----

gtk_entry_set_text
Sets the text in the widget to the givenvalue, replacing the current contents.See gtk_entry_buffer_set_text().
Syntax
Parameters
entry  -  	a GtkEntry
text  -  	the new text
See Also
GtkEntry


------------ KeyGTK3gtk_entry_set_visibility ----

gtk_entry_set_visibility
Sets whether the contents of the entry are visible or not.When visibility is set to FALSE, characters are displayedas the invisible char, and will also appear that way whenthe text in the entry widget is copied elsewhere.By default, GTK+ picks the best invisible character availablein the current font, but it can be changed withgtk_entry_set_invisible_char().Note that you probably want to set to GTK_INPUT_PURPOSE_PASSWORD or GTK_INPUT_PURPOSE_PIN toinform input methods about the purpose of this entry,in addition to setting visibility to FALSE.?input-purpose?
Syntax
Parameters
entry  -  	a GtkEntry
visible  -  	TRUE if the contents of the entry are displayedas plaintext
See Also
GtkEntry


------------ KeyGTK3gtk_entry_set_width_chars ----

gtk_entry_set_width_chars
將條目的大小請求更改為n_chars個字元的正確大小。請注意，它改變了大小請求，大小仍然會受到您將小部件打包到容器中的方式的影響。如果 n_chars 為 -1，則 thesize 將恢復為默認條目大小。
語法
參數
entry- 一GtkEntry
n_chars- 以字元為單位的寬度
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_text_index_to_layout_index ----

gtk_entry_text_index_to_layout_index
從條目中的位置（bygtk_entry_get_layout（））返回）轉換為條目內容中的位置（由 gtk_entry_get_text（）） 返回）。PangoLayout
語法
參數
entry- 一GtkEntry
text_index- 輸入內容的位元組索引
返回
輸入佈局文本的位元組索引
另請參見
GtkEntry


------------ KeyGTK3gtk_entry_unset_invisible_char ----

gtk_entry_unset_invisible_char
取消設置先前設置為 withgtk_entry_set_invisible_char（） 的不可見字元。以便再次使用預設的不可見字元。
語法
參數
entry- 一GtkEntry
2.16 起
另請參見
GtkEntry


------------ KeyGTK3gtk_enumerate_printers ----

gtk_enumerate_printers
調用所有 的函數。如果 func 返回 TRUE，則停止枚舉。GtkPrinters
語法
參數
func- 為每個印表機調用一個函數
data- 使用者資料傳遞給函數
destroy- 不再需要 data 時調用的函數
wait- 如果為 TRUE，則在遞迴主迴圈中等待，直到枚舉出所有印表機;否則提前返回
自 2.1 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_events_pending ----

gtk_events_pending
檢查是否有任何事件處於掛起狀態。這可用于更新UI並調用超時等，同時執行一些時間密集型計算。
在長時間計算
期間更新 UI 123456[/語法] [語法]// 計算正在進行中...而 （gtk_events_pending （）） gtk_main_iteration （）;// ...計算繼續[/語法]
返回
如果有任何事件處於掛起狀態，則為 TRUE，否則為 FALSE
另請參見
gtk3-General


------------ KeyGTK3gtk_event_box_get_above_child ----

gtk_event_box_get_above_child
返回事件框視窗是位於其子視窗的上方還是下方。有關詳細資訊，請參見 gtk_event_box_set_above_child（）。
語法
參數
event_box- 一GtkEventBox
返回
如果事件框視窗位於其子視窗的視窗上方，則為 TRUE
2.4 起
另請參見
GtkEventBox


------------ KeyGTK3gtk_event_box_get_visible_window ----

gtk_event_box_get_visible_window
返回事件框是否具有可見窗口。有關詳細資訊，請參見 gtk_event_box_set_visible_window（）。
語法
參數
event_box- 一GtkEventBox
返回
如果事件框視窗可見，則為 TRUE
自 2.
另請參見
GtkEventBox


------------ KeyGTK3gtk_event_box_new ----

gtk_event_box_new
創建新的 .GtkEventBox
返回
一個新的GtkEventBox
另請參見
GtkEventBox


------------ KeyGTK3gtk_event_box_set_above_child ----

gtk_event_box_set_above_child
設置事件框視窗是否位於其子視窗的上方，而不是位於其下方。如果視窗位於上方，則事件框中的所有事件將轉到事件框。如果視窗位於下方，則子小部件視窗中的事件將首先到達該小部件，然後到達其父級。預設設置是將視窗保留在子項下方。
語法
參數
event_box- 一GtkEventBox
above_child- 如果事件框視窗位於其子視窗上方，則為 TRUE
2.4 起
另請參見
GtkEventBox


------------ KeyGTK3gtk_event_box_set_visible_window ----

gtk_event_box_set_visible_window
設置事件框是使用可見還是不可見子視窗。預設設置是使用可見視窗。在不可見的窗口事件框中，事件框創建的視窗是GDK_INPUT_ONLY視窗，這意味著它是不可見的，僅用於接收事件。可見視窗事件框創建一個可見（GDK_INPUT_OUTPUT）視窗，該視窗充當事件框中包含的所有構件的父視窗。如果您只想捕獲事件，通常應該使事件框不可見。創建可見視窗可能會導致對使用者可見的偽影，特別是如果使用者使用具有漸變或圖元貼圖的主題。創建非僅輸入事件框的主要原因是，如果要將背景設置為其他顏色或在其上繪製。對於在子事件下方顯示其視窗的不可見事件框，存在一個意外問題。（請參閱gtk_event_box_set_above_child（）。）由於僅輸入視窗不是事件框的後代小部件創建的任何視窗的祖先視窗，因此這些視窗上的事件不會由視窗系統傳播，而僅由 GTK+ 傳播。這樣做的實際效果是，如果事件不在後代窗口的事件遮罩中（請參閱gtk_widget_add_events（）），則事件框不會接收該事件。對於可見事件框不會出現此問題，因為在這種情況下，事件框視窗實際上是上級視窗的祖先，而不僅僅是在螢幕上的同一位置。
語法
參數
event_box- 一GtkEventBox
visible_window- TRUE使事件框具有可見窗口
2.4 起
另請參見
GtkEventBox


------------ KeyGTK3gtk_expander_get_expanded ----

gtk_expander_get_expanded
查詢 a 並返回其當前狀態。返回 TRUE 如果子構件顯示。請參見gtk_expander_set_expanded（）。GtkExpander
語法
參數
expander- 一GtkExpander
返回
擴展器的當前狀態
2.4 起
另請參見
GtkExpander


------------ KeyGTK3gtk_expander_get_label ----

gtk_expander_get_label
從標籤構件中提取文本，包括指示助記符和 Pango 標記的任何嵌入式底線，如 bygtk_expander_set_label（） 設置的那樣。如果尚未設置標籤文本，則返回值將為 NULL。如果您使用gtk_button_new（） 創建用作容器的無窮按鈕，則會出現這種情況。請注意，此函數在 2.14 之前的版本中的行為有所不同，用於返回去掉指示助記符和 Pango 標記的嵌入底線的標籤文本。通過直接從標籤小角獲取標籤文本，可以避免此問題。
語法
參數
expander- 一GtkExpander
返回
標籤微件的文本。此字串歸小部件所有，不得修改或釋放。
2.4 起
另請參見
GtkExpander


------------ KeyGTK3gtk_expander_get_label_fill ----

gtk_expander_get_label_fill
返回標籤微件是否將填充分配給擴展器的所有可用佇列空間。
語法
參數
expander- 一GtkExpander
返回
如果標籤微件將填充所有可用的水準空間，則為 TRUE
2.22 起
另請參見
GtkExpander


------------ KeyGTK3gtk_expander_get_label_widget ----

gtk_expander_get_label_widget
檢索框架的標籤構件。Seegtk_expander_set_label_widget（）.
語法
參數
expander- 一GtkExpander
返回
標籤小部件，如果沒有，則為 NULL。[無轉移]
2.4 起
另請參見
GtkExpander


------------ KeyGTK3gtk_expander_get_resize_toplevel ----

gtk_expander_get_resize_toplevel
返回擴展器是否將調整包含擴展器的頂級構件的大小，以便在調整大小和折疊時包含擴展器。
語法
參數
expander- 一GtkExpander
返回
“調整大小”到“高級”？設置。
自 3.
另請參見
GtkExpander


------------ KeyGTK3gtk_expander_get_spacing ----

gtk_expander_get_spacing
獲取由 gtk_expander_set_spacing（） 設置的值。
語法
參數
expander- 一GtkExpander
返回
擴展器和子項之間的間距
2.4 起
另請參見
GtkExpander


------------ KeyGTK3gtk_expander_get_use_markup ----

gtk_expander_get_use_markup
返回標籤的文本是否被解釋為使用 Pango 文本標記語言進行標記。請參見gtk_expander_set_use_markup（）。
語法
參數
expander- 一GtkExpander
返回
如果將解析標籤的文本以進行標記，則為 TRUE
2.4 起
另請參見
GtkExpander


------------ KeyGTK3gtk_expander_get_use_underline ----

gtk_expander_get_use_underline
返回擴展器標籤中的嵌入式底線是否指示助記符。請參見gtk_expander_set_use_underline（）。
語法
參數
expander- 一GtkExpander
返回
如果擴展標籤中嵌入的底線指示助記符快速鍵，則為 TRUE
2.4 起
另請參見
GtkExpander


------------ KeyGTK3gtk_expander_new ----

gtk_expander_new
使用標籤作為標籤文本創建新的擴展器。
語法
參數
label- 標籤文本
返回
一個新的小部件。GtkExpander
2.4 起
另請參見
GtkExpander


------------ KeyGTK3gtk_expander_new_with_mnemonic ----

gtk_expander_new_with_mnemonic
使用標籤作為標籤文本創建新的擴展器。如果標籤中的字元前面帶有底線，則帶有底線。如果需要在標籤中使用文字底線，請使用 ？__？（兩個下分）。第一個帶底線的字元表示稱為助記符的鍵盤增讀器。按 Alt 和該鍵可啟動按鈕。
語法
參數
label- 標籤文本，在助記符前面帶有底線。[允許-無]
返回
一個新的小部件。GtkExpander
2.4 起
另請參見
GtkExpander


------------ KeyGTK3gtk_expander_set_expanded ----

gtk_expander_set_expanded
設置擴展器的狀態。如果希望顯示子構件，則設置為 TRUE;如果希望隱藏子構件，則設置為 FALSE。
語法
參數
expander- 一GtkExpander
expanded- 子小部件是否顯示
2.4 起
另請參見
GtkExpander


------------ KeyGTK3gtk_expander_set_label ----

gtk_expander_set_label
設置要添加標籤的擴展器的標籤文本。這還將清除以前設置的任何標籤。
語法
參數
expander- 一GtkExpander
label- 一個字串。[允許-無]
2.4 起
另請參見
GtkExpander


------------ KeyGTK3gtk_expander_set_label_fill ----

gtk_expander_set_label_fill
設置標籤微件是否應填充分配給擴展器的所有可用佇列空間。
語法
參數
expander- 一GtkExpander
label_fill- TRUE，如果標籤應填充所有可用的水準空間
2.22 起
另請參見
GtkExpander


------------ KeyGTK3gtk_expander_set_label_widget ----

gtk_expander_set_label_widget
設置擴展器的標籤微件。這是將嵌入在擴展器箭頭旁邊的小部件。
語法
參數
expander- 一GtkExpander
label_widget- 新的標籤小部件。[允許-無]
2.4 起
另請參見
GtkExpander


------------ KeyGTK3gtk_expander_set_resize_toplevel ----

gtk_expander_set_resize_toplevel
設置擴展器是否將調整頂級構件的大小，以便在調整擴展器大小和折疊時包含擴展器。
語法
參數
expander- 一GtkExpander
resize_toplevel- 是否調整房間大小
自 3.2 起
另請參見
GtkExpander


------------ KeyGTK3gtk_expander_set_spacing ----

gtk_expander_set_spacing
設置擴展器的間距欄位，該欄位是要放置在擴展器和子項之間的圖元數。
語法
參數
expander- 一GtkExpander
spacing- 擴展器和子項之間的距離（以圖元為單位）
2.4 起
另請參見
GtkExpander


------------ KeyGTK3gtk_expander_set_use_markup ----

gtk_expander_set_use_markup
設置標籤的文本是否包含 Pango 的文本標記語言中的標記。請參見gtk_label_set_markup（）。
語法
參數
expander- 一GtkExpander
use_markup- TRUE，如果標籤的文本應該被解析為標記
2.4 起
另請參見
GtkExpander


------------ KeyGTK3gtk_expander_set_use_underline ----

gtk_expander_set_use_underline
如果為 true，則擴展器標籤文本中的底線指示應將下一個字元用於助記符快速鍵。
語法
參數
expander- 一GtkExpander
use_underline- 如果文本中的底線表示助記符，則為 TRUE
2.4 起
另請參見
GtkExpander


------------ KeyGTK3gtk_false ----

gtk_false
Analogical to gtk_true(), this function does nothingbut always returns FALSE.
Returns
FALSE
See Also
gtk3-General


------------ KeyGTK3gtk_file_chooser_add_filter ----

gtk_file_chooser_add_filter
將篩選器添加到用戶可以在其之間進行選擇的篩選器列表中。選擇篩選器後，僅顯示由該篩選器傳遞的檔。請注意，選擇器擁有篩選器的所有權，因此，如果要保留引用，則必須引用並接收器它。
語法
參數
chooser- 一GtkFileChooser
filter- 一GtkFileFilter
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_add_shortcut_folder ----

gtk_file_chooser_add_shortcut_folder
添加要在檔選取器中與快捷方式資料夾一起顯示的資料夾。請注意，快捷方式資料夾不會被保存，因為它們是由應用程式提供的。例如，您可以使用它來添加一個？/usr/share/mydrawprogram/Clipart？資料夾到卷列表。
語法
參數
chooser- 一GtkFileChooser
folder- 要添加的資料夾的檔案名。
error- 存儲錯誤的位置，或空。[允許-無]
返回
如果可以成功添加資料夾，則為 TRUE，否則為 FALSEotherwise。在後一種情況下，將根據需要設置錯誤。
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_add_shortcut_folder_uri ----

gtk_file_chooser_add_shortcut_folder_uri
添加要與檔選擇器中的快捷方式資料夾一起顯示的資料夾 URI。請注意，快捷方式資料夾不會被保存，因為它們是由應用程式提供的。例如，您可以使用它來添加一個？file：///usr/share/mydrawprogram/Clipart？資料夾到卷列表。
語法
參數
chooser- 一GtkFileChooser
uri- 要添加的資料夾的URI
error- 存儲錯誤的位置，或空。[允許-無]
返回
如果可以成功添加資料夾，則為 TRUE，否則為 FALSEotherwise。在後一種情況下，將根據需要設置錯誤。
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_button_get_focus_on_click ----

gtk_file_chooser_button_get_focus_on_click
返回按鈕在用滑鼠按一下時是否抓住焦點。請參見gtk_file_chooser_button_set_focus_on_click（）。
語法
參數
button- 一GtkFileChooserButton
返回
如果按鈕在用滑鼠按一下時抓住焦點，則為 TRUE。
自 2.10 起
另請參見
GtkFileChooserButton


------------ KeyGTK3gtk_file_chooser_button_get_title ----

gtk_file_chooser_button_get_title
檢索按鈕使用的流覽對話方塊的標題。返回的值不應被修改或釋放。
語法
參數
button- 要檢查的按鈕小部件。
返回
指向流覽對話方塊標題的指標。
自 2.6 起
另請參見
GtkFileChooserButton


------------ KeyGTK3gtk_file_chooser_button_get_width_chars ----

gtk_file_chooser_button_get_width_chars
檢索按鈕構件的條目和/或標籤的寬度（以字元為單位）。
語法
參數
button- 要檢查的按鈕小部件。
返回
按鈕將用於調整自身大小的整數寬度（以字元為單位）。
自 2.6 起
另請參見
GtkFileChooserButton


------------ KeyGTK3gtk_file_chooser_button_new ----

gtk_file_chooser_button_new
創建新的檔選擇按鈕構件。
語法
參數
title- 流覽對話方塊的標題。
action- 小部件的打開模式。
返回
一個新的按鈕小部件。
自 2.6 起
另請參見
GtkFileChooserButton


------------ KeyGTK3gtk_file_chooser_button_new_with_dialog ----

gtk_file_chooser_button_new_with_dialog
創建一個使用對話方塊作為其檔選取視窗的小部件。請注意，對話方塊必須是實現介面的（或子類），並且不得haveGTK_DIALOG_DESTROY_WITH_PARENT集。另請注意，對話方塊需要添加其確認按鈕，並添加回應GTK_RESPONSE_ACCEPT或GTK_RESPONSE_OK，以便按鈕接管對話方塊中選擇的文件。GtkFileChooserButtonGtkDialogGtkFileChooser
語法
參數
dialog- 用作對話方塊的小部件
返回
一個新的按鈕小部件。
自 2.6 起
另請參見
GtkFileChooserButton


------------ KeyGTK3gtk_file_chooser_button_set_focus_on_click ----

gtk_file_chooser_button_set_focus_on_click
設置按鈕在用滑鼠按一下時是否將獲取焦點。使滑鼠按一下不抓取焦點在您不希望將鍵盤焦點從應用程式的主要區域中刪除的位置非常有用。
語法
參數
button- 一GtkFileChooserButton
focus_on_click- 按鈕在用滑鼠點擊時是否抓住焦點
自 2.1 起
另請參見
GtkFileChooserButton


------------ KeyGTK3gtk_file_chooser_button_set_title ----

gtk_file_chooser_button_set_title
修改按鈕使用的流覽對話方塊的標題。
語法
參數
button- 按鈕小部件修改。
title- 新的流覽對話方塊標題。
自 2.6 起
另請參見
GtkFileChooserButton


------------ KeyGTK3gtk_file_chooser_button_set_width_chars ----

gtk_file_chooser_button_set_width_chars
設置按鈕將用於n_chars的寬度（以字元為單位）。
語法
參數
button- 要檢查的按鈕小部件。
n_chars- 新的寬度，以字元為單位。
自 2.6 起
另請參見
GtkFileChooserButton


------------ KeyGTK3gtk_file_chooser_dialog_new ----

gtk_file_chooser_dialog_new
創建新的 .此函數類似於 togtk_dialog_new_with_buttons（）。GtkFileChooserDialog
語法
參數
title- 對話方塊的標題，或 NULL。[允許-無]
parent- 對話方塊的瞬態父級，或 NULL。[允許-無]
action- 打開或保存對話方塊的模式
first_button_text- 股票ID或文本去在第一個按鈕，或NULL。[允許-無]
...- 第一個按鈕的回應 ID，然後是其他（按鈕、id）對，以 NULL 結尾
返回
一個新的GtkFileChooserDialog
自 2.
另請參見
GtkFileChooserDialog


------------ KeyGTK3GTK_FILE_CHOOSER_ERROR ----

GTK_FILE_CHOOSER_ERROR
GTK_FILE_CHOOSER_ERROR
用於獲取錯誤的誇克。GErrorGtkFileChooser
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_action ----

gtk_file_chooser_get_action
獲取檔選擇器正在執行的操作的類型;seegtk_file_chooser_set_action（）.
語法
參數
chooser- 一GtkFileChooser
返回
檔選擇器正在執行的操作
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_create_folders ----

gtk_file_chooser_get_create_folders
獲取檔選擇器是否提供創建新資料夾。請參見gtk_file_chooser_set_create_folders（）。
語法
參數
chooser- 一GtkFileChooser
返回
如果應顯示“新建資料夾”按鈕，則為 TRUE。
自 2.18 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_current_folder ----

gtk_file_chooser_get_current_folder
獲取選擇器的當前資料夾作為本地檔案名。請參見gtk_file_chooser_set_current_folder（）。請注意，這是檔選擇器當前顯示的資料夾（例如“/home/username/Documents”），如果選擇器inGTK_FILE_CHOOSER_ACTION_SELECT_FOLDER模式（例如“/home/username/Documents/selected-folder/”），則與當前選擇的資料夾不同。要在該模式下獲取當前選定的資料夾，請使用 gtk_file_chooser_get_uri（） 作為獲取所選內容的常用方法。
語法
參數
chooser- 一GtkFileChooser
返回
當前資料夾的完整路徑，如果當前路徑無法表示為本地檔案名，則為 NULL。使用g_free（） 免費。如果檔選擇器無法載入從中請求的最後一個資料夾，則此函數也將返回NULL;例如，對於不存在的資料夾上的callinggtk_file_chooser_set_current_folder（）也是如此。[類型檔案名]
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_current_folder_file ----

gtk_file_chooser_get_current_folder_file
獲取選擇器的當前資料夾為 。請參見gtk_file_chooser_get_current_folder_uri（）。GFile
語法
參數
chooser- 一GtkFileChooser
返回
當前資料夾的 。[轉移完整]GFile
自 2.14 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_current_folder_uri ----

gtk_file_chooser_get_current_folder_uri
獲取選擇器的當前資料夾作為 URI。請參見gtk_file_chooser_set_current_folder_uri（）。請注意，這是檔選擇器當前顯示的資料夾（例如“file:///home/username/Documents”），如果選擇器inGTK_FILE_CHOOSER_ACTION_SELECT_FOLDER模式（例如“file:///home/username/Documents/selected-folder/”），則與當前選擇的資料夾不同。要在該模式下獲取當前選定的資料夾，請使用 gtk_file_chooser_get_uri（） 作為獲取所選內容的常用方法。
語法
參數
chooser- 一GtkFileChooser
返回
當前資料夾的 URI。使用g_free（） 免費。如果檔選擇器無法載入從中請求的最後一個資料夾，則此函數也將返回NULL;例如，對於不存在的資料夾上的callinggtk_file_chooser_set_current_folder_uri（）也是如此。
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_current_name ----

gtk_file_chooser_get_current_name
獲取檔選擇器中的當前名稱，如使用者在 的文本條目中輸入的名稱一樣？名字？。這用於保存對話方塊，以便在文件本身尚不存在時獲取當前鍵入的檔案名。例如，一個應用程式將自訂的額外小部件添加到文件選擇器中，以用於 ？檔案格式？可能想要根據所選格式更改鍵入檔案名的副檔名，例如，從？。jpg？自？。png？.
語法
參數
chooser- 一GtkFileChooser
返回
來自檔選擇器的原始文本 ？名字？進入。釋放此withg_free（）。請注意，此字串不是完整的路徑名或 URI;它是條目的內容是什麼。另請注意，此字串是 inUTF-8 編碼，不一定是系統對檔案名的編碼。
自 3.10 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_do_overwrite_confirmation ----

gtk_file_chooser_get_do_overwrite_confirmation
查詢檔選擇器是否設置為在用戶鍵入已存在的檔案名時確認覆蓋。
語法
參數
chooser- 一GtkFileChooser
返回
如果檔選擇器將顯示確認對話方塊，則為 TRUE;否則為假。
自 2.8 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_extra_widget ----

gtk_file_chooser_get_extra_widget
獲取當前預覽小部件;seegtk_file_chooser_set_extra_widget（）.
語法
參數
chooser- 一GtkFileChooser
返回
當前的額外小部件，或 NULL。[無轉移]
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_file ----

gtk_file_chooser_get_file
Gets the  for the currently selected file inthe file selector. If multiple files are selected,one of the files will be returned at random.If the file chooser is in folder mode, this function returns the selectedfolder.GFile
Syntax
Parameters
chooser  -  	a GtkFileChooser
Returns
a selected . You own the returned file;use g_object_unref() to release it. [transfer full]GFile
Since 2.14
See Also
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_filename ----

gtk_file_chooser_get_filename
Gets the filename for the currently selected file inthe file selector. The filename is returned as an absolute path. Ifmultiple files are selected, one of the filenames will be returned atrandom.If the file chooser is in folder mode, this function returns the selectedfolder.
Syntax
Parameters
chooser  -  	a GtkFileChooser
Returns
The currently selected filename, or NULLif no file is selected, or the selected file can'tbe represented with a local filename. Free with g_free(). [type filename]
Since 2.4
See Also
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_filenames ----

gtk_file_chooser_get_filenames
Lists all the selected files and subfolders in the current folder ofchooser. The returned names are full absolute paths. If files in the currentfolder cannot be represented as local filenames they will be ignored. (Seegtk_file_chooser_get_uris())
Syntax
Parameters
chooser  -  	a GtkFileChooser
Returns
a containing the filenames of all selected files and subfolders inthe current folder. Free the returned list with g_slist_free(),and the filenames with g_free(). [element-type filename][transfer full]GSList
Since 2.4
See Also
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_files ----

gtk_file_chooser_get_files
列出 chooseras 的當前資料夾中所有選定的檔和子資料夾。內建函式，請參見gtk_file_chooser_get_uris（）。GFile
語法
參數
chooser- 一GtkFileChooser
返回
a 包含當前資料夾中每個選定檔和子資料夾的 a。釋放帶有 g_slist_free（） 的返回列表，並使用 g_object_unref（） 釋放檔。[元素類型 GFile][轉移完整]GSListGFile
自 2.14 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_filter ----

gtk_file_chooser_get_filter
Gets the current filter; see gtk_file_chooser_set_filter().
Syntax
Parameters
chooser  -  	a GtkFileChooser
Returns
the current filter, or NULL. [transfer none]
Since 2.4
See Also
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_local_only ----

gtk_file_chooser_get_local_only
獲取是否只能在檔選擇器中選擇本地檔。請參見gtk_file_chooser_set_local_only（）
語法
參數
chooser- 一GtkFileChooser
返回
如果只能選擇本地檔，則為 TRUE。
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_preview_file ----

gtk_file_chooser_get_preview_file
獲取應在自訂預覽中預覽的內建函式，請參見gtk_file_chooser_get_preview_uri（）。GFile
語法
參數
chooser- 一GtkFileChooser
返回
，用於預覽檔，如果未選擇任何檔，則為 NULL。使用 g_object_unref（） 免費。[轉移完整]GFile
自 2.14 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_preview_filename ----

gtk_file_chooser_get_preview_filename
獲取應在自訂預覽小道中預覽的檔案名。請參見 gtk_file_chooser_set_preview_widget（）。
語法
參數
chooser- 一GtkFileChooser
返回
要預覽的檔案名，如果未選擇任何檔，或者如果所選檔無法表示為本地檔案名，則為 NULL。使用g_free（） 免費。[類型檔案名]
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_preview_uri ----

gtk_file_chooser_get_preview_uri
獲取應在自訂預覽小樣中預覽的 URI。請參見 gtk_file_chooser_set_preview_widget（）。
語法
參數
chooser- 一GtkFileChooser
返回
要預覽的檔的 URI，如果未選擇任何檔，則為 NULL。使用g_free（） 免費。
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_preview_widget ----

gtk_file_chooser_get_preview_widget
獲取當前預覽小部件;seegtk_file_chooser_set_preview_widget（）.
語法
參數
chooser- 一GtkFileChooser
返回
當前預覽微件，或 NULL。[無轉移]
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_preview_widget_active ----

gtk_file_chooser_get_preview_widget_active
獲取是否應為當前檔案名顯示由 gtk_file_chooser_set_preview_widget（） 設置的預覽構件。Seegtk_file_chooser_set_preview_widget_active（）.
語法
參數
chooser- 一GtkFileChooser
返回
如果預覽微件對於當前檔案名處於活動狀態，則為 TRUE。
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_select_multiple ----

gtk_file_chooser_get_select_multiple
獲取是否可以在檔選擇器中選擇多個檔。請參見gtk_file_chooser_set_select_multiple（）。
語法
參數
chooser- 一GtkFileChooser
返回
如果可以選擇多個檔，則為 TRUE。
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_show_hidden ----

gtk_file_chooser_get_show_hidden
獲取隱藏檔和資料夾是否顯示在檔選擇器中。請參見 gtk_file_chooser_set_show_hidden（）。
語法
參數
chooser- 一GtkFileChooser
返回
如果顯示隱藏的檔和資料夾，則為 TRUE。
自 2.6 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_uri ----

gtk_file_chooser_get_uri
獲取文件選擇器中當前選定文件的 URI。如果選擇了多個檔，則將隨機返回其中一個檔案名。如果檔選擇器處於資料夾模式，則此函數返回所選資料夾。
語法
參數
chooser- 一GtkFileChooser
返回
當前選定的 URI 或 NULLif 無檔處於選中狀態。如果gtk_file_chooser_set_local_only（） 設置為 TRUE（預設值），則將為任何 FUSE 位置返回本地 URI。免費與g_free（）
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_uris ----

gtk_file_chooser_get_uris
列出當前資料夾中的所有選定檔和子資料夾。返回的名稱是完全絕對 URI。
語法
參數
chooser- 一GtkFileChooser
返回
a 包含當前資料夾中所有選定檔和子資料夾的 URI。釋放返回的 list，其中包含 g_slist_free（），檔案名帶有 g_free（）。[元素型 utf8][轉移完整]GSList
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_use_preview_label ----

gtk_file_chooser_get_use_preview_label
獲取是否應使用預覽檔的名稱繪製庫存標籤。請參見 gtk_file_chooser_set_use_preview_label（）。
語法
參數
chooser- 一GtkFileChooser
返回
如果檔選擇器設置為顯示帶有預覽檔案名稱的標籤，則為 TRUE，否則為 FALSE。
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_list_filters ----

gtk_file_chooser_list_filters
列出當前用戶可選擇的篩檢程式集;seegtk_file_chooser_add_filter（）， gtk_file_chooser_remove_filter（）.
語法
參數
chooser- 一GtkFileChooser
返回
a 包含當前用戶可選擇的篩檢程式集。清單的內容歸 GTK+ 所有，但當你完成它時，你必須用 g_slist_free（） 釋放 listitself。[元素類型 GtkFileFilter][轉移容器]GSList
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_list_shortcut_folders ----

gtk_file_chooser_list_shortcut_folders
查詢檔選取器中的快速鍵資料夾清單，如設置bygtk_file_chooser_add_shortcut_folder（）。
語法
參數
chooser- 一GtkFileChooser
返回
資料夾檔案名清單，如果沒有快捷方式資料夾，則為 NULL。釋放返回的g_slist_free（） 列表，檔案名withg_free（）。[元素類型檔案名][轉移完整]
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_list_shortcut_folder_uris ----

gtk_file_chooser_list_shortcut_folder_uris
查詢檔選取器中的快速鍵資料夾清單，如設置bygtk_file_chooser_add_shortcut_folder_uri（）。
語法
參數
chooser- 一GtkFileChooser
返回
資料夾 URI 的清單，如果沒有快捷方式資料夾，則為 NULL。使用 g_slist_free（） 釋放返回的列表，並使用 g_free（） 釋放 URI。[元素型 utf8][轉移完整]
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_remove_filter ----

gtk_file_chooser_remove_filter
從用戶可以在其之間進行選擇的篩選器列表中刪除篩選器。
語法
參數
chooser- 一GtkFileChooser
filter- 一GtkFileFilter
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_remove_shortcut_folder ----

gtk_file_chooser_remove_shortcut_folder
從檔選擇器的快捷方式資料夾清單中刪除資料夾。
語法
參數
chooser- 一GtkFileChooser
folder- 要刪除的資料夾的檔案名。[類型檔案名]
error- 存儲錯誤的位置，或空。[允許-無]
返回
如果操作成功，則為 TRUE，否則為 FALSE。在後一種情況下，將根據需要設置錯誤。另請參見：gtk_file_chooser_add_shortcut_folder（）
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_remove_shortcut_folder_uri ----

gtk_file_chooser_remove_shortcut_folder_uri
從檔選擇器的快捷方式資料夾清單中刪除資料夾 URI。
語法
參數
chooser- 一GtkFileChooser
uri- 要刪除的資料夾的URI
error- 存儲錯誤的位置，或空。[允許-無]
返回
如果操作成功，則為 TRUE，否則為 FALSE。在後一種情況下，將根據需要設置錯誤。另請參見：gtk_file_chooser_add_shortcut_folder_uri（）
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_select_all ----

gtk_file_chooser_select_all
選擇檔選取器的當前資料夾中的所有檔。
語法
參數
chooser- 一GtkFileChooser
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_select_file ----

gtk_file_chooser_select_file
選擇文件引用的文件。內建函式。See_gtk_file_chooser_select_uri（）.
語法
參數
chooser- 一GtkFileChooser
file- 要選擇的檔
error- 存儲錯誤的位置，或空。[允許-無]
返回
沒有用。
自 2.14 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_select_filename ----

gtk_file_chooser_select_filename
選擇檔案名。如果檔案名不在選擇器的當前資料夾中，則選擇器的當前資料夾將更改為包含檔案名的資料夾。
語法
參數
chooser- 一GtkFileChooser
filename- 要選擇的檔案名。[類型檔案名]
返回
沒有用。另請參見：gtk_file_chooser_set_filename（）
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_select_uri ----

gtk_file_chooser_select_uri
按 uri 選擇檔。如果 URI 未引用選擇器的當前資料夾中的 afile，則選擇器的當前資料夾將更改為包含檔案名的資料夾。
語法
參數
chooser- 一GtkFileChooser
uri- 要選擇的 URI
返回
沒有用。
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_action ----

gtk_file_chooser_set_action
設置選擇器正在執行的操作的類型;使用者介面已進行調整以適應所選操作。例如，如果操作isGTK_FILE_CHOOSER_ACTION_SAVE，則可能會顯示創建新資料夾的選項，但如果操作isGTK_FILE_CHOOSER_ACTION_OPEN，則不會顯示。
語法
參數
chooser- 一GtkFileChooser
action- 檔選擇器正在執行的操作
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_create_folders ----

gtk_file_chooser_set_create_folders
設置檔選擇器是否提供創建新資料夾。僅當操作未設置為GTK_FILE_CHOOSER_ACTION_OPEN時，這才相關。
語法
參數
chooser- 一GtkFileChooser
create_folders- 如果應顯示“新建資料夾”按鈕，則為 TRUE
自 2.18 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_current_folder ----

gtk_file_chooser_set_current_folder
從本地檔案名設置選擇器的當前資料夾。使用者將顯示當前資料夾的完整內容，以及用於導航到其他資料夾的使用者介面元素。通常，不應使用此功能。請參閱有關設置檔選擇器對話方塊的相關內容，瞭解其背後的基本原理。
語法
參數
chooser- 一GtkFileChooser
filename- 新的當前資料夾的完整路徑。[類型檔案名]
返回
沒有用。
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_current_folder_file ----

gtk_file_chooser_set_current_folder_file
從 中設置選擇器的當前資料夾。內建函式，請參見gtk_file_chooser_set_current_folder_uri（）。GFile
語法
參數
chooser- 一GtkFileChooser
file- 用於新資料夾GFile
error- 存儲錯誤的位置，或空。[允許-無]
返回
如果資料夾可以成功更改，則為 TRUE，否則為 FALSEotherwise。
自 2.14 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_current_folder_uri ----

gtk_file_chooser_set_current_folder_uri
從 URI 設置選擇器的當前資料夾。使用者將顯示當前資料夾的完整內容，以及用於導航到其他資料夾的使用者介面元素。通常，不應使用此功能。請參閱有關設置檔選擇器對話方塊的相關內容，瞭解其背後的基本原理。
語法
參數
chooser- 一GtkFileChooser
uri- 新當前資料夾的 URI
返回
如果資料夾可以成功更改，則為 TRUE，否則為 FALSEotherwise。
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_current_name ----

gtk_file_chooser_set_current_name
在檔選擇器中設置當前名稱，就像用戶輸入的名稱一樣。請注意，此處傳入的名稱是 UTF-8 字串，而不是檔案名。此函數旨在將此類用作 ？另存為...？對話。你可以通過 ？無題.doc？或對名稱的類似合適建議。如果要預先選擇特定的現有檔，則應改為usegtk_file_chooser_set_filename（） 或 gtk_file_chooser_set_uri（）。有關usinggtk_file_chooser_set_current_name（） 的示例，請參閱這些函數的文檔。
語法
參數
chooser- 一GtkFileChooser
name- 要使用的檔案名，作為 UTF-8 字串。[類型檔案名]
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_do_overwrite_confirmation ----

gtk_file_chooser_set_do_overwrite_confirmation
Sets whether a file chooser in GTK_FILE_CHOOSER_ACTION_SAVE mode will presenta confirmation dialog if the user types a file name that already exists.  Thisis FALSE by default.If set to TRUE, the chooser will emit the signal when appropriate.If all you need is the stock confirmation dialog, set this property to TRUE.You can override the way confirmation is done by actually handling the signal; please refer to its documentationfor the details.?confirm-overwrite??confirm-overwrite?
Syntax
Parameters
chooser  -  	a GtkFileChooser
do_overwrite_confirmation  -  	whether to confirm overwriting in save mode
Since 2.8
See Also
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_extra_widget ----

gtk_file_chooser_set_extra_widget
Sets an application-supplied widget to provide extra options to the user.
Syntax
Parameters
chooser  -  	a GtkFileChooser
extra_widget  -  	widget for extra options
Since 2.4
See Also
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_file ----

gtk_file_chooser_set_file
Sets file as the current filename for the file chooser, by changingto the file?s parent folder and actually selecting the file in list.  Ifthe chooser is in GTK_FILE_CHOOSER_ACTION_SAVE mode, the file?s base namewill also appear in the dialog?s file name entry.If the file name isn?t in the current folder of chooser, then the currentfolder of chooser will be changed to the folder containing filename. Thisis equivalent to a sequence of gtk_file_chooser_unselect_all() followed bygtk_file_chooser_select_filename().Note that the file must exist, or nothing will be done exceptfor the directory change.If you are implementing a save dialog,you should use this function if you already have a file name to which theuser may save; for example, when the user opens an existing file and thendoes Save As...  If you don?t havea file name already ? for example, if the user just created a newfile and is saving it for the first time, do not call this function.Instead, use something similar to this:                    1234567891011[/syntax]        [syntax]if (document_is_new)  {    // the user just created a new document    gtk_file_chooser_set_current_folder_file (chooser, default_file_for_saving);    gtk_file_chooser_set_current_name (chooser, "Untitled document");  }else  {    // the user edited an existing document    gtk_file_chooser_set_file (chooser, existing_file);  }[/syntax]
Syntax
Parameters
chooser  -  	a GtkFileChooser
file  -  	the  to set as currentGFile
error  -  	 location to store the error, or NULL to ignore errors. [allow-none]
Returns
Not useful.
Since 2.14
See Also
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_filename ----

gtk_file_chooser_set_filename
將檔案名設置為檔選擇器的當前檔案名，方法是更改為檔的父資料夾並實際選擇列表中的文件;所有其他檔都將被取消選中。如果選擇器inGTK_FILE_CHOOSER_ACTION_SAVE模式，則檔的基本名稱也將出現在對話方塊的檔案名條目中。請注意，該檔必須存在，否則除了目錄更改之外，不會執行任何操作。僅當實現已具有用戶可以保存的檔案名的 savedialog 時，才應使用此函數。例如，當用戶打開現有檔並執行“另存為...”時...以保存副本或修改後的版本。如果您還沒有檔案名？例如，如果用戶剛剛創建了一個新檔並首次保存它，請不要調用此函數。相反，請使用類似於以下內容的內容：12345678910[/語法] [語法]if （document_is_new） { // 用戶剛剛gtk_file_chooser_set_current_name創建了一個新文檔（選擇器，“無標題文檔”）; }else { // 用戶編輯了現有文檔gtk_file_chooser_set_filename（選擇器，existing_filename）;}[/語法]
在第一種情況下，檔選擇器將向用戶提供有用的建議，例如保存新檔的位置。在第二種情況下，檔的現有位置是已知的，因此檔選擇器將使用它。
語法
參數
chooser- 一GtkFileChooser
filename- 要設置為當前檔案名的檔案名。[類型檔案名]
返回
沒有用。
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_filter ----

gtk_file_chooser_set_filter
設置當前濾波器;僅顯示通過篩檢程式的檔。如果用戶可選擇的篩選器列表不為空，則該篩選器應為該列表中的篩選器之一。如果要限制顯示的檔集而不讓用戶更改檔集，則在列表為空時設置當前篩選器非常有用。
語法
參數
chooser- 一GtkFileChooser
filter- 一GtkFileFilter
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_local_only ----

gtk_file_chooser_set_local_only
設置是否只能在檔選擇器中選擇本地檔。如果local_only為 TRUE（預設值），則所選檔是保證可通過作業系統本機檔案系統訪問的檔，因此應用程式只需要擔心檔案名功能，如 gtk_file_chooser_get_filename（），而不是 URI 函數 likegtk_file_chooser_get_uri（），在某些系統上，非本機檔可能仍然可以通過用戶空間檔案系統 （FUSE） 使用本機檔案系統。GtkFileChooser
語法
參數
chooser- 一GtkFileChooser
local_only- 如果只能選擇本地檔，則為 TRUE
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_preview_widget ----

gtk_file_chooser_set_preview_widget
設置應用程式提供的小元件，以用於顯示當前選定檔的自訂預覽。要實現預覽，請在設置預覽小部件後連接到信號，並在每次更改時調用gtk_file_chooser_get_preview_filename（） orgtk_file_chooser_get_preview_uri（）。如果可以顯示新檔的預覽，請更新微件並使用 gtk_file_chooser_set_preview_widget_active（） 將預覽設置為活動狀態。否則，請將預覽設置為非活動狀態。如果沒有應用程式提供的預覽構件，或者應用程式提供的預覽微件未處於活動狀態，則檔選擇器將根本不顯示預覽。?update-preview?
語法
參數
chooser- 一GtkFileChooser
preview_widget- 用於顯示預覽的小部件。
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_preview_widget_active ----

gtk_file_chooser_set_preview_widget_active
設置是否應為當前檔案名顯示預覽微件集 bygtk_file_chooser_set_preview_widget（）。當活動設置為 false 時，檔選擇項將顯示當前檔的內部生成預覽，或者它可能根本不顯示預覽。Seegtk_file_chooser_set_preview_widget（） 瞭解更多詳情。
語法
參數
chooser- 一GtkFileChooser
active- 是否顯示使用者指定的預覽小部件
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_select_multiple ----

gtk_file_chooser_set_select_multiple
設置是否可以在檔選擇器中選擇多個檔。如果操作設置為GTK_FILE_CHOOSER_ACTION_OPEN orGTK_FILE_CHOOSER_ACTION_SELECT_FOLDER，則這僅相關。
語法
參數
chooser- 一GtkFileChooser
select_multiple- 如果可以選擇多個檔，則為 TRUE。
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_show_hidden ----

gtk_file_chooser_set_show_hidden
設置是否在檔選擇器中顯示隱藏的檔和資料夾。
語法
參數
chooser- 一GtkFileChooser
show_hidden- 如果應顯示隱藏的檔和資料夾，則為 TRUE。
自 2.6 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_uri ----

gtk_file_chooser_set_uri
通過更改為 URI 的父資料夾並實際選擇列表中的 URI，將 uri 引用的文件設置為文件選擇器的當前文件。如果選擇器GTK_FILE_CHOOSER_ACTION_SAVE模式，則 URI 的基名也將顯示在對話方塊的檔案名條目中。請注意，URI 必須存在，否則除了目錄更改之外，不會執行任何操作。僅當實現已具有用戶可以保存的檔案名的 savedialog 時，才應使用此函數。例如，當用戶打開現有檔，然後執行“另存為...”以保存副本或修改後的版本。如果您還沒有檔案名？例如，如果用戶剛剛創建了一個新檔並首次保存它，請不要調用此函數。相反，請使用類似於以下內容的內容：12345678910[/語法] [語法]if （document_is_new） { // 用戶剛剛gtk_file_chooser_set_current_name創建了一個新文檔（選擇器，“無標題文檔”）; }else { // 用戶編輯了現有文檔gtk_file_chooser_set_uri（選擇器，existing_uri）;}[/語法]
在第一種情況下，檔選擇器將向用戶提供有用的建議，例如保存新檔的位置。在第二種情況下，檔的現有位置是已知的，因此檔選擇器將使用它。
語法
參數
chooser- 一GtkFileChooser
uri- 要設置為當前 URI 的 URI
返回
沒有用。
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_use_preview_label ----

gtk_file_chooser_set_use_preview_label
設置檔選擇器是否應顯示帶有正在預覽的檔案名稱的常用標籤;預設值為 TRUE。希望自己繪製整個預覽區域的應用程式應將其設置為 FALSE，並在預覽小部件中顯示名稱。另請參見：gtk_file_chooser_set_preview_widget（）
語法
參數
chooser- 一GtkFileChooser
use_label- 是否顯示帶有預覽檔案名稱的庫存標籤
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_unselect_all ----

gtk_file_chooser_unselect_all
取消選擇檔選取器的當前資料夾中的所有檔。
語法
參數
chooser- 一GtkFileChooser
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_unselect_file ----

gtk_file_chooser_unselect_file
取消選擇檔引用的檔。如果檔不在目前的目錄中、不存在或當前未被選中，則不執行任何操作。
語法
參數
chooser- 一GtkFileChooser
file- 一GFile
自 2.1 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_unselect_filename ----

gtk_file_chooser_unselect_filename
取消選擇當前選定的檔案名。如果檔案名不在目前的目錄中，則不存在，或者當前未選中，則不執行任何操作。
語法
參數
chooser- 一GtkFileChooser
filename- 要取消選擇的檔案名。[類型檔案名]
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_unselect_uri ----

gtk_file_chooser_unselect_uri
取消選擇 uri 引用的檔。如果檔不在目前的目錄中，則不存在，或者當前未被選中，則不執行任何操作。
語法
參數
chooser- 一GtkFileChooser
uri- 要取消選擇的 URI
2.4 起
另請參見
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_widget_new ----

gtk_file_chooser_widget_new
創建新的 .這是一個可以嵌入到自訂視窗中的檔選擇器小部件，它與所使用的小部件相同。GtkFileChooserWidgetGtkFileChooserDialog
語法
參數
action- 打開或保存小部件的模式
返回
一個新的GtkFileChooserWidget
自 2.
另請參見
GtkFileChooserWidget


------------ KeyGTK3gtk_file_filter_add_custom ----

gtk_file_filter_add_custom
將規則添加到允許基於自訂回呼函數的檔的篩選器。傳入的所需位元欄位提供有關篩檢程式函數需要哪種資訊的資訊;這允許GTK+避免在篩檢程式不需要它時檢索昂貴的資訊。
語法
參數
filter- 一GtkFileFilter
needed- 標誌的位元欄位，指示自訂篩檢程式函數需要的資訊。
func- 回呼函數;如果函數返回 TRUE，則將顯示該檔。
data- 資料傳遞到函數
notify- 函式呼叫免費資料何時不再需要。
2.4 起
另請參見
GtkFileFilter


------------ KeyGTK3gtk_file_filter_add_mime_type ----

gtk_file_filter_add_mime_type
添加允許篩選給定 mime 類型的規則。
語法
參數
filter- 一GtkFileFilter
mime_type- MIME 類型的名稱
2.4 起
另請參見
GtkFileFilter


------------ KeyGTK3gtk_file_filter_add_pattern ----

gtk_file_filter_add_pattern
添加一個規則，允許將 shell 樣式 glob 添加到篩檢程式。
語法
參數
filter- 一GtkFileFilter
pattern- 貝殼樣式球
2.4 起
另請參見
GtkFileFilter


------------ KeyGTK3gtk_file_filter_add_pixbuf_formats ----

gtk_file_filter_add_pixbuf_formats
添加一個規則，允許採用 GdkPixbuf 支援的格式的影像檔。
語法
參數
filter- 一GtkFileFilter
自 2.6 起
另請參見
GtkFileFilter


------------ KeyGTK3gtk_file_filter_filter ----

gtk_file_filter_filter
測試是否應根據篩選器顯示檔。filter_info應包括從 gtk_file_filter_get_needed（） 返回的欄位。應用程式通常不會使用此功能。它主要用於實施。GtkFileFilterInfoGtkFileChooser
語法
參數
filter- 一GtkFileFilter
filter_info- 包含有關檔的資訊。GtkFileFilterInfo
返回
如果應顯示檔，則為 TRUE
自 2.
另請參見
GtkFileFilter


------------ KeyGTK3gtk_file_filter_get_name ----

gtk_file_filter_get_name
獲取篩選器的用戶可讀名稱。請參見 gtk_file_filter_set_name（）。
語法
參數
filter- 一GtkFileFilter
返回
篩檢程式的人類可讀名稱，或 NULL。此值歸 GTK+ 所有，不得修改或釋放。
2.4 起
另請參見
GtkFileFilter


------------ KeyGTK3gtk_file_filter_get_needed ----

gtk_file_filter_get_needed
獲取傳遞給gtk_file_filter_filter（）此函數通常不會被應用程式使用而需要填寫的欄位;它主要用於實施。GtkFileFilterInfoGtkFileChooser
語法
參數
filter- 一GtkFileFilter
返回
標記的位元欄位，指示調用 gtk_file_filter_filter（） 時所需的欄位
2.4 起
另請參見
GtkFileFilter


------------ KeyGTK3gtk_file_filter_new ----

gtk_file_filter_new
創建一個不添加任何規則的新專案。這樣的篩檢程式不接受任何檔，因此在添加規則withgtk_file_filter_add_mime_type（），gtk_file_filter_add_pattern（）或gtk_file_filter_add_custom（）之前，它不是特別有用。要創建接受任何檔的篩檢程式，請使用： 12[/語法] [語法]GtkFileFilter *filter = gtk_file_filter_new （）;gtk_file_filter_add_pattern （filter， “*”）;[/語法]GtkFileFilter
返回
一個新的GtkFileFilter
2.4 起
另請參見
GtkFileFilter


------------ KeyGTK3gtk_file_filter_set_name ----

gtk_file_filter_set_name
設置篩檢程式的人類可讀名稱;這是字串，如果有可選的篩檢程式清單，則該字串將顯示在檔選擇器使用者介面中。
語法
參數
filter- 一GtkFileFilter
name- 篩檢程式的人類可讀名稱，或NULL刪除任何現有名稱。[允許-無]
2.4 起
另請參見
GtkFileFilter


------------ KeyGTK3gtk_fixed_move ----

gtk_fixed_move
將容器的子級移動到給定位置。GtkFixed
語法
參數
fixed- 一個.GtkFixed
widget- 子小部件。
x- 將小部件移動到的水準位置。
y- 將小部件移動到的垂直位置。[br \=“”
另請參見
GtkFixed


------------ KeyGTK3gtk_fixed_new ----

gtk_fixed_new
創建新的 .GtkFixed
返回
一個新的.GtkFixed
另請參見
GtkFixed


------------ KeyGTK3gtk_fixed_put ----

gtk_fixed_put
將小部件添加到給定位置的容器中。GtkFixed
語法
參數
fixed- 一個.GtkFixed
widget- 要添加的小部件。
x- 放置小部件的水準位置。
y- 放置小部件的垂直位置。
另請參見
GtkFixed


------------ KeyGTK3gtk_flow_box_child_changed ----

gtk_flow_box_child_changed
將子項標記為已更改，從而導致更新依賴于此項的任何狀態。這會影響排序和篩選。請注意，對此方法的調用必須與用於排序和篩選函數的資料同步。例如，如果列表鏡像了一些外部資料集，並且當您在第一個子節點上callgtk_flow_box_child_changed（）時，*兩個*子項在外部資料集中發生了變化，則排序函數必須僅讀取兩個已更改子項中的第一個子項的新資料，否則子項的訴諸將是錯誤的。這通常意味著，如果您不完全控制資料模型，則必須將影響排序和過濾功能的資料複製到小部件本身中。另一個替代方法是在任何模型更改上調用gtk_flow_box_invalidate_sort（），但這更昂貴。
語法
參數
child- 一GtkFlowBoxChild
自 3.1 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_child_get_index ----

gtk_flow_box_child_get_index
獲取子項在其容器中的當前索引。GtkFlowBox
語法
參數
child- 一GtkFlowBoxChild
返回
子項的索引，如果子項位於流框中，則為 -1。
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_child_is_selected ----

gtk_flow_box_child_is_selected
返回當前是否在其容器中選擇了子項。GtkFlowBox
語法
參數
child- 一GtkFlowBoxChild
返回
如果選擇了子項，則為 TRUE
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_child_new ----

gtk_flow_box_child_new
創建一個新的 ，用作 的子項。GtkFlowBoxChildGtkFlowBox
返回
一個新的GtkFlowBoxChild
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_activate_on_single_click ----

gtk_flow_box_get_activate_on_single_click
返回子項是否在按一下時啟動。
語法
參數
box- 一GtkFlowBox
返回
如果孩子在按一下時被啟動，則為 TRUE，否則為 FALSE
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_child_at_index ----

gtk_flow_box_get_child_at_index
獲取框中的第 n 個子項。
語法
參數
box- 一GtkFlowBox
idx- 孩子的位置
返回
子小部件，它將始終是 .[無轉移]GtkFlowBoxChild
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_column_spacing ----

gtk_flow_box_get_column_spacing
獲取水準間距。
語法
參數
box- 一GtkFlowBox
返回
水準間距
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_homogeneous ----

gtk_flow_box_get_homogeneous
返回框是否均勻（所有子項的大小相同）。請參見gtk_box_set_homogeneous（）。
語法
參數
box- 一GtkFlowBox
返回
如果框是同質的，則為 TRUE。
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_max_children_per_line ----

gtk_flow_box_get_max_children_per_line
獲取每行的最大子項數。
語法
參數
box- 一GtkFlowBox
返回
每行的最大子項數
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_min_children_per_line ----

gtk_flow_box_get_min_children_per_line
獲取每行的最小子項數。
語法
參數
box- 一GtkFlowBox
返回
每行的最小子項數
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_row_spacing ----

gtk_flow_box_get_row_spacing
獲取垂直間距。
語法
參數
box- 一GtkFlowBox
返回
垂直間距
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_selected_children ----

gtk_flow_box_get_selected_children
創建所有選定子項的列表。
語法
參數
box- 一GtkFlowBox
返回
A，包含每個選定子項的 。完成後使用g_list_free（） 免費。[element-type GtkFlowBoxChild][轉移容器]GListGtkWidget
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_selection_mode ----

gtk_flow_box_get_selection_mode
獲取框的選擇模式。
語法
參數
box- 一GtkFlowBox
返回
這GtkSelectionMode
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_insert ----

gtk_flow_box_insert
將構件插入到框中的位置。如果設置了排序函數，則小部件實際上將插入到計算的位置，並且此函數具有與gtk_container_add（）相同的效果。如果位置為 -1，或大於框中子項的總數，則小部件將附加到末尾。
語法
參數
box- 一GtkFlowBox
widget- 要添加GtkWidget
position- 插入子項的位置
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_invalidate_filter ----

gtk_flow_box_invalidate_filter
更新所有子級的篩選。當盒子上的濾波器函數的結果由於外部因素而改變時，調用此函數。例如，如果篩檢程式函數只是查找特定的搜索詞，並且帶有該字串的條目已更改，則將使用此選項。
語法
參數
box- 一GtkFlowBox
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_invalidate_sort ----

gtk_flow_box_invalidate_sort
Updates the sorting for all children.Call this when the result of the sort function onbox is changed due to an external factor.
Syntax
Parameters
box  -  	a GtkFlowBox
Since 3.12
See Also
GtkFlowBox


------------ KeyGTK3gtk_flow_box_new ----

gtk_flow_box_new
Creates a GtkFlowBox.
Returns
a new  containerGtkFlowBox
Since 3.12
See Also
GtkFlowBox


------------ KeyGTK3gtk_flow_box_selected_foreach ----

gtk_flow_box_selected_foreach
Calls a function for each selected child.Note that the selection cannot be modified from withinthis function.
Syntax
Parameters
box  -  	a GtkFlowBox
func  -  	 the function to call for each selected child. [scope call]
data  -  	user data to pass to the function
Since 3.12
See Also
GtkFlowBox


------------ KeyGTK3gtk_flow_box_select_all ----

gtk_flow_box_select_all
選擇 box 的所有子項（如果選擇模式允許）。
語法
參數
box- 一GtkFlowBox
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_select_child ----

gtk_flow_box_select_child
選擇框的單個子項（如果選擇模式允許）。
語法
參數
box- 一GtkFlowBox
child- 盒子的孩子
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_activate_on_single_click ----

gtk_flow_box_set_activate_on_single_click
如果 single 為 TRUE，則當您按一下子項時，它們將被啟動，否則您需要按兩下。
語法
參數
box- 一GtkFlowBox
single- TRUE，只需按一下一下即可發出兒童啟動
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_column_spacing ----

gtk_flow_box_set_column_spacing
設置要在子項之間添加的水準空間。查看酒店。?column-spacing?
語法
參數
box- 一GtkFlowBox
spacing- 要使用的間距
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_filter_func ----

gtk_flow_box_set_filter_func
通過在盒子上設置過濾功能，人們可以動態決定要顯示哪些孩子。例如，實現僅顯示與搜索詞匹配的子項的搜索函數。在調用後，將為每個子級調用filter_func，並且每次子項更改（viagtk_flow_box_child_changed（））或調用gtk_flow_box_invalidate_filter（）時，都會繼續調用該filter_func。
語法
參數
box- 一GtkFlowBox
filter_func- 回檔，您可以過濾要顯示的子級。[結束user_data][允許-無]
user_data- 傳遞給filter_func的使用者資料
destroy- 銷毀user_data通知程式
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_hadjustment ----

gtk_flow_box_set_hadjustment
將調整連接到盒子中的焦點處理。該調整還用於在寬頻選擇期間進行自動滾動。有關獲取調整的典型方法，請參閱 gtk_scrolled_window_get_hadjustment（）;有關設置垂直調整的andgtk_flow_box_set_vadjustment（）。調整必須以圖元單位為單位，並且與盒子的直接子項的分配在同一坐標系統中。
語法
參數
box- 一GtkFlowBox
adjustment- 當焦點在容器的後代之間移動時應進行調整
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_homogeneous ----

gtk_flow_box_set_homogeneous
設置 box 的屬性，控制 box 的所有子項在框中是否都給定相等的間距。?homogeneous?
語法
參數
box- 一GtkFlowBox
homogeneous- TRUE 用於創建相等的分配，FALSE 用於可變分配
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_max_children_per_line ----

gtk_flow_box_set_max_children_per_line
設置要請求的最大子項數，並為 box' 的方向分配空間。設置每個行的最大子項數會使總體自然大小請求在給定方向上不再超過n_children個子項。
語法
參數
box- 一GtkFlowBox
n_children- 每行的最大子項數
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_min_children_per_line ----

gtk_flow_box_set_min_children_per_line
設置在流動之前在盒子的方向上排列的最小子項數。
語法
參數
box- 一GtkFlowBox
n_children- 每行最小兒童數
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_row_spacing ----

gtk_flow_box_set_row_spacing
設置要在子項之間添加的垂直間距。查看酒店。?row-spacing?
語法
參數
box- 一GtkFlowBox
spacing- 要使用的間距
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_selection_mode ----

gtk_flow_box_set_selection_mode
設置所選內容在框中的工作方式。有關詳細資訊，請參閱。GtkSelectionMode
語法
參數
box- 一GtkFlowBox
mode- 新的選擇模式
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_sort_func ----

gtk_flow_box_set_sort_func
通過在框上設置排序函數，可以根據子項的內容動態地對框的子項進行排序。在調用後，將為每個子級調用sort_func，並且每次子項更改（viagtk_flow_box_child_changed（））和調用gtk_flow_box_invalidate_sort（）時，都會繼續調用該sort_func。
語法
參數
box- 一GtkFlowBox
sort_func- 排序功能。[結束user_data][允許-無]
user_data- 傳遞給sort_func的使用者資料
destroy- 銷毀user_data通知程式
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_vadjustment ----

gtk_flow_box_set_vadjustment
將調整連接到盒子中的焦點處理。該調整還用於在寬頻選擇期間進行自動滾動。有關獲取調整的典型方法，請參見 gtk_scrolled_window_get_vadjustment（），有關設置水準調整的andgtk_flow_box_set_hadjustment（）。調整必須以圖元單位為單位，並且與盒子的直接子項的分配在同一坐標系統中。
語法
參數
box- 一GtkFlowBox
adjustment- 當焦點在容器的後代之間移動時應進行調整
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_unselect_all ----

gtk_flow_box_unselect_all
取消選擇 box 的所有子項（如果選擇模式允許）。
語法
參數
box- 一GtkFlowBox
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_flow_box_unselect_child ----

gtk_flow_box_unselect_child
取消選擇框的單個子項（如果選擇模式允許）。
語法
參數
box- 一GtkFlowBox
child- 盒子的孩子
自 3.12 起
另請參見
GtkFlowBox


------------ KeyGTK3gtk_font_button_get_font_name ----

gtk_font_button_get_font_name
檢索當前所選字體的名稱。此名稱還包括樣式和大小資訊。如果要使用該字體呈現某些內容，請將此字串與 pango_font_description_from_string（） 一起使用。如果您有興趣查看某些值（系列名稱，樣式，大小，重量），只需從物件中查詢這些屬性即可。PangoFontDescription
語法
參數
font_button- 一GtkFontButton
返回
不得釋放的字體名稱的內部副本。
2.4 起
另請參見
GtkFontButton


------------ KeyGTK3gtk_font_button_get_show_size ----

gtk_font_button_get_show_size
返回字體大小是否顯示在標籤中。
語法
參數
font_button- 一GtkFontButton
返回
字體大小是否將顯示在標籤中。
2.4 起
另請參見
GtkFontButton


------------ KeyGTK3gtk_font_button_get_show_style ----

gtk_font_button_get_show_style
返回字體樣式的名稱是否將顯示在標籤中。
語法
參數
font_button- 一GtkFontButton
返回
字體樣式是否將顯示在標籤中。
2.4 起
另請參見
GtkFontButton


------------ KeyGTK3gtk_font_button_get_title ----

gtk_font_button_get_title
檢索字體選擇器對話方塊的標題。
語法
參數
font_button- 一GtkFontButton
返回
不得釋放的標題字串的內部副本。
自 2.
另請參見
GtkFontButton


------------ KeyGTK3gtk_font_button_get_use_font ----

gtk_font_button_get_use_font
返回是否在標籤中使用所選字體。
語法
參數
font_button- 一GtkFontButton
返回
是否在標籤中使用所選字體。
2.4 起
另請參見
GtkFontButton


------------ KeyGTK3gtk_font_button_get_use_size ----

gtk_font_button_get_use_size
返回是否在標籤中使用所選大小。
語法
參數
font_button- 一GtkFontButton
返回
是否在標籤中使用所選大小。
2.4 起
另請參見
GtkFontButton


------------ KeyGTK3gtk_font_button_new ----

gtk_font_button_new
創建新的字體選取器構件。
返回
一個新的字體選取器小部件。
2.4 起
另請參見
GtkFontButton


------------ KeyGTK3gtk_font_button_new_with_font ----

gtk_font_button_new_with_font
創建新的字體選取器構件。
語法
參數
fontname- 字體選擇器對話方塊中顯示的字體名稱
返回
一個新的字體選取器小部件。
2.4 起
另請參見
GtkFontButton


------------ KeyGTK3gtk_font_button_set_font_name ----

gtk_font_button_set_font_name
在字體選取器對話方塊中設置或更新當前顯示的字體。
語法
參數
font_button- 一GtkFontButton
fontname- 字體選擇器對話方塊中顯示的字體名稱
返回
真
2.4 起
另請參見
GtkFontButton


------------ KeyGTK3gtk_font_button_set_show_size ----

gtk_font_button_set_show_size
如果show_size為 TRUE，則字體大小將與所選字體的名稱一起顯示。
語法
參數
font_button- 一GtkFontButton
show_size- 如果字體大小應在對話方塊中顯示，則為 TRUE。
2.4 起
另請參見
GtkFontButton


------------ KeyGTK3gtk_font_button_set_show_style ----

gtk_font_button_set_show_style
如果show_style為 TRUE，則字體樣式將與所選字體的名稱一起顯示。
語法
參數
font_button- 一GtkFontButton
show_style- 如果字體樣式應顯示在標籤中，則為 TRUE。
2.4 起
另請參見
GtkFontButton


------------ KeyGTK3gtk_font_button_set_title ----

gtk_font_button_set_title
設置字體選擇器對話方塊的標題。
語法
參數
font_button- 一GtkFontButton
title- 包含字體選擇器對話方塊標題的字串
2.4 起
另請參見
GtkFontButton


------------ KeyGTK3gtk_font_button_set_use_font ----

gtk_font_button_set_use_font
如果use_font為 TRUE，則字體名稱將使用所選字體書寫。
語法
參數
font_button- 一GtkFontButton
use_font- 如果為 TRUE，字體名稱將使用所選字體書寫。
2.4 起
另請參見
GtkFontButton


------------ KeyGTK3gtk_font_button_set_use_size ----

gtk_font_button_set_use_size
如果use_size為 TRUE，則字體名稱將使用所選大小寫入。
語法
參數
font_button- 一GtkFontButton
use_size- 如果為 TRUE，字體名稱將使用所選大小書寫。
2.4 起
另請參見
GtkFontButton


------------ KeyGTK3gtk_font_chooser_dialog_new ----

gtk_font_chooser_dialog_new
創建新的 .GtkFontChooserDialog
語法
參數
title- 對話方塊的標題，或 NULL。[允許-無]
parent- 對話方塊的瞬態父級，或 NULL。[允許-無]
返回
一個新的GtkFontChooserDialog
自 3.
另請參見
GtkFontChooserDialog


------------ KeyGTK3gtk_font_chooser_get_font ----

gtk_font_chooser_get_font
獲取當前選定的字體名稱。請注意，這可能與您withgtk_font_chooser_set_font（） 設置的字串不同，因為字體選擇器小部件可能會規範字體名稱，從而返回具有不同結構的字串。例如？Helvetica Italic Bold 12？可以規範化為 ？Helvetica Bold Italic 12？.如果要比較雙字體描述，請使用 pango_font_description_equal（）。
語法
參數
fontchooser- 一GtkFontChooser
返回
具有當前字體名稱的字串，如果未選擇任何字體，則為 NULL。您必須使用g_free（） 釋放此字串。[轉移完整][允許-無]
自 3.2 起
另請參見
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_get_font_desc ----

gtk_font_chooser_get_font_desc
獲取當前選定的字體。請注意，這可能與您withgtk_font_chooser_set_font（） 設置的字串不同，因為字體選擇器小部件可能會規範字體名稱，從而返回具有不同結構的字串。例如？Helvetica Italic Bold 12？可以規範化為 ？Helvetica Bold Italic 12？.如果要比較雙字體描述，請使用 pango_font_description_equal（）。
語法
參數
fontchooser- 一GtkFontChooser
返回
A 表示當前字體，如果未選擇任何字體，則為 NULL。[轉移完整][允許-無]PangoFontDescription
自 3.2 起
另請參見
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_get_font_face ----

gtk_font_chooser_get_font_face
獲取表示所選字體組的詳細資訊（即系列、傾斜、粗細、寬度等）。如果未安裝所選字體，則返回 NULL。PangoFontFace
語法
參數
fontchooser- 一GtkFontChooser
返回
表示所選字體組詳細資訊的 A，或 NULL。返回的物件歸字體選擇者所有，不得修改或釋放。[無轉移]PangoFontFace
自 3.2 起
另請參見
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_get_font_family ----

gtk_font_chooser_get_font_family
獲取表示所選字型家族的 。字型家族是字體的集合。如果未安裝所選字體，則返回 NULL。PangoFontFamily
語法
參數
fontchooser- 一GtkFontChooser
返回
表示所選字型家族的字體，或 NULL。返回的對象歸 fontcooserand 所有，不得修改或釋放。[無轉移]PangoFontFamily
自 3.2 起
另請參見
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_get_font_size ----

gtk_font_chooser_get_font_size
The selected font size.
Syntax
Parameters
fontchooser  -  	a GtkFontChooser
Returns
A n integer representing the selected font size,or -1 if no font size is selected.
Since 3.2
See Also
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_get_preview_text ----

gtk_font_chooser_get_preview_text
獲取預覽區域中顯示的文本。
語法
參數
fontchooser- 一GtkFontChooser
返回
預覽區域中顯示的文本。[轉移完整]
自 3.2 起
另請參見
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_get_show_preview_entry ----

gtk_font_chooser_get_show_preview_entry
返回是否顯示預覽條目。
語法
參數
fontchooser- 一GtkFontChooser
返回
如果預覽條目顯示為 TRUE;如果顯示預覽條目，則為 FALSE。如果預覽條目處於隱藏狀態，則為 FALSE。
自 3.2 起
另請參見
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_set_filter_func ----

gtk_font_chooser_set_filter_func
添加一個篩選函數，該函數決定要在字體選擇器中顯示的字體。
語法
參數
fontchooser- 一GtkFontChooser
filter- a 或 NULL。[允許-無]GtkFontFilterFunc
user_data- 要傳遞到篩檢程式的資料
destroy- 函式呼叫免費資料何時不再需要
自 3.
另請參見
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_set_font ----

gtk_font_chooser_set_font
Sets the currently-selected font.
Syntax
Parameters
fontchooser  -  	a GtkFontChooser
fontname  -  	a font name like ?Helvetica 12? or ?Times Bold 18?
Since 3.2
See Also
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_set_font_desc ----

gtk_font_chooser_set_font_desc
設置當前從font_desc中選擇的字體。
語法
參數
fontchooser- 一GtkFontChooser
font_desc- 一PangoFontDescription
自 3.2 起
另請參見
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_set_preview_text ----

gtk_font_chooser_set_preview_text
設置預覽區域中顯示的文本。該文本用於顯示所選字體的外觀。
語法
參數
fontchooser- 一GtkFontChooser
text- 要在預覽區域中顯示的文本。[無轉移]
自 3.2 起
另請參見
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_set_show_preview_entry ----

gtk_font_chooser_set_show_preview_entry
顯示或隱藏可編輯的預覽條目。
語法
參數
fontchooser- 一GtkFontChooser
show_preview_entry- 是否顯示可編輯的預覽條目
自 3.2 起
另請參見
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_widget_new ----

gtk_font_chooser_widget_new
創建新的 .GtkFontChooserWidget
返回
一個新的GtkFontChooserWidget
自 3.
另請參見
GtkFontChooserWidget


------------ KeyGTK3gtk_font_selection_dialog_get_cancel_button ----

gtk_font_selection_dialog_get_cancel_button
gtk_font_selection_dialog_get_cancel_button自版本 3.2 起已棄用，不應在新編寫的代碼中使用。使用 獲取 ？取消？按鈕。GtkFontChooserDialog
語法
參數
fsd- 一GtkFontSelectionDialog
返回
對話方塊中使用的 ？取消？按鈕。[無轉移]GtkWidget
自 2.14 起
另請參見
GtkFontSelectionDialog


------------ KeyGTK3gtk_font_selection_dialog_get_font_name ----

gtk_font_selection_dialog_get_font_name
gtk_font_selection_dialog_get_font_name自 3.2 版起已棄用，不應在新編寫的代碼中使用。使用 獲取當前選定的字體名稱。請注意，這可能與您使用gtk_font_selection_dialog_set_font_name（）設置的字串不同，因為字體選擇構件可能會規範化字體名稱，從而返回具有不同結構的字串。例如？Helvetica Italic Bold 12？可以歸一化為 ？Helvetica Bold Italic 12？.如果要比較兩個字體描述，請使用 pango_font_description_equal（）。。GtkFontChooserDialog
語法
參數
fsd- 一GtkFontSelectionDialog
返回
具有當前字體名稱的字串，如果選擇了 nofont，則為 NULL。必須使用 g_free（） 釋放此字串。
另請參見
GtkFontSelectionDialog


------------ KeyGTK3gtk_font_selection_dialog_get_font_selection ----

gtk_font_selection_dialog_get_font_selection
gtk_font_selection_dialog_get_font_selection自版本 3.2 起已棄用，不應在新編寫的代碼中使用。使用 檢索嵌入在對話方塊中的小部件。GtkFontChooserDialogGtkFontSelection
語法
參數
fsd- 一GtkFontSelectionDialog
返回
嵌入式 .[無轉移]GtkFontSelection
自 2.2 起
另請參見
GtkFontSelectionDialog


------------ KeyGTK3gtk_font_selection_dialog_get_ok_button ----

gtk_font_selection_dialog_get_ok_button
gtk_font_selection_dialog_get_ok_button自 3.2 版起已棄用，不應在新編寫的代碼中使用。使用 獲取 ？還行？按鈕。GtkFontChooserDialog
語法
參數
fsd- 一GtkFontSelectionDialog
返回
對話方塊中使用的 ？還行？按鈕。[無轉移]GtkWidget
自 2.14 起
另請參見
GtkFontSelectionDialog


------------ KeyGTK3gtk_font_selection_dialog_get_preview_text ----

gtk_font_selection_dialog_get_preview_text
gtk_font_selection_dialog_get_preview_text自 3.2 版起已棄用，不應在新編寫的代碼中使用。使用 獲取預覽區域中顯示的文本。GtkFontChooserDialog
語法
參數
fsd- 一GtkFontSelectionDialog
返回
預覽區域中顯示的文本。此字串歸小部件所有，不應修改或釋放
另請參見
GtkFontSelectionDialog


------------ KeyGTK3gtk_font_selection_dialog_new ----

gtk_font_selection_dialog_new
gtk_font_selection_dialog_new自 3.2 版起已棄用，不應在新編寫的代碼中使用。使用 創建新 .GtkFontChooserDialogGtkFontSelectionDialog
語法
參數
title- 對話方塊窗口的標題
返回
一個新的GtkFontSelectionDialog
另請參見
GtkFontSelectionDialog


------------ KeyGTK3gtk_font_selection_dialog_set_font_name ----

gtk_font_selection_dialog_set_font_name
gtk_font_selection_dialog_set_font_name自版本 3.2 起已棄用，不應在新編寫的代碼中使用。使用 設置當前選定的字體。GtkFontChooserDialog
語法
參數
fsd- 一GtkFontSelectionDialog
fontname- 字體名稱像 ？Helvetica 12？或？時代大膽 18？
返回
如果在 fsdis 中選擇的字體現在指定了字體名稱，則為 TRUE，否則為 FALSE。
另請參見
GtkFontSelectionDialog


------------ KeyGTK3gtk_font_selection_dialog_set_preview_text ----

gtk_font_selection_dialog_set_preview_text
gtk_font_selection_dialog_set_preview_text自版本 3.2 起已棄用，不應在新編寫的代碼中使用。使用 設置預覽區域中顯示的文本。GtkFontChooserDialog
語法
參數
fsd- 一GtkFontSelectionDialog
text- 要在預覽區域中顯示的文本
另請參見
GtkFontSelectionDialog


------------ KeyGTK3gtk_font_selection_get_face ----

gtk_font_selection_get_face
gtk_font_selection_get_face自 3.2 版起已棄用，不應在新編寫的代碼中使用。Use 獲取表示所選字體組的詳細資訊（即系列、傾斜、粗細、寬度等）。GtkFontChooserPangoFontFace
語法
參數
fontsel- 一GtkFontSelection
返回
表示所選字體組詳細資訊的 A。返回的對象歸方塊所有，不得修改或釋放。[無轉移]PangoFontFace
自 2.14 起
另請參見
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_face_list ----

gtk_font_selection_get_face_list
gtk_font_selection_get_face_list自 3.2 版起已棄用，不應在新編寫的代碼中使用。Use This 返回列出所選字體的所有可用樣式的。例如？定期？？粗體？等。GtkFontChooserGtkTreeView
語法
參數
fontsel- 一GtkFontSelection
返回
A 是字體的一部分。[無轉移]GtkWidget
自 2.14 起
另請參見
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_family ----

gtk_font_selection_get_family
gtk_font_selection_get_family自版本 3.2 起已棄用，不應在新編寫的代碼中使用。使用 獲取表示所選字型家族的 。GtkFontChooserPangoFontFamily
語法
參數
fontsel- 一GtkFontSelection
返回
表示所選字型家族的字體。字型家族是字體的集合。返回的對象歸 fontseland 所有，不得修改或釋放。[無轉移]PangoFontFamily
自 2.14 起
另請參見
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_family_list ----

gtk_font_selection_get_family_list
gtk_font_selection_get_family_list自 3.2 版起已棄用，不應在新編寫的代碼中使用。使用 This 返回列出字型家族的 ， 例如 ， ？無？？襯線？等GtkFontChooserGtkTreeView
語法
參數
fontsel- 一GtkFontSelection
返回
A 是字體的一部分。[無轉移]GtkWidget
自 2.14 起
另請參見
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_font_name ----

gtk_font_selection_get_font_name
gtk_font_selection_get_font_name自 3.2 版起已棄用，不應在新編寫的代碼中使用。使用 獲取當前選定的字體名稱。請注意，這可能與您使用gtk_font_selection_set_font_name（）設置的字串不同，因為字體選擇構件可能會規範化字體名稱，從而返回具有不同結構的字串。例如？Helvetica Italic Bold 12？可以歸一化為 ？Helvetica Bold Italic 12？.如果要比較兩個字體描述，請使用 pango_font_description_equal（）。。GtkFontChooser
語法
參數
fontsel- 一GtkFontSelection
返回
具有當前字體名稱的字串，如果未選擇任何字體，則為 NULL。必須使用 g_free（） 釋放此字串。
另請參見
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_preview_entry ----

gtk_font_selection_get_preview_entry
gtk_font_selection_get_preview_entry自 3.2 版起已棄用，不應在新編寫的代碼中使用。Use This 返回用於將字體顯示為預覽的 。GtkFontChooserGtkEntry
語法
參數
fontsel- 一GtkFontSelection
返回
A 是字體的一部分。[無轉移]GtkWidget
自 2.14 起
另請參見
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_preview_text ----

gtk_font_selection_get_preview_text
gtk_font_selection_get_preview_text自版本 3.2 起已棄用，不應在新編寫的代碼中使用。使用 獲取預覽區域中顯示的文本。GtkFontChooser
語法
參數
fontsel- 一GtkFontSelection
返回
預覽區域中顯示的文本。此字串歸小部件所有，不應修改或釋放
另請參見
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_size ----

gtk_font_selection_get_size
gtk_font_selection_get_size自版本 3.2 起已棄用，不應在新編寫的代碼中使用。使用所選字體大小。GtkFontChooser
語法
參數
fontsel- 一GtkFontSelection
返回
表示所選字體大小的 n 整數，如果未選擇字體大小，則為 -1。
自 2.14 起
另請參見
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_size_entry ----

gtk_font_selection_get_size_entry
gtk_font_selection_get_size_entry自版本 3.2 起已棄用，不應在新編寫的代碼中使用。Use This 返回 used，以允許使用者手動編輯字體編號，而不是從字體大小清單中選擇它。GtkFontChooserGtkEntry
語法
參數
fontsel- 一GtkFontSelection
返回
A 是字體的一部分。[無轉移]GtkWidget
自 2.14 起
另請參見
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_size_list ----

gtk_font_selection_get_size_list
gtk_font_selection_get_size_list自版本 3.2 起已棄用，不應在新編寫的代碼中使用。Use This 返回用於列出字體大小的 。GtkFontChooserGtkTreeView
語法
參數
fontsel- 一GtkFontSelection
返回
A 是字體的一部分。[無轉移]GtkWidget
自 2.1 起
另請參見
GtkFontSelection


------------ KeyGTK3gtk_font_selection_new ----

gtk_font_selection_new
gtk_font_selection_new自 3.2 版起已棄用，不應在新編寫的代碼中使用。使用改為創建一個新的 .GtkFontChooserWidgetGtkFontSelection
返回
一個新的GtkFontSelection
另請參見
GtkFontSelection


------------ KeyGTK3gtk_font_selection_set_font_name ----

gtk_font_selection_set_font_name
gtk_font_selection_set_font_name自 3.2 版起已棄用，不應在新編寫的代碼中使用。使用“設置當前選定的字體”。請注意，字體需要知道它將在其中出現的螢幕才能正常工作;這可以通過在調用此函數之前簡單地確保將fontsel插入到頂級視窗中來保證。GtkFontChooser
語法
參數
fontsel- 一GtkFontSelection
fontname- 字體名稱像 ？Helvetica 12？或？時代大膽 18？
返回
如果字體可以成功設置，則為 TRUE;如果不存在此類字體，或者如果 fontseldoesn？ t 屬於特定螢幕，則為 FALSE。
另請參見
GtkFontSelection


------------ KeyGTK3gtk_font_selection_set_preview_text ----

gtk_font_selection_set_preview_text
gtk_font_selection_set_preview_text自 3.2 版起已棄用，不應在新編寫的代碼中使用。使用 設置預覽區域中顯示的文本。該文本用於顯示所選字體的外觀。GtkFontChooser
語法
參數
fontsel- 一GtkFontSelection
text- 要在預覽區域中顯示的文本
另請參見
GtkFontSelection


------------ KeyGTK3gtk_frame_get_label ----

gtk_frame_get_label
如果框架的標籤構件是 ，則返回標籤構件中的文本。（如果將非 NULL 參數傳遞給 gtk_frame_new（）），則該幀將具有用於標籤構件的參數。GtkLabelGtkLabel
語法
參數
frame- 一GtkFrame
返回
標籤中的文本，如果沒有標籤小部件或可標記的小部件是 nota，則為 NULL。此字串歸 GTK+ 所有，不得修改或釋放。GtkLabel
另請參見
GtkFrame


------------ KeyGTK3gtk_frame_get_label_align ----

gtk_frame_get_label_align
檢索框架標籤的 X 和 Y 對齊方式。Seegtk_frame_set_label_align（）.
語法
參數
frame- 一GtkFrame
xalign- 存儲 X 對齊幀標籤的位置，或 NULL。[輸出][允許-無]
yalign- 存儲 X 對齊幀標籤的位置，或 NULL。[輸出][允許-無]
另請參見
GtkFrame


------------ KeyGTK3gtk_frame_get_label_widget ----

gtk_frame_get_label_widget
媯€緔㈡鏋剁殑鏍囩鏋勪歡銆係eegtk_frame_set_label_widget錛堬級.
璿硶
鍙傛暟
frame- 涓€GtkFrame
榪斿洖
鏍囩寰歡錛屽鏋滄病鏈夛紝鍒欎負 NULL銆俒鏃犺漿縐籡
鍙﹁鍙傝
GtkFrame


------------ KeyGTK3gtk_frame_get_shadow_type ----

gtk_frame_get_shadow_type
媯€緔㈠撫鐨勯槾褰辯被鍨嬨€係eegtk_frame_set_shadow_type錛堬級.
璿硶
鍙傛暟
frame- 涓€GtkFrame
榪斿洖
甯х殑褰撳墠闃村獎綾誨瀷
鍙﹁鍙傝
GtkFrame


------------ KeyGTK3gtk_frame_new ----

gtk_frame_new
創建一個帶有可選標籤的新 ，該標籤標籤。如果標籤為 NULL，則省略該標籤。GtkFrame
語法
參數
label- 要用作框架標籤的文本。[允許-無]
返回
一個新的小部件GtkFrame
另請參見
GtkFrame


------------ KeyGTK3gtk_frame_set_label ----

gtk_frame_set_label
設置標籤的文本。如果標籤為 NULL，則刪除當前標籤。
語法
參數
frame- 一GtkFrame
label- 要用作框架標籤的文本。[允許-無]
另請參見
GtkFrame


------------ KeyGTK3gtk_frame_set_label_align ----

gtk_frame_set_label_align
設置框架構件標籤的對齊方式。新創建的幀的預設值為 0.0 和 0.5。
語法
參數
frame- 一GtkFrame
xalign- 標籤沿微件頂部邊緣的位置。值 0.0 表示左對齊;1.0 表示右對齊。
yalign- 標籤的 y 對齊方式。值 0.0 在框架下方對齊;1.0 在框架上方對齊。如果值正好為 0.0 或 1.0，則不會繪製框架中的間隙，因為標籤將完全位於框架的上方或下方。
另請參見
GtkFrame


------------ KeyGTK3gtk_frame_set_label_widget ----

gtk_frame_set_label_widget
設置框架的標籤構件。這是嵌入在框架上邊緣作為 atitle 的小部件。
語法
參數
frame- 一GtkFrame
label_widget- 新的標籤小部件
另請參見
GtkFrame


------------ KeyGTK3gtk_frame_set_shadow_type ----

gtk_frame_set_shadow_type
設置幀的陰影類型。
語法
參數
frame- 一GtkFrame
type- 新GtkShadowType
另請參見
GtkFrame


------------ KeyGTK3gtk_get_binary_age ----

gtk_get_binary_age
返回在構建運行進程所針對的 GTK+ 庫時傳遞給 libtool 的二進位年齡。如果libtool對你來說毫無意義，那就不要再談了。
返回
GTK+ 庫的二進位時代
自 3.0 起
另請參見
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_get_current_event ----

gtk_get_current_event
獲取 GTK+ 當前正在處理的事件的副本。例如，如果您正在處理一個信號，則當前事件將是觸發 ：：clicked 信號的事件。?clicked?GdkEventButton
返回
當前事件的副本，如果沒有當前事件，則為 NULL。返回的事件必須使用gdk_event_free（） 進行freed。[轉移完整]
另請參見
gtk3-General


------------ KeyGTK3gtk_get_current_event_device ----

gtk_get_current_event_device
如果存在當前事件並且它有設備，請返回該設備，否則返回 NULL。
返回
a 或空。[無轉移]GdkDevice
另請參見
gtk3-General


------------ KeyGTK3gtk_get_current_event_state ----

gtk_get_current_event_state
如果存在當前事件並且它具有狀態欄位，則將該狀態欄位放在狀態中並返回 TRUE，否則返回FALSE。
語法
參數
state- 存儲當前事件狀態的位置。[輸出]
返回
如果存在當前事件並且具有狀態欄位，則為 TRUE
另請參見
gtk3-General


------------ KeyGTK3gtk_get_current_event_time ----

gtk_get_current_event_time
如果存在當前事件並且具有時間戳記，則返回該時間戳記，否則返回GDK_CURRENT_TIME。
返回
當前事件的時間戳記，或GDK_CURRENT_TIME。
另請參見
gtk3-General


------------ KeyGTK3gtk_get_default_language ----

gtk_get_default_language
返回當前無效的預設語言的 。（請注意，這可能會在應用程式的整個生命週期內發生變化。預設語言派生自當前本地語言。例如，它確定 GTK+ 是使用從右到左還是從左到右的文本方向。此函數等效於 pango_language_get_default（）。有關詳細資訊，請參閱該函數。PangoLanguage
返回
預設語言為 ，不得釋放PangoLanguage
另請參見
gtk3-General


------------ KeyGTK3gtk_get_event_widget ----

gtk_get_event_widget
如果事件為 NULL 或事件未與任何小部件關聯，則返回 NULL，否則返回最初接收該小部件的小部件。
語法
參數
event- 一GdkEvent
返回
最初接收事件的小部件，或 NULL。[無轉移]
另請參見
gtk3-General


------------ KeyGTK3gtk_get_interface_age ----

gtk_get_interface_age
返回傳遞給 libtool 的介面年齡在構建運行進程所針對的 GTK+ 庫時。如果libtool對你來說毫無意義，那就不要再談了。
返回
GTK+ 庫的介面時代
自 3.0 起
另請參見
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_get_locale_direction ----

gtk_get_locale_direction
獲取當前區域設置的方向。這是文本和 UI 的預期讀取方向。此函數依賴於使用setlocale（）設置的當前區域設置，否則將預設為設置GTK_TEXT_DIR_LTRdirection。GTK_TEXT_DIR_NONE將永遠不會被退回。GTK+ 根據當地語系化gtk_init（） 設置預設文本方向，通常應usegtk_widget_get_direction（） 或 gtk_widget_get_default_direction（） 來獲取當前 direcion。只有在 GTK+ 初始化後更改了語言環境時，才需要此函數。在這種情況下，您可以使用它來更新預設文本方向，如下所示： 123[/語法] [語法]setlocale （LC_ALL， new_locale）;d許可權 = gtk_get_locale_direction （）;gtk_widget_set_default_direction （方向）;[/語法]
返回
當前區域設置的GtkTextDirection
自 3.12 起
另請參見
gtk3-General


------------ KeyGTK3gtk_get_major_version ----

gtk_get_major_version
返回 GTK+ 庫的主版本號。（例如，在 GTK+ 版本 3.1.5 中，這是 3。此函數位於庫中，因此它表示您的代碼正在運行的 GTK+ 庫。與巨集形成對比，巨集表示您在編譯代碼時包含的 GTK+ 標頭的主要版本。GTK_MAJOR_VERSION
返回
GTK+ 庫的主要版本號
自 3.0 起
另請參見
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_get_micro_version ----

gtk_get_micro_version
返回 GTK+ 庫的微型版本號。（例如，在 GTK+ 版本 3.1.5 中，這是 5。此函數位於庫中，因此它表示您的代碼正在運行的 GTK+ 庫。與巨集形成對比，巨集表示您在編譯代碼時包含的 GTK+ 標頭的微版本。GTK_MICRO_VERSION
返回
GTK+ 庫的微型版本號
自 3.0 起
另請參見
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_get_minor_version ----

gtk_get_minor_version
返回 GTK+ 庫的次要版本號。（例如，在 GTK+ 版本 3.1.5 中，這是 1。此函數位於庫中，因此它表示您的代碼正在運行的 GTK+ 庫。與巨集形成對比，巨集表示編譯代碼時包含的 GTK+ 標頭的次要版本。GTK_MINOR_VERSION
返回
GTK+ 庫的次要版本號
自 3.0 起
另請參見
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_get_option_group ----

gtk_get_option_group
為 GTK+ 和 GDK 識別的命令列參數返回 a。如果您usingg_option_context_parse（）來解析命令列參數，則應將此組添加到您的 g_option_context_add_group（） 中。GOptionGroupGOptionContext
語法
參數
open_default_display- 是否在解析命令列參數時打開預設顯示
返回
a 用於 GTK+ 識別的命令列參數GOptionGroup
自 2.6 起
另請參見
gtk3-General


------------ KeyGTK3gtk_grab_add ----

gtk_grab_add
使小部件成為當前抓取的小部件。這意味著與同一應用程式中的其他小部件的交互被阻止，滑鼠和鍵盤事件被傳遞到此小部件。如果 widget 不敏感，則它不會設置為當前抓取的小部件，並且此函數不執行任何操作。
語法
參數
widget- 抓取鍵盤和指標事件的小部件
另請參見
gtk3-General


------------ KeyGTK3gtk_grab_get_current ----

gtk_grab_get_current
查詢預設窗口組的當前抓取。
返回
當前具有抓取的小部件，如果沒有抓取處於活動狀態，則為 NULL。[無轉移]
另請參見
gtk3-General


------------ KeyGTK3gtk_grab_remove ----

gtk_grab_remove
從給定的小部件中刪除抓取。您必須將調用配對到 gtk_grab_add（） 和 gtk_grab_remove（）。如果小部件沒有抓取，則此函數不執行任何操作。
語法
參數
widget- 放棄抓取的小部件
另請參見
gtk3-General


------------ KeyGTK3gtk_gradient_add_color_stop ----

gtk_gradient_add_color_stop
gtk_gradient_add_color_stop自版本 3.8 起已棄用，不應在新編寫的代碼中使用。已棄用。向漸變添加停止點顏色。GtkGradient
語法
參數
gradient- 一GtkGradient
offset- 色標的偏移量
color- 使用的顏色
自 3.0 起
另請參見
gtk3-GtkGradient


------------ KeyGTK3gtk_gradient_new_linear ----

gtk_gradient_new_linear
gtk_gradient_new_linear自 3.8 版起已棄用，不應在新編寫的代碼中使用。已棄用。沿 （x0， y0） 和 （x1， y1） 定義的線創建新的線性漸變。在使用漸變之前，必須通過gtk_gradient_add_color_stop（） 添加一些停止顏色。GtkGradient
語法
參數
x0- 起點的X座標
y0- 起點的Y座標
x1- 終點的X座標
y1- 終點的Y座標
返回
新創建的GtkGradient
自 3.0 起
另請參見
gtk3-GtkGradient


------------ KeyGTK3gtk_gradient_new_radial ----

gtk_gradient_new_radial
gtk_gradient_new_radial自 3.8 版起已棄用，不應在新編寫的代碼中使用。已棄用。沿由 （x0， y0， radius0） 和 （x1， y1， radius1） 定義的兩個圓創建新的徑向漸變。在使用漸變之前，必須通過gtk_gradient_add_color_stop（） 添加許多停止顏色。GtkGradient
語法
參數
x0- 開始圓的X座標
y0- 起始圓的Y座標
radius0- 起始圓的半徑
x1- 結束圓的X座標
y1- 結束圓的Y座標
radius1- 末端圓的半徑
返回
新創建的GtkGradient
自 3.0 起
另請參見
gtk3-GtkGradient


------------ KeyGTK3gtk_gradient_ref ----

gtk_gradient_ref
gtk_gradient_ref自 3.8 版起已棄用，不應在新編寫的代碼中使用。已棄用。增加漸變的參考計數。GtkGradient
語法
參數
gradient- 一GtkGradient
返回
相同的漸變
自 3.0 起
另請參見
gtk3-GtkGradient


------------ KeyGTK3gtk_gradient_resolve ----

gtk_gradient_resolve
gtk_gradient_resolve自版本 3.8 起已棄用，不應在新編寫的代碼中使用。已棄用。如果漸變是可解析的，則將使用解析的梯度作為cairo_pattern_t填充resolved_gradient，並返回 TRUE。通常，如果無法解析漸變，則由於它被定義為在道具中不具有特徵的命名顏色之上。GtkGradient
語法
參數
gradient- 一GtkGradient
props  -  	GtkStyleProperties在解析命名顏色時使用
resolved_gradient- 已解析模式的返回位置。[輸出]
返回
如果梯度已解析，則為 TRUE
自 3.0 起
另請參見
gtk3-GtkGradient


------------ KeyGTK3gtk_gradient_resolve_for_context ----

gtk_gradient_resolve_for_context
gtk_gradient_resolve_for_context已棄用，不應在新編寫的代碼中使用。
另請參見
gtk3-GtkGradient


------------ KeyGTK3gtk_gradient_to_string ----

gtk_gradient_to_string
gtk_gradient_to_string自版本 3.8 起已棄用，不應在新編寫的代碼中使用。已棄用。為漸變創建適合在 GTK CSS 檔中使用的字串表示形式。GtkGradient
語法
參數
gradient- 要列印的漸變
返回
gradien 的字串表示形式
另請參見
gtk3-GtkGradient


------------ KeyGTK3gtk_gradient_unref ----

gtk_gradient_unref
gtk_gradient_unref自 3.8 版起已棄用，不應在新編寫的代碼中使用。已棄用。減少梯度的參考計數，如果引用計數達到 0，則釋放其記憶體。GtkGradient
語法
參數
gradient- 一GtkGradient
自 3.0 起
另請參見
gtk3-GtkGradient


------------ KeyGTK3gtk_grid_attach ----

gtk_grid_attach
將微件添加到網格。孩子的位置由左和上決定。細胞的數量？孩子將佔據由寬度和身高決定。
語法
參數
grid- 一GtkGrid
child- 要添加的小部件
left- 要將子項左側附加到的列號
top- 要將子項的頂部附加到的行號
width- 子項將跨越的列數
height- 子項將跨越的行數
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_attach_next_to ----

gtk_grid_attach_next_to
將微件添加到網格。該構件放置在同級旁邊，位於旁邊確定的一側。當同級為 NULL 時，構件將放置在行（forleft 或 right placement）或列 0（對於頂部或底部放置）中，位於以並排指示的末尾。附加標記為 [1]、[2]、[3] 且同級 == NULL 和 side == GTK_POS_LEFT的小部件將生成 3[1] 的佈局。
語法
參數
grid- 一GtkGrid
child- 要添加的小部件
sibling- 網格的子項，該子項將被放置在子項的旁邊，或 NULL 將子項放在開頭或結尾處。[允許-無]
side- 兄弟姐妹的一側，孩子位於旁邊
width- 子項將跨越的列數
height- 子項將跨越的行數
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_get_baseline_row ----

gtk_grid_get_baseline_row
返回定義網格的全域基線的行。
語法
參數
grid- 一GtkGrid
返回
定義全域基線的行索引
自 3.10 起
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_get_child_at ----

gtk_grid_get_child_at
獲取網格的子級，其區域覆蓋其左上角位於左上角的網格單元。
語法
參數
grid- 一GtkGrid
left- 儲存格的左邊緣
top- 細胞的上邊緣
返回
給定位置的子項，或 NULL。[無轉移]
自 3.2 起
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_get_column_homogeneous ----

gtk_grid_get_column_homogeneous
返回網格的所有列是否具有相同的寬度。
語法
參數
grid- 一GtkGrid
返回
網格的所有列是否具有相同的寬度。
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_get_column_spacing ----

gtk_grid_get_column_spacing
返回網格列之間的間距量。
語法
參數
grid- 一GtkGrid
返回
網格的列間距
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_get_row_baseline_position ----

gtk_grid_get_row_baseline_position
返回按 gtk_grid_set_row_baseline_position（） 或默認valueGTK_BASELINE_POSITION_CENTER設置的行的基線位置。
語法
參數
grid- 一GtkGrid
row- 行索引
返回
行的基線位置
自 3.10 起
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_get_row_homogeneous ----

gtk_grid_get_row_homogeneous
返回網格的所有行是否具有相同的高度。
語法
參數
grid- 一GtkGrid
返回
網格的所有行是否具有相同的高度。
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_get_row_spacing ----

gtk_grid_get_row_spacing
返回網格行之間的間距量。
語法
參數
grid- 一GtkGrid
返回
網格的行距
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_insert_column ----

gtk_grid_insert_column
在指定位置插入列。附著在此位置或右側的子項將向右移動一列。跨越這個位置的子項被生長到跨越新柱子。
語法
參數
grid- 一GtkGrid
position- 插入列的位置
自 3.2 起
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_insert_next_to ----

gtk_grid_insert_next_to
在指定位置插入行或列。新行或新列位於同級行旁邊，由並排確定的側向。如果 side 是 GTK_POS_TOP 或 GTK_POS_BOTTOM，則插入一行。如果邊GTK_POS_LEFT GTK_POS_RIGHT，則插入一列。
語法
參數
grid- 一GtkGrid
sibling- 網格的子項，新行或新列將放置在
side- 兄弟姐妹的一側，孩子位於旁邊
自 3.2 起
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_insert_row ----

gtk_grid_insert_row
在指定位置插入一行。附著在此位置或下方的兒童向下移動一行。跨越這個位置的孩子長大到跨越新的行。
語法
參數
grid- 一GtkGrid
position- 插入行的位置
自 3.2 起
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_new ----

gtk_grid_new
創建新的網格構件。
返回
新的GtkGrid
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_remove_column ----

gtk_grid_remove_column
從網格中刪除列。放置在此列中的子項將被刪除，跨越與此列重疊的子項的子項的寬度將減小 1，並且列後的子項將向左移動。
語法
參數
grid- 一GtkGrid
position- 要刪除的列的位置
自 3.10 起
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_remove_row ----

gtk_grid_remove_row
從網格中刪除一行。放置在此行中的子項將被移除，跨度與此行重疊的子項的其高度減小 1，並且 roware 下方的子項向上移動。
語法
參數
grid- 一GtkGrid
position- 要刪除的行的位置
自 3.10 起
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_set_baseline_row ----

gtk_grid_set_baseline_row
設置定義整個網格的全域基線的行。網格中的每一行都可以有自己的本地基線，但其中只有一行是全域的，這意味著它將是網格父級中的基線。
語法
參數
grid- 一GtkGrid
row- 行索引
返回
定義全域基線的行索引
自 3.10 起
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_set_column_homogeneous ----

gtk_grid_set_column_homogeneous
設置網格的所有列是否具有相同的寬度。
語法
參數
grid- 一GtkGrid
homogeneous- TRUE 使列均勻
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_set_column_spacing ----

gtk_grid_set_column_spacing
設置網格列之間的間距量。
語法
參數
grid- 一GtkGrid
spacing- 列之間要插入的空間量
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_set_row_baseline_position ----

gtk_grid_set_row_baseline_position
設置基線在網格行上的定位方式，以防為該行分配的空間超過請求的空間。
語法
參數
grid- 一GtkGrid
row- 行索引
pos- 一GtkBaselinePosition
自 3.1 起
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_set_row_homogeneous ----

gtk_grid_set_row_homogeneous
設置網格的所有行是否具有相同的高度。
語法
參數
grid- 一GtkGrid
homogeneous- TRUE 使行均勻
另請參見
GtkGrid


------------ KeyGTK3gtk_grid_set_row_spacing ----

gtk_grid_set_row_spacing
設置網格行之間的間距量。
語法
參數
grid- 一GtkGrid
spacing- 在行之間插入的空間量
另請參見
GtkGrid


------------ KeyGTK3gtk_handle_box_get_child_detached ----

gtk_handle_box_get_child_detached
gtk_handle_box_get_child_detached自 3.4 版起已棄用，不應在新編寫的代碼中使用。已被棄用。控制碼框的子項當前是否已分離。GtkHandleBox
語法
參數
handle_box- 一GtkHandleBox
返回
如果子項當前已分離，則為 TRUE，否則為 FALSE
自 2.1 起
另請參見
GtkHandleBox


------------ KeyGTK3gtk_handle_box_get_handle_position ----

gtk_handle_box_get_handle_position
gtk_handle_box_get_handle_position自版本 3.4 起已棄用，不應在新編寫的代碼中使用。已被棄用。獲取控制碼框的控制碼位置。Seegtk_handle_box_set_handle_position（）.GtkHandleBox
語法
參數
handle_box- 一GtkHandleBox
返回
當前控制碼位置。
另請參見
GtkHandleBox


------------ KeyGTK3gtk_handle_box_get_shadow_type ----

gtk_handle_box_get_shadow_type
gtk_handle_box_get_shadow_type自版本 3.4 起已棄用，不應在新編寫的代碼中使用。已被棄用。獲取在控制滑塊框周圍繪製的陰影的類型。Seegtk_handle_box_set_shadow_type（）.GtkHandleBox
語法
參數
handle_box- 一GtkHandleBox
返回
當前在控制滑塊框周圍繪製的陰影類型。
另請參見
GtkHandleBox


------------ KeyGTK3gtk_handle_box_get_snap_edge ----

gtk_handle_box_get_snap_edge
gtk_handle_box_get_snap_edge自 3.4 版起已棄用，不應在新編寫的代碼中使用。已被棄用。獲取用於確定手柄框重新連接的邊緣。請參見 gtk_handle_box_set_snap_edge（）。GtkHandleBox
語法
參數
handle_box- 一GtkHandleBox
返回
用於確定重新附著的邊緣，或者（GtkPositionType）-1（如果這是從手柄位置確定的（根據預設值）。
另請參見
GtkHandleBox


------------ KeyGTK3gtk_handle_box_new ----

gtk_handle_box_new
gtk_handle_box_new自 3.4 版起已棄用，不應在新編寫的代碼中使用。已被棄用。創建一個新的控制碼框。GtkHandleBox
返回
一個新的.GtkHandleBox
另請參見
GtkHandleBox


------------ KeyGTK3gtk_handle_box_set_handle_position ----

gtk_handle_box_set_handle_position
gtk_handle_box_set_handle_position自 3.4 版起已棄用，不應在新編寫的代碼中使用。已被棄用。設置繪製控點的手柄框的一側。GtkHandleBox
語法
參數
handle_box- 一GtkHandleBox
position- 手柄箱的一側，應繪製手柄。
另請參見
GtkHandleBox


------------ KeyGTK3gtk_handle_box_set_shadow_type ----

gtk_handle_box_set_shadow_type
gtk_handle_box_set_shadow_type自版本 3.4 起已棄用，不應在新編寫的代碼中使用。已被棄用。設置要在控點框邊框周圍繪製的陰影類型。GtkHandleBox
語法
參數
handle_box- 一GtkHandleBox
type- 陰影類型。
另請參見
GtkHandleBox


------------ KeyGTK3gtk_handle_box_set_snap_edge ----

gtk_handle_box_set_snap_edge
gtk_handle_box_set_snap_edge自 3.4 版起已棄用，不應在新編寫的代碼中使用。已被棄用。設置控制框的捕捉邊緣。捕捉邊緣是分離的子項的邊緣，必須與 “ghost？當孩子被拆下以重新連接撕裂的窗戶時，左後方。通常，應選擇捕捉邊緣，以便在撕掉手柄盒時將其保持在螢幕上的同一位置。如果未設置捕捉邊，則將從控制滑塊位置猜測適當的值。如果手柄位置GTK_POS_RIGHT或GTK_POS_LEFT，則GTK_POS_TOP捕捉邊緣，否則將GTK_POS_LEFT。GtkHandleBox
語法
參數
handle_box- 一GtkHandleBox
edge- 捕捉邊緣，或 -1 取消設置值;在這種情況下，GTK+將嘗試在將來猜測適當的值。
另請參見
GtkHandleBox


------------ KeyGTK3gtk_hbox_new ----

gtk_hbox_new
gtk_hbox_new自版本 3.2 起已棄用，不應在新編寫的代碼中使用。您可以將 gtk_box_new（） 與 GTK_ORIENTATION_HORIZONTAL 一起使用，這是一個快速簡便的更改。但建議是切換到 ，因為 最終會消失。請參 閱從其他容器遷移到 GtkGrid。創建新的 容器。GtkGridGtkBoxGtkHBox
語法
參數
homogeneous- 如果所有子項都獲得相等的空間分配，則為 true。
spacing- 預設情況下要放置在子級之間的圖元數。
返回
一個新的GtkHBox
另請參見
GtkHBox


------------ KeyGTK3gtk_hbutton_box_new ----

gtk_hbutton_box_new
gtk_hbutton_box_new自 3.2 版起已棄用，不應在新編寫的代碼中使用。將 gtk_button_box_new（） 與 GTK_ORIENTATION_HORIZONTAL 改為創建新的水準按鈕框。
返回
一個新的按鈕框GtkWidget
另請參見
GtkHButtonBox


------------ KeyGTK3gtk_header_bar_get_custom_title ----

gtk_header_bar_get_custom_title
檢索標題的自訂標題構件。Seegtk_header_bar_set_custom_title（）.
語法
參數
bar- 一GtkHeaderBar
返回
標題的自訂標題構件，如果未顯式設置任何內容，則為 NULL。[無轉移]
自 3.10 起
另請參見
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_get_decoration_layout ----

gtk_header_bar_get_decoration_layout
獲取withgtk_header_bar_set_decoration_layout（） 設置的裝飾佈局。
語法
參數
bar- 一GtkHeaderBar
返回
裝修佈局
自 3.1 起
另請參見
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_get_has_subtitle ----

gtk_header_bar_get_has_subtitle
檢索標題列是否為副標題保留空間，而不考慮當前是否設置了副標題。
語法
參數
bar- 一GtkHeaderBar
返回
如果標題列為字幕保留空間，則為 TRUE
自 3.12 起
另請參見
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_get_show_close_button ----

gtk_header_bar_get_show_close_button
返回此標題列是否顯示標準視窗裝飾。
語法
參數
bar- 一GtkHeaderBar
返回
如果顯示裝飾，則為 TRUE
自 3.10 起
另請參見
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_get_subtitle ----

gtk_header_bar_get_subtitle
檢索標頭的副標題。請參見 gtk_header_bar_set_subtitle（）。
語法
參數
bar- 一GtkHeaderBar
返回
標頭的副標題，如果未顯式設置任何內容，則為 NULL。返回的字串歸小部件所有，不得修改或釋放。
自 3.10 起
另請參見
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_get_title ----

gtk_header_bar_get_title
檢索標頭的標題。請參見gtk_header_bar_set_title（）。
語法
參數
bar- 一GtkHeaderBar
返回
標頭的標題，如果未顯式設置任何內容，則為 NULL。返回的字串歸小部件所有，不得修改或釋放。
自 3.10 起
另請參見
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_new ----

gtk_header_bar_new
創建新的構件。GtkHeaderBar
返回
一個新的GtkHeaderBar
自 3.10 起
另請參見
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_pack_end ----

gtk_header_bar_pack_end
將子項添加到條形，參照橫條圖的末尾進行包裝。
語法
參數
bar- 一GtkHeaderBar
child- 要添加到欄GtkWidget
自 3.10 起
另請參見
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_pack_start ----

gtk_header_bar_pack_start
將子項添加到 bar，參照 bar 的開始進行打包。
語法
參數
bar- 一GtkHeaderBar
child- 要添加到欄GtkWidget
自 3.10 起
另請參見
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_set_custom_title ----

gtk_header_bar_set_custom_title
設置 的自訂標題。標題應幫助用戶識別當前視圖。這超過由gtk_header_bar_set_title（） orgtk_header_bar_set_subtitle（） 設置的任何標題。要獲得與內置標題和副標題相同的樣式，請使用 ？title？和“字幕”樣式的類。應將自訂標題設置為 NULL，以使標題標籤再次可見。GtkHeaderBar
語法
參數
bar- 一GtkHeaderBar
title_widget- 用於標題的自訂小部件。[允許-無]
自 3.10 起
另請參見
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_set_decoration_layout ----

gtk_header_bar_set_decoration_layout
設置此標題列的裝飾佈局，覆蓋該設置。覆蓋設置可能有正當理由，例如標題列設計不允許按鈕佔用右側的空間，或者只為單個關閉按鈕提供空間。拆分標題列是重寫設置的另一個示例。字串的格式是按鈕名稱，以逗號分隔。冒號將應顯示在左側的按鈕與右側的按鈕分隔開來。識別的按鈕名稱包括最小化、最大化、關閉、圖示（視窗圖示）和功能表（用於後備應用功能表的功能表按鈕）。例如，？menu：minimize，maximize，close？指定左側的菜單，以及右側的最小化、最大化和關閉按鈕。?gtk-decoration-layout?
語法
參數
bar- 一GtkHeaderBar
layout- 一個裝飾佈局，或 NULL 取消設置佈局。[允許-無]
自 3.12 起
另請參見
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_set_has_subtitle ----

gtk_header_bar_set_has_subtitle
設置標題列是否應為副標題保留空間，即使當前未設置任何空間。
語法
參數
bar- 一GtkHeaderBar
setting- TRUE 為字幕保留空間
自 3.12 起
另請參見
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_set_show_close_button ----

gtk_header_bar_set_show_close_button
設置此標題列是否顯示標準視窗裝飾，包括關閉、最大化和最小化。
語法
參數
bar- 一GtkHeaderBar
setting- 真實顯示標準寡婦裝飾
自 3.10 起
另請參見
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_set_subtitle ----

gtk_header_bar_set_subtitle
設置 的副標題。標題應為使用者提供其他詳細資訊，以説明他識別當前視圖。請注意，預設情況下，GtkHeaderBar會為字幕保留空間，即使當前未設置任何內容也是如此。如果不需要這樣做，請將該屬性設置為 FALSE。GtkHeaderBar?has-subtitle?
語法
參數
bar- 一GtkHeaderBar
subtitle- 副標題，或空。[允許-無]
自 3.10 起
另請參見
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_set_title ----

gtk_header_bar_set_title
設置 的標題。標題應有助於用戶識別當前視圖。一個好的標題不應該包含應用程式名稱。GtkHeaderBar
語法
參數
bar- 一GtkHeaderBar
title- 標題，或空。[允許-無]
自 3.10 起
另請參見
GtkHeaderBar


------------ KeyGTK3gtk_hpaned_new ----

gtk_hpaned_new
gtk_hpaned_new自 3.2 版起已被棄用，不應在新編寫的代碼中使用。將 gtk_paned_new（） 與 GTK_ORIENTATION_HORIZONTAL 改為創建一個新的GtkHPaned
返回
新的GtkHPaned[/code
See Also
GtkHPaned


------------ KeyGTK3gtk_hscale_new ----

gtk_hscale_new
gtk_hscale_new自版本 3.2 起已棄用，不應在新編寫的代碼中使用。將 gtk_scale_new（） 與 GTK_ORIENTATION_HORIZONTAL 一起使用可改為創建新的 .GtkHScale
語法
參數
adjustment- 設置刻度範圍。GtkAdjustment
返回
一個新的.GtkHScale
另請參見
GtkHScale


------------ KeyGTK3gtk_hscale_new_with_range ----

gtk_hscale_new_with_range
gtk_hscale_new_with_range自版本 3.2 起已棄用，不應在新編寫的代碼中使用。將 gtk_scale_new_with_range（） 與 GTK_ORIENTATION_HORIZONTAL改為創建一個新的水準比例小部件，該小部件允許使用者使用增量步驟輸入介於最小值和最大值（包括最小值和最大值）之間的數位。步驟必須為非零;它是使用方向鍵調整刻度值時滑塊移動的距離。請注意，如果階躍為 10 的冪，則推導精度的方式效果最佳。如果生成的精度不適合您需要的精度，請使用 gtk_scale_set_digits（） 進行更正。
語法
參數
min- 最小值
max- 最大值
step- 步長增量（刻度大小）與鍵盤快速鍵一起使用
返回
一個新的GtkHScale[/code
See Also
GtkHScale


------------ KeyGTK3gtk_hscrollbar_new ----

gtk_hscrollbar_new
gtk_hscrollbar_new自版本 3.2 起已棄用，不應在新編寫的代碼中使用。將 gtk_scrollbar_new（） 與 GTK_ORIENTATION_HORIZONTAL 改為創建新的水準捲軸。
語法
參數
adjustment- 要使用的，或 NULL 創建新的調整。[允許-無]GtkAdjustment
返回
新的GtkHScrollbar[/code
See Also
GtkHScrollbar


------------ KeyGTK3gtk_hseparator_new ----

gtk_hseparator_new
gtk_hseparator_new自 3.2 版起已棄用，不應在新編寫的代碼中使用。將 gtk_separator_new（） 與 GTK_ORIENTATION_HORIZONTAL 一起使用可改為創建新的 .GtkHSeparator
返回
一個新的GtkHSeparator
另請參見
GtkHSeparator


------------ KeyGTK3gtk_hsv_get_color ----

gtk_hsv_get_color
gtk_hsv_get_color已棄用，不應在新編寫的代碼中使用。在 HSV 顏色選擇器中查詢使用中色彩。返回值將在 [0.0， 1.0] 範圍內。
語法
參數
hsv- 單純皰疹病毒顏色選擇器
h- 返回色調的值。[輸出]
s- 飽和度的返回值。[輸出]
v- 返回值的值。[輸出]
自 2.14 起
另請參見
GtkHSV


------------ KeyGTK3gtk_hsv_get_metrics ----

gtk_hsv_get_metrics
gtk_hsv_get_metrics已棄用，不應在新編寫的代碼中使用。查詢 HSV 顏色選擇器的大小和環寬度。
語法
參數
hsv- 單純皰疹病毒顏色選擇器
size- 返回色相環直徑的值。[輸出]
ring_width- 返回色調環寬度的值。[輸出]
自 2.14 起
另請參見
GtkHSV


------------ KeyGTK3gtk_hsv_is_adjusting ----

gtk_hsv_is_adjusting
gtk_hsv_is_adjusting已棄用，不應在新編寫的代碼中使用。如果對其值進行多次快速更改，例如，當使用者使用滑鼠調整值時，HSV 顏色選擇器可以說是在調整。此函數查詢是否正在調整 HSV 顏色選擇器。
語法
參數
hsv- 一GtkHSV
返回
如果用戶端可以忽略對顏色值的更改，因為它們可能是暫時的，則為 TRUE，或者如果用戶端應該將顏色值狀態視為最終狀態，則為 FALSE。
自 2.14 起
另請參見
GtkHSV


------------ KeyGTK3gtk_hsv_new ----

gtk_hsv_new
gtk_hsv_new已棄用，不應在新編寫的代碼中使用。創建新的 HSV 顏色選擇器。
返回
新創建的 HSV 顏色選擇器。
自 2.14 起
另請參見
GtkHSV


------------ KeyGTK3gtk_hsv_set_color ----

gtk_hsv_set_color
gtk_hsv_set_color已棄用，不應在新編寫的代碼中使用。在 HSV 顏色選擇器中設置使用中色彩。顏色分量值必須在 [0.0， 1.0] 範圍內。
語法
參數
hsv- 單純皰疹病毒顏色選擇器
h- 順化
s- 飽和度
v- 價值
自 2.14 起
另請參見
GtkHSV


------------ KeyGTK3gtk_hsv_set_metrics ----

gtk_hsv_set_metrics
gtk_hsv_set_metrics已棄用，不應在新編寫的代碼中使用。設置 HSV 顏色選擇器的大小和環寬度。
語法
參數
hsv- 單純皰疹病毒顏色選擇器
size- 色調環的直徑
ring_width- 色調環的寬度
自 2.14 起
另請參見
GtkHSV


------------ KeyGTK3gtk_hsv_to_rgb ----

gtk_hsv_to_rgb
將顏色從 HSV 空間轉換為 RGB。輸入值必須在 [0.0， 1.0] 範圍內;輸出值將在同一範圍內。
語法
參數
h- 順化
s- 飽和度
v- 價值
r- 返回紅色組件的值。[輸出]
g- 返回綠色組件的值。[輸出]
b- 返回藍色分量的值。[輸出]
自 2.14 起
另請參見
GtkHSV


------------ KeyGTK3gtk_icon_factory_add ----

gtk_icon_factory_add
gtk_icon_factory_add自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。將給定的icon_set添加到圖示工廠，在namestock_id下。stock_id應該為您的應用程式指定命名空間，例如？myapp-whatever-icon？。通常，應用程式創建一個，然後將其添加到默認工廠列表中withgtk_icon_factory_add_default（）。然後，他們將stock_id轉接，例如顯示圖示。主題可以提供具有相同名稱的圖示（例如“myapp-whatever-icon”）來覆蓋應用程式的預設圖示。如果某個圖示已在工廠中存在了 stock_id，則不引用該圖示，並將其替換為新icon_set。GtkIconThemeGtkIconFactoryGtkImage
語法
參數
factory- 一GtkIconFactory
stock_id- 圖示名稱
icon_set- 圖示集
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_factory_add_default ----

gtk_icon_factory_add_default
gtk_icon_factory_add_default自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用。將圖示工廠添加到bygtk_style_lookup_icon_set（） 搜索的圖示工廠清單中。這意味著，例如，gtk_image_new_from_stock（）將能夠在工廠中找到圖示。通常會為每個帶有圖示的庫或應用程式添加一個圖示工廠。預設圖示工廠可以被主題覆蓋。GtkIconTheme
語法
參數
factory- 一GtkIconFactory
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_factory_lookup ----

gtk_icon_factory_lookup
gtk_icon_factory_lookup自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。在圖示工廠中查找stock_id，如果找到，則返回圖示設置，否則為 NULL。為了向使用者顯示，您應該在將顯示圖示的 for thewidget 上使用 gtk_style_lookup_icon_set（），而不是直接使用此函數，以便考慮主題。GtkIconThemeGtkStyle
語法
參數
factory- 一GtkIconFactory
stock_id- 圖示名稱
返回
stock_id的圖示集。 [無轉移]
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_factory_lookup_default ----

gtk_icon_factory_lookup_default
gtk_icon_factory_lookup_default自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。在預設圖示工廠清單中查找圖示。為了向使用者顯示，您應該在將顯示圖示的小部件上使用gtk_style_lookup_icon_set（），而不是直接使用此功能，以便將主題帶入帳戶。GtkIconThemeGtkStyle
語法
參數
stock_id- 圖示名稱
返回
a 或空。[無轉移]GtkIconSet
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_factory_new ----

gtk_icon_factory_new
gtk_icon_factory_new自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。創建新的 .圖示工廠管理一個集合 ;a 管理一組分離圖示的變體（即 a 包含不同大小和小部件狀態的變體）。圖示工廠中的圖示由 astock ID 命名，astock ID 是標識圖示的簡單字串。每個都有一個從當前主題派生出來的清單;在搜索圖示時，首先會諮詢這些圖示工廠。如果主題未設置特定圖示，GTK+ 將在預設圖示工廠清單中查找該圖示，維護bygtk_icon_factory_add_default（） andgtk_icon_factory_remove_default（）。帶有圖示的應用程式應使用其圖示添加預設圖示工廠，這將允許主題覆蓋應用程式的圖示。GtkIconThemeGtkIconFactoryGtkIconSetsGtkIconSetGtkIconSetGtkStyleGtkIconFactorys
返回
一個新的GtkIconFactory
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_factory_remove_default ----

gtk_icon_factory_remove_default
gtk_icon_factory_remove_default自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。從預設圖示工廠清單中刪除圖示工廠。通常不使用;您可以將它用於可以卸載或關閉的庫。GtkIconTheme
語法
參數
factory- 以前添加的gtk_icon_factory_add_default（）GtkIconFactory
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_info_copy ----

gtk_icon_info_copy
gtk_icon_info_copy自 3.8 版起已棄用，不應在新編寫的代碼中使用。使用 g_object_ref（）製作 .GtkIconInfo
語法
參數
icon_info- 一GtkIconInfo
返回
新的GtkIconInfo
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_free ----

gtk_icon_info_free
gtk_icon_info_free自 3.8 版起已棄用，不應在新編寫的代碼中使用。使用g_object_unref（）免費和相關資訊GtkIconInfo
語法
參數
icon_info- 一GtkIconInfo
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_get_attach_points ----

gtk_icon_info_get_attach_points
獲取圖示的附加點集。附加點是圖示中的一個位置，可用作錨點，用於將組合或疊加附加到圖示。
語法
參數
icon_info- 一GtkIconInfo
points- 位置存儲指向點陣列的指標，或 NULLfree g_free（） 的點陣列。[允許-無][陣列長度 = n_points][輸出]
n_points- 存儲點數的位置（以點為單位），或 NULL。[允許-無]
返回
如果圖示有任何附加點，則為 TRUE。
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_get_base_scale ----

gtk_icon_info_get_base_scale
獲取圖示的基本比例。基本比例是由圖示主題創建者指定的圖示比例。例如，為視窗比例為 2 的高 dpi 螢幕繪製的 anicon，基數為 32，其高度為 64 圖元，base_scale為 2。
語法
參數
icon_info- 一GtkIconInfo
返回
基本比例。
自 3.10 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_get_base_size ----

gtk_icon_info_get_base_size
獲取圖示的基本大小。基本大小是由圖示主題創建者指定的圖示的大小。這可能與圖像的實際大小不同;這方面的一個例子是小徽章圖示，可以附加到較大的圖示上。這些圖示將被賦予與它們所附加到的較大圖示相同的基本大小。請注意，對於縮放圖示，基本大小不包括基本比例。
語法
參數
icon_info- 一GtkIconInfo
返回
基本大小，或 0（如果圖示沒有已知的基大小）。
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_get_builtin_pixbuf ----

gtk_icon_info_get_builtin_pixbuf
獲取此圖示的內置圖像（如果有）。要允許GTK+使用內置圖示圖像，您必須傳遞theGTK_ICON_LOOKUP_USE_BUILTIN togtk_icon_theme_lookup_icon（）。
語法
參數
icon_info- 一GtkIconInfo
返回
內置圖像圖元，或 NULL。Noextra 引用被添加到返回的 pixbuf 中，因此，如果要保留它，則必須使用 g_object_ref（）。不得修改返回的映射。[無轉移]
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_get_display_name ----

gtk_icon_info_get_display_name
獲取圖示的顯示名稱。顯示名稱是用於在使用者可見的上下文中代替圖示名稱（如圖示清單）的字串。
語法
參數
icon_info- 一GtkIconInfo
返回
圖示的顯示名稱或 NULL（如果圖示沒有指定的顯示名稱）。此值歸icon_infoand不得修改或免費。
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_get_embedded_rect ----

gtk_icon_info_get_embedded_rect
獲取圖示內矩形的座標，該圖示可用於顯示資訊，例如預覽文字檔的內容。有關坐標系的進一步資訊，請參見 gtk_icon_info_set_raw_coordinates（）。
語法
參數
icon_info- 一GtkIconInfo
rectangle  -  	 GdkRectangle在其中存儲嵌入式矩形座標;僅當此函數返回 TRUE 時，才會存儲座標。[輸出]
返回
如果圖示具有嵌入式矩形，則為 TRUE
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_get_filename ----

gtk_icon_info_get_filename
獲取圖示的檔案名。如果theGTK_ICON_LOOKUP_USE_BUILTIN標誌被傳遞給gtk_icon_theme_lookup_icon（），如果返回內置圖示，則可能沒有檔案名;在這種情況下，您應該使用gtk_icon_info_get_builtin_pixbuf（）。
語法
參數
icon_info- 一GtkIconInfo
返回
應改用圖示的檔案名或 NULLif gtk_icon_info_get_builtin_pixbuf（）。此處的值為 GTK+ 所有，不應修改或釋放。[類型檔案名]
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_is_symbolic ----

gtk_icon_info_is_symbolic
檢查圖示是否具有象徵意義。這當前僅使用檔案名而不是檔內容來確定這一點。這種行為將來可能會改變。
語法
參數
icon_info- 一GtkIconInfo
返回
如果圖示是符號性的，則為 TRUE，否則為 FALSE。
自 3.1 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_icon ----

gtk_icon_info_load_icon
呈現以前在圖示主題中查找的圖示 usinggtk_icon_theme_lookup_icon（）;大小將基於傳遞到gtk_icon_theme_lookup_icon（） 的大小。請注意，生成的pixbuf可能不完全是這個大小;圖示主題可能具有與其標稱大小略有不同的圖示，此外，GTK+將避免縮放它認為足夠接近其請求大小的圖示，或者源圖像必須放大得太遠的圖示。（這可以保持清晰度。可以通過在獲取 時傳遞 GTK_ICON_LOOKUP_FORCE_SIZE 標誌來更改此行為。如果已指定此標誌，則此函數的 pixbufreturn 將縮放到確切的大小。GtkIconInfo
語法
參數
icon_info- a from gtk_icon_theme_lookup_icon（）GtkIconInfo
error- 存儲故障錯誤資訊的位置，或空。[允許-無]
返回
渲染的圖示;這可能是新創建的圖示或對內部圖示的新引用，因此不得修改該圖示。使用 g_object_unref（） 釋放對圖示的引用。[轉移完整]
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_icon_async ----

gtk_icon_info_load_icon_async
使用gtk_icon_theme_lookup_icon（） 非同步載入、渲染和縮放以前從圖示主題中查找的圖示。有關更多詳細資訊，請參閱 gtk_icon_info_load_icon（） 它是此調用的同步版本。
語法
參數
icon_info- a from gtk_icon_theme_lookup_icon（）GtkIconInfo
cancellable- 可選對象，空忽略。[允許-無]GCancellable
callback- 當有任務滿意時打電話。[範圍非同步]GAsyncReadyCallback
user_data- 要傳遞給回呼函數的資料。[關閉]
3.8 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_icon_finish ----

gtk_icon_info_load_icon_finish
完成非同步圖示載入，請參見gtk_icon_info_load_icon_async（）。
語法
參數
icon_info- a from gtk_icon_theme_lookup_icon（）GtkIconInfo
res- 一GAsyncResult
error- 存儲故障錯誤資訊的位置，或空。[允許-無]
返回
渲染的圖示;這可能是新創建的圖示或對內部圖示的新引用，因此不得修改該圖示。使用 g_object_unref（） 釋放對圖示的引用。[轉移完整]
3.8 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_surface ----

gtk_icon_info_load_surface
呈現以前在圖示主題中查找的圖示 usinggtk_icon_theme_lookup_icon（）;大小將基於傳遞到gtk_icon_theme_lookup_icon（） 的大小。請注意，生成的表面可能不完全是此大小;圖示主題可能具有與其標稱大小略有不同的圖示，此外，GTK+將避免縮放它認為足夠接近其請求大小的圖示，或者源圖像必須放大得太遠的圖示。（這可以保持清晰度。可以通過在獲取 時傳遞 GTK_ICON_LOOKUP_FORCE_SIZE 標誌來更改此行為。如果已指定此標誌，則此函數的 pixbufreturn 將縮放到確切的大小。GtkIconInfo
語法
參數
icon_info- a from gtk_icon_theme_lookup_icon（）GtkIconInfo
for_window  -  	 GdkWindow以優化繪圖，或 NULL。[允許-無]
error- 存儲故障錯誤資訊的位置，或空。[允許-無]
返回
渲染的圖示;這可能是新創建的圖示或對內部圖示的新引用，因此不得修改該圖示。使用 cairo_surface_destroy（） 釋放對圖示的引用。[轉移完整]
自 3.10 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_symbolic ----

gtk_icon_info_load_symbolic
載入一個圖示，對其進行修改以匹配所提供的前景，成功，警告和錯誤顏色的系統色彩。如果圖示不是符號，則函數將從gtk_icon_info_load_icon（）返回結果。這允許載入與系統主題匹配的符號圖示。除非您正在實現小部件，否則您需要useg_themed_icon_new_with_default_fallbacks（）來載入圖示。作為實現細節，載入的圖示需要是SVG類型，包含？符號？term 作為圖示名稱的最後一個元件，並使用 ？fg?, ?success?, ?警告？和 ？錯誤？SVG 檔本身中的 CSS 樣式。有關符號圖示的詳細資訊，請參閱符號圖示規範。
語法
參數
icon_info- 一GtkIconInfo
fg- 表示圖示的前景色GdkRGBA
success_color- a 表示圖示的警告顏色或 NULL 以使用默認顏色。[允許-無]GdkRGBA
warning_color- a 表示圖示的警告顏色或 NULL 以使用默認顏色。[允許-無]GdkRGBA
error_color- a 表示圖示的錯誤顏色或 NULL 以使用默認顏色（allow-none）。[允許-無]GdkRGBA
was_symbolic- a ，返回載入的圖示是否為符號圖示，以及 fgcolor 是否應用於它。[輸出][允許-無]gboolean
error- 存儲故障錯誤資訊的位置，或空。[允許-無]
返回
a 表示載入的圖示。[轉移完整]GdkPixbuf
自 3.0 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_symbolic_async ----

gtk_icon_info_load_symbolic_async
非同步載入、渲染和縮放先前使用 gtk_icon_theme_lookup_icon（） 從圖示主題中查找的符號圖示。有關更多詳細資訊，請參閱 gtk_icon_info_load_symbolic（）），這是此調用的同步版本。
語法
參數
icon_info- a from gtk_icon_theme_lookup_icon（）GtkIconInfo
fg- 表示圖示的前景色GdkRGBA
success_color- a 表示圖示的警告顏色或 NULL 以使用默認顏色。[允許-無]GdkRGBA
warning_color- a 表示圖示的警告顏色或 NULL 以使用默認顏色。[允許-無]GdkRGBA
error_color- a 表示圖示的錯誤顏色或 NULL 以使用默認顏色（allow-none）。[允許-無]GdkRGBA
cancellable- 可選對象，空忽略。[允許-無]GCancellable
callback- 當有任務滿意時打電話。[範圍非同步]GAsyncReadyCallback
user_data- 要傳遞給回呼函數的資料。[關閉]
3.8 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_symbolic_finish ----

gtk_icon_info_load_symbolic_finish
完成非同步圖示載入，請參見gtk_icon_info_load_symbolic_async（）。
語法
參數
icon_info- a from gtk_icon_theme_lookup_icon（）GtkIconInfo
res- 一GAsyncResult
was_symbolic- a ，返回載入的圖示是否為符號圖示，以及 fgcolor 是否應用於它。[輸出][允許-無]gboolean
error- 存儲故障錯誤資訊的位置，或空。[允許-無]
返回
渲染的圖示;這可能是新創建的圖示或對內部圖示的新引用，因此不得修改該圖示。使用 g_object_unref（） 釋放對圖示的引用。[轉移完整]
3.8 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_symbolic_for_context ----

gtk_icon_info_load_symbolic_for_context
載入一個圖示，對其進行修改以匹配所提供的前景，成功，警告和錯誤顏色的系統色彩。如果圖示不是符號，則函數將從gtk_icon_info_load_icon（）返回結果。此函數使用常規前景色和符號顏色以及名稱 ？success_color?, ?warning_color？和？error_color？從上下文中。這允許載入與系統主題匹配的符號圖示。有關詳細資訊，請參閱 gtk_icon_info_load_symbolic（）。
語法
參數
icon_info- 一GtkIconInfo
context- 一GtkStyleContext
was_symbolic- a ，返回載入的圖示是否為符號圖示，以及 fgcolor 是否應用於它。[輸出][允許-無]gboolean
error- 存儲故障錯誤資訊的位置，或空。[允許-無]
返回
a 表示載入的圖示。[轉移完整]GdkPixbuf
自 3.0 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_symbolic_for_context_async ----

gtk_icon_info_load_symbolic_for_context_async
非同步載入、渲染和縮放先前使用 gtk_icon_theme_lookup_icon（） 從圖示主題中查找的符號圖示。有關更多詳細資訊，請參閱 gtk_icon_info_load_symbolic_for_context（） 它是此調用的同步版本。
語法
參數
icon_info- a from gtk_icon_theme_lookup_icon（）GtkIconInfo
context- 一GtkStyleContext
cancellable- 可選對象，空忽略。[允許-無]GCancellable
callback- 當有任務滿意時打電話。[範圍非同步]GAsyncReadyCallback
user_data- 要傳遞給回呼函數的資料。[關閉]
3.8 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_symbolic_for_context_finish ----

gtk_icon_info_load_symbolic_for_context_finish
完成非同步圖示載入，請參見gtk_icon_info_load_symbolic_for_context_async（）。
語法
參數
icon_info- a from gtk_icon_theme_lookup_icon（）GtkIconInfo
res- 一GAsyncResult
was_symbolic- a ，返回載入的圖示是否為符號圖示，以及 fgcolor 是否應用於它。[輸出][允許-無]gboolean
error- 存儲故障錯誤資訊的位置，或空。[允許-無]
返回
渲染的圖示;這可能是新創建的圖示或對內部圖示的新引用，因此不得修改該圖示。使用 g_object_unref（） 釋放對圖示的引用。[轉移完整]
3.8 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_symbolic_for_style ----

gtk_icon_info_load_symbolic_for_style
gtk_icon_info_load_symbolic_for_style自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用gtk_icon_info_load_symbolic_for_context（） 代替載入圖示，對其進行修改以匹配所提供的前景、成功、警告和錯誤顏色的系統色彩。如果圖示不是符號，則函數將從gtk_icon_info_load_icon（）返回結果。這允許載入與系統主題匹配的符號圖示。有關詳細資訊，請參閱 gtk_icon_info_load_symbolic（）。
語法
參數
icon_info- 一GtkIconInfo
style- a 從中獲取顏色GtkStyle
state- 用於顏色的小部件狀態
was_symbolic- a ，返回載入的圖示是否為符號圖示，以及 fgcolor 是否應用於它。[輸出][允許-無]gboolean
error- 存儲故障錯誤資訊的位置，或空。[允許-無]
返回
a 表示載入的圖示。[轉移完整]GdkPixbuf
自 3.0 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_new_for_pixbuf ----

gtk_icon_info_new_for_pixbuf
為 .GtkIconInfoGdkPixbuf
語法
參數
icon_theme- 一GtkIconTheme
pixbuf- 要包裝在GtkIconInfo
返回
一個。[轉移完整]GtkIconInfo
自 2.14 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_info_set_raw_coordinates ----

gtk_icon_info_set_raw_coordinates
設置gtk_icon_info_get_embedded_rect（） 和 gtk_icon_info_get_attach_points（） 返回的座標是否應按圖示主題中指定的原始形式返回，而不是對 gtk_icon_info_load_icon（） 返回的 pixbuf 進行適當縮放。原始座標有點奇怪;它們被指定為與 PNG 和 XPM 圖示的未縮放圖元圖一起表示尊重，但對於 SVGicons，它們位於 1000x1000 座標空間中，該座標空間按比例縮放到圖示的最終大小。您可以使用gtk_icon_info_get_filename（））來確定圖示是否為SVGicon，並查看它是否是非NULLand，以？結尾。svg？.提供此功能主要是為了允許舊版 API 的相容性包裝器，並且預計不會對應用程式有用。
語法
參數
icon_info- 一GtkIconInfo
raw_coordinates- 嵌入的矩形和附加點的座標是否應以其原始（未縮放）形式返回。
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_set_add_source ----

gtk_icon_set_add_source
gtk_icon_set_add_source自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。圖示集有一個 清單，它們將其用作基本圖示，用於呈現不同狀態和大小的圖示。圖示是按比例縮放的，使看起來不敏感等ingtk_icon_set_render_icon（），但需要基本圖像才能使用。基本圖像以及何時使用它們由a 描述。此函數複製源，因此您可以立即重用相同的源，而不會影響圖示集。當您使用此功能時，例如：Web流覽器的“Backto上一頁”圖示可能指向Hebrew和英語中的不同方向;當不敏感時，它可能看起來不同;它可能會根據工具列模式（小/大圖示）而改變大小。因此，單個圖示集將包含圖示的所有這些變體，您可以為每個變體添加單獨的源。您幾乎總是應該添加一個“默認？具有萬用字元的所有欄位的圖示源，如果沒有更具體的源匹配，它將用作回退。 總是更喜歡更具體的圖示源而不是更通用的圖示源。將源添加到圖示集的順序不會matter.gtk_icon_set_new_from_pixbuf（） 會根據給定的 pixbuf 創建具有 adefault 圖示源的新圖示集。GtkIconThemeGtkIconSourceGtkIconSetGtkIconSourceGtkIconSet
語法
參數
icon_set- 一GtkIconSet
source- 一GtkIconSource
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_copy ----

gtk_icon_set_copy
gtk_icon_set_copy自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。按值複製icon_set。GtkIconTheme
語法
參數
icon_set- 一GtkIconSet
返回
與第一個相同的新。GtkIconSet
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_get_sizes ----

gtk_icon_set_get_sizes
gtk_icon_set_get_sizes自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。獲取此圖示集可以呈現的圖示大小的清單。返回的陣列必須使用 g_free（） 進行釋放。GtkIconTheme
語法
參數
icon_set- 一GtkIconSet
sizes- 返回大小陣列的位置。[陣列長度 = n_sizes][輸出][鍵入整型]
n_sizes- 位置存儲返回陣列中的元素數量
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_new ----

gtk_icon_set_new
gtk_icon_set_new自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用。創建新的 .A 表示各種大小和小部件狀態的單個圖示。它可以根據請求提供給定大小和狀態的，並自動緩存一些渲染的物件。通常你會使用gtk_widget_render_icon_pixbuf（）而不是直接使用。您使用的一種情況是創建特定于應用程式的圖示集來放置ina 。GtkIconThemeGtkIconSetGtkIconSetGdkPixbufGdkPixbufGtkIconSetGtkIconSetGtkIconFactory
返回
一個新的GtkIconSet
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_new_from_pixbuf ----

gtk_icon_set_new_from_pixbuf
gtk_icon_set_new_from_pixbuf自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用。創建一個以 pixbuf 作為默認/回退源映射的新映射。如果您不向圖示集添加任何其他內容，則圖示的所有變體都將從pixbuf創建，根據需要使用縮放，圖元化等來調整圖示大小或使圖示看起來不敏感/預亮。GtkIconThemeGtkIconSetGtkIconSource
語法
參數
pixbuf- 一GdkPixbuf
返回
一個新的GtkIconSet
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_ref ----

gtk_icon_set_ref
gtk_icon_set_ref自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。遞增icon_set上的引用計數。GtkIconTheme
語法
參數
icon_set- 一個.GtkIconSet
返回
icon_set。
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_render_icon ----

gtk_icon_set_render_icon
gtk_icon_set_render_icon自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_icon_set_render_icon_pixbuf（） 代替使用 gtk_style_render_icon（） 呈現圖示。在大多數情況下，gtk_widget_render_icon（） 更好，因為它會自動提供當前小部件設置中的大部分參數。此函數從不返回 NULL;如果圖示無法呈現（可能是因為影像檔無法載入），則將返回預設的“missingimage”圖示。
語法
參數
icon_set- 一GtkIconSet
style- 與小部件關聯的小部件，或 NULL。[允許-無]GtkStyle
direction- 文本方向
state- 小部件狀態
size- 圖示大小。大小 （GtkIconSize）-1 表示以源的大小呈現，並且不縮放。[鍵入整型]
widget- 小部件，將顯示圖示，或空。通常使用的唯一用途是確定適當的 。[允許-無]GdkScreen
detail- 要傳遞到主題引擎的詳細資訊，或 NULL。請注意，傳遞除 NULL 之外的任何內容的詳細資訊都將禁用緩存。[允許-無]
返回
a 要顯示。[轉移完整]GdkPixbuf
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_render_icon_pixbuf ----

gtk_icon_set_render_icon_pixbuf
gtk_icon_set_render_icon_pixbuf自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。使用 gtk_render_icon_pixbuf（） 呈現圖示。在大多數情況下，gtk_widget_render_icon_pixbuf（） 更好，因為它會自動提供當前小部件設置中的大部分參數。此函數從不返回 NULL;如果圖示無法呈現（可能是因為影像檔無法載入），則將返回預設的“missingimage”圖示。GtkIconTheme
語法
參數
icon_set- 一GtkIconSet
context- 一GtkStyleContext
size- 圖示大小。大小 （GtkIconSize）-1 表示以源的大小呈現，並且不縮放。[鍵入整型]
返回
a 要顯示。[轉移完整]GdkPixbuf
自 3.0 起
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_render_icon_surface ----

gtk_icon_set_render_icon_surface
gtk_icon_set_render_icon_surface自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。使用 gtk_render_icon_pixbuf（） 渲染圖示，並將其轉換為 acairo 曲面。此函數從不返回 NULL;如果圖示無法呈現（可能是因為影像檔無法載入），則將返回預設的“missingimage”圖示。GtkIconTheme
語法
參數
icon_set- 一GtkIconSet
context- 一GtkStyleContext
size- 圖示大小。大小 （GtkIconSize）-1 表示以源的大小呈現，並且不縮放。[鍵入整型]
scale- 要渲染的窗口比例
for_window  -  	 GdkWindow以優化繪圖，或 NULL。[允許-無]
返回
a 要顯示。[轉移完整]cairo_surface_t
自 3.10 起
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_unref ----

gtk_icon_set_unref
gtk_icon_set_unref自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。遞減icon_set上的引用計數，如果引用計數達到 0，則釋放記憶體。GtkIconTheme
語法
參數
icon_set- 一GtkIconSet
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_size_from_name ----

gtk_icon_size_from_name
gtk_icon_size_from_name自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用。查找與名稱關聯的圖示大小。GtkIconTheme
語法
參數
name- 要查找的名稱。
返回
圖示大小。[鍵入整型]
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_size_get_name ----

gtk_icon_size_get_name
gtk_icon_size_get_name自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。獲取給定圖示大小的正式名稱。返回的字串是靜態配置的，不應釋放。GtkIconTheme
語法
參數
size- 一個.[鍵入整型]GtkIconSize
返回
給定圖示大小的名稱。
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_size_lookup ----

gtk_icon_size_lookup
獲取語義圖示大小大小大小：、等的圖元大小。這個功能通常不需要，gtk_icon_theme_load_icon（）是獲取圖示進行渲染的常用方法，那麼只需查看渲染的pixbuf的大小即可。渲染的pixbuf甚至可能不對應於gtk_icon_size_lookup（）返回的寬度/高度，因為主題可以自由地渲染pixbuf，包括更改通常的大小。GTK_ICON_SIZE_MENUGTK_ICON_SIZE_BUTTON
語法
參數
size- 圖示大小。[鍵入整型]
width- 存儲圖示寬度的位置。[輸出][允許-無]
height- 存儲圖示高度的位置。[輸出][允許-無]
返回
如果大小是有效大小，則為 TRUE
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_size_lookup_for_settings ----

gtk_icon_size_lookup_for_settings
gtk_icon_size_lookup_for_settings自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_icon_size_lookup（）。獲取語義圖示大小的圖元大小，可能由特定圖示的使用者首選項進行修改。通常大小為，等。這個功能通常不需要，gtk_widget_render_icon_pixbuf（）是獲取用於渲染的圖示的常用方法，那麼只需查看渲染的pixbuf的大小即可。渲染的pixbuf甚至可能不對應於gtk_icon_size_lookup（）返回的寬度/高度，因為主題可以自由地渲染pixbuf，包括更改通常的大小。GtkSettingsGTK_ICON_SIZE_MENUGTK_ICON_SIZE_BUTTON
語法
參數
settings- 一個物件，用於確定要使用的使用者首選項集。GtkSettings
size- 圖示大小。[鍵入整型]
width- 存儲圖示寬度的位置。[輸出][允許-無]
height- 存儲圖示高度的位置。[輸出][允許-無]
返回
如果大小是有效大小，則為 TRUE
自 2.2 起
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_size_register ----

gtk_icon_size_register
gtk_icon_size_register自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。註冊一個新的圖示大小，與 ，等相同。返回大小的整數值。GtkIconThemeGTK_ICON_SIZE_MENU
語法
參數
name- 圖示大小的名稱
width- 圖示寬度
height- 圖示高度
返回
表示大小的整數值。[鍵入整型]
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_size_register_alias ----

gtk_icon_size_register_alias
gtk_icon_size_register_alias自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用。將別名註冊為目標的另一個名稱。因此，調用gtk_icon_size_from_name（） 並將別名作為參數調用將返回目標。GtkIconTheme
語法
參數
alias- 目標的別名
target- 現有的圖示大小。[鍵入整型]
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_copy ----

gtk_icon_source_copy
gtk_icon_source_copy自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用。創建源的副本;主要用於語言綁定。GtkIconTheme
語法
參數
source- 一GtkIconSource
返回
一個新的GtkIconSource
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_free ----

gtk_icon_source_free
gtk_icon_source_free自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。釋放動態分配的圖示源及其檔案名、大小和圖元浮動欄位（如果這些欄位不為 NULL）。GtkIconTheme
語法
參數
source- 一GtkIconSource
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_direction ----

gtk_icon_source_get_direction
gtk_icon_source_get_direction自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。獲取此圖示源適用的文本方向。僅當文本方向未通配時，返回值才有用/有意義。GtkIconTheme
語法
參數
source- 一GtkIconSource
返回
此源匹配的文本方向
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_direction_wildcarded ----

gtk_icon_source_get_direction_wildcarded
gtk_icon_source_get_direction_wildcarded自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。獲取由 gtk_icon_source_set_direction_wildcarded（） 設置的值。GtkIconTheme
語法
參數
source- 一GtkIconSource
返回
如果此圖示源是任何文本方向變體的基礎，則為 TRUE
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_filename ----

gtk_icon_source_get_filename
gtk_icon_source_get_filename自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。檢索原始檔案名，如果未設置任何檔案名，則檢索 NULL。檔案名不是副本，不應在圖示源的生存期之後進行修改或預期 topersist。GtkIconTheme
語法
參數
source- 一GtkIconSource
返回
影像檔名。不得修改或釋放此字串。[類型檔案名]
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_icon_name ----

gtk_icon_source_get_icon_name
gtk_icon_source_get_icon_name自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用。檢索源圖示名稱，如果未設置任何名稱，則檢索 NULL。Theicon_name不是副本，不應在圖示源的生存期之後進行修改或預期拓撲。GtkIconTheme
語法
參數
source- 一GtkIconSource
返回
圖示名稱。不得修改或釋放此字串。
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_pixbuf ----

gtk_icon_source_get_pixbuf
gtk_icon_source_get_pixbuf自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用。檢索源圖元蟲，如果未設置任何代碼，則檢索 NULL。此外，如果正在使用檔案名源，則在某些情況下，此函數將從檔案名載入返回 pixbuf。例如，對於傳遞給render_icon（）虛函數的GtkIconSource，這是true。圖元上的引用計數不會遞增。GtkIconThemeGtkStyle
語法
參數
source- 一GtkIconSource
返回
源圖元。[無轉移]
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_size ----

gtk_icon_source_get_size
gtk_icon_source_get_size自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用。獲取此源適用的圖示大小。僅當圖示大小未萬用字元時，返回值才有用/有意義。GtkIconTheme
語法
參數
source- 一GtkIconSource
返回
圖示大小與此源匹配。[鍵入整型]
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_size_wildcarded ----

gtk_icon_source_get_size_wildcarded
gtk_icon_source_get_size_wildcarded自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。獲取由 gtk_icon_source_set_size_wildcarded（） 設置的值。GtkIconTheme
語法
參數
source- 一GtkIconSource
返回
如果此圖示源是任何圖示大小變體的基礎，則為 TRUE
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_state ----

gtk_icon_source_get_state
gtk_icon_source_get_state自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。獲取此圖示源應用於的小元件狀態。僅當小部件狀態未被置換時，返回值才有用/有意義。GtkIconTheme
語法
參數
source- 一GtkIconSource
返回
此源匹配的小部件狀態
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_state_wildcarded ----

gtk_icon_source_get_state_wildcarded
gtk_icon_source_get_state_wildcarded自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用。獲取由 gtk_icon_source_set_state_wildcarded（） 設置的值。GtkIconTheme
語法
參數
source- 一GtkIconSource
返回
如果此圖示源是任何小部件狀態變體的基礎，則為 TRUE
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_new ----

gtk_icon_source_new
gtk_icon_source_new自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。創建新的 .A 包含一個（或影像檔名），用作 中一個或多個同義詞的基本圖像，以及圖示集中的圖示將基於該圖元或影像檔的規範。圖示集包含一組表示“相同”的圖示不同狀態、不同全域文本方向、不同大小的邏輯概念。例如，網路流覽器？返回上一頁？圖示可能指向希伯來語和英語的不同方向;當麻木不仁時，它可能會有所不同;並且它可能會根據工具列模式（小/大圖示）而改變大小。因此，單個圖示集將包含圖示的所有這些變體。 包含一個清單，從中可以派生出集合中的特定圖示變體。在最簡單的情況下，包含一個源 pixbuf，它從中派生出所有變體。方便functiongtk_icon_set_new_from_pixbuf（）處理這種情況;如果您只有一個源圖元，只需使用該函數即可。如果要對不同的圖示變體使用不同的基本圖元buf，請創建多個圖示源，標記將用於創建的變體，並將它們添加到圖示集withgtk_icon_set_add_source（）中。預設情況下，圖示源的所有參數都萬用字元。也就是說，圖示源將用作任何所需文本方向，小部件狀態或圖示大小的基本圖示。GtkIconThemeGtkIconSourceGtkIconSourceGdkPixbufGtkIconSetGtkIconSetGtkIconSourceGtkIconSet
返回
一個新的GtkIconSource
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_direction ----

gtk_icon_source_set_direction
gtk_icon_source_set_direction自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用。設置此圖示源要使用的文本方向。如果文本方向是萬用字元，則在圖示源上設置文本方向不會有任何區別。因此，除了調用此函數之外，您通常還應該調用 gtk_icon_source_set_direction_wildcarded（） 來取消萬用字元 it。GtkIconTheme
語法
參數
source- 一GtkIconSource
direction- 此源應用于的文本方向
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_direction_wildcarded ----

gtk_icon_source_set_direction_wildcarded
gtk_icon_source_set_direction_wildcarded自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。如果文本方向是萬用字元，則可以將此源用作任何 中圖示的基本圖像。如果文本方向未萬用字元，則應使用gtk_icon_source_set_direction（） 設置圖示源應用到的文本方向，並且圖示源將僅與該文本方向一起使用。首選非萬用字元源（完全匹配）過度通配的源，並盡可能使用完全匹配。GtkIconThemeGtkTextDirectionGtkIconSet
語法
參數
source- 一GtkIconSource
setting- TRUE 萬用字元文本方向
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_filename ----

gtk_icon_source_set_filename
gtk_icon_source_set_filename自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用。設置要在為 創建圖示變體時用作基礎圖像的影像檔的名稱。檔案名必須是絕對的。GtkIconThemeGtkIconSet
語法
參數
source- 一GtkIconSource
filename- 要使用的影像檔。[類型檔案名]
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_icon_name ----

gtk_icon_source_set_icon_name
gtk_icon_source_set_icon_name自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。設置要在當前圖示主題中查找的圖示的名稱，以便在 為 創建圖示變體時用作基本圖像。GtkIconThemeGtkIconSet
語法
參數
source- 一GtkIconSource
icon_name- 要使用的圖示的名稱。[允許-無]
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_pixbuf ----

gtk_icon_source_set_pixbuf
gtk_icon_source_set_pixbuf自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用。將圖元符號設置為在創建圖示變體時用作基本圖像。GtkIconThemeGtkIconSet
語法
參數
source- 一GtkIconSource
pixbuf- 圖元buf用作源
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_size ----

gtk_icon_source_set_size
gtk_icon_source_set_size自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。設置此圖示源要使用的圖示大小。如果大小是萬用字元，則在圖示源上設置圖示大小不會有任何區別。因此，除了調用此函數之外，您通常還應該調用gtk_icon_source_set_size_wildcarded（） 來取消萬用字元 it。GtkIconTheme
語法
參數
source- 一GtkIconSource
size- 此源適用的圖示大小。[鍵入整型]
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_size_wildcarded ----

gtk_icon_source_set_size_wildcarded
gtk_icon_source_set_size_wildcarded自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。如果圖示大小是萬用字元，則此源可用作任何大小圖示的基本圖像。如果大小不是萬用字元，則應將源應用到的大小設置為 withgtk_icon_source_set_size（），並且圖示源將僅與該特定大小一起使用。首選非萬用字元源（完全匹配）過度通配的源，並盡可能使用完全匹配。通常會縮放萬用字元源圖像以在給定大小下生成適當的圖示，但不會更改完全匹配的源圖像的大小。GtkIconThemeGtkIconSetGtkIconSet
語法
參數
source- 一GtkIconSource
setting- TRUE 萬用字元小部件狀態
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_state ----

gtk_icon_source_set_state
gtk_icon_source_set_state自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用。設置此圖示源要使用的小部件狀態。如果狀態為萬用字元，則在圖示源上設置構件狀態不會有任何區別。因此，除了調用此函數之外，您通常還應該調用 gtk_icon_source_set_state_wildcarded（） 來取消萬用字元 it。GtkIconTheme
語法
參數
source- 一GtkIconSource
state- 小部件狀態此源適用於
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_state_wildcarded ----

gtk_icon_source_set_state_wildcarded
gtk_icon_source_set_state_wildcarded自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用。如果構件狀態為萬用字元，則此源可用作任何 .如果小部件狀態不是萬用字元，則源應用到的狀態應使用 gtk_icon_source_set_state（） 設置，並且圖示源將僅與該特定狀態一起使用。首選非萬用字元源（完全匹配）過度通配的源，並盡可能使用完全匹配。通常會轉換萬用字元源圖像，例如在預照上對圖像進行透視，但不會修改完全匹配的源圖像。GtkIconThemeGtkStateTypeGtkIconSetGtkIconSet
語法
參數
source- 一GtkIconSource
setting- TRUE 用於萬用字元小部件狀態[br \=“”
另請參見
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_theme_add_builtin_icon ----

gtk_icon_theme_add_builtin_icon
註冊用於圖示主題查找的內置圖示。內置圖示的想法是允許使用主題圖示的應用程式或庫來運行，要求檔存在於檔案系統中。例如，所有GTK+的庫存圖示的預設圖像都是註冊為內置圖示。通常，如果使用gtk_icon_theme_add_builtin_icon（），則還應在圖示主題中安裝圖示，以便圖示正式發佈。此函數通常與 pixbufs 一起使用，通過 gdk_pixbuf_new_from_inline（） 載入。
語法
參數
icon_name- 要註冊的圖示的名稱
size- 註冊圖示的大小（以圖元為單位）（可以為不同大小的同一圖示名稱註冊不同的圖像。
pixbuf  -  	GdkPixbuf包含用於icon_name的圖像。
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_append_search_path ----

gtk_icon_theme_append_search_path
將目錄追加到搜索路徑。請參見 gtk_icon_theme_set_search_path（）。
語法
參數
icon_theme- 一GtkIconTheme
path- 要附加到圖示路徑的目錄名稱。[類型檔案名]
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_choose_icon ----

gtk_icon_theme_choose_icon
查找命名圖示並返回包含資訊，如圖示的檔案名。然後，圖示可以渲染成圖元usinggtk_icon_info_load_icon（）。（gtk_icon_theme_load_icon（）結合了這兩個步驟，如果你所需要的只是pixbuf。如果icon_names包含多個名稱，則此函數將按給定的順序嘗試所有名稱，然後再回退到繼承的圖示主題。GtkIconInfo
語法
參數
icon_theme- 一GtkIconTheme
icon_names- 以 NULL 結尾的圖示名稱陣列進行查找。[陣列零終止 = 1]
size- 所需的圖示大小
flags- 標記修改圖示查找的行為
返回
包含有關圖示資訊的物件，如果未找到圖示，則為 NULL。[轉移完整]GtkIconInfo
自 2.12 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_choose_icon_for_scale ----

gtk_icon_theme_choose_icon_for_scale
查找特定視窗比例的命名圖示，並返回包含資訊，如圖示的檔案名。然後，可以將圖示呈現為圖元usinggtk_icon_info_load_icon（）。（gtk_icon_theme_load_icon（） 結合了這兩個步驟，如果你所需要的只是 pixbuf。如果icon_names包含多個名稱，則此函數將按給定的順序嘗試所有名稱，然後再回退到繼承的圖示主題。GtkIconInfo
語法
參數
icon_theme- 一GtkIconTheme
icon_names- 以 NULL 結尾的圖示名稱陣列進行查找。[陣列零終止 = 1]
size- 所需的圖示大小
scale- 所需的規模
flags- 標記修改圖示查找的行為
返回
包含有關圖示資訊的物件，如果未找到圖示，則為 NULL。[轉移完整]GtkIconInfo
自 3.10 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_get_default ----

gtk_icon_theme_get_default
獲取預設螢幕的圖示主題。Seegtk_icon_theme_get_for_screen（）.
返回
與預設螢幕關聯的唯一項。此圖示主題與螢幕相關聯，只要螢幕打開即可使用。不要引用或取消引用它。[無轉移]GtkIconTheme
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_get_example_icon_name ----

gtk_icon_theme_get_example_icon_name
獲取代表當前主題的圖示的名稱（例如，在向使用者顯示主題清單時使用）。
語法
參數
icon_theme- 一GtkIconTheme
返回
示例圖示的名稱或 NULL。使用g_free（） 免費。
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_get_for_screen ----

gtk_icon_theme_get_for_screen
獲取與螢幕關聯的圖示主題物件;如果以前未為給定螢幕調用此函數，則將創建一個新的圖示主題物件並與螢幕關聯。圖示主題物件的創建成本非常高昂，因此使用此函數通常比調用比gtk_icon_theme_new（）和自己設置螢幕更好的選擇;通過使用此功能，使用者之間將共用單個圖示主題物件。
語法
參數
screen- 一GdkScreen
返回
與給定螢幕關聯的唯一項。此圖示主題與螢幕相關聯，只要螢幕打開即可使用。不要引用或取消引用它。[無轉移]GtkIconTheme
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_get_icon_sizes ----

gtk_icon_theme_get_icon_sizes
返回一個整數陣列，該陣列描述圖示在不縮放的情況下可用時的大小。大小為 -1 表示圖示以可縮放的格式提供。陣列以零終止。
語法
參數
icon_theme- 一GtkIconTheme
icon_name- 圖示的名稱
返回
新分配的陣列描述圖示可用的大小。當不再需要陣列時，應使用 g_free（） 釋放它。[陣列零終止 = 1]
自 2.6 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_get_search_path ----

gtk_icon_theme_get_search_path
獲取當前搜索路徑。請參見 gtk_icon_theme_set_search_path（）。
語法
參數
icon_theme- 一GtkIconTheme
path- 存儲圖示主題路徑目錄清單的位置或 NULL。存儲的值應使用 g_strfreev（） 釋放。[允許-無][陣列長度 = n_elements][元素類型檔案名][輸出]
n_elements- 位置存儲路徑中的元素數量，或 NULL
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_has_icon ----

gtk_icon_theme_has_icon
檢查圖示主題是否包含特定名稱的圖示。
語法
參數
icon_theme- 一GtkIconTheme
icon_name- 圖示的名稱
返回
如果icon_themeincludes icon_name的動畫圖示，則為 true。
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_list_contexts ----

gtk_icon_theme_list_contexts
獲取當前圖示主題層次結構中可用的上下文清單
語法
參數
icon_theme- 一GtkIconTheme
返回
一個清單，其中包含主題中所有上下文的名稱。您必須首先使用g_free（）釋放清單中的每個元素，然後使用g_list_free（）釋放listitself。[元素型 utf8][轉移完整]GList
自 2.12 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_list_icons ----

gtk_icon_theme_list_icons
列出當前圖示主題中的圖示。通過提供上下文字串，只能列出圖示的子集。上下文字串的值集與系統相關，但通常包括諸如 ？應用？和？默劇類型？.
語法
參數
icon_theme- 一GtkIconTheme
context- 標識特定類型的圖示的字串，或 NULL 列出所有圖示。[允許-無]
返回
一個清單，其中包含主題中所有圖示的名稱。您必須首先使用g_free（）釋放清單中的每個元素，然後使用g_list_free（）釋放listitself。[元素型 utf8][轉移完整]GList
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_load_icon ----

gtk_icon_theme_load_icon
在圖示主題中查找圖示，將其縮放到給定大小，然後將其呈現為圖元泡。這是一個方便的功能;如果需要有關圖示的更多詳細資訊，usegtk_icon_theme_lookup_icon（） 後跟 gtk_icon_info_load_icon（）。請注意，您可能希望偵聽圖示主題更改並更新圖示。這通常是通過連接到GtkWidget：：style-set信號來完成的。如果由於某種原因您不想在圖示主題更改時更新圖示，則應考慮使用gdk_pixbuf_copy（）來製作此函數的pixbufreturn的私有副本。否則，GTK+可能需要載入舊圖示主題，這將是浪費記憶體。
語法
參數
icon_theme- 一GtkIconTheme
icon_name- 要查找的圖示的名稱
size- 所需的圖示大小。生成的圖示可能不是這個大小;參見 gtk_icon_info_load_icon（）。
flags- 標記修改圖示查找的行為
error- 存儲故障錯誤資訊的位置，或 NULL。[允許-無]
返回
渲染的圖示;這可能是新創建的圖示或對內部圖示的新引用，因此您不得修改圖示。使用 g_object_unref（） 釋放您對圖示的引用。如果找不到該圖示，則為 NULL。[轉移完整]
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_load_icon_for_scale ----

gtk_icon_theme_load_icon_for_scale
在圖示主題中查找特定視窗比例的圖示，將其縮放到給定大小並將其渲染為圖元。這是便利功能;如果需要有關圖示的更多詳細資訊，請使用gtk_icon_theme_lookup_icon（） 跟bygtk_icon_info_load_icon（）。請注意，您可能希望偵聽圖示主題更改並更新圖示。這通常是通過連接到GtkWidget：：style-set信號來完成的。如果由於某種原因您不想在圖示主題更改時更新圖示，則應考慮使用gdk_pixbuf_copy（）來製作此函數的pixbufreturn的私有副本。否則，GTK+可能需要載入舊圖示主題，這將是浪費記憶體。
語法
參數
icon_theme- 一GtkIconTheme
icon_name- 要查找的圖示的名稱
size- 所需的圖示大小。生成的圖示可能不是這個大小;參見 gtk_icon_info_load_icon（）。
scale- 所需的規模
flags- 標記修改圖示查找的行為
error- 存儲故障錯誤資訊的位置，或 NULL。[允許-無]
返回
渲染的圖示;這可能是新創建的圖示或對內部圖示的新引用，因此您不得修改圖示。使用 g_object_unref（） 釋放您對圖示的引用。如果找不到該圖示，則為 NULL。[轉移完整]
自 3.10 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_load_surface ----

gtk_icon_theme_load_surface
在圖示主題中查找特定視窗比例的圖示，將其縮放到給定大小並將其渲染為開羅表面。這是便利功能;如果需要有關圖示的更多詳細資訊，請使用gtk_icon_theme_lookup_icon（） 後跟bygtk_icon_info_load_surface（）。請注意，您可能希望偵聽圖示主題更改並更新圖示。這通常是通過連接到GtkWidget：：style-set信號來完成的。
語法
參數
icon_theme- 一GtkIconTheme
icon_name- 要查找的圖示的名稱
size- 所需的圖示大小。生成的圖示可能不是這個大小;參見 gtk_icon_info_load_icon（）。
scale- 所需的規模
for_window  -  	 GdkWindow以優化繪圖，或 NULL。[允許-無]
flags- 標記修改圖示查找的行為
error- 存儲故障錯誤資訊的位置，或 NULL。[允許-無]
返回
渲染的圖示;這可能是新創建的圖示或對內部圖示的新引用，因此您不得修改圖示。使用 cairo_surface_destroy（） 釋放您對圖示的引用。如果找不到該圖示，則為 NULL。[轉移完整]
自 3.10 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_lookup_by_gicon ----

gtk_icon_theme_lookup_by_gicon
查找圖示並返回包含資訊，如圖示的檔案名。然後，可以將圖示呈現為圖元usinggtk_icon_info_load_icon（）。GtkIconInfo
語法
參數
icon_theme- 一GtkIconTheme
icon- 查找GIcon
size- 所需的圖示大小
flags- 標記修改圖示查找的行為
返回
包含有關圖示的資訊，如果找不到圖示，則為 NULL。使用 g_object_unref（） 取消引用。[轉移完整]GtkIconInfo
自 2.14 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_lookup_by_gicon_for_scale ----

gtk_icon_theme_lookup_by_gicon_for_scale
查找圖示並返回包含資訊，如圖示的檔案名。然後，可以將圖示呈現為圖元usinggtk_icon_info_load_icon（）。GtkIconInfo
語法
參數
icon_theme- 一GtkIconTheme
icon- 查找GIcon
size- 所需的圖示大小
scale- 所需的比例
flags- 標記修改圖示查找的行為
返回
包含有關圖示的資訊，如果找不到圖示，則為 NULL。使用 g_object_unref（） 取消引用。[轉移完整]GtkIconInfo
自 3.10 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_lookup_icon ----

gtk_icon_theme_lookup_icon
查找命名圖示並返回包含資訊，如圖示的檔案名。然後，圖示可以渲染成圖元usinggtk_icon_info_load_icon（）。（gtk_icon_theme_load_icon（）結合了這兩個步驟，如果你所需要的只是pixbuf。GtkIconInfo
語法
參數
icon_theme- 一GtkIconTheme
icon_name- 要查找的圖示的名稱
size- 所需的圖示大小
flags- 標記修改圖示查找的行為
返回
包含有關圖示資訊的物件，如果未找到圖示，則為 NULL。[轉移完整]GtkIconInfo
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_lookup_icon_for_scale ----

gtk_icon_theme_lookup_icon_for_scale
查找特定視窗比例的命名圖示，並返回包含資訊，如圖示的檔案名。然後，可以將圖示呈現為圖元usinggtk_icon_info_load_icon（）。（gtk_icon_theme_load_icon（） 結合了這兩個步驟，如果你所需要的只是 pixbuf。GtkIconInfo
語法
參數
icon_theme- 一GtkIconTheme
icon_name- 要查找的圖示的名稱
size- 所需的圖示大小
scale- 所需的比例
flags- 標記修改圖示查找的行為
返回
包含有關圖示的資訊的物件，如果未找到圖示，則為 NULL。[轉移完整]GtkIconInfo
自 3.10 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_new ----

gtk_icon_theme_new
創建新的圖示主題物件。圖示主題物件用於在特定圖示主題中按名稱查找圖示。通常，您需要使用gtk_icon_theme_get_default（）或gtk_icon_theme_get_for_screen（），而不是從頭開始創建新的圖示主題物件。
返回
新創建的對象。GtkIconTheme
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_prepend_search_path ----

gtk_icon_theme_prepend_search_path
將目錄預置到搜索路徑。請參見 gtk_icon_theme_set_search_path（）。
語法
參數
icon_theme- 一GtkIconTheme
path- 目錄名稱以附加到圖示路徑之前。[類型檔案名]
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_rescan_if_needed ----

gtk_icon_theme_rescan_if_needed
檢查圖示主題是否已更改;如果有，則將丟棄任何當前緩存的資訊，並將在訪問icon_theme下一次重新載入。
語法
參數
icon_theme- 一GtkIconTheme
返回
如果圖示主題已更改並需要重新載入，則為 TRUE。
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_set_custom_theme ----

gtk_icon_theme_set_custom_theme
設置物件使用的圖示主題的名稱覆蓋系統組態。不能在從 gtk_icon_theme_get_default（） 和 gtk_icon_theme_get_for_screen（） 返回的圖示主題物件上調用此函數。GtkIconTheme
語法
參數
icon_theme- 一GtkIconTheme
theme_name- 圖示主題的名稱，用於代替配置的主題，或 NULL 取消設置以前設置的自訂主題。[允許-無]
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_set_screen ----

gtk_icon_theme_set_screen
設置圖示主題的螢幕;該螢幕用於跟蹤使用者當前配置的圖示主題，對於不同的螢幕，該主題可能有所不同。
語法
參數
icon_theme- 一GtkIconTheme
screen- 一GdkScreen
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_set_search_path ----

gtk_icon_theme_set_search_path
設置圖示主題物件的搜索路徑。當查找圖示主題時，GTK+將在路徑中搜索與圖示主題同名的一個或多個目錄的子目錄。（來自多個路徑元素的主題組合在一起，以允許通過在使用者的主目錄中添加圖示來擴展主題。此外，如果在當前圖示主題或預設圖示主題中都找不到找到的圖示，並且直接在其中一個路徑元素中找到具有正確名稱的影像檔，則該圖像將用於圖示名稱。（這是舊版功能，新圖示應該是預設圖示主題，稱為hicolor，而不是直接在圖示路徑上。
語法
參數
icon_theme- 一GtkIconTheme
path- 搜索圖示主題的目錄陣列。[陣列長度 = n_elements][元素類型檔案名]
n_elements- 路徑中的元素數。
2.4 起
另請參見
GtkIconTheme


------------ KeyGTK3gtk_icon_view_convert_widget_to_bin_window_coords ----

gtk_icon_view_convert_widget_to_bin_window_coords
將微件座標轉換為bin_window的座標，例如 gtk_icon_view_get_path_at_pos（）。
語法
參數
icon_view- 一GtkIconView
wx- X座標相對於小部件
wy- 相對於小部件的 Y 座標
bx- 返回bin_window X 座標的位置。[輸出]
by- 返回bin_window Y 座標的位置。[輸出]
自 2.12 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_create_drag_icon ----

gtk_icon_view_create_drag_icon
在路徑處創建項的表示形式。此圖像用於拖動圖示。cairo_surface_t
語法
參數
icon_view- 一GtkIconView
path- icon_viewGtkTreePath
返回
拖動圖示的新分配曲面。[轉移完整]
自 2.
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_enable_model_drag_dest ----

gtk_icon_view_enable_model_drag_dest
Turns icon_view into a drop destination for automatic DND. Calling thismethod sets  to FALSE.?reorderable?
Syntax
Parameters
icon_view  -  	a GtkIconView
targets  -  	 the table of targets that the drag willsupport. [array length=n_targets]
n_targets  -  	the number of items in targets
actions  -  	the bitmask of possible actions for a drag to thiswidget
Since 2.8
See Also
GtkIconView


------------ KeyGTK3gtk_icon_view_enable_model_drag_source ----

gtk_icon_view_enable_model_drag_source
Turns icon_view into a drag source for automatic DND. Calling thismethod sets  to FALSE.?reorderable?
Syntax
Parameters
icon_view  -  	a GtkIconView
start_button_mask  -  	Mask of allowed buttons to start drag
targets  -  	 the table of targets that the drag willsupport. [array length=n_targets]
n_targets  -  	the number of items in targets
actions  -  	the bitmask of possible actions for a drag from thiswidget
Since 2.8
See Also
GtkIconView


------------ KeyGTK3gtk_icon_view_get_activate_on_single_click ----

gtk_icon_view_get_activate_on_single_click
Gets the setting set by gtk_icon_view_set_activate_on_single_click().
Syntax
Parameters
icon_view  -  	a GtkIconView
Returns
TRUE if item-activated will be emitted on a single click
Since 3.8
See Also
GtkIconView


------------ KeyGTK3gtk_icon_view_get_cell_rect ----

gtk_icon_view_get_cell_rect
Fills the bounding rectangle in widget coordinates for the cell specified bypath and cell. If cell is NULL the main cell area is used.This function is only valid if icon_view is realized.
Syntax
Parameters
icon_view  -  	a GtkIconView
path  -  	a GtkTreePath
cell  -  	 a  or NULL. [allow-none]GtkCellRenderer
rect  -  	 rectangle to fill with cell rect. [out]
Returns
FALSE if there is no such item, TRUE otherwise
Since 3.6
See Also
GtkIconView


------------ KeyGTK3gtk_icon_view_get_columns ----

gtk_icon_view_get_columns
Returns the value of the ::columns property.
Syntax
Parameters
icon_view  -  	a GtkIconView
Returns
the number of columns, or -1
Since 2.6
See Also
GtkIconView


------------ KeyGTK3gtk_icon_view_get_column_spacing ----

gtk_icon_view_get_column_spacing
返回 ：：列間距屬性的值。
語法
參數
icon_view- 一GtkIconView
返回
列之間的間距
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_cursor ----

gtk_icon_view_get_cursor
使用當前游標路徑和儲存格填充路徑和儲存格。如果當前未設置游標，則 *path 將為 NULL。如果當前沒有儲存格具有焦點，則 *儲存格將為 NULL。返回的必須使用gtk_tree_path_free（） 釋放。GtkTreePath
語法
參數
icon_view- 一GtkIconView
path- 返回當前游標路徑的位置，或 NULL。[輸出][允許-無][轉移完整]
cell- 返回當前焦點儲存格的位置，或 NULL。[輸出][允許-無][無轉移]
返回
如果游標已設置，則為 TRUE。
自 2.8 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_dest_item_at_pos ----

gtk_icon_view_get_dest_item_at_pos
確定給定位置的目標項。
語法
參數
icon_view- 一GtkIconView
drag_x- 確定目標專案的位置
drag_y- 確定目標專案的位置
path- 返回專案路徑的位置，或 NULL。[輸出][允許-無]
pos- 返回放置位置的位置，或 NULL。[輸出][允許-無]
返回
給定位置是否有專案。
自 2.8 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_drag_dest_item ----

gtk_icon_view_get_drag_dest_item
獲取有關為回饋突出顯示的項的資訊。
語法
參數
icon_view- 一GtkIconView
path- 返回突出顯示項的路徑的位置，或 NULL。[輸出][允許-無]
pos- 返回放置位置的位置，或 NULL。[輸出][允許-無]
自 2.8 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_item_at_pos ----

gtk_icon_view_get_item_at_pos
查找點 （x， y） 處相對於bin_window座標的路徑。與gtk_icon_view_get_path_at_pos（）相反，此函數還獲取指定位置的儲存格。返回的路徑應使用 gtk_tree_path_free（） 釋放。請參閱 gtk_icon_view_convert_widget_to_bin_window_coords（） 將小座標轉換為bin_window座標。
語法
參數
icon_view- 一.GtkIconView
x- 要識別的 x 位置
y- 要識別的 y 位置
path- 返回路徑的位置，或 NULL。[輸出][允許-無]
cell- 返回對 （x， y） 處的儲存格負責的渲染器的位置，或 NULL。[輸出][允許-無]
返回
如果專案存在於指定位置，則為 TRUE
自 2.8 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_item_column ----

gtk_icon_view_get_item_column
獲取當前顯示項路徑的列。列號從 0 開始。
語法
參數
icon_view- 一GtkIconView
path- 項目的GtkTreePath
返回
顯示專案的列
2.22 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_item_orientation ----

gtk_icon_view_get_item_orientation
返回 ：：item-orientation 屬性的值，該屬性確定標籤是繪製在圖示旁邊還是下面。
語法
參數
icon_view- 一GtkIconView
返回
文本和圖示的相對位置
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_item_padding ----

gtk_icon_view_get_item_padding
返回 ：：項填充屬性的值。
語法
參數
icon_view- 一GtkIconView
返回
專案周圍的填充
自 2.18 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_item_row ----

gtk_icon_view_get_item_row
獲取當前顯示項路徑的行。行號從 0 開始。
語法
參數
icon_view- 一GtkIconView
path- 項目的GtkTreePath
返回
顯示專案的行
2.22 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_item_width ----

gtk_icon_view_get_item_width
返回 ：：item-width 屬性的值。
語法
參數
icon_view- 一GtkIconView
返回
單個項目的寬度，或 -1
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_margin ----

gtk_icon_view_get_margin
返回 ：：margin 屬性的值。
語法
參數
icon_view- 一GtkIconView
返回
邊界處的空間
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_markup_column ----

gtk_icon_view_get_markup_column
返回包含icon_view標記文本的列。
語法
參數
icon_view- 一.GtkIconView
返回
標記列，如果未設置，則為 -1。
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_model ----

gtk_icon_view_get_model
返回 所基於的模型。如果未設置模型，則返回 NULL。GtkIconView
語法
參數
icon_view- 一GtkIconView
返回
A ，如果當前沒有當前正在使用，則為 NULL。[無轉移]GtkTreeModel
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_path_at_pos ----

gtk_icon_view_get_path_at_pos
查找點 （x， y） 處相對於bin_window座標的路徑。請參閱gtk_icon_view_get_item_at_pos（），如果您也對指定位置的儲存格感興趣。請參閱 gtk_icon_view_convert_widget_to_bin_window_coords（） 將小座標轉換為bin_window座標。
語法
參數
icon_view- 一.GtkIconView
x- 要識別的 x 位置
y- 要識別的 y 位置
返回
與圖示或 NULLif 對應的該位置不存在圖示。GtkTreePath
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_pixbuf_column ----

gtk_icon_view_get_pixbuf_column
返回包含icon_view圖元的列。
語法
參數
icon_view- 一.GtkIconView
返回
pixbuf 列，如果未設置，則為 -1。
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_reorderable ----

gtk_icon_view_get_reorderable
檢索用戶是否可以通過拖放對列表重新排序。請參見 gtk_icon_view_set_reorderable（）。
語法
參數
icon_view- 一GtkIconView
返回
如果列表可以重新排序，則為 TRUE。
自 2.8 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_row_spacing ----

gtk_icon_view_get_row_spacing
返回 ：：行間距屬性的值。
語法
參數
icon_view- 一GtkIconView
返回
行之間的間距
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_selected_items ----

gtk_icon_view_get_selected_items
創建所有選定項的路徑清單。此外，如果計畫在調用此函數後修改模型，則可能需要將返回的清單轉換為 .為此，您可以使用 gtk_tree_row_reference_new（）。要釋放返回值，請使用：1[/語法] [語法]g_list_free_full（清單，（GDestroyNotify）gtk_tree_path_free）;[/語法]GtkTreeRowReferences
語法
參數
icon_view- 一.GtkIconView
返回
A，其中包含每個選定行的 。[元素型 GtkTreePath][轉移完整]GListGtkTreePath
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_selection_mode ----

gtk_icon_view_get_selection_mode
獲取icon_view的選擇模式。
語法
參數
icon_view- 一.GtkIconView
返回
當前選擇模式
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_spacing ----

gtk_icon_view_get_spacing
返回 ：：間距屬性的值。
語法
參數
icon_view- 一GtkIconView
返回
儲存格之間的空間
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_text_column ----

gtk_icon_view_get_text_column
返回包含icon_view文本的列。
語法
參數
icon_view- 一.GtkIconView
返回
文本列，如果未設置，則為 -1。
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_tooltip_column ----

gtk_icon_view_get_tooltip_column
返回icon_view模型的列，該列用於在icon_view行上顯示工具提示。
語法
參數
icon_view- 一GtkIconView
返回
當前正在使用的工具提示列的索引，如果禁用了，則為 -1。
自 2.12 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_tooltip_context ----

gtk_icon_view_get_tooltip_context
此函數應該在 的信號處理常式中使用。在信號處理常式中接收的 x、y 和 keyboard_tip 值應不經修改即可傳遞給此函數。返回值指示滑鼠工具提示的給定座標 （TRUE） 處是否存在圖示視圖項 （FALSE）。對於鍵盤工具提示，返回的專案將是游標項目。當為TRUE時，則已提供的任何模型，路徑和反覆運算器將被設置為指向該行和相應的模型。如果 x 和 y 是 FALSE，則 x 和 y 將始終轉換為相對於 keyboard_tooltip icon_view bin_window。?query-tooltip?GtkIconView
語法
參數
icon_view- 一個GtkIconView
x- x 座標（相對於小部件座標）。[輸入]
y- y座標（相對於小部件座標）。[輸入]
keyboard_tip- 這是否是鍵盤工具提示
model- 用於接收或 NULL 的指針。[輸出][允許-無][無轉移]GtkTreeModel
path- 用於接收或 NULL 的指針。[輸出][允許-無]GtkTreePath
iter- 用於接收或 NULL 的指針。[輸出][允許-無]GtkTreeIter
返回
給定的工具提示上下文是否指向項
自 2.12 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_get_visible_range ----

gtk_icon_view_get_visible_range
將start_path和end_path設置為第一個和最後一個可見路徑。請注意，中間可能存在不可見的路徑。使用後，兩條路徑都應使用gtk_tree_path_free（） 釋放。
語法
參數
icon_view- 一GtkIconView
start_path- 返回區域開始的位置，或空。[輸出][允許-無]
end_path- 返回區域末尾的位置，或 NULL。[輸出][允許-無]
返回
TRUE，如果有效路徑已放置在start_pathand end_path
自 2.8 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_item_activated ----

gtk_icon_view_item_activated
啟動由路徑確定的項。
語法
參數
icon_view- 一GtkIconView
path- 待啟動GtkTreePath
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_new ----

gtk_icon_view_new
創建新的微件GtkIconView
返回
新創建的小部件GtkIconView
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_new_with_area ----

gtk_icon_view_new_with_area
使用指定的區域創建新構件以佈局圖示內的儲存格。GtkIconView
語法
參數
area- 用於佈局儲存格GtkCellArea
返回
新創建的小部件GtkIconView
自 3.0 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_new_with_model ----

gtk_icon_view_new_with_model
使用模型模型創建新微件。GtkIconView
語法
參數
model- 模型。
返回
新創建的小部件。GtkIconView
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_path_is_selected ----

gtk_icon_view_path_is_selected
如果當前選擇了路徑所指向的圖示，則返回 TRUE。如果 path 未指向有效位置，則返回 FALSE。
語法
參數
icon_view- 一.GtkIconView
path- A 檢查選擇。GtkTreePath
返回
如果選擇了路徑，則為 TRUE。
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_scroll_to_path ----

gtk_icon_view_scroll_to_path
將icon_view的對齊方式移動到路徑指定的位置。row_align確定行的放置位置，col_align確定列的放置位置。預計兩者都在 0.0 和 1.0 之間。0.0 表示左/上對齊，1.0 表示右/下對齊，0.5 表示居中。如果use_align為 FALSE，則將忽略對齊參數，並且樹將執行最少的工作量以將專案滾動到螢幕上。這意味著項目將滾動到最接近其當前位置的邊緣。如果專案當前在螢幕上可見，則不執行任何操作。僅當設置了模型，並且 path 是模型上的有效行時，此函數才有效。如果模型在實現icon_view之前發生更改，則將修改居中路徑以反映此更改。
語法
參數
icon_view- 一.GtkIconView
path- 要移動到的專案的路徑。
use_align- 是使用對齊參數，還是 FALSE。
row_align- 由路徑指定的專案的垂直對齊方式。
col_align- 由路徑指定的專案的水準對齊方式。
自 2.8 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_selected_foreach ----

gtk_icon_view_selected_foreach
為每個選定的圖示調用一個函數。請注意，無法從此函數中修改模型或選擇。
語法
參數
icon_view- 一.GtkIconView
func- 要為每個選定圖示調用的函數。[範圍調用]
data- 要傳遞給函數的使用者資料。
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_select_all ----

gtk_icon_view_select_all
選擇所有圖示。icon_view必須將其選擇模式設置為 。GTK_SELECTION_MULTIPLE
語法
參數
icon_view- 一.GtkIconView
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_select_path ----

gtk_icon_view_select_path
選擇路徑處的行。
語法
參數
icon_view- 一.GtkIconView
path- 要選擇的。GtkTreePath
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_activate_on_single_click ----

gtk_icon_view_set_activate_on_single_click
使信號在按一下時發出，而不是按兩下。?item-activated?
語法
參數
icon_view- 一GtkIconView
single- TRUE，只需按一下一下即可發出啟動的專案
3.8 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_columns ----

gtk_icon_view_set_columns
設置 ：：columns 屬性，該屬性確定圖示在多列中的排列方式。如果列為-1，則將自動選擇列數以填充可用區域。
語法
參數
icon_view- 一GtkIconView
columns- 列數
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_column_spacing ----

gtk_icon_view_set_column_spacing
設置 ：：列間距屬性，該屬性指定在圖示視圖的列之間插入的空間。
語法
參數
icon_view- 一GtkIconView
column_spacing- 列間距
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_cursor ----

gtk_icon_view_set_cursor
將當前鍵盤焦點設置為路徑，然後選擇它。當您希望將用戶的注意力集中在特定項目上時，這是有用的。如果儲存格不為 NULL，則焦點將分配給它指定的儲存格。此外，如果start_editing為 TRUE，則應在指定的儲存格中開始編輯。此功能後面通常跟有gtk_widget_grab_focus（icon_view），以便為小部件提供鍵盤焦點。請注意，只有在實現小部件時才能進行編輯。
語法
參數
icon_view- 一GtkIconView
path- 一GtkTreePath
cell- icon_view的儲存格渲染器之一，或 NULL。[允許-無]
start_editing- 如果指定的儲存格應開始編輯，則為 TRUE。
自 2.8 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_drag_dest_item ----

gtk_icon_view_set_drag_dest_item
設置為回饋突出顯示的項。
語法
參數
icon_view- 一GtkIconView
path- 要突出顯示的項的路徑，或 NULL。[允許-無]
pos- 指定相對於專案放置的位置
自 2.8 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_item_orientation ----

gtk_icon_view_set_item_orientation
設置 ：：item-orientation 屬性，該屬性確定標籤是繪製在圖示旁邊還是下面。
語法
參數
icon_view- 一GtkIconView
orientation- 文本和圖示的相對位置
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_item_padding ----

gtk_icon_view_set_item_padding
設置指定每個圖示視圖項的填充的屬性。?item-padding?
語法
參數
icon_view- 一GtkIconView
item_padding- 專案填充
自 2.18 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_item_width ----

gtk_icon_view_set_item_width
設置 ：：item-width 屬性，該屬性指定要用於每個項的寬度。如果設置為 -1，圖示視圖將自動確定合適的專案大小。
語法
參數
icon_view- 一GtkIconView
item_width- 每個項目的寬度
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_margin ----

gtk_icon_view_set_margin
設置 ：：margin 屬性，該屬性指定在圖示視圖的頂部、底部、左側和右側插入的空間。
語法
參數
icon_view- 一GtkIconView
margin- 保證金
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_markup_column ----

gtk_icon_view_set_markup_column
將包含icon_view標記資訊的列設置為列。標記列的類型必須為 。如果標記列設置為某些內容，它將覆蓋 gtk_icon_view_set_text_column（） 設置的文本列。G_TYPE_STRING
語法
參數
icon_view- 一.GtkIconView
column- 當前使用的模型中的列，或 -1 表示不顯示任何文本
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_model ----

gtk_icon_view_set_model
設置 的模型。如果icon_view已經設置了模型，它將在設置新模型之前將其刪除。如果模型為 NULL，則將取消設置舊模型。GtkIconView
語法
參數
icon_view- 一.GtkIconView
model- 模型。[允許-無]
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_pixbuf_column ----

gtk_icon_view_set_pixbuf_column
將帶有圖元的列設置為列，icon_view。圖元布列的類型必須為GDK_TYPE_PIXBUF
語法
參數
icon_view- 一.GtkIconView
column- 當前使用的模型中的列，或 -1 以禁用
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_reorderable ----

gtk_icon_view_set_reorderable
此函數是一個方便的函數，允許您對支援 和 的模型重新排序。兩者都支持這些。如果可重新排序為 TRUE，則用戶可以通過拖放行來重新排序模型。開發人員可以通過連接到模型srow_inserted並row_deleted信號來偵聽這些變化。通過將圖示視圖設置為拖動源和目標來實現重新排序。因此，拖動和拖放不能用於任何其他目的的可重新排序視圖中。此功能不會讓您對訂單進行任何程度的控制 - 允許任何重新排序。如果需要更多控制，則可能應手動處理拖放操作。GtkTreeDragSourceIfaceGtkTreeDragDestIfaceGtkTreeStoreGtkListStore
語法
參數
icon_view- 一.GtkIconView
reorderable- TRUE，如果項目列表可以重新排序。
自 2.8 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_row_spacing ----

gtk_icon_view_set_row_spacing
設置 ：：row-間距屬性，該屬性指定在圖示視圖的行之間插入的空間。
語法
參數
icon_view- 一GtkIconView
row_spacing- 行間距
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_selection_mode ----

gtk_icon_view_set_selection_mode
設置icon_view的選擇模式。
語法
參數
icon_view- 一.GtkIconView
mode- 選擇模式
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_spacing ----

gtk_icon_view_set_spacing
設置 ：：spacing 屬性，該屬性指定在項的儲存格（即圖示和文本）之間插入的空間。
語法
參數
icon_view- 一GtkIconView
spacing- 間距
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_text_column ----

gtk_icon_view_set_text_column
將包含文本的列設置為icon_view列。文本列的類型必須為 。G_TYPE_STRING
語法
參數
icon_view- 一.GtkIconView
column- 當前使用的模型中的列，或 -1 表示不顯示任何文本
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_tooltip_cell ----

gtk_icon_view_set_tooltip_cell
將工具提示的提示區域設置為儲存格在路徑所指向的項中所佔據的區域。另請參見gtk_tooltip_set_tip_area（）。另請參閱 gtk_icon_view_set_tooltip_column（） 以獲取更簡單的替代方法。
語法
參數
icon_view- 一GtkIconView
tooltip- 一GtkTooltip
path- 一GtkTreePath
cell- a 或 NULL。[允許-無]GtkCellRenderer
自 2.12 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_tooltip_column ----

gtk_icon_view_set_tooltip_column
如果您只計畫在完整專案上使用簡單（純文字）工具提示，則可以使用此功能自動為您處理這些工具提示。列應設置為包含工具提示文本icon_view模型中的列，或設置為 -1 以禁用此功能。啟用後，將設置為 TRUE，andicon_view將連接信號處理常式。請注意，信號處理常式使用gtk_tooltip_set_markup（），因此 &，<等設置文本必須在文本中轉義。GtkIconView?has-tooltip??query-tooltip?
語法
參數
icon_view- 一GtkIconView
column- 一個整數，它是icon_view模型的有效列號
自 2.12 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_set_tooltip_item ----

gtk_icon_view_set_tooltip_item
將工具提示的提示區域設置為路徑處的項所覆蓋的區域。另請參閱 gtk_icon_view_set_tooltip_column（） 以獲取更簡單的替代方法。另請參見gtk_tooltip_set_tip_area（）。
語法
參數
icon_view- 一GtkIconView
tooltip- 一GtkTooltip
path- 一GtkTreePath
自 2.12 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_unselect_all ----

gtk_icon_view_unselect_all
取消選擇所有圖示。
語法
參數
icon_view- 一.GtkIconView
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_unselect_path ----

gtk_icon_view_unselect_path
取消選擇路徑處的行。
語法
參數
icon_view- 一.GtkIconView
path- 要取消選擇的。GtkTreePath
自 2.6 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_unset_model_drag_dest ----

gtk_icon_view_unset_model_drag_dest
撤銷gtk_icon_view_enable_model_drag_dest（） 的效果。調用此方法設置為 FALSE。?reorderable?
語法
參數
icon_view- 一GtkIconView
自 2.8 起
另請參見
GtkIconView


------------ KeyGTK3gtk_icon_view_unset_model_drag_source ----

gtk_icon_view_unset_model_drag_source
撤銷 gtk_icon_view_enable_model_drag_source（） 的效果。調用此方法設置為 FALSE。?reorderable?
語法
參數
icon_view- 一GtkIconView
自 2.8 起
另請參見
GtkIconView


------------ KeyGTK3gtk_image_clear ----

gtk_image_clear
將映射重置為空。
語法
參數
image- 一GtkImage
自 2.8 起
另請參見
GtkImage


------------ KeyGTK3gtk_image_get_animation ----

gtk_image_get_animation
獲取 由 顯示的。映射的存儲類型必須GTK_IMAGE_EMPTY orGTK_IMAGE_ANIMATION（請參見 gtk_image_get_storage_type（））。此函數的調用方不擁有對其動畫的引用。GdkPixbufAnimationGtkImage
語法
參數
image- 一GtkImage
返回
顯示的動畫，如果圖像為空，則為 NULL。[無轉移]
另請參見
GtkImage


------------ KeyGTK3gtk_image_get_gicon ----

gtk_image_get_gicon
獲取 和 正在顯示的大小。映射的存儲類型必須GTK_IMAGE_EMPTY orGTK_IMAGE_GICON（請參見gtk_image_get_storage_type（））。此函數的調用方不擁有對 thereturned 的引用。GIconGtkImageGIcon
語法
參數
image- 一GtkImage
gicon- 存儲 a 或 NULL 的位置。[輸出][無轉移][允許-無]GIcon
size- 存儲圖示大小或空的位置。[輸出][允許-無][鍵入整型]
自 2.14 起
另請參見
GtkImage


------------ KeyGTK3gtk_image_get_icon_name ----

gtk_image_get_icon_name
獲取 由 顯示的圖示名稱和大小。映射的存儲類型必須GTK_IMAGE_EMPTY orGTK_IMAGE_ICON_NAME（請參見gtk_image_get_storage_type（））。返回的字串歸 歸 ，不應被釋放。GtkImageGtkImage
語法
參數
image- 一GtkImage
icon_name- 存儲動畫名稱的地方，或空。[輸出][無轉移][允許-無]
size- 存儲圖示大小或空的位置。[輸出][允許-無][鍵入整型]
自 2.6 起
另請參見
GtkImage


------------ KeyGTK3gtk_image_get_icon_set ----

gtk_image_get_icon_set
gtk_image_get_icon_set自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_image_get_icon_name（）。獲取 由 顯示的圖示集和大小。映射的存儲類型必須GTK_IMAGE_EMPTY orGTK_IMAGE_ICON_SET（請參見gtk_image_get_storage_type（））。GtkImage
語法
參數
image- 一GtkImage
icon_set- 存儲位置，或空。[輸出][無轉移][允許-無]GtkIconSet
size- 存儲庫存圖示大小的位置，或空。[輸出][允許-無][鍵入整型]
另請參見
GtkImage


------------ KeyGTK3gtk_image_get_pixbuf ----

gtk_image_get_pixbuf
獲取 由 顯示的。映射的存儲類型必須GTK_IMAGE_EMPTY orGTK_IMAGE_PIXBUF（請參見 gtk_image_get_storage_type（））。此函數的調用方不擁有對 pixbuf 的引用。GdkPixbufGtkImage
語法
參數
image- 一GtkImage
返回
顯示的圖元，如果圖像為空，則為 NULL。[無轉移]
另請參見
GtkImage


------------ KeyGTK3gtk_image_get_pixel_size ----

gtk_image_get_pixel_size
獲取用於命名圖示的圖元大小。
語法
參數
image- 一GtkImage
返回
用於命名圖示的圖元大小。
自 2.
另請參見
GtkImage


------------ KeyGTK3gtk_image_get_stock ----

gtk_image_get_stock
gtk_image_get_stock自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_image_get_icon_name（）。獲取 由 顯示的股票圖示名稱和大小。映射的存儲類型必須GTK_IMAGE_EMPTY orGTK_IMAGE_STOCK（請參見gtk_image_get_storage_type（））。返回的字串歸 歸 ，不應被釋放。GtkImageGtkImage
語法
參數
image- 一GtkImage
stock_id- 存儲股票圖示名稱的地方，或空。[輸出][無轉移][允許-無]
size- 存儲股票圖示的地方，或NULL。[輸出][允許-無][鍵入整型]
另請參見
GtkImage


------------ KeyGTK3gtk_image_get_storage_type ----

gtk_image_get_storage_type
獲取 用於存儲圖像資料的表示類型。如果沒有圖像資料，則返回值將GTK_IMAGE_EMPTY。GtkImageGtkImage
語法
參數
image- 一GtkImage
返回
正在使用的圖像表示
另請參見
GtkImage


------------ KeyGTK3gtk_image_menu_item_get_always_show_image ----

gtk_image_menu_item_get_always_show_image
gtk_image_menu_item_get_always_show_image自 3.10 版起已棄用，不應在新編寫的代碼中使用。返回功能表項目是否將忽略設置並始終顯示圖像（如果可用）。?gtk-menu-images?
語法
參數
image_menu_item- 一GtkImageMenuItem
返回
如果功能表項目將始終顯示圖像，則為 TRUE
2.16 起
另請參見
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_get_image ----

gtk_image_menu_item_get_image
gtk_image_menu_item_get_image自 3.10 版起已棄用，不應在新編寫的代碼中使用。獲取當前設置為image_menu_item圖像的小部件。請參見gtk_image_menu_item_set_image（）。
語法
參數
image_menu_item- 一GtkImageMenuItem
返回
設置為image_menu_item圖像的小部件。[無轉移]
另請參見
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_get_use_stock ----

gtk_image_menu_item_get_use_stock
gtk_image_menu_item_get_use_stock自 3.10 版起已棄用，不應在新編寫的代碼中使用。檢查功能表項目中設置的標籤是否用作庫存 ID 以選擇物料的庫存物料。
語法
參數
image_menu_item- 一GtkImageMenuItem
返回
如果功能表項目中設置的標籤用作庫存 ID 以選擇物料的庫存物料，則為 TRUE
2.16 起
另請參見
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_new ----

gtk_image_menu_item_new
gtk_image_menu_item_new自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用 gtk_menu_item_new（）。創建一個帶有空標籤的新標籤。GtkImageMenuItem
返回
一個新的GtkImageMenuItem
另請參見
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_new_from_stock ----

gtk_image_menu_item_new_from_stock
gtk_image_menu_item_new_from_stock自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_menu_item_new（）。創建一個包含 astock 項中的圖像和文本的新項。某些股票 ID 具有前置處理器宏，如 和 。如果希望此功能表項目具有可更改的加速器，請傳遞 inNULL 以獲取accel_group。下次調用gtk_menu_item_set_accel_path（） 以及功能表項目的適當路徑，使用 gtk_stock_lookup（） 查找庫存項的標準加速器，如果找到，callgtk_accel_map_add_entry（） 進行註冊。GtkImageMenuItemGTK_STOCK_OKGTK_STOCK_APPLY
語法
參數
stock_id- 庫存項目的名稱。
accel_group- 將功能表項目添加到或 NULL。[允許-無]GtkAccelGroup
返回
一個新的.GtkImageMenuItem
另請參見
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_new_with_label ----

gtk_image_menu_item_new_with_label
gtk_image_menu_item_new_with_label自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_menu_item_new_with_label（）。創建包含標籤的新標籤。GtkImageMenuItem
語法
參數
label- 功能表項目的文本。
返回
一個新的.GtkImageMenuItem
另請參見
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_new_with_mnemonic ----

gtk_image_menu_item_new_with_mnemonic
gtk_image_menu_item_new_with_mnemonic自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_menu_item_new_with_mnemonic（）。創建包含標籤的新標籤。標籤將使用gtk_label_new_with_mnemonic（）創建，因此底線標籤指示功能表項目的助記符。GtkImageMenuItem
語法
參數
label- 功能表項目的文本，在中間字元前面有底線
返回
一個新的GtkImageMenuItem
另請參見
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_set_accel_group ----

gtk_image_menu_item_set_accel_group
gtk_image_menu_item_set_accel_group自 3.10 版起已棄用，不應在新編寫的代碼中使用。指定要向其添加功能表項目加速器的accel_group（這僅適用于庫存項，因此必須已設置庫存項，請確保首先調用gtk_image_menu_item_set_use_stock（）和gtk_menu_item_set_label（） 並指定有效的庫存項）。如果您希望此功能表項目具有可更改的加速器，則不需要此按鈕（請參閱gtk_image_menu_item_new_from_stock（））。
語法
參數
image_menu_item- 一GtkImageMenuItem
accel_group- 的GtkAccelGroup
自 2.1 起
另請參見
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_set_always_show_image ----

gtk_image_menu_item_set_always_show_image
gtk_image_menu_item_set_always_show_image自 3.10 版起已棄用，不應在新編寫的代碼中使用。如果為 TRUE，則功能表項目將忽略該設置並始終顯示圖像（如果可用）。如果沒有圖像，menuitem 將無用或難以使用，請使用此屬性。?gtk-menu-images?
語法
參數
image_menu_item- 一GtkImageMenuItem
always_show- 如果功能表項目應始終顯示圖像，則為 TRUE
2.16 起
另請參見
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_set_image ----

gtk_image_menu_item_set_image
gtk_image_menu_item_set_image自 3.10 版起已棄用，不應在新編寫的代碼中使用。將image_menu_item的圖像設置為給定的小部件。請注意，是否顯示圖像取決於顯示功能表圖像設置。
語法
參數
image_menu_item- 一個.GtkImageMenuItem
image- 要設置為功能表項目圖像的小部件。[允許-無]
另請參見
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_set_use_stock ----

gtk_image_menu_item_set_use_stock
gtk_image_menu_item_set_use_stock自 3.10 版起已棄用，不應在新編寫的代碼中使用。如果為 TRUE，則在功能表項目中設置的標籤將用作物料的庫存 ID，以選擇物料的庫存物料。
語法
參數
image_menu_item- 一GtkImageMenuItem
use_stock- 如果功能表項目應使用庫存項，則為 TRUE
2.16 起
另請參見
GtkImageMenuItem


------------ KeyGTK3gtk_image_new ----

gtk_image_new
創建新的空構件。GtkImage
返回
新創建的小部件。GtkImage
另請參見
GtkImage


------------ KeyGTK3gtk_image_new_from_animation ----

gtk_image_new_from_animation
創建顯示給定動畫的動畫。不假定引用動畫;如果您擁有引用，您仍然需要取消引用它。將添加自己的參考，而不是採用您的參考。請注意，動畫幀使用超時顯示。使用動畫來表示忙碌時，請記住，僅當主迴圈不忙於具有更高優先順序的內容時，才會顯示動畫。GtkImageGtkImageGtkImageG_PRIORITY_DEFAULT
語法
參數
animation- 動畫
返回
一個新的小部件GtkImage
另請參見
GtkImage


------------ KeyGTK3gtk_image_new_from_file ----

gtk_image_new_from_file
創建一個顯示檔檔案名的新檔案名。如果檔找不到或無法載入，則結果將顯示“損壞的圖像？圖示。此函數從不返回 NULL，它始終返回有效的小部件。如果檔包含動畫，則圖像將包含動畫。如果需要檢測載入檔的失敗，usegdk_pixbuf_new_from_file（） 自行載入檔，然後從 pixbuf 創建。（或者對於動畫，usegdk_pixbuf_animation_new_from_file（））。返回圖像的存儲類型（gtk_image_get_storage_type（））未定義，它將是適合於顯示檔的任何類型。GtkImageGtkImageGtkImageGtkImage
語法
參數
filename- 檔案名。[類型檔案名]
返回
一個新的GtkImage
另請參見
GtkImage


------------ KeyGTK3gtk_image_new_from_gicon ----

gtk_image_new_from_gicon
從當前圖示主題創建一個顯示圖示。如果圖示名稱未知，則“損壞的圖像？圖示將被顯示。如果當前圖示主題發生更改，圖示將相應地更新。GtkImage
語法
參數
icon- 一個圖示
size- 股票圖示大小。[鍵入整型]
返回
一個新的顯示主題圖示GtkImage
自 2.14 起
另請參見
GtkImage


------------ KeyGTK3gtk_image_new_from_icon_name ----

gtk_image_new_from_icon_name
從當前圖示主題創建一個顯示圖示。如果圖示名稱未知，則“損壞的圖像？圖示將被顯示。如果當前圖示主題發生更改，圖示將相應地更新。GtkImage
語法
參數
icon_name- 圖示名稱
size- 股票圖示大小。[鍵入整型]
返回
一個新的顯示主題圖示GtkImage
自 2.6 起
另請參見
GtkImage


------------ KeyGTK3gtk_image_new_from_icon_set ----

gtk_image_new_from_icon_set
gtk_image_new_from_icon_set自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_image_new_from_icon_name（）。創建顯示圖示集。樣本庫存大小為 ， 。通常最好在圖示工廠中創建一個，放置您的圖示集，將圖示工廠添加到具有gtk_icon_factory_add_default（）的默認工廠列表中，然後使用gtk_image_new_from_stock（）。而不是使用此函數。這將允許主題覆蓋隨應用程式附帶的圖示。不假定引用 theicon 集;如果您擁有引用，您仍然需要取消引用它。將添加自己的參考，而不是採用您的參考。GtkImageGTK_ICON_SIZE_MENUGTK_ICON_SIZE_SMALL_TOOLBARGtkIconFactoryGtkImageGtkImage
語法
參數
icon_set- 一GtkIconSet
size- 股票圖示大小。[鍵入整型]
返回
一個新的GtkImage
另請參見
GtkImage


------------ KeyGTK3gtk_image_new_from_pixbuf ----

gtk_image_new_from_pixbuf
創建新的顯示圖元插頁。不假定引用 thepixbuf;如果您擁有引用，您仍然需要取消引用它。將添加自己的參考，而不是採用您的參考。請注意，此函數僅從 pixbuf 創建一個。創建者不會對狀態更改做出反應。如果你想要這樣，你應該使用gtk_image_new_from_icon_name（）。GtkImageGtkImageGtkImageGtkImageGtkImage
語法
參數
pixbuf- a 或 NULL。[允許-無]GdkPixbuf
返回
一個新的GtkImage
另請參見
GtkImage


------------ KeyGTK3gtk_image_new_from_resource ----

gtk_image_new_from_resource
創建一個新的顯示資源檔resource_path。如果檔找不到或無法載入，則結果將顯示“損壞的圖像？圖示。此函數從不返回 NULL，它始終返回有效的小部件。如果檔包含動畫，則圖像將包含動畫。如果需要檢測載入檔的失敗，usegdk_pixbuf_new_from_file（） 自行載入檔，然後從 pixbuf 創建。（或者對於動畫，usegdk_pixbuf_animation_new_from_file（））。返回圖像的存儲類型（gtk_image_get_storage_type（））未定義，它將是適合於顯示檔的任何類型。GtkImageGtkImageGtkImageGtkImage
語法
參數
resource_path- 資源路徑
返回
一個新的GtkImage
自 3.4 起
另請參見
GtkImage


------------ KeyGTK3gtk_image_new_from_stock ----

gtk_image_new_from_stock
gtk_image_new_from_stock自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用 gtk_image_new_from_icon_name（）。創建顯示股票圖示。示例股票圖示名稱為 、 。樣本庫存大小為 ， .如果 stockicon 名稱未知，則圖像將為空。您可以註冊自己的股票圖示名稱，seegtk_icon_factory_add_default（）和gtk_icon_factory_add（）。GtkImageGTK_STOCK_OPENGTK_STOCK_QUITGTK_ICON_SIZE_MENUGTK_ICON_SIZE_SMALL_TOOLBAR
語法
參數
stock_id- 股票圖示名稱
size- 股票圖示大小。[鍵入整型]
返回
一個新的顯示股票圖示GtkImage
另請參見
GtkImage


------------ KeyGTK3gtk_image_set_from_animation ----

gtk_image_set_from_animation
使 顯示給定的動畫（如果將動畫設置為 NULL，則不顯示任何動畫）。GtkImage
語法
參數
image- 一GtkImage
animation- 的GdkPixbufAnimation
另請參見
GtkImage


------------ KeyGTK3gtk_image_set_from_file ----

gtk_image_set_from_file
有關詳細資訊，請參見 gtk_image_new_from_file（）。
語法
參數
image- 一GtkImage
filename- 檔案名或空值。[類型檔案名][允許-無]
另請參見
GtkImage


------------ KeyGTK3gtk_image_set_from_gicon ----

gtk_image_set_from_gicon
有關詳細資訊，請參見 gtk_image_new_from_gicon（）。
語法
參數
image- 一GtkImage
icon- 一個圖示
size- 圖示大小。[鍵入整型]
自 2.14 起
另請參見
GtkImage


------------ KeyGTK3gtk_image_set_from_icon_name ----

gtk_image_set_from_icon_name
有關詳細資訊，請參見 gtk_image_new_from_icon_name（）。
語法
參數
image- 一GtkImage
icon_name- 圖示名稱
size- 圖示大小。[鍵入整型]
自 2.6 起
另請參見
GtkImage


------------ KeyGTK3gtk_image_set_from_icon_set ----

gtk_image_set_from_icon_set
gtk_image_set_from_icon_set自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_image_set_from_icon_name（）。有關詳細資訊，請參見 gtk_image_new_from_icon_set（）。
語法
參數
image- 一GtkImage
icon_set- 一GtkIconSet
size- 股票圖示大小。[鍵入整型]
另請參見
GtkImage


------------ KeyGTK3gtk_image_set_from_pixbuf ----

gtk_image_set_from_pixbuf
有關詳細資訊，請參見 gtk_image_new_from_pixbuf（）。
語法
參數
image- 一GtkImage
pixbuf- a 或 NULL。[允許-無]GdkPixbuf
另請參見
GtkImage


------------ KeyGTK3gtk_image_set_from_resource ----

gtk_image_set_from_resource
有關詳細資訊，請參見 gtk_image_new_from_resource（）。
語法
參數
image- 一GtkImage
resource_path- 資源路徑或 NULL。[允許-無]
另請參見
GtkImage


------------ KeyGTK3gtk_image_set_from_stock ----

gtk_image_set_from_stock
gtk_image_set_from_stock自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用 gtk_image_set_from_icon_name（）。有關詳細資訊，請參見 gtk_image_new_from_stock（）。
語法
參數
image- 一GtkImage
stock_id- 股票圖示名稱
size- 股票圖示大小。[鍵入整型]
另請參見
GtkImage


------------ KeyGTK3gtk_image_set_pixel_size ----

gtk_image_set_pixel_size
設置用於命名圖示的圖元大小。如果圖元大小設置為值 ！= -1，則使用它而不是設置的圖示大小 bygtk_image_set_from_icon_name（）。
語法
參數
image- 一GtkImage
pixel_size- 新的圖元大小
自 2.6 起
另請參見
GtkImage


------------ KeyGTK3gtk_im_context_delete_surrounding ----

gtk_im_context_delete_surrounding
通過發出GtkIMContext：:d elete_around信號，要求將輸入上下文附加到的小部件添加到游標位置周圍的刪除字元。請注意，偏移量和n_charsare字元中，而不是以位元組為單位，這與 中的其他地方的用法不同。為了使用這個函數，你應該首先callgtk_im_context_get_surrounding（）來獲取當前上下文，然後立即調用這個函數，以確保你知道要刪除的內容。您還應該考慮這樣一個事實，即即使處理了信號，輸入上下文也可能不會刪除所有請求刪除的字元。此函數由輸入法使用，該輸入法希望在現有文本中進行補充以回應新輸入。它對應用程式沒有用處。GtkIMContext
語法
參數
context- 一GtkIMContext
offset- 從游標位置偏移（以字元為單位）;負值表示在游標之前開始。
n_chars- 要刪除的字元數。
返回
如果信號已處理，則為 TRUE
另請參見
GtkIMContext


------------ KeyGTK3gtk_im_context_filter_press ----

gtk_im_context_filter_keypress
gtk_im_context_filter_keypress?()
允許輸入法在內部處理按鍵和釋放事件。如果此函數返回 TRUE，則無需對此關鍵事件執行進一步的處理。
語法
參數
context- 一GtkIMContext
event- 關鍵事件
返回
如果輸入法處理鍵事件，則為 TRUE。
另請參見
GtkIMContext


------------ KeyGTK3gtk_im_context_focus_in ----

gtk_im_context_focus_in
通知輸入法此輸入上下文所對應的小部件已獲得焦點。例如，輸入法可能更改顯示的回饋以反映此更改。
語法
參數
context- 一GtkIMContext
另請參見
GtkIMContext


------------ KeyGTK3gtk_im_context_focus_out ----

gtk_im_context_focus_out
通知輸入法此輸入上下文所對應的小部件已失去焦點。例如，輸入法可能更改顯示的回饋或重置上下文狀態以反映此更改。
語法
參數
context- 一GtkIMContext
另請參見
GtkIMContext


------------ KeyGTK3gtk_im_context_get_preedit_string ----

gtk_im_context_get_preedit_string
檢索輸入上下文的當前預編輯字串，以及要應用於該字串的屬性清單。此字串應顯示在插入點處。
語法
參數
context- 一GtkIMContext
str- 存儲檢索到的字串的位置。檢索到的字串必須使用 g_free（） 釋放。[輸出][轉移完整]
attrs- 存儲檢索到的歸因列表的位置。完成此列表後，必須使用pango_attr_list_unref（）取消引用它。[輸出][轉移完整]
cursor_pos- 在預編輯字串中存儲游標位置（以字元為單位）的位置。[輸出]
另請參見
GtkIMContext


------------ KeyGTK3gtk_im_context_get_surrounding ----

gtk_im_context_get_surrounding
檢索插入點周圍的上下文。輸入方法通常需要上下文，以便基於一個軸對文本來約束輸入文本;這對於泰語等語言很重要，只有某些字元序列是允許的。此函數通過在輸入法上發射GtkIMContext：：retrieve_surrounding信號來實現;對於此信號，小部件應提供與可用上下文盡可能多的上下文，最多通過callinggtk_im_context_set_surrounding（）的整個段落。請注意，小部件沒有義務回應 ：：retrieve_surrounding 信號，因此輸入方法必須準備好在沒有上下文的情況下運行。
語法
參數
context- 一GtkIMContext
text- 位置，用於在插入點周圍存儲文本保存上下文的 UTF-8 編碼字串。如果函數返回 TRUE，則必須使用 g_free（） 釋放此位置中的結果。[輸出][轉移完整]
cursor_index- 在文本中存儲插入游標的位元組索引的位置。[輸出]
返回
如果提供了周圍的文本，則為 TRUE;在這種情況下，您必須釋放存儲在*文本中的結果。
另請參見
GtkIMContext


------------ KeyGTK3gtk_im_context_reset ----

gtk_im_context_reset
通知輸入法已進行更改，如游標位置的更改。這通常會導致輸入方法清除預編輯狀態。
語法
參數
context- 一GtkIMContext
另請參見
GtkIMContext


------------ KeyGTK3gtk_im_context_set_client_window ----

gtk_im_context_set_client_window
為輸入上下文設置用戶端視窗;這是輸入顯示的位置。使用此視窗是為了正確定位狀態視窗，也可以用於輸入法內部的目的。GdkWindow
語法
參數
context- 一GtkIMContext
window- 用戶端窗口。這可能是 NULL，表示以前的用戶端視窗不再存在。[允許-無]
另請參見
GtkIMContext


------------ KeyGTK3gtk_im_context_set_cursor_location ----

gtk_im_context_set_cursor_location
通知輸入法游標位置已更改。該位置相對於用戶端窗口。
語法
參數
context- 一GtkIMContext
area- 新位置
另請參見
GtkIMContext


------------ KeyGTK3gtk_im_context_set_surrounding ----

gtk_im_context_set_surrounding
設置圍繞插入點和預編輯字串的周圍上下文。此函數應被調用以回應 GtkIMContext：：retrieve_surrounding 信號，如果在其他時間調用，則可能會產生效果。
語法
參數
context- 一GtkIMContext
text- 插入點周圍的文本，如 UTF-8.preedit 字串不應包含在文本中。
len- 文本的長度，如果文本是 nul 終止的，則為 -1
cursor_index- 文本中插入游標的位元組索引。
另請參見
GtkIMContext


------------ KeyGTK3gtk_im_context_set_use_preedit ----

gtk_im_context_set_use_preedit
設置 IM 上下文是否應使用預編輯字串來顯示回饋。如果use_preedit為 FALSE（預設值為 TRUE），則 IM 上下文可能會使用其他方法顯示回饋，例如在根視窗的子視窗中顯示回饋。
語法
參數
context- 一GtkIMContext
use_preedit- IM 上下文是否應使用預編輯字串。
另請參見
GtkIMContext


------------ KeyGTK3gtk_im_context_simple_add_table ----

gtk_im_context_simple_add_table
將要搜索的附加表添加到輸入上下文中。表的每一行都由max_seq_len個關鍵符號組成，後面跟著兩個被解釋為值的高字和低字。從上次添加的表開始搜索表。該表必須按鍵符號欄位的數值按字典順序排序。（超出序列長度的值應為零。guint16gunicode
語法
參數
context_simple- 一GtkIMContextSimple
data- 桌子
max_seq_len- 表中序列的最大長度（不能大於GTK_MAX_COMPOSE_LEN)
n_seqs- 表中的序列數[br \=“”
另請參見
GtkIMContextSimple


------------ KeyGTK3gtk_im_context_simple_new ----

gtk_im_context_simple_new
創建新的 .GtkIMContextSimple
返回
一個新的.GtkIMContextSimple
另請參見
GtkIMContextSimple


------------ KeyGTK3gtk_im_multicontext_append_menuitems ----

gtk_im_multicontext_append_menuitems
gtk_im_multicontext_append_menuitems自 3.10 版起已棄用，不應在新編寫的代碼中使用。最好使用系統範圍的輸入法框架來更改輸入法。現代桌面 shell 為此提供了螢幕顯示，可以使用鍵盤快速鍵觸發，例如 Super-Space.將各種可用輸入法的功能表項目添加到菜單中;選擇菜單項後，將切換上下文的輸入法和全域默認輸入法。
語法
參數
context- 一GtkIMMulticontext
menushell- 一GtkMenuShell
另請參見
GtkIMMulticontext


------------ KeyGTK3gtk_im_multicontext_get_context_id ----

gtk_im_multicontext_get_context_id
獲取上下文的當前活動從屬伺服器的 ID。
語法
參數
context- 一GtkIMMulticontext
返回
當前活動從站的 id
2.16 起
另請參見
GtkIMMulticontext


------------ KeyGTK3gtk_im_multicontext_new ----

gtk_im_multicontext_new
創建新的 .GtkIMMulticontext
返回
一個新的.GtkIMMulticontext
另請參見
GtkIMMulticontext


------------ KeyGTK3gtk_im_multicontext_set_context_id ----

gtk_im_multicontext_set_context_id
設置上下文的上下文 ID。這會導致上下文的當前活動從站被對應於新上下文 ID 的從屬伺服器替換。
語法
參數
context- 一GtkIMMulticontext
context_id- 要使用的 id
自 2.1 起
另請參見
GtkIMMulticontext


------------ KeyGTK3gtk_info_bar_add_action_widget ----

gtk_info_bar_add_action_widget
將可啟動的小部件添加到 的操作區域，連接一個信號處理常式，該處理常式將在啟動小部件時在消息區域上發出信號。小部件附加到消息區域操作區域的末尾。GtkInfoBar?response?
語法
參數
info_bar- 一GtkInfoBar
child- 一個可啟動的小部件
response_id- 兒童的回應 ID
自 2.18 起
另請參見
GtkInfoBar


------------ KeyGTK3gtk_info_bar_add_button ----

gtk_info_bar_add_button
添加一個具有給定文本的按鈕並進行設置，以便按一下該按鈕將發出 ？response？信號與givenresponse_id。該按鈕將附加到資訊欄的末尾。按鈕小部件被返回，但通常你不需要它。
語法
參數
info_bar- 一GtkInfoBar
button_text- 按鈕文本
response_id- 按鈕的回應 ID
返回
已添加的小部件。[無轉移]GtkButton
自 2.18 起
另請參見
GtkInfoBar


------------ KeyGTK3gtk_info_bar_add_buttons ----

gtk_info_bar_add_buttons
添加更多按鈕，與重複調用 gtk_info_bar_add_button（） 相同。變數參數清單應為 NULL-terminatedas，並帶有 gtk_info_bar_new_with_buttons（）。每個按鈕必須同時具有文本和回應 ID。
語法
參數
info_bar- 一GtkInfoBar
first_button_text- 按鈕文本或股票ID
...- 第一個按鈕的回應ID，然後是更多文本response_id對，以NULL結尾
自 2.18 起
另請參見
GtkInfoBar


------------ KeyGTK3gtk_info_bar_get_action_area ----

gtk_info_bar_get_action_area
返回info_bar的操作區域。
語法
參數
info_bar- 一GtkInfoBar
返回
操作區域。[無轉移]
自 2.18 起
另請參見
GtkInfoBar


------------ KeyGTK3gtk_info_bar_get_content_area ----

gtk_info_bar_get_content_area
返回info_bar的內容區域。
語法
參數
info_bar- 一GtkInfoBar
返回
內容區域。[無轉移]
自 2.18 起
另請參見
GtkInfoBar


------------ KeyGTK3gtk_info_bar_get_message_type ----

gtk_info_bar_get_message_type
返回消息區域的消息類型。
語法
參數
info_bar- 一GtkInfoBar
返回
消息區域的消息類型。
自 2.18 起
另請參見
GtkInfoBar


------------ KeyGTK3gtk_info_bar_get_show_close_button ----

gtk_info_bar_get_show_close_button
Returns whether the widget will display a standard close button.
Syntax
Parameters
info_bar  -  	a GtkInfoBar
Returns
TRUE if the widget displays standard close button
Since 3.10
See Also
GtkInfoBar


------------ KeyGTK3gtk_info_bar_new ----

gtk_info_bar_new
創建新對象。GtkInfoBar
返回
新對象GtkInfoBar
自 2.18 起
另請參見
GtkInfoBar


------------ KeyGTK3gtk_info_bar_new_with_buttons ----

gtk_info_bar_new_with_buttons
創建新的按鈕。應列出按鈕文本/回應 ID，並在列表末尾使用 NULL 指針。按鈕文本可以是股票 ID（如GTK_STOCK_OK），也可以是任意文本。回應 ID 可以是任何正數，也可以是枚舉中的某個值。如果使用者按一下這些對話方塊按鈕之一，GtkInfoBar 將發出 ？response？具有相應回應 ID 的信號。GtkInfoBarGtkResponseType
語法
參數
first_button_text- 股票ID或文本進入第一個按鈕，或NULL。[允許-無]
...- 第一個按鈕的回應 ID，然後是其他按鈕，以 NULL 結尾
返回
一個新的GtkInfoBar
另請參見
GtkInfoBar


------------ KeyGTK3gtk_info_bar_response ----

gtk_info_bar_response
發出 “響應？給定response_id信號。
語法
參數
info_bar- 一GtkInfoBar
response_id- 回應 ID
自 2.18 起
另請參見
GtkInfoBar


------------ KeyGTK3gtk_info_bar_set_default_response ----

gtk_info_bar_set_default_response
設置資訊欄操作區域中的最後一個構件，並將給定response_id作為對話方塊的默認構件。緊迫？進入？通常啟動默認小部件。請注意，此函數當前需要將info_bar添加到小部件層次結構中。
語法
參數
info_bar- 一GtkInfoBar
response_id- 回應 ID
自 2.18 起
另請參見
GtkInfoBar


------------ KeyGTK3gtk_info_bar_set_message_type ----

gtk_info_bar_set_message_type
設置消息區域的消息類型。GTK+ 使用此類型來確定在繪製消息區域時要使用的顏色。
語法
參數
info_bar- 一GtkInfoBar
message_type- 一GtkMessageType
自 2.18 起
另請參見
GtkInfoBar


------------ KeyGTK3gtk_info_bar_set_response_sensitive ----

gtk_info_bar_set_response_sensitive
調用gtk_widget_set_sensitive（小部件，設置）在資訊欄的操作區域中的每個小夥伴與給定response_id。一種使對話方塊按鈕敏感/脫敏的便捷方法。
語法
參數
info_bar- 一GtkInfoBar
response_id- 回應 ID
setting- 對於敏感
自 2.18 起
另請參見
GtkInfoBar


------------ KeyGTK3gtk_info_bar_set_show_close_button ----

gtk_info_bar_set_show_close_button
If true, a standard close button is shown. When clicked it emitsthe response GTK_RESPONSE_CLOSE.
Syntax
Parameters
info_bar  -  	a GtkInfoBar
setting  -  	TRUE to include a close button
Since 3.1
See Also
GtkInfoBar


------------ KeyGTK3gtk_init ----

gtk_init
Call this function before using any other GTK+ functions in your GUIapplications.  It will initialize everything needed to operate thetoolkit and parses some standard command line options.Although you are expected to pass the argc, argv parameters from main() to this function, it is possible to pass NULL if argv is not available or commandline handling is not required.argc and argv are adjusted accordingly so your own code willnever see those standard arguments.Note that there are some alternative ways to initialize GTK+:if you are calling gtk_parse_args(), gtk_init_check(),gtk_init_with_args() or g_option_context_parse() withthe option group returned by gtk_get_option_group(),you don?t have to call gtk_init().This function will terminate your program if it was unable toinitialize the windowing system for some reason. If you wantyour program to fall back to a textual interface you want tocall gtk_init_check() instead.Since 2.18, GTK+ calls signal (SIGPIPE, SIG_IGN)during initialization, to ignore SIGPIPE signals, since these arealmost never wanted in graphical applications. If you do need tohandle SIGPIPE for some reason, reset the handler after gtk_init(),but notice that other libraries (e.g. libdbus or gvfs) might dosimilar things.
Syntax
Parameters
argc  -  	 Address of the argc parameter ofyour main() function (or 0 if argvis NULL). This will be changed ifany arguments were handled. [inout]
argv  -  	 Address of theargv parameter of main(), or NULL. Any optionsunderstood by GTK+ are stripped before return. [array length=argc][inout][allow-none]
See Also
gtk3-General


------------ KeyGTK3gtk_init_check ----

gtk_init_check
This function does the same work as gtk_init() with only a singlechange: It does not terminate the program if the windowing systemcan?t be initialized. Instead it returns FALSE on failure.This way the application can fall back to some other means ofcommunication with the user - for example a curses or command lineinterface.
Syntax
Parameters
argc  -  	 Address of the argc parameter ofyour main() function (or 0 if argvis NULL). This will be changed ifany arguments were handled. [inout]
argv  -  	 Address of theargv parameter of main(), or NULL. Any optionsunderstood by GTK+ are stripped before return. [array length=argc][inout][allow-none]
Returns
TRUE if the windowing system has been successfullyinitialized, FALSE otherwise
See Also
gtk3-General


------------ KeyGTK3gtk_init_with_args ----

gtk_init_with_args
此函數執行與 gtk_init_check（） 相同的工作。此外，它允許您添加自己的命令列選項，並自動生成格式良好的幫助輸出。請注意，您的程式將在寫出説明輸出後終止。
語法
參數
argc- 你的主（）函數的 argc 參數的位址（如果 argvis NULL 則為 0）。如果處理了任何參數，這將被更改。[輸入]
argv- main（） 的 theargv 參數的地址，或 NULL。GTK+理解的任何選項在返回之前都會被剝離。[陣列長度 = argc][輸入][允許-無]
parameter_string- 一個字串，顯示在 --help 輸出的第一行，在程式名稱 [OPTION...] 之後。[允許-無]
entries- 一個以 NULL 結尾的陣列，用於描述程式的選項。[陣列零終止 = 1]GOptionEntrys
translation_domain- 用於翻譯條目中選項的 --help 輸出以及 gettext（） 或 NULL parameter_stringwith
error- 錯誤的返回位置
返回
如果視窗系統已成功初始化，則為 TRUE，否則為 FALSE
自 2.6 起
另請參見
gtk3-General


------------ KeyGTK3GTK_INTERFACE_AGE ----

GTK_INTERFACE_AGE
GTK_INTERFACE_AGE
與gtk_get_interface_age（）一樣，但來自應用程式編譯時使用的標頭，而不是來自應用程式運行時的庫連結。
另請參見
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_invisible_get_screen ----

gtk_invisible_get_screen
返回與不可見關聯的物件GdkScreen
語法
參數
invisible- 一個.GtkInvisible
返回
關聯的 .[無轉移]GdkScreen
自 2.
另請參見
GtkInvisible


------------ KeyGTK3gtk_invisible_new ----

gtk_invisible_new
創建新的 .GtkInvisible
返回
一個新的.GtkInvisible
另請參見
GtkInvisible


------------ KeyGTK3gtk_invisible_new_for_screen ----

gtk_invisible_new_for_screen
為指定螢幕創建新物件GtkInvisible
語法
參數
screen- a 它標識將在其上創建新內容。GdkScreenGtkInvisible
返回
新創建的對象GtkInvisible
自 2.2 起
另請參見
GtkInvisible


------------ KeyGTK3gtk_invisible_set_screen ----

gtk_invisible_set_screen
設置物件的顯示位置。GdkScreenGtkInvisible
語法
參數
invisible- 一個.GtkInvisible
screen- 一個.GdkScreen
自 2.2 起
另請參見
GtkInvisible


------------ KeyGTK3gtk_label_get_angle ----

gtk_label_get_angle
獲取標籤的旋轉角度。Seegtk_label_set_angle（）.
語法
參數
label- 一GtkLabel
返回
標籤的旋轉角度
自 2.6 起
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_attributes ----

gtk_label_get_attributes
獲取在標籤 usinggtk_label_set_attributes（） 上設置的屬性清單（如果有）。此函數不反映來自標籤標記的屬性（請參見gtk_label_set_markup（））。如果要獲取標籤的有效屬性，usepango_layout_get_attribute（gtk_label_get_layout（標籤））。
語法
參數
label- 一GtkLabel
返回
屬性清單，或 NULLif 未設置。[無轉移]
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_current_uri ----

gtk_label_get_current_uri
返回標籤中當前活動連結的 URI。活動連結是滑鼠指標下方的連結，或者在可選標籤中，是當前放置文本游標的連結。此函數旨在用於處理常式中的處理常式。?activate-link??query-tooltip?
語法
參數
label- 一GtkLabel
返回
當前活動的 URI。該字串歸 GTK+ 所有，不得釋放或修改。
自 2.18 起
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_ellipsize ----

gtk_label_get_ellipsize
返回標籤的橢圓位置。請參見gtk_label_set_ellipsize（）。
語法
參數
label- 一GtkLabel
返回
PangoEllipsizeMode
自 2.6 起
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_justify ----

gtk_label_get_justify
返回標籤的對齊方式。請參見 gtk_label_set_justify（）。
語法
參數
label- 一GtkLabel
返回
GtkJustification
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_label ----

gtk_label_get_label
從標籤小部件中提取文本，包括指示助記符和 Pango 標記的任何嵌入式底線。（Seegtk_label_get_text（））。
語法
參數
label- 一GtkLabel
返回
標籤微件的文本。此字串由小部件擁有，不得修改或釋放。
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_layout ----

gtk_label_get_layout
獲取用於顯示標籤的 。該佈局可用于例如將文本位置轉換為圖元位置，並結合gtk_label_get_layout_offsets（）。返回的佈局歸標籤所有，因此不需要調用方使用。標籤可以在任何時間自由地重新創建其佈局，因此應將其視為唯讀。PangoLayout
語法
參數
label- 一GtkLabel
返回
為此標籤。[無轉移]PangoLayout
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_layout_offsets ----

gtk_label_get_layout_offsets
獲取標籤將繪製表示標籤中文本的位置的座標;用於將滑鼠事件轉換為內部的座標，例如，如果按一下標籤的某些部分，則採取某些操作。當然，您需要創建一個來接收事件，並將標籤打包在它裡面，因為標籤是一個小部件。請記住，當使用函數時，您需要使用 PANGO_PIXELS（） 或 從圖元轉換。PangoLayoutPangoLayoutGtkEventBoxGTK_NO_WINDOWPangoLayoutPANGO_SCALE
語法
參數
label- 一GtkLabel
x- 存儲佈局的 X 偏移量的位置，或 NULL。[輸出][允許-無]
y- 存儲佈局的 Y 偏移量或 NULL 的位置。[輸出][允許-無]
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_lines ----

gtk_label_get_lines
獲取應將橢圓包裝標籤限制為的行數。請參見 gtk_label_set_lines（）。
語法
參數
label- 一GtkLabel
返回
行數
自 3.10 起
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_line_wrap ----

gtk_label_get_line_wrap
返回標籤中的行是否自動換行。請參見gtk_label_set_line_wrap（）。
語法
參數
label- 一GtkLabel
返回
如果標籤的行自動換行，則為 TRUE。
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_line_wrap_mode ----

gtk_label_get_line_wrap_mode
返回標籤使用的換行模式。請參見gtk_label_set_line_wrap_mode（）。
語法
參數
label- 一GtkLabel
返回
如果標籤的行自動換行，則為 TRUE。
自 2.10 起
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_max_width_chars ----

gtk_label_get_max_width_chars
檢索所需的標籤最大寬度（以字元為單位）。Seegtk_label_set_width_chars（）.
語法
參數
label- 一GtkLabel
返回
標籤的最大寬度（以字元為單位）。
自 2.6 起
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_mnemonic_val ----

gtk_label_get_mnemonic_keyval
gtk_label_get_mnemonic_keyval?()
如果標籤已設置為具有助憶鍵，則此函數將返回用於助記符加速器的鍵值。如果有 nomnemonic 設置，它將返回 。GDK_KEY_VoidSymbol
語法
參數
label- 一GtkLabel
返回
GDK keyval 可用於加速器，或GDK_KEY_VoidSymbol
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_mnemonic_widget ----

gtk_label_get_mnemonic_widget
檢索此標籤的助記符（鍵盤快速鍵）的目標。請參見gtk_label_set_mnemonic_widget（）。
語法
參數
label- 一GtkLabel
返回
標籤助記符的目標，如果未設置任何助記符，則為 NULL，並且將使用預設演算法。[無轉移]
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_selectable ----

gtk_label_get_selectable
獲取由 gtk_label_set_selectable（） 設置的值。
語法
參數
label- 一GtkLabel
返回
如果使用者可以從標籤中複製文本，則為 TRUE
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_selection_bounds ----

gtk_label_get_selection_bounds
獲取標籤中選定的字元範圍，如果存在選擇，則返回 TRUEif。
語法
參數
label- 一GtkLabel
start- 返回開始選擇的位置，作為字元偏移量。[輸出]
end- 返回選擇結束的位置，作為字元偏移量。[輸出]
返回
如果選擇不為空，則為 TRUE
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_single_line_mode ----

gtk_label_get_single_line_mode
返回標籤是否處於單行模式。
語法
參數
label- 一GtkLabel
返回
當標籤處於單行模式時為 TRUE。
自 2.6 起
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_text ----

gtk_label_get_text
從標籤構件中提取文本，如螢幕上顯示的那樣。這不包括任何嵌入的底線指示助記符或Pango標記。（參見 gtk_label_get_label（））
語法
參數
label- 一GtkLabel
返回
標籤微件中的文本。這是標籤使用的內部字串，不得修改。
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_track_visited_links ----

gtk_label_get_track_visited_links
返回標籤當前是否跟蹤按一下的連結。
語法
參數
label- 一GtkLabel
返回
如果記住按一下的連結，則為 TRUE
自 2.1 起
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_use_markup ----

gtk_label_get_use_markup
返回標籤的文本是否被解釋為使用 Pango 文本標記語言進行標記。請參見 gtk_label_set_use_markup（）。
語法
參數
label- 一GtkLabel
返回
如果將解析標籤的文本以進行標記，則為 TRUE。
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_use_underline ----

gtk_label_get_use_underline
返回標籤中嵌入的底線是否指示嚴重。請參見 gtk_label_set_use_underline（）。
語法
參數
label- 一GtkLabel
返回
如果標籤中嵌入的底線指示助記符快速鍵，則為 TRUE。
另請參見
GtkLabel


------------ KeyGTK3gtk_label_get_width_chars ----

gtk_label_get_width_chars
檢索所需的標籤寬度（以字元為單位）。Seegtk_label_set_width_chars（）.
語法
參數
label- 一GtkLabel
返回
標籤的寬度（以字元為單位）。
自 2.6 起
另請參見
GtkLabel


------------ KeyGTK3gtk_label_new ----

gtk_label_new
創建一個新標籤，其中包含給定的文本。您可以傳遞 NULL 以獲取空標籤微件。
語法
參數
str- 標籤的文本。[允許-無]
返回
新的GtkLabel
另請參見
GtkLabel


------------ KeyGTK3gtk_label_new_with_mnemonic ----

gtk_label_new_with_mnemonic
創建一個新的 ，其中包含 str 中的文本。如果 str 中的字元前面帶有底線，則它們將帶有底線。如果需要在標籤中使用文字底線，請使用“__”（兩個底線）。第一個帶底線的字元表示稱為助記符的鍵盤快速鍵。助憶鍵可用於啟動另一個自動選擇的小部件，或顯式usinggtk_label_set_mnemonic_widget（）。如果未調用 gtk_label_set_mnemonic_widget（），則 將選擇 的第一個可啟動祖先作為助記符小部件。例如，如果標籤位於按鈕或功能表項目內，則按鈕或功能表項目將自動成為助記符小部件，並由助記符啟動。GtkLabelGtkLabel
語法
參數
str- 標籤的文本，在字元前面帶有底線。[允許-無]
返回
新的GtkLabel
另請參見
GtkLabel


------------ KeyGTK3gtk_label_select_region ----

gtk_label_select_region
如果標籤可選，則在標籤中選擇字元範圍。請參見 gtk_label_set_selectable（）。如果標籤不可選擇，則此功能不起作用。如果start_offset orend_offset為 -1，則將替換標籤的末尾。
語法
參數
label- 一GtkLabel
start_offset- 開始偏移量（以字元為單位，而不是以位元組為單位）
end_offset- 結束偏移量（以字元為單位，而不是以位元組為單位）
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_angle ----

gtk_label_set_angle
設置標籤的旋轉角度。角度 90 從下到上讀取，角度 270 從上到下讀取。如果標籤是可選的、包裹的或橢圓的，則忽略標籤的角度設置。
語法
參數
label- 一GtkLabel
angle- 標籤基線與水準（以度為單位）逆時針測量的角度
自 2.6 起
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_attributes ----

gtk_label_set_attributes
設置 ;清單中的屬性將應用于標籤文本。使用此函數設置的屬性將被應用，並與以前由 or 屬性的方式影響的任何其他屬性合併。雖然不建議將標記字串與手動setattributes混合，但如果必須的話;知道在解析標記字串後，屬性將應用於標籤。PangoAttrList?use-underline??use-markup?
語法
參數
label- 一GtkLabel
attrs- 一PangoAttrList
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_ellipsize ----

gtk_label_set_ellipsize
設置用於在沒有足夠的空間來呈現整個字串時對文本進行橢圓化（添加省略號：“...”）的模式。
語法
參數
label- 一GtkLabel
mode- 一PangoEllipsizeMode
自 2.6 起
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_justify ----

gtk_label_set_justify
設置標籤文本中各行相對於其他行的對齊方式。GTK_JUSTIFY_LEFT 是首次使用 gtk_label_new（） 創建小參數時的預設值。如果要將標籤的對齊方式設置為一個整體，請改usegtk_misc_set_alignment（）。gtk_label_set_justify（） 對僅包含一行的標籤無效。
語法
參數
label- 一GtkLabel
jtype- 一GtkJustification
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_label ----

gtk_label_set_label
設置標籤的文本。標籤被解釋為包括嵌入的底線和/或Pango標記，具體取決於“ 和屬性的值。?use-underline??use-markup?
語法
參數
label- 一GtkLabel
str- 要為標籤設置的新文本
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_lines ----

gtk_label_set_lines
設置橢圓環繞標籤應限制的行數。如果標籤未進行包裝或橢圓化，則此操作不起作用。如果不想限制行數，請將此值設置為 -1。
語法
參數
label- 一GtkLabel
lines- 所需的行數，或 -1
自 3.10 起
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_line_wrap ----

gtk_label_set_line_wrap
切換小部件內的換行。TRUE 會在文本超過構件大小時使其成為隔斷線。FALSE 允許文本在超過視窗小部件大小時被小部件的邊緣截斷。請注意，將換行設置為 TRUE 不會使標籤包裝在其父容器的寬度處生效，因為 GTK+ 小部件在概念上不能使其請求依賴于父容器的大小。對於在特定位置換行的標籤，請使用 gtk_widget_set_size_request（） 設置標籤的寬度。GtkLabel
語法
參數
label- 一GtkLabel
wrap- 設置
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_line_wrap_mode ----

gtk_label_set_line_wrap_mode
如果換行處於打開狀態（請參見gtk_label_set_line_wrap（）），這將控制換行的完成方式。預設值為 PANGO_WRAP_WORD 這意味著單詞邊界上的換行。
語法
參數
label- 一GtkLabel
wrap_mode- 換行模式
自 2.10 起
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_markup ----

gtk_label_set_markup
解析用Pango文本標記語言標記的str，根據解析結果設置標籤的文本和屬性清單。如果 str 是外星資料，則可能需要使用 g_markup_escape_text（） org_markup_printf_escaped（）： 123456[/syntax] [syntax]const *format = “\”italic\“>\%s”;*markup;markup = g_markup_printf_escaped （format， str）;gtk_label_set_markup （GTK_LABEL （label）， markup）;g_free （markup）;[/語法]charchar
語法
參數
label- 一GtkLabel
str- 標記字串（請參閱 Pango 標記格式）
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_markup_with_mnemonic ----

gtk_label_set_markup_with_mnemonic
解析用Pango文本標記語言標記的str，根據解析結果設置標籤的文本和屬性清單。如果 str 中的字元前面有底線，則它們表示它們表示稱為助記符的鍵盤快速鍵。助憶鍵可用於啟動另一個小部件，自動選擇或使用gtk_label_set_mnemonic_widget（） 顯式選擇。
語法
參數
label- 一GtkLabel
str- 標記字串（請參閱Pango標記格式）
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_max_width_chars ----

gtk_label_set_max_width_chars
將所需的最大寬度（以標籤字元為單位）設置為n_chars。
語法
參數
label- 一GtkLabel
n_chars- 新的所需最大寬度，以字元為單位。
自 2.6 起
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_mnemonic_widget ----

gtk_label_set_mnemonic_widget
如果已將標籤設置為具有助記符鍵（使用即 gtk_label_set_markup_with_mnemonic（）、gtk_label_set_text_with_mnemonic（）、gtk_label_new_with_mnemonic（） 或 ？use_underline？ 屬性），則該標籤可以與作為助記符目標的 awidget 相關聯。當標籤位於小部件內部（如一個或一個選項卡）時，它會自動與正確的小部件相關聯，但有時（即當目標是標籤旁邊的小部件時），您需要使用此功能顯式設置它。目標小部件將通過在其上發射GtkWidget：：助記符啟動信號來加速。如果沒有助記符衝突，則此信號的預設處理常式將啟動小部件，否則將在碰撞小部件之間切換焦點。GtkButtonGtkNotebookGtkEntry
語法
參數
label- 一GtkLabel
widget- 目標 。[允許-無]GtkWidget
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_pattern ----

gtk_label_set_pattern
在構件內的現有文本下所需的底線模式。例如，如果標籤的當前文本顯示？FooBarBaz？傳遞 ？___ ___ 的模式？會底線嗎？傅？和？巴茲？但不是？酒吧？。GtkLabel
語法
參數
label- 要將模式設置為。GtkLabel
pattern- 如上所述的模式。
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_selectable ----

gtk_label_set_selectable
可選標籤允許使用者從標籤中選擇文本，進行複製和粘貼。
語法
參數
label- 一GtkLabel
setting- TRUE 允許選擇標籤中的文本
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_single_line_mode ----

gtk_label_set_single_line_mode
設置標籤是否處於單行模式。
語法
參數
label- 一GtkLabel
single_line_mode- 如果標籤應處於單行模式，則為 TRUE
自 2.6 起
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_text ----

gtk_label_set_text
設置構件中的文本。它會覆蓋之前存在的任何文本。這還將清除任何以前設置的助記符加速器。GtkLabel
語法
參數
label- 一GtkLabel
str- 要設置的文本
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_text_with_mnemonic ----

gtk_label_set_text_with_mnemonic
設置字串 str 中的標籤文本。如果 str 中的字元前面有底線，則它們表示它們表示稱為助記符的鍵盤快速鍵。助憶鍵可用於啟動另一個自動選擇的小部件，或使用gtk_label_set_mnemonic_widget（）顯式啟動。
語法
參數
label- 一GtkLabel
str- 一個字串
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_track_visited_links ----

gtk_label_set_track_visited_links
設置標籤是否應跟蹤按一下的連結（並為其使用不同的顏色）。
語法
參數
label- 一GtkLabel
track_links- TRUE跟蹤訪問過的連結
自 2.18 起
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_use_markup ----

gtk_label_set_use_markup
設置標籤的文本是否包含 Pango 的文本標記語言中的標記。請參見gtk_label_set_markup（）。
語法
參數
label- 一GtkLabel
setting- 如果應解析標籤的文本以進行標記，則為 TRUE。
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_use_underline ----

gtk_label_set_use_underline
如果為 true，則文本中的底線指示應將下一個字元用作助記符快速鍵。
語法
參數
label- 一GtkLabel
setting- 如果文本中的底線表示助記符，則為 TRUE
另請參見
GtkLabel


------------ KeyGTK3gtk_label_set_width_chars ----

gtk_label_set_width_chars
將所需的寬度（以標籤字元為單位）設置為n_chars。
語法
參數
label- 一GtkLabel
n_chars- 新的所需寬度，以字元為單位。
自 2.6 起
另請參見
GtkLabel


------------ KeyGTK3gtk_layout_get_bin_window ----

gtk_layout_get_bin_window
檢索用於繪圖操作的佈局的條柱視窗。
語法
參數
layout- 一GtkLayout
返回
一個。[無轉移]GdkWindow
自 2.1 起
另請參見
GtkLayout


------------ KeyGTK3gtk_layout_get_hadjustment ----

gtk_layout_get_hadjustment
gtk_layout_get_hadjustment自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_scrollable_get_hadjustment（）只有在將佈局放置在中或以其他方式配置了 forscrolling 之後，才應調用此函數。它返回水準捲軸和佈局之間用於通信的。有關詳細資訊，請參見 、。GtkScrolledWindowGtkAdjustmentGtkScrolledWindowGtkScrollbarGtkAdjustment
語法
參數
layout- 一GtkLayout
返回
水準滾動調整。[無轉移]
另請參見
GtkLayout


------------ KeyGTK3gtk_layout_get_size ----

gtk_layout_get_size
獲取已在佈局上設置的大小，該大小確定佈局的捲軸區域的總範圍。Seegtk_layout_set_size（）.
語法
參數
layout- 一GtkLayout
width- 存儲佈局上的寬度集的位置，或 NULL。[輸出][允許-無]
height- 用於存儲佈局上設置的高度的位置，或 NULL。[輸出][允許-無]
另請參見
GtkLayout


------------ KeyGTK3gtk_layout_get_vadjustment ----

gtk_layout_get_vadjustment
gtk_layout_get_vadjustment自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_scrollable_get_vadjustment（）只有在將佈局放置在中或以其他方式配置的 forscrolling 之後，才應調用此函數。它返回垂直捲動條和佈局之間用於通信的。有關詳細資訊，請參見 、。GtkScrolledWindowGtkAdjustmentGtkScrolledWindowGtkScrollbarGtkAdjustment
語法
參數
layout- 一GtkLayout
返回
垂直捲動調整。[無轉移]
另請參見
GtkLayout


------------ KeyGTK3gtk_layout_move ----

gtk_layout_move
將佈局的當前子級移動到新位置。
語法
參數
layout- 一GtkLayout
child_widget- 佈局的當前子級
x- 要移動到的 X 位置
y- 要移動到的 Y 位置
另請參見
GtkLayout


------------ KeyGTK3gtk_layout_new ----

gtk_layout_new
創建新的 .除非您有特定的調整，否則您希望佈局用於滾動，否則請傳遞 NULL forhadjustment 和 vadjustment。GtkLayout
語法
參數
hadjustment- 水準滾動調整，或空。[允許-無]
vadjustment- 垂直捲動調整，或空。[允許-無]
返回
一個新的GtkLayout
另請參見
GtkLayout


------------ KeyGTK3gtk_layout_put ----

gtk_layout_put
將child_widget添加到佈局，位於位置 （x，y）.layout 成為child_widget的新父容器。
語法
參數
layout- 一GtkLayout
child_widget- 子小部件
x- 子小部件的X位置
y- 子小部件的Y位置
另請參見
GtkLayout


------------ KeyGTK3gtk_layout_set_hadjustment ----

gtk_layout_set_hadjustment
gtk_layout_set_hadjustment自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_scrollable_set_hadjustment（）設置佈局的水準滾動調整。有關詳細資訊，請參見 、。GtkScrolledWindowGtkScrollbarGtkAdjustment
語法
參數
layout- 一GtkLayout
adjustment- 新的滾動調整。[允許-無]
另請參見
GtkLayout


------------ KeyGTK3gtk_layout_set_size ----

gtk_layout_set_size
設置佈局的可滾動區域的大小。
語法
參數
layout- 一GtkLayout
width- 整個可滾動區域的寬度
height- 整個可滾動區域的高度
另請參見
GtkLayout


------------ KeyGTK3gtk_layout_set_vadjustment ----

gtk_layout_set_vadjustment
gtk_layout_set_vadjustment自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_scrollable_set_vadjustment（）設置佈局的垂直捲動調整。有關詳細資訊，請參見 、。GtkScrolledWindowGtkScrollbarGtkAdjustment
語法
參數
layout- 一GtkLayout
adjustment- 新的滾動調整。[允許-無]
另請參見
GtkLayout


------------ KeyGTK3gtk_level_bar_add_offset_value ----

gtk_level_bar_add_offset_value
在值指定的位置處的自身上添加新的偏移標記。當橫條圖值處於被值頂的間隔內（或在值之間，如果偏移量是橫條圖上的最後一個），則在呈現級別條形填充時，將應用名為 level-name 的樣式類。如果存在另一個名為 name 的偏移標記，則其值將按值替換。?max-value?
語法
參數
self- 一GtkLevelBar
name- 新偏移量的名稱
value- 新偏移量的值
3.6 起
另請參見
GtkLevelBar


------------ KeyGTK3gtk_level_bar_get_inverted ----

gtk_level_bar_get_inverted
返回屬性的值。?inverted?
語法
參數
self- 一GtkLevelBar
返回
如果電平條反轉，則為 TRUE
3.8 起
另請參見
GtkLevelBar


------------ KeyGTK3gtk_level_bar_get_max_value ----

gtk_level_bar_get_max_value
返回屬性的值。?max-value?
語法
參數
self- 一GtkLevelBar
返回
正值
3.6 起
另請參見
GtkLevelBar


------------ KeyGTK3gtk_level_bar_get_min_value ----

gtk_level_bar_get_min_value
返回屬性的值。?min-value?
語法
參數
self- 一GtkLevelBar
返回
正值
3.6 起
另請參見
GtkLevelBar


------------ KeyGTK3gtk_level_bar_get_mode ----

gtk_level_bar_get_mode
返回屬性的值。?mode?
語法
參數
self- 一GtkLevelBar
返回
一個GtkLevelBarMode
3.6 起
另請參見
GtkLevelBar


------------ KeyGTK3gtk_level_bar_get_offset_value ----

gtk_level_bar_get_offset_value
提取在 self 中為偏移標記名稱指定的值，如果找到名為 name 的偏移量，則返回 TRUE。
語法
參數
self- 一GtkLevelBar
name- 欄中偏移量的名稱。[允許-無]
value- 存儲價值的位置。[輸出]
返回
如果找到指定的偏移量，則為 TRUE
自 3.
另請參見
GtkLevelBar


------------ KeyGTK3gtk_level_bar_get_value ----

gtk_level_bar_get_value
返回屬性的值。?value?
語法
參數
self- 一GtkLevelBar
返回
介於 和 之間的時間間隔中的值?min-value??max-value?
3.6 起
另請參見
GtkLevelBar


------------ KeyGTK3gtk_level_bar_new ----

gtk_level_bar_new
創建新的 .GtkLevelBar
返回
一個。GtkLevelBar
3.6 起
另請參見
GtkLevelBar


------------ KeyGTK3gtk_level_bar_new_for_interval ----

gtk_level_bar_new_for_interval
為指定區間創建新的實用程式構造函數。GtkLevelBar
語法
參數
min_value- 正值
max_value- 正值
返回
一個GtkLevelBar
3.6 起
另請參見
GtkLevelBar


------------ KeyGTK3gtk_level_bar_remove_offset_value ----

gtk_level_bar_remove_offset_value
刪除以前添加withgtk_level_bar_add_offset_value（） 的偏移標記。
語法
參數
self- 一GtkLevelBar
name- 欄中偏移量的名稱。[允許-無]
3.6 起
另請參見
GtkLevelBar


------------ KeyGTK3gtk_level_bar_set_inverted ----

gtk_level_bar_set_inverted
設置屬性的值。?inverted?
語法
參數
self- 一GtkLevelBar
inverted- TRUE 可反轉水準條
3.8 起
另請參見
GtkLevelBar


------------ KeyGTK3gtk_level_bar_set_max_value ----

gtk_level_bar_set_max_value
設置屬性的值。?max-value?
語法
參數
self- 一GtkLevelBar
value- 正值
3.6 起
另請參見
GtkLevelBar


------------ KeyGTK3gtk_level_bar_set_min_value ----

gtk_level_bar_set_min_value
設置屬性的值。?min-value?
語法
參數
self- 一GtkLevelBar
value- 正值
3.6 起
另請參見
GtkLevelBar


------------ KeyGTK3gtk_level_bar_set_mode ----

gtk_level_bar_set_mode
設置屬性的值。?mode?
語法
參數
self- 一GtkLevelBar
mode- 一GtkLevelBarMode
3.6 起
另請參見
GtkLevelBar


------------ KeyGTK3gtk_level_bar_set_value ----

gtk_level_bar_set_value
設置屬性的值。?value?
語法
參數
self- 一GtkLevelBar
value- 和 之間的間隔值?min-value??max-value?
3.6 起
另請參見
GtkLevelBar


------------ KeyGTK3gtk_link_button_get_uri ----

gtk_link_button_get_uri
使用 gtk_link_button_set_uri（） 檢索 URI 集。
語法
參數
link_button- 一GtkLinkButton
返回
有效的 URI。返回的字串歸連結按鈕所有，不應修改或釋放。
自 2.10 起
另請參見
GtkLinkButton


------------ KeyGTK3gtk_link_button_get_visited ----

gtk_link_button_get_visited
檢索 “已訪問過”指向的 URI 的狀態。按一下該按鈕時，將訪問該按鈕。如果按鈕上的 URIis 發生了變化，則 ？已訪問？狀態再次取消設置。也可以使用gtk_link_button_set_visited（）更改狀態。GtkLinkButton
語法
參數
link_button- 一GtkLinkButton
返回
如果連結已被訪問，則為 TRUE，否則為 FALSE
自 2.14 起
另請參見
GtkLinkButton


------------ KeyGTK3gtk_link_button_new ----

gtk_link_button_new
創建一個以 URI 作為其文本的 new。GtkLinkButton
語法
參數
uri- 一個有效的 URI
返回
一個新的連結按鈕小部件。
自 2.10 起
另請參見
GtkLinkButton


------------ KeyGTK3gtk_link_button_new_with_label ----

gtk_link_button_new_with_label
創建包含標籤的新標籤。GtkLinkButton
語法
參數
uri- 一個有效的 URI
label- 按鈕的文本。[允許-無]
返回
一個新的連結按鈕小部件。[無轉移]
自 2.10 起
另請參見
GtkLinkButton


------------ KeyGTK3gtk_link_button_set_uri ----

gtk_link_button_set_uri
將 uri 設置為指向的 URI。作為副作用，這擾亂了“訪問過”？按鈕的狀態。GtkLinkButton
語法
參數
link_button- 一GtkLinkButton
uri- 一個有效的 URI
自 2.10 起
另請參見
GtkLinkButton


------------ KeyGTK3gtk_link_button_set_visited ----

gtk_link_button_set_visited
設置“已訪問？指向的 URI 的狀態。有關詳細資訊，請參閱 gtk_link_button_get_visited（）。GtkLinkButton
語法
參數
link_button- 一GtkLinkButton
visited- 新的？訪問過？州
自 2.1 起
另請參見
GtkLinkButton


------------ KeyGTK3gtk_list_box_drag_highlight_row ----

gtk_list_box_drag_highlight_row
這是一個説明程式函數，用於在 上實現 DnD。傳遞的行將通過gtk_drag_highlight（）突出顯示，並且任何先前突出顯示的行都將取消突出顯示。當小部件獲取拖動離開事件時，該行也將取消亮起。GtkListBox
語法
參數
list_box- 一個.GtkListBox
row- 一GtkListBoxRow
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_drag_unhighlight_row ----

gtk_list_box_drag_unhighlight_row
如果某一行之前已通過 gtk_list_box_drag_highlight_row（） 突出顯示，則該行將被刪除。
語法
參數
list_box- 一個.GtkListBox
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_get_activate_on_single_click ----

gtk_list_box_get_activate_on_single_click
返回行是否在按一下時啟動。
語法
參數
list_box- 一GtkListBox
返回
如果行在按一下時啟動，則為 TRUE，否則為 FALSE
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_get_adjustment ----

gtk_list_box_get_adjustment
獲取小元件用於垂直捲動的調整（如果有）。
語法
參數
list_box- 一GtkListBox
返回
調整。[無轉移]
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_get_row_at_index ----

gtk_list_box_get_row_at_index
獲取列表中的第 n：th 個子項（不計算標頭）。如果_index為負數或大於列表中的項目數，則返回 NULL。
語法
參數
list_box- 一GtkListBox
index_- 行的索引
返回
子項或 NULL。[無轉移]GtkWidget
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_get_row_at_y ----

gtk_list_box_get_row_at_y
獲取 y 位置處的行。
語法
參數
list_box- 一GtkListBox
y- 位置
返回
該行。[無轉移]
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_get_selected_row ----

gtk_list_box_get_selected_row
獲取選定的行。
語法
參數
list_box- 一GtkListBox
返回
選定的 .[無轉移]GtkWidget
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_get_selection_mode ----

gtk_list_box_get_selection_mode
獲取清單方塊的選擇模式。
語法
參數
list_box- 一GtkListBox
返回
一個GtkSelectionMode
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_insert ----

gtk_list_box_insert
將子項插入list_box位置。如果設置了排序函數，則小部件實際上將插入到計算位置，並且該函數具有與gtk_container_add（） 相同的效果。如果 position 為 -1，或大於 thelist_box 中的項目總數，則子項將追加到末尾。
語法
參數
list_box- 一個.GtkListBox
child- 要添加GtkWidget
position- 插入子項的位置
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_invalidate_filter ----

gtk_list_box_invalidate_filter
更新所有行的篩選。當list_box上的濾波器函數的結果由於外部因素而改變時，調用此函數。例如，如果 filter 函數剛剛查找了特定的搜索字串，並且包含搜索字串的條目已更改，則將使用此選項。
語法
參數
list_box- 一GtkListBox
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_invalidate_headers ----

gtk_list_box_invalidate_headers
更新所有行的分隔符號。當list_box上的標頭函數的結果由於外部因素而更改時，調用此函數。
語法
參數
list_box- 一GtkListBox
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_invalidate_sort ----

gtk_list_box_invalidate_sort
更新所有行的排序。當list_box上的排序函數的結果由於外部因素而更改時，調用此函數。
語法
參數
list_box- 一GtkListBox
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_new ----

gtk_list_box_new
創建新容器。GtkListBox
返回
一個新的GtkListBox
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_prepend ----

gtk_list_box_prepend
在列表前附加一個小部件。如果設置了排序函數，則微件將實際上插入到計算位置，並且此函數具有與gtk_container_add（）相同的效果。
語法
參數
list_box- 一個.GtkListBox
child- 要添加GtkWidget
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_row_changed ----

gtk_list_box_row_changed
將行標記為已更改，從而導致更新依賴於此的任何狀態。這會影響排序、篩選和標頭。請注意，對此方法的調用必須與用於行函數的資料同步。例如，如果列表鏡像了一些外部資料集，並且*兩個*行在外部資料集中更改，那麼當您在第一行上調用gtk_list_box_row_changed（）時，排序函數必須僅讀取兩個更改行中的第一個行的新資料，否則行的排序將是錯誤的。這通常意味著，如果您不完全控制資料模型，則必須將影響 listboxrow 函數的資料複製到行小部件本身。另一種選擇是在任何模型更改時調用gtk_list_box_invalidate_sort（），但這更昂貴。
語法
參數
row- 一GtkListBoxRow
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_row_get_header ----

gtk_list_box_row_get_header
返回行的當前標題。這可以用於查看是否已經存在標頭集，如果是，則更新其狀態。GtkListBoxUpdateHeaderFunc
語法
參數
row- 一GtkListBoxRow
返回
當前標頭，如果沒有，則為 NULL。[無轉移]
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_row_get_index ----

gtk_list_box_row_get_index
獲取其容器中行的當前索引。GtkListBox
語法
參數
row- 一GtkListBoxRow
返回
行的索引，如果行不在清單方塊中，則為 -1
自 3.1 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_row_new ----

gtk_list_box_row_new
創建一個新的 ，用作 的子項。GtkListBoxRowGtkListBox
返回
一個新的GtkListBoxRow
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_row_set_header ----

gtk_list_box_row_set_header
設置行的當前標題。只允許從 調用 。它將替換行中的任何現有標題，並顯示在清單方塊中該行的前面。GtkListBoxUpdateHeaderFunc
語法
參數
row- 一GtkListBoxRow
header- 標頭，或 NULL。[允許-無]
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_select_row ----

gtk_list_box_select_row
使行成為當前選定的行。
語法
參數
list_box- 一GtkListBox
row- 要選擇的行或 NULL。[允許-無]
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_set_activate_on_single_click ----

gtk_list_box_set_activate_on_single_click
如果 single 為 TRUE，則當您按一下行時，它們將被啟動，否則您需要按兩下。
語法
參數
list_box- 一GtkListBox
single- 一個布林值
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_set_adjustment ----

gtk_list_box_set_adjustment
設置微件用於垂直捲動的調整（如果有）。例如，這用於獲取PageUp/Down鍵處理的頁面大小。在正常情況下，當list_box被包裝在內部時，調整將自動拾取，因此無需手動執行此操作。GtkScrolledWindow
語法
參數
list_box- 一GtkListBox
adjustment- 調整，或空。[允許-無]
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_set_filter_func ----

gtk_list_box_set_filter_func
通過在list_box設置篩選器函數，可以動態決定要顯示哪些行。例如，在列表上實現搜索功能，該功能將原始清單過濾為僅顯示匹配的行。調用後將為每行調用filter_func，並且每次行更改（通過gtk_list_box_row_changed（））或調用gtk_list_box_invalidate_filter（）時，它將繼續被調用。
語法
參數
list_box- 一GtkListBox
filter_func- 回檔，允許您過濾要顯示的行。[結束user_data][允許-無]
user_data- 傳遞給filter_func的使用者資料
destroy- 銷毀user_data通知程式
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_set_header_func ----

gtk_list_box_set_header_func
通過在list_box上設置標題函數，可以根據行的內容及其在清單中的位置，在行的前面動態添加標題。例如，可以使用它在按類型排序的列表中，在第一個新類型的項目前面添加標題。update_header可以使用gtk_list_box_row_get_header（）查看當前標題小部件，並根據需要更新小部件的狀態，或者usinggtk_list_box_row_set_header（）設置一個新標題小部件。如果不需要標頭，請將標頭設置為 NULL。請注意，您可能會收到許多調用，update_header特定行，例如更改不影響標頭的內容。在這種情況下，對於性能而言，重要的是不要盲目地替換具有相同標頭的現有標頭。update_header函數將在調用後為每一行調用，並且每次行更改（通過gtk_list_box_row_changed（）））和之前的行更改時（通過前一行上的gtk_list_box_row_changed（）或前一行成為不同行時，它將繼續被調用。它也被調用whengtk_list_box_invalidate_headers（）的所有行。
語法
參數
list_box- 一GtkListBox
update_header- 允許您添加行標題的回檔。[結束user_data][允許-無]
user_data- 傳遞給update_header的使用者資料
destroy- 銷毀user_data通知程式
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_set_placeholder ----

gtk_list_box_set_placeholder
設置在清單中顯示的預留位置構件，當它不顯示任何可見的子項時。
語法
參數
list_box- 一GtkListBox
placeholder- a 或 NULL。[允許-無]GtkWidget
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_set_selection_mode ----

gtk_list_box_set_selection_mode
設置所選內容在清單方塊中的工作方式。有關詳細資訊，請參閱。注意：不支持GTK_SELECTION_MULTIPLE。GtkSelectionModeGtkListBox
語法
參數
list_box- 一GtkListBox
mode- 的GtkSelectionMode
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_box_set_sort_func ----

gtk_list_box_set_sort_func
通過在list_box設置排序函數，可以根據行的內容動態地對清單中的行進行重新排序。調用後將為每行調用sort_func，並且每次行更改（通過gtk_list_box_row_changed（））和調用whengtk_list_box_invalidate_sort（））時，將繼續調用該sort_func。
語法
參數
list_box- 一GtkListBox
sort_func- 排序功能。[結束user_data][允許-無]
user_data- 傳遞給sort_func的使用者資料
destroy- 銷毀user_data通知程式
自 3.10 起
另請參見
GtkListBox


------------ KeyGTK3gtk_list_store_append ----

gtk_list_store_append
將新行追加到list_store。它將被更改為指向此新行。調用此函數後，該行將為空。要填寫值，您需要調用gtk_list_store_set（） 或 gtk_list_store_set_value（）。
語法
參數
list_store- 一GtkListStore
iter- 要設置為追加行的未設置。[輸出]GtkTreeIter
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_clear ----

gtk_list_store_clear
從清單存儲區中刪除所有行。
語法
參數
list_store- 一個.GtkListStore
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_insert ----

gtk_list_store_insert
在位置處創建新行。它將被更改為指向此新行。如果 position 為 -1 或大於列表中的行數，則新行將追加到列表中。調用此函數後，該行將為空。要填寫值，您需要callgtk_list_store_set（） 或 gtk_list_store_set_value（）。
語法
參數
list_store- 一GtkListStore
iter- 要設置為新行的未設置。[輸出]GtkTreeIter
position- 位置插入新行，或 -1 作為最後一行
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_insert_after ----

gtk_list_store_insert_after
在同級之後插入一個新行。如果同級為 NULL，則該行將優先於列表的開頭。iter 將被更改為指向此新行。調用此函數後，該行將為空。要填充值，您需要調用gtk_list_store_set（） 或 gtk_list_store_set_value（）。
語法
參數
list_store- 一GtkListStore
iter- 要設置為新行的未設置。[輸出]GtkTreeIter
sibling- 有效的 或空值。[允許-無]GtkTreeIter
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_insert_before ----

gtk_list_store_insert_before
在同級之前插入新行。如果同級為 NULL，則該行將追加到列表的末尾。iter 將更改為指向此新行。調用此函數後，該行將為空。要填寫值，您需要調用 gtk_list_store_set（） 或 gtk_list_store_set_value（）。
語法
參數
list_store- 一GtkListStore
iter- 要設置為新行的未設置。[輸出]GtkTreeIter
sibling- 有效的 或空值。[允許-無]GtkTreeIter
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_insert_with_values ----

gtk_list_store_insert_with_values
在位置處創建新行。它將被更改為指向此新行。如果 position 為 -1，或大於列表中的行數，則新行將追加到列表中。該行將填充給定給此函數的值。Callinggtk_list_store_insert_with_values（list_store、反覆運算、位置...）與調用 12[/語法] [語法] [語法]gtk_list_store_insert（list_store、反覆運算器、位置）;gtk_list_store_set（list_store、反覆運算器、...）具有相同的效果;[/語法]
不同之處在於，前者只會發出row_inserted信號，而後者會發出row_inserted，row_changed，如果清單存儲排序，rows_reordered。由於重複發射rows_reordered信號會影響程式的性能，因此在排序清單存儲中插入行時通常應首選gtk_list_store_insert_with_values（）。
語法
參數
list_store- 一GtkListStore
iter- 要設置為新行的未設置，或 NULL。[輸出][允許-無]GtkTreeIter
position- 位置插入新行，或 -1 追加在現有行之後
...- 列號和值對，以 -1 結尾
自 2.6 起
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_insert_with_valuesv ----

gtk_list_store_insert_with_valuesv
gtk_list_store_insert_with_values（） 的變體，它將列和值作為兩個陣列，而不是varargs。此函數主要用於語言綁定。
語法
參數
list_store- 一GtkListStore
iter- 要設置為新行的未設置，或 NULL。[輸出][允許-無]GtkTreeIter
position- 位置插入新行，或 -1 作為最後一行
columns- 列號陣列。[陣列長度 = n_values]
values- 一個 GValues 陣列。[陣列長度 = n_values]
n_values- 列的長度和值陣列
自 2.6 起
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_iter_is_valid ----

gtk_list_store_iter_is_valid
此功能很慢。僅將其用於調試和/或測試目的。檢查給定的反覆運算器是否是此 的有效反覆運算器。GtkListStore
語法
參數
list_store- 一.GtkListStore
iter- 一.GtkTreeIter
返回
如果反覆運算器有效，則為 TRUE;如果反覆運算器無效，則為 FALSE。
自 2.2 起
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_move_after ----

gtk_list_store_move_after
將存儲中的反覆運算器移動到一個又一個位置。請注意，此函數僅適用於未排序的商店。如果位置為 NULL，則將 iter 移動到列表的開頭。
語法
參數
store- 一.GtkListStore
iter- 一.GtkTreeIter
position- A 或空。[允許-無]GtkTreeIter
自 2.
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_move_before ----

gtk_list_store_move_before
將存儲中的 iter 移動到位置之前的位置。請注意，此函數僅適用於未排序的商店。如果位置為 NULL，則將 iter 移動到列表的末尾。
語法
參數
store- 一.GtkListStore
iter- 一.GtkTreeIter
position- A 或空值。[允許-無]GtkTreeIter
自 2.2 起
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_new ----

gtk_list_store_new
創建一個新的清單存儲，就像n_columns每個傳入類型的列一樣。請注意，僅支援從標準 GObject 基本類型派生的類型。例如，gtk_list_store_new（3，G_TYPE_INT，G_TYPE_STRING，GDK_TYPE_PIXBUF）;將創建一個包含三列的新列，分別為類型，字串和。GtkListStoreGdkPixbuf
語法
參數
n_columns- 清單存儲中的列數
...- 列的所有類型，從第一個到最後一個GType
返回
一個新的GtkListStore
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_newv ----

gtk_list_store_newv
非變數創建函數。主要由語言綁定使用。
語法
參數
n_columns- 清單存儲中的列數
types- 列的類型陣列，從第一個到最後一個。[陣列長度 = n_columns]GType
返回
一個新的.[轉移完整]GtkListStore
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_prepend ----

gtk_list_store_prepend
在要list_store的新行前面附加一行。它將被更改為指向此新行。調用此函數後，該行將為空。要填寫值，您需要調用gtk_list_store_set（） 或 gtk_list_store_set_value（）。
語法
參數
list_store- 一GtkListStore
iter- 要設置為前置行的未設置。[輸出]GtkTreeIter
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_remove ----

gtk_list_store_remove
從清單存儲區中刪除給定行。刪除後，iter 設置為下一個有效行，如果它指向list_store中的最後一行，則無效。
語法
參數
list_store- 一GtkListStore
iter- 有效GtkTreeIter
返回
如果 iteris 有效，則為 TRUE，如果不是，則為 FALSE。
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_reorder ----

gtk_list_store_reorder
重新排序商店以遵循new_order指示的順序。請注意，此函數僅適用於未排序的存儲。
語法
參數
store- 一.GtkListStore
new_order- 一個整數陣列，將每個子節點的新位置映射到重新排序之前的舊位置，即new_order[newpos] = oldpos。它必須具有與清單存儲區的長度完全相同的項數。[陣列零終止 = 1]
自 2.2 起
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_set ----

gtk_list_store_set
設置反覆運算器引用的行中一個或多個儲存格的值。變數參數清單應包含整數列號，每個列號後跟要設置的值。該列表以 -1 結尾。例如，將帶有 typeG_TYPE_STRING 的列 0 設置為 ？Foo？，你會寫gtk_list_store_set（store，iter，0，“Foo”，-1）。如果該值是G_TYPE_OBJECT，則由存儲區引用，如果該值是G_TYPE_STRING或G_TYPE_BOXED，則由存儲區複製該值。
語法
參數
list_store- 一GtkListStore
iter- 行反覆運算器
...- 列號和值對，以 -1 結尾
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_set_column_types ----

gtk_list_store_set_column_types
此函數主要用於繼承自 ，並且只應在構造新的 .在添加行或調用介面上的方法後，它將不起作用。GObjectsGtkListStoreGtkListStoreGtkTreeModel
語法
參數
list_store- 一GtkListStore
n_columns- 清單存儲的列數
types- 陣列長度 n 為 。[陣列長度 = n_columns]GTypes
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_set_valist ----

gtk_list_store_set_valist
參見 gtk_list_store_set（）;此版本需要va_list以供語言綁定使用。
語法
參數
list_store- 一GtkListStore
iter- 對正在修改的行有效的GtkTreeIter
var_args- 列/值對的va_list
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_set_value ----

gtk_list_store_set_value
設置由反覆運算器和列指定的儲存格中的資料。值的類型必須可轉換為列的類型。
語法
參數
list_store- 一GtkListStore
iter- 對正在修改的行有效的GtkTreeIter
column- 要修改的列號
value- 儲存格的新值
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_set_valuesv ----

gtk_list_store_set_valuesv
gtk_list_store_set_valist（） 的變體，它將列和值作為兩個陣列，而不是varargs。此函數主要用於語言綁定，以防要更改的列數直到運行時才知道。
語法
參數
list_store- 一GtkListStore
iter- 對正在修改的行有效的GtkTreeIter
columns- 列號陣列。[陣列長度 = n_values]
values- 一個 GValues 陣列。[陣列長度 = n_values]
n_values- 列的長度和值陣列
自 2.12 起
另請參見
GtkListStore


------------ KeyGTK3gtk_list_store_swap ----

gtk_list_store_swap
交換存儲中的 a 和 b。請注意，此函數僅適用於未排序的存儲。
語法
參數
store- 一.GtkListStore
a- 一.GtkTreeIter
b- 另一個.GtkTreeIter
自 2.2 起
另請參見
GtkListStore


------------ KeyGTK3gtk_lock_button_get_permission ----

gtk_lock_button_get_permission
獲取控制按鈕的物件。GPermission
語法
參數
button- 一GtkLockButton
返回
的按鈕。[無轉移]GPermission
自 3.2 起
另請參見
GtkLockButton


------------ KeyGTK3gtk_lock_button_new ----

gtk_lock_button_new
創建一個反映許可權的新鎖定按鈕。
語法
參數
permission- 一個.[允許-無]GPermission
返回
一個新的GtkLockButton
自 3.2 起
另請參見
GtkLockButton


------------ KeyGTK3gtk_lock_button_set_permission ----

gtk_lock_button_set_permission
設置控制按鈕的物件。GPermission
語法
參數
button- 一GtkLockButton
permission- 一個物件，或 NULL。[允許-無]GPermission
自 3.
另請參見
GtkLockButton


------------ KeyGTK3gtk_main ----

gtk_main
運行主迴圈，直到調用 gtk_main_quit（）。您可以嵌套對 gtk_main（） 的調用。在這種情況下，gtk_main_quit（） 將使主迴圈的最內層調用返回。
另請參見
gtk3-General


------------ KeyGTK3gtk_main_do_event ----

gtk_main_do_event
處理單個 GDK 事件。這是公開的，只是為了允許過濾GDK和GTK+之間的事件。您通常不需要直接調用此函數。雖然不應直接調用此函數，但您可能希望知道事件的確切處理方式。所以這是這個函數對事件執行的操作：壓縮進入/離開通知事件。如果傳遞的事件與下一個事件（從 GDK 偷看）一起構建 anenter/leave 對，則兩個事件都將被丟棄。這是為了避免指標交叉的（取消）突出顯示小角的積壓。找到獲取事件的小部件。如果無法確定小部件，則事件將被丟棄，除非它屬於 INCR 事務。然後將事件推送到堆疊上，以便您可以使用gtk_get_current_event（）查詢當前處理的事件。事件將發送到小部件。如果抓取處於活動狀態，則所有不在抓取小部件中包含的小部件的事件都將發送到後者，但有一些例外情況：由於明顯的原因，刪除和銷毀事件仍會發送到事件小部件。與事件小道的可視表示直接相關的事件。如果之前有一個企業在沒有配對休假事件的情況下交付給事件小部件，則離開事件將傳遞到事件小部件。拖動事件不會重定向，因為不清楚其語義是什麼。另一個有趣的點可能是，所有關鍵事件都首先通過關鍵窺探器函數傳遞（如果有的話）。如果需要此功能，請閱讀 gtk_key_snooper_install（） 的說明。完成傳遞後，將從事件堆疊中彈出事件。
語法
參數
event- 要處理的事件（通常由 GDK 傳遞）
另請參見
gtk3-General


------------ KeyGTK3gtk_main_iteration ----

gtk_main_iteration
運行主迴圈的單次反覆運算。如果沒有事件等待處理，GTK+將阻止直到下一個事件被注意到。如果您不想阻止查看gtk_main_iteration_do（）或檢查是否有任何事件正在與gtk_events_pending（）一起掛起。
返回
true 如果 gtk_main_quit（） 已調用最緊張的主環，則為 true
另請參見
gtk3-General


------------ KeyGTK3gtk_main_iteration_do ----

gtk_main_iteration_do
運行主迴圈的單次反覆運算。如果沒有可用的事件，則返回或阻止，具體取決於阻止的值。
語法
參數
blocking- TRUE，如果您希望 GTK+ 在沒有待處理事件時阻止
返回
true 如果 gtk_main_quit（） 已調用最緊張的主環，則為 true
另請參見
gtk3-General


------------ KeyGTK3gtk_main_level ----

gtk_main_level
要求提供主迴圈的當前嵌套級別。
返回
主迴圈的當前調用的嵌套級別
另請參見
gtk3-General


------------ KeyGTK3gtk_main_quit ----

gtk_main_quit
使主迴圈的最內層調用在重新獲得控制時返回。
另請參見
gtk3-General


------------ KeyGTK3GTK_MAJOR_VERSION ----

GTK_MAJOR_VERSION
GTK_MAJOR_VERSION
與gtk_get_major_version（）一樣，但來自應用程式編譯時使用的標頭，而不是來自應用程式運行時的庫連結。
另請參見
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_menu_attach ----

gtk_menu_attach
向（表）功能表中添加新功能表。“細胞”的數量？該專案將佔用由left_attach，right_attach，top_attach和bottom_attach指定。它們分別表示表的最左邊、最右邊、最上面和下部的列和行號。（列和行從零開始編制索引）。請注意，此函數與 gtk_menu_detach（） 無關。GtkMenuItem
語法
參數
menu- 一GtkMenu
child- 一GtkMenuItem
left_attach- 要將項目左側附加到的列號
right_attach- 要將項目右側附加到的列號
top_attach- 要將項目頂部附加到的行號
bottom_attach- 要將項目底部附加到的行號
2.4 起
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_attach_to_widget ----

gtk_menu_attach_to_widget
將功能表附加到小部件並提供一個回呼函數，當功能表調用gtk_menu_detach（） 在銷毀期間調用該函數時，將調用該函數。如果功能表附加到小部件，則當小部件被銷毀時，它將被銷毀，就好像它是子小部件一樣。如果widgets在螢幕之間移動，則附加的功能表也將在螢幕之間正確移動。
語法
參數
menu- 一GtkMenu
attach_widget- 菜單將附加到GtkWidget
detacher- 使用者提供的回呼函數，當功能表調用gtk_menu_detach（） 時將調用該函數。[範圍非同步][允許-無]
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_bar_get_child_pack_direction ----

gtk_menu_bar_get_child_pack_direction
檢索功能表列的當前子包方向。請參見gtk_menu_bar_set_child_pack_direction（）。
語法
參數
menubar- 一GtkMenuBar
返回
兒童包裝方向
自 2.
另請參見
GtkMenuBar


------------ KeyGTK3gtk_menu_bar_get_pack_direction ----

gtk_menu_bar_get_pack_direction
檢索功能表列的當前包方向。請參見 gtk_menu_bar_set_pack_direction（）。
語法
參數
menubar- 一GtkMenuBar
返回
包裝方向
自 2.8 起
另請參見
GtkMenuBar


------------ KeyGTK3gtk_menu_bar_new ----

gtk_menu_bar_new
鍒涘緩鏂扮殑GtkMenuBar
榪斿洖
鏂扮殑鑿滃崟鏍忥紝浣滀負GtkWidget
鍙﹁鍙傝
GtkMenuBar


------------ KeyGTK3gtk_menu_bar_new_from_model ----

gtk_menu_bar_new_from_model
創建一個新的，並根據模型用功能表項目和子功能表填充它。創建的功能表項目連接到功能表列所屬的操作 - 通常通過包含在小部件層次結構中的方式。GtkMenuBarGtkApplicationWindowGtkApplicationWindows
語法
參數
model- 一GMenuModel
返回
一個新的GtkMenuBar
自 3.4 起
另請參見
GtkMenuBar


------------ KeyGTK3gtk_menu_bar_set_child_pack_direction ----

gtk_menu_bar_set_child_pack_direction
設置小部件應如何打包在功能表列的子項中。
語法
參數
menubar- 一GtkMenuBar
child_pack_dir- 一個新的GtkPackDirection
自 2.8 起
另請參見
GtkMenuBar


------------ KeyGTK3gtk_menu_bar_set_pack_direction ----

gtk_menu_bar_set_pack_direction
設置專案在功能表列中的打包方式。
語法
參數
menubar- 一GtkMenuBar
pack_dir- 一個新的GtkPackDirection
自 2.8 起
另請參見
GtkMenuBar


------------ KeyGTK3gtk_menu_button_get_align_widget ----

gtk_menu_button_get_align_widget
返回用於與菜單對齊的父級。GtkWidget
語法
參數
menu_button- 一GtkMenuButton
返回
一個值或 NULL。[無轉移]GtkWidget
自 3.
另請參見
GtkMenuButton


------------ KeyGTK3gtk_menu_button_get_direction ----

gtk_menu_button_get_direction
返回快顯視窗彈出時將指向的方向。
語法
參數
menu_button- 一GtkMenuButton
返回
一個值GtkArrowType
3.6 起
另請參見
GtkMenuButton


------------ KeyGTK3gtk_menu_button_get_menu_model ----

gtk_menu_button_get_menu_model
返回用於生成快顯視窗的 。GMenuModel
語法
參數
menu_button- 一GtkMenuButton
返回
a 或空。[無轉移]GMenuModel
3.6 起
另請參見
GtkMenuButton


------------ KeyGTK3gtk_menu_button_get_popover ----

gtk_menu_button_get_popover
返回空值。
語法
參數
menu_button- 一GtkMenuButton
返回
a 或空。[無轉移]GtkPopover
自 3.12 起
另請參見
GtkMenuButton


------------ KeyGTK3gtk_menu_button_get_popup ----

gtk_menu_button_get_popup
返回空值。
語法
參數
menu_button- 一GtkMenuButton
返回
a 或空。[無轉移]GtkMenu
3.6 起
另請參見
GtkMenuButton


------------ KeyGTK3gtk_menu_button_get_use_popover ----

gtk_menu_button_get_use_popover
返回是否將從功能表模型構造 a 或 a。GtkPopoverGtkMenu
語法
參數
menu_button- 一GtkMenuButton
返回
如果使用GtkPopover
自 3.12 起
另請參見
GtkMenuButton


------------ KeyGTK3gtk_menu_button_new ----

gtk_menu_button_new
創建一個新的構件，將向下指向的箭頭作為唯一的子項。如果您願意，可以將子小部件替換為另一個子小部件。GtkMenuButtonGtkWidget
返回
新創建的小部件GtkMenuButton
3.6 起
另請參見
GtkMenuButton


------------ KeyGTK3gtk_menu_button_set_align_widget ----

gtk_menu_button_set_align_widget
將 用於 在彈出時將菜單與 行。請注意，align_widget必須包含自身。將其設置為 NULL 意味著功能表將與按鈕本身對齊。請注意，此屬性當前僅用於功能表，而不用於彈出框。GtkWidgetGtkMenuButton
語法
參數
menu_button- 一GtkMenuButton
align_widget- 一個.[允許-無]GtkWidget
3.6 起
另請參見
GtkMenuButton


------------ KeyGTK3gtk_menu_button_set_direction ----

gtk_menu_button_set_direction
設置快顯視窗的彈出方向，以及更改箭頭的方向。如果子項已自訂，則不會將其更改為箭頭。如果 不適合給定方向的可用空間，GTK+將最好將其保持在螢幕內並完全可見。如果您通過某個方向的GTK_ARROW_NONE，則快顯視窗的行為與您通過GTK_ARROW_DOWN時一樣（儘管您不會看到任何箭頭）。
語法
參數
menu_button- 一GtkMenuButton
direction- 一GtkArrowType
3.6 起
另請參見
GtkMenuButton


------------ KeyGTK3gtk_menu_button_set_menu_model ----

gtk_menu_button_set_menu_model
設置從中構造快顯視窗的 ，或設置為 NULL 以禁用按鈕。根據 的值，將使用 gtk_menu_new_from_model（） 創建 a，或者使用 gtk_popover_new_from_model（） 創建 a。在任何一種情況下，操作都將按照這些函數的文檔進行連接。如果或已經設置，其內容將丟失並被新創建的快顯視窗替換。GMenuModel?use-popover?GtkMenuGtkPopover?popup??popover?
語法
參數
menu_button- 一GtkMenuButton
menu_model- 一個.[允許-無]GMenuModel
3.6 起
另請參見
GtkMenuButton


------------ KeyGTK3gtk_menu_button_set_popover ----

gtk_menu_button_set_popover
設置按一下按鈕時將彈出的 ，或設置為 NULL 以禁用按鈕。如果設置了 或，它們將設置為 NULL。GtkPopover?menu-model??popup?
語法
參數
menu_button- 一GtkMenuButton
popover- 一個.[允許-無]GtkPopover
自 3.12 起
另請參見
GtkMenuButton


------------ KeyGTK3gtk_menu_button_set_popup ----

gtk_menu_button_set_popup
設置按一下按鈕時將彈出的，或設置為 NULL 以禁用按鈕。如果設置了 或，它們將設置為 NULL。GtkMenu?menu-model??popover?
語法
參數
menu_button- 一GtkMenuButton
menu- 一個.[允許-無]GtkMenu
3.6 起
另請參見
GtkMenuButton


------------ KeyGTK3gtk_menu_button_set_use_popover ----

gtk_menu_button_set_use_popover
設置是否在調用 gtk_menu_button_set_menu_model（） 時構造 a 而不是。請注意，僅當設置了新功能表模型時，才會參考此屬性。GtkPopoverGtkMenu
語法
參數
menu_button- 一GtkMenuButton
use_popover- TRUE 從功能表模型構造彈出框
自 3.12 起
另請參見
GtkMenuButton


------------ KeyGTK3gtk_menu_detach ----

gtk_menu_detach
將菜單從它所附加到的構件中分離出來。此函數將調用回呼函數 detacher，前提是在調用 gtk_menu_attach_to_widget（） 函數時提供。
語法
參數
menu- 一GtkMenu
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_get_accel_group ----

gtk_menu_get_accel_group
獲取 它為 themenu 保存全域加速器。請參見gtk_menu_set_accel_group（）。GtkAccelGroup
語法
參數
menu- 一GtkMenu
返回
與菜單相關聯。[無轉移]GtkAccelGroup
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_get_accel_path ----

gtk_menu_get_accel_path
檢索功能表上設置的加速器路徑。
語法
參數
menu- 有效GtkMenu
返回
功能表上設置的加速器路徑。
自 2.14 起
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_get_active ----

gtk_menu_get_active
從菜單中返回選定的功能表項目。這是由 使用的。GtkComboBox
語法
參數
menu- 一GtkMenu
返回
上次在功能表中選擇的。如果尚未進行選擇，則選擇第一個功能表項目。[無轉移]GtkMenuItem
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_get_attach_widget ----

gtk_menu_get_attach_widget
返回菜單附加到的 。GtkWidget
語法
參數
menu- 一GtkMenu
返回
菜單附加到的。[無轉移]GtkWidget
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_get_for_attach_widget ----

gtk_menu_get_for_attach_widget
返回附加到此小元件的功能表的清單。此列表歸 GTK+ 所有，不得修改。
語法
參數
widget- 一GtkWidget
返回
附加到他的小部件的菜單清單。[element-type GtkWidget][無轉移]
自 2.6 起
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_get_monitor ----

gtk_menu_get_monitor
檢索要在其上顯示功能表的監視器的編號。
語法
參數
menu- 一GtkMenu
返回
應在其上彈出功能表的顯示器數量，如果未設置顯示器，則為 -1
自 2.14 起
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_get_reserve_toggle_size ----

gtk_menu_get_reserve_toggle_size
返回功能表是否為切換和圖示保留空間，而不考慮它們的實際存在。
語法
參數
menu- 一GtkMenu
返回
菜單是否預留切換空間
自 2.18 起
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_get_tearoff_state ----

gtk_menu_get_tearoff_state
gtk_menu_get_tearoff_state自版本 3.10 起已棄用，不應在新編寫的代碼中使用。返回菜單是否被撕掉。請參見gtk_menu_set_tearoff_state（）。
語法
參數
menu- 一GtkMenu
返回
如果功能表當前已撕下，則為 TRUE。
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_get_title ----

gtk_menu_get_title
gtk_menu_get_title自 3.10 版起已棄用，不應在新編寫的代碼中使用。返回菜單的標題。請參見 gtk_menu_set_title（）。
語法
參數
menu- 一GtkMenu
返回
功能表的標題，如果功能表未設置標題，則為 NULL。此字串歸 GTK+ 所有，不應修改或釋放。
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_item_activate ----

gtk_menu_item_activate
在給定專案上發出信號?activate?
語法
參數
menu_item- 功能表項目
另請參見
GtkMenuItem


------------ KeyGTK3gtk_menu_item_deselect ----

gtk_menu_item_deselect
在給定專案上發出信號。?deselect?
語法
參數
menu_item- 功能表項目
另請參見
GtkMenuItem


------------ KeyGTK3gtk_menu_item_get_accel_path ----

gtk_menu_item_get_accel_path
檢索以前在 menu_item 上設置的加速器路徑。有關詳細資訊，請參見 gtk_menu_item_set_accel_path（）。
語法
參數
menu_item- 有效GtkMenuItem
返回
與此功能表項目的功能相對應的加速器路徑，如果未設置，則為 NULL
自 2.14 起
另請參見
GtkMenuItem


------------ KeyGTK3gtk_menu_item_get_label ----

gtk_menu_item_get_label
設置menu_item標籤上的文本
語法
參數
menu_item- 一GtkMenuItem
返回
menu_itemlabel中的文本。這是標籤使用的內部字串，不得修改。
2.16 起
另請參見
GtkMenuItem


------------ KeyGTK3gtk_menu_item_get_reserve_indicator ----

gtk_menu_item_get_reserve_indicator
返回menu_item是否為子功能表指示器保留空間，而不管它是否具有子功能表。
語法
參數
menu_item- 一GtkMenuItem
返回
如果menu_itemalways為小功能表指標保留空間，則為 true
自 3.0 起
另請參見
GtkMenuItem


------------ KeyGTK3gtk_menu_item_get_right_justified ----

gtk_menu_item_get_right_justified
gtk_menu_item_get_right_justified自版本 3.2 起已棄用，不應在新編寫的代碼中使用。請參見 gtk_menu_item_set_right_justified（）獲取功能表項目是否在功能表列的右側顯示兩端。
語法
參數
menu_item- 一GtkMenuItem
返回
如果功能表項目在添加到功能表列後將顯示在最右側，則為 TRUE。
另請參見
GtkMenuItem


------------ KeyGTK3gtk_menu_item_get_submenu ----

gtk_menu_item_get_submenu
獲取此功能表項目下的子功能表（如果有）。請參見 gtk_menu_item_set_submenu（）。
語法
參數
menu_item- 一GtkMenuItem
返回
此功能表項目的子功能表，如果沒有，則為 NULL。[無轉移]
另請參見
GtkMenuItem


------------ KeyGTK3gtk_menu_item_get_use_underline ----

gtk_menu_item_get_use_underline
檢查文本中的底線是否指示接下來的字元應該用於助記符快速鍵。
語法
參數
menu_item- 一GtkMenuItem
返回
如果標籤中嵌入的底線指示助記符快速鍵，則為 TRUE。
2.16 起
另請參見
GtkMenuItem


------------ KeyGTK3gtk_menu_item_new ----

gtk_menu_item_new
鍒涘緩鏂扮殑 .GtkMenuItem
榪斿洖
鏂板壋寤虹殑GtkMenuItem
鍙﹁鍙傝
GtkMenuItem


------------ KeyGTK3gtk_menu_item_new_with_label ----

gtk_menu_item_new_with_label
Creates a new  whose child is a .GtkMenuItemGtkLabel
Syntax
Parameters
label  -  	the text for the label
Returns
the newly created GtkMenuItem
See Also
GtkMenuItem


------------ KeyGTK3gtk_menu_item_new_with_mnemonic ----

gtk_menu_item_new_with_mnemonic
Creates a new  containing a label.The label will be created using gtk_label_new_with_mnemonic(),so underscores in label indicate the mnemonic for the menu item.GtkMenuItem
Syntax
Parameters
label  -  	The text of the button, with an underscore in front of themnemonic character
Returns
a new GtkMenuItem
See Also
GtkMenuItem


------------ KeyGTK3gtk_menu_item_select ----

gtk_menu_item_select
在給定專案上發出信號。?select?
語法
參數
menu_item- 功能表項目
另請參見
GtkMenuItem


------------ KeyGTK3gtk_menu_item_set_accel_path ----

gtk_menu_item_set_accel_path
將加速器路徑設置為menu_item，通過該路徑，可以識別由使用者引起的功能表項目加速器的運行時更改並將其保存到持久性存儲中（請參閱此處的 gtk_accel_map_save（））。若要為此功能表項目設置默認快速鍵，請使用相同的accel_path callgtk_accel_map_add_entry（）。有關加速器路徑的詳細資訊，請參閱 alsogtk_accel_map_add_entry（），有關此函數的更方便的變體，請參閱 gtk_menu_set_accel_path（）。此函數基本上是一個方便的包裝器，它使用功能表項目的相應加速器組處理調用gtk_widget_set_accel_path（）。請注意，您需要在父功能表上設置一個加速器 withgtk_menu_set_accel_group（） 才能使其正常工作。請注意，accel_path字串將存儲在 .因此，如果傳遞靜態字串，則可以通過先使用g_intern_static_string（）將其間接來節省一些記憶體。GQuark
語法
參數
menu_item- 有效GtkMenuItem
accel_path- 加速器路徑，對應於此功能表項目的功能，或 NULL 取消設置當前路徑。[允許-無]
另請參見
GtkMenuItem


------------ KeyGTK3gtk_menu_item_set_label ----

gtk_menu_item_set_label
設置menu_item標籤上的文本
語法
參數
menu_item- 一GtkMenuItem
label- 要設置的文本
2.16 起
另請參見
GtkMenuItem


------------ KeyGTK3gtk_menu_item_set_reserve_indicator ----

gtk_menu_item_set_reserve_indicator
設置menu_item是否應為子功能表指示器保留空間，而不管它是否實際具有子功能表。應用程式應該幾乎不需要調用此函數。
語法
參數
menu_item- 一GtkMenuItem
reserve- 新值
自 3.
另請參見
GtkMenuItem


------------ KeyGTK3gtk_menu_item_set_right_justified ----

gtk_menu_item_set_right_justified
gtk_menu_item_set_right_justified自 3.2 版起已棄用，不應在新編寫的代碼中使用。如果您堅持使用它，請使用gtk_widget_set_hexpand（）和gtk_widget_set_halign（）。設置功能表項目是否在功能表列的右側顯示兩端。傳統上這樣做是為了 ？幫助功能表項目，但現在被認為是一個壞主意。（如果從右向左的語言（如希伯來語或阿拉伯語）的小部件佈局相反，則右對齊的功能表項目將顯示在左側。
語法
參數
menu_item- 一個.GtkMenuItem
right_justified- 如果為 TRUE，則功能表項目將出現在最右側，如果添加到功能表列中
另請參見
GtkMenuItem


------------ KeyGTK3gtk_menu_item_set_submenu ----

gtk_menu_item_set_submenu
設置或替換功能表項目的子功能表，或在傳遞 NULLsubmenu 時將其刪除。
語法
參數
menu_item- 一GtkMenuItem
submenu- 子功能表，或 NULL。[允許-無]
另請參見
GtkMenuItem


------------ KeyGTK3gtk_menu_item_set_use_underline ----

gtk_menu_item_set_use_underline
如果為 true，則文本中的底線指示接下來的字元應用于助記符快速鍵。
語法
參數
menu_item- 一GtkMenuItem
setting- 如果文本中的底線表示助記符，則為 TRUE
2.16 起
另請參見
GtkMenuItem


------------ KeyGTK3gtk_menu_item_toggle_size_allocate ----

gtk_menu_item_toggle_size_allocate
在給定專案上發出信號。?toggle-size-allocate?
語法
參數
menu_item- 功能表項目。
allocation- 用作信號資料的分配。
另請參見
GtkMenuItem


------------ KeyGTK3gtk_menu_item_toggle_size_request ----

gtk_menu_item_toggle_size_request
在給定專案上發出信號。?toggle-size-request?
語法
參數
menu_item- 功能表項目
requisition- 用作信號資料的申請。[輸入]
另請參見
GtkMenuItem


------------ KeyGTK3gtk_menu_new ----

gtk_menu_new
創建新的GtkMenu
返回
一個新的GtkMenu
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_new_from_model ----

gtk_menu_new_from_model
創建 a 並根據模型用功能表項目和子功能表填充它。創建的功能表項目連接到在功能表所屬的 操作 - 通常通過附加到小部件層次結構中包含的小部件（請參見gtk_menu_attach_to_widget（））。）。還可以使用功能表附件小部件或其任何父小部件上的 gtk_widget_insert_action_group（） 添加操作。GtkMenuGtkApplicationWindowGtkApplicationWindows
語法
參數
model- 一GMenuModel
返回
一個新的GtkMenu
自 3.4 起
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_popdown ----

gtk_menu_popdown
從螢幕中刪除功能表。
語法
參數
menu- 一GtkMenu
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_popup ----

gtk_menu_popup
顯示功能表並使其可供選擇。應用程式可以使用此函數來顯示內容相關性功能表，並且通常會為parent_menu_shell、parent_menu_item、func 和資料參數提供 NULL。預設功能表定位功能會將功能表定位在當前滑鼠引導器位置。按鈕參數應該是按下滑鼠按鈕以啟動功能表快顯視窗。如果功能表快顯視窗是由滑鼠按鈕按下以外的其他內容（如滑鼠按鈕釋放或按鍵）發起的，則按鈕應為 0。activate_time參數用於解決衝突對滑鼠/鍵盤抓取請求的併發請求的啟動。要正常運行，這需要是導致啟動快顯視窗的用戶事件的時間戳記（如滑鼠按一下或按鍵）。僅當沒有此類事件可用時，才能改用 gtk_get_current_event_time（）。
語法
參數
menu- 一GtkMenu
parent_menu_shell- 包含觸發功能表項目的菜單外殼，或 NULL。[允許-無]
parent_menu_item- 啟動快顯視窗的功能表項目，或 NULL。[允許-無]
func- 使用者提供的用於定位功能表的函數，或 NULL。[範圍非同步][允許-無]
data- 使用者提供的資料要傳遞給 func。
button- 按下滑鼠按鈕以啟動事件。
activate_time- 啟動事件發生的時間。
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_popup_for_device ----

gtk_menu_popup_for_device
顯示功能表並使其可供選擇。應用程式可以使用此功能來顯示上下文相關的功能表，並且通常會為parent_menu_shell，parent_menu_item，func，data和銷毀參數提供NULL。預設功能表定位功能會將功能表定位在設備的當前位置（或其對應的指針）。按鈕參數應該是按下滑鼠按鈕以啟動功能表快顯視窗。如果功能表快顯視窗是由滑鼠按鈕按下以外的其他方式（如滑鼠按鈕釋放或按鍵）啟動的，則按鈕應為 0。activate_time參數用於解決衝突對滑鼠/鍵盤抓取請求的當前請求的啟動。要正常運行，這需要是導致快顯視窗啟動的用戶事件的時間戳記（如滑鼠按一下或按鍵）。僅當沒有此類事件可用時，才能改用 gtk_get_current_event_time（）。
語法
參數
menu- 一GtkMenu
device- 一個.[允許-無]GdkDevice
parent_menu_shell- 包含觸發功能表項目的菜單外殼，或 NULL。[允許-無]
parent_menu_item- 啟動觸發快顯視窗的功能表項目，或 NULL。[允許-無]
func- 使用者提供的用於定位功能表的函數，或 NULL。[允許-無]
data- 使用者提供的資料要傳遞給 func。[允許-無]
destroy- 銷毀通知資料。[允許-無]
button- 按下滑鼠按鈕以啟動事件
activate_time- 啟動事件發生的時間
自 3.0 起
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_reorder_child ----

gtk_menu_reorder_child
將子級移動到功能表子級清單中的新位置。
語法
參數
menu- 一GtkMenu
child- 移動GtkMenuItem
position- 放置孩子的新位置。位置編號從 0 到 n - 1
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_reposition ----

gtk_menu_reposition
根據其位置函數重新定位功能表。
語法
參數
menu- 一GtkMenu
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_set_accel_group ----

gtk_menu_set_accel_group
設置哪個保持主題的全球加速器nu。此加速器組還需要添加到此功能表與 gtk_window_add_accel_group（） 一起使用的所有視窗中，以便這些視窗支援此組中包含的所有加速器。GtkAccelGroup
語法
參數
menu- 一GtkMenu
accel_group- 與菜單相關聯。[允許-無]GtkAccelGroup
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_set_accel_path ----

gtk_menu_set_accel_path
為此功能表設置加速器路徑，從中可以構造其直接子項（功能表項目）的加速器路徑。此函數的主要目的是使程式師不必調用gtk_menu_item_set_accel_path（） oneach 功能表項目，該功能表項目應支援運行時用戶可更改的加速器。相反，只需在其父菜單上調用gtk_menu_set_accel_path（），此菜單的每個功能表項目（包含描述其用途的標籤）都會自動獲得分配的加速路徑。例如，包含功能表項目的菜單 ？新增功能？和？退出？，將，aftergtk_menu_set_accel_path（菜單，”/檔“）;已調用，為其專案分配加速路徑：”/文件/新建“和”/文件/退出”。然後，將加速路徑分配給功能表項目，使用戶能夠在運行時更改它們的加速器。有關加速器路徑及其預設設置的更多詳細資訊，請參閱gtk_accel_map_add_entry（）。請注意，accel_path字串將存儲在 .因此，如果你傳遞一個靜態字串，你可以通過先用g_intern_static_string（）來代替它來節省一些記憶體。GQuark
語法
參數
menu- 有效GtkMenu
accel_path- 有效的加速器路徑。[允許-無]
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_set_active ----

gtk_menu_set_active
選擇功能表中指定的功能表項目。這是由其他人使用的，不應該被其他人使用。GtkComboBox
語法
參數
menu- 一GtkMenu
index- 要選擇的功能表項目的索引。索引值從 0 到 n-1
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_set_monitor ----

gtk_menu_set_monitor
通知 GTK+ 應在哪個顯示器上彈出菜單。請參見 gdk_screen_get_monitor_geometry（）。如果功能表不應出現在與指標相同的監視器上，則應從 中調用此函數。此資訊無法從 由 返回的座標可靠地推斷出來，因為對於很長的功能表，這些座標可能會超出監視器邊界甚至螢幕邊界。GtkMenuPositionFuncGtkMenuPositionFunc
語法
參數
menu- 一GtkMenu
monitor_num- 應彈出菜單的顯示器編號
2.4 起
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_set_reserve_toggle_size ----

gtk_menu_set_reserve_toggle_size
設置功能表是否應為繪製切換開關圖示保留空間，而不考慮它們的實際存在。
語法
參數
menu- 一GtkMenu
reserve_toggle_size- 是否為切換保留大小
自 2.18 起
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_set_screen ----

gtk_menu_set_screen
設置功能表的顯示位置。GdkScreen
語法
參數
menu- 一GtkMenu
screen- a ，如果螢幕應由功能表附加到的小部件確定，則為 NULL。[允許-無]GdkScreen
自 2.2 起
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_set_tearoff_state ----

gtk_menu_set_tearoff_state
gtk_menu_set_tearoff_state自 3.10 版起已棄用，不應在新編寫的代碼中使用。更改功能表的撕裂狀態。功能表通常顯示為下拉式功能表，只要功能表處於活動狀態，該功能表就會一直存在。它也可以顯示為一個撕下功能表，直到它被關閉或重新連接為止。
語法
參數
menu- 一GtkMenu
torn_off- 如果為 TRUE，則功能表顯示為撕下功能表。
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_set_title ----

gtk_menu_set_title
gtk_menu_set_title自版本 3.10 起已棄用，不應在新編寫的代碼中使用。設置功能表的標題字串。當功能表顯示為撕裂線時，將顯示標題。如果 title 為 NULL，則功能表將查看它是否附加到父功能表項目，如果是，它將嘗試使用與該功能表項目的標籤相同的文本。
語法
參數
menu- 一GtkMenu
title- 包含功能表標題的字串
另請參見
GtkMenu


------------ KeyGTK3gtk_menu_shell_activate_item ----

gtk_menu_shell_activate_item
啟動功能表外殼中的功能表項目。
語法
參數
menu_shell- 一GtkMenuShell
menu_item- 啟動GtkMenuItem
force_deactivate- 如果為 TRUE，則在啟動功能表項目後強制停用 themenu shell
另請參見
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_append ----

gtk_menu_shell_append
將新添加到菜單 shell 的網站清單的末尾。GtkMenuItem
語法
參數
menu_shell- 一GtkMenuShell
child- 要添加GtkMenuItem
另請參見
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_bind_model ----

gtk_menu_shell_bind_model
在 和 之間建立綁定。刪除 shell 的內容，然後使用與模型相關的功能表項目重新填充。當模型更改時，外殼會更新。在具有不同模型的 shell 上調用此函數兩次，因為第一個綁定將替換為與 newmodel 的綁定。如果模型為 NULL，則撤銷任何先前的綁定，並removed.with_separators所有子項確定在它們之間是否插入了分離器。這通常是需要的功能表，但對於功能表列沒有意義。如果action_namespace是非 NULL，則效果是模型中提到的 allactions 的名稱以命名空間為首碼，外加一個點。例如，如果操作 “退出”是提到，action_namespace是 ？app？則有效的操作名稱是 “app.quit？”。此函數用於在創建的功能表項目上定義操作名稱和目標值。如果要使用 ？app 以外的 anaction 組？和 “win？”，或者如果要使用 外部 ，則需要將自己的操作組附加到小元件層次結構usinggtk_widget_insert_action_group（）。例如，如果您創建了一個帶有 “quit？action 並將其與名稱 “mygroup” 插入，那麼您將使用操作名稱 ？mygroup.quit？在你的。在大多數情況下，您可能最好usinggtk_menu_new_from_model（）或gtk_menu_bar_new_from_model（）或直接將gtk_application_set_app_menu（）orgtk_application_set_menubar（）傳遞到。GtkMenuShellGMenuModelGtkActionableGtkMenuShellGtkApplicationWindowGMenuModelGMenuModel
語法
參數
menu_shell- 一GtkMenuShell
model- 要綁定到或 NULL 要刪除綁定。[允許-無]GMenuModel
action_namespace- 模型中操作的命名空間。[允許-無]
with_separators- true 如果 shell 中的頂級物品應該在它們之間有分離器
自 3.
另請參見
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_cancel ----

gtk_menu_shell_cancel
取消功能表外殼中的選擇。
語法
參數
menu_shell- 一GtkMenuShell
2.4 起
另請參見
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_deactivate ----

gtk_menu_shell_deactivate
停用菜單外殼。通常，這會導致功能表外殼從螢幕上擦除。
語法
參數
menu_shell- 一GtkMenuShell
另請參見
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_deselect ----

gtk_menu_shell_deselect
從功能表 shell 中取消選擇當前選定的項（如果有）。
語法
參數
menu_shell- 一GtkMenuShell
另請參見
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_get_parent_shell ----

gtk_menu_shell_get_parent_shell
獲取父菜單外殼。子功能表的父菜單 shell 是從中打開它的 或。GtkMenuGtkMenuBar
語法
參數
menu_shell- 一GtkMenuShell
返回
父項 。[無轉移]GtkMenuShell
自 3.0 起
另請參見
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_get_selected_item ----

gtk_menu_shell_get_selected_item
獲取當前選定的項。
語法
參數
menu_shell- 一GtkMenuShell
返回
當前所選項目。[無轉移]
自 3.0 起
另請參見
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_get_take_focus ----

gtk_menu_shell_get_take_focus
如果功能表 shell 將鍵盤焦點置於快顯視窗上，則返回 TRUE。
語法
參數
menu_shell- 一GtkMenuShell
返回
如果功能表外殼將鍵盤焦點放在快顯視窗上，則為 TRUE。
自 2.8 起
另請參見
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_insert ----

gtk_menu_shell_insert
將新添加到菜單 shell 的項清單中，該列表位於位置指示的位置。GtkMenuItem
語法
參數
menu_shell- 一GtkMenuShell
child- 要添加GtkMenuItem
position- 項目列表中添加子項的位置。位置編號從 0 到 n-1
另請參見
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_prepend ----

gtk_menu_shell_prepend
將新添加到菜單 shell 的網站清單的開頭。GtkMenuItem
語法
參數
menu_shell- 一GtkMenuShell
child- 要添加GtkMenuItem
另請參見
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_select_first ----

gtk_menu_shell_select_first
選擇功能表 shell 的第一個可見或可選子項;除非唯一項是撕裂項，否則不要選擇撕裂項。
語法
參數
menu_shell- 一GtkMenuShell
search_sensitive- 如果為 TRUE，則搜索第一個可選功能表項目，否則如果第一個項目不敏感，則不選擇任何內容。如果功能表最初是彈出的，這應該是 FALSE。
自 2.2 起
另請參見
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_select_item ----

gtk_menu_shell_select_item
從菜單外殼中選擇功能表項目。
語法
參數
menu_shell- 一GtkMenuShell
menu_item- 要選擇的GtkMenuItem
另請參見
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_set_take_focus ----

gtk_menu_shell_set_take_focus
如果take_focus為 TRUE（預設值），則功能表 shell 將採用鍵盤焦點，以便接收在功能表中啟用鍵盤導航所需的所有鍵盤事件。將take_focus設置為 FALSE 僅適用于特殊應用程式（如虛擬鍵盤實現），這些應用程式不應採用鍵盤焦點。每當彈出子功能表時，功能表或功能表列的take_focus狀態都會自動更新為子功能表，因此您不必擔心為整個功能表層次結構遞迴設置它。僅當以程式設計方式選取子功能表並手動將其置頂時，才能顯式設置子功能表的 take_focus 屬性。請注意，將其設置為 FALSE 會產生副作用：如果焦點位於其他應用中，則會保留焦點，並且功能表中的金鑰導航不起作用。因此，只有當焦點位於螢幕鍵盤擁有的某些踏板上時，功能表上的鍵導航才會起作用。為了避免混淆使用者，take_focus設置為 FALSEs 的功能表不應顯示助記符或加速器，因為它不能保證它們是否有效。另請參見 gdk_keyboard_grab（）
語法
參數
menu_shell- 一GtkMenuShell
take_focus- TRUE，如果功能表外殼應該採取鍵盤焦點在快顯視窗
自 2.8 起
另請參見
GtkMenuShell


------------ KeyGTK3gtk_menu_tool_button_get_menu ----

gtk_menu_tool_button_get_menu
獲取 與 關聯的。GtkMenuGtkMenuToolButton
語法
參數
button- 一GtkMenuToolButton
返回
與 相關聯。[無轉移]GtkMenuGtkMenuToolButton
自 2.6 起
另請參見
GtkMenuToolButton


------------ KeyGTK3gtk_menu_tool_button_new ----

gtk_menu_tool_button_new
使用icon_widget作為圖示並標記作為標籤來創建新的。GtkMenuToolButton
語法
參數
icon_widget- 將用作圖示小部件的小部件，或 NULL。[允許-無]
label- 將用作標籤的字串，或 NULL。[允許-無]
返回
新的GtkMenuToolButton
自 2.6 起
另請參見
GtkMenuToolButton


------------ KeyGTK3gtk_menu_tool_button_new_from_stock ----

gtk_menu_tool_button_new_from_stock
gtk_menu_tool_button_new_from_stock自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_menu_tool_button_new（）。創建新的 .新品將包含stock_id指示的庫存商品中的圖示和標籤。GtkMenuToolButtonGtkMenuToolButton
語法
參數
stock_id- 庫存項目的名稱
返回
新的GtkMenuToolButton
自 2.6 起
另請參見
GtkMenuToolButton


------------ KeyGTK3gtk_menu_tool_button_set_arrow_tooltip_markup ----

gtk_menu_tool_button_set_arrow_tooltip_markup
將工具提示標記文本設置為用作彈出功能表的箭頭按鈕的工具提示。請參閱 gtk_tool_item_set_tooltip_text（） 以獲取有關整體工具提示的設置。GtkMenuToolButton
語法
參數
button- 一GtkMenuToolButton
markup- 標記文本將用作按鈕箭頭按鈕的工具提示文本
自 2.1 起
另請參見
GtkMenuToolButton


------------ KeyGTK3gtk_menu_tool_button_set_arrow_tooltip_text ----

gtk_menu_tool_button_set_arrow_tooltip_text
將工具提示文本設置為用作彈出功能表的箭頭按鈕的工具提示。請參閱 gtk_tool_item_set_tooltip_text（） 以設置整個工具。GtkMenuToolButton
語法
參數
button- 一GtkMenuToolButton
text- 文本將用作按鈕箭頭按鈕的工具提示文本
自 2.12 起
另請參見
GtkMenuToolButton


------------ KeyGTK3gtk_menu_tool_button_set_menu ----

gtk_menu_tool_button_set_menu
設置當用戶按一下箭頭時彈出的 。如果功能表為 NULL，則箭頭按鈕將變得不敏感。GtkMenu
語法
參數
button- 一GtkMenuToolButton
menu- 相關GtkMenuGtkMenuToolButton
自 2.6 起
另請參見
GtkMenuToolButton


------------ KeyGTK3gtk_message_dialog_format_secondary_markup ----

gtk_message_dialog_format_secondary_markup
將消息對話方塊的輔助文本設置為message_format（withprintf（）樣式），該文本使用 Pango 文本標記語言進行標記。由於疏忽，此函數不會像gtk_message_dialog_new_with_markup（） 那樣轉義特殊的 XML 字元。因此，如果參數可能包含特殊的 XML 字元，則應使用 g_markup_printf_escaped（） 對其進行轉義。123456[/syntax] [syntax]gchar *msg;msg = g_markup_printf_escaped （message_format， ...）;gtk_message_dialog_format_secondary_markup（message_dialog，“%s”，消息）;g_free（消息）;[/語法]
語法
參數
message_dialog- 一GtkMessageDialog
message_format- printf（）樣式的標記字串（請參閱Pango標記格式）或 NULL
...- message_format的參數
自 2.6 起
另請參見
GtkMessageDialog


------------ KeyGTK3gtk_message_dialog_format_secondary_text ----

gtk_message_dialog_format_secondary_text
將消息對話方塊的輔助文本設置為message_format（使用 printf（）樣式）。
語法
參數
message_dialog- 一GtkMessageDialog
message_format- printf（）樣式的格式字串，或 NULL。[允許-無]
...- message_format的參數
自 2.6 起
另請參見
GtkMessageDialog


------------ KeyGTK3gtk_message_dialog_get_image ----

gtk_message_dialog_get_image
gtk_message_dialog_get_image自版本 3.12 起已棄用，不應在新編寫的代碼中使用。用於帶有圖像的對話方塊獲取對話方塊的圖像。GtkDialog
語法
參數
dialog- 一GtkMessageDialog
返回
對話方塊的圖像。[無轉移]
自 2.14 起
另請參見
GtkMessageDialog


------------ KeyGTK3gtk_message_dialog_get_message_area ----

gtk_message_dialog_get_message_area
返回對話方塊的消息區域。這是包裝鑽石的主要和次要標籤的盒子。您可以將自己的額外內容添加到該框中，它將顯示在這些標籤下方。請參閱 gtk_dialog_get_content_area（） 以瞭解父級 中的相應功能。GtkDialog
語法
參數
message_dialog- 一GtkMessageDialog
返回
對應於消息區域？在message_dialog。[無轉移]GtkVBox
自 2.2 起
另請參見
GtkMessageDialog


------------ KeyGTK3gtk_message_dialog_new ----

gtk_message_dialog_new
創建一個新的消息對話方塊，這是一個簡單的對話方塊，帶有指示對話方塊類型（錯誤、警告等）的圖示以及使用者可能想要查看的一些文本。當使用者按一下按鈕時，將使用 來自 的響應 ID 發出“響應”信號。有關更多詳細資訊，請參閱。GtkResponseTypeGtkDialog
語法
參數
parent- 暫時性父級，或 NULL 表示無。[允許-無]
flags- 旗幟
type- 消息類型
buttons- 要使用的按鈕集
message_format- printf（）樣式的格式字串，或 NULL。[允許-無]
...- message_format的參數
返回
一個新的.[無轉移]GtkMessageDialog
另請參見
GtkMessageDialog


------------ KeyGTK3gtk_message_dialog_new_with_markup ----

gtk_message_dialog_new_with_markup
創建一個新的消息對話方塊，這是一個簡單的對話方塊，帶有指示對話方塊類型（錯誤，警告等）的圖示和一些用Pango文本標記語言標記的文本。當使用者按一下按鈕時，“回應？”發出信號時帶有來自 的響應 ID。有關更多詳細資訊，請參閱。傳遞給此函數的 printf（） 參數中的特殊 XML 字元將根據需要自動轉義。（請參閱 g_markup_printf_escaped（） 瞭解如何實現此功能。通常這是你想要的，但是如果你有一個現有的Pango標記字串，你想從字面上用作標籤，那麼你需要使用gtk_message_dialog_set_markup（）代替，因為你不能傳遞標記字串作為格式（它可能包含？%？字元）或作為字串參數。123456789[/語法] [語法]GtkWidget *對話方塊;GtkDialogFlags 標誌 = GTK_DIALOG_DESTROY_WITH_PARENT;對話方塊 = gtk_message_dialog_new（parent_window、標誌、GTK_MESSAGE_ERROR、GTK_BUTTONS_CLOSE、NULL）;gtk_message_dialog_set_markup（GTK_MESSAGE_DIALOG（對話方塊）、標記）;[/語法]GtkResponseTypeGtkDialog
語法
參數
parent- 暫時性父級，或 NULL 表示無。[允許-無]
flags- 旗幟
type- 消息類型
buttons- 要使用的按鈕集
message_format- printf（）樣式的格式字串，或 NULL。[允許-無]
...- message_format的參數
返回
一個新的GtkMessageDialog
2.4 起
另請參見
GtkMessageDialog


------------ KeyGTK3gtk_message_dialog_set_image ----

gtk_message_dialog_set_image
gtk_message_dialog_set_image自版本 3.12 起已棄用，不應在新編寫的代碼中使用。用於創建帶有圖像的對話方塊設置對話方塊的圖像到圖像。GtkDialog
語法
參數
dialog- 一GtkMessageDialog
image- 圖像
自 2.10 起
另請參見
GtkMessageDialog


------------ KeyGTK3gtk_message_dialog_set_markup ----

gtk_message_dialog_set_markup
將消息對話方塊的文本設置為 str，它使用 Pango 文本標記語言進行標記。
語法
參數
message_dialog- 一GtkMessageDialog
str- 標記字串（請參閱 Pango 標記格式）
2.4 起
另請參見
GtkMessageDialog


------------ KeyGTK3GTK_MICRO_VERSION ----

GTK_MICRO_VERSION
GTK_MICRO_VERSION
與gtk_get_micro_version（）一樣，但來自應用程式編譯時使用的標頭，而不是來自應用程式運行時的庫linkedagainst。
另請參見
gtk3-Feature-Test-Macros


------------ KeyGTK3GTK_MINOR_VERSION ----

GTK_MINOR_VERSION
GTK_MINOR_VERSION
與gtk_get_minor_version（）一樣，但來自應用程式編譯時使用的標頭，而不是來自應用程式運行時的庫連結。
另請參見
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_misc_get_alignment ----

gtk_misc_get_alignment
獲取小部件在其分配範圍內的 X 和 Y 對齊方式。請參見 gtk_misc_set_alignment（）。
語法
參數
misc- 一GtkMisc
xalign- 存儲雜項的 X 對齊方式的位置，或 NULL。[輸出][允許-無]
yalign- 存儲雜項的Y對齊位置，或NULL。[輸出][允許-無]
另請參見
GtkMisc


------------ KeyGTK3gtk_misc_get_padding ----

gtk_misc_get_padding
獲取小組件的 X 和 Y 方向中的填充。請參見gtk_misc_set_padding（）。
語法
參數
misc- 一GtkMisc
xpad- 在 Xdirection 中存儲填充的位置，或 NULL。[輸出][允許-無]
ypad- 在 Y 方向中存儲填充的位置，或 NULL。[輸出][允許-無][br \=“”
另請參見
GtkMisc


------------ KeyGTK3gtk_misc_set_alignment ----

gtk_misc_set_alignment
設置微件的對齊方式。
語法
參數
misc- 一個.GtkMisc
xalign- 水準對齊，從0（左）到1（右）。
yalign- 垂直對齊，從 0（頂部）到 1（底部）。
另請參見
GtkMisc


------------ KeyGTK3gtk_misc_set_padding ----

gtk_misc_set_padding
設置要在微件周圍添加的空間量。
語法
參數
misc- 一個.GtkMisc
xpad- 在小部件的左側和右側添加的空間量，以圖元為單位。
ypad- 在小部件的頂部和底部添加的空間量，以圖元為單位。
另請參見
GtkMisc


------------ KeyGTK3gtk_mount_operation_get_parent ----

gtk_mount_operation_get_parent
獲取GtkMountOperation
語法
參數
op- 一GtkMountOperation
返回
op 所示窗口的瞬態父級。
自 2.14 起
另請參見
gtk3-Filesystem-utilities


------------ KeyGTK3gtk_mount_operation_get_screen ----

gtk_mount_operation_get_screen
獲取將在其上顯示 的視窗的螢幕。GtkMountOperation
語法
參數
op- 一GtkMountOperation
返回
顯示歐帕雷視窗的螢幕。[無轉移]
自 2.14 起
另請參見
gtk3-Filesystem-utilities


------------ KeyGTK3gtk_mount_operation_is_showing ----

gtk_mount_operation_is_showing
返回 當前是否正在顯示一個視窗。GtkMountOperation
語法
參數
op- 一GtkMountOperation
返回
如果 opis 當前顯示視窗，則為 TRUE
自 2.14 起
另請參見
gtk3-Filesystem-utilities


------------ KeyGTK3gtk_mount_operation_new ----

gtk_mount_operation_new
創建新的GtkMountOperation
語法
參數
parent- 窗口的瞬態父級，或 NULL。[允許-無]
返回
一個新的GtkMountOperation
自 2.14 起
另請參見
gtk3-Filesystem-utilities


------------ KeyGTK3gtk_mount_operation_set_parent ----

gtk_mount_operation_set_parent
設置 由 顯示的視窗的瞬態父級。GtkMountOperation
語法
參數
op- 一GtkMountOperation
parent- 窗口的瞬態父級，或 NULL。[允許-無]
自 2.14 起
另請參見
gtk3-Filesystem-utilities


------------ KeyGTK3gtk_mount_operation_set_screen ----

gtk_mount_operation_set_screen
將螢幕設置為顯示開的視窗。GtkMountOperation
語法
參數
op- 一GtkMountOperation
screen- 一GdkScreen
自 2.14 起
另請參見
gtk3-Filesystem-utilities


------------ KeyGTK3gtk_notebook_append_page ----

gtk_notebook_append_page
將頁面追加到筆記本。
語法
參數
notebook- 一GtkNotebook
child- 用作頁面內容GtkWidget
tab_label- 將用作頁面的標籤，或 NULL 使用默認標籤 ？page N。）。[允許-無]GtkWidget
返回
筆記本中追加頁面的索引（從 0 開始），如果函數失敗，則為 -1
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_append_page_menu ----

gtk_notebook_append_page_menu
將頁面追加到筆記本，指定要用作彈出功能表中的標籤的小元件。
語法
參數
notebook- 一GtkNotebook
child- 用作頁面內容GtkWidget
tab_label- 將用作頁面的標籤，或 NULL 使用默認標籤 ？page N。）。[允許-無]GtkWidget
menu_label- 用作頁面切換功能表標籤的小部件（如果已啟用）。如果 NULL，並且tab_labelis或 NULL，則功能表標籤將是新創建的標籤，其文本與tab_label相同;如果 tab_labelis 不是 ，menu_labelmust使用頁面切換功能表時指定。[允許-無]GtkLabelGtkLabel
返回
筆記本中追加頁面的索引（從 0 開始），如果函數失敗，則為 -1
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_get_action_widget ----

gtk_notebook_get_action_widget
獲取其中一個操作構件。請參見 gtk_notebook_set_action_widget（）。
語法
參數
notebook- 一GtkNotebook
pack_type- 要接收的動作小部件的包類型
返回
當尚未設置此操作構件時，具有給定pack_typeor的動作構件為 NULL。[無轉移]
自 2.2 起
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_get_current_page ----

gtk_notebook_get_current_page
返回當前頁的頁碼。
語法
參數
notebook- 一GtkNotebook
返回
筆記本中當前頁的索引（從 0 開始）。如果筆記本沒有頁面，則將返回 -1。
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_get_group_name ----

gtk_notebook_get_group_name
獲取筆記本的當前組名。
語法
參數
notebook- 一GtkNotebook
返回
組名，如果未設置，則為 NULL。[無轉移]
自 2.24 起
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_get_menu_label ----

gtk_notebook_get_menu_label
檢索包含子項的頁面的功能表標籤構件。
語法
參數
notebook- 一GtkNotebook
child- 筆記本頁面中包含的小部件
返回
功能表標籤，如果 thenotebook 頁面沒有除預設（選項卡標籤）以外的菜單標籤，則為 NULL。[無轉移]
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_get_menu_label_text ----

gtk_notebook_get_menu_label_text
檢索包含子項的頁面的功能表標籤文本。
語法
參數
notebook- 一GtkNotebook
child- 筆記本頁面的子小部件。
返回
選項卡標籤的文本，如果小關節沒有預設功能表標籤以外的功能表標籤，或者功能表標籤微件不是 .該字串歸小部件所有，不得釋放。GtkLabel
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_get_nth_page ----

gtk_notebook_get_nth_page
返回頁碼 page_num 中包含的子構件。
語法
參數
notebook- 一GtkNotebook
page_num- 筆記本中頁面的索引，或 -1 獲取最後一頁
返回
子小部件或 NULLif page_numis超出界限。[無轉移]
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_get_n_pages ----

gtk_notebook_get_n_pages
獲取筆記本中的頁數。
語法
參數
notebook- 一GtkNotebook
返回
筆記本中的頁數
自 2.2 起
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_get_scrollable ----

gtk_notebook_get_scrollable
返回選項卡標籤區域是否具有用於滾動的箭頭。請參見gtk_notebook_set_scrollable（）。
語法
參數
notebook- 一GtkNotebook
返回
如果存在用於滾動的箭頭，則為 TRUE
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_get_show_border ----

gtk_notebook_get_show_border
返回是否在筆記本頁面周圍繪製斜角。請參見gtk_notebook_set_show_border（）。
語法
參數
notebook- 一GtkNotebook
返回
如果繪製斜角，則為 TRUE
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_get_show_tabs ----

gtk_notebook_get_show_tabs
返回是否顯示筆記本的選項卡。請參見 gtk_notebook_set_show_tabs（）。
語法
參數
notebook- 一GtkNotebook
返回
如果顯示選項卡，則為 TRUE
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_get_tab_detachable ----

gtk_notebook_get_tab_detachable
返回選項卡內容是否可以從筆記本中分離。
語法
參數
notebook- 一GtkNotebook
child- 一個孩子GtkWidget
返回
如果選項卡是可拆卸的，則為 TRUE。
自 2.10 起
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_get_tab_hborder ----

gtk_notebook_get_tab_hborder
gtk_notebook_get_tab_hborder自 3.4 版起已棄用，不應在新編寫的代碼中使用。此函數返回零返回定位字元邊框的水準寬度。
語法
參數
notebook- 一GtkNotebook
返回
定位字元邊框的水準寬度
2.22 起
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_get_tab_label ----

gtk_notebook_get_tab_label
返回頁面子項的選項卡標籤構件。如果子項不在筆記本中，或者如果沒有專門為子項設置選項卡標籤，則返回 NULL。
語法
參數
notebook- 一GtkNotebook
child- 頁面
返回
選項卡標籤。[無轉移]
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_get_tab_label_text ----

gtk_notebook_get_tab_label_text
檢索包含子項的頁面的選項卡標籤的文本。
語法
參數
notebook- 一GtkNotebook
child- 筆記本頁面中包含的小部件
返回
選項卡標籤的文本，如果選項卡標籤微件不是 ，則為 NULL。該字串歸小部件所有，不得釋放。GtkLabel
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_get_tab_pos ----

gtk_notebook_get_tab_pos
獲取在 thenotebook 中用於切換頁面的選項卡繪製的邊緣。
語法
參數
notebook- 一GtkNotebook
返回
繪製選項卡的邊緣
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_get_tab_reorderable ----

gtk_notebook_get_tab_reorderable
獲取是否可以通過拖放對選項卡進行重新排序。
語法
參數
notebook- 一GtkNotebook
child- 一個孩子GtkWidget
返回
如果選項卡可重新排序，則為 TRUE。
自 2.10 起
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_get_tab_vborder ----

gtk_notebook_get_tab_vborder
gtk_notebook_get_tab_vborder自 3.4 版起已棄用，不應在新編寫的代碼中使用。此函數返回零返回定位字元邊框的垂直寬度。
語法
參數
notebook- 一GtkNotebook
返回
定位字元邊框的垂直寬度
2.22 起
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_insert_page ----

gtk_notebook_insert_page
將頁面插入筆記本的給定位置。
語法
參數
notebook- 一GtkNotebook
child- 用作頁面內容GtkWidget
tab_label- 將用作頁面的標籤，或 NULL 使用默認標籤 ？page N。）。[允許-無]GtkWidget
position- 用於插入頁面的索引（從 0 開始），或 -1 用於將頁面追加到所有其他頁面之後
返回
筆記本中插入頁面的索引（從 0 開始），如果功能失敗，則為 -1
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_insert_page_menu ----

gtk_notebook_insert_page_menu
將頁面插入筆記本的給定位置，指定要用作彈出菜單中標籤的小部件。
語法
參數
notebook- 一GtkNotebook
child- 用作頁面內容GtkWidget
tab_label- 將用作頁面的標籤，或 NULL 使用默認標籤 ？page N。）。[允許-無]GtkWidget
menu_label- 用作頁面切換功能表標籤的小部件（如果已啟用）。如果 NULL，並且tab_labelis或 NULL，則功能表標籤將是新創建的標籤，其文本與tab_label相同;如果 tab_labelis 不是 ，menu_labelmust使用頁面切換功能表時指定。[允許-無]GtkLabelGtkLabel
position- 要插入頁面的索引（從 0 開始），或 -1 用於將頁面附加到所有其他頁面之後。
返回
筆記本中插入頁面的索引（從 0 開始）
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_new ----

gtk_notebook_new
創建一個沒有頁面的新構件。GtkNotebook
返回
新創建的GtkNotebook
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_next_page ----

gtk_notebook_next_page
切換到下一頁。如果當前頁是最後一頁，則不會發生任何反應。
語法
參數
notebook- 一GtkNotebook
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_page_num ----

gtk_notebook_page_num
查找包含給定子小道的頁面的索引。
語法
參數
notebook- 一GtkNotebook
child- 一GtkWidget
返回
包含子項的頁面的索引，如果子項不在筆記本中，則為-1
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_popup_disable ----

gtk_notebook_popup_disable
禁用彈出菜單。
語法
參數
notebook- 一GtkNotebook
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_popup_enable ----

gtk_notebook_popup_enable
啟用彈出菜單：如果使用者按一下選項卡標籤上的右滑鼠按鈕，則會彈出一個包含所有頁面的功能表。
語法
參數
notebook- 一GtkNotebook
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_prepend_page ----

gtk_notebook_prepend_page
將頁面預置到筆記本。
語法
參數
notebook- 一GtkNotebook
child- 用作頁面內容GtkWidget
tab_label- 將用作頁面的標籤，或 NULL 使用默認標籤 ？page N。）。[允許-無]GtkWidget
返回
筆記本中前置頁的索引（從 0 開始），如果函數失敗，則為 -1
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_prepend_page_menu ----

gtk_notebook_prepend_page_menu
將頁面預置到筆記本，指定要用作彈出式功能表中的標籤的小元件。
語法
參數
notebook- 一GtkNotebook
child- 用作頁面內容GtkWidget
tab_label- 將用作頁面的標籤，或 NULL 使用默認標籤 ？page N。）。[允許-無]GtkWidget
menu_label- 用作頁面切換功能表標籤的小部件（如果已啟用）。如果 NULL，並且tab_labelis或 NULL，則功能表標籤將是新創建的標籤，其文本與tab_label相同;如果 tab_labelis 不是 ，menu_labelmust使用頁面切換功能表時指定。[允許-無]GtkLabelGtkLabel
返回
筆記本中前置頁的索引（從 0 開始），如果函數失敗，則為 -1
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_prev_page ----

gtk_notebook_prev_page
切換到上一頁。如果當前頁面是第一頁，則不會發生任何反應。
語法
參數
notebook- 一GtkNotebook
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_remove_page ----

gtk_notebook_remove_page
從筆記本中刪除頁面，給定其索引在筆記本中。
語法
參數
notebook- 一GtkNotebook
page_num- 筆記本頁面的索引，從 0 開始。如果為 -1，則將刪除最後一頁。
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_reorder_child ----

gtk_notebook_reorder_child
對包含子級的頁面重新排序，使其顯示在位置位置。如果位置大於或等於列表中的子項數或為負數，則子項將被移動到列表的末尾。
語法
參數
notebook- 一GtkNotebook
child- 孩子移動
position- 新位置，或 -1 移動到末尾
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_set_action_widget ----

gtk_notebook_set_action_widget
將小部件設置為操作小部件之一。根據包裝類型，小部件將被放置在選項卡之前或之後。如果您需要在同一側打包多個小部件，則可以使用a。請注意，操作小部件是“內部的”筆記本的子項，因此不包括在從 gtk_container_foreach（） 返回的列表中。GtkBox
語法
參數
notebook- 一GtkNotebook
widget- 一GtkWidget
pack_type- 動作小部件的包類型
自 2.20 起
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_set_current_page ----

gtk_notebook_set_current_page
切換到頁碼page_num。請注意，由於歷史原因，GtkNotebook拒絕切換到頁面，除非子小部件可見。因此，建議在將子小部件添加到筆記本之前顯示它們。
語法
參數
notebook- 一GtkNotebook
page_num- 要切換到的頁面的索引，從 0 開始。如果為負，則將使用最後一頁。如果大於筆記本中的頁數，則不會執行任何操作。
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_set_group_name ----

gtk_notebook_set_group_name
設置筆記本的組名。具有相同名稱的筆記本將能夠通過拖放進行選項卡交換。具有 NULL 組名的筆記本將無法與任何其他筆記本交換選項卡。
語法
參數
notebook- 一GtkNotebook
group_name- 筆記本組的名稱，或 NULL 將其取消設置。[允許-無]
自 2.24 起
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_set_menu_label ----

gtk_notebook_set_menu_label
更改包含子項的頁面的功能表標籤。
語法
參數
notebook- 一GtkNotebook
child- 子小部件
menu_label- 菜單標籤，或 NULL 表示預設值。[允許-無]
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_set_menu_label_text ----

gtk_notebook_set_menu_label_text
創建一個新標籤並將其設置為子標籤的菜單標籤。
語法
參數
notebook- 一GtkNotebook
child- 子小部件
menu_text- 標籤文本
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_set_scrollable ----

gtk_notebook_set_scrollable
設置選項卡標籤區域是否具有箭頭，以便在該區域中包含太多選項卡時進行滾動。
語法
參數
notebook- 一GtkNotebook
scrollable- 如果應添加捲動箭頭，則為 TRUE
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_set_show_border ----

gtk_notebook_set_show_border
設置是否在筆記本頁面周圍繪製斜角。這僅在選項卡未顯示時才具有視覺效果。請參見 gtk_notebook_set_show_tabs（）。
語法
參數
notebook- 一GtkNotebook
show_border- 如果應在筆記本周圍繪製斜角，則為 TRUE
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_set_show_tabs ----

gtk_notebook_set_show_tabs
設置是否顯示筆記本的選項卡。
語法
參數
notebook- 一GtkNotebook
show_tabs- 如果應顯示選項卡，則為 TRUE
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_set_tab_detachable ----

gtk_notebook_set_tab_detachable
設置選項卡是否可以從筆記本分離到另一個筆記本或小元件。請注意，2 個筆記本必須共用一個公共組標識器（請參閱gtk_notebook_set_group_name（）））以允許它們之間的自動選項卡交換。如果您希望小部件通過DnD與筆記本交互（即：接受從中拖動的選項卡），則必須將其設置為拖放並接受目標？GTK_NOTEBOOK_TAB？.筆記本將用指向與掉落選項卡相對應的子小擺的 GtkWidget** 填充選擇。 123456789101112131415161718192021[/語法] [語法] [語法]靜態on_drag_data_received （GtkWidget *widget， GdkDragContext *context， gint x， gint y， GtkSelectionData *data， guint info， guint time， gpointer user_data）{ GtkWidget *notebook;GtkWidget **child;Gtk集裝箱 *容器;筆記本 = gtk_drag_get_source_widget（上下文）;子項 = （*） gtk_selection_data_get_data （數據）;process_widget（*兒童）;容器 = GTK_CONTAINER（筆記本）;gtk_container_remove（容器，*子級）;}[/語法]
如果您希望筆記本接受來自其他小部件的拖動，則必須設置自己的DnD代碼才能執行此操作。voidvoid
語法
參數
notebook- 一GtkNotebook
child- 一個孩子GtkWidget
detachable- 標籤是否可拆卸
自 2.10 起
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_set_tab_label ----

gtk_notebook_set_tab_label
更改子項的選項卡標籤。如果為tab_label指定 NULL，則頁面將帶有標籤 “page N”。。
語法
參數
notebook- 一GtkNotebook
child- 頁面
tab_label- 要使用的選項卡標籤小部件，或 NULL 預設選項卡標籤。[允許-無]
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_set_tab_label_text ----

gtk_notebook_set_tab_label_text
創建一個新標籤，並將其設置為包含頁面的子級的選項卡標籤。
語法
參數
notebook- 一GtkNotebook
child- 頁面
tab_text- 標籤文本
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_set_tab_pos ----

gtk_notebook_set_tab_pos
設置在 thenotebook 中用於切換頁面的選項卡的繪製邊緣。
語法
參數
notebook- 一個.GtkNotebook
pos- 繪製標籤的邊緣
另請參見
GtkNotebook


------------ KeyGTK3gtk_notebook_set_tab_reorderable ----

gtk_notebook_set_tab_reorderable
設置是否可以通過拖放對筆記本選項卡進行重新排序。
語法
參數
notebook- 一GtkNotebook
child- 一個孩子GtkWidget
reorderable- 選項卡是否可重新排序
自 2.10 起
另請參見
GtkNotebook


------------ KeyGTK3gtk_numerable_icon_get_background_gicon ----

gtk_numerable_icon_get_background_gicon
gtk_numerable_icon_get_background_gicon自版本 3.14 起已棄用，不應在新編寫的代碼中使用。返回設置為基本背景圖像的 ，如果沒有，則返回 NULL。此函數的調用方不擁有對返回的 的引用。GIconGIcon
語法
參數
self- 一GtkNumerableIcon
返回
a 或空。[無轉移]GIcon
自 3.0 起
另請參見
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_get_background_icon_name ----

gtk_numerable_icon_get_background_icon_name
gtk_numerable_icon_get_background_icon_name自版本 3.14 起已棄用，不應在新編寫的代碼中使用。返回用作基本背景圖像的圖示名稱，如果沒有，則返回 NULL。
語法
參數
self- 一GtkNumerableIcon
返回
圖示名稱，或 NULL
自 3.0 起
另請參見
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_get_count ----

gtk_numerable_icon_get_count
gtk_numerable_icon_get_count自版本 3.14 起已棄用，不應在新編寫的代碼中使用。返回 self 當前顯示的值。
語法
參數
self- 一GtkNumerableIcon
返回
當前顯示的值
自 3.0 起
另請參見
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_get_label ----

gtk_numerable_icon_get_label
gtk_numerable_icon_get_label自版本 3.14 起已棄用，不應在新編寫的代碼中使用。返回圖示當前顯示的標籤，或 NULL。
語法
參數
self- 一GtkNumerableIcon
返回
當前顯示的標籤
自 3.0 起
另請參見
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_get_style_context ----

gtk_numerable_icon_get_style_context
gtk_numerable_icon_get_style_context自版本 3.14 起已棄用，不應在新編寫的代碼中使用。返回圖示用於主題設置的 ，如果沒有，則返回 NULL。GtkStyleContext
語法
參數
self- 一GtkNumerableIcon
返回
a 或空。此對象是 GTK+ 的內建物件，不應取消引用。如果你想保留它，請使用 g_object_ref（）。[無轉移]GtkStyleContext
自 3.0 起
另請參見
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_new ----

gtk_numerable_icon_new
gtk_numerable_icon_new自版本 3.14 起已棄用，不應在新編寫的代碼中使用。創建新的非主題 .GtkNumerableIcon
語法
參數
base_icon- a 疊加GIcon
返回
一個新的.[轉移完整]GIcon
自 3.0 起
另請參見
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_new_with_style_context ----

gtk_numerable_icon_new_with_style_context
gtk_numerable_icon_new_with_style_context自版本 3.14 起已棄用，不應在新編寫的代碼中使用。創建一個新的，它將根據通過的 .這是一個方便的構造，在內部調用gtk_numerable_icon_set_style_context（）。GtkNumerableIconGtkStyleContext
語法
參數
base_icon- a 疊加GIcon
context- 一GtkStyleContext
返回
一個新的.[轉移完整]GIcon
自 3.0 起
另請參見
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_set_background_gicon ----

gtk_numerable_icon_set_background_gicon
gtk_numerable_icon_set_background_gicon自版本 3.14 起已棄用，不應在新編寫的代碼中使用。更新圖示以使用圖示作為基本背景圖像。如果圖示為 NULL，則 self 將使用樣式資訊或其背景圖像的預設主題返回。如果調用此方法並且已經將圖示名稱設置為圖示的後臺，則將使用圖示，即在gtk_numerable_icon_set_background_gicon（） andgtk_numerable_icon_set_background_icon_name（） 之間調用的最後一個方法始終具有優先順序。
語法
參數
self- 一GtkNumerableIcon
icon- a 或 NULL。[允許-無]GIcon
自 3.0 起
另請參見
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_set_background_icon_name ----

gtk_numerable_icon_set_background_icon_name
gtk_numerable_icon_set_background_icon_name自版本 3.14 起已棄用，不應在新編寫的代碼中使用。更新圖示以使用當前圖示主題中名為 icon_name 的圖示作為基本背景圖像。如果icon_nameis NULL，則 self 將使用樣式資訊或預設主題作為其背景圖像返回。如果調用此方法並且已經為圖示設置了 background，則將使用icon_name，即在 gtk_numerable_icon_set_background_icon_name（） 和 gtk_numerable_icon_set_background_gicon（） 之間調用的最後一個方法始終具有優先順序。GIcon
語法
參數
self- 一GtkNumerableIcon
icon_name- 圖示名稱，或 NULL。[允許-無]
自 3.0 起
另請參見
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_set_count ----

gtk_numerable_icon_set_count
gtk_numerable_icon_set_count自版本 3.14 起已棄用，不應在新編寫的代碼中使用。將當前顯示的 self 值設置為計數。數值總是被鉗制為兩位數，即在-99和99之間。如果計數設置為零，則會刪除徽章。如果調用此方法，並且已經在圖示上設置了標籤，則在呈現數位之前將自動重置為NULL，即在gtk_numerable_icon_set_count（）和gtk_numerable_icon_set_label（）之間調用的最後一個方法始終具有優先順序。
語法
參數
self- 一GtkNumerableIcon
count- 一個介於 -99 和 99 之間的數字
自 3.0 起
另請參見
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_set_label ----

gtk_numerable_icon_set_label
gtk_numerable_icon_set_label自版本 3.14 起已棄用，不應在新編寫的代碼中使用。將當前顯示的 self 值設置為 stringin 標籤。設置空標籤會刪除徽章。請注意，這是為了顯示短標籤，如數位或單個字母。對於羅馬數字，請考慮使用 Unicode 字元 U+2160 - U+217F。長度超過兩個字元的字串可能無法很好地呈現。如果調用此方法，並且已經在圖示上設置了一個數位，則在呈現標籤之前，它將自動重置為零，即最後一個稱為betweengtk_numerable_icon_set_label（）和gtk_numerable_icon_set_count（）的方法始終具有優先順序。
語法
參數
self- 一GtkNumerableIcon
label- 一個短標籤，或 NULL。[允許-無]
自 3.0 起
另請參見
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_set_style_context ----

gtk_numerable_icon_set_style_context
gtk_numerable_icon_set_style_context自版本 3.14 起已棄用，不應在新編寫的代碼中使用。更新圖示以從中獲取主題資訊。GtkStyleContext
語法
參數
self- 一GtkNumerableIcon
style- 一GtkStyleContext
自 3.
另請參見
GtkNumerableIcon


------------ KeyGTK3gtk_offscreen_window_get_pixbuf ----

gtk_offscreen_window_get_pixbuf
以 a 的形式檢索所包含構件的快照。這是一個新的圖元buf，引用計數為1，一旦不再需要它，應用程式應該取消引用它。GdkPixbuf
語法
參數
offscreen- 包含的小部件。GtkOffscreenWindow
返回
指針或 NULL。[轉移完整]GdkPixbuf
自 2.2 起
另請參見
GtkOffscreenWindow


------------ KeyGTK3gtk_offscreen_window_get_surface ----

gtk_offscreen_window_get_surface
以 a 的形式檢索所包含構件的快照。如果您需要在視窗大小上保留它，那麼您應該添加對它的引用。cairo_surface_t
語法
參數
offscreen- 包含的小部件。GtkOffscreenWindow
返回
指向螢幕外表面的指標，或 NULL。[無轉移]cairo_surface_t
自 2.20 起
另請參見
GtkOffscreenWindow


------------ KeyGTK3gtk_offscreen_window_new ----

gtk_offscreen_window_new
創建一個頂級容器小部件，該小部件用於檢索小部件的快照，而不在螢幕上顯示它們。
返回
指向GtkWidget
自 2.20 起
另請參見
GtkOffscreenWindow


------------ KeyGTK3gtk_orientable_get_orientation ----

gtk_orientable_get_orientation
檢索可定向物件的方向。
語法
參數
orientable- 一GtkOrientable
返回
可定向的方向。
2.16 起
另請參見
gtk3-Orientable


------------ KeyGTK3gtk_orientable_set_orientation ----

gtk_orientable_set_orientation
設置可定向對象的方向。
語法
參數
orientable- 一GtkOrientable
orientation- 可定向的新方向。
自 2.1 起
另請參見
gtk3-Orientable


------------ KeyGTK3gtk_overlay_add_overlay ----

gtk_overlay_add_overlay
將微件添加到疊加層。小部件將堆疊在主小部件的頂部，並添加gtk_container_add（）。放置微件的位置由其和屬性確定。?halign??valign?
語法
參數
overlay- 一GtkOverlay
widget- a 添加到容器中GtkWidget
自 3.
另請參見
GtkOverlay


------------ KeyGTK3gtk_overlay_new ----

gtk_overlay_new
創建新的 .GtkOverlay
返回
一個新物件。GtkOverlay
自 3.2 起
另請參見
GtkOverlay


------------ KeyGTK3gtk_page_setup_copy ----

gtk_page_setup_copy
複製 .GtkPageSetup
語法
參數
other- 要複製GtkPageSetup
返回
其他的副本。[轉移完整]
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_bottom_margin ----

gtk_page_setup_get_bottom_margin
獲取下邊距（以單位為單位）。
語法
參數
setup- 一GtkPageSetup
unit- 返回值的單位
返回
下邊距
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_left_margin ----

gtk_page_setup_get_left_margin
獲取左邊距（以單位為單位）。
語法
參數
setup- 一GtkPageSetup
unit- 返回值的單位
返回
左邊距
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_orientation ----

gtk_page_setup_get_orientation
獲取 的頁面方向。GtkPageSetup
語法
參數
setup- 一GtkPageSetup
返回
頁面方向
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_page_height ----

gtk_page_setup_get_page_height
以單位返回頁面高度。請注意，此函數會考慮方向和邊緣。請參見gtk_page_setup_get_paper_height（）。
語法
參數
setup- 一GtkPageSetup
unit- 返回值的單位
返回
頁面高度。
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_page_width ----

gtk_page_setup_get_page_width
以單位返回頁面寬度。請注意，此函數會考慮方向和邊緣。請參見 gtk_page_setup_get_paper_width（）。
語法
參數
setup- 一GtkPageSetup
unit- 返回值的單位
返回
頁面寬度。
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_paper_height ----

gtk_page_setup_get_paper_height
以單位返回紙張高度。請注意，此函數會考慮方向，但不考慮邊距。請參見gtk_page_setup_get_page_height（）。
語法
參數
setup- 一GtkPageSetup
unit- 返回值的單位
返回
紙張高度。
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_paper_size ----

gtk_page_setup_get_paper_size
獲取 的紙張大小。GtkPageSetup
語法
參數
setup- 一GtkPageSetup
返回
紙張大小
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_paper_width ----

gtk_page_setup_get_paper_width
以單位為單位返回紙張寬度。請注意，此函數會考慮方向，但不考慮邊距。請參見 gtk_page_setup_get_page_width（）。
語法
參數
setup- 一GtkPageSetup
unit- 返回值的單位
返回
紙張寬度。
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_right_margin ----

gtk_page_setup_get_right_margin
以單位為單位獲取右邊距。
語法
參數
setup- 一GtkPageSetup
unit- 返回值的單位
返回
右邊距
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_top_margin ----

gtk_page_setup_get_top_margin
獲取上邊距（以單位為單位）。
語法
參數
setup- 一GtkPageSetup
unit- 返回值的單位
返回
上邊距
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_load_file ----

gtk_page_setup_load_file
從檔file_name讀取頁面設置。請參見gtk_page_setup_to_file（）。
語法
參數
setup- 一GtkPageSetup
file_name- 從中讀取頁面設置的檔案名。[類型檔案名]
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
成功時真
自 2.14 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_load__file ----

gtk_page_setup_load_key_file
gtk_page_setup_load_key_file?()
從組group_name鍵filekey_file中讀取頁面設置。
語法
參數
setup- 一GtkPageSetup
key_file- 從中檢索page_setupGKeyFile
group_name- 要讀取的組中key_file的名稱，還是 NULL 要使用默認名稱 ？頁面設置？.[允許-無]
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
成功時真
自 2.14 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_new ----

gtk_page_setup_new
創建新的 .GtkPageSetup
返回
一個新的.GtkPageSetup
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_new_from_file ----

gtk_page_setup_new_from_file
從檔file_name讀取頁面設置。返回具有還原的頁面設置的新物件，如果發生錯誤，則返回 NULL。請參見gtk_page_setup_to_file（）。GtkPageSetup
語法
參數
file_name- 從中讀取頁面設置的檔案名。[類型檔案名]
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
已恢復GtkPageSetup
自 2.12 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_new_from__file ----

gtk_page_setup_new_from_key_file
gtk_page_setup_new_from_key_file?()
從組group_name鍵filekey_file中讀取頁面設置。返回具有還原頁設置的新物件，如果發生錯誤，則返回 NULL。GtkPageSetup
語法
參數
key_file- 從中檢索page_setupGKeyFile
group_name- 要讀取的組中key_file的名稱，還是 NULL 要使用默認名稱 ？頁面設置？.[允許-無]
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
已恢復GtkPageSetup
自 2.12 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_set_bottom_margin ----

gtk_page_setup_set_bottom_margin
設置 的下邊距。GtkPageSetup
語法
參數
setup- 一GtkPageSetup
margin- 以單位為單位的新下邊距
unit- 保證金單位
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_set_left_margin ----

gtk_page_setup_set_left_margin
設置 的左邊距。GtkPageSetup
語法
參數
setup- 一GtkPageSetup
margin- 以單位為單位的新左邊距
unit- 保證金單位
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_set_orientation ----

gtk_page_setup_set_orientation
設置 的頁面方向。GtkPageSetup
語法
參數
setup- 一GtkPageSetup
orientation- 一個值GtkPageOrientation
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_set_paper_size ----

gtk_page_setup_set_paper_size
設置 的紙張大小而不更改頁邊距。請參見 gtk_page_setup_set_paper_size_and_default_margins（）。GtkPageSetup
語法
參數
setup- 一GtkPageSetup
size- 一GtkPaperSize
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_set_paper_size_and_default_margins ----

gtk_page_setup_set_paper_size_and_default_margins
設置 的紙張大小，並根據新的紙張大小修改邊距。GtkPageSetup
語法
參數
setup- 一GtkPageSetup
size- 一GtkPaperSize
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_set_right_margin ----

gtk_page_setup_set_right_margin
設置 的右邊距。GtkPageSetup
語法
參數
setup- 一GtkPageSetup
margin- 以單位為單位的新右邊距
unit- 保證金單位
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_set_top_margin ----

gtk_page_setup_set_top_margin
設置 的上邊距。GtkPageSetup
語法
參數
setup- 一GtkPageSetup
margin- 以單位為單位的新上邊距
unit- 保證金單位
自 2.10 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_to_file ----

gtk_page_setup_to_file
此功能將設置中的資訊保存到file_name。
語法
參數
setup- 一GtkPageSetup
file_name- 要保存到的檔。[類型檔案名]
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
成功時真
自 2.12 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_to__file ----

gtk_page_setup_to_key_file
gtk_page_setup_to_key_file?()
此功能將頁面設置從設置添加到key_file。
語法
參數
setup- 一GtkPageSetup
key_file- 將頁面設置保存到GKeyFile
group_name- 要在key_file中添加設置的組，或使用默認名稱的 NULL ？頁面設置？
自 2.1 起
另請參見
GtkPageSetup


------------ KeyGTK3gtk_page_setup_unix_dialog_get_page_setup ----

gtk_page_setup_unix_dialog_get_page_setup
從對話方塊中獲取當前選定的頁面設置。
語法
參數
dialog- 一GtkPageSetupUnixDialog
返回
當前頁面設置。[無轉移]
自 2.10 起
另請參見
GtkPageSetupUnixDialog


------------ KeyGTK3gtk_page_setup_unix_dialog_get_print_settings ----

gtk_page_setup_unix_dialog_get_print_settings
從對話方塊中獲取當前列印設置。
語法
參數
dialog- 一GtkPageSetupUnixDialog
返回
當前列印設置。[無轉移]
自 2.1 起
另請參見
GtkPageSetupUnixDialog


------------ KeyGTK3gtk_page_setup_unix_dialog_new ----

gtk_page_setup_unix_dialog_new
創建新的頁面設置對話方塊。
語法
參數
title- 對話方塊的標題，或 NULL。[允許-無]
parent- 對話方塊的瞬態父級，或 NULL。[允許-無]
返回
新的GtkPageSetupUnixDialog
自 2.10 起
另請參見
GtkPageSetupUnixDialog


------------ KeyGTK3gtk_page_setup_unix_dialog_set_page_setup ----

gtk_page_setup_unix_dialog_set_page_setup
設置頁面設置對話方塊從中獲取其值的 。GtkPageSetup
語法
參數
dialog- 一GtkPageSetupUnixDialog
page_setup- 一GtkPageSetup
自 2.10 起
另請參見
GtkPageSetupUnixDialog


------------ KeyGTK3gtk_page_setup_unix_dialog_set_print_settings ----

gtk_page_setup_unix_dialog_set_print_settings
設置頁面設置對話方塊從中獲取其值的 。GtkPrintSettings
語法
參數
dialog- 一GtkPageSetupUnixDialog
print_settings- 一GtkPrintSettings
自 2.10 起
另請參見
GtkPageSetupUnixDialog


------------ KeyGTK3gtk_paint_arrow ----

gtk_paint_arrow
gtk_paint_arrow自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_render_arrow（） 代替使用給定參數在 cr 上的給定矩形中繪製箭頭。arrow_type確定箭頭的方向。
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
shadow_type- 要繪製的陰影類型
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
arrow_type- 要繪製的箭頭類型
fill- 如果箭頭尖端應填充，則為 TRUE
x- 矩形的x原點，用於繪製箭頭
y- y 矩形的原點，用於繪製箭頭
width- 矩形的寬度，以繪製箭頭
height- 矩形的高度，以繪製箭頭
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_box ----

gtk_paint_box
gtk_paint_box自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_render_frame（） 和 gtk_render_background（） 代替使用給定參數在 cr 上繪製一個框。
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
shadow_type- 要繪製的陰影類型
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
x- x 盒子的起源
y- y 盒子的起源
width- 盒子的寬度
height- 盒子的高度
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_box_gap ----

gtk_paint_box_gap
gtk_paint_box_gap自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用gtk_render_frame_gap（） 代替使用給定的樣式、狀態和陰影類型在 cr 中繪製一個框，在一側留下一個間隙。
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
shadow_type- 要繪製的陰影類型
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
x- x 矩形的原點
y- y 矩形的原點
width- 矩形的寬度
height- 矩形的寬度
gap_side- 離開間隙的一面
gap_x- 間隙的起始位置
gap_width- 間隙寬度
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_check ----

gtk_paint_check
gtk_paint_check自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_render_check（） 代替使用給定參數在 cr 上的給定矩形中繪製檢查按鈕指示器。
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
shadow_type- 要繪製的陰影類型
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
x- x矩形的原點，用於繪製簽入
y- 用於繪製簽入的矩形的 y 原點
width- 用於繪製簽入的矩形的寬度
height- 用於繪製簽入的矩形的高度
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_diamond ----

gtk_paint_diamond
gtk_paint_diamond自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 cairo 代替使用給定參數在視窗的給定矩形中繪製菱形。
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
shadow_type- 要繪製的陰影類型
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
x- x矩形的原點，用於繪製鑽石
y- y 矩形的原點，用於繪製鑽石
width- 矩形的寬度，以繪製鑽石
height- 矩形的高度，以繪製鑽石
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_expander ----

gtk_paint_expander
gtk_paint_expander自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_render_expander（） 代替繪製擴展器，如 中所用。x 和 y 指定擴展器的中心。膨脹器的大小由“膨脹器大小”決定。小部件的樣式屬性。（如果未指定小部件或沒有 “expander-size” 屬性，則將使用未指定的默認大小，因為調用方沒有足夠的資訊來定位擴展器，這可能沒有用。擴展器在折疊位置的高expander_size個圖元，在展開位置expander_size個圖元寬。GtkTreeView
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
x- 繪製擴展器的 x 位置
y- 繪製擴展器的 y 位置
expander_style- 繪製擴展器的樣式;確定擴展器是折疊、展開還是處於中間狀態。
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_extension ----

gtk_paint_extension
gtk_paint_extension自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用gtk_render_extension（） 代替繪製擴展，即筆記本選項卡。
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
shadow_type- 要繪製的陰影類型
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
x- 擴展的 x 原點
y- y 擴展的起源
width- 擴展的寬度
height- 擴展的寬度
gap_side- 延伸部分附著的一側
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_flat_box ----

gtk_paint_flat_box
gtk_paint_flat_box自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用gtk_render_frame（） 和 gtk_render_background（） 代替使用給定參數在 cr 上繪製一個平面框。
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
shadow_type- 要繪製的陰影類型
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
x- x 盒子的起源
y- y 盒子的起源
width- 盒子的寬度
height- 盒子的高度
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_focus ----

gtk_paint_focus
gtk_paint_focus自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用gtk_render_focus（） 代替使用給定的樣式在 cr 上的給定矩形周圍繪製焦點指示器。
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
x- 矩形的 x 原點，在其周圍繪製焦點指示器
y- 矩形的 y 原點，圍繞該矩形繪製焦點指示器
width- 矩形的寬度，圍繞該矩形繪製焦點指示器
height- 矩形的高度，圍繞它繪製焦點指示器
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_handle ----

gtk_paint_handle
gtk_paint_handle自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_render_handle（） 代替繪製和 中使用的控制碼。GtkHandleBoxGtkPaned
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
shadow_type- 要繪製的陰影類型
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
x- x 手柄的起源
y- y 手柄的起源
width- 帶手柄
height- 手柄高度
orientation- 手柄的方向
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_hline ----

gtk_paint_hline
gtk_paint_hline自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用gtk_render_line（） 代替繪製一條從 （x1， y） 到 （x2， y） 的水平線，以建立給定的樣式和狀態。
語法
參數
style- 一GtkStyle
cr- 一caio_t
state_type- 一種狀態
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
x1- 起始 x 座標
x2- 結束 x 座標
y- y座標
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_layout ----

gtk_paint_layout
gtk_paint_layout自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_render_layout（） 代替使用給定參數在 cr 上繪製佈局。
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
use_text- 是否使用文本或前景圖形上下文的樣式
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
x- x 原點
y- y 起源
layout- 繪製的佈局
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_option ----

gtk_paint_option
gtk_paint_option自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_render_option（） 代替使用給定參數在 cr 上的給定矩形中繪製選項按鈕指示器。
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
shadow_type- 要繪製的陰影類型
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
x- x矩形的原點，用於繪製選項
y- y 矩形的原點，用於繪製選項
width- 用於繪製選項的矩形的寬度
height- 用於繪製選項的矩形的高度
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_resize_grip ----

gtk_paint_resize_grip
gtk_paint_resize_grip自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_render_handle（） 代替使用給定參數在 cr 上的給定矩形中繪製調整大小的夾點。
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
edge- 繪製調整大小手柄的邊緣
x- 矩形的 x 原點，用於繪製調整大小的夾點
y- 要在其中繪製調整大小夾點的矩形的 y 原點
width- 用於繪製調整大小手柄的矩形的寬度
height- 用於繪製調整大小握把的矩形的高度
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_shadow ----

gtk_paint_shadow
gtk_paint_shadow自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_render_frame（） 代替在給定矩形周圍繪製陰影，以形成給定樣式、狀態和陰影類型。
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
shadow_type- 要繪製的陰影類型
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
x- x 矩形的原點
y- y 矩形的原點
width- 矩形的寬度
height- 矩形的寬度
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_shadow_gap ----

gtk_paint_shadow_gap
gtk_paint_shadow_gap自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_render_frame_gap（） 代替在給定矩形周圍繪製陰影，以對給定的樣式、狀態和陰影類型進行粗暴處理，在一側留下 agap。
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
shadow_type- 要繪製的陰影類型
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
x- x 矩形的原點
y- y 矩形的原點
width- 矩形的寬度
height- 矩形的寬度
gap_side- 離開間隙的一面
gap_x- 間隙的起始位置
gap_width- 間隙寬度
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_slider ----

gtk_paint_slider
gtk_paint_slider自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_render_slider（） 代替使用給定的樣式和方向在 cr 上繪製給定矩形中的滑塊。
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
shadow_type- 影子
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
x- 要在其中繪製滑塊的矩形的 x 原點
y- 要在其中繪製滑塊的矩形的 y 原點
width- 用於繪製滑塊的矩形的寬度
height- 用於繪製滑塊的矩形的高度
orientation- 要使用的方向
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_spinner ----

gtk_paint_spinner
gtk_paint_spinner自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用gtk_render_activity（） 代替使用給定參數在視窗上繪製微調器。
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
widget- 小部件（可能為空）。[允許-無]
detail- 樣式詳細資訊（可能為空）。[允許-無]
step- 第n步
x- 用於繪製微調器的矩形的 x 原點
y- 用於繪製微調器的矩形的 y 原點
width- 用於繪製微調器的矩形的寬度
height- 用於繪製微調器的矩形的高度
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_tab ----

gtk_paint_tab
gtk_paint_tab自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 cairo 代替使用給定參數在 cr 上的給定矩形中繪製選項功能表選項卡（即向上和向下指向箭頭）。
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
shadow_type- 要繪製的陰影類型
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
x- x矩形的原點，用於繪製選項卡
y- y 矩形的原點，用於繪製選項卡
width- 用於繪製選項卡的矩形的寬度
height- 用於繪製選項卡的矩形的高度
另請參見
GtkStyle


------------ KeyGTK3gtk_paint_vline ----

gtk_paint_vline
gtk_paint_vline自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_render_line（） 代替繪製一條垂直線從 （x， y1_） 到 （x， y2_）， 以建立給定的樣式和狀態。
語法
參數
style- 一GtkStyle
cr- 一cairo_t
state_type- 一種狀態
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
y1_- 起始 y 座標
y2_- 結束 y 座標
x- x 座標
另請參見
GtkStyle


------------ KeyGTK3gtk_paned_add1 ----

gtk_paned_add1
使用默認參數將子項添加到頂部或左側窗格。這個等價togtk_paned_pack1（平移、子項、假、真）。
語法
參數
paned- 一個平移的小部件
child- 要添加的孩子
另請參見
GtkPaned


------------ KeyGTK3gtk_paned_add2 ----

gtk_paned_add2
使用默認參數將子項添加到底部或右側窗格。這是等效的togtk_paned_pack2（平移，子級，TRUE，TRUE）。
語法
參數
paned- 一個平移的小部件
child- 要添加的孩子
另請參見
GtkPaned


------------ KeyGTK3gtk_paned_get_child1 ----

gtk_paned_get_child1
獲取平移構件的第一個子級。
語法
參數
paned- 一個小部件GtkPaned
返回
第一個子項，如果未設置，則為 NULL。[無轉移]
2.4 起
另請參見
GtkPaned


------------ KeyGTK3gtk_paned_get_child2 ----

gtk_paned_get_child2
獲取已平移構件的第二個子級。
語法
參數
paned- 一個小部件GtkPaned
返回
第二個子項，如果未設置，則為 NULL。[無轉移]
2.4 起
另請參見
GtkPaned


------------ KeyGTK3gtk_paned_get_handle_window ----

gtk_paned_get_handle_window
返回控制碼的 。此函數在處理按鈕或運動事件時很有用，因為它允許回檔來區分平移的視窗、子視窗和控制碼。GdkWindow
語法
參數
paned- 一GtkPaned
返回
平移的手柄窗口。[無轉移]
自 2.2 起
另請參見
GtkPaned


------------ KeyGTK3gtk_paned_get_position ----

gtk_paned_get_position
獲取兩個窗格之間分隔線的位置。
語法
參數
paned- 一個小部件GtkPaned
返回
分頻器的位置
另請參見
GtkPaned


------------ KeyGTK3gtk_paned_new ----

gtk_paned_new
創建新的構件。GtkPaned
語法
參數
orientation- 平底鍋的方向。
返回
一個新的.GtkPaned
自 3.0 起
另請參見
GtkPaned


------------ KeyGTK3gtk_paned_pack1 ----

gtk_paned_pack1
將孩子添加到頂部或左側窗格。
語法
參數
paned- 一個平移的小部件
child- 要添加的孩子
resize- 當平移的小部件調整大小時，這個子節點是否應該擴展。
shrink- 這個孩子可以比它的申請小嗎？
另請參見
GtkPaned


------------ KeyGTK3gtk_paned_pack2 ----

gtk_paned_pack2
將子項添加到底部或右側窗格。
語法
參數
paned- 一個平移的小部件
child- 要添加的孩子
resize- 當平移的小部件調整大小時，這個子節點是否應該擴展。
shrink- 這個孩子可以比它的申請小嗎？
另請參見
GtkPaned


------------ KeyGTK3gtk_paned_set_position ----

gtk_paned_set_position
設置兩個窗格之間分隔線的位置。
語法
參數
paned- 一個小部件GtkPaned
position- 分隔符號的圖元位置，負值表示該位置未設置。
另請參見
GtkPaned


------------ KeyGTK3gtk_paper_size_copy ----

gtk_paper_size_copy
複製現有 .GtkPaperSize
語法
參數
other- 一GtkPaperSize
返回
其他的副本
自 2.10 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_free ----

gtk_paper_size_free
釋放給定的對象。GtkPaperSize
語法
參數
size- 一GtkPaperSize
自 2.10 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_default ----

gtk_paper_size_get_default
返回預設紙張大小的名稱，這取決於當前區域設置。
返回
默認紙張大小的名稱。該字串歸 GTK+ 所有，不應修改。
自 2.10 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_default_bottom_margin ----

gtk_paper_size_get_default_bottom_margin
Gets the default bottom margin for the GtkPaperSize.
Syntax
Parameters
size  -  	a GtkPaperSize object
unit  -  	the unit for the return value, not GTK_UNIT_NONE
Returns
the default bottom margin
Since 2.10
See Also
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_default_left_margin ----

gtk_paper_size_get_default_left_margin
獲取 的默認左邊距。GtkPaperSize
語法
參數
size- 一個物件GtkPaperSize
unit- 返回值的單位，而不是GTK_UNIT_NONE
返回
默認左邊距
自 2.10 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_default_right_margin ----

gtk_paper_size_get_default_right_margin
獲取 的默認右邊距。GtkPaperSize
語法
參數
size- 一個物件GtkPaperSize
unit- 返回值的單位，而不是GTK_UNIT_NONE
返回
默認右邊距
自 2.10 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_default_top_margin ----

gtk_paper_size_get_default_top_margin
獲取 的默認上邊距。GtkPaperSize
語法
參數
size- 一個物件GtkPaperSize
unit- 返回值的單位，而不是GTK_UNIT_NONE
返回
默認上邊距
自 2.10 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_display_name ----

gtk_paper_size_get_display_name
獲取 用戶可讀的 .GtkPaperSize
語法
參數
size- 一個物件GtkPaperSize
返回
大小的用戶可讀名稱
自 2.10 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_height ----

gtk_paper_size_get_height
獲取單位的 紙張高度， 單位的單位。GtkPaperSize
語法
參數
size- 一個物件GtkPaperSize
unit- 返回值的單位，而不是GTK_UNIT_NONE
返回
紙張高度
自 2.10 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_name ----

gtk_paper_size_get_name
獲取 .GtkPaperSize
語法
參數
size- 一個物件GtkPaperSize
返回
大小的名稱
自 2.10 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_paper_sizes ----

gtk_paper_size_get_paper_sizes
創建已知紙張大小的列表。
語法
參數
include_custom- 是否包括在頁面設置對話方塊中定義的自訂紙張大小
返回
新分配的對象的新分配清單。[元素型 GtkPaperSize][轉移完整]GtkPaperSize
自 2.12 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_ppd_name ----

gtk_paper_size_get_ppd_name
獲取 的 PPD 名稱，該名稱可能為 NULL。GtkPaperSize
語法
參數
size- 一個物件GtkPaperSize
返回
尺寸的 PPD 名稱
自 2.10 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_width ----

gtk_paper_size_get_width
獲取單位的 紙張寬度。GtkPaperSize
語法
參數
size- 一個物件GtkPaperSize
unit- 返回值的單位，而不是GTK_UNIT_NONE
返回
紙張寬度
自 2.10 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_is_custom ----

gtk_paper_size_is_custom
如果大小不是標準紙張大小，則返回 TRUE。
語法
參數
size- 一個物件GtkPaperSize
返回
大小是否是自訂紙張大小。
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_is_equal ----

gtk_paper_size_is_equal
比較兩個物件。GtkPaperSize
語法
參數
size1- 一個物件GtkPaperSize
size2- 另一個對象GtkPaperSize
返回
TRUE，如果 size1 和 size2 表示相同的紙張大小
自 2.10 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_new ----

gtk_paper_size_new
通過解析 aPWG 5101.1-2002paper 名稱來創建新對象。如果 name 為 NULL，則返回默認紙張大小，請參見 gtk_paper_size_get_default（）。GtkPaperSize
語法
參數
name- 紙張大小名稱，或 NULL。[允許-無]
返回
一個新的，使用gtk_paper_size_free（）來釋放它GtkPaperSize
自 2.10 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_new_custom ----

gtk_paper_size_new_custom
使用給定參數創建新物件。GtkPaperSize
語法
參數
name- 論文名稱
display_name- 人類可讀的名稱
width- 紙張寬度，單位單位
height- 紙張高度，單位單位
unit- 寬度和高度的單位。不是GTK_UNIT_NONE。
返回
一個新物件，使用 gtk_paper_size_free（） 來釋放它GtkPaperSize
自 2.10 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_new_from_ppd ----

gtk_paper_size_new_from_ppd
使用 PPD 資訊創建新物件。如果ppd_name不是公認的PPD紙名稱，則使用ppd_display_name，寬度和高度來構建自訂物件。GtkPaperSizeGtkPaperSize
語法
參數
ppd_name- PPD紙名
ppd_display_name- 相應的人類可讀名稱
width- 紙張寬度，以磅為單位
height- 紙張高度（以磅為單位）
返回
一個新的，使用gtk_paper_size_free（）來釋放它GtkPaperSize
自 2.10 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_new_from__file ----

gtk_paper_size_new_from_key_file
gtk_paper_size_new_from_key_file?()
從鍵filekey_file組中讀取group_name紙張大小。
語法
參數
key_file- 從中檢索論文大小GKeyFile
group_name- 要讀取的金鑰檔中的組名稱，或 NULL 讀取第一個組
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
具有已恢復的紙張大小的新物件，如果發生錯誤，則為 NULLGtkPaperSize
自 2.12 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_set_size ----

gtk_paper_size_set_size
將尺寸的尺寸更改為寬度 x 高度。
語法
參數
size- 一個自訂物件GtkPaperSize
width- 以單位為單位的新寬度
height- 以單位為單位的新高度
unit- 寬度和高度的單位
自 2.10 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_paper_size_to__file ----

gtk_paper_size_to_key_file
gtk_paper_size_to_key_file?()
此功能將紙張大小從大小添加到key_file。
語法
參數
size- 一GtkPaperSize
key_file- 將紙張大小保存到GKeyFile
group_name- 要在key_file中添加設置的組
自 2.1 起
另請參見
GtkPaperSize


------------ KeyGTK3gtk_parse_args ----

gtk_parse_args
解析命令列參數，並初始化 GTK+ 的全域屬性，但實際上不會打開與顯示器的連接。（參見gdk_display_open（），gdk_get_display_arg_name（））GTK+ 或 GDK 使用的任何參數都會從陣列中刪除，並且 argv 會相應地更新。如果usinggtk_init（） 或 gtk_init_check（）， 則無需顯式調用此函數。
語法
參數
argc- 指向命令列參數數的指標。[輸入]
argv- 指向命令列參數陣列的指標。[陣列長度 = argc][輸入]
返回
如果初始化成功，則為 TRUE，否則為 FALSE
另請參見
gtk3-General


------------ KeyGTK3gtk_places_sidebar_add_shortcut ----

gtk_places_sidebar_add_shortcut
應用程式可能希望在側邊欄中顯示一些資料夾，如果它們可以立即對用戶有用。例如，繪圖程式可以添加 ？/usr/share/clipart？位置當側邊欄正在使用 ？插入剪貼畫？對話方塊。此函數將指定位置添加到不可變短切的特殊位置。快捷方式是特定于應用程式的;它們不是跨應用程式共用的，也不是持久的。如果使用不同的位置多次調用此函數，則它們將按照調用該函數的相同順序添加到側邊欄的列表中。
語法
參數
sidebar- 一個地方側邊欄
location- 要添加為特定于應用程式的快捷方式的位置
自 3.10 起
另請參見
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_get_local_only ----

gtk_places_sidebar_get_local_only
返回以前使用 gtk_places_sidebar_set_local_only（） 設置的值。
語法
參數
sidebar- 一個地方側邊欄
返回
如果側邊欄僅顯示本地檔，則為 TRUE。
自 3.12 起
另請參見
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_get_location ----

gtk_places_sidebar_get_location
獲取邊欄中當前選定的位置。這可以是在未選擇任何內容時，例如，當調用gtk_places_sidebar_set_location（） 的位置不在側邊欄的待播位置列表中時。您可以使用此功能在邊欄中獲取選區。此外，如果連接到信號，則可以使用此函數來獲取功能表項目回檔期間引用的位置。NULL?populate-popup?
語法
參數
sidebar- 一個地方側邊欄
返回
具有選定位置的 GFile，或者未在視覺上選擇任何內容。[轉移完整]NULL
自 3.10 起
另請參見
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_get_nth_bookmark ----

gtk_places_sidebar_get_nth_bookmark
此函數查詢使用者添加到地點邊欄的書簽，並返回其中一個。此函數由 用於實現 ？替代項-1?, ?Alt-2？等快捷方式，用於啟動協作書簽。GtkFileChooser
語法
參數
sidebar- 一個地方側邊欄
n- 要查詢的書簽的索引
返回
由索引 n 指定的書簽，或者如果不存在此類索引。請注意，索引從 0 開始，即使檔選擇器使用鍵盤快速鍵啟動它們？替代項-1？。[轉移完整]NULL
自 3.10 起
另請參見
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_get_open_flags ----

gtk_places_sidebar_get_open_flags
獲取打開的標誌。
語法
參數
sidebar- 一GtkPlacesSidebar
返回
側邊欄GtkPlacesOpenFlags
自 3.10 起
另請參見
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_get_show_connect_to_server ----

gtk_places_sidebar_get_show_connect_to_server
返回以前使用 gtk_places_sidebar_set_show_connect_to_server（） 設置的值
語法
參數
sidebar- 一個地方側邊欄
返回
如果側邊欄將顯示 ？連接到伺服器？項目。
自 3.10 起
另請參見
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_get_show_desktop ----

gtk_places_sidebar_get_show_desktop
返回以前使用 gtk_places_sidebar_set_show_desktop（） 設置的值
語法
參數
sidebar- 一個地方側邊欄
返回
如果邊欄將顯示桌面資料夾的內置快捷方式，則為 TRUE。
自 3.10 起
另請參見
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_list_shortcuts ----

gtk_places_sidebar_list_shortcuts
獲取快捷方式清單。
語法
參數
sidebar- 一個地方側邊欄
返回
已添加為特定于應用程式的快捷方式，其中包含 gtk_places_sidebar_add_shortcut（）。要釋放此列表，您可以使用 1[/語法] [語法]g_slist_free_full （清單， （GDestroyNotify） g_object_unref）;[/語法]
[元素類型GFile][傳輸完整]GSListGFile
自 3.10 起
另請參見
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_new ----

gtk_places_sidebar_new
創建新的構件。應用程式應至少連接到當用戶在邊欄中進行選擇時要通知的信號。GtkPlacesSidebar?open-location?
返回
新創建的GtkPlacesSidebar
自 3.10 起
另請參見
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_remove_shortcut ----

gtk_places_sidebar_remove_shortcut
刪除以前插入了 gtk_places_sidebar_add_shortcut（） 的應用程式特定快捷方式。如果側邊欄中的位置不是 ashortcut，則不會執行任何操作。
語法
參數
sidebar- 一個地方側邊欄
location- 要刪除的位置
自 3.10 起
另請參見
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_set_local_only ----

gtk_places_sidebar_set_local_only
設定邊欄是否應僅顯示本地檔。
語法
參數
sidebar- 一個地方側邊欄
local_only- 是否僅顯示本地檔
自 3.1 起
另請參見
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_set_location ----

gtk_places_sidebar_set_location
設置邊欄周圍的小部件中顯示的位置，例如，在檔案管理員的資料夾檢視中。反過來，如果該位置顯示在地點清單中，則邊欄將突出顯示該位置，或者如果該位置不在列表中的地點中，則它將取消突出顯示所有內容。
語法
參數
sidebar- 一個地方側邊欄
location- 要選擇的位置，或沒有當前路徑的位置。[允許-無]NULL
自 3.10 起
另請參見
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_set_open_flags ----

gtk_places_sidebar_set_open_flags
設定調用應用程式從“地點”邊欄打開新位置的方式。例如，某些應用程式僅直接打開位置？，而其他人可能支援在新筆記本選項卡或新視窗中打開位置。此函數用於告訴位置側邊欄應用程式可以打開新位置的方式，以便側邊欄可以顯示（或不顯示）？在新標籤頁中打開？和？在新視窗中打開？功能表項目（視情況而定）。當發出信號時，其標誌參數將設置為ingtk_places_sidebar_set_open_flags（）傳遞的標誌之一。為標誌傳遞 0 將導致始終發送到 “open-location？信號。?open-location?GTK_PLACES_OPEN_NORMAL
語法
參數
sidebar- 一個地方側邊欄
flags- 調用應用程式可以打開位置的模式的位元遮罩
自 3.10 起
另請參見
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_set_show_connect_to_server ----

gtk_places_sidebar_set_show_connect_to_server
設定邊欄是否應顯示用於連接到網路服務器的專案;預設情況下，這是關閉的。如果應用程式實現了一種讓使用者直接連接到網路服務器的方法，則可能希望啟用此功能。
語法
參數
sidebar- 一個地方側邊欄
show_connect_to_server- 是否顯示“連接到伺服器”命令的專案
自 3.10 起
另請參見
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_set_show_desktop ----

gtk_places_sidebar_set_show_desktop
設定邊欄是否應顯示“桌面”資料夾的專案。此選項的預設值由桌面環境和使用者的配置確定，但可以使用此功能在每個應用程式的基礎上覆蓋它。
語法
參數
sidebar- 一個地方側邊欄
show_desktop- 是否顯示桌面資料夾的專案
自 3.10 起
另請參見
GtkPlacesSidebar


------------ KeyGTK3gtk_plug_construct ----

gtk_plug_construct
完成給定標識bysocket_id的插頭初始化。此函數通常僅由派生的類使用。GtkSocketGtkPlug
語法
參數
plug- 一個.GtkPlug
socket_id- 插座視窗的 XID。
另請參見
GtkPlug


------------ KeyGTK3gtk_plug_construct_for_display ----

gtk_plug_construct_for_display
完成當前顯示在顯示器上的給定已識別bysocket_id的插頭初始化。此函數通常僅由派生的類使用。GtkSocketGtkPlug
語法
參數
plug- 一個.GtkPlug
display- 與socket_id相關聯。GdkDisplayGtkSocket
socket_id- 插座視窗的 XID。
自 2.2 起
另請參見
GtkPlug


------------ KeyGTK3gtk_plug_get_embedded ----

gtk_plug_get_embedded
確定插頭是否嵌入到插座中。
語法
參數
plug- 一GtkPlug
返回
如果插頭嵌入在插座中，則為 TRUE
自 2.14 起
另請參見
GtkPlug


------------ KeyGTK3gtk_plug_get_id ----

gtk_plug_get_id
獲取小部件的視窗 ID，然後可以使用該視窗將此視窗嵌入到另一個視窗中，以gtk_socket_add_id（） 表示實例。GtkPlug
語法
參數
plug- 一個.GtkPlug
返回
插頭的視窗 ID
另請參見
GtkPlug


------------ KeyGTK3gtk_plug_get_socket_window ----

gtk_plug_get_socket_window
檢索嵌入插頭的插座。
語法
參數
plug- 一GtkPlug
返回
通訊端的窗口，或 NULL。[無轉移]
自 2.1 起
另請參見
GtkPlug


------------ KeyGTK3gtk_plug_new ----

gtk_plug_new
在標識socket_id內創建新的外掛程式小部件。如果socket_id為 0，則插頭將保持“未插拔狀態”並且可以稍後插入到 gtk_socket_add_id（） 中。GtkSocketGtkSocket
語法
參數
socket_id- 通訊端的窗口 ID，或 0。
返回
新的小部件。GtkPlug
另請參見
GtkPlug


------------ KeyGTK3gtk_plug_new_for_display ----

gtk_plug_new_for_display
在由 socket_id 標識的內創建新的外掛程式小部件。GtkSocket
語法
參數
display- 顯示socket_idisGdkDisplay
socket_id- 插座視窗的 XID。
返回
新的小部件。GtkPlug
自 2.2 起
另請參見
GtkPlug


------------ KeyGTK3gtk_popover_bind_model ----

gtk_popover_bind_model
在 和 之間建立綁定。彈出框的內容將被刪除，然後使用根據模型的功能表項目重新填充。當模型更改時，彈出框將更新。在具有不同模型的 popover 上調用此函數兩次，將導致第一個綁定替換為與 newmodel 的綁定。如果模型為 NULL，則撤銷任何以前的綁定，並刪除所有子項。如果action_namespace是非 NULL，則效果是模型中提到的 allactions 的名稱以命名空間為首碼，外加一個點。例如，如果操作 “退出”是提到，action_namespace是 ？app？則有效的操作名稱是 “app.quit？”。此函數用於在創建的功能表項目上定義操作名稱和目標值。如果要使用 ？app 以外的 anaction 組？和 “win？”，或者如果要使用 外部 ，則需要將自己的操作組附加到小元件層次結構usinggtk_widget_insert_action_group（）。例如，如果您創建了一個帶有 “quit？action 並將其與名稱 “mygroup” 插入，那麼您將使用操作名稱 ？mygroup.quit？在你的。GtkPopoverGMenuModelGtkActionableGtkMenuShellGtkApplicationWindowGMenuModel
語法
參數
popover- 一GtkPopover
model- 要綁定到或 NULL 要刪除綁定。[允許-無]GMenuModel
action_namespace- 模型中操作的命名空間。[允許-無]
自 3.12 起
另請參見
GtkPopover


------------ KeyGTK3gtk_popover_get_modal ----

gtk_popover_get_modal
返回彈出框是否為模式，請參閱gtk_popover_set_modal瞭解其含義。
語法
參數
popover- 一GtkPopover
返回
TRUE如果 popoveris modal
自 3.1 起
另請參見
GtkPopover


------------ KeyGTK3gtk_popover_get_pointing_to ----

gtk_popover_get_pointing_to
如果已設置指向的矩形，則此函數將返回 TRUE 並用此類矩形填充 rect，否則它將返回 FALSE 並使用附加的寬度座標填充矩形。
語法
參數
popover- 一GtkPopover
rect- 存儲矩形的位置。[輸出]
返回
如果設置了要指向的矩形，則為 TRUE。
另請參見
GtkPopover


------------ KeyGTK3gtk_popover_get_position ----

gtk_popover_get_position
返回彈出框的首選位置。
語法
參數
popover- 一GtkPopover
返回
首選位置。
另請參見
GtkPopover


------------ KeyGTK3gtk_popover_get_relative_to ----

gtk_popover_get_relative_to
返回窗口小部件彈出框當前附加到
語法
參數
popover- 一GtkPopover
返回
一個。[無轉移]GtkWidget
自 3.12 起
另請參見
GtkPopover


------------ KeyGTK3gtk_popover_new ----

gtk_popover_new
創建新的彈出框以指向relative_to
語法
參數
relative_to  -  	 GtkWidget彈出框與。[允許-無]
返回
一個新的GtkPopover
自 3.12 起
另請參見
GtkPopover


------------ KeyGTK3gtk_popover_new_from_model ----

gtk_popover_new_from_model
創建 a 並根據模型填充它。彈出框指向relative_to小部件。創建的按鈕連接到彈出框所屬的操作 - 通常通過附加到包含在小部件層次結構中的小部件。還可以使用功能表附加小部件或其任何父小部件上的 gtk_widget_insert_action_group（） 添加操作。GtkPopoverGtkApplicationWindowGtkApplicationWindows
語法
參數
relative_to  -  	 GtkWidget彈出框與。[允許-無]
model- 一GMenuModel
返回
新的GtkPopover
自 3.12 起
另請參見
GtkPopover


------------ KeyGTK3gtk_popover_set_modal ----

gtk_popover_set_modal
設置彈出框是否為模態彈出框，模式彈出框將抓取所有輸入，並在顯示時抓住鍵盤焦點。在彈出框區域外按一下或按 Esc 鍵將丟失彈出框並取消接收輸入。
語法
參數
popover- 一GtkPopover
modal  -  	TRUE使彈出式視窗聲明 toplevel 中的所有輸入
自 3.12 起
另請參見
GtkPopover


------------ KeyGTK3gtk_popover_set_pointing_to ----

gtk_popover_set_pointing_to
設置彈出框將指向的矩形，在彈出框附加到的小部件的協調空間中，請參閱gtk_popover_set_relative_to（）。
語法
參數
popover- 一GtkPopover
rect- 矩形指向
自 3.12 起
另請參見
GtkPopover


------------ KeyGTK3gtk_popover_set_position ----

gtk_popover_set_position
設置彈出框顯示的首選位置。如果 popover 當前可見，它將立即更新。在可能的情況下，這種偏好將被尊重，儘管缺乏空間（例如，如果靠近視窗邊緣），則可以選擇出現在另一側GtkPopover
語法
參數
popover- 一GtkPopover
position- 首選彈出位置
自 3.12 起
另請參見
GtkPopover


------------ KeyGTK3gtk_popover_set_relative_to ----

gtk_popover_set_relative_to
設置要附加到彈出框的新構件。如果彈出框可見，則該位置將更新。注意：彈出框的所有權始終授予其relative_towidget，因此，如果在附加的彈出框上將relative_to設置為 NULL，它將與其以前的小部件分離，因此將保留無所有的額外引用。
語法
參數
popover- 一GtkPopover
relative_to- 一個.[允許-無]GtkWidget
自 3.12 起
另請參見
GtkPopover


------------ KeyGTK3gtk_printer_accepts_pdf ----

gtk_printer_accepts_pdf
返回印表機是否接受 PDF 格式的輸入。
語法
參數
printer- 一GtkPrinter
返回
如果印表機接受 PDF，則為 TRUE
自 2.10 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_accepts_ps ----

gtk_printer_accepts_ps
Returns whether the printer accepts input inPostScript format.
Syntax
Parameters
printer  -  	a GtkPrinter
Returns
TRUE if printeraccepts PostScript
Since 2.10
See Also
GtkPrinter


------------ KeyGTK3gtk_printer_compare ----

gtk_printer_compare
比較兩台印表機。
語法
參數
a- 一GtkPrinter
b- 另一個GtkPrinter
返回
如果印表機匹配，則為 0;如果 a< b，則為負值;如果 a> b，則為正值
自 2.10 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_get_backend ----

gtk_printer_get_backend
返回印表機的後端。
語法
參數
printer- 一GtkPrinter
返回
印表機的後端。[無轉移]
自 2.10 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_get_capabilities ----

gtk_printer_get_capabilities
返回印表機的功能。當您使用 手動功能設置並且需要知道印表機可以處理哪些設置以及您必須自己處理哪些設置時，這很有用。這將返回 0，除非印表機的詳細資訊可用，seegtk_printer_has_details（） 和 gtk_printer_request_details（）。GtkPrintUnixDialog
語法
參數
printer- 一GtkPrinter
返回
印表機的功能
自 2.12 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_get_default_page_size ----

gtk_printer_get_default_page_size
返回印表機的預設頁面大小。
語法
參數
printer- 一GtkPrinter
返回
新分配的印表機的預設頁面大小。GtkPageSetup
自 2.14 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_get_description ----

gtk_printer_get_description
獲取印表機的說明。
語法
參數
printer- 一GtkPrinter
返回
印表機的說明
自 2.10 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_get_hard_margins ----

gtk_printer_get_hard_margins
檢索印表機的硬邊距，即定義紙張邊框處印表機無法列印到的區域的邊距。注：除非印表機的詳細資訊可用，否則此操作不會成功，請參閱gtk_printer_has_details（） 和 gtk_printer_request_details（）。
語法
參數
printer- 一GtkPrinter
top- 存儲上邊距的位置。
bottom- 存儲下邊距的位置。
left- 存儲左邊距的位置。
right- 存儲右邊距的位置。
返回
真，如果硬邊距被檢索
自 2.20 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_get_icon_name ----

gtk_printer_get_icon_name
獲取要用於印表機的圖示的名稱。
語法
參數
printer- 一GtkPrinter
返回
印表機的圖示名稱
自 2.10 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_get_job_count ----

gtk_printer_get_job_count
獲取印表機上當前排隊的作業數。
語法
參數
printer- 一GtkPrinter
返回
印表機上的作業數
自 2.10 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_get_location ----

gtk_printer_get_location
返回印表機位置的說明。
語法
參數
printer- 一GtkPrinter
返回
印表機的位置
自 2.10 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_get_name ----

gtk_printer_get_name
返回印表機的名稱。
語法
參數
printer- 一GtkPrinter
返回
印表機的名稱
自 2.10 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_get_state_message ----

gtk_printer_get_state_message
返回描述印表機當前狀態的狀態訊息。
語法
參數
printer- 一GtkPrinter
返回
印表機的狀態訊息
自 2.10 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_has_details ----

gtk_printer_has_details
返回印表機詳細資訊是否可用。
語法
參數
printer- 一GtkPrinter
返回
如果印表機詳細資訊可用，則為 TRUE
自 2.12 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_is_accepting_jobs ----

gtk_printer_is_accepting_jobs
返回印表機是否正在接受作業
語法
參數
printer- 一GtkPrinter
返回
如果印表機正在接受作業，則為 TRUE
自 2.14 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_is_active ----

gtk_printer_is_active
返回印表機當前是否處於活動狀態（即接受新作業）。
語法
參數
printer- 一GtkPrinter
返回
如果印表機處於活動狀態，則為 TRUE
自 2.10 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_is_default ----

gtk_printer_is_default
返回印表機是否為預設印表機。
語法
參數
printer- 一GtkPrinter
返回
如果印表機是預設值，則為 TRUE
自 2.10 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_is_paused ----

gtk_printer_is_paused
返回印表機當前是否暫停。暫停的印表機仍接受作業，但不會列印工作。
語法
參數
printer- 一GtkPrinter
返回
如果印表機已暫停，則為 TRUE
自 2.14 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_is_virtual ----

gtk_printer_is_virtual
返回印表機是否為虛擬印表機（即不表示實際的印表機硬體，而是類似於 CUPS 類）。
語法
參數
printer- 一GtkPrinter
返回
如果印表機是虛擬的，則為 TRUE
自 2.10 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_list_papers ----

gtk_printer_list_papers
列出印表機支持的所有紙張尺寸。除非印表機的詳細資訊可用，否則這將返回空列表，請參閱gtk_printer_has_details（） 和 gtk_printer_request_details（）。
語法
參數
printer- 一GtkPrinter
返回
[元素類型 GtkPageSetup][傳輸完整]GtkPageSetup
自 2.12 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_new ----

gtk_printer_new
創建新的 .GtkPrinter
語法
參數
name- 印表機的名稱
backend- 一GtkPrintBackend
virtual_- 印表機是否為虛擬印表機
返回
一個新的GtkPrinter
自 2.10 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_printer_request_details ----

gtk_printer_request_details
請求印表機詳細資訊。當詳細資訊可用時，將在印表機上發出信號。?details-acquired?
語法
參數
printer- 一GtkPrinter
自 2.12 起
另請參見
GtkPrinter


------------ KeyGTK3gtk_print_context_create_pango_context ----

gtk_print_context_create_pango_context
創建一個可與 一起使用的新。PangoContextGtkPrintContext
語法
參數
context- 一GtkPrintContext
返回
一個新的Pango上下文上下文。[轉移完整]
自 2.10 起
另請參見
GtkPrintContext


------------ KeyGTK3gtk_print_context_create_pango_layout ----

gtk_print_context_create_pango_layout
創建一個適合與 .PangoLayoutGtkPrintContext
語法
參數
context- 一GtkPrintContext
返回
一個新的Pango佈局的上下文。[轉移完整]
自 2.10 起
另請參見
GtkPrintContext


------------ KeyGTK3gtk_print_context_get_cairo_context ----

gtk_print_context_get_cairo_context
獲取與 關聯的開羅上下文。GtkPrintContext
語法
參數
context- 一GtkPrintContext
返回
開羅語境的語境。[無轉移]
自 2.10 起
另請參見
GtkPrintContext


------------ KeyGTK3gtk_print_context_get_dpi_x ----

gtk_print_context_get_dpi_x
獲得 ，（以點數/英寸為單位）的水準解析度。GtkPrintContext
語法
參數
context- 一GtkPrintContext
返回
上下文的水準解析度
自 2.10 起
另請參見
GtkPrintContext


------------ KeyGTK3gtk_print_context_get_dpi_y ----

gtk_print_context_get_dpi_y
獲得，以點數/英寸為單位的垂直解析度。GtkPrintContext
語法
參數
context- 一GtkPrintContext
返回
上下文的垂直解析度
自 2.10 起
另請參見
GtkPrintContext


------------ KeyGTK3gtk_print_context_get_hard_margins ----

gtk_print_context_get_hard_margins
獲取 的硬體印表機邊距，以單位表示。GtkPrintContext
語法
參數
context- 一GtkPrintContext
top- 頂部硬體印表機邊距。[輸出]
bottom- 底部硬體印表機邊距。[輸出]
left- 左側硬體印表機邊距。[輸出]
right- 正確的硬體印表機邊距。[輸出]
返回
如果檢索到硬邊距，則為 TRUE
自 2.2 起
另請參見
GtkPrintContext


------------ KeyGTK3gtk_print_context_get_height ----

gtk_print_context_get_height
獲取 的高度，以圖元為單位。GtkPrintContext
語法
參數
context- 一GtkPrintContext
返回
上下文的高度
自 2.10 起
另請參見
GtkPrintContext


------------ KeyGTK3gtk_print_context_get_page_setup ----

gtk_print_context_get_page_setup
獲取確定 的頁維數。GtkPageSetupGtkPrintContext
語法
參數
context- 一GtkPrintContext
返回
上下文的頁面設置。[無轉移]
自 2.10 起
另請參見
GtkPrintContext


------------ KeyGTK3gtk_print_context_get_pango_fontmap ----

gtk_print_context_get_pango_fontmap
返回適合與 .PangoFontMapGtkPrintContext
語法
參數
context- 一GtkPrintContext
返回
上下文的字體映射。[無轉移]
自 2.10 起
另請參見
GtkPrintContext


------------ KeyGTK3gtk_print_context_get_width ----

gtk_print_context_get_width
獲取 的寬度（以圖元為單位）。GtkPrintContext
語法
參數
context- 一GtkPrintContext
返回
上下文的寬度
自 2.10 起
另請參見
GtkPrintContext


------------ KeyGTK3gtk_print_context_set_cairo_context ----

gtk_print_context_set_cairo_context
在列印上下文上設置新的開羅上下文。此功能旨在實現內部預覽列印時使用，列印不需要它，因為GTK +本身在這種情況下創建了一個合適的開羅上下文。
語法
參數
context- 一GtkPrintContext
cr- 開羅語境
dpi_x- 與 cr 一起使用的水準解析度
dpi_y- 與 cr 一起使用的垂直解析度
自 2.10 起
另請參見
GtkPrintContext


------------ KeyGTK3gtk_print_job_get_collate ----

gtk_print_job_get_collate
獲取此作業是否按列印排序規則。
語法
參數
job- 一GtkPrintJob
返回
作業是否列印校驗
自 3.0 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_num_copies ----

gtk_print_job_get_num_copies
獲取此作業的副本數。
語法
參數
job- 一GtkPrintJob
返回
份數
自 3.0 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_n_up ----

gtk_print_job_get_n_up
獲取此作業的 n-up 設置。
語法
參數
job- 一GtkPrintJob
返回
n-up 設置
自 3.0 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_n_up_layout ----

gtk_print_job_get_n_up_layout
獲取此作業的 n-up 佈局設置。
語法
參數
job- 一GtkPrintJob
返回
n-up 佈局
自 3.0 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_pages ----

gtk_print_job_get_pages
獲取此作業的設置。GtkPrintPages
語法
參數
job- 一GtkPrintJob
返回
設置GtkPrintPages
自 3.0 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_page_ranges ----

gtk_print_job_get_page_ranges
獲取此作業的頁面範圍。
語法
參數
job- 一GtkPrintJob
n_ranges- 返回範圍數的位置。[輸出]
返回
指向結構陣列的指標。[陣列長度 = n_ranges][無轉移]GtkPageRange
自 3.0 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_page_set ----

gtk_print_job_get_page_set
獲取此作業的設置。GtkPageSet
語法
參數
job- 一GtkPrintJob
返回
設置GtkPageSet
自 3.0 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_printer ----

gtk_print_job_get_printer
獲取列印工作的 。GtkPrinter
語法
參數
job- 一GtkPrintJob
返回
作業的印表機。[無轉移]
自 2.10 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_reverse ----

gtk_print_job_get_reverse
獲取此作業是否以反向方式列印。
語法
參數
job- 一GtkPrintJob
返回
作業是否列印反轉。
自 3.0 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_rotate ----

gtk_print_job_get_rotate
獲取是否旋轉列印工作。
語法
參數
job- 一GtkPrintJob
返回
作業是否旋轉列印
自 3.0 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_scale ----

gtk_print_job_get_scale
獲取此作業的縮放比例（其中 1.0 表示未縮放）。
語法
參數
job- 一GtkPrintJob
返回
規模
自 3.0 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_settings ----

gtk_print_job_get_settings
獲取列印工作的 。GtkPrintSettings
語法
參數
job- 一GtkPrintJob
返回
作業的設置。[無轉移]
自 2.10 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_status ----

gtk_print_job_get_status
獲取列印工作的狀態。
語法
參數
job- 一GtkPrintJob
返回
作業的狀態
自 2.10 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_surface ----

gtk_print_job_get_surface
Gets a cairo surface onto which the pages ofthe print job should be rendered.
Syntax
Parameters
job  -  	a GtkPrintJob
error  -  	 return location for errors, or NULL. [allow-none]
Returns
the cairo surface of job. [transfer none]
Since 2.10
See Also
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_title ----

gtk_print_job_get_title
Gets the job title.
Syntax
Parameters
job  -  	a GtkPrintJob
Returns
the title of job
Since 2.10
See Also
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_track_print_status ----

gtk_print_job_get_track_print_status
Returns wheter jobs will be tracked after printing.For details, see gtk_print_job_set_track_print_status().
Syntax
Parameters
job  -  	a GtkPrintJob
Returns
TRUE if print job status will be reported after printing
Since 2.10
See Also
GtkPrintJob


------------ KeyGTK3gtk_print_job_new ----

gtk_print_job_new
創建新的 .GtkPrintJob
語法
參數
title- 職稱
printer- 一GtkPrinter
settings- 一GtkPrintSettings
page_setup- 一GtkPageSetup
返回
一個新的GtkPrintJob
自 2.10 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_send ----

gtk_print_job_send
Sends the print job off to the printer.
Syntax
Parameters
job  -  	a GtkPrintJob
callback  -  	function to call when the job completes or an error occurs
user_data  -  	user data that gets passed to callback
dnotify  -  	destroy notify for user_data
Since 2.10
See Also
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_collate ----

gtk_print_job_set_collate
Sets whether this job is printed collated.
Syntax
Parameters
job  -  	a GtkPrintJob
collate  -  	whether the job is printed collated
Since 3.0
See Also
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_num_copies ----

gtk_print_job_set_num_copies
Sets the number of copies for this job.
Syntax
Parameters
job  -  	a GtkPrintJob
num_copies  -  	the number of copies
Since 3.0
See Also
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_n_up ----

gtk_print_job_set_n_up
設置此作業的 n-up 設置。
語法
參數
job- 一GtkPrintJob
n_up- n-up 值
自 3.0 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_n_up_layout ----

gtk_print_job_set_n_up_layout
Sets the n-up layout setting for this job.
Syntax
Parameters
job  -  	a GtkPrintJob
layout  -  	the n-up layout setting
Since 3.0
See Also
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_pages ----

gtk_print_job_set_pages
設置此作業的設置。GtkPrintPages
語法
參數
job- 一GtkPrintJob
pages- 設置GtkPrintPages
自 3.0 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_page_ranges ----

gtk_print_job_set_page_ranges
設置此作業的頁面範圍。
語法
參數
job- 一GtkPrintJob
ranges- 指向結構陣列的指標。[陣列長度 = n_ranges]GtkPageRange
n_ranges- 範圍陣列的長度
自 3.0 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_page_set ----

gtk_print_job_set_page_set
設置此作業的設置。GtkPageSet
語法
參數
job- 一GtkPrintJob
page_set- 一個設置GtkPageSet
自 3.0 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_reverse ----

gtk_print_job_set_reverse
設置是否反向列印此作業。
語法
參數
job- 一GtkPrintJob
reverse- 作業是否列印反向
自 3.
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_rotate ----

gtk_print_job_set_rotate
設置是否旋轉列印此作業。
語法
參數
job- 一GtkPrintJob
rotate- 是否旋轉列印
自 3.0 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_scale ----

gtk_print_job_set_scale
設置此作業的縮放比例（其中 1.0 表示未縮放）。
語法
參數
job- 一GtkPrintJob
scale- 規模
自 3.0 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_source_file ----

gtk_print_job_set_source_file
將現有文檔發送到列印系統。該檔可以是平臺列印系統理解的任何格式（通常是PostScript，但在許多平臺上PDF也可以工作）。請參見 gtk_printer_accepts_pdf（） 和 gtk_printer_accepts_ps（）。GtkPrintJob
語法
參數
job- 一GtkPrintJob
filename- 要列印的檔。[類型檔案名]
error- 返回錯誤位置
返回
如果發生錯誤，則為 FALSE
自 2.10 起
另請參見
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_track_print_status ----

gtk_print_job_set_track_print_status
If track_status is TRUE, the print job will try to continue reporton the status of the print job in the printer queues and printer. Thiscan allow your application to show things like ?out of paper? issues,and when the print job actually reaches the printer.This function is often implemented using some form of polling, so it shouldnot be enabled unless needed.
Syntax
Parameters
job  -  	a GtkPrintJob
track_status  -  	TRUE to track status after printing
Since 2.10
See Also
GtkPrintJob


------------ KeyGTK3gtk_print_operation_cancel ----

gtk_print_operation_cancel
Cancels a running print operation. This function maybe called from a ,  or signal handler to stop the currently running print operation.?begin-print??paginate??draw-page?
Syntax
Parameters
op  -  	a GtkPrintOperation
Since 2.10
See Also
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_draw_page_finish ----

gtk_print_operation_draw_page_finish
表明特定頁面的繪圖已完成。它是在頁面繪製完成後調用的（例如，在另一個執行緒中繪製）。如果之前調用了gtk_print_operation_set_defer_drawing（），則此函數必須由應用程式調用。在另一種情況下，它由圖書館自己調用。
語法
參數
op- 一GtkPrintOperation
2.16 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_default_page_setup ----

gtk_print_operation_get_default_page_setup
返回預設頁面設置，seegtk_print_operation_set_default_page_setup（）。
語法
參數
op- 一GtkPrintOperation
返回
預設頁面設置。[無轉移]
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_embed_page_setup ----

gtk_print_operation_get_embed_page_setup
獲取屬性的值。?embed-page-setup?
語法
參數
op- 一GtkPrintOperation
返回
是否嵌入頁面設置選擇組合
自 2.18 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_error ----

gtk_print_operation_get_error
當列印操作的結果isGTK_PRINT_OPERATION_RESULT_ERROR時調用它，該結果由 gtk_print_operation_run（） 返回，或者在信號處理常式中返回。返回的將包含有關出錯的更多詳細資訊。?done?GError
語法
參數
op- 一GtkPrintOperation
error- 返回錯誤的位置
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_has_selection ----

gtk_print_operation_get_has_selection
獲取屬性的值。?has-selection?
語法
參數
op- 一GtkPrintOperation
返回
是否有選擇
自 2.18 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_n_pages_to_print ----

gtk_print_operation_get_n_pages_to_print
返回將列印的頁數。請注意，此值是在列印準備階段（GTK_PRINT_STATUS_PREPARING）期間設置的，因此在資料生成階段（GTK_PRINT_STATUS_GENERATING_DATA）之前，不應調用此函數。當列印狀態為GTK_PRINT_STATUS_GENERATING_DATA時，您可以連接到信號並調用gtk_print_operation_get_n_pages_to_print（）。這通常用於跟蹤列印操作的進度。?status-changed?
語法
參數
op- 一GtkPrintOperation
返回
將列印的頁數
自 2.18 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_print_settings ----

gtk_print_operation_get_print_settings
返回當前列印設置。請注意，在調用eithergtk_print_operation_set_print_settings（） orgtk_print_operation_run（） 之前，返回值為 NULL。
語法
參數
op- 一GtkPrintOperation
返回
操作的當前列印設置 [無傳輸]
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_status ----

gtk_print_operation_get_status
返回列印操作的狀態。另請參見 gtk_print_operation_get_status_string（）。
語法
參數
op- 一GtkPrintOperation
返回
列印操作的狀態
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_status_string ----

gtk_print_operation_get_status_string
返回列印操作狀態的字串表示形式。字串已翻譯，適用于顯示列印狀態，例如在 .使用 gtk_print_operation_get_status（） 獲取適合程式設計使用的狀態值。GtkStatusbar
語法
參數
op- 一GtkPrintOperation
返回
列印操作狀態的字串表示形式
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_support_selection ----

gtk_print_operation_get_support_selection
獲取屬性的值。?support-selection?
語法
參數
op- 一GtkPrintOperation
返回
應用程式是否支援列印所選內容
自 2.18 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_is_finished ----

gtk_print_operation_is_finished
一個方便的功能，用於查明列印操作是成功（GTK_PRINT_STATUS_FINISHED）還是不成功（GTK_PRINT_STATUS_FINISHED_ABORTED）完成。注意：啟用列印狀態跟蹤時，即使調用了已完成操作，列印操作也可能處於未完成狀態，因為操作狀態隨後會跟蹤印表機上的列印工作狀態。
語法
參數
op- 一GtkPrintOperation
返回
TRUE，如果列印操作已完成。
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_new ----

gtk_print_operation_new
創建新的 .GtkPrintOperation
返回
一個新的GtkPrintOperation
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_preview_end_preview ----

gtk_print_operation_preview_end_preview
結束預覽。必須調用此函數才能完成自訂預覽列印。
語法
參數
preview- 一GtkPrintOperationPreview
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_preview_is_selected ----

gtk_print_operation_preview_is_selected
返回給定頁面是否包含在已選擇進行列印的頁面集中。
語法
參數
preview- 一GtkPrintOperationPreview
page_nr- 頁碼
返回
如果已選擇列印頁面，則為 TRUE
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_preview_render_page ----

gtk_print_operation_preview_render_page
使用與預覽一起傳遞給處理常式的列印上下文，將頁面呈現為預覽。自訂 iprint 預覽應在其 ：：exposhandler 中使用此函數來呈現當前選定的頁面。請注意，此函數需要將合適的 cairo 上下文與列印上下文相關聯。?preview?
語法
參數
preview- 一GtkPrintOperationPreview
page_nr- 要呈現的頁面
自 2.1 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_run ----

gtk_print_operation_run
運行列印操作，方法是首先讓用戶在列印對話方塊中修改列印設置，然後列印文檔。通常，在所有頁面的呈現完成之前，此函數不會返回。您可以連接到op上的信號，以獲取有關列印操作進度的一些資訊。此外，它可能使用遞迴主環來顯示列印對話方塊。如果調用 gtk_print_operation_set_allow_async（） 或設置屬性，則操作將非同步運行（如果平臺支援）。當操作完成時（即當對話方塊被取消時，或者當列印成功或失敗時），信號將與操作結果一起發出。1234567891011121314151617181920212223242526272829303132333435[/語法] [語法]if （settings ！= NULL） gtk_print_operation_set_print_settings （print， settings）;如果 （page_setup ！= NULL） gtk_print_operation_set_default_page_setup （列印，page_setup）;g_signal_connect（列印，“開始列印”，G_CALLBACK（begin_print），&資料）;g_signal_connect（列印，“繪製頁面”，G_CALLBACK（draw_page）和資料）;res = gtk_print_operation_run（列印、GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG、父級和錯誤）;if （res == GTK_PRINT_OPERATION_RESULT_ERROR） { error_dialog = gtk_message_dialog_new （GTK_WINDOW （parent）、 GTK_DIALOG_DESTROY_WITH_PARENT， GTK_MESSAGE_ERROR， GTK_BUTTONS_CLOSE， “列印檔案時出錯：\n%s”， error->message）; g_signal_connect （error_dialog， “response”， G_CALLBACK （gtk_widget_destroy）， NULL）; gtk_widget_show （error_dialog）; g_error_free （錯誤）; }else if （res == GTK_PRINT_OPERATION_RESULT_APPLY） { if （settings ！= NULL）g_object_unref （settings）; settings = g_object_ref （gtk_print_operation_get_print_settings （print））; }[/語法]
請注意，gtk_print_operation_run（） 只能在 agiven 上調用一次。?status-changed??allow-async??done?GtkPrintOperation
語法
參數
op- 一GtkPrintOperation
action- 啟動的動作
parent- 對話方塊的瞬態父級。[允許-無]
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
列印操作的結果。返回值ofGTK_PRINT_OPERATION_RESULT_APPLY表示列印已成功完成。在這種情況下，最好使用 gtk_print_operation_get_print_settings（） 獲取使用的列印設置，並存儲它們以供下次列印操作重複使用。值 ofGTK_PRINT_OPERATION_RESULT_IN_PROGRESS表示操作以非同步方式運行，並在完成時發出信號。?done?
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_allow_async ----

gtk_print_operation_set_allow_async
設置gtk_print_operation_run（） 是否可以在列印操作完成之前返回。請注意，某些平臺可能不允許非同步作業。
語法
參數
op- 一GtkPrintOperation
allow_async- TRUE 允許非同步作業
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_current_page ----

gtk_print_operation_set_current_page
設置當前頁。如果在gtk_print_operation_run（）之前調用，用戶將能夠選擇僅列印當前頁面。請注意，這僅對預分頁文檔有意義。
語法
參數
op- 一GtkPrintOperation
current_page- 當前頁面，從 0 開始
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_custom_tab_label ----

gtk_print_operation_set_custom_tab_label
設置保存自訂微件的選項卡的標籤。
語法
參數
op- 一GtkPrintOperation
label- 要使用的標籤，或 NULL 使用默認標籤。[允許-無]
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_default_page_setup ----

gtk_print_operation_set_default_page_setup
使default_page_setup為 op 的預設頁面設置。此頁面設置將由gtk_print_operation_run（）使用，但可以通過連接到信號來按頁面覆蓋。?request-page-setup?
語法
參數
op- 一GtkPrintOperation
default_page_setup- a 或 NULL。[允許-無]GtkPageSetup
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_defer_drawing ----

gtk_print_operation_set_defer_drawing
設置等待從應用程式調用 ofgtk_print_operation_draw_page_finish（）。它可以用於在另一個執行緒中繪製頁面。此函數必須在 “draw-page？信號。GtkPrintOperation
語法
參數
op- 一GtkPrintOperation
2.16 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_embed_page_setup ----

gtk_print_operation_set_embed_page_setup
將頁面大小下拉式列示方塊和方向下拉式列示方塊嵌入到頁面設置頁中。選定的頁面設置將存儲為 中的預設頁面設置。GtkPrintOperation
語法
參數
op- 一GtkPrintOperation
embed- TRUE 在GtkPrintUnixDialog
自 2.18 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_export_filename ----

gtk_print_operation_set_export_filename
設置以生成檔，而不是顯示列印對話方塊。此函數的縮進使用是用於實現 ？匯出為 PDF？行動。目前，PDFi 是唯一受支持的格式。列印到 PDF 格式？支持與此無關，並通過讓用戶選擇 ？列印到 PDF 格式？項目，從列印對話方塊中的印表機列表中。GtkPrintOperation
語法
參數
op- 一GtkPrintOperation
filename- 匯出檔的檔案名。[類型檔案名]
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_has_selection ----

gtk_print_operation_set_has_selection
設置是否有要列印的選區。應用程式必須設置選擇將通過回檔中的 gtk_print_operation_set_n_pages（） 繪製到的頁面數。?begin-print?
語法
參數
op- 一GtkPrintOperation
has_selection- TRUE 表示存在選擇
自 2.18 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_job_name ----

gtk_print_operation_set_job_name
設置列印工作的名稱。該名稱用於標識作業（例如，在監控雞蛋杯等應用程式中）。如果未設置作業名稱，GTK+ 將通過對連續的列印工作進行編號來選取默認作業名稱。
語法
參數
op- 一GtkPrintOperation
job_name- 標識列印工作的字串
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_n_pages ----

gtk_print_operation_set_n_pages
設置文檔中的頁數。在渲染開始之前，必須將其設置為正數。它可以在信號處理器中設置。請注意，傳遞給 和 的頁碼是從 0 開始的，即如果使用者選擇列印所有頁面，則最後一個 ：:d raw-page 信號將用於頁面 n_pages - 1。?begin-print??request-page-setup??draw-page?
語法
參數
op- 一GtkPrintOperation
n_pages- 頁數
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_print_settings ----

gtk_print_operation_set_print_settings
設置操作的列印設置。這通常用於從以前的列印操作中重新建立列印設置，請參見gtk_print_operation_run（）。
語法
參數
op- 一GtkPrintOperation
print_settings  -  	 GtkPrintSettings.[允許-無]
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_show_progress ----

gtk_print_operation_set_show_progress
如果show_progress為 TRUE，則列印操作將在列印操作期間顯示進度對話方塊。
語法
參數
op- 一GtkPrintOperation
show_progress- TRUE 顯示進度對話方塊
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_support_selection ----

gtk_print_operation_set_support_selection
設置 是否支持選擇。GtkPrintOperation
語法
參數
op- 一GtkPrintOperation
support_selection- TRUE 支持選擇
自 2.18 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_track_print_status ----

gtk_print_operation_set_track_print_status
如果track_status為 TRUE，則列印操作將嘗試繼續報告印表機佇列和印表機中列印工作的狀態。這可以讓你的應用程式顯示諸如“紙本”之類的東西。問題，以及列印工作實際到達印表機的時間。此功能通常使用某種形式的輪詢實現，因此除非需要，否則不應啟用此功能。
語法
參數
op- 一GtkPrintOperation
track_status- TRUE 可在列印後跟蹤狀態
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_unit ----

gtk_print_operation_set_unit
設置從中獲得的開羅上下文的變換，以便以單位為單位測量距離。GtkPrintContext
語法
參數
op- 一GtkPrintOperation
unit- 要使用的單位
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_use_full_page ----

gtk_print_operation_set_use_full_page
如果full_page為 TRUE，則從中獲取的 cairo 上下文的轉換會將原點放在頁面的左上角（這可能不是工作表的左上角，具體取決於頁面方向和每張工作表的頁數）。否則，原點位於可圖像區域的左上角（即邊距內）。GtkPrintContext
語法
參數
op- 一GtkPrintOperation
full_page- TRUE 設置為整頁GtkPrintContext
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_run_page_setup_dialog ----

gtk_print_run_page_setup_dialog
運行頁面設置對話方塊，允許使用者修改值frompage_setup。如果用戶取消對話方塊，則返回的對話方塊與傳入的page_setup相同，否則它包含對話方塊中所做的修改。請注意，此函數可能使用遞迴主環來顯示頁面設置對話方塊。如果這是一個問題，請參閱 gtk_print_run_page_setup_dialog_async（）。GtkPageSetup
語法
參數
parent- 瞬態父級。[允許-無]
page_setup- 現有的.[允許-無]GtkPageSetup
settings- 一GtkPrintSettings
返回
一個新的.[轉移完整]GtkPageSetup
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_run_page_setup_dialog_async ----

gtk_print_run_page_setup_dialog_async
運行頁面設置對話方塊，允許使用者修改page_setup的值。與 gtk_print_run_page_setup_dialog（） 相反，此函數在支援此操作的平臺上顯示頁面設置對話方塊後返回，並從信號處理常式調用done_cb，以獲取對話方塊的 ：：response 信號。
語法
參數
parent- 瞬態父級，或 NULL。[允許-無]
page_setup- 現有 或空。[允許-無]GtkPageSetup
settings- 一GtkPrintSettings
done_cb- 當使用者保存修改後的頁面設置時要調用的函數。[範圍非同步]
data- 要傳遞給done_cb的使用者資料
自 2.10 起
另請參見
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_settings_copy ----

gtk_print_settings_copy
複製對象。GtkPrintSettings
語法
參數
other- 一GtkPrintSettings
返回
其他新分配的副本。[轉移完整]
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_foreach ----

gtk_print_settings_foreach
為每個鍵值對設置調用 func。
語法
參數
settings- 一GtkPrintSettings
func- 要調用的函數。[範圍調用]
user_data- 功能的使用者資料
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get ----

gtk_print_settings_get
查找與鍵關聯的字串值。
語法
參數
settings- 一GtkPrintSettings
key- 一把鑰匙
返回
鍵的字串值
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_bool ----

gtk_print_settings_get_bool
返回由與鍵關聯的值所表示的布林值。字串 ？true？表示 TRUE，任何其他字串 FALSE。
語法
參數
settings- 一GtkPrintSettings
key- 一把鑰匙
返回
TRUE，如果鍵映射到 true 值。
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_collate ----

gtk_print_settings_get_collate
獲取GTK_PRINT_SETTINGS_COLLATE的值。
語法
參數
settings- 一GtkPrintSettings
返回
是否校對列印的頁面
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_default_source ----

gtk_print_settings_get_default_source
獲取GTK_PRINT_SETTINGS_DEFAULT_SOURCE的值。
語法
參數
settings- 一GtkPrintSettings
返回
默認源
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_dither ----

gtk_print_settings_get_dither
獲取GTK_PRINT_SETTINGS_DITHER的值。
語法
參數
settings- 一GtkPrintSettings
返回
使用的抖動
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_double ----

gtk_print_settings_get_double
返回與 key 關聯的雙精度值，或 0。
語法
參數
settings- 一GtkPrintSettings
key- 一把鑰匙
返回
鍵的雙精度值
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_double_with_default ----

gtk_print_settings_get_double_with_default
返回由與鍵關聯的值表示的浮點數，或者default_valif該值不表示浮點數。浮點數使用 g_ascii_strtod（） 進行解析。
語法
參數
settings- 一GtkPrintSettings
key- 一把鑰匙
def- 預設值
返回
與鍵關聯的浮點數
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_duplex ----

gtk_print_settings_get_duplex
獲取GTK_PRINT_SETTINGS_DUPLEX的值。
語法
參數
settings- 一GtkPrintSettings
返回
是否以雙面列印輸出。
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_finishings ----

gtk_print_settings_get_finishings
獲取GTK_PRINT_SETTINGS_FINISHINGS的值。
語法
參數
settings- 一GtkPrintSettings
返回
飾面
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_int ----

gtk_print_settings_get_int
返回 key 的整數值，或 0。
語法
參數
settings- 一GtkPrintSettings
key- 一把鑰匙
返回
鍵的整數值
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_int_with_default ----

gtk_print_settings_get_int_with_default
返回 key、解釋為整數或預設值的值。
語法
參數
settings- 一GtkPrintSettings
key- 一把鑰匙
def- 預設值
返回
鍵的整數值
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_length ----

gtk_print_settings_get_length
返回與 key 關聯的值，解釋為長度。返回的值將轉換為單位。
語法
參數
settings- 一GtkPrintSettings
key- 一把鑰匙
unit- 返回值的單位
返回
金鑰的長度值，轉換為單位
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_media_type ----

gtk_print_settings_get_media_type
獲取GTK_PRINT_SETTINGS_MEDIA_TYPE的值。介質類型集在 PWG 5101.1-2002 PWG 中定義。
語法
參數
settings- 一GtkPrintSettings
返回
媒體類型
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_number_up ----

gtk_print_settings_get_number_up
獲取GTK_PRINT_SETTINGS_NUMBER_UP的值。
語法
參數
settings- 一GtkPrintSettings
返回
每頁頁數
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_number_up_layout ----

gtk_print_settings_get_number_up_layout
獲取GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT的值。
語法
參數
settings- 一GtkPrintSettings
返回
在向上編號模式下的頁面配置
自 2.14 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_n_copies ----

gtk_print_settings_get_n_copies
獲取GTK_PRINT_SETTINGS_N_COPIES的值。
語法
參數
settings- 一GtkPrintSettings
返回
要列印的份數
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_orientation ----

gtk_print_settings_get_orientation
獲取 GTK_PRINT_SETTINGS_ORIENTATION 的值，並將其轉換為 .GtkPageOrientation
語法
參數
settings- 一GtkPrintSettings
返回
方向
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_output_bin ----

gtk_print_settings_get_output_bin
獲取GTK_PRINT_SETTINGS_OUTPUT_BIN的值。
語法
參數
settings- 一GtkPrintSettings
返回
輸出條柱
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_page_ranges ----

gtk_print_settings_get_page_ranges
獲取GTK_PRINT_SETTINGS_PAGE_RANGES的值。
語法
參數
settings- 一GtkPrintSettings
num_ranges- 返回陣列長度的返回位置。[輸出]
返回
一個陣列的 .使用 g_free（） 在不再需要陣列時釋放陣列。[陣列長度 = num_ranges][轉移完整]GtkPageRanges
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_page_set ----

gtk_print_settings_get_page_set
獲取GTK_PRINT_SETTINGS_PAGE_SET的值。
語法
參數
settings- 一GtkPrintSettings
返回
要列印的頁面集
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_paper_height ----

gtk_print_settings_get_paper_height
獲取GTK_PRINT_SETTINGS_PAPER_HEIGHT的值，轉換為單位。
語法
參數
settings- 一GtkPrintSettings
unit- 返回值的單位
返回
紙張高度，單位為單位
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_paper_size ----

gtk_print_settings_get_paper_size
獲取GTK_PRINT_SETTINGS_PAPER_FORMAT的值，並將其轉換為 .GtkPaperSize
語法
參數
settings- 一GtkPrintSettings
返回
紙張大小
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_paper_width ----

gtk_print_settings_get_paper_width
獲取GTK_PRINT_SETTINGS_PAPER_WIDTH的值，轉換為單位。
語法
參數
settings- 一GtkPrintSettings
unit- 返回值的單位
返回
紙張寬度，單位為單位
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_printer ----

gtk_print_settings_get_printer
方便函數，獲取GTK_PRINT_SETTINGS_PRINTER值。
語法
參數
settings- 一GtkPrintSettings
返回
印表機名稱
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_printer_lpi ----

gtk_print_settings_get_printer_lpi
獲取GTK_PRINT_SETTINGS_PRINTER_LPI的值。
語法
參數
settings- 一GtkPrintSettings
返回
以 lpi 為單位的解析度（每英寸行數）
2.16 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_print_pages ----

gtk_print_settings_get_print_pages
獲取GTK_PRINT_SETTINGS_PRINT_PAGES的值。
語法
參數
settings- 一GtkPrintSettings
返回
要列印的頁面
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_quality ----

gtk_print_settings_get_quality
獲取GTK_PRINT_SETTINGS_QUALITY的值。
語法
參數
settings- 一GtkPrintSettings
返回
列印品質
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_resolution ----

gtk_print_settings_get_resolution
獲取GTK_PRINT_SETTINGS_RESOLUTION的值。
語法
參數
settings- 一GtkPrintSettings
返回
解析度（以 dpi 為單位）
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_resolution_x ----

gtk_print_settings_get_resolution_x
獲取GTK_PRINT_SETTINGS_RESOLUTION_X的值。
語法
參數
settings- 一GtkPrintSettings
返回
以 dpi 為單位的水準解析度
2.16 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_resolution_y ----

gtk_print_settings_get_resolution_y
獲取GTK_PRINT_SETTINGS_RESOLUTION_Y的值。
語法
參數
settings- 一GtkPrintSettings
返回
垂直解析度（以 dpi 為單位）
2.16 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_reverse ----

gtk_print_settings_get_reverse
獲取GTK_PRINT_SETTINGS_REVERSE的值。
語法
參數
settings- 一GtkPrintSettings
返回
是否顛倒列印頁面的順序
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_scale ----

gtk_print_settings_get_scale
獲取GTK_PRINT_SETTINGS_SCALE的值。
語法
參數
settings- 一GtkPrintSettings
返回
以百分比為單位的規模
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_use_color ----

gtk_print_settings_get_use_color
獲取GTK_PRINT_SETTINGS_USE_COLOR的值。
語法
參數
settings- 一GtkPrintSettings
返回
是否使用顏色
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_has_ ----

gtk_print_settings_has_key
gtk_print_settings_has_key?()
如果值與鍵相關聯，則返回 TRUE。
語法
參數
settings- 一GtkPrintSettings
key- 一把鑰匙
返回
TRUE，如果鍵具有值
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_load_file ----

gtk_print_settings_load_file
從file_name讀取列印設置。如果無法載入檔，則錯誤設置為 a 或 。請參見gtk_print_settings_to_file（）。GFileErrorGKeyFileError
語法
參數
settings- 一GtkPrintSettings
file_name- 從中讀取設置的檔案名。[類型檔案名]
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
成功時真
自 2.14 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_load__file ----

gtk_print_settings_load_key_file
gtk_print_settings_load_key_file?()
從key_file中的組group_name讀取列印設置。如果無法載入檔，則錯誤設置為 or。GFileErrorGKeyFileError
語法
參數
settings- 一GtkPrintSettings
key_file- 檢索設置GKeyFile
group_name- 要使用的組的名稱，還是 NULL 使用預設值？列印設置？.[允許-無]
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
成功時真
自 2.14 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_new ----

gtk_print_settings_new
創建新對象。GtkPrintSettings
返回
新對象GtkPrintSettings
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_new_from_file ----

gtk_print_settings_new_from_file
從file_name讀取列印設置。返回具有還原設置的新物件，如果發生錯誤，則返回 NULL。如果無法載入檔，則錯誤設置為 or。請參見gtk_print_settings_to_file（）。GtkPrintSettingsGFileErrorGKeyFileError
語法
參數
file_name- 從中讀取設置的檔案名。[類型檔案名]
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
已恢復GtkPrintSettings
自 2.12 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_new_from__file ----

gtk_print_settings_new_from_key_file
gtk_print_settings_new_from_key_file?()
從key_file中的組group_name讀取列印設置。返回具有還原設置的新物件，如果發生錯誤，則返回 NULL。如果無法載入檔，則錯誤設置為 a 或 。GtkPrintSettingsGFileErrorGKeyFileError
語法
參數
key_file- 檢索設置GKeyFile
group_name- 要使用的組的名稱，或 NULL 使用預設值 ？列印設置？.[允許-無]
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
已恢復GtkPrintSettings
自 2.12 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set ----

gtk_print_settings_set
將值與鍵相關聯。
語法
參數
settings- 一GtkPrintSettings
key- 一把鑰匙
value- 字串值，或 NULL。[允許-無]
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_bool ----

gtk_print_settings_set_bool
將鍵設置為布林值。
語法
參數
settings- 一GtkPrintSettings
key- 一把鑰匙
value- 一個布林值
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_collate ----

gtk_print_settings_set_collate
設置GTK_PRINT_SETTINGS_COLLATE的值。
語法
參數
settings- 一GtkPrintSettings
collate- 是否整理輸出
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_default_source ----

gtk_print_settings_set_default_source
設置GTK_PRINT_SETTINGS_DEFAULT_SOURCE的值。
語法
參數
settings- 一GtkPrintSettings
default_source- 默認源
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_dither ----

gtk_print_settings_set_dither
設置GTK_PRINT_SETTINGS_DITHER的值。
語法
參數
settings- 一GtkPrintSettings
dither- 使用的抖動
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_double ----

gtk_print_settings_set_double
將鍵設置為雙精度值。
語法
參數
settings- 一GtkPrintSettings
key- 一把鑰匙
value- 雙精度值
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_duplex ----

gtk_print_settings_set_duplex
設置GTK_PRINT_SETTINGS_DUPLEX的值。
語法
參數
settings- 一GtkPrintSettings
duplex- 一個值GtkPrintDuplex
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_finishings ----

gtk_print_settings_set_finishings
設置GTK_PRINT_SETTINGS_FINISHINGS的值。
語法
參數
settings- 一GtkPrintSettings
finishings- 飾面
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_int ----

gtk_print_settings_set_int
將鍵設置為整數值。
語法
參數
settings- 一GtkPrintSettings
key- 一把鑰匙
value- 一個整數
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_length ----

gtk_print_settings_set_length
將長度（以單位為單位）與鍵相關聯。
語法
參數
settings- 一GtkPrintSettings
key- 一把鑰匙
value- 長度
unit- 長度單位
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_media_type ----

gtk_print_settings_set_media_type
設置GTK_PRINT_SETTINGS_MEDIA_TYPE的值。介質類型集在 PWG 5101.1-2002 PWG 中定義。
語法
參數
settings- 一GtkPrintSettings
media_type- 媒體類型
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_number_up ----

gtk_print_settings_set_number_up
設置GTK_PRINT_SETTINGS_NUMBER_UP的值。
語法
參數
settings- 一GtkPrintSettings
number_up- 每頁頁數
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_number_up_layout ----

gtk_print_settings_set_number_up_layout
設置GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT的值。
語法
參數
settings- 一GtkPrintSettings
number_up_layout- 一個值GtkNumberUpLayout
自 2.14 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_n_copies ----

gtk_print_settings_set_n_copies
設置GTK_PRINT_SETTINGS_N_COPIES的值。
語法
參數
settings- 一GtkPrintSettings
num_copies- 份數
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_orientation ----

gtk_print_settings_set_orientation
設置GTK_PRINT_SETTINGS_ORIENTATION的值。
語法
參數
settings- 一GtkPrintSettings
orientation- 頁面方向
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_output_bin ----

gtk_print_settings_set_output_bin
設置GTK_PRINT_SETTINGS_OUTPUT_BIN的值。
語法
參數
settings- 一GtkPrintSettings
output_bin- 輸出條柱
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_page_ranges ----

gtk_print_settings_set_page_ranges
設置GTK_PRINT_SETTINGS_PAGE_RANGES的值。
語法
參數
settings- 一GtkPrintSettings
page_ranges- 一個陣列。[陣列長度 = num_ranges]GtkPageRanges
num_ranges- page_ranges的長度
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_page_set ----

gtk_print_settings_set_page_set
設置GTK_PRINT_SETTINGS_PAGE_SET的值。
語法
參數
settings- 一GtkPrintSettings
page_set- 一個值GtkPageSet
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_paper_height ----

gtk_print_settings_set_paper_height
設置GTK_PRINT_SETTINGS_PAPER_HEIGHT的值。
語法
參數
settings- 一GtkPrintSettings
height- 紙張高度
unit- 高度單位
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_paper_size ----

gtk_print_settings_set_paper_size
設置 GTK_PRINT_SETTINGS_PAPER_FORMAT，GTK_PRINT_SETTINGS_PAPER_WIDTH andGTK_PRINT_SETTINGS_PAPER_HEIGHT 的值。
語法
參數
settings- 一GtkPrintSettings
paper_size- 紙張大小
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_paper_width ----

gtk_print_settings_set_paper_width
設置GTK_PRINT_SETTINGS_PAPER_WIDTH的值。
語法
參數
settings- 一GtkPrintSettings
width- 紙張寬度
unit- 寬度單位
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_printer ----

gtk_print_settings_set_printer
方便功能，可設置GTK_PRINT_SETTINGS_PRINTERto印表機。
語法
參數
settings- 一GtkPrintSettings
printer- 印表機名稱
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_printer_lpi ----

gtk_print_settings_set_printer_lpi
設置GTK_PRINT_SETTINGS_PRINTER_LPI的值。
語法
參數
settings- 一GtkPrintSettings
lpi- 以 lpi 為單位的解析度（每英寸行數）
2.16 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_print_pages ----

gtk_print_settings_set_print_pages
設置GTK_PRINT_SETTINGS_PRINT_PAGES的值。
語法
參數
settings- 一GtkPrintSettings
pages- 一個值GtkPrintPages
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_quality ----

gtk_print_settings_set_quality
設置GTK_PRINT_SETTINGS_QUALITY的值。
語法
參數
settings- 一GtkPrintSettings
quality- 一個值GtkPrintQuality
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_resolution ----

gtk_print_settings_set_resolution
設置 GTK_PRINT_SETTINGS_RESOLUTION、GTK_PRINT_SETTINGS_RESOLUTION_X 和 GTK_PRINT_SETTINGS_RESOLUTION_Y 的值。
語法
參數
settings- 一GtkPrintSettings
resolution- 解析度以 dpi 為單位
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_resolution_xy ----

gtk_print_settings_set_resolution_xy
設置 GTK_PRINT_SETTINGS_RESOLUTION，GTK_PRINT_SETTINGS_RESOLUTION_X andGTK_PRINT_SETTINGS_RESOLUTION_Y 的值。
語法
參數
settings- 一GtkPrintSettings
resolution_x- 以 dpi 為單位的水準解析度
resolution_y- 以 dpi 為單位的垂直解析度
2.16 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_reverse ----

gtk_print_settings_set_reverse
設置GTK_PRINT_SETTINGS_REVERSE的值。
語法
參數
settings- 一GtkPrintSettings
reverse- 是否反轉輸出
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_scale ----

gtk_print_settings_set_scale
設置GTK_PRINT_SETTINGS_SCALE的值。
語法
參數
settings- 一GtkPrintSettings
scale- 百分比中的刻度
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_use_color ----

gtk_print_settings_set_use_color
設置GTK_PRINT_SETTINGS_USE_COLOR的值。
語法
參數
settings- 一GtkPrintSettings
use_color- 是否使用顏色
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_to_file ----

gtk_print_settings_to_file
此功能將列印設置從設置保存到file_name。如果無法載入檔，則錯誤設置為 or。GFileErrorGKeyFileError
語法
參數
settings- 一GtkPrintSettings
file_name- 要保存到的檔。[類型檔案名]
error- 返回錯誤的位置，或 NULL。[允許-無]
返回
成功時真
自 2.12 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_to__file ----

gtk_print_settings_to_key_file
gtk_print_settings_to_key_file?()
此功能將列印設置從設置添加到key_file。
語法
參數
settings- 一GtkPrintSettings
key_file- 將列印設置保存到GKeyFile
group_name- 要在key_file中添加設置的組，或者使用預設值的NULL ？列印設置？
自 2.1 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_unset ----

gtk_print_settings_unset
刪除與鍵關聯的任何值。這與將值設置為 NULL 具有相同的效果。
語法
參數
settings- 一GtkPrintSettings
key- 一把鑰匙
自 2.10 起
另請參見
GtkPrintSettings


------------ KeyGTK3gtk_print_unix_dialog_add_custom_tab ----

gtk_print_unix_dialog_add_custom_tab
將自訂選項卡添加到列印對話方塊。
語法
參數
dialog- 一GtkPrintUnixDialog
child- 要放入自訂選項卡中的小部件
tab_label- 用作選項卡標籤的小部件
自 2.10 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_current_page ----

gtk_print_unix_dialog_get_current_page
獲取 的當前頁。GtkPrintUnixDialog
語法
參數
dialog- 一GtkPrintUnixDialog
返回
對話方塊的當前頁面
自 2.10 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_embed_page_setup ----

gtk_print_unix_dialog_get_embed_page_setup
獲取屬性的值。?embed-page-setup?
語法
參數
dialog- 一GtkPrintUnixDialog
返回
是否有選擇
自 2.18 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_has_selection ----

gtk_print_unix_dialog_get_has_selection
獲取屬性的值。?has-selection?
語法
參數
dialog- 一GtkPrintUnixDialog
返回
是否有選擇
自 2.18 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_manual_capabilities ----

gtk_print_unix_dialog_get_manual_capabilities
獲取屬性的值。?manual-capabilities?
語法
參數
dialog- 一GtkPrintUnixDialog
返回
列印功能
自 2.1 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_page_setup ----

gtk_print_unix_dialog_get_page_setup
獲取 由 使用的頁面設置。GtkPrintUnixDialog
語法
參數
dialog- 一GtkPrintUnixDialog
返回
對話方塊的頁面設置。[無轉移]
自 2.10 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_page_setup_set ----

gtk_print_unix_dialog_get_page_setup_set
獲取 由 使用的頁面設置。GtkPrintUnixDialog
語法
參數
dialog- 一GtkPrintUnixDialog
返回
頁面設置是否由使用者設置。
自 2.18 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_selected_printer ----

gtk_print_unix_dialog_get_selected_printer
獲取當前選定的印表機。
語法
參數
dialog- 一GtkPrintUnixDialog
返回
當前選定的印表機。[無轉移]
自 2.10 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_settings ----

gtk_print_unix_dialog_get_settings
獲取一個新物件，該物件表示列印對話方塊中的當前值。請注意，這將創建一個新的物件，如果不想保留它，則需要取消引用它。GtkPrintSettings
語法
參數
dialog- 一GtkPrintUnixDialog
返回
具有對話方塊中的值的新物件GtkPrintSettings
自 2.10 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_support_selection ----

gtk_print_unix_dialog_get_support_selection
獲取屬性的值。?support-selection?
語法
參數
dialog- 一GtkPrintUnixDialog
返回
應用程式是否支援列印所選內容
自 2.18 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_new ----

gtk_print_unix_dialog_new
創建新的 .GtkPrintUnixDialog
語法
參數
title- 對話方塊的標題，或 NULL。[允許-無]
parent- 對話方塊的瞬態父級，或 NULL。[允許-無]
返回
一個新的GtkPrintUnixDialog
自 2.10 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_set_current_page ----

gtk_print_unix_dialog_set_current_page
設置當前頁碼。如果current_page不是 -1，這將啟用要列印的頁面範圍的當前頁面選擇。
語法
參數
dialog- 一GtkPrintUnixDialog
current_page- 當前頁碼。
自 2.10 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_set_embed_page_setup ----

gtk_print_unix_dialog_set_embed_page_setup
將頁面大小下拉式列示方塊和方向下拉式列示方塊嵌入到頁面設置頁中。
語法
參數
dialog- 一GtkPrintUnixDialog
embed- 嵌入頁面設置選擇
自 2.18 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_set_has_selection ----

gtk_print_unix_dialog_set_has_selection
設置所選內容是否存在。
語法
參數
dialog- 一GtkPrintUnixDialog
has_selection- TRUE 表示存在選擇
自 2.18 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_set_manual_capabilities ----

gtk_print_unix_dialog_set_manual_capabilities
這使您可以指定應用程式支援的列印功能。例如，如果您可以處理縮放輸出，那麼您將通過。如果您沒有通過該標記，則只有在列印系統自動處理縮放時，對話方塊才會允許您選擇比例。GTK_PRINT_CAPABILITY_SCALE
語法
參數
dialog- 一GtkPrintUnixDialog
capabilities- 應用程式的列印功能
自 2.10 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_set_page_setup ----

gtk_print_unix_dialog_set_page_setup
設置 的頁面設置。GtkPrintUnixDialog
語法
參數
dialog- 一GtkPrintUnixDialog
page_setup- 一GtkPageSetup
自 2.10 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_set_settings ----

gtk_print_unix_dialog_set_settings
為 設置 .通常，這用於在顯示列印對話方塊之前從以前的列印操作中恢復保存的列印設置。GtkPrintSettingsGtkPrintUnixDialog
語法
參數
dialog- 一GtkPrintUnixDialog
settings- a 或 NULL。[允許-無]GtkPrintSettings
自 2.10 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_set_support_selection ----

gtk_print_unix_dialog_set_support_selection
設置列印對話方塊是否允許用戶列印選區。
語法
參數
dialog- 一GtkPrintUnixDialog
support_selection- TRUE 允許列印選擇
自 2.18 起
另請參見
GtkPrintUnixDialog


------------ KeyGTK3GTK_PRIORITY_RESIZE ----

GTK_PRIORITY_RESIZE
GTK_PRIORITY_RESIZE
將此優先順序用於與大小分配相關的功能。GTK+在內部使用它來計算小部件的大小。此優先順序高於GDK_PRIORITY_REDRAW以避免調整剛剛重繪的小部件的大小。
另請參見
gtk3-General


------------ KeyGTK3gtk_progress_bar_get_ellipsize ----

gtk_progress_bar_get_ellipsize
返回進度條的橢圓位置。請參見 gtk_progress_bar_set_ellipsize（）。
語法
參數
pbar- 一GtkProgressBar
返回
PangoEllipsizeMode
自 2.6 起
另請參見
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_get_fraction ----

gtk_progress_bar_get_fraction
返回已完成任務的當前部分。
語法
參數
pbar- 一GtkProgressBar
返回
從 0.0 到 1.0 的分數
另請參見
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_get_inverted ----

gtk_progress_bar_get_inverted
獲取由 gtk_progress_bar_set_inverted（） 設置的值。
語法
參數
pbar- 一GtkProgressBar
返回
如果進度條反轉，則為 TRUE
另請參見
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_get_pulse_step ----

gtk_progress_bar_get_pulse_step
檢索使用 gtk_progress_bar_set_pulse_step（） 設置的脈衝步長。
語法
參數
pbar- 一GtkProgressBar
返回
從 0.0 到 1 的分數。
另請參見
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_get_show_text ----

gtk_progress_bar_get_show_text
獲取屬性的值。請參見 gtk_progress_bar_set_show_text（）。?show-text?
語法
參數
pbar- 一GtkProgressBar
返回
如果文本顯示在進度條中，則為 TRUE
自 3.0 起
另請參見
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_get_text ----

gtk_progress_bar_get_text
檢索疊加在進度條上顯示的文本（如果有），否則為 NULL。返回值是對文本的引用，而不是文本的副本，因此，如果您更改進度欄中的文本，則返回值將變為無效。
語法
參數
pbar- 一GtkProgressBar
返回
文本，或空;此字串歸小部件所有，不應修改或釋放。
另請參見
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_new ----

gtk_progress_bar_new
創建新的 .GtkProgressBar
返回
一個。GtkProgressBar
另請參見
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_pulse ----

gtk_progress_bar_pulse
表示已經取得了一些進展，但您不知道取得了多少進展。導致進度條進入 ？活動模式，？其中塊來回跳躍。每次調用gtk_progress_bar_pulse（）都會導致塊移動一點點（移動器脈衝的數量由gtk_progress_bar_set_pulse_step（）決定）。
語法
參數
pbar- 一GtkProgressBar
另請參見
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_set_ellipsize ----

gtk_progress_bar_set_ellipsize
設置用於橢圓化（添加省略號：“...”）文本的模式（如果沒有足夠的空間來呈現整個字串）。
語法
參數
pbar- 一GtkProgressBar
mode- 一PangoEllipsizeMode
自 2.6 起
另請參見
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_set_fraction ----

gtk_progress_bar_set_fraction
導致進度條“填寫”柱的給定分數。分數應介於 0.0 和 1.0 之間（包括 0.0 和 1.0）。
語法
參數
pbar- 一GtkProgressBar
fraction- 已完成任務的一小部分
另請參見
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_set_inverted ----

gtk_progress_bar_set_inverted
進度條通常從上到下或從左到右增長。倒置的進度條以相反的方向增長。
語法
參數
pbar- 一GtkProgressBar
inverted- TRUE可反轉進度條
另請參見
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_set_pulse_step ----

gtk_progress_bar_set_pulse_step
設置總進度條長度的分數，以將每次調用的抖動塊移動到gtk_progress_bar_pulse（）。
語法
參數
pbar- 一GtkProgressBar
fraction- 介於 0.0 和 1.0 之間的分數
另請參見
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_set_show_text ----

gtk_progress_bar_set_show_text
設置進度條是否顯示疊加在欄上的文本。顯示的文本可以是屬性的值，或者如果為 NULL，則為百分比形式的值。若要使進度條的樣式和大小適合包含文本（即使實際文本為空），請設置為TRUE和空字串（不是 NULL）。?text??fraction??show-text??text?
語法
參數
pbar- 一GtkProgressBar
show_text- 是否顯示疊加文本
自 3.0 起
另請參見
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_set_text ----

gtk_progress_bar_set_text
使給定文本疊加在進度條上。如果文本為 NULL 且為 TRUE，則 的當前值將顯示為百分比。如果文本為非 NULL 且為 TRUE，則將顯示該文本。在這種情況下，它不會顯示進度百分比。如果文本是空字串，則進度條的樣式和大小仍適合包含文本，只要 為 TRUE。?show-text??fraction??show-text??show-text?
語法
參數
pbar- 一GtkProgressBar
text- UTF-8 字串，或 NULL。[允許-無]
另請參見
GtkProgressBar


------------ KeyGTK3gtk_propagate_event ----

gtk_propagate_event
將事件發送到小部件，並將事件傳播到父小部件如果事件仍未處理。GTK+從GDK接收的事件通常以gtk_main_do_event（）開頭。根據事件的類型，模式對話，抓取等的存在，事件可能會被傳播;如果是這樣，則此函數used.gtk_propagate_event（） 調用 gtk_widget_event（） 在每個小部件上，它宣佈要將事件發送到。所以gtk_widget_event（）是最低級別的函數;它只是在小部件上發出並可能特定於事件的信號。gtk_propagate_event（） 是一個更高的級別，gtk_main_do_event（） 是最高級別。總而言之，您很可能不想使用這些功能中的任何一個;很少需要合成事件。幾乎有更好的方法來實現你的目標。例如，usegdk_window_invalidate_rect（） 或 gtk_widget_queue_draw（） 而不是編造暴露事件。?event?
語法
參數
widget- 一GtkWidget
event- 一個事件[br \=“”
另請參見
gtk3-General


------------ KeyGTK3gtk_radio_action_get_current_value ----

gtk_radio_action_get_current_value
gtk_radio_action_get_current_value自 3.10 版起已棄用，不應在新編寫的代碼中使用。獲取操作所屬組的當前活動成員的 value 屬性。
語法
參數
action- 一GtkRadioAction
返回
當前活動組成員的值
2.4 起
另請參見
GtkRadioAction


------------ KeyGTK3gtk_radio_action_get_group ----

gtk_radio_action_get_group
gtk_radio_action_get_group自 3.10 版起已棄用，不應在新編寫的代碼中使用。返回表示此物件的選項按鈕組的清單。請注意，返回的列表僅在對組進行下一次更改之前有效。設置一組選項按鈕組的常用方法如下：12345678910[/語法] [語法]GSList *組 = NULL;GtkRadioAction *action;而 （ ...要添加更多操作.../） { action = gtk_radio_action_new （...）; gtk_radio_action_set_group （action， group）; group = gtk_radio_action_get_group （action）; }[/語法]
語法
參數
action- 動作物件
返回
表示此物件的選項按鈕組的清單。[元素型GtkRadioAction][無轉移]
2.4 起
另請參見
GtkRadioAction


------------ KeyGTK3gtk_radio_action_join_group ----

gtk_radio_action_join_group
gtk_radio_action_join_group自版本 3.10 起已棄用，不應在新編寫的代碼中使用。將一個無線電操作物件加入到另一個無線電操作物件的組中。在語言綁定中使用它，而不是gtk_radio_action_get_group（） 和 gtk_radio_action_set_group（） 方法設置一組無線電操作的常用方法如下：12345678910[/語法] [語法]GtkRadioAction *action;GtkRadioAction *last_action;而 （ ...要添加更多操作.../） { action = gtk_radio_action_new （...）; gtk_radio_action_join_group （action， last_action）; last_action = action; }[/語法]
語法
參數
action- 動作物件
group_source- 我們正在加入的組的無線電操作物件，或 NULL 從其組中刪除無線電操作。[允許-無]
自 3.0 起
另請參見
GtkRadioAction


------------ KeyGTK3gtk_radio_action_new ----

gtk_radio_action_new
gtk_radio_action_new自版本 3.10 起已棄用，不應在新編寫的代碼中使用。創建新對象。要將操作添加到 a 並為操作設置加速器，請調用 gtk_action_group_add_action_with_accel（）。GtkRadioActionGtkActionGroup
語法
參數
name- 操作的唯一名稱
label- 顯示在功能表項目和按鈕上的標籤，或 NULL。[允許-無]
tooltip- 此操作的工具提示，或 NULL。[允許-無]
stock_id- 要在表示此操作的小部件中顯示的股票圖示，或 NULL。[允許-無]
value- 如果選擇了此操作，則gtk_radio_action_get_current_value（） 應返回的值。
返回
一個新的GtkRadioAction
2.4 起
另請參見
GtkRadioAction


------------ KeyGTK3gtk_radio_action_set_current_value ----

gtk_radio_action_set_current_value
gtk_radio_action_set_current_value自 3.10 版起已棄用，不應在新編寫的代碼中使用。將當前活動的組成員設置為具有值屬性current_value的成員。
語法
參數
action- 一GtkRadioAction
current_value- 新值
自 2.1 起
另請參見
GtkRadioAction


------------ KeyGTK3gtk_radio_action_set_group ----

gtk_radio_action_set_group
gtk_radio_action_set_group自 3.10 版起已棄用，不應在新編寫的代碼中使用。設置無線電操作物件的選項按鈕組。
語法
參數
action- 動作物件
group- 表示選項按鈕組的列表，或 NULL。[元素型GtkRadioAction][允許-無]
2.4 起
另請參見
GtkRadioAction


------------ KeyGTK3gtk_radio_button_get_group ----

gtk_radio_button_get_group
檢索分配給選項按鈕的組。
語法
參數
radio_button- 一個.GtkRadioButton
返回
包含同一組中所有選項按鈕的連結清單radio_button。返回的列表歸選項按鈕所有，不得修改或釋放。[元素型GtkRadioButton][無轉移]
另請參見
GtkRadioButton


------------ KeyGTK3gtk_radio_button_join_group ----

gtk_radio_button_join_group
將一個物件聯接到另一個物件的組中在語言綁定中使用它，而不是gtk_radio_button_get_group（） 和 gtk_radio_button_set_group（） 方法設置一組選項按鈕的常用方法是： 12345678910[/syntax] [syntax]GtkRadioButton *radio_button;GtkRadioButton *last_button;while （ ...更多按鈕要添加...） { radio_button = gtk_radio_button_new （...）; gtk_radio_button_join_group （radio_button， last_button）; last_button = radio_button; }[/語法]GtkRadioButtonGtkRadioButton
語法
參數
radio_button- 對象GtkRadioButton
group_source- 我們加入的組的選項按鈕物件，或 NULL 從其組中刪除選項按鈕。[允許-無]
自 3.
另請參見
GtkRadioButton


------------ KeyGTK3gtk_radio_button_new ----

gtk_radio_button_new
創建新的 .為了具有任何實際價值，應該將小部件打包到選項按鈕中。GtkRadioButton
語法
參數
group- 一個現有的無線電按鈕組，如果您正在創建新組，則為 NULL。[元素型GtkRadioButton][允許-無]
返回
一個新的選項按鈕
另請參見
GtkRadioButton


------------ KeyGTK3gtk_radio_button_new_from_widget ----

gtk_radio_button_new_from_widget
創建一個新的 ，將其添加到同一組asradio_group_member。與gtk_radio_button_new（）一樣，小部件應打包到選項按鈕中。GtkRadioButton
語法
參數
radio_group_member- 現有的.[允許-無]GtkRadioButton
返回
一個新的選項按鈕。[無轉移]
另請參見
GtkRadioButton


------------ KeyGTK3gtk_radio_button_new_with_label ----

gtk_radio_button_new_with_label
創建帶有文本標籤的新版本。GtkRadioButton
語法
參數
group- 一個現有的無線電按鈕組，如果您正在創建新組，則為 NULL。[元素型GtkRadioButton][允許-無]
label- 要顯示在選項按鈕旁邊的文本標籤。
返回
一個新的選項按鈕。
另請參見
GtkRadioButton


------------ KeyGTK3gtk_radio_button_new_with_label_from_widget ----

gtk_radio_button_new_with_label_from_widget
創建一個帶有文本標籤的新標籤，將其添加到與radio_group_member相同的組中。GtkRadioButton
語法
參數
radio_group_member- 小部件，用於從中獲取選項按鈕組或 NULL。[允許-無]
label- 要在選項按鈕旁邊顯示的文本字串。
返回
一個新的選項按鈕。[無轉移]
另請參見
GtkRadioButton


------------ KeyGTK3gtk_radio_button_new_with_mnemonic ----

gtk_radio_button_new_with_mnemonic
創建一個包含標籤的新標籤，將其添加到與組相同的組中。標籤將創建usinggtk_label_new_with_mnemonic（），因此標籤中的底線表示按鈕的中間項。GtkRadioButton
語法
參數
group- 選項按鈕組，或 NULL。[元素型GtkRadioButton][允許-無]
label- 按鈕的文本，在字母字元前面有底線
返回
一個新的GtkRadioButton
另請參見
GtkRadioButton


------------ KeyGTK3gtk_radio_button_new_with_mnemonic_from_widget ----

gtk_radio_button_new_with_mnemonic_from_widget
創建包含標籤的新標籤。標籤將使用gtk_label_new_with_mnemonic（）創建，因此底線標籤指示按鈕的助記符。GtkRadioButton
語法
參數
radio_group_member- 小部件，用於從中獲取選項按鈕組或 NULL。[允許-無]
label- 按鈕的文本，在字母字元前面有底線
返回
一個新的.[無轉移]GtkRadioButton
另請參見
GtkRadioButton


------------ KeyGTK3gtk_radio_button_set_group ----

gtk_radio_button_set_group
設置一個 ？ 的組。應該注意的是，這不會以任何方式更改介面的佈局，因此，如果要更改組，則可能需要重新排列使用者介面以反映這些更改。GtkRadioButton
語法
參數
radio_button- 一個.GtkRadioButton
group- 現有的選項按鈕組，例如從 gtk_radio_button_get_group（） 返回的組，或 NULL。[元素型GtkRadioButton][允許-無]
另請參見
GtkRadioButton


------------ KeyGTK3gtk_radio_menu_item_get_group ----

gtk_radio_menu_item_get_group
返回單選功能表項目所屬的組，作為 的。該列表屬於 GTK+，不應被釋放。GListGtkRadioMenuItem
語法
參數
radio_menu_item- 一GtkRadioMenuItem
返回
radio_menu_item群。[element-type GtkRadioMenuItem][無轉移][/代碼
另請參見
GtkRadioMenuItem


------------ KeyGTK3gtk_radio_menu_item_new ----

gtk_radio_menu_item_new
創建新的 .GtkRadioMenuItem
語法
參數
group- 要將 theradio 功能表項目附加到的組，或 NULL。[element-type GtkRadioMenuItem][允許-無]
返回
一個新的GtkRadioMenuItem
另請參見
GtkRadioMenuItem


------------ KeyGTK3gtk_radio_menu_item_new_from_widget ----

gtk_radio_menu_item_new_from_widget
創建一個新的，將其添加到與組相同的組中。GtkRadioMenuItem
語法
參數
group- 現有GtkRadioMenuItem
返回
新的 .[無轉移]GtkRadioMenuItem
2.4 起
另請參見
GtkRadioMenuItem


------------ KeyGTK3gtk_radio_menu_item_new_with_label ----

gtk_radio_menu_item_new_with_label
創建一個新的，其子項是一個簡單的 .GtkRadioMenuItemGtkLabel
語法
參數
group- 將單選功能表項目分組在裡面，或空。[element-type GtkRadioMenuItem][允許-無]
label- 標籤的文本
返回
一個新的.[無轉移]GtkRadioMenuItem
另請參見
GtkRadioMenuItem


------------ KeyGTK3gtk_radio_menu_item_new_with_label_from_widget ----

gtk_radio_menu_item_new_with_label_from_widget
創建一個新的 GtkRadioMenuItem，其子項是一個簡單的 GtkLabel。新的將添加到與組相同的組中。GtkRadioMenuItem
語法
參數
group- 現有GtkRadioMenuItem
label- 標籤的文本
返回
新的 .[無轉移]GtkRadioMenuItem
2.4 起
另請參見
GtkRadioMenuItem


------------ KeyGTK3gtk_radio_menu_item_new_with_mnemonic ----

gtk_radio_menu_item_new_with_mnemonic
創建包含標籤的新標籤。標籤將使用gtk_label_new_with_mnemonic（）創建，因此底線標籤指示功能表項目的助記符。GtkRadioMenuItem
語法
參數
group- 將單選功能表項目分組在裡面，或空。[element-type GtkRadioMenuItem][允許-無]
label- 按鈕的文本，在字母字元前面有底線
返回
一個新的GtkRadioMenuItem
另請參見
GtkRadioMenuItem


------------ KeyGTK3gtk_radio_menu_item_new_with_mnemonic_from_widget ----

gtk_radio_menu_item_new_with_mnemonic_from_widget
創建一個包含標籤的新 GtkRadioMenuItem。標籤將使用gtk_label_new_with_mnemonic（）創建，因此標籤中的底線表示功能表項目的助記符。新的將添加到與組相同的組中。GtkRadioMenuItem
語法
參數
group- 現有GtkRadioMenuItem
label- 按鈕的文本，在字母字元前面有底線
返回
新的 .[無轉移]GtkRadioMenuItem
2.4 起
另請參見
GtkRadioMenuItem


------------ KeyGTK3gtk_radio_menu_item_set_group ----

gtk_radio_menu_item_set_group
設置選項按鈕功能表項目的組，或對其進行更改。
語法
參數
radio_menu_item- 一個.GtkRadioMenuItem
group- 新組，或 NULL。[element-type GtkRadioMenuItem][允許-無]
另請參見
GtkRadioMenuItem


------------ KeyGTK3gtk_radio_tool_button_get_group ----

gtk_radio_tool_button_get_group
返回按鈕組按鈕所屬的選項按鈕。
語法
參數
button- 一GtkRadioToolButton
返回
該組按鈕長到。[無轉移][元素型GtkRadioButton]
2.4 起
另請參見
GtkRadioToolButton


------------ KeyGTK3gtk_radio_tool_button_new ----

gtk_radio_tool_button_new
創建一個新的 ，將其添加到組。GtkRadioToolButton
語法
參數
group- 存在選項按鈕組，如果要創建新組，則為 NULL。[允許-無][元素型GtkRadioButton]
返回
新GtkRadioToolButton
2.4 起
另請參見
GtkRadioToolButton


------------ KeyGTK3gtk_radio_tool_button_new_from_stock ----

gtk_radio_tool_button_new_from_stock
gtk_radio_tool_button_new_from_stock自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_radio_tool_button_new（）。創建一個新的 ，將其添加到組。新品將包含stock_id所指示的庫存項中的圖示和標籤。GtkRadioToolButtonGtkRadioToolButton
語法
參數
group- 現有的選項按鈕組，如果要創建新組，則為 NULL。[允許-無][元素型GtkRadioButton]
stock_id- 庫存項目的名稱
返回
新GtkRadioToolButton
2.4 起
另請參見
GtkRadioToolButton


------------ KeyGTK3gtk_radio_tool_button_new_from_widget ----

gtk_radio_tool_button_new_from_widget
創建一個新的，將其添加到與 gruup 相同的組中GtkRadioToolButton
語法
參數
group- 現有 或空。[允許-無]GtkRadioToolButton
返回
新的 .[無轉移]GtkRadioToolButton
2.4 起
另請參見
GtkRadioToolButton


------------ KeyGTK3gtk_radio_tool_button_new_with_stock_from_widget ----

gtk_radio_tool_button_new_with_stock_from_widget
gtk_radio_tool_button_new_with_stock_from_widget自版本 3.10 起已棄用，不應在新編寫的code.gtk_radio_tool_button_new_from_widgetCreates將其添加到與組相同的組中。新品將包含stock_id所指示的庫存項中的圖示和標籤。GtkRadioToolButtonGtkRadioToolButton
語法
參數
group- 現有的.[允許-無]GtkRadioToolButton
stock_id- 庫存項目的名稱
返回
一個新的.[無轉移]GtkRadioToolButton
2.4 起
另請參見
GtkRadioToolButton


------------ KeyGTK3gtk_radio_tool_button_set_group ----

gtk_radio_tool_button_set_group
將按鈕添加到組，將其從之前所屬的組中刪除。
語法
參數
button- 一GtkRadioToolButton
group- 現有的選項按鈕組，或 NULL。[元素型GtkRadioButton][允許-無]
自 2.
另請參見
GtkRadioToolButton


------------ KeyGTK3gtk_range_get_adjustment ----

gtk_range_get_adjustment
獲取哪個是 ？模型？的對象。有關詳細資訊，請參見 gtk_range_set_adjustment（）。返回值沒有添加引用，因此不應取消引用。GtkAdjustmentGtkRange
語法
參數
range- 一GtkRange
返回
一個。[無轉移]GtkAdjustment
另請參見
GtkRange


------------ KeyGTK3gtk_range_get_fill_level ----

gtk_range_get_fill_level
獲取填充級別指示器的當前位置。
語法
參數
range- 一GtkRange
返回
當前填充級別
自 2.12 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_get_flippable ----

gtk_range_get_flippable
獲取由 gtk_range_set_flippable（） 設置的值。
語法
參數
range- 一GtkRange
返回
如果範圍是可翻轉的，則為 TRUE
自 2.18 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_get_inverted ----

gtk_range_get_inverted
獲取由 gtk_range_set_inverted（） 設置的值。
語法
參數
range- 一GtkRange
返回
如果範圍反轉，則為 TRUE
另請參見
GtkRange


------------ KeyGTK3gtk_range_get_lower_stepper_sensitivity ----

gtk_range_get_lower_stepper_sensitivity
獲取步進器的敏感度策略，該策略指向 GtkRange 調整的“下端”。
語法
參數
range- 一GtkRange
返回
下步進器的靈敏度策略。
自 2.10 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_get_min_slider_size ----

gtk_range_get_min_slider_size
此函數主要用於子類。請參見gtk_range_set_min_slider_size（）。GtkRange
語法
參數
range- 一GtkRange
返回
範圍的滑塊的最小大小。
自 2.20 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_get_range_rect ----

gtk_range_get_range_rect
此函數以小部件>視窗座標返回包含範圍槽及其步進器的區域。此函數主要用於子類。GtkRange
語法
參數
range- 一GtkRange
range_rect- 範圍矩形的返回位置。[輸出]
自 2.20 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_get_restrict_to_fill_level ----

gtk_range_get_restrict_to_fill_level
獲取範圍是否限制為填充級別。
語法
參數
range- 一GtkRange
返回
如果範圍限制為填充水準，則為 TRUE。
自 2.12 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_get_round_digits ----

gtk_range_get_round_digits
獲取要將值舍入到何時更改的位數。看。?change-value?
語法
參數
range- 一GtkRange
返回
要舍入到的位數
自 2.24 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_get_show_fill_level ----

gtk_range_get_show_fill_level
獲取範圍是否以圖形方式顯示填充級別。
語法
參數
range- 一GtkRange
返回
如果範圍顯示填充級別，則為 TRUE。
自 2.12 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_get_slider_range ----

gtk_range_get_slider_range
此函數返回沿長維度的滑塊範圍，以小部件>視窗座標。此函數主要用於子類。GtkRange
語法
參數
range- 一GtkRange
slider_start- 返回滑塊的起始位置，或 NULL。[輸出][允許-無]
slider_end- 滑塊發送的返回位置，或 NULL。[輸出][允許-無]
自 2.20 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_get_slider_size_fixed ----

gtk_range_get_slider_size_fixed
此函數主要用於子類。請參見gtk_range_set_slider_size_fixed（）。GtkRange
語法
參數
range- 一GtkRange
返回
範圍的滑塊是否具有固定大小。
自 2.20 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_get_upper_stepper_sensitivity ----

gtk_range_get_upper_stepper_sensitivity
獲取步進器的敏感度策略，該策略指向 GtkRange 調整的“上端”。
語法
參數
range- 一GtkRange
返回
步進器的靈敏度策略。
自 2.10 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_get_value ----

gtk_range_get_value
獲取區域的當前值。
語法
參數
range- 一GtkRange
返回
範圍的當前值。
另請參見
GtkRange


------------ KeyGTK3gtk_range_set_adjustment ----

gtk_range_set_adjustment
設置要用作 “模型？此範圍寬度的對象。調整指示當前範圍值、最小和最大範圍值、用於鍵綁定和滾動的步長/頁增量以及頁面大小。頁面大小通常為 0，對於 為 非零，並指示正在滾動的構件的可見區域的大小。頁面大小會影響捲軸滑塊的大小。GtkScaleGtkScrollbar
語法
參數
range- 一GtkRange
adjustment- 一GtkAdjustment
另請參見
GtkRange


------------ KeyGTK3gtk_range_set_fill_level ----

gtk_range_set_fill_level
設置填充級別指示器的新位置。“填充級別”可能最好用它最突出的用例來描述，這是預緩衝在流媒體播放機中的量的指標。在該用例中，範圍的值將指示當前播放位置，填充級別將是檔/流已下載到的位置。這個預緩衝量可以顯示在範圍的槽上，並且可以與槽分開主題化。要啟用填充級別顯示，請使用gtk_range_set_show_fill_level（）。範圍預設不顯示填充級別。此外，還可以將範圍的滑塊位置限制為小於填充水準的值。這是控制器由 gtk_range_set_restrict_to_fill_level（） 和默認啟用的。
語法
參數
range- 一GtkRange
fill_level- 液位指示器的新位置
自 2.12 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_set_flippable ----

gtk_range_set_flippable
如果一個範圍是可翻轉的，那麼如果它GTK_TEXT_DIR_RTL，它將切換其方向。請參見gtk_widget_get_direction（）。
語法
參數
range- 一GtkRange
flippable- TRUE使範圍可翻轉
自 2.18 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_set_increments ----

gtk_range_set_increments
設置區域的步驟和頁面大小。當用戶按一下箭頭或通過方向鍵移動時，將使用步長。例如，通過“向上翻頁”或“向下翻頁”鍵移動時會使用頁面大小。GtkScrollbarGtkScale
語法
參數
range- 一GtkRange
step- 步長
page- 頁面大小
另請參見
GtkRange


------------ KeyGTK3gtk_range_set_inverted ----

gtk_range_set_inverted
範圍通常從較低的值移動到較高的值，因為滑塊從上到下或從左到右移動。反轉距離在頂部或右側具有更高的值，而不是在底部或左側。
語法
參數
range- 一GtkRange
setting- TRUE 可反轉範圍
另請參見
GtkRange


------------ KeyGTK3gtk_range_set_lower_stepper_sensitivity ----

gtk_range_set_lower_stepper_sensitivity
設置步進器的靈敏度策略，該策略指向 GtkRange 調整的“下端”。
語法
參數
range- 一GtkRange
sensitivity- 下步進器的靈敏度策略。
自 2.10 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_set_min_slider_size ----

gtk_range_set_min_slider_size
設置範圍的滑塊的最小大小。此函數主要用於子類。GtkRange
語法
參數
range- 一GtkRange
min_size- 滑塊的最小尺寸
自 2.20 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_set_range ----

gtk_range_set_range
設置 中的允許值，並將範圍值鉗制為介於最小值和最大值之間（如果範圍具有非零頁大小，則將其固定在最小值和最大值 （ 頁面大小）之間。GtkRange
語法
參數
range- 一GtkRange
min- 最小範圍值
max- 最大範圍值
另請參見
GtkRange


------------ KeyGTK3gtk_range_set_restrict_to_fill_level ----

gtk_range_set_restrict_to_fill_level
Sets whether the slider is restricted to the fill level. Seegtk_range_set_fill_level() for a general description of the filllevel concept.
Syntax
Parameters
range  -  	A GtkRange
restrict_to_fill_level  -  	Whether the fill level restricts slider movement.
Since 2.12
See Also
GtkRange


------------ KeyGTK3gtk_range_set_round_digits ----

gtk_range_set_round_digits
設置要將值舍入到何時更改的位數。看。?change-value?
語法
參數
range- 一GtkRange
round_digits- 以數位為單位的精度，或 -1
自 2.24 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_set_show_fill_level ----

gtk_range_set_show_fill_level
設置是否在槽上顯示圖形填充水準。Seegtk_range_set_fill_level（） 用於填充級別概念的一般描述。
語法
參數
range- 一GtkRange
show_fill_level- 是否顯示填充水準指示器圖形。
自 2.12 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_set_slider_size_fixed ----

gtk_range_set_slider_size_fixed
設置範圍的滑塊是具有固定大小，還是具有取決於其調整的頁面大小的大小。此函數主要用於子類。GtkRange
語法
參數
range- 一GtkRange
size_fixed- TRUE 使滑塊大小恒定
自 2.2 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_set_upper_stepper_sensitivity ----

gtk_range_set_upper_stepper_sensitivity
設置步進器的靈敏度策略，該策略指向 GtkRange 調整的“上”端。
語法
參數
range- 一GtkRange
sensitivity- 上步進器的靈敏度策略。
自 2.10 起
另請參見
GtkRange


------------ KeyGTK3gtk_range_set_value ----

gtk_range_set_value
設置範圍的當前值;如果該值超出最小值或最大範圍值，則將其夾緊以適合其內部。如果值發生變化，範圍將發出信號。?value-changed?
語法
參數
range- 一GtkRange
value- 範圍的新值
另請參見
GtkRange


------------ KeyGTK3gtk_rc_add_default_file ----

gtk_rc_add_default_file
gtk_rc_add_default_file自 3.0 版起已棄用，不應在新編寫的代碼中使用。與自訂一起使用 將檔添加到要在 gtk_init（） 末尾解析的文件列表中。GtkStyleContextGtkStyleProvider
語法
參數
filename- 文件的路徑名。如果檔案名不是絕對的，則在目前的目錄中搜索它。[類型檔案名]
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_find_module_in_path ----

gtk_rc_find_module_in_path
gtk_rc_find_module_in_path自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用。在 GTK+ 搜索路徑中搜索主題引擎。此功能對應用程式沒有用處，不應使用。GtkCssProvider
語法
參數
module_file- 主題引擎的名稱
返回
檔案名，如果找到（必須使用g_free（）），否則為 NULL。[類型檔案名]
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_find_pixmap_in_path ----

gtk_rc_find_pixmap_in_path
gtk_rc_find_pixmap_in_path自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用。在 pixmap 路徑中查找指定 的檔。如果未找到該檔，它將輸出一條警告消息 usingg_warning（） 並返回 NULL。GtkCssProviderGtkSettings
語法
參數
settings- 一GtkSettings
scanner- 用於獲取警告消息的行號資訊的掃描器，或 NULL
pixmap_file- 要定位的圖元映射檔的名稱。
返回
檔案名。[類型檔案名]
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_get_default_files ----

gtk_rc_get_default_files
gtk_rc_get_default_files自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用代替在 gtk_init（） 末尾重新刪除將解析的 RC 檔的當前列表。GtkStyleContext
返回
以 NULL 結尾的檔案名陣列。此記憶體歸 GTK+ 所有，不得由應用程式釋放。如果要存儲此資訊，則應進行複製。[傳輸 none][陣列零終止 =1][元素類型檔案名]
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_get_im_module_file ----

gtk_rc_get_im_module_file
gtk_rc_get_im_module_file自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用。獲取 IM 模組檔的路徑。有關更多詳細資訊，請參閱GTK_IM_MODULE_FILEenvironment變數的文檔。GtkCssProvider
返回
一個新分配的字串，其中包含列出可用於載入的 IM 模組的檔的名稱。[類型檔案名]
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_get_im_module_path ----

gtk_rc_get_im_module_path
gtk_rc_get_im_module_path自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用。獲取在其中查找 IM 模組的路徑。有關查找模組的更多詳細資訊，請參閱GTK_PATHenvironment變數的文檔。此函數僅對隨 GTK+ 提供的實用程式有用，在正常情況下不應由應用程式使用。GtkCssProvider
返回
新分配的字串，其中包含要在其中查找 IM 模組的路徑。[類型檔案名]
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_get_module_dir ----

gtk_rc_get_module_dir
gtk_rc_get_module_dir自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用。返回 GTK+ 在其中查找主題引擎的目錄。有關搜索主題引擎的完整資訊，請參閱運行 GTK+ 應用程式中的GTK_PATH文檔。GtkCssProvider
返回
目錄。（必須使用 g_free（）） 釋放）。[類型檔案名]
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_get_style ----

gtk_rc_get_style
gtk_rc_get_style自 3.0 版起已棄用，不應在新編寫的代碼中使用。相反，使用查找給定構件的所有匹配的 RC 樣式，將它們組合在一起，然後創建表示複合外觀的樣式。（GTK+ 實際上保留了以前創建的樣式的緩存，因此可能不會創建新樣式。GtkStyleContextGtkStyle
語法
參數
widget- 一GtkWidget
返回
生成的樣式。返回的樣式中沒有添加引用計數，因此，如果要保存此樣式，則應自行添加引用。[無轉移]
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_get_style_by_paths ----

gtk_rc_get_style_by_paths
gtk_rc_get_style_by_paths自 3.0 版起已棄用，不應在新編寫的代碼中使用。相反，Use 通過提供用於匹配的原始元件來創建 RC 檔中定義的樣式。當創建應該像小部件一樣主題的偽小部件時，此功能可能很有用，但實際上沒有相應的GTK +小部件。這方面的一個例子是 GNOME 畫布小部件中的項目。gtk_rc_get_style（） 的操作類似於：12345[/syntax] [syntax]gtk_widget_path （widget， NULL， &path， NULL）;gtk_widget_class_path （widget， NULL， &class_path， NULL）;gtk_rc_get_style_by_paths （gtk_widget_get_settings （widget）， path， class_path， G_OBJECT_TYPE （widget））;[/語法]GtkStyleContextGtkStyle
語法
參數
settings- 一個物件GtkSettings
widget_path- 查找樣式時要使用的小部件路徑，如果沒有與小部件路徑匹配，則為 NULL。[允許-無]
class_path- 查找樣式時要使用的類路徑，如果沒有與類路徑匹配，則為 NULL。[允許-無]
type- 當與類樣式匹配時，將與此類型的父類型一起使用的類型，或者G_TYPE_NONE
返回
通過與提供的路徑匹配而創建的樣式，如果未指定任何匹配項，則應使用預設樣式，則為 NULL。返回值由 GTK+ 作為內部緩存的一部分擁有，因此，如果要保留對它的引用，則必須對返回值調用 g_object_ref（）。[無轉移]
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_get_theme_dir ----

gtk_rc_get_theme_dir
gtk_rc_get_theme_dir自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用。返回應在其中安裝主題的標準目錄。（GTK+ 實際上並不使用此目錄。GtkCssProvider
返回
目錄（必須使用 g_free（）） 釋放）。
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_parse ----

gtk_rc_parse
gtk_rc_parse自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用。分析給定的資源檔。GtkCssProvider
語法
參數
filename- 要解析的檔的檔案名。如果檔案名不是絕對的，則在目前的目錄中搜索它。
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_parse_color ----

gtk_rc_parse_color
gtk_rc_parse_color自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用 RC 檔中預期格式的顏色。請注意，主題引擎應使用 gtk_rc_parse_color_full（） 來支援符號顏色。GtkCssProvider
語法
參數
scanner- 一GScanner
color- 指向要在其中存儲結果的 指標。[輸出]GdkColor
返回
如果解析成功，G_TOKEN_NONE，否則權杖是預期的但未找到的
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_parse_color_full ----

gtk_rc_parse_color_full
gtk_rc_parse_color_full自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用 RC 檔中預期格式的顏色。如果樣式不為 NULL，則將參考它來解決對符號顏色的引用。GtkCssProvider
語法
參數
scanner- 一GScanner
style- a 或 NULL。[允許-無]GtkRcStyle
color- 指向要在其中存儲結果的 指標。[輸出]GdkColor
返回
如果解析成功，G_TOKEN_NONE，否則權杖是預期的但未找到的
自 2.12 起
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_parse_priority ----

gtk_rc_parse_priority
gtk_rc_parse_priority自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用從 RC 檔中預期的格式中解析變數。GtkCssProviderGtkPathPriorityType
語法
參數
scanner- a（必須初始化才能解析 RC 檔）GScanner
priority- 指向變數的指標，用於存儲結果。GtkPathPriorityType
返回
如果解析成功，G_TOKEN_NONE，否則該權杖是預期的但未找到的。
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_parse_state ----

gtk_rc_parse_state
gtk_rc_parse_state自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用從 RC 檔中預期的格式中解析變數。GtkCssProviderGtkStateType
語法
參數
scanner- a（必須初始化才能解析 RC 檔）GScanner
state- 指向要在其中存儲結果的變數的指標。[輸出]GtkStateType
返回
如果解析成功，G_TOKEN_NONE，否則該權杖是預期的但未找到的。
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_parse_string ----

gtk_rc_parse_string
gtk_rc_parse_string自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用。直接從字串分析資源資訊。GtkCssProvider
語法
參數
rc_string- 要解析的字串。
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_property_parse_border ----

gtk_rc_property_parse_border
A 用於gtk_settings_install_property_parser（）或 gtk_widget_class_install_style_property_parser（），它以整數左、右、上、下 }“的形式解析邊界，用於整數左、右、上和下。GtkRcPropertyParser
語法
參數
pspec- 一GParamSpec
gstring- 要解析的GString
property_value- a 必須包含盒裝值。GValue
返回
如果 gstringcould 被解析並且property_valuehas設置為結果 ，則為 TRUE。GtkBorder
另請參見
GtkSettings


------------ KeyGTK3gtk_rc_property_parse_color ----

gtk_rc_property_parse_color
A 用於gtk_settings_install_property_parser（） 或 gtk_widget_class_install_style_property_parser（），它解析由其名稱或形式{ 紅色，綠色，藍色}給出的顏色，其中紅色，綠色和藍色是0到65535之間的整數或0和1之間的浮點數。GtkRcPropertyParser
語法
參數
pspec- 一GParamSpec
gstring- 要解析的GString
property_value- a 必須保存值。GValueGdkColor
返回
如果 gstringcould 被解析並且property_valuehas設置為結果 ，則為 TRUE。GdkColor
另請參見
GtkSettings


------------ KeyGTK3gtk_rc_property_parse_enum ----

gtk_rc_property_parse_enum
與 gtk_settings_install_property_parser（） 或 gtk_widget_class_install_style_property_parser（） 一起使用，用於解析單枚舉值。枚舉值可以通過其名稱，其昵稱或數值來指定。為了與標誌解析保持一致，值可能用括弧括起來。GtkRcPropertyParser
語法
參數
pspec- 一GParamSpec
gstring- 要解析的GString
property_value- 必須包含枚舉值的 a。GValue
返回
如果 gstringcould 被解析並且property_valuehas設置為結果 ，則為 TRUE。GEnumValue
另請參見
GtkSettings


------------ KeyGTK3gtk_rc_property_parse_flags ----

gtk_rc_property_parse_flags
與解析標誌的 gtk_settings_install_property_parser（） 或 gtk_widget_class_install_style_property_parser（） 一起使用的 A。標誌可以通過它們的名字，它們的昵稱來指定。可以在“（flag1 | flag2 | ... ）”的形式中指定多個標誌。GtkRcPropertyParser
語法
參數
pspec- 一GParamSpec
gstring- 要解析的GString
property_value- a 必須保存標誌值。GValue
返回
如果解析 gstringcould 並且property_valuehas設置為生成的標誌值，則為 TRUE。
另請參見
GtkSettings


------------ KeyGTK3gtk_rc_property_parse_requisition ----

gtk_rc_property_parse_requisition
A 用於 gtk_settings_install_property_parser（） 或 gtk_widget_class_install_style_property_parser（），它以“{ width， height }” 的形式解析 isquisition，表示整數的寬度和高度。GtkRcPropertyParser
語法
參數
pspec- 一GParamSpec
gstring- 要解析的GString
property_value- a 必須包含盒裝值。GValue
返回
如果 gstringcould 被解析並且property_valuehas設置為結果 ，則為 TRUE。GtkRequisition
另請參見
GtkSettings


------------ KeyGTK3gtk_rc_reparse_all ----

gtk_rc_reparse_all
gtk_rc_reparse_all自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用。如果以前讀取的任何檔的修改時間已更改，請丟棄所有樣式資訊，然後重新讀取所有以前讀取的 RC 檔。GtkCssProviderGtkSettings
返回
如果檔被重新讀取，則為 TRUE。
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_reparse_all_for_settings ----

gtk_rc_reparse_all_for_settings
gtk_rc_reparse_all_for_settings自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用。如果給定的任何先前讀取的檔的修改時間已更改，請丟棄所有樣式資訊，然後重新讀取所有以前讀取的 RC 檔。GtkCssProviderGtkSettings
語法
參數
settings- 一GtkSettings
force_load- 載入是否有任何更改
返回
如果檔被重新讀取，則為 TRUE。
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_reset_styles ----

gtk_rc_reset_styles
gtk_rc_reset_styles自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用。此函數重新計算使用分離物件的所有構件的樣式。（有一個物件，請參閱gtk_settings_get_for_screen（））;當某些全域參數發生更改而影響所有小部件的外觀時，它很有用，因為當小部件獲得新樣式時，它將重新繪製並重新計算有關其外觀的任何緩存資訊。例如，當作業系統的預設字體大小集發生更改時，將使用它。請注意，此函數不會影響顯式設置樣式的小部件，這些小部件具有gtk_widget_set_style（）。GtkCssProviderGtkSettingsGtkSettingsGdkScreen
語法
參數
settings- 一GtkSettings
2.4 起
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_scanner_new ----

gtk_rc_scanner_new
gtk_rc_scanner_new自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用GtkCssProvider
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_set_default_files ----

gtk_rc_set_default_files
gtk_rc_set_default_files自 3.0 版起已棄用，不應在新編寫的代碼中使用。與自訂一起使用改為設置 GTK+ 將在 gtk_init（） 末尾讀取的文件列表。GtkStyleContextGtkStyleProvider
語法
參數
filenames- 以 ANULL 結尾的檔案名列表。[陣列零終止 = 1][元素類型檔案名]
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_style_copy ----

gtk_rc_style_copy
gtk_rc_style_copy自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用。創建指定 的副本。此函數將正確複製 RC 樣式，該樣式是從 中分類的成員。GtkCssProviderGtkRcStyleGtkRcStyle
語法
參數
orig- 要複製的樣式
返回
結果 .[轉移完整][/代碼GtkRcStyle
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_style_new ----

gtk_rc_style_new
gtk_rc_style_new自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用。創建一個未設置欄位且引用計數為 1 的新引用。GtkCssProviderGtkRcStyle
返回
新創建的GtkRcStyle
另請參見
gtk3-Resource-Files


------------ KeyGTK3gtk_recent_action_get_show_numbers ----

gtk_recent_action_get_show_numbers
gtk_recent_action_get_show_numbers自版本 3.10 起已棄用，不應在新編寫的代碼中使用。返回由 gtk_recent_chooser_menu_set_show_numbers（） 設置的值。
語法
參數
action- 一GtkRecentAction
返回
如果應顯示數位，則為 TRUE。
自 2.12 起
另請參見
GtkRecentAction


------------ KeyGTK3gtk_recent_action_new ----

gtk_recent_action_new
gtk_recent_action_new自 3.10 版起已棄用，不應在新編寫的代碼中使用。創建新對象。要將操作添加到 a 並為操作設置加速器，請調用 gtk_action_group_add_action_with_accel（）。GtkRecentActionGtkActionGroup
語法
參數
name- 操作的唯一名稱
label- 顯示在功能表項目和按鈕上的標籤，或 NULL。[允許-無]
tooltip- 操作的工具提示，或 NULL。[允許-無]
stock_id- 在表示操作的小部件中顯示的股票圖示，或 NULL。[允許-無]
返回
新創建的 .GtkRecentAction
自 2.12 起
另請參見
GtkRecentAction


------------ KeyGTK3gtk_recent_action_new_for_manager ----

gtk_recent_action_new_for_manager
gtk_recent_action_new_for_manager自版本 3.10 起已棄用，不應在新編寫的代碼中使用。創建新對象。要將操作添加到 a 並為操作設置加速器，請調用 gtk_action_group_add_action_with_accel（）。GtkRecentActionGtkActionGroup
語法
參數
name- 操作的唯一名稱
label- 顯示在功能表項目和按鈕上的標籤，或 NULL。[允許-無]
tooltip- 操作的工具提示，或 NULL。[允許-無]
stock_id- 在表示操作的小部件中顯示的股票圖示，或 NULL。[允許-無]
manager- a ，或 NULL 用於使用預設值。[允許-無]GtkRecentManagerGtkRecentManager
返回
新創建的GtkRecentAction
自 2.12 起
另請參見
GtkRecentAction


------------ KeyGTK3gtk_recent_action_set_show_numbers ----

gtk_recent_action_set_show_numbers
gtk_recent_action_set_show_numbers自 3.10 版起已棄用，不應在新編寫的代碼中使用。設置是否應將數字添加到表示操作的widgets所顯示的項中。顯示這些數位是為了提供一個唯一的字元，以便在功能表項目的 slabel 內使用助記符。只有前十個專案得到一個數字以避免衝突。
語法
參數
action- 一GtkRecentAction
show_numbers- 如果顯示的專案應編號，則為 TRUE
自 2.1 起
另請參見
GtkRecentAction


------------ KeyGTK3gtk_recent_chooser_add_filter ----

gtk_recent_chooser_add_filter
將篩檢程式添加到選擇器持有的物件清單中。如果沒有定義以前的篩選器物件，則此函數將callgtk_recent_chooser_set_filter（）。GtkRecentFilter
語法
參數
chooser- 一GtkRecentChooser
filter- 一GtkRecentFilter
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_dialog_new ----

gtk_recent_chooser_dialog_new
創建新的 .此函數類似於 togtk_dialog_new_with_buttons（）。GtkRecentChooserDialog
語法
參數
title- 對話方塊的標題，或 NULL。[允許-無]
parent- 對話方塊的瞬態父級，或 NULL，。[允許-無]
first_button_text- 股票ID或文本去在第一個按鈕，或NULL。[允許-無]
...- 第一個按鈕的回應 ID，然後是其他（按鈕、id）對，以 NULL 結尾
返回
一個新的GtkRecentChooserDialog
自 2.10 起
另請參見
GtkRecentChooserDialog


------------ KeyGTK3gtk_recent_chooser_dialog_new_for_manager ----

gtk_recent_chooser_dialog_new_for_manager
使用指定的最近管理中心創建新的管理器。如果您已經實現了自己最近的管理器，或者您具有物件的自訂實例，這將非常有用。GtkRecentChooserDialogGtkRecentManager
語法
參數
title- 對話方塊的標題，或 NULL。[允許-無]
parent- 對話方塊的瞬態父級，或 NULL，。[允許-無]
manager- 一GtkRecentManager
first_button_text- 股票ID或文本去在第一個按鈕，或NULL。[允許-無]
...- 第一個按鈕的回應 ID，然後是其他（按鈕、id）對，以 NULL 結尾
返回
一個新的GtkRecentChooserDialog
自 2.1 起
另請參見
GtkRecentChooserDialog


------------ KeyGTK3gtk_recent_chooser_get_current_item ----

gtk_recent_chooser_get_current_item
Gets the GtkRecentInfo currently selected by chooser.
Syntax
Parameters
chooser  -  	a GtkRecentChooser
Returns
a GtkRecentInfo.  Use gtk_recent_info_unref() whenwhen you have finished using it.
Since 2.10
See Also
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_current_uri ----

gtk_recent_chooser_get_current_uri
獲取選擇器當前選擇的 URI。
語法
參數
chooser- 一GtkRecentChooser
返回
新分配的字串，用於保存 URI。
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_filter ----

gtk_recent_chooser_get_filter
Gets the GtkRecentFilter object currently used by chooser to affectthe display of the recently used resources.
Syntax
Parameters
chooser  -  	a GtkRecentChooser
Returns
a GtkRecentFilter object. [transfer none]
Since 2.1
See Also
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_items ----

gtk_recent_chooser_get_items
以物件的形式獲取最近使用的資源的列表。此函數的返回值受 “sort-type？和？限制？選擇器的屬性。GtkRecentInfo
語法
參數
chooser- 一GtkRecentChooser
返回
新分配的對象清單。您應該在列表的每個項目上使用gtk_recent_info_unref（），然後使用g_list_free（）釋放列表本身。[element-type GtkRecentInfo][轉移完整]GtkRecentInfo
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_limit ----

gtk_recent_chooser_get_limit
Gets the number of items returned by gtk_recent_chooser_get_items()and gtk_recent_chooser_get_uris().
Syntax
Parameters
chooser  -  	a GtkRecentChooser
Returns
A positive integer, or -1 meaning that all items arereturned.
Since 2.10
See Also
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_local_only ----

gtk_recent_chooser_get_local_only
獲取是否只應在最近使用的資源選擇器中顯示本地資源。請參見gtk_recent_chooser_set_local_only（）
語法
參數
chooser- 一GtkRecentChooser
返回
如果只應顯示本地資源，則為 TRUE。
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_select_multiple ----

gtk_recent_chooser_get_select_multiple
Gets whether chooser can select multiple items.
Syntax
Parameters
chooser  -  	a GtkRecentChooser
Returns
TRUE if choosercan select more than one item.
Since 2.10
See Also
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_show_icons ----

gtk_recent_chooser_get_show_icons
檢索選擇器是否應在資源附近顯示圖示。
語法
參數
chooser- 一GtkRecentChooser
返回
如果應顯示圖示，則為 TRUE，否則為 FALSE。
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_show_not_found ----

gtk_recent_chooser_get_show_not_found
檢索選擇器是否應顯示最近使用但未找到的資源。
語法
參數
chooser- 一GtkRecentChooser
返回
如果應顯示未找到的資源，則為 TRUE，並且 FALSE otheriwse。
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_show_private ----

gtk_recent_chooser_get_show_private
返回選擇器是否應將最近使用的資源顯示為私有。
語法
參數
chooser- 一GtkRecentChooser
返回
如果最近的選擇器應顯示私人專案，則為 TRUE，否則為 FALSE。
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_show_tips ----

gtk_recent_chooser_get_show_tips
獲取選擇器是否應顯示包含最近使用者資源的完整路徑的工具提示。
語法
參數
chooser- 一GtkRecentChooser
返回
如果最近的選擇器應顯示工具提示，則為 TRUE，否則為 FALSE。
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_sort_type ----

gtk_recent_chooser_get_sort_type
Gets the value set by gtk_recent_chooser_set_sort_type().
Syntax
Parameters
chooser  -  	a GtkRecentChooser
Returns
the sorting order of the chooser.
Since 2.10
See Also
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_uris ----

gtk_recent_chooser_get_uris
獲取最近使用的資源的 URI。此函數的返回值受 “sort-type？和選擇器的“限制”屬性。由於返回的陣列以 NULL 結尾，因此長度可能為 NULL。
語法
參數
chooser- 一GtkRecentChooser
length- 返回與 THEURI 列表長度相同的位置，或 NULL。[輸出][允許-無]
返回
新分配的以 NULL 結尾的字串陣列。Useg_strfreev（） 來釋放它。[陣列長度 = 長度零終止 = 1][轉移完整]
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_list_filters ----

gtk_recent_chooser_list_filters
獲取選擇器持有的物件。GtkRecentFilter
語法
參數
chooser- 一GtkRecentChooser
返回
物件的單連結清單。您只需使用g_slist_free（）釋放返回的列表即可。[元素型 GtkRecentFilter][轉移容器]GtkRecentFilter
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_menu_get_show_numbers ----

gtk_recent_chooser_menu_get_show_numbers
返回由 gtk_recent_chooser_menu_set_show_numbers（） 設置的值。
語法
參數
menu- 一GtkRecentChooserMenu
返回
如果應顯示數位，則為 TRUE。
自 2.10 起
另請參見
GtkRecentChooserMenu


------------ KeyGTK3gtk_recent_chooser_menu_new ----

gtk_recent_chooser_menu_new
創建新的構件。這種小部件將最近使用的資源清單顯示為功能表，每個專案作為一個功能表項目。功能表中的每個項可能都有一個圖示，表示其 MIME 類型，以及一個數字，用於助記符。此小部件實現介面。此小部件創建自己的物件。請參閱thegtk_recent_chooser_menu_new_for_manager（） 函數，瞭解如何創建綁定到另一個物件的小部件。GtkRecentChooserMenuGtkRecentChooserGtkRecentManagerGtkRecentChooserMenuGtkRecentManager
返回
一個新的GtkRecentChooserMenu
自 2.10 起
另請參見
GtkRecentChooserMenu


------------ KeyGTK3gtk_recent_chooser_menu_new_for_manager ----

gtk_recent_chooser_menu_new_for_manager
使用管理器作為最近使用的基礎資源管理器創建新的小元件。如果您已經實現了自己最近的管理器，或者您有一個物件的自訂實例，或者如果您希望在多個小部件中共用一個公共物件，這將非常有用。GtkRecentChooserMenuGtkRecentManagerGtkRecentManagerGtkRecentChooser
語法
參數
manager- 一GtkRecentManager
返回
一個新的，綁定到經理。GtkRecentChooserMenu
自 2.10 起
另請參見
GtkRecentChooserMenu


------------ KeyGTK3gtk_recent_chooser_menu_set_show_numbers ----

gtk_recent_chooser_menu_set_show_numbers
設置是否應將數字添加到功能表項目中。顯示數位是為了在十個功能表項目的標籤內使用的助記符提供唯一字元。只有第一個專案才會得到一個數字以避免衝突。
語法
參數
menu- 一GtkRecentChooserMenu
show_numbers- 是否顯示數位
自 2.1 起
另請參見
GtkRecentChooserMenu


------------ KeyGTK3gtk_recent_chooser_remove_filter ----

gtk_recent_chooser_remove_filter
從選取器持有的物件清單中刪除濾鏡。GtkRecentFilter
語法
參數
chooser- 一GtkRecentChooser
filter- 一GtkRecentFilter
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_select_all ----

gtk_recent_chooser_select_all
如果選取器支持多個選取，則選擇選取器內的所有項目。
語法
參數
chooser- 一GtkRecentChooser
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_select_uri ----

gtk_recent_chooser_select_uri
在選擇器中選擇 uri。
語法
參數
chooser- 一GtkRecentChooser
uri- 一個 URI
error- 返回 的位置，或 NULL。[允許-無]GError
返回
如果找到 uris，則為 TRUE。
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_current_uri ----

gtk_recent_chooser_set_current_uri
將 uri 設置為選擇器的當前 URI。
語法
參數
chooser- 一GtkRecentChooser
uri- 一個 URI
error- 返回 的位置，或 NULL。[允許-無]GError
返回
如果找到 URI，則為 TRUE。
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_filter ----

gtk_recent_chooser_set_filter
將篩檢程式設置為選擇器使用的當前物件會影響顯示的最近使用的資源。GtkRecentFilter
語法
參數
chooser- 一GtkRecentChooser
filter- 一個.[允許-無]GtkRecentFilter
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_limit ----

gtk_recent_chooser_set_limit
Sets the number of items that should be returned bygtk_recent_chooser_get_items() and gtk_recent_chooser_get_uris().
Syntax
Parameters
chooser  -  	a GtkRecentChooser
limit  -  	a positive integer, or -1 for all items
Since 2.10
See Also
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_local_only ----

gtk_recent_chooser_set_local_only
設置是否只應在最近使用的資源選擇器中顯示本地資源（即使用 file:// URICheme 的資源）。Iflocal_only為 TRUE（預設值），則保證通過作業系統本機檔案系統訪問顯示的資源。
語法
參數
chooser- 一GtkRecentChooser
local_only- 如果只能顯示本地檔，則為 TRUE
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_select_multiple ----

gtk_recent_chooser_set_select_multiple
設置選擇器是否可以選擇多個專案。
語法
參數
chooser- 一GtkRecentChooser
select_multiple- 如果選擇者可以選擇多個專案，則為 TRUE
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_show_icons ----

gtk_recent_chooser_set_show_icons
設置選擇器在顯示資源時是否應在資源附近顯示圖示。
語法
參數
chooser- 一GtkRecentChooser
show_icons- 是否在資源附近顯示圖示
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_show_not_found ----

gtk_recent_chooser_set_show_not_found
設置選擇器是否應顯示它未找到的最近使用的資源。這僅適用于本地資源。
語法
參數
chooser- 一GtkRecentChooser
show_not_found- 是否顯示我們沒有找到的當地物品
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_show_private ----

gtk_recent_chooser_set_show_private
是否顯示最近使用的資源，標記為已註冊為私有。
語法
參數
chooser- 一GtkRecentChooser
show_private- TRUE 顯示私人物品，否則為 FALSE
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_show_tips ----

gtk_recent_chooser_set_show_tips
設置是否在微件中顯示包含每個最近使用的資源的完整路徑的工具提示。GtkRecentChooser
語法
參數
chooser- 一GtkRecentChooser
show_tips- 如果應顯示工具提示，則為 TRUE
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_sort_func ----

gtk_recent_chooser_set_sort_func
將排序時使用的比較函數設置為sort_func。如果選擇器將排序類型設置為，則選擇器將使用此函數進行排序。到比較函數將傳遞兩個結構andsort_data;如果第一個項目位於第二個項目之前，則sort_func應返回正整數;如果兩個項目相等，則返回零;如果第一個項目位於第二個項目之後，則返回負整數。GTK_RECENT_SORT_CUSTOMGtkRecentInfo
語法
參數
chooser- 一GtkRecentChooser
sort_func- 比較功能
sort_data- 要傳遞給sort_func或 NULL 的使用者資料。[允許-無]
data_destroy- 銷毀sort_data的通知程式，或 NULL。[允許-無]
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_sort_type ----

gtk_recent_chooser_set_sort_type
更改按選擇器顯示的最近使用的資源清單的排序順序。
語法
參數
chooser- 一GtkRecentChooser
sort_type- 選擇者應使用的排序順序
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_unselect_all ----

gtk_recent_chooser_unselect_all
取消選擇選取器內的所有項目。
語法
參數
chooser- 一GtkRecentChooser
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_unselect_uri ----

gtk_recent_chooser_unselect_uri
取消選擇器內的 uri。
語法
參數
chooser- 一GtkRecentChooser
uri- 一個 URI
自 2.10 起
另請參見
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_widget_new ----

gtk_recent_chooser_widget_new
創建新對象。這是一個嵌入式小部件，用於訪問最近使用的資源列表。GtkRecentChooserWidget
返回
一個新的GtkRecentChooserWidget
自 2.10 起
另請參見
GtkRecentChooserWidget


------------ KeyGTK3gtk_recent_chooser_widget_new_for_manager ----

gtk_recent_chooser_widget_new_for_manager
使用指定的最近管理中心創建新的管理器。如果您已經實現了自己最近的管理器，或者您具有物件的自訂實例，這將非常有用。GtkRecentChooserWidgetGtkRecentManager
語法
參數
manager- 一GtkRecentManager
返回
一個新的GtkRecentChooserWidget
自 2.1 起
另請參見
GtkRecentChooserWidget


------------ KeyGTK3gtk_recent_filter_add_age ----

gtk_recent_filter_add_age
添加一個規則，該規則允許基於資源的期限（即自上次修改以來經過的天數）。
語法
參數
filter- 一GtkRecentFilter
days- 天數
自 2.10 起
另請參見
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_add_application ----

gtk_recent_filter_add_application
添加一個規則，該規則允許基於已註冊這些資源的應用程式的名稱來使用這些資源。
語法
參數
filter- 一GtkRecentFilter
application- 應用程式名稱
自 2.10 起
另請參見
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_add_custom ----

gtk_recent_filter_add_custom
將規則添加到允許基於自訂回呼函數的資源的篩選器。傳入的所需位元欄位提供有關篩檢程式函數需要哪種資訊的資訊;這允許GTK+避免在篩檢程式不需要它時檢索昂貴的資訊。
語法
參數
filter- 一GtkRecentFilter
needed- 標誌的位元欄位，指示自訂篩檢程式函數需要的資訊。
func- 回呼函數;如果函數返回 TRUE，則將顯示該檔。
data- 資料傳遞到函數
data_destroy- 函式呼叫免費資料何時不再需要。
自 2.10 起
另請參見
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_add_group ----

gtk_recent_filter_add_group
添加一個規則，該規則允許基於資源所屬組的名稱
語法
參數
filter- 一GtkRecentFilter
group- 組名
自 2.10 起
另請參見
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_add_mime_type ----

gtk_recent_filter_add_mime_type
添加一個規則，該規則允許基於其註冊的 MIME 類型的資源。
語法
參數
filter- 一GtkRecentFilter
mime_type- 默劇類型
自 2.10 起
另請參見
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_add_pattern ----

gtk_recent_filter_add_pattern
添加一個規則，該規則允許基於與其顯示名稱匹配的模式的資源。
語法
參數
filter- 一GtkRecentFilter
pattern- 檔模式
自 2.10 起
另請參見
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_add_pixbuf_formats ----

gtk_recent_filter_add_pixbuf_formats
添加一個規則，允許採用 GdkPixbuf 支援的格式的影像檔。
語法
參數
filter- 一GtkRecentFilter
自 2.10 起
另請參見
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_filter ----

gtk_recent_filter_filter
測試是否應根據篩選器顯示檔。filter_info應包括從 gtk_recent_filter_get_needed（） 返回的欄位，並且必須設置 filter_infoto指示已設置哪些欄位。應用程式通常不會使用此功能。它主要用於實施。GtkRecentFilterInfoGtkRecentFilterInfo.containsGtkRecentChooser
語法
參數
filter- 一GtkRecentFilter
filter_info- 包含有關最近使用的資源的資訊GtkRecentFilterInfo
返回
如果應顯示檔，則為 TRUE
自 2.1 起
另請參見
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_get_name ----

gtk_recent_filter_get_name
獲取篩選器的用戶可讀名稱。請參見gtk_recent_filter_set_name（）。
語法
參數
filter- 一GtkRecentFilter
返回
篩選器的名稱，或 NULL。返回的字串由篩選器物件擁有，不應釋放。
自 2.10 起
另請參見
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_get_needed ----

gtk_recent_filter_get_needed
獲取需要為傳遞給gtk_recent_filter_filter（）此函數通常不被應用程式使用而需要填寫的欄位;它主要用於實施。GtkRecentFilterInfoGtkRecentChooser
語法
參數
filter- 一GtkRecentFilter
返回
標記的位元欄位，指示調用 gtk_recent_filter_filter（） 時所需的欄位
自 2.10 起
另請參見
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_new ----

gtk_recent_filter_new
創建一個不添加任何規則的新專案。此類篩選器不接受任何最近使用的資源，因此在添加規則withgtk_recent_filter_add_pattern（）、gtk_recent_filter_add_mime_type（）、gtk_recent_filter_add_application（）、gtk_recent_filter_add_age（） 之前，該篩選器不會特別有用。要創建接受任何最近使用的資源的篩選器，請使用： 12[/語法] [語法]GtkRecentFilter *filter = gtk_recent_filter_new （）;gtk_recent_filter_add_pattern （filter， “*”）;[/語法]GtkRecentFilter
返回
一個新的GtkRecentFilter
自 2.10 起
另請參見
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_set_name ----

gtk_recent_filter_set_name
設置篩檢程式的人類可讀名稱;這是字串，如果有可選的篩選器清單，則該字串將顯示在最近使用的資源選擇器使用者介面中。
語法
參數
filter- 一GtkRecentFilter
name- 然後人類可讀的篩檢程式名稱
自 2.10 起
另請參見
GtkRecentFilter


------------ KeyGTK3gtk_recent_info_create_app_info ----

gtk_recent_info_create_app_info
為指定的GAppInfoGtkRecentInfo
語法
參數
info- 一GtkRecentInfo
app_name- 應映射到 ;如果使用 NULL，則使用 MIME 類型的預設應用程式。[允許-無]GAppInfo
error- 返回 的位置，或 NULL。[允許-無]GError
返回
新創建的 ，或者 NULL.In 錯誤的情況下，錯誤將使用aGTK_RECENT_MANAGER_ERROR或G_IO_ERROR進行設置。[轉移完整]GAppInfo
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_exists ----

gtk_recent_info_exists
檢查資訊所指向的資源是否仍然存在。目前，此檢查僅對指向本地檔的資源執行。
語法
參數
info- 一GtkRecentInfo
返回
如果資源存在，則為 TRUE
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_added ----

gtk_recent_info_get_added
獲取資源添加到最近使用的資源列表時的時間戳記（來自系統紀元的秒數）。
語法
參數
info- 一GtkRecentInfo
返回
將資源添加到清單時從系統的 Epoch 經過的秒數，或失敗時 -1。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_age ----

gtk_recent_info_get_age
獲取自上次更新由資訊指向的資源以來經過的天數。
語法
參數
info- 一GtkRecentInfo
返回
一個正整數，包含自上次修改此資源以來經過的天數。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_applications ----

gtk_recent_info_get_applications
檢索已註冊此資源的應用程式的清單。
語法
參數
info- 一GtkRecentInfo
length- 返回列表長度的返回位置。[輸出][允許-無]
返回
新分配的以 NULL 結尾的字串陣列。使用 g_strfreev（） 來釋放它。[陣列長度 = 長度零終止 = 1][轉移完整]
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_application_info ----

gtk_recent_info_get_application_info
獲取有關已註冊由資訊指示的資源的應用程式的資料。如果命令列包含存儲規範中定義的任何轉義字元，則這些字元將被展開。
語法
參數
info- 一GtkRecentInfo
app_name- 已註冊此專案的應用程式的名稱
app_exec- 返回包含命令列的字串的位置。[無轉移][輸出]
count- 此項目註冊次數的返回位置。[輸出]
time_- 返回上次為此應用程式註冊此專案時間戳記的位置。[輸出]
返回
如果具有 app_namehas的應用程式在最近使用的清單內註冊了此資源，則為 TRUE，否則為 FALSE。Theapp_execstring歸 本人所有，不得修改或釋放GtkRecentInfo
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_description ----

gtk_recent_info_get_description
獲取資源的（簡短）說明。
語法
參數
info- 一GtkRecentInfo
返回
資源的說明。返回的字串由最近的管理器擁有，不應被釋放。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_display_name ----

gtk_recent_info_get_display_name
獲取資源的名稱。如果未定義任何值，則獲取資源的基名。
語法
參數
info- 一GtkRecentInfo
返回
資源的顯示名稱。返回的字串由最近的管理器擁有，不應被釋放。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_gicon ----

gtk_recent_info_get_gicon
檢索與資源 MIME 類型關聯的圖示。
語法
參數
info- 一GtkRecentInfo
返回
a 包含圖示，或 NULL。使用完圖示後Useg_object_unref（）。[轉移完整]GIcon
2.22 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_groups ----

gtk_recent_info_get_groups
返回為最近使用的專案資訊註冊的所有組。返回的組名陣列將以 NULL 終止，因此長度可能為 NULL。
語法
參數
info- 一GtkRecentInfo
length- 返回組數的返回位置。[輸出][允許-無]
返回
新分配的 NULL 終止字串陣列。使用 g_strfreev（） 來釋放它。[陣列長度 = 長度零終止 = 1][轉移完整]
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_icon ----

gtk_recent_info_get_icon
檢索與資源 MIME 類型關聯的大小大小的圖示。
語法
參數
info- 一GtkRecentInfo
size- 圖示的大小（以圖元為單位）
返回
a 包含圖示，或 NULL。使用完圖示後，請使用 g_object_unref（）。[轉移完整]GdkPixbuf
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_mime_type ----

gtk_recent_info_get_mime_type
獲取資源的 MIME 類型。
語法
參數
info- 一GtkRecentInfo
返回
資源的 MIME 類型。返回的字串由最近的管理器擁有，不應被釋放。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_modified ----

gtk_recent_info_get_modified
獲取上次修改資源的中繼資料時的時間戳記（來自系統紀元的秒數）。
語法
參數
info- 一GtkRecentInfo
返回
上次修改資源時從系統的 Epoch 開始經過的秒數，或失敗時 -1。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_private_hint ----

gtk_recent_info_get_private_hint
獲取 “私有” 的值旗。最近使用清單中將此標誌設置為 TRUE 的資源應僅由已註冊它們的應用程式顯示。
語法
參數
info- 一GtkRecentInfo
返回
如果找到私有標誌，則為 TRUE，否則為 FALSE。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_short_name ----

gtk_recent_info_get_short_name
計算可用作菜單或清單中專案名稱的有效 UTF-8 字串。例如，對引用？file：///foo/bar.txt？將產生？bar.txt？。
語法
參數
info- 一個GtkRecentInfo
返回
採用 UTF-8 編碼的新分配字串;免費它withg_free（）。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_uri ----

gtk_recent_info_get_uri
獲取資源的 URI。
語法
參數
info- 一GtkRecentInfo
返回
資源的 URI。返回的字串由最近的管理器擁有，不應釋放。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_uri_display ----

gtk_recent_info_get_uri_display
獲取資源的 URI 的可顯示版本。如果資源是本地的，則返回本地路徑;如果資源不是本地資源，則返回 gtk_recent_info_get_uri（） 的 UTF-8 編碼內容。
語法
參數
info- 一GtkRecentInfo
返回
新分配的 UTF-8 字串，其中包含 theresource 的 URI 或 NULL。使用完 g_free（） 後使用。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_visited ----

gtk_recent_info_get_visited
獲取上次訪問資源的中繼資料時的時間戳記（來自系統紀元的秒數）。
語法
參數
info- 一GtkRecentInfo
返回
上次訪問資源時從系統的 Epoch 經過的秒數，或失敗時 -1。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_has_application ----

gtk_recent_info_has_application
檢查應用程式是否使用app_name註冊了此資源。
語法
參數
info- 一GtkRecentInfo
app_name- 包含應用程式名稱的字串
返回
如果找到具有名稱的應用程式app_namewas TRUE，否則為 FALSE。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_has_group ----

gtk_recent_info_has_group
檢查group_name是否顯示在為最近使用的專案資訊註冊的組中。
語法
參數
info- 一GtkRecentInfo
group_name- 組名
返回
如果找到該組，則為 TRUE。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_is_local ----

gtk_recent_info_is_local
通過查看資源 URI 的方案來檢查資源是否為本地資源。
語法
參數
info- 一GtkRecentInfo
返回
如果資源是本地資源，則為 TRUE。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_last_application ----

gtk_recent_info_last_application
獲取已註冊由 info 表示的最近使用的資源的最後一個應用程式的名稱。
語法
參數
info- 一GtkRecentInfo
返回
應用程式名稱。使用 g_free（） 來釋放它。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_match ----

gtk_recent_info_match
檢查兩個是否指向同一資源。GtkRecentInfo
語法
參數
info_a- 一GtkRecentInfo
info_b- 一GtkRecentInfo
返回
如果兩者都指向同一資源，則為 TRUE，否則為 FALSE。GtkRecentInfo
自 2.1 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_ref ----

gtk_recent_info_ref
將recent_info的引用計數增加 1。
語法
參數
info- 一GtkRecentInfo
返回
最近的 info 對象及其引用計數增加了 1。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_info_unref ----

gtk_recent_info_unref
將資訊的引用計數減少 1。如果引用計數達到零，則解除配置資訊，並釋放記憶體。
語法
參數
info- 一GtkRecentInfo
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_add_full ----

gtk_recent_manager_add_full
使用在傳入recent_data中指定的中繼資料，將 uri 指向的新資源添加到最近使用的資源列表中。傳遞的 URI 將用於在清單中標識此資源。為了註冊最近使用的新資源，必須傳遞有關資源的中繼資料以及URI;中繼資料存儲在 中，其中必須包含 URI 所指向的資源的 MIMEtype;正在註冊該項的應用程式的名稱，以及啟動該項時要使用的命令列。（可選）可能包含在查看項目時使用的 UTF-8 字串，而不是在查看該 URL 的最後一個元件;項目的簡短描述;該專案是否應被視為私有專案 - 也就是說，僅應由已註冊它的應用程式顯示。GtkRecentDataGtkRecentDataGtkRecentData
語法
參數
manager- 一GtkRecentManager
uri- 一個有效的 URI
recent_data- 資源的中繼資料
返回
如果新項已成功添加到最近使用的資源列表中，則為 TRUE，否則為 FALSE。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_add_item ----

gtk_recent_manager_add_item
將 uri 指向的新資源添加到最近使用的資源列表中。此函數自動檢索一些所需的中繼資料，並將其他中繼資料設置為常用預設值;它將資料提供給gtk_recent_manager_add_full（）。如果要顯式定義 uri 所指向的資源的中繼資料，請參閱 gtk_recent_manager_add_full（）。
語法
參數
manager- 一GtkRecentManager
uri- 一個有效的 URI
返回
如果新項已成功添加到最近使用的資源列表中，則為 TRUE
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_get_default ----

gtk_recent_manager_get_default
獲取 的唯一實例，您可以在應用程式中共用該實例，而無需關心記憶體管理。GtkRecentManager
返回
一個獨特的.不要引用或取消引用它。[無轉移]GtkRecentManager
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_get_items ----

gtk_recent_manager_get_items
獲取最近使用的資源的列表。
語法
參數
manager- 一GtkRecentManager
返回
新分配對象的清單。Usegtk_recent_info_unref（） 在列表內的每個項目上，然後使用 g_list_free（） 釋放列表本身。[element-type GtkRecentInfo][轉移完整]GtkRecentInfo
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_has_item ----

gtk_recent_manager_has_item
檢查是否有最近使用的資源在最近的管理器中註冊了 uri。
語法
參數
manager- 一GtkRecentManager
uri- 一個 URI
返回
如果找到資源，則為 TRUE，否則為 FALSE。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_lookup_item ----

gtk_recent_manager_lookup_item
在最近使用的資源列表中搜索 URI，並返回包含有關資源的資訊，如其 MIME 類型或其顯示名稱。GtkRecentInfo
語法
參數
manager- 一GtkRecentManager
uri- 一個 URI
error- 的返回位置，或 NULL。[允許-無]GError
返回
a 包含有關 uri 所指向的資源的資訊，如果 URI 未在最近使用的資源列表中註冊，則為 NULL。免費withgtk_recent_info_unref（）.GtkRecentInfo
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_move_item ----

gtk_recent_manager_move_item
將最近使用的資源的位置從 uri 更改為new_uri。請注意，此函數不會影響 URI 所指向的資源，而只會影響最近使用的資源列表中使用的 URI。
語法
參數
manager- 一GtkRecentManager
uri- 最近使用的資源的 URI
new_uri- 最近使用的資源的新 URI，或 NULL 以刪除列表中 uriin 所指向的項目。[允許-無]
error- 的返回位置，或 NULL。[允許-無]GError
返回
成功時真。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_new ----

gtk_recent_manager_new
創建新的最近使用的管理器物件。最近的管理器物件用於處理最近使用的資源的列表。物件監視最近使用的資源清單，並發出 “changed？信號每次清單中的某些內容都會發生變化。對象很昂貴：確保僅在需要時才創建它們。您應該改用 gtk_recent_manager_get_default（）。GtkRecentManagerGtkRecentManager
返回
新創建的對象。GtkRecentManager
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_purge_items ----

gtk_recent_manager_purge_items
從最近使用的資源列表中清除每個專案。
語法
參數
manager- 一GtkRecentManager
error- 的返回位置，或 NULL。[允許-無]GError
返回
已從其中已使用的資源列表中刪除的專案數。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_remove_item ----

gtk_recent_manager_remove_item
從最近由最近的管理器處理的最近使用的資源列表中刪除 uri 所指向的資源。
語法
參數
manager- 一GtkRecentManager
uri- 要刪除的項目的URI
error- 返回 的位置，或 NULL。[允許-無]GError
返回
如果 urihas 指向的專案已被最近使用的資源列表成功刪除，則為 TRUE，否則為 FALSE。
自 2.10 起
另請參見
GtkRecentManager


------------ KeyGTK3gtk_render_activity ----

gtk_render_activity
呈現活動區域（如 in 或 thefill line in ），狀態GTK_STATE_FLAG_ACTIVEdetermines是否有活動正在進行。GtkSpinnerGtkRange
語法
參數
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原點
y- 矩形的Y原點
width- 矩形寬度
height- 矩形高度
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_render_arrow ----

gtk_render_arrow
呈現指向角度的箭頭。0、1？2 處的典型箭頭渲染?, ?和 3？2 ？：
語法
參數
context- 一GtkStyleContext
cr- 一cairo_t
angle- 箭頭角度從0到2 * G_PI，是指向北方的箭頭0
x- 渲染區域的 X 原點
y- 渲染區域的 Y 原點
size- 渲染區域的正方形側
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_render_background ----

gtk_render_background
呈現元素的背景。典型的背景渲染，顯示背景圖像、邊框寬度和邊框半徑的效果：
語法
參數
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原點
y- 矩形的Y原點
width- 矩形寬度
height- 矩形高度
自 3.0.
另請參見
GtkStyleContext


------------ KeyGTK3gtk_render_check ----

gtk_render_check
呈現核取記號（如 在 中所示）。GTK_STATE_FLAG_ACTIVE狀態確定檢查是處於打開狀態還是關閉狀態，GTK_STATE_FLAG_INCONSISTENT確定是否應將其標記為未定義。典型的核取記號呈現：GtkCheckButton
語法
參數
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原點
y- 矩形的Y原點
width- 矩形寬度
height- 矩形高度
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_render_expander ----

gtk_render_expander
在由 x、y、寬度、高度定義的區域中呈現擴展器（如 和 中所用）。狀態GTK_STATE_FLAG_ACTIVEdetermines是展開器是折疊還是展開。典型的擴展器渲染：GtkTreeViewGtkExpander
語法
參數
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原點
y- 矩形的Y原點
width- 矩形寬度
height- 矩形高度
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_render_extension ----

gtk_render_extension
在矩形中呈現由 x、y、寬度、高度定義的副檔名（如在選項卡中）。擴展連接到的一側由gap_side定義。典型的擴展外掛程式呈現：GtkNotebook
語法
參數
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原點
y- 矩形的Y原點
width- 矩形寬度
height- 矩形高度
gap_side- 間隙所在的一側
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_render_focus ----

gtk_render_focus
在由 x、y、寬度、高度確定的矩形上呈現焦點指示器。典型焦點渲染：
語法
參數
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原點
y- 矩形的Y原點
width- 矩形寬度
height- 矩形高度
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_render_frame ----

gtk_render_frame
在由 x、y、寬度、高度定義的矩形周圍呈現一個框架。幀渲染示例，顯示邊框圖像、邊框顏色、邊框寬度、邊框半徑和交匯點的效果：
語法
參數
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原點
y- 矩形的Y原點
width- 矩形寬度
height- 矩形高度
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_render_frame_gap ----

gtk_render_frame_gap
在由 （x、y、寬度、高度） 定義的矩形周圍呈現一個框架，並在一側留下一個間隙。xy0_gap和xy1_gap將表示GTK_POS_TOP和GTK_POS_BOTTOM間隙邊的 X 座標，forGTK_POS_LEFT和GTK_POS_RIGHT表示 Y 座標。具有間隙的幀的典型渲染：
語法
參數
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原點
y- 矩形的Y原點
width- 矩形寬度
height- 矩形高度
gap_side- 間隙所在的一側
xy0_gap- 間隙的初始座標（X或Y，取決於gap_side）
xy1_gap- 間隙的結束座標（X或Y，取決於gap_side）
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_render_handle ----

gtk_render_handle
在矩形中呈現一個控點（如 和 中的調整大小夾點），該控點由 x、y、寬度、高度確定。為平移類和夾點類呈現的控制碼：GtkHandleBoxGtkPanedGtkWindow
語法
參數
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原點
y- 矩形的Y原點
width- 矩形寬度
height- 矩形高度
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_render_icon ----

gtk_render_icon
以 pixbuf 格式呈現圖示，位於指定的 x 和 y 座標處。
語法
參數
context- 一GtkStyleContext
cr- 一cairo_t
pixbuf- 一個包含要繪製的圖示GdkPixbuf
x- X 位置為圖元
y- Y 位置為圖元
自 3.2 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_render_icon_pixbuf ----

gtk_render_icon_pixbuf
gtk_render_icon_pixbuf自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_icon_theme_load_icon（）。以給定大小呈現源指定的圖示，並以 pixbuf 的形式返回結果。
語法
參數
context- 一GtkStyleContext
source- 指定要渲染的圖示GtkIconSource
size- 渲染圖示的大小。大小 （GtkIconSize） -1 表示以源的大小呈現，並且不縮放。[鍵入整型]
返回
包含渲染圖示的新創建。[轉移完整]GdkPixbuf
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_render_icon_surface ----

gtk_render_icon_surface
在曲面中以指定的 x 和 y 座標呈現圖示。
語法
參數
context- 一GtkStyleContext
cr- 一cairo_t
surface- 一個包含要繪製的圖示cairo_surface_t
x- 圖示的X位置
y- Y 位置為 incon
自 3.10 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_render_insertion_cursor ----

gtk_render_insertion_cursor
在 cr 上繪製一個文本插入符號，位於指定的佈局索引處。
語法
參數
context- 一GtkStyleContext
cr- 一cairo_t
x- X起源
y- Y起源
layout- 文本PangoLayout
index- 索引PangoLayout
direction- 文本PangoDirection
自 3.
另請參見
GtkStyleContext


------------ KeyGTK3gtk_render_layout ----

gtk_render_layout
在座標 x， y 上渲染佈局
語法
參數
context- 一GtkStyleContext
cr- 一cairo_t
x- X起源
y- Y起源
layout- 要渲染PangoLayout
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_render_line ----

gtk_render_line
呈現從 （x0， y0） 到 （x1， y1） 的線條。
語法
參數
context- 一GtkStyleContext
cr- 一cairo_t
x0- X 座標表示直線的原點
y0- Y 座標表示直線的原點
x1- X座標表示線的末端
y1- Y 座標表示線的末端
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_render_option ----

gtk_render_option
呈現選項標記（如 a 中所示），GTK_STATE_FLAG_ACTIVEstate將確定選項是打開還是關閉，andGTK_STATE_FLAG_INCONSISTENT是否應將其標記為未定義。典型的選項標記呈現：GtkRadioButton
語法
參數
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原點
y- 矩形的Y原點
width- 矩形寬度
height- 矩形高度
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_render_slider ----

gtk_render_slider
在由 x、y、寬度、高度定義的矩形中呈現滑塊（如 中所示）。方向定義滑塊是垂直還是水準。典型的滑塊渲染：GtkScale
語法
參數
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原點
y- 矩形的Y原點
width- 矩形寬度
height- 矩形高度
orientation- 滑塊的方向
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_revealer_get_child_revealed ----

gtk_revealer_get_child_revealed
返回子項是否完全顯示，即完成到顯示狀態的過渡。
語法
參數
revealer- 一GtkRevealer
返回
如果孩子完全顯露出來，則為 TRUE
自 3.10 起
另請參見
GtkRevealer


------------ KeyGTK3gtk_revealer_get_reveal_child ----

gtk_revealer_get_reveal_child
返回子項當前是否顯示。請參見gtk_revealer_set_reveal_child（）。一旦過渡到顯示狀態開始，此函數將立即返回 TRUE。要瞭解孩子是否完全顯露出來（即過渡已完成），請使用gtk_revealer_get_child_revealed（）。
語法
參數
revealer- 一GtkRevealer
返回
如果孩子被揭示，則為 true。
自 3.10 起
另請參見
GtkRevealer


------------ KeyGTK3gtk_revealer_get_transition_duration ----

gtk_revealer_get_transition_duration
返回轉換所需的時間量（以毫秒為單位）。
語法
參數
revealer- 一GtkRevealer
返回
過渡持續時間
自 3.10 起
另請參見
GtkRevealer


------------ KeyGTK3gtk_revealer_get_transition_type ----

gtk_revealer_get_transition_type
獲取將用於揭示程式中的過渡的動畫類型。
語法
參數
revealer- 一GtkRevealer
返回
當前轉換類型的揭示符
自 3.10 起
另請參見
GtkRevealer


------------ KeyGTK3gtk_revealer_new ----

gtk_revealer_new
創建新的 .GtkRevealer
返回
新創建的GtkRevealer
自 3.10 起
另請參見
GtkRevealer


------------ KeyGTK3gtk_revealer_set_reveal_child ----

gtk_revealer_set_reveal_child
告訴他們揭露或隱藏它的孩子。過渡將使用當前轉換類型的揭示符進行動畫處理。GtkRevealer
語法
參數
revealer- 一GtkRevealer
reveal_child- 真實地揭示孩子
自 3.10 起
另請參見
GtkRevealer


------------ KeyGTK3gtk_revealer_set_transition_duration ----

gtk_revealer_set_transition_duration
設置過渡將花費的持續時間。
語法
參數
revealer- 一GtkRevealer
duration- 新的持續時間，以毫秒為單位
自 3.10 起
另請參見
GtkRevealer


------------ KeyGTK3gtk_revealer_set_transition_type ----

gtk_revealer_set_transition_type
設置將在揭示程式中用於傳遞的動畫類型。可用類型包括各種淡入淡出和幻燈片。
語法
參數
revealer- 一GtkRevealer
transition- 新的過渡類型
自 3.1 起
另請參見
GtkRevealer


------------ KeyGTK3gtk_rgb_to_hsv ----

gtk_rgb_to_hsv
將顏色從 RGB 空間轉換為 HSV。輸入值必須在 [0.0， 1.0] 範圍內;輸出值將在同一範圍內。
語法
參數
r- 紅色
g- 綠色
b- 藍色
h- 返回色調分量的值。[輸出]
s- 飽和分量的返回值。[輸出]
v- 返回值組件的值。[輸出]
自 2.1 起
另請參見
GtkHSV


------------ KeyGTK3gtk_scale_add_mark ----

gtk_scale_add_mark
在值處添加標記。通過在刻度旁邊繪製刻度線來直觀地指示標記，GTK+使使用者可以輕鬆地將刻度精確定位在標記值處。如果標記不為 NULL，則文本將顯示在刻度線旁邊。要從刻度中刪除標記，請使用gtk_scale_clear_marks（）。
語法
參數
scale- 一GtkScale
value- 放置標記的值必須介於刻度的下限和上限之間？調整
position- 在哪裡畫標記。對於水準比例，GTK_POS_LEFT繪製在比例之上，其他任何內容都繪製在下面。對於垂直比例，GTK_POS_TOP繪製在比例的左側，其他任何內容都繪製在右側。GTK_POS_TOPGTK_POS_LEFT
markup- 要在標記處顯示的文本，使用Pango標記或NULL。[允許-無]
2.16 起
另請參見
GtkScale


------------ KeyGTK3gtk_scale_button_get_adjustment ----

gtk_scale_button_get_adjustment
獲取與 ？ s 刻度關聯的 。有關詳細資訊，請參閱 gtk_range_get_adjustment（）。GtkAdjustmentGtkScaleButton
語法
參數
button- 一GtkScaleButton
返回
與比例關聯的調整。[無轉移]
自 2.12 起
另請參見
GtkScaleButton


------------ KeyGTK3gtk_scale_button_get_minus_button ----

gtk_scale_button_get_minus_button
檢索 的減號按鈕。GtkScaleButton
語法
參數
button- 一GtkScaleButton
返回
的減號按鈕。[無轉移]
自 2.1 起GtkScaleButton
另請參見
GtkScaleButton


------------ KeyGTK3gtk_scale_button_get_plus_button ----

gtk_scale_button_get_plus_button
Retrieves the plus button of the GtkScaleButton.
Syntax
Parameters
button  -  	a GtkScaleButton
Returns
the plus button of the GtkScaleButton. [transfer none]
Since 2.14
See Also
GtkScaleButton


------------ KeyGTK3gtk_scale_button_get_popup ----

gtk_scale_button_get_popup
檢索 的快顯視窗。GtkScaleButton
語法
參數
button- 一GtkScaleButton
返回
的快顯視窗。[無轉移]
自 2.14 起GtkScaleButton
另請參見
GtkScaleButton


------------ KeyGTK3gtk_scale_button_get_value ----

gtk_scale_button_get_value
Gets the current value of the scale button.
Syntax
Parameters
button  -  	a GtkScaleButton
Returns
current value of the scale button
Since 2.12
See Also
GtkScaleButton


------------ KeyGTK3gtk_scale_button_new ----

gtk_scale_button_new
創建一個介於最小值和最大值之間的 、步進和步進。GtkScaleButton
語法
參數
size- 股票圖示大小。[鍵入整型]
min- 刻度的最小值（通常為0）
max- 刻度的最大值（通常為100）
step- 滾輪事件或向上/向下箭頭事件發生時的值的步進（通常為2）
icons- 圖示名稱的 NULL 終止達雷，或者如果要使用 gtk_scale_button_set_icons（） 設置 listlater，則為 NULL。[允許-無][陣列零終止 = 1]
返回
自 2.12 以來的新
品GtkScaleButton
另請參見
GtkScaleButton


------------ KeyGTK3gtk_scale_button_set_adjustment ----

gtk_scale_button_set_adjustment
Sets the GtkAdjustment to be used as a modelfor the GtkScaleButton?s scale.See gtk_range_set_adjustment() for details.
Syntax
Parameters
button  -  	a GtkScaleButton
adjustment  -  	a GtkAdjustment
Since 2.12
See Also
GtkScaleButton


------------ KeyGTK3gtk_scale_button_set_icons ----

gtk_scale_button_set_icons
設置縮放按鈕要使用的圖示。有關詳細資訊，請參閱酒店。?icons?
語法
參數
button- 一GtkScaleButton
icons- 以 NULL 結尾的圖示名稱陣列。[陣列零終止 = 1]
自 2.12 起
另請參見
GtkScaleButton


------------ KeyGTK3gtk_scale_button_set_value ----

gtk_scale_button_set_value
設置刻度的當前值;如果該值超出最小或最大範圍值，則將其夾緊以適合它們。如果值更改，縮放按鈕將發出信號。?value-changed?
語法
參數
button- 一GtkScaleButton
value- 自2.12年以來比例按鈕
的新值
另請參見
GtkScaleButton


------------ KeyGTK3gtk_scale_clear_marks ----

gtk_scale_clear_marks
刪除已使用 gtk_scale_add_mark（） 添加的任何標記。
語法
參數
scale- a
自2.1起GtkScale
另請參見
GtkScale


------------ KeyGTK3gtk_scale_get_digits ----

gtk_scale_get_digits
獲取值中顯示的小數位數。
語法
參數
scale- 一GtkScale
返回
顯示的小數位數
另請參見
GtkScale


------------ KeyGTK3gtk_scale_get_draw_value ----

gtk_scale_get_draw_value
返回當前值是否顯示為滑塊旁邊的字串。
語法
參數
scale- 一GtkScale
返回
當前值是否顯示為字串
另請參見
GtkScale


------------ KeyGTK3gtk_scale_get_has_origin ----

gtk_scale_get_has_origin
返回比例尺是否具有原點。
語法
參數
scale- 一GtkScale
返回
如果比例尺具有原點，則為 TRUE。
自 3.4 起
另請參見
GtkScale


------------ KeyGTK3gtk_scale_get_layout ----

gtk_scale_get_layout
獲取用於顯示比例的 。返回的物件由規模擁有，因此不需要由調用方釋放。PangoLayout
語法
參數
scale- 一GtkScale
返回
對於此刻度，如果屬性為 FALSE，則為 NULL。[無轉移]
2.4 起PangoLayout?draw-value?
另請參見
GtkScale


------------ KeyGTK3gtk_scale_get_layout_offsets ----

gtk_scale_get_layout_offsets
獲取比例尺將繪製比例尺中表示文本的座標。請記住，當使用函數時，您需要使用 PANGO_PIXELS（） 或 從圖元轉換。如果該屬性為 FALSE，則返回值未定義。PangoLayoutPangoLayoutPANGO_SCALE?draw-value?
語法
參數
scale- 一GtkScale
x- 存儲佈局的 X 偏移量的位置，或 NULL。[輸出][允許-無]
y- 存儲佈局的 Y 偏移量或 NULL 的位置。[輸出][允許-無]
2.4 起
另請參見
GtkScale


------------ KeyGTK3gtk_scale_get_value_pos ----

gtk_scale_get_value_pos
Gets the position in which the current value is displayed.
Syntax
Parameters
scale  -  	a GtkScale
Returns
the position in which the current value is displayed
See Also
GtkScale


------------ KeyGTK3gtk_scale_new ----

gtk_scale_new
創建新的 .GtkScale
語法
參數
orientation- 刻度的方向。
adjustment- 設置比例範圍的，或 NULL 創建新的調整。[允許-無]GtkAdjustment
返回
自 3.0 以來的新
品GtkScale
另請參見
GtkScale


------------ KeyGTK3gtk_scale_new_with_range ----

gtk_scale_new_with_range
創建一個具有給定方向的新比例構件，該微件允許使用者使用遞增步驟輸入介於最小值和最大值（包括最小值和最大值）之間的數位。步驟必須為非零;它是使用方向鍵調整比例值時滑塊移動的距離。請注意，如果階躍為 10 的冪，則推導精度的方式效果最佳。如果生成的精度不適合您需要的精度，請使用 gtk_scale_set_digits（） 進行更正。
語法
參數
orientation- 刻度的方向。
min- 最小值
max- 最大值
step- 步長增量（刻度大小）與鍵盤快速鍵一起使用
返回
自 3.0 以來的新
品GtkScale
另請參見
GtkScale


------------ KeyGTK3gtk_scale_set_digits ----

gtk_scale_set_digits
設置值中顯示的小數位數。還會導致調整的值四捨五入到此位數，因此檢索到的值與用戶看到的值匹配。
語法
參數
scale- 一GtkScale
digits- 顯示小數位數，例如使用 1 顯示 1.0，使用 2 顯示 1.00 等
另請參見
GtkScale


------------ KeyGTK3gtk_scale_set_draw_value ----

gtk_scale_set_draw_value
指定當前值是否顯示為滑塊旁邊的字串。
語法
參數
scale- 一GtkScale
draw_value- TRUE 繪製值
另請參見
GtkScale


------------ KeyGTK3gtk_scale_set_has_origin ----

gtk_scale_set_has_origin
如果has_origin設置為 TRUE（預設值），則比例將突出顯示比例尺原點（底部或左側）與當前值之間的比例部分。
語法
參數
scale- 一GtkScale
has_origin- 如果比例尺起源於
3.4
，則為 TRUE
另請參見
GtkScale


------------ KeyGTK3gtk_scale_set_value_pos ----

gtk_scale_set_value_pos
Sets the position in which the current value is displayed.
Syntax
Parameters
scale  -  	a GtkScale
pos  -  	the position in which the current value is displayed
See Also
GtkScale


------------ KeyGTK3gtk_scrollable_get_hadjustment ----

gtk_scrollable_get_hadjustment
Retrieves the GtkAdjustment used for horizontal scrolling.
Syntax
Parameters
scrollable  -  	a GtkScrollable
Returns
horizontal GtkAdjustment. [transfer none]
Since 3.0
See Also
GtkScrollable


------------ KeyGTK3gtk_scrollable_get_hscroll_policy ----

gtk_scrollable_get_hscroll_policy
Gets the horizontal GtkScrollablePolicy.
Syntax
Parameters
scrollable  -  	a GtkScrollable
Returns
The horizontal GtkScrollablePolicy.
Since 3.0
See Also
GtkScrollable


------------ KeyGTK3gtk_scrollable_get_vadjustment ----

gtk_scrollable_get_vadjustment
檢索用於垂直捲動的 。GtkAdjustment
語法
參數
scrollable- 一GtkScrollable
返回
垂直。[無轉移]
自 3.0 起GtkAdjustment
另請參見
GtkScrollable


------------ KeyGTK3gtk_scrollable_get_vscroll_policy ----

gtk_scrollable_get_vscroll_policy
Gets the vertical GtkScrollablePolicy.
Syntax
Parameters
scrollable  -  	a GtkScrollable
Returns
The vertical GtkScrollablePolicy.
Since 3.0
See Also
GtkScrollable


------------ KeyGTK3gtk_scrollable_set_hadjustment ----

gtk_scrollable_set_hadjustment
設置 的水準調整。GtkScrollable
語法
參數
scrollable- 一GtkScrollable
hadjustment- 一個.[允許-無]
自 3.0 起GtkAdjustment
另請參見
GtkScrollable


------------ KeyGTK3gtk_scrollable_set_hscroll_policy ----

gtk_scrollable_set_hscroll_policy
設置以確定卷軸滾動是從最小寬度以下開始，還是應低於自然寬度。GtkScrollablePolicy
語法
參數
scrollable- 一GtkScrollable
policy- 水準
自3.0GtkScrollablePolicy
另請參見
GtkScrollable


------------ KeyGTK3gtk_scrollable_set_vadjustment ----

gtk_scrollable_set_vadjustment
設置 的垂直調整。GtkScrollable
語法
參數
scrollable- 一GtkScrollable
vadjustment- 一個.[允許-無]
自 3.0 起GtkAdjustment
另請參見
GtkScrollable


------------ KeyGTK3gtk_scrollable_set_vscroll_policy ----

gtk_scrollable_set_vscroll_policy
設置 以確定垂直捲動是從低於最小高度開始還是低於自然高度。GtkScrollablePolicy
語法
參數
scrollable- 一GtkScrollable
policy- 垂直
自3。GtkScrollablePolicy
另請參見
GtkScrollable


------------ KeyGTK3gtk_scrollbar_new ----

gtk_scrollbar_new
創建具有給定方向的新捲軸。
語法
參數
orientation- 捲軸的方向。
adjustment- 要使用的，或 NULL 創建新的調整。[允許-無]GtkAdjustment
返回
新的 .
自 3.GtkScrollbar
另請參見
GtkScrollbar


------------ KeyGTK3gtk_scrolled_window_add_with_viewport ----

gtk_scrolled_window_add_with_viewport
gtk_scrolled_window_add_with_viewport自版本 3.8 以來已被棄用，並且不應在新編寫的 code.gtk_container_add（） 中使用，如果子代不實現，現在將自動 adda。用於添加沒有本機滾動功能的子項。這只是一個便利功能;它等效於將不可滾動的子級添加到視區，然後將視口添加到滾動的視窗。如果子項具有本機滾動，則usegtk_container_add（） 而不是此函數。視口通過移動其 來滾動子項，並將子項的大小取為其 toplevel 的大小。對於大多數支持本機滾動的小部件來說，這將是非常錯誤的;例如，如果您添加一個小部件（例如帶有視口）的小部件，則整個小部件將滾動，包括列標題。因此，具有本機滾動支援的小部件不應與代理一起使用。如果小部件實現了介面，則它支援本機滾動。GtkViewportGtkScrollableGdkWindowGdkWindowGtkTreeViewGtkViewportGtkScrollable
語法
參數
scrolled_window- 一GtkScrolledWindow
child- 您要滾動的小部件
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_capture_button_press ----

gtk_scrolled_window_get_capture_button_press
返回在動力學滾動期間是否捕獲按鈕按下。請參見gtk_scrolled_window_set_capture_button_press（）。
語法
參數
scrolled_window- 一GtkScrolledWindow
返回
如果在動力學滾動期間捕獲按鈕按下，則為 TRUE
，因為 3.
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_hadjustment ----

gtk_scrolled_window_get_hadjustment
返回水準捲軸的調整，用於將地平線捲軸連接到子微件的水準滾動功能。
語法
參數
scrolled_window- 一GtkScrolledWindow
返回
水準 .[無轉移]GtkAdjustment
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_hscrollbar ----

gtk_scrolled_window_get_hscrollbar
返回scrolled_window的水準捲軸。
語法
參數
scrolled_window- 一GtkScrolledWindow
返回
滾動視窗的水準捲軸，如果沒有滾動視窗，則為 NULL。[無轉移]
自 2.8 起
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_kinetic_scrolling ----

gtk_scrolled_window_get_kinetic_scrolling
返回指定的動態滾動行為。
語法
參數
scrolled_window- 一GtkScrolledWindow
返回
滾動行為標誌。
自 3.4 起
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_min_content_height ----

gtk_scrolled_window_get_min_content_height
獲取 scrolled_window 的最小內容高度，如果未設置，則獲取 -1。
語法
參數
scrolled_window- 一GtkScrolledWindow
返回
最小內容高度
自 3.0 起
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_min_content_width ----

gtk_scrolled_window_get_min_content_width
獲取 scrolled_window 的最小內容寬度，如果未設置，則獲取 -1。
語法
參數
scrolled_window- 一GtkScrolledWindow
返回
最小內容寬度
自 3.0 起
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_placement ----

gtk_scrolled_window_get_placement
獲取內容相對於滾動視窗的捲軸的位置。請參見gtk_scrolled_window_set_placement（）。
語法
參數
scrolled_window- 一GtkScrolledWindow
返回
當前放置值。另請參見gtk_scrolled_window_set_placement（） andgtk_scrolled_window_unset_placement（）。
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_policy ----

gtk_scrolled_window_get_policy
檢索水準和垂直捲動條的當前策略值。請參見gtk_scrolled_window_set_policy（）。
語法
參數
scrolled_window- 一GtkScrolledWindow
hscrollbar_policy- 存儲水準捲軸策略的位置，或 NULL。[輸出][允許-無]
vscrollbar_policy- 存儲垂直捲動條策略的位置，或 NULL。[輸出][允許-無]
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_shadow_type ----

gtk_scrolled_window_get_shadow_type
獲取滾動視窗的陰影類型。請參見 gtk_scrolled_window_set_shadow_type（）。
語法
參數
scrolled_window- 一GtkScrolledWindow
返回
當前陰影類型
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_vadjustment ----

gtk_scrolled_window_get_vadjustment
返回垂直捲動條的調整，用於將垂直捲動條連接到子微件的垂直捲動功能。
語法
參數
scrolled_window- 一GtkScrolledWindow
返回
垂直 .[無轉移]GtkAdjustment
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_vscrollbar ----

gtk_scrolled_window_get_vscrollbar
返回scrolled_window的垂直捲動條。
語法
參數
scrolled_window- 一GtkScrolledWindow
返回
滾動視窗的垂直捲動條，如果沒有滾動視窗，則為 NULL。[無轉移]
自 2.8 起
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_new ----

gtk_scrolled_window_new
創建新的滾動視窗。這兩個參數是滾動視窗的調整;這些將與捲軸和子小部件共用，以使條與子小部件保持同步。通常，您希望為調整傳遞 NULL，這將導致滾動視窗為您創建它們。
語法
參數
hadjustment- 水準調整。[允許-無]
vadjustment- 垂直調整。[允許-無]
返回
新的滾動視窗
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_capture_button_press ----

gtk_scrolled_window_set_capture_button_press
改變scrolled_window的行為。到可能開始動態滾動的初始事件。當capture_button_pressis設置為 TRUE 時，該事件將由滾動視窗捕獲，如果該事件旨在轉到子構件，則稍後會重播該事件。如果任何子小部件在 上執行不可逆操作，則應啟用此選項。如果他們不這樣做，並且處理其他處理，最好將capture_button_press設置為FALSE。僅當啟用了動態滾動時，此設置才會起作用。?button-press-event??grab-broken-event?
語法
參數
scrolled_window- 一GtkScrolledWindow
capture_button_press- TRUE 自 3.4
起捕獲按鈕按下
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_hadjustment ----

gtk_scrolled_window_set_hadjustment
設置水準捲軸的 。GtkAdjustment
語法
參數
scrolled_window- 一GtkScrolledWindow
hadjustment- 水準滾動調整
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_kinetic_scrolling ----

gtk_scrolled_window_set_kinetic_scrolling
打開或關閉動態滾動。Kinetic 滾動僅適用於具有sourceGDK_SOURCE_TOUCHSCREEN的設備。
語法
參數
scrolled_window- 一GtkScrolledWindow
kinetic_scrolling- TRUE 啟用動力學滾動，
從 3.4 開始
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_min_content_height ----

gtk_scrolled_window_set_min_content_height
設置scrolled_window應保持可見的最小高度。請注意，這可以並且（通常）小於內容的最小大小。
語法
參數
scrolled_window- 一GtkScrolledWindow
height- 最小內容高度
自 3.0 起
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_min_content_width ----

gtk_scrolled_window_set_min_content_width
設置scrolled_window應保持可見的最小寬度。請注意，這可以並且（通常）小於內容的最小大小。
語法
參數
scrolled_window- 一GtkScrolledWindow
width- 自 3.0 以來的最小內容寬度
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_placement ----

gtk_scrolled_window_set_placement
設置內容相對於滾動視窗的捲軸的位置。預設值為 GTK_CORNER_TOP_LEFT，表示子項位於左上角，捲軸位於下方和右側。中的其他值為 GTK_CORNER_TOP_RIGHT，GTK_CORNER_BOTTOM_LEFT 和 GTK_CORNER_BOTTOM_RIGHT。另請參見gtk_scrolled_window_get_placement（） andgtk_scrolled_window_unset_placement（）。GtkCornerType
語法
參數
scrolled_window- 一GtkScrolledWindow
window_placement- 子窗口的位置
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_policy ----

gtk_scrolled_window_set_policy
設置水準和垂直捲動條的捲軸策略。該策略確定捲軸應何時顯示;它是枚舉的值。如果GTK_POLICY_ALWAYS，則滾動棒始終存在;如果GTK_POLICY_NEVER，則捲軸不存在;如果GTK_POLICY_AUTOMATIC，則捲軸僅在需要時存在（即，如果欄的滑塊部分小於槽 - 顯示大於頁面大小）。GtkPolicyType
語法
參數
scrolled_window- 一GtkScrolledWindow
hscrollbar_policy- 水準條政策
vscrollbar_policy- 分隔號政策
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_shadow_type ----

gtk_scrolled_window_set_shadow_type
更改在內容ofscrolled_window周圍繪製的陰影類型。
語法
參數
scrolled_window- 一GtkScrolledWindow
type- 一種陰影，以繪製滾動的視窗內容
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_vadjustment ----

gtk_scrolled_window_set_vadjustment
設置垂直捲動條的 。GtkAdjustment
語法
參數
scrolled_window- 一GtkScrolledWindow
vadjustment- 垂直捲動調整
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_unset_placement ----

gtk_scrolled_window_unset_placement
取消設置內容相對於捲軸的位置對於滾動視窗。如果沒有為滾動視窗設置視窗位置，則預設為GTK_CORNER_TOP_LEFT。另請參見gtk_scrolled_window_set_placement（） andgtk_scrolled_window_get_placement（）。
語法
參數
scrolled_window- a
自2.10起GtkScrolledWindow
另請參見
GtkScrolledWindow


------------ KeyGTK3gtk_search_bar_connect_entry ----

gtk_search_bar_connect_entry
連接作為要在此搜索欄中使用的小部件傳遞的小部件。該條目應為搜索欄的後代。僅當條目不是搜索欄的直接子項時，才需要這樣做（如我們的主要示例所示）。GtkEntry
語法
參數
bar- 一GtkSearchBar
entry- a
自3.10起GtkEntry
另請參見
GtkSearchBar


------------ KeyGTK3gtk_search_bar_get_search_mode ----

gtk_search_bar_get_search_mode
返回搜索模式是打開還是關閉。
語法
參數
bar- 一GtkSearchBar
返回
搜索模式是否自 3.10 起處於打開狀態
另請參見
GtkSearchBar


------------ KeyGTK3gtk_search_bar_get_show_close_button ----

gtk_search_bar_get_show_close_button
返回是否顯示關閉按鈕。
語法
參數
bar- 一GtkSearchBar
返回
自 3.10 起是否顯示
關閉按鈕
另請參見
GtkSearchBar


------------ KeyGTK3gtk_search_bar_handle_event ----

gtk_search_bar_handle_event
當包含搜索欄的頂級窗口收到關鍵事件時，應調用此函數。如果鍵事件由搜索欄處理，則將顯示該欄，用輸入的文本填充的條目，並返回GDK_EVENT_STOPwill。調用方應確保事件不會進一步傳播。如果沒有條目連接到搜索欄，usinggtk_search_bar_connect_entry（），則此函數將立即返回並顯示警告。
在按鍵時顯示搜索欄12345678910111213[/語法] [語法]靜態gbooleanon_key_press_event （GtkWidget *widget， GdkEvent *event， gpointer user_data）{ GtkSearchBar *bar = GTK_SEARCH_BAR （user_data）;返回gtk_search_bar_handle_event （bar， event）;}g_signal_connect（視窗、“按鍵事件”、G_CALLBACK（on_key_press_event）、search_bar）;[/語法]
語法
參數
bar- 一GtkSearchBar
event- 一個包含按鍵事件GdkEvent
返回
GDK_EVENT_STOP如果按鍵事件導致在搜索條目中輸入文本（並在必要時顯示搜索欄），否則GDK_EVENT_PROPAGATE。
自 3.1 起
另請參見
GtkSearchBar


------------ KeyGTK3gtk_search_bar_new ----

gtk_search_bar_new
創建一個 .您需要告訴它哪個小部件將成為您的文本輸入usinggtk_search_bar_connect_entry（）。GtkSearchBar
返回
自 3.10 以來的新
品GtkSearchBar
另請參見
GtkSearchBar


------------ KeyGTK3gtk_search_bar_set_search_mode ----

gtk_search_bar_set_search_mode
打開或關閉搜索模式。
語法
參數
bar- 一GtkSearchBar
search_mode- 自3.10以來搜索模式
的新狀態
另請參見
GtkSearchBar


------------ KeyGTK3gtk_search_bar_set_show_close_button ----

gtk_search_bar_set_show_close_button
顯示或隱藏關閉按鈕。應用程式已準備好具有 “搜索？切換按鈕不應在其搜索欄中顯示關閉按鈕，因為它複製了切換按鈕的作用。
語法
參數
bar- 一GtkSearchBar
visible- 自3.10
以來是否顯示
關閉按鈕
另請參見
GtkSearchBar


------------ KeyGTK3gtk_search_entry_new ----

gtk_search_entry_new
創建一個 ，當搜索欄位為空時，將帶有查找圖示，當搜索欄位為空時，將創建一個清晰圖示。GtkSearchEntry
返回
一個新的
自 3.GtkSearchEntry
另請參見
GtkSearchEntry


------------ KeyGTK3gtk_selection_add_target ----

gtk_selection_add_target
將指定目標追加到給定構件和選擇的受支援目標清單中。
語法
參數
widget- 一GtkWidget
selection- 選擇
target- 要添加的目標。
info- 將傳遞回應用程式的不帶正負號的整數。
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_add_targets ----

gtk_selection_add_targets
將目標表預置到給定構件和選擇的受支援目標清單中。
語法
參數
widget- 一GtkWidget
selection- 選擇
targets- 要添加的目標表。 [陣列長度 = ntargets]
ntargets- 目標中的條目數
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_clear_targets ----

gtk_selection_clear_targets
刪除為小關節的給定選擇註冊的所有目標。
語法
參數
widget- 一GtkWidget
selection- 代表選擇的原子
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_convert ----

gtk_selection_convert
請求所選內容。收到時，“選擇已收到”將生成信號。
語法
參數
widget- 充當請求者的小部件
selection- 獲得哪個選擇
target- 所需資訊的形式（例如，字串）
time_- 請求時間（通常是觸發事件的時間）在緊急情況下，您可以使用GDK_CURRENT_TIME
返回
如果請求成功，則為 TRUE。如果我們不能處理請求，則為 FALSE。（例如，已經有一個請求正在處理中，這是小部件）。
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_copy ----

gtk_selection_data_copy
創建 及其資料的副本。GtkSelectionData
語法
參數
data- 指向 .GtkSelectionData
返回
指向數據副本的指標。
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_free ----

gtk_selection_data_free
釋放返回的fromgtk_selection_data_copy（）。GtkSelectionData
語法
參數
data- 指向 .[br \=“”GtkSelectionData
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_data ----

gtk_selection_data_get_data
檢索所選內容的原始資料。
語法
參數
selection_data- 指向 .GtkSelectionData
返回
所選內容的原始資料。
自 2.14 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_data_type ----

gtk_selection_data_get_data_type
檢索所選內容的資料類型。
語法
參數
selection_data- 指向 .GtkSelectionData
返回
所選內容的資料類型。[無轉移]
自 2.14 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_data_with_length ----

gtk_selection_data_get_data_with_length
檢索所選內容的原始資料及其長度。
語法
參數
selection_data- 指向 .GtkSelectionData
length- 資料段長度的返回位置。[輸出]
返回
所選內容的原始資料。[陣列長度 = 長度]
自 3.0 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_display ----

gtk_selection_data_get_display
檢索所選內容的顯示。
語法
參數
selection_data- 指向 .GtkSelectionData
返回
所選內容的顯示。[無轉移]
自 2.14 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_format ----

gtk_selection_data_get_format
檢索所選內容的格式。
語法
參數
selection_data- 指向 .GtkSelectionData
返回
所選內容的格式。
自 2.14 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_length ----

gtk_selection_data_get_length
檢索所選內容的原始資料的長度。
語法
參數
selection_data- 指向 .GtkSelectionData
返回
所選內容的資料長度。
自 2.14 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_pixbuf ----

gtk_selection_data_get_pixbuf
獲取選擇資料的內容作為 .GdkPixbuf
語法
參數
selection_data- 一GtkSelectionData
返回
如果選擇資料包含可識別的圖像類型，並且可以將其轉換為 ，則返回新分配的 pixbuf，否則為 NULL。如果結果為非 NULL，則必須使用 g_object_unref（） 將其釋放。[轉移完整]
自 2.6 起GdkPixbuf
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_selection ----

gtk_selection_data_get_selection
檢索所選選擇的資料。GdkAtom
語法
參數
selection_data- 指向 .GtkSelectionData
返回
選擇資料的選擇。[無轉移]
2.16 起GdkAtom
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_target ----

gtk_selection_data_get_target
檢索所選內容的目標。
語法
參數
selection_data- 指向 .GtkSelectionData
返回
所選內容的目標。[無轉移]
自 2.14 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_targets ----

gtk_selection_data_get_targets
獲取selection_data的內容作為目標陣列。這可用於解釋獲取始終提供的任何選擇的標準 TARGET 目標的結果。
語法
參數
selection_data- 一個物件GtkSelectionData
targets- 存儲目標陣列的位置。存儲在這裡的結果必須使用 g_free（） 進行釋放。[輸出][陣列長度 = n_atoms][轉移容器]
n_atoms- 位置存儲目標中的專案數量。
返回
如果selection_datacontains有效的目標陣列，則為 TRUE，否則為 FALSE。
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_text ----

gtk_selection_data_get_text
以 UTF-8 字串的形式獲取選擇資料的內容。
語法
參數
selection_data- 一GtkSelectionData
返回
如果選擇資料包含已識別的文本類型，並且可以將其轉換為 UTF-8，即包含已轉換文本的新分配字串，否則為 NULL。如果結果為非 NULL，則必須使用 g_free（） 將其釋放。[類型 utf8]
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_uris ----

gtk_selection_data_get_uris
以 URI 陣列的形式獲取選擇資料的內容。
語法
參數
selection_data- 一GtkSelectionData
返回
如果選擇資料包含 URI 清單，則為包含 URI 的新分配的 NULL 終止字串陣列，否則為 NULL。如果結果為non-NULL，則必須使用g_strfreev（）將其釋放。[陣列零終止 = 1][元素型 utf8][轉移完整]
自 2.6 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_set ----

gtk_selection_data_set
將新資料存儲到物件中。應僅從選擇處理常式回檔調用。零終止存儲的資料。GtkSelectionData
語法
參數
selection_data- 指向 .GtkSelectionData
type- 選擇資料的類型
format- 格式（單位中的位元數）
data- 指向資料的指標（將被複製）。[陣列長度 = 長度]
length- 數據長度
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_set_pixbuf ----

gtk_selection_data_set_pixbuf
設置從 pixbuf 中選擇的內容，圖元符號將轉換為byselection_data>目標確定的形式。GdkPixbuf
語法
參數
selection_data- 一GtkSelectionData
pixbuf- 一GdkPixbuf
返回
如果選擇已成功設置，則為 TRUE，否則為 FALSE。
自 2.6 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_set_text ----

gtk_selection_data_set_text
設置從 UTF-8 編碼字串中選擇的內容。該字串將轉換為byselection_data>目標確定的形式。
語法
參數
selection_data- 一GtkSelectionData
str- 一個 UTF-8 字串
len- str 的長度，如果 stris nul 終止，則為 -1。
返回
如果選擇已成功設置，則為 TRUE，否則為 FALSE。
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_set_uris ----

gtk_selection_data_set_uris
設置從 URI 清單中選擇的內容。字串將轉換為byselection_data>目標確定的形式。
語法
參數
selection_data- 一GtkSelectionData
uris- 一個以 NULL 結尾的字串陣列，用於保存 URI。[陣列零終止 = 1]
返回
如果選擇已成功設置，則為 TRUE，否則為 FALSE。
自 2.6 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_targets_include_image ----

gtk_selection_data_targets_include_image
給定一個包含目標清單的物件，確定目標中的任何目標是否可用於提供 .GtkSelectionDataGdkPixbuf
語法
參數
selection_data- 一個物件GtkSelectionData
writable- 是否只接受GTK +知道如何將pixbuf轉換為格式的目標
返回
如果selection_dataholds目標清單，並且包含適合圖像的目標，則為 TRUE，否則為 FALSE。
自 2.6 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_targets_include_rich_text ----

gtk_selection_data_targets_include_rich_text
給定一個包含目標清單的物件，確定目標中的任何目標是否可用于提供富文本。GtkSelectionData
語法
參數
selection_data- 一個物件GtkSelectionData
buffer- 一GtkTextBuffer
返回
如果selection_dataholds目標清單，並且包含適合富文本的目標，則為 TRUE，否則為 FALSE。
自 2.10 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_targets_include_text ----

gtk_selection_data_targets_include_text
給定一個包含目標清單的物件，確定目標中的任何目標是否可用于提供文本。GtkSelectionData
語法
參數
selection_data- 一個物件GtkSelectionData
返回
如果selection_dataholds目標清單，並且包含適合文本的目標，則為 TRUE，否則為 FALSE。
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_data_targets_include_uri ----

gtk_selection_data_targets_include_uri
給定一個包含目標清單的物件，確定目標中的任何目標是否可以用於提供清單或URI。GtkSelectionData
語法
參數
selection_data- 一個物件GtkSelectionData
返回
如果selection_dataholds目標清單，並且包含適合 URI 清單的目標，則為 TRUE，否則為 FALSE。
自 2.10 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_owner_set ----

gtk_selection_owner_set
聲明特定小部件的給定選擇的所有權，或者，如果小部件為 NULL，則釋放所選內容的所有權。
語法
參數
widget- a 或 NULL。[允許-無]GtkWidget
selection- 一個實習原子，代表要聲明的選擇
time_- 聲明選擇的時間戳記
返回
如果操作成功，則為 TRUE
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_owner_set_for_display ----

gtk_selection_owner_set_for_display
聲明特定小部件的給定選擇的所有權，或者，如果小部件為 NULL，則釋放所選內容的所有權。
語法
參數
display- 設置選擇的位置GdkDisplay
widget- 新的選擇所有者 （a） 或 NULL。[允許-無]GtkWidget
selection- 一個實習原子，代表要聲明的選擇。
time_- 聲明選擇的時間戳記
返回
如果操作自 2.2 起成功，
則為 TRUE
另請參見
gtk3-Selections


------------ KeyGTK3gtk_selection_remove_all ----

gtk_selection_remove_all
刪除所有處理常式並取消設置構件所有選擇的所有權。在小部件被破壞時調用。應用程式通常不會調用此函數。
語法
參數
widget- 一GtkWidget
另請參見
gtk3-Selections


------------ KeyGTK3gtk_separator_menu_item_new ----

gtk_separator_menu_item_new
創建新的 .GtkSeparatorMenuItem
返回
一個新的GtkSeparatorMenuItem
另請參見
GtkSeparatorMenuItem


------------ KeyGTK3gtk_separator_new ----

gtk_separator_new
創建具有給定方向的 new。GtkSeparator
語法
參數
orientation- 分隔符號的方向。
返回
一個新的.
自 3.GtkSeparator
另請參見
GtkSeparator


------------ KeyGTK3gtk_separator_tool_item_get_draw ----

gtk_separator_tool_item_get_draw
返回項是繪製為線條還是僅為空。請參見gtk_separator_tool_item_set_draw（）。
語法
參數
item- 一GtkSeparatorToolItem
返回
如果項繪製為一條線，則為 TRUE，或者只是空白。
自 2.
另請參見
GtkSeparatorToolItem


------------ KeyGTK3gtk_separator_tool_item_new ----

gtk_separator_tool_item_new
創建新的GtkSeparatorToolItem
返回
新的
自 2.4 以來GtkSeparatorToolItem
另請參見
GtkSeparatorToolItem


------------ KeyGTK3gtk_separator_tool_item_set_draw ----

gtk_separator_tool_item_set_draw
專案是繪製為垂直線，還是僅顯示為空白。將此項與gtk_tool_item_set_expand（） 一起設置為 FALSE 對於創建強制將後續項置於工具列末尾的項非常有用。
語法
參數
item- 一GtkSeparatorToolItem
draw- 專案是否自 2.4 起繪製為垂直線
另請參見
GtkSeparatorToolItem


------------ KeyGTK3gtk_settings_get_default ----

gtk_settings_get_default
獲取預設 GDK 螢幕的物件，如有必要，請創建它。請參見gtk_settings_get_for_screen（）。GtkSettings
返回
對象。如果沒有預設螢幕，則返回 NULL。[無轉移]GtkSettings
另請參見
GtkSettings


------------ KeyGTK3gtk_settings_get_for_screen ----

gtk_settings_get_for_screen
獲取螢幕的物件，如有必要，請創建它。GtkSettings
語法
參數
screen- 一個.GdkScreen
返回
對象。[無轉移]
自 2.2 起GtkSettings
另請參見
GtkSettings


------------ KeyGTK3gtk_settings_install_property_parser ----

gtk_settings_install_property_parser
璿硶
鍙傛暟
parser- .[鑼冨洿璋冪敤]
鍙﹁鍙傝
GtkSettings


------------ KeyGTK3gtk_settings_set_double_property ----

gtk_settings_set_double_property
[語法]voidgtk_settings_set_double_property （ *settings， const *name， v_double， const *origin）;[/語法GtkSettingsgchargdoublegchar
另請參見
GtkSettings


------------ KeyGTK3gtk_show_about_dialog ----

gtk_show_about_dialog
這是一個方便的函數，用於顯示應用程式的關於框。構造的對話方塊與父窗口相關聯，並重用於將來調用此函數。
語法
參數
parent- 暫時性父級，或 NULL 表示無。[允許-無]
first_property_name- 第一個屬性的名稱
...- 第一個屬性的值，後跟更多屬性，NULL 終止自
2。
另請參見
GtkAboutDialog


------------ KeyGTK3gtk_show_uri ----

gtk_show_uri
這是一個方便的函數，用於啟動預設應用程式以顯示 uri。uri必須是GIO理解的形式（即，您需要安裝gvfs來獲得對uri方案的支持，例如 http://or ftp://，因為只有本地檔由GIO本身處理）。時間戳記的典型示例 arefile:///home/gnome/pict.jpghttp://www.gnome.orgmailto:me@gnome.orgIdeally 取自觸發 gtk_show_uri（） 調用的事件。如果時間戳記未知，您可以takeGDK_CURRENT_TIME。
語法
參數
screen- 螢幕以顯示預設螢幕的uri on或NULL。[允許-無]
uri- 要顯示的 uri
timestamp- 一個時間戳記，以防止焦點竊取
error- 在出現錯誤時返回的 aGError
返回
成功時為真，錯誤時為 FALSE
自 2.1 起
另請參見
gtk3-Filesystem-utilities


------------ KeyGTK3gtk_size_group_add_widget ----

gtk_size_group_add_widget
將小部件添加到 .將來，微件的申請將被確定為其申請的最大值和大小組中其他微件的申請。這是水準、垂直還是雙向應用取決於大小組的模式。請參見gtk_size_group_set_mode（）。當微件被銷毀或不再引用到其他位置時，它將從大小組中刪除。GtkSizeGroup
語法
參數
size_group- 一GtkSizeGroup
widget- 要添加GtkWidget
另請參見
GtkSizeGroup


------------ KeyGTK3gtk_size_group_get_ignore_hidden ----

gtk_size_group_get_ignore_hidden
如果在計算大小時忽略不可見的小部件，則返回。
語法
參數
size_group- 一GtkSizeGroup
返回
如果忽略不可見的小部件，則為 TRUE。
自 2.8 起
另請參見
GtkSizeGroup


------------ KeyGTK3gtk_size_group_get_mode ----

gtk_size_group_get_mode
獲取大小組的當前模式。請參見gtk_size_group_set_mode（）。
語法
參數
size_group- 一GtkSizeGroup
返回
大小組的當前模式。
另請參見
GtkSizeGroup


------------ KeyGTK3gtk_size_group_get_widgets ----

gtk_size_group_get_widgets
返回與size_group關聯的小部件的列表。
語法
參數
size_group- 一GtkSizeGroup
返回
一個小道。該列表歸 GTK+ 所有，不應修改。[element-type GtkWidget][無轉移]
自 2.1 起GSList
另請參見
GtkSizeGroup


------------ KeyGTK3gtk_size_group_new ----

gtk_size_group_new
創建一個新的 .GtkSizeGroup
語法
參數
mode- 新大小組的模式。
返回
新創建的GtkSizeGroup
另請參見
GtkSizeGroup


------------ KeyGTK3gtk_size_group_remove_widget ----

gtk_size_group_remove_widget
從 中刪除 小部件。GtkSizeGroup
語法
參數
size_group- 一GtkSizeGroup
widget- 刪除GtkWidget
另請參見
GtkSizeGroup


------------ KeyGTK3gtk_size_group_set_ignore_hidden ----

gtk_size_group_set_ignore_hidden
設置在計算大小時是否應忽略未映射的小部件。
語法
參數
size_group- 一GtkSizeGroup
ignore_hidden- 在計算大小
時是否應忽略未映射的小部件 自2.8
另請參見
GtkSizeGroup


------------ KeyGTK3gtk_size_group_set_mode ----

gtk_size_group_set_mode
設置大小組的 。大小組的模式確定大小組中的小部件是否應具有相同的水準申請 （GTK_SIZE_GROUP_HORIZONTAL）都具有相同的垂直申請 （GTK_SIZE_GROUP_VERTICAL），或者是否應在兩個方向上都具有相同的請求（GTK_SIZE_GROUP_BOTH）。GtkSizeGroupMode
語法
參數
size_group- 一GtkSizeGroup
mode- 要為大小組設置的模式。
另請參見
GtkSizeGroup


------------ KeyGTK3gtk_socket_add_id ----

gtk_socket_add_id
將 XEMBED 用戶端（如 ） 添加到 。用戶端可以處於相同的進程中，也可以位於不同的進程中。要將 a 嵌入 到 中，您可以創建 with gtk_plug_new （0），調用 gtk_plug_get_id（） 以獲取外掛程式的視窗 ID，然後將其傳遞給 thegtk_socket_add_id（），也可以調用 gtk_socket_get_id（） 來獲取通訊端的視窗 ID，然後調用 gtk_plug_new（） 傳入該 ID。必須先將該 ID 添加到 toplevel 視窗中，然後才能進行此調用。GtkPlugGtkSocketGtkPlugGtkSocketGtkPlugGtkSocket
語法
參數
socket_- 一GtkSocket
window- 參與 XEMBED 協定的用戶端的視窗。
另請參見
GtkSocket


------------ KeyGTK3gtk_socket_get_id ----

gtk_socket_get_id
獲取小部件的視窗 ID，然後可以使用該視窗 ID 創建嵌入在通訊端內的用戶端，以 gtk_plug_new（） 表示實例。必須已將其添加到頂級視窗中，然後才能進行此調用。GtkSocketGtkSocket
語法
參數
socket_- 一個.GtkSocket
返回
通訊端的窗口 ID
另請參見
GtkSocket


------------ KeyGTK3gtk_socket_get_plug_window ----

gtk_socket_get_plug_window
檢索插頭的視窗。使用此選項可檢查是否已在插座內創建插頭。
語法
參數
socket_- 一個.GtkSocket
返回
插頭的視窗（如果可用）或 NULL。[無轉移]
自 2.1 起
另請參見
GtkSocket


------------ KeyGTK3gtk_socket_new ----

gtk_socket_new
鍒涘緩涓€涓柊鐨勭┖ .GtkSocket
榪斿洖
鏂扮殑 .GtkSocket
鍙﹁鍙傝
GtkSocket


------------ KeyGTK3gtk_spinner_new ----

gtk_spinner_new
返回新的微調器構件。尚未開始。
返回
自 2.20 以來的新
品GtkSpinner
另請參見
GtkSpinner


------------ KeyGTK3gtk_spinner_start ----

gtk_spinner_start
啟動微調器的動畫。
語法
參數
spinner- a
自2.20起GtkSpinner
另請參見
GtkSpinner


------------ KeyGTK3gtk_spinner_stop ----

gtk_spinner_stop
停止微調器的動畫。
語法
參數
spinner- a
自2.2起GtkSpinner
另請參見
GtkSpinner


------------ KeyGTK3gtk_spin_button_configure ----

gtk_spin_button_configure
更改現有旋轉按鈕的屬性。在此函式呼叫後，調整，爬升率和小數位數都相應地更改。
語法
參數
spin_button- 一GtkSpinButton
adjustment- 一個.[允許-無]GtkAdjustment
climb_rate- 新的爬升率
digits- 旋轉按鈕中顯示的小數位數
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_adjustment ----

gtk_spin_button_get_adjustment
獲取與GtkSpinButton
語法
參數
spin_button- 一GtkSpinButton
返回
spin_button。[無轉移]GtkAdjustment
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_digits ----

gtk_spin_button_get_digits
獲取spin_button的精度。請參見gtk_spin_button_set_digits（）。
語法
參數
spin_button- 一GtkSpinButton
返回
當前精度
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_increments ----

gtk_spin_button_get_increments
獲取當前步驟並分頁spin_button使用的增量。Seegtk_spin_button_set_increments（）.
語法
參數
spin_button- 一GtkSpinButton
step- 存儲步驟增量的位置，或 NULL。[輸出][允許-無]
page- 存儲頁面增量的位置，或 NULL。[輸出][允許-無]
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_numeric ----

gtk_spin_button_get_numeric
返回是否可以在數字顯示按鈕中鍵入非數位文本。請參見gtk_spin_button_set_numeric（）。
語法
參數
spin_button- 一GtkSpinButton
返回
如果只能輸入數位文本，則為 TRUE
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_range ----

gtk_spin_button_get_range
獲取spin_button允許的範圍。請參見 gtk_spin_button_set_range（）。
語法
參數
spin_button- 一GtkSpinButton
min- 存儲最小允許值的位置，或 NULL。[輸出][允許-無]
max- 存儲最大允許值的位置，或 NULL。[輸出][允許-無]
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_snap_to_ticks ----

gtk_spin_button_get_snap_to_ticks
返回是否將值更正為最接近的步驟。請參見 gtk_spin_button_set_snap_to_ticks（）。
語法
參數
spin_button- 一GtkSpinButton
返回
如果值與最接近的步長對齊，則為 TRUE
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_update_policy ----

gtk_spin_button_get_update_policy
獲取旋轉按鈕的更新行為。請參見gtk_spin_button_set_update_policy（）。
語法
參數
spin_button- 一GtkSpinButton
返回
當前更新策略
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_value ----

gtk_spin_button_get_value
獲取spin_button中的值。
語法
參數
spin_button- 一GtkSpinButton
返回
spin_button的價值
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_value_as_int ----

gtk_spin_button_get_value_as_int
獲取表示為整數spin_button值。
語法
參數
spin_button- 一GtkSpinButton
返回
spin_button的價值
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_wrap ----

gtk_spin_button_get_wrap
返回旋轉按鈕的值在超出範圍的上限或下限時是否繞到對立面極限。請參見gtk_spin_button_set_wrap（）。
語法
參數
spin_button- 一GtkSpinButton
返回
如果旋轉按鈕包裝 aroun，則為 TRUE
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_new ----

gtk_spin_button_new
創建新的 .GtkSpinButton
語法
參數
adjustment- 此自旋按鈕應使用的物件，或 NULL。[允許-無]GtkAdjustment
climb_rate- 指定當箭頭被點擊時旋轉按鈕的變化程度
digits- 要顯示的小數位數
返回
新的旋轉按鈕作為GtkWidget
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_new_with_range ----

gtk_spin_button_new_with_range
這是一個方便的構造函數，允許創建數位而無需手動創建調整。該值最初設置為最小值，頁面增量為 10 * step 是預設值。旋轉按鈕的精度相當於步進的精度。請注意，如果階躍為 10 的冪，則推導精度的方式效果最佳。如果生成的精度不適合您的需要，請使用 gtk_spin_button_set_digits（） 進行更正。GtkSpinButton
語法
參數
min- 最小允許值
max- 最大允許值
step- 通過旋轉小部件添加或減少增量
返回
新的旋轉按鈕作為GtkWidget
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_adjustment ----

gtk_spin_button_set_adjustment
替換與 spin_button 關聯的。GtkAdjustment
語法
參數
spin_button- 一GtkSpinButton
adjustment- a 替換現有調整GtkAdjustment
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_digits ----

gtk_spin_button_set_digits
設置要由spin_button顯示的精度。允許高達 20 位精度。
語法
參數
spin_button- 一GtkSpinButton
digits- 要為旋轉按鈕的值顯示的小數點後的位元數
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_increments ----

gtk_spin_button_set_increments
設置spin_button的步驟和頁面增量。這會影響啟動旋轉按鈕的箭頭時值變化的速度。
語法
參數
spin_button- 一GtkSpinButton
step- 遞增應用于按鈕 1 次按下。
page- 應用于按鈕 2 按下的增量。
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_numeric ----

gtk_spin_button_set_numeric
設置一個標誌，該標誌確定是否可以在數字顯示按鈕上鍵入非數位文本。
語法
參數
spin_button- 一GtkSpinButton
numeric- 標誌指示是否只允許數位輸入
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_range ----

gtk_spin_button_set_range
設置spin_button的最小和最大允許值。如果當前值超出此範圍，則將對其進行調整以適合該範圍，否則它將保持不變。
語法
參數
spin_button- 一GtkSpinButton
min- 最小允許值
max- 最大允許值
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_snap_to_ticks ----

gtk_spin_button_set_snap_to_ticks
設置有關在提供無效值後啟動旋轉按鈕時是否將值更正為最接近步長增量的策略。
語法
參數
spin_button- 一GtkSpinButton
snap_to_ticks- 指示是否應更正無效值的標誌
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_update_policy ----

gtk_spin_button_set_update_policy
設置微調按鈕的更新行為。這將確定旋轉按鈕是否僅在設置了有效值時才始終更新。
語法
參數
spin_button- 一GtkSpinButton
policy- 一個值GtkSpinButtonUpdatePolicy
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_value ----

gtk_spin_button_set_value
設置spin_button的值。
語法
參數
spin_button- 一GtkSpinButton
value- 新值
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_wrap ----

gtk_spin_button_set_wrap
設置一個標誌，該標誌確定在超出範圍的上限或下限時，微調按鈕值是否繞到相反的極限。
語法
參數
spin_button- 一GtkSpinButton
wrap- 指示是否執行包裝行為的標誌
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_spin ----

gtk_spin_button_spin
在指定方向上按指定量遞增或遞減微調按鈕的值。
語法
參數
spin_button- 一GtkSpinButton
direction- a 指示旋轉方向GtkSpinType
increment- 步長增量以應用於指定方向
另請參見
GtkSpinButton


------------ KeyGTK3gtk_spin_button_update ----

gtk_spin_button_update
手動強制更新旋轉按鈕。
語法
參數
spin_button- 一GtkSpinButton
另請參見
GtkSpinButton


------------ KeyGTK3gtk_stack_add_named ----

gtk_stack_add_named
將子項添加到堆疊中。孩子由名字標識。
語法
參數
stack- 一GtkStack
child- 要添加的小部件
name- 自3.10以來的孩子
的名字
另請參見
GtkStack


------------ KeyGTK3gtk_stack_add_titled ----

gtk_stack_add_titled
將子項添加到堆疊中。孩子由名字標識。標題將用於在選項卡欄中表示子項，因此它應該很短。GtkStackSwitcher
語法
參數
stack- 一GtkStack
child- 要添加的小部件
name- 孩子的名字
title- 自3.10以來人類可讀的兒童
標題
另請參見
GtkStack


------------ KeyGTK3gtk_stack_get_child_by_name ----

gtk_stack_get_child_by_name
查找 將名稱作為參數的 的子項。如果沒有具有此名稱的子項，則返回 NULL。GtkStack
語法
參數
stack- 一GtkStack
name- 要查找的孩子的名字
返回
的請求子項。[無轉移]
自 3.12 起GtkStack
另請參見
GtkStack


------------ KeyGTK3gtk_stack_get_homogeneous ----

gtk_stack_get_homogeneous
獲取堆疊是否同構。請參見 gtk_stack_set_homogeneous（）。
語法
參數
stack- 一GtkStack
返回
堆疊是否均勻。
自 3.10 起
另請參見
GtkStack


------------ KeyGTK3gtk_stack_get_transition_duration ----

gtk_stack_get_transition_duration
返回堆疊中頁面之間傳輸所需的時間（以毫秒為單位）。
語法
參數
stack- 一GtkStack
返回
自 3.10 以來的過渡持續時間
另請參見
GtkStack


------------ KeyGTK3gtk_stack_get_transition_running ----

gtk_stack_get_transition_running
返回堆疊當前是否處於從一個頁面到另一個頁面的轉換中。
語法
參數
stack- 一GtkStack
返回
如果轉換當前正在運行，則為 TRUE，否則為 FALSE。
自 3.1 起
另請參見
GtkStack


------------ KeyGTK3gtk_stack_get_transition_type ----

gtk_stack_get_transition_type
獲取將用於堆疊中頁面之間的過渡的動畫類型。
語法
參數
stack- 一GtkStack
返回
堆疊
的當前轉換類型 自 3.10
另請參見
GtkStack


------------ KeyGTK3gtk_stack_get_visible_child ----

gtk_stack_get_visible_child
獲取堆疊的當前可見子級，如果沒有可見子級，則獲取 NULL。
語法
參數
stack- 一GtkStack
返回
的可見子項。[無轉移]
自 3.10 起GtkStack
另請參見
GtkStack


------------ KeyGTK3gtk_stack_get_visible_child_name ----

gtk_stack_get_visible_child_name
返回堆疊的當前可見子級的名稱，如果沒有可見的子級，則返回 NULL。
語法
參數
stack- 一GtkStack
返回
的可見子項的名稱。[無轉移]
自 3.10 起GtkStack
另請參見
GtkStack


------------ KeyGTK3gtk_stack_new ----

gtk_stack_new
創建新容器。GtkStack
返回
自 3.10 以來的新
品GtkStack
另請參見
GtkStack


------------ KeyGTK3gtk_stack_set_homogeneous ----

gtk_stack_set_homogeneous
將 設置為是否同構。如果它是同質的，則 將為其所有子級請求 samesize。如果不是，則當其他子項變為可見時，堆疊可能更改大小。GtkStackGtkStack
語法
參數
stack- 一GtkStack
homogeneous- TRUE 使堆疊均勻自
3.10
另請參見
GtkStack


------------ KeyGTK3gtk_stack_set_transition_duration ----

gtk_stack_set_transition_duration
設置堆疊中頁面之間轉換的持續時間。
語法
參數
stack- 一GtkStack
duration- 新的持續時間，以毫秒為單位，
自 3.10 起
另請參見
GtkStack


------------ KeyGTK3gtk_stack_set_transition_type ----

gtk_stack_set_transition_type
設置將用於堆疊中頁面之間轉換的動畫類型。可用類型包括各種淡入淡出和幻燈片。過渡類型可以在運行時沒有問題的情況下進行更改，因此可以更改基於即將成為當前頁面的動畫。
語法
參數
stack- 一GtkStack
transition- 自 3.10 以來的新過渡類型
另請參見
GtkStack


------------ KeyGTK3gtk_stack_set_visible_child ----

gtk_stack_set_visible_child
使子級成為堆疊的可見子項。如果子項與當前可見的子項不同，則兩者之間的轉換將使用堆疊的當前傳遞類型進行動畫處理。請注意，子小部件本身必須是可見的（請參閱gtk_widget_show（））才能成為堆疊的 visiblechild。
語法
參數
stack- 一GtkStack
child- 自 3.10 以來堆疊
的子級
另請參見
GtkStack


------------ KeyGTK3gtk_stack_set_visible_child_full ----

gtk_stack_set_visible_child_full
使具有給定名稱的孩子可見。請注意，子小部件本身必須是可見的（請參閱gtk_widget_show（））才能成為堆疊的 visiblechild。
語法
參數
stack- 一GtkStack
name- 使孩子的名字可見
transition- 自 3.10 以來要使用的
過渡類型
另請參見
GtkStack


------------ KeyGTK3gtk_stack_set_visible_child_name ----

gtk_stack_set_visible_child_name
使具有給定名稱的孩子可見。如果子項與當前可見的子項不同，則兩者之間的轉換將使用堆疊的當前傳遞類型進行動畫處理。請注意，子小部件本身必須是可見的（請參閱gtk_widget_show（））才能成為堆疊的 visiblechild。
語法
參數
stack- 一GtkStack
name- 自3.10以來要顯示
的孩子的名字
另請參見
GtkStack


------------ KeyGTK3gtk_stack_switcher_get_stack ----

gtk_stack_switcher_get_stack
檢索堆疊。請參見 gtk_stack_switcher_set_stack（）。
語法
參數
switcher- 一GtkStackSwitcher
返回
堆疊或 NULL ifnone 已顯式設置。[無轉移]
自 3.1 起
另請參見
GtkStackSwitcher


------------ KeyGTK3gtk_stack_switcher_new ----

gtk_stack_switcher_new
創建一個新的 .GtkStackSwitcher
返回
一個新的.
自 3.10 起GtkStackSwitcher
另請參見
GtkStackSwitcher


------------ KeyGTK3gtk_stack_switcher_set_stack ----

gtk_stack_switcher_set_stack
設置要控制的堆疊。
語法
參數
switcher- 一GtkStackSwitcher
stack- 一個.[允許-無]
自 3.10 起GtkStack
另請參見
GtkStackSwitcher


------------ KeyGTK3gtk_statusbar_get_context_id ----

gtk_statusbar_get_context_id
返回一個新的上下文識別字，給定實際上下文的說明。請注意，說明不會顯示在 UI 中。
語法
參數
statusbar- 一GtkStatusbar
context_description- 新消息在什麼上下文中使用的文本描述
返回
整數 id
另請參見
GtkStatusbar


------------ KeyGTK3gtk_statusbar_get_message_area ----

gtk_statusbar_get_message_area
檢索包含標籤構件的框。
語法
參數
statusbar- 一GtkStatusbar
返回
一個。[無轉移]
自 2.2 起GtkBox
另請參見
GtkStatusbar


------------ KeyGTK3gtk_statusbar_new ----

gtk_statusbar_new
創建一個新的消息就緒。GtkStatusbar
返回
新的GtkStatusbar
另請參見
GtkStatusbar


------------ KeyGTK3gtk_statusbar_pop ----

gtk_statusbar_pop
刪除具有給定上下文 ID 的 ？s 堆疊中的第一條消息。請注意，如果堆疊頂部的消息具有不同的上下文 ID，則這可能不會更改顯示的消息。GtkStatusbar
語法
參數
statusbar- 一GtkStatusbar
context_id- 上下文識別字
另請參見
GtkStatusbar


------------ KeyGTK3gtk_statusbar_push ----

gtk_statusbar_push
將新消息推送到狀態列的堆疊上。
語法
參數
statusbar- 一GtkStatusbar
context_id- 消息的上下文 id，返回bygtk_statusbar_get_context_id（）
text- 要添加到狀態列的消息
返回
可withgtk_statusbar_remove（） 使用的消息 id。
另請參見
GtkStatusbar


------------ KeyGTK3gtk_statusbar_remove ----

gtk_statusbar_remove
強制從狀態列堆疊中刪除消息。必須指定確切的context_id和message_id。
語法
參數
statusbar- 一GtkStatusbar
context_id- 上下文識別字
message_id- 消息識別字，由 gtk_statusbar_push（） 返回
另請參見
GtkStatusbar


------------ KeyGTK3gtk_statusbar_remove_all ----

gtk_statusbar_remove_all
強制從狀態列堆疊中刪除所有消息，並context_id。
語法
參數
statusbar- 一GtkStatusbar
context_id- 自 2.22 起的上下文識別字
另請參見
GtkStatusbar


------------ KeyGTK3gtk_status_icon_get_geometry ----

gtk_status_icon_get_geometry
獲取有關螢幕上狀態圖示位置的資訊。例如，此資訊可用於定位快顯視窗，如通知氣泡。請參閱gtk_status_icon_position_menu（） 以獲取更方便的定位功能表替代方案。請注意，某些平臺不允許 GTK+ 提供此資訊，即使在允許提供此資訊的平臺上，除非狀態圖示嵌入在通知區域中，否則該資訊也不可靠，seegtk_status_icon_is_embedded（）。
語法
參數
status_icon- 一GtkStatusIcon
screen- 返回螢幕的位置，如果不需要資訊，則返回 NULL。[輸出][無轉移][允許-無]
area- 返回狀態圖示所佔用區域的位置，或 NULL。[輸出][允許-無]
orientation- 返回嵌入狀態圖示的面板的理論定向位置，或 NULL。螢幕頂部或底部的面板是 ishorizontal，左側或右側的面板是垂直的。[輸出][允許-無]
返回
如果自 2.10 以來已填寫
位置資訊，則為 TRUE
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_gicon ----

gtk_status_icon_get_gicon
檢索 由 顯示的 。狀態圖示的存儲類型必須GTK_IMAGE_EMPTY orGTK_IMAGE_GICON（請參見gtk_status_icon_get_storage_type（））。此函數的調用方不擁有對 thereturned 的引用。如果此功能失敗，圖示保持不變;GIconGtkStatusIconGIcon
語法
參數
status_icon- 一GtkStatusIcon
返回
顯示的圖示，如果圖像為空，則為 NULL。[無轉移]
自 2.14 起
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_has_tooltip ----

gtk_status_icon_get_has_tooltip
返回 has-tooltip 屬性的當前值。有關詳細資訊，請參閱。?has-tooltip?
語法
參數
status_icon- 一GtkStatusIcon
返回
status_icon 上的 has 工具提示的當前值。
2.16 起
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_icon_name ----

gtk_status_icon_get_icon_name
獲取 所顯示的圖示的名稱。狀態圖示的存儲類型必須GTK_IMAGE_EMPTY orGTK_IMAGE_ICON_NAME（請參見gtk_status_icon_get_storage_type（））。返回的字串歸 所有，不應被釋放或修改。GtkStatusIconGtkStatusIcon
語法
參數
status_icon- 一GtkStatusIcon
返回
所顯示圖示的名稱，如果圖像為空，則為 NULL。
自 2.10 起
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_pixbuf ----

gtk_status_icon_get_pixbuf
獲取 由 顯示的。狀態圖示的存儲類型必須GTK_IMAGE_EMPTY orGTK_IMAGE_PIXBUF（請參見gtk_status_icon_get_storage_type（））。此函數的調用方不擁有對 pixbuf 的引用。GdkPixbufGtkStatusIcon
語法
參數
status_icon- 一GtkStatusIcon
返回
顯示的圖元，如果圖像為空，則為 NULL。[無轉移]
自 2.10 起
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_screen ----

gtk_status_icon_get_screen
返回與status_icon相關聯的。GdkScreen
語法
參數
status_icon- 一GtkStatusIcon
返回
一個。[無轉移]
自 2.12 起GdkScreen
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_size ----

gtk_status_icon_get_size
獲取可用於圖像的大小（以圖元為單位）。如果通知區域的大小發生變化，庫存圖示和命名圖示會自動調整其大小。對於其他存儲類型，可以使用大小變化信號來回應大小變化。請注意，僅當嵌入狀態圖示時，返回的大小才有意義（請參見gtk_status_icon_is_embedded（））。
語法
參數
status_icon- 一GtkStatusIcon
返回
自 2.10 起可用於圖像
的大小
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_stock ----

gtk_status_icon_get_stock
gtk_status_icon_get_stock自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用 gtk_status_icon_get_icon_name（）。獲取 由 顯示的股票圖示的 ID。狀態圖示的存儲類型必須GTK_IMAGE_EMPTY orGTK_IMAGE_STOCK（請參見gtk_status_icon_get_storage_type（））。返回的字串歸 所有，不應被釋放或修改。GtkStatusIconGtkStatusIcon
語法
參數
status_icon- 一GtkStatusIcon
返回
所顯示的股票圖示的股票 ID，如果圖像為空，則為 NULL。
自 2.10 起
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_storage_type ----

gtk_status_icon_get_storage_type
獲取 用於存儲圖像資料的表示類型。如果沒有圖像資料，則返回值將GTK_IMAGE_EMPTY。GtkStatusIconGtkStatusIcon
語法
參數
status_icon- 一GtkStatusIcon
返回
自 2.10 起使用的圖像表示
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_title ----

gtk_status_icon_get_title
獲取此託盤圖示的標題。請參見gtk_status_icon_set_title（）。
語法
參數
status_icon- 一GtkStatusIcon
返回
自 2.18 以來的狀態圖示
的標題
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_tooltip_markup ----

gtk_status_icon_get_tooltip_markup
獲取status_icon工具提示的內容。
語法
參數
status_icon- 一GtkStatusIcon
返回
工具提示文本，或 NULL。完成後，您應該使用g_free（）釋放其中的字串。
2.16 起
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_tooltip_text ----

gtk_status_icon_get_tooltip_text
獲取status_icon工具提示的內容。
語法
參數
status_icon- 一GtkStatusIcon
返回
工具提示文本，或 NULL。完成後，您應該使用g_free（）釋放其中的字串。
2.16 起
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_visible ----

gtk_status_icon_get_visible
返回狀態圖示是否可見。請注意，可見並不能保證使用者實際上可以看到該圖示，另請參閱gtk_status_icon_is_embedded（）。
語法
參數
status_icon- 一GtkStatusIcon
返回
如果狀態圖示自 2.10 起可見
，則為 TRUE
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_x11_window_id ----

gtk_status_icon_get_x11_window_id
此功能僅在 X11/freedesktop.org 平臺上有用。它返回底層狀態圖示實現中小部件的視窗 ID。這對於 Galago 通知服務非常有用，該服務可以在協定中發送視窗 ID，以便伺服器可靠地定位指向狀態圖示的通知視窗。此函數不適用於其他用例，這些用例更有可能由非 X11 特定方法之一滿足，例如 gtk_status_icon_position_menu（）。
語法
參數
status_icon- 一GtkStatusIcon
返回
自 2.1 以來的 X11 窗口
的 32 位不帶正負號的整數識別字
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_is_embedded ----

gtk_status_icon_is_embedded
返回狀態圖示是否嵌入在通知區域中。
語法
參數
status_icon- 一GtkStatusIcon
返回
如果狀態圖示嵌入在通知區域中，則為 TRUE。
自 2.10 起
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_new ----

gtk_status_icon_new
創建一個空的狀態圖示物件。
返回
自 2.10 以來的新
品GtkStatusIcon
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_new_from_file ----

gtk_status_icon_new_from_file
創建顯示檔檔案名的狀態圖示。如有必要，圖像將縮小以適合通知區域中的可用空間。
語法
參數
filename- 檔案名。[類型檔案名]
返回
自 2.10 以來的新
品GtkStatusIcon
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_new_from_gicon ----

gtk_status_icon_new_from_gicon
創建顯示 .如果圖示是迷惑圖示，則當主題更改時，它將更新。GIcon
語法
參數
icon- 一GIcon
返回
自 2.14 以來的新
GtkStatusIcon
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_new_from_icon_name ----

gtk_status_icon_new_from_icon_name
創建一個狀態圖示，顯示當前圖示主題中的圖示。如果當前圖示主題發生更改，圖示將相應更新。
語法
參數
icon_name- 圖示名稱
返回
自 2.10 以來的新
品GtkStatusIcon
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_new_from_pixbuf ----

gtk_status_icon_new_from_pixbuf
創建顯示圖元蟲的狀態圖示。如有必要，圖像將縮小以適合通知區域中的可用空間。
語法
參數
pixbuf- 一GdkPixbuf
返回
自 2.10 以來的新
品GtkStatusIcon
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_new_from_stock ----

gtk_status_icon_new_from_stock
gtk_status_icon_new_from_stock自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_status_icon_new_from_icon_name（）。創建顯示股票圖示的狀態圖示。示例股票圖示名稱為 、 。您可以註冊自己的股票圖示名稱，請參閱gtk_icon_factory_add_default（） 和 gtk_icon_factory_add（）。GTK_STOCK_OPENGTK_STOCK_QUIT
語法
參數
stock_id- 股票圖示id
返回
自 2.10 以來的新
品GtkStatusIcon
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_position_menu ----

gtk_status_icon_position_menu
功能表定位功能，用於gtk_menu_popup（）以定位與狀態圖示對齊的功能表user_data。
語法
參數
menu- 的GtkMenu
x- 返回 x 位置的位置。[輸出]
y- 返回 y 位置的位置。[輸出]
push_in- 第一個功能表項目是否應該偏移（推入）以與菜單彈出位置對齊（僅對GtkOptionMenu有用）。[輸出]
user_data- 用於定位功能表的狀態圖示。[類型 GtkStatusIcon]
自 2.10 起
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_from_file ----

gtk_status_icon_set_from_file
使status_icon顯示檔檔案名。有關詳細資訊，請參見 gtk_status_icon_new_from_file（）。
語法
參數
status_icon- 一GtkStatusIcon
filename- 檔案名。[類型檔案名]
自 2.10 起
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_from_gicon ----

gtk_status_icon_set_from_gicon
使 status_icon 顯示 .有關詳細資訊，請參見 gtk_status_icon_new_from_gicon（）。GIcon
語法
參數
status_icon- 一GtkStatusIcon
icon- 自2.14以來的GIcon
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_from_icon_name ----

gtk_status_icon_set_from_icon_name
使status_icon顯示當前圖示主題中名為 icon_name 的圖示。有關詳細資訊，請參見 gtk_status_icon_new_from_icon_name（）。
語法
參數
status_icon- 一GtkStatusIcon
icon_name- 自2.10以來的圖示名稱
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_from_pixbuf ----

gtk_status_icon_set_from_pixbuf
使status_icon顯示圖元。有關詳細資訊，請參見 gtk_status_icon_new_from_pixbuf（）。
語法
參數
status_icon- 一GtkStatusIcon
pixbuf- a 或 NULL。[允許-無]
自 2.10 起GdkPixbuf
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_from_stock ----

gtk_status_icon_set_from_stock
gtk_status_icon_set_from_stock自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用 gtk_status_icon_set_from_icon_name（）。使status_icon顯示 id 為 stock_id 的股票圖示。有關詳細資訊，請參閱 gtk_status_icon_new_from_stock（）。
語法
參數
status_icon- 一GtkStatusIcon
stock_id- 自2.10以來的股票圖示ID
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_has_tooltip ----

gtk_status_icon_set_has_tooltip
將 status_icon 上的 has 工具提示屬性設置為 has_tooltip。有關詳細資訊，請參閱。?has-tooltip?
語法
參數
status_icon- 一GtkStatusIcon
has_tooltip- 自 2.16 以來是否status_iconhas工具提示
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_name ----

gtk_status_icon_set_name
設置此託盤圖示的名稱。這應該是標識此圖示的字串。它可能用於對託盤中的圖示進行排序，並且不會向使用者顯示。
語法
參數
status_icon- 一GtkStatusIcon
name- 自2.20以來的名稱
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_screen ----

gtk_status_icon_set_screen
設置status_icon的顯示位置;如果圖示已經映射，它將被取消映射，然後在新螢幕上重新映射。GdkScreen
語法
參數
status_icon- 一GtkStatusIcon
screen- a
自2.12起GdkScreen
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_title ----

gtk_status_icon_set_title
設置此託盤圖示的標題。這應該是描述託盤圖示的簡短的、使用者可讀的當地語系化字串。它可以被螢幕閱讀器等工具用來渲染託盤圖示。
語法
參數
status_icon- 一GtkStatusIcon
title- 標題
自2.18
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_tooltip_markup ----

gtk_status_icon_set_tooltip_markup
將標記設置為工具提示的內容，該工具提示使用 Pango 文本標記語言進行標記。此函數將負責設置為 TRUE 和信號的預設處理常式。另請參見屬性andgtk_tooltip_set_markup（）。?has-tooltip??query-tooltip??tooltip-markup?
語法
參數
status_icon- 一GtkStatusIcon
markup- status_icon工具提示的內容，或 NULL。[允許-無]
2.16 起
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_tooltip_text ----

gtk_status_icon_set_tooltip_text
將文本設置為工具提示的內容。此函數將負責將設置為TRUE和信號的預設處理常式。另請參見屬性andgtk_tooltip_set_text（）。?has-tooltip??query-tooltip??tooltip-text?
語法
參數
status_icon- 一GtkStatusIcon
text-
自 2.16 以來status_icon
工具提示的內容
另請參見
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_visible ----

gtk_status_icon_set_visible
顯示或隱藏狀態圖示。
語法
參數
status_icon- 一GtkStatusIcon
visible- TRUE顯示狀態圖示，FALSE自2.10起隱藏它
另請參見
GtkStatusIcon


------------ KeyGTK3GTK_STOCK_ABOUT ----

GTK_STOCK_ABOUT
GTK_STOCK_ABOUT
GTK_STOCK_ABOUT自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“help-about”或標籤“_About”。這？大約？項目。
自 2.6 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ADD ----

GTK_STOCK_ADD
GTK_STOCK_ADD
GTK_STOCK_ADD自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“list-add”或標籤“_Add”。這？加？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3gtk_stock_add_static ----

gtk_stock_add_static
gtk_stock_add_static自 3.10 版起已棄用，不應在新編寫的代碼中使用。與 gtk_stock_add（） 相同，但不複製項，因此項必須保留，直到應用程式退出。
語法
參數
items- 的一個或陣列。[陣列長度 = n_items]GtkStockItemGtkStockItem
n_items- 項目數量
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_APPLY ----

GTK_STOCK_APPLY
GTK_STOCK_APPLY
GTK_STOCK_APPLY自 3.10 版起已棄用，不應在新編寫的代碼中使用。不要使用圖示。使用標籤“_Apply”。這？應用？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_BOLD ----

GTK_STOCK_BOLD
GTK_STOCK_BOLD
GTK_STOCK_BOLD自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“格式-文本-粗體”。這？大膽？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_CANCEL ----

GTK_STOCK_CANCEL
GTK_STOCK_CANCEL
GTK_STOCK_CANCEL自 3.10 版起已棄用，不應在新編寫的代碼中使用。不要使用圖示。使用標籤“_Cancel”。這？取消？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_CAPS_LOCK_WARNING ----

GTK_STOCK_CAPS_LOCK_WARNING
GTK_STOCK_CAPS_LOCK_WARNING
GTK_STOCK_CAPS_LOCK_WARNING自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“對話方塊警告符號”。這？大寫鎖定警告？圖示。
2.16 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_CDROM ----

GTK_STOCK_CDROM
GTK_STOCK_CDROM
GTK_STOCK_CDROM自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“media-optical”。這？光碟？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_CLEAR ----

GTK_STOCK_CLEAR
GTK_STOCK_CLEAR
GTK_STOCK_CLEAR自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“編輯清除”。這？清楚？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_CLOSE ----

GTK_STOCK_CLOSE
GTK_STOCK_CLOSE
GTK_STOCK_CLOSE自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“視窗關閉”或標籤“_Close”。這？關閉？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_COLOR_PICKER ----

GTK_STOCK_COLOR_PICKER
GTK_STOCK_COLOR_PICKER
GTK_STOCK_COLOR_PICKER自 3.10 版起已棄用，不應在新編寫的代碼中使用。這？拾色器？項目。
自 2.2 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_CONNECT ----

GTK_STOCK_CONNECT
GTK_STOCK_CONNECT
GTK_STOCK_CONNECT自 3.10 版起已棄用，不應在新編寫的代碼中使用。這？連接？圖示。
自 2.6 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_CONVERT ----

GTK_STOCK_CONVERT
GTK_STOCK_CONVERT
GTK_STOCK_CONVERT自 3.10 版起已棄用，不應在新編寫的代碼中使用。這？轉換？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_COPY ----

GTK_STOCK_COPY
GTK_STOCK_COPY
GTK_STOCK_COPY自 3.10 版起已棄用，不應在新編寫的代碼中使用。不要使用圖示。使用標籤“_Copy”。這？複製？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_CUT ----

GTK_STOCK_CUT
GTK_STOCK_CUT
GTK_STOCK_CUT自版本 3.10 起已棄用，不應在新編寫的代碼中使用。不要使用圖示。使用標籤“Cu_t”。這？切？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DELETE ----

GTK_STOCK_DELETE
GTK_STOCK_DELETE
GTK_STOCK_DELETE自 3.10 版起已棄用，不應在新編寫的代碼中使用。不要使用圖示。使用標籤“_Delete”。這？刪除？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DIALOG_AUTHENTICATION ----

GTK_STOCK_DIALOG_AUTHENTICATION
GTK_STOCK_DIALOG_AUTHENTICATION
GTK_STOCK_DIALOG_AUTHENTICATION自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“對話方塊密碼”。這？認證？項目。
2.4 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DIALOG_ERROR ----

GTK_STOCK_DIALOG_ERROR
GTK_STOCK_DIALOG_ERROR
GTK_STOCK_DIALOG_ERROR自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“對話方塊錯誤”。這？錯誤？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DIALOG_INFO ----

GTK_STOCK_DIALOG_INFO
GTK_STOCK_DIALOG_INFO
GTK_STOCK_DIALOG_INFO自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“對話方塊資訊”。這？信息？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DIALOG_QUESTION ----

GTK_STOCK_DIALOG_QUESTION
GTK_STOCK_DIALOG_QUESTION
GTK_STOCK_DIALOG_QUESTION自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“對話問題”。這？問題？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DIALOG_WARNING ----

GTK_STOCK_DIALOG_WARNING
GTK_STOCK_DIALOG_WARNING
GTK_STOCK_DIALOG_WARNING自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“對話方塊警告”。這？警告？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DIRECTORY ----

GTK_STOCK_DIRECTORY
GTK_STOCK_DIRECTORY
GTK_STOCK_DIRECTORY自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“資料夾”。這？目錄？圖示。
自 2.6 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DISCARD ----

GTK_STOCK_DISCARD
GTK_STOCK_DISCARD
GTK_STOCK_DISCARD自版本 3.10 起已棄用，不應在新編寫的代碼中使用。這？丟棄？項目。
自 2.12 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DISCONNECT ----

GTK_STOCK_DISCONNECT
GTK_STOCK_DISCONNECT
GTK_STOCK_DISCONNECT自 3.10 版起已棄用，不應在新編寫的代碼中使用。這？斷開？圖示。
自 2.6 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DND ----

GTK_STOCK_DND
GTK_STOCK_DND
GTK_STOCK_DND自版本 3.10 起已棄用，不應在新編寫的代碼中使用。這？拖放？圖示。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DND_MULTIPLE ----

GTK_STOCK_DND_MULTIPLE
GTK_STOCK_DND_MULTIPLE
GTK_STOCK_DND_MULTIPLE自 3.10 版起已棄用，不應在新編寫的代碼中使用。這？拖放多個？圖示。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_EDIT ----

GTK_STOCK_EDIT
GTK_STOCK_EDIT
GTK_STOCK_EDIT自版本 3.10 起已棄用，不應在新編寫的代碼中使用。這？編輯？項目。
自 2.6 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_EXECUTE ----

GTK_STOCK_EXECUTE
GTK_STOCK_EXECUTE
GTK_STOCK_EXECUTE自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“系統運行”。這？執行？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_FILE ----

GTK_STOCK_FILE
GTK_STOCK_FILE
GTK_STOCK_FILE自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“text-x-generic”。這？文件？項目。從 3.0 開始，此項目具有標籤，而在此之前它只有一個圖示。
自 2.6 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_FIND ----

GTK_STOCK_FIND
GTK_STOCK_FIND
GTK_STOCK_FIND自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“編輯查找”。這？找到？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_FIND_AND_REPLACE ----

GTK_STOCK_FIND_AND_REPLACE
GTK_STOCK_FIND_AND_REPLACE
GTK_STOCK_FIND_AND_REPLACE自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“編輯-查找-替換”。這？查找和替換？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_FLOPPY ----

GTK_STOCK_FLOPPY
GTK_STOCK_FLOPPY
GTK_STOCK_FLOPPY自版本 3.10 起已棄用，不應在新編寫的代碼中使用。這？軟碟？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_FULLSCREEN ----

GTK_STOCK_FULLSCREEN
GTK_STOCK_FULLSCREEN
GTK_STOCK_FULLSCREEN自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“查看全屏”。這？全屏？項目。
自 2.8 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_GOTO_BOTTOM ----

GTK_STOCK_GOTO_BOTTOM
GTK_STOCK_GOTO_BOTTOM
GTK_STOCK_GOTO_BOTTOM自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“轉到底部”。這？底？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_GOTO_FIRST ----

GTK_STOCK_GOTO_FIRST
GTK_STOCK_GOTO_FIRST
GTK_STOCK_GOTO_FIRST自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“go-first”。這？第一？項目。RTL 變體
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_GOTO_LAST ----

GTK_STOCK_GOTO_LAST
GTK_STOCK_GOTO_LAST
GTK_STOCK_GOTO_LAST自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“go-last”。這？最後？項目。RTL 變體
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_GOTO_TOP ----

GTK_STOCK_GOTO_TOP
GTK_STOCK_GOTO_TOP
GTK_STOCK_GOTO_TOP自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“頂部”。這？返回頁首？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_GO_BACK ----

GTK_STOCK_GO_BACK
GTK_STOCK_GO_BACK
GTK_STOCK_GO_BACK自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“go-previous”。這？返回？項目。RTL 變體
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_GO_DOWN ----

GTK_STOCK_GO_DOWN
GTK_STOCK_GO_DOWN
GTK_STOCK_GO_DOWN自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“go-down”。這？下？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_GO_FORWARD ----

GTK_STOCK_GO_FORWARD
GTK_STOCK_GO_FORWARD
GTK_STOCK_GO_FORWARD自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“go-next”。這？向前？項目。RTL 變體
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_GO_UP ----

GTK_STOCK_GO_UP
GTK_STOCK_GO_UP
GTK_STOCK_GO_UP自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“go-up”。這？間諜項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_HARDDISK ----

GTK_STOCK_HARDDISK
GTK_STOCK_HARDDISK
GTK_STOCK_HARDDISK自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“驅動器硬碟”。這？硬碟？項目。
2.4 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_HELP ----

GTK_STOCK_HELP
GTK_STOCK_HELP
GTK_STOCK_HELP自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“説明流覽器”。這？幫助？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_HOME ----

GTK_STOCK_HOME
GTK_STOCK_HOME
GTK_STOCK_HOME自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“回家”。這？家？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_INDENT ----

GTK_STOCK_INDENT
GTK_STOCK_INDENT
GTK_STOCK_INDENT自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“格式縮進更多”。這？訂貨單？項目。自 2.4 起的 RTL 變體
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_INDEX ----

GTK_STOCK_INDEX
GTK_STOCK_INDEX
GTK_STOCK_INDEX自 3.10 版起已棄用，不應在新編寫的代碼中使用。這？指數？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_INFO ----

GTK_STOCK_INFO
GTK_STOCK_INFO
GTK_STOCK_INFO自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“對話方塊資訊”。這？信息？項目。
自 2.8 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ITALIC ----

GTK_STOCK_ITALIC
GTK_STOCK_ITALIC
GTK_STOCK_ITALIC自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“格式-文本-斜體”。這？斜體的？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3gtk_stock_item_copy ----

gtk_stock_item_copy
gtk_stock_item_copy自版本 3.10 起已棄用，不應在新編寫的代碼中使用。複製庫存項，該項主要用於語言綁定，而不是在應用程式中。
語法
參數
item- 一GtkStockItem
返回
一個新的GtkStockItem
另請參見
gtk3-Stock-Items


------------ KeyGTK3gtk_stock_item_free ----

gtk_stock_item_free
gtk_stock_item_free自 3.10 版起已棄用，不應在新編寫的代碼中使用。釋放堆上分配的庫存物料，例如返回的 bygtk_stock_item_copy（）。還釋放庫存物料中的欄位（如果它們不為 NULL）。
語法
參數
item- 一GtkStockItem
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_JUMP_TO ----

GTK_STOCK_JUMP_TO
GTK_STOCK_JUMP_TO
GTK_STOCK_JUMP_TO自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“跳轉”。這？跳轉到？項目。RTL 變體
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_JUSTIFY_CENTER ----

GTK_STOCK_JUSTIFY_CENTER
GTK_STOCK_JUSTIFY_CENTER
GTK_STOCK_JUSTIFY_CENTER自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“格式對齊中心”。這？中心？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_JUSTIFY_FILL ----

GTK_STOCK_JUSTIFY_FILL
GTK_STOCK_JUSTIFY_FILL
GTK_STOCK_JUSTIFY_FILL自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“格式對齊填充”。這？填補？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_JUSTIFY_LEFT ----

GTK_STOCK_JUSTIFY_LEFT
GTK_STOCK_JUSTIFY_LEFT
GTK_STOCK_JUSTIFY_LEFT自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“格式對齊左對齊”。這？左？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_JUSTIFY_RIGHT ----

GTK_STOCK_JUSTIFY_RIGHT
GTK_STOCK_JUSTIFY_RIGHT
GTK_STOCK_JUSTIFY_RIGHT自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“格式對齊右對齊”。這？右？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_LEAVE_FULLSCREEN ----

GTK_STOCK_LEAVE_FULLSCREEN
GTK_STOCK_LEAVE_FULLSCREEN
GTK_STOCK_LEAVE_FULLSCREEN自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“視圖還原”。這？離開全屏？項目。
自 2.8 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3gtk_stock_list_ids ----

gtk_stock_list_ids
gtk_stock_list_ids自 3.10 版起已棄用，不應在新編寫的代碼中使用。檢索添加到 或註冊到 gtk_stock_add（） 的所有已知股票 ID 的列表。必須使用 g_slist_free（） 釋放列表，並且必須使用 g_free（） 釋放清單中的每個字串。GtkIconFactory
返回
已知股票 ID 的列表。[元素型 utf8][轉移完整]
另請參見
gtk3-Stock-Items


------------ KeyGTK3gtk_stock_lookup ----

gtk_stock_lookup
gtk_stock_lookup自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用stock_id的註冊值填充專案，返回 TRUEif stock_id已知。
語法
參數
stock_id- 庫存項目名稱
item- 庫存項目使用值進行初始化。[輸出]
返回
如果項已初始化，則為 TRUE
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MEDIA_FORWARD ----

GTK_STOCK_MEDIA_FORWARD
GTK_STOCK_MEDIA_FORWARD
GTK_STOCK_MEDIA_FORWARD自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“media-seek-forward”或標籤“_Forward”。這？媒體轉發？項目。自 2.6 起的 RTL 變體
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MEDIA_NEXT ----

GTK_STOCK_MEDIA_NEXT
GTK_STOCK_MEDIA_NEXT
GTK_STOCK_MEDIA_NEXT自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“媒體-向前跳過”或標籤“_Next”。這？媒體下一個？項目。自 2.6 起的 RTL 變體
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MEDIA_PAUSE ----

GTK_STOCK_MEDIA_PAUSE
GTK_STOCK_MEDIA_PAUSE
GTK_STOCK_MEDIA_PAUSE自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“媒體播放暫停”或標籤“P_ause”。這？媒體暫停？項目。
自 2.6 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MEDIA_PLAY ----

GTK_STOCK_MEDIA_PLAY
GTK_STOCK_MEDIA_PLAY
GTK_STOCK_MEDIA_PLAY自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“媒體播放-開始”或標籤“_Play”。這？媒體播放？項目。自 2.6 起的 RTL 變體
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MEDIA_PREVIOUS ----

GTK_STOCK_MEDIA_PREVIOUS
GTK_STOCK_MEDIA_PREVIOUS
GTK_STOCK_MEDIA_PREVIOUS自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“媒體-向後跳過-後退”或標籤“Pre_vious”。這？媒體 上一頁？項目。自 2.6 起的 RTL 變體
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MEDIA_RECORD ----

GTK_STOCK_MEDIA_RECORD
GTK_STOCK_MEDIA_RECORD
GTK_STOCK_MEDIA_RECORD自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“media-record”或標籤“_Record”。這？媒體記錄？項目。
自 2.6 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MEDIA_REWIND ----

GTK_STOCK_MEDIA_REWIND
GTK_STOCK_MEDIA_REWIND
GTK_STOCK_MEDIA_REWIND自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“媒體搜索-向後”或標籤“R_ewind”。這？媒體倒帶？項目。自 2.6 起的 RTL 變體
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MEDIA_STOP ----

GTK_STOCK_MEDIA_STOP
GTK_STOCK_MEDIA_STOP
GTK_STOCK_MEDIA_STOP自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“媒體播放停止”或標籤“_Stop”。這？媒體停止？項目。
自 2.6 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MISSING_IMAGE ----

GTK_STOCK_MISSING_IMAGE
GTK_STOCK_MISSING_IMAGE
GTK_STOCK_MISSING_IMAGE自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“圖像缺失”。這？缺少圖像？圖示。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_NETWORK ----

GTK_STOCK_NETWORK
GTK_STOCK_NETWORK
GTK_STOCK_NETWORK自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“網路工作組”。這？網路？項目。
2.4 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_NEW ----

GTK_STOCK_NEW
GTK_STOCK_NEW
GTK_STOCK_NEW自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“document-new”或標籤“_New”。這？新增功能？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_NO ----

GTK_STOCK_NO
GTK_STOCK_NO
GTK_STOCK_NO自 3.10 版起已棄用，不應在新編寫的代碼中使用。這？不？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_OK ----

GTK_STOCK_OK
GTK_STOCK_OK
GTK_STOCK_OK自 3.10 版起已棄用，不應在新編寫的代碼中使用。不要使用圖示。使用標籤“_OK”。這？斷續器項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_OPEN ----

GTK_STOCK_OPEN
GTK_STOCK_OPEN
GTK_STOCK_OPEN自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“文檔打開”或標籤“_Open”。這？打開？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ORIENTATION_LANDSCAPE ----

GTK_STOCK_ORIENTATION_LANDSCAPE
GTK_STOCK_ORIENTATION_LANDSCAPE
GTK_STOCK_ORIENTATION_LANDSCAPE自 3.10 版起已棄用，不應在新編寫的代碼中使用。這？橫向？項目。
自 2.10 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ORIENTATION_PORTRAIT ----

GTK_STOCK_ORIENTATION_PORTRAIT
GTK_STOCK_ORIENTATION_PORTRAIT
GTK_STOCK_ORIENTATION_PORTRAIT自版本 3.10 起已棄用，不應在新編寫的代碼中使用。這？縱向？項目。
自 2.10 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE ----

GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE
GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE
GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE自版本 3.10 起已棄用，不應在新編寫的代碼中使用。這？反向橫向？項目。
自 2.10 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT ----

GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT
GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT
GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT自版本 3.10 起已棄用，不應在新編寫的代碼中使用。這？反向縱向？項目。
自 2.10 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PAGE_SETUP ----

GTK_STOCK_PAGE_SETUP
GTK_STOCK_PAGE_SETUP
GTK_STOCK_PAGE_SETUP自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“文檔-頁面設置”或標籤“頁面Set_up”。這？頁面設置？項目。
自 2.14 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PASTE ----

GTK_STOCK_PASTE
GTK_STOCK_PASTE
GTK_STOCK_PASTE自 3.10 版起已棄用，不應在新編寫的代碼中使用。不要使用圖示。使用標籤“_Paste”。這？糊？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PREFERENCES ----

GTK_STOCK_PREFERENCES
GTK_STOCK_PREFERENCES
GTK_STOCK_PREFERENCES自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“首選項系統”或標籤“_Preferences”。這？偏好？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PRINT ----

GTK_STOCK_PRINT
GTK_STOCK_PRINT
GTK_STOCK_PRINT自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“文檔列印”或標籤“_Print”。這？列印？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PRINT_ERROR ----

GTK_STOCK_PRINT_ERROR
GTK_STOCK_PRINT_ERROR
GTK_STOCK_PRINT_ERROR自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“印表機錯誤”。這？列印錯誤？圖示。
自 2.14 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PRINT_PAUSED ----

GTK_STOCK_PRINT_PAUSED
GTK_STOCK_PRINT_PAUSED
GTK_STOCK_PRINT_PAUSED自 3.10 版起已棄用，不應在新編寫的代碼中使用。這？列印已暫停？圖示。
自 2.14 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PRINT_PREVIEW ----

GTK_STOCK_PRINT_PREVIEW
GTK_STOCK_PRINT_PREVIEW
GTK_STOCK_PRINT_PREVIEW自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用標籤“Pre_view”。這？預覽列印？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PRINT_REPORT ----

GTK_STOCK_PRINT_REPORT
GTK_STOCK_PRINT_REPORT
GTK_STOCK_PRINT_REPORT自 3.10 版起已棄用，不應在新編寫的代碼中使用。這？列印報告？圖示。
自 2.14 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PRINT_WARNING ----

GTK_STOCK_PRINT_WARNING
GTK_STOCK_PRINT_WARNING
GTK_STOCK_PRINT_WARNING自版本 3.10 起已棄用，不應在新編寫的代碼中使用。這？列印警告？圖示。
自 2.14 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PROPERTIES ----

GTK_STOCK_PROPERTIES
GTK_STOCK_PROPERTIES
GTK_STOCK_PROPERTIES自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“文件屬性”或標籤“_Properties”。這？性能？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_QUIT ----

GTK_STOCK_QUIT
GTK_STOCK_QUIT
GTK_STOCK_QUIT自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“應用程式退出”或標籤“_Quit”。這？退出？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_REDO ----

GTK_STOCK_REDO
GTK_STOCK_REDO
GTK_STOCK_REDO自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“edit-redo”或標籤“_Redo”。這？重做？項目。RTL 變體
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_REFRESH ----

GTK_STOCK_REFRESH
GTK_STOCK_REFRESH
GTK_STOCK_REFRESH自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“視圖刷新”或標籤“_Refresh”。這？刷新？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_REMOVE ----

GTK_STOCK_REMOVE
GTK_STOCK_REMOVE
GTK_STOCK_REMOVE自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“清單刪除”或標籤“_Remove”。這？刪除？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_REVERT_TO_SAVED ----

GTK_STOCK_REVERT_TO_SAVED
GTK_STOCK_REVERT_TO_SAVED
GTK_STOCK_REVERT_TO_SAVED自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“文檔還原”或標籤“_Revert”。這？恢復？項目。RTL 變體
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_SAVE ----

GTK_STOCK_SAVE
GTK_STOCK_SAVE
GTK_STOCK_SAVE自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“文檔保存”或標籤“_Save”。這？救？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_SAVE_AS ----

GTK_STOCK_SAVE_AS
GTK_STOCK_SAVE_AS
GTK_STOCK_SAVE_AS自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“文檔另存為”或標籤“保存_As”。這？另存為？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_SELECT_ALL ----

GTK_STOCK_SELECT_ALL
GTK_STOCK_SELECT_ALL
GTK_STOCK_SELECT_ALL自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“編輯-選擇-全部”或標籤“選擇_All”。這？全選？項目。
自 2.10 起
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_SELECT_COLOR ----

GTK_STOCK_SELECT_COLOR
GTK_STOCK_SELECT_COLOR
GTK_STOCK_SELECT_COLOR自 3.10 版起已棄用，不應在新編寫的代碼中使用。這？顏色？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_SELECT_FONT ----

GTK_STOCK_SELECT_FONT
GTK_STOCK_SELECT_FONT
GTK_STOCK_SELECT_FONT自版本 3.10 起已棄用，不應在新編寫的代碼中使用。這？字體？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3gtk_stock_set_translate_func ----

gtk_stock_set_translate_func
gtk_stock_set_translate_func自版本 3.10 起已棄用，不應在新編寫的代碼中使用。設置用於翻譯庫存物料標籤的函數。如果沒有為翻譯域註冊任何函數，則使用 g_dgettext（）。該函數用於與域匹配的所有庫存項目whosetranslation_domain。請注意，只要您在調用 dgettext（） 時使用正確的域，就可以使用與應用程式的實際 gettext 轉換域不同的字串。這可能很有用，例如，在處理消息上下文時：12345678910111213141516171819[/語法] [語法]GtkStockItem items[] = { { MY_ITEM1， NC_（“odd items”， “Item 1”）， 0， 0， “odd-item-domain” }， { MY_ITEM2， NC_（“even items”， “Item 2”）， 0， 0， “even-item-domain” }，};gchar *my_translate_func （const gchar *msgid， gpointer data）{ gchar *msgctxt = data; return （gchar*）g_dpgettext2 （GETTEXT_PACKAGE， msgctxt， msgid）;}...gtk_stock_add（項目，G_N_ELEMENTS（項目））;gtk_stock_set_translate_func（“奇數項目域”，my_translate_func，“奇數項目”）;gtk_stock_set_translate_func（“偶數項域”，my_translate_func，“偶數項”）;[/語法]GtkTranslateFunc
語法
參數
domain- 使用函數的翻譯域
func- 一GtkTranslateFunc
data- 資料傳遞到函數
notify- a 在 datais 不再需要
自 2.8 以來調用GDestroyNotify
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_SORT_ASCENDING ----

GTK_STOCK_SORT_ASCENDING
GTK_STOCK_SORT_ASCENDING
GTK_STOCK_SORT_ASCENDING自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“視圖-排序-昇冪”。這？上升？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_SORT_DESCENDING ----

GTK_STOCK_SORT_DESCENDING
GTK_STOCK_SORT_DESCENDING
GTK_STOCK_SORT_DESCENDING自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“視圖-排序-降冪”。這？降？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_SPELL_CHECK ----

GTK_STOCK_SPELL_CHECK
GTK_STOCK_SPELL_CHECK
GTK_STOCK_SPELL_CHECK自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“工具檢查拼寫”。這？拼寫檢查？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_STOP ----

GTK_STOCK_STOP
GTK_STOCK_STOP
GTK_STOCK_STOP自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“process-stop”或標籤“_Stop”。這？停？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_STRIKETHROUGH ----

GTK_STOCK_STRIKETHROUGH
GTK_STOCK_STRIKETHROUGH
GTK_STOCK_STRIKETHROUGH自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“格式-文本-刪除線”或標籤“_Strikethrough”。這？刪除線？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_UNDELETE ----

GTK_STOCK_UNDELETE
GTK_STOCK_UNDELETE
GTK_STOCK_UNDELETE自 3.10 版起已棄用，不應在新編寫的代碼中使用。這？取消刪除？項目。RTL 變體
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_UNDERLINE ----

GTK_STOCK_UNDERLINE
GTK_STOCK_UNDERLINE
GTK_STOCK_UNDERLINE自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“格式-文本-底線”或標籤“_Underline”。這？底線？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_UNDO ----

GTK_STOCK_UNDO
GTK_STOCK_UNDO
GTK_STOCK_UNDO自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“編輯-撤銷”或標籤“_Undo”。這？撤銷？項目。RTL 變體
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_UNINDENT ----

GTK_STOCK_UNINDENT
GTK_STOCK_UNINDENT
GTK_STOCK_UNINDENT自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“無格式縮進”。這？取消縮進？項目。自 2.4 起的 RTL 變體
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_YES ----

GTK_STOCK_YES
GTK_STOCK_YES
GTK_STOCK_YES自版本 3.10 起已棄用，不應在新編寫的代碼中使用。這？是的？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ZOOM_100 ----

GTK_STOCK_ZOOM_100
GTK_STOCK_ZOOM_100
GTK_STOCK_ZOOM_100自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“縮放原始”或標籤“_Normal大小”。這？縮放 100%？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ZOOM_FIT ----

GTK_STOCK_ZOOM_FIT
GTK_STOCK_ZOOM_FIT
GTK_STOCK_ZOOM_FIT自版本 3.10 起已棄用，不應在新編寫的代碼中使用。使用命名圖示“最佳縮放”或標籤“最佳_Fit”。這？縮放以適合？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ZOOM_IN ----

GTK_STOCK_ZOOM_IN
GTK_STOCK_ZOOM_IN
GTK_STOCK_ZOOM_IN自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“放大”或標籤“放大_In”。這？放大？項目。
另請參見
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ZOOM_OUT ----

GTK_STOCK_ZOOM_OUT
GTK_STOCK_ZOOM_OUT
GTK_STOCK_ZOOM_OUT自 3.10 版起已棄用，不應在新編寫的代碼中使用。使用命名圖示“縮小”或標籤“縮放_Out”。這？縮小？項目。[/代碼
另請參見
gtk3-Stock-Items


------------ KeyGTK3gtk_style_apply_default_background ----

gtk_style_apply_default_background
gtk_style_apply_default_background自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用GtkStyleContext
另請參見
GtkStyle


------------ KeyGTK3gtk_style_attach ----

gtk_style_attach
gtk_style_attach自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用gtk_widget_style_attach（）代替將樣式附加到視窗;這個過程分配顏色並為樣式創建GC - 它專門針對特定的視覺效果。如果樣式已經附加到具有不同樣式和視覺的視窗，則該過程可能涉及創建新樣式。由於此函數可能會返回一個新物件，因此您必須按以下方式使用它：style = gtk_style_attach（樣式，視窗）
語法
參數
style- 一個.GtkStyle
window- 一個.GdkWindow
返回
樣式或新創建的 .如果樣式是新創建的，則 style 參數將被取消引用，並且新樣式將具有屬於調用方的引用計數。GtkStyle
另請參見
GtkStyle


------------ KeyGTK3GTK_STYLE_ATTACHED ----

GTK_STYLE_ATTACHED
GTK_STYLE_ATTACHED()
語法
參數
style- 一個.GtkStyle
返回
樣式是否附加到視窗。
另請參見
GtkStyle


------------ KeyGTK3gtk_style_context_add_class ----

gtk_style_context_add_class
將樣式類添加到上下文中，因此togtk_style_context_get（） 或任何gtk_render_*（） 函數的後驗調用將使用此新類進行樣式設置。在 CSS 檔案格式中，定義一個 ？entry？類，將匹配：1[/syntax] [syntax]GtkEntry.entry { ... }[/語法]
雖然任何小部件定義了一個 ？條目？類將匹配： 1[/語法] [語法].條目 { ... }[/語法]GtkEntry
語法
參數
context- 一GtkStyleContext
class_name- 自 3.0 起在樣式
設置中使用的類名
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_add_provider ----

gtk_style_context_add_provider
將樣式提供程式添加到上下文中，以便在樣式構造中使用。請注意，此函數添加的樣式提供程式僅影響上下文所屬小部件的樣式。如果要影響所有小部件的樣式，usegtk_style_context_add_provider_for_screen（）。注： 如果兩個優先順序相同，則通過此函數添加的優先順序優先於另一個通過添加的gtk_style_context_add_provider_for_screen（）。GtkStyleProvider
語法
參數
context- 一GtkStyleContext
provider- 一GtkStyleProvider
priority- 樣式提供程式的優先順序。越低，它在樣式構造中使用的時間越早。通常，這將在自3.0
以來GTK_STYLE_PROVIDER_PRIORITY_FALLBACK andGTK_STYLE_PROVIDER_PRIORITY_USER
之間的範圍內
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_add_provider_for_screen ----

gtk_style_context_add_provider_for_screen
將全域樣式提供程式添加到螢幕，該提供程式將用於螢幕下所有樣式構造的樣式構造。GTK+ 使用它來使樣式資訊可用。注意：如果兩個優先順序相同，則通過 gtk_style_context_add_provider（） 添加的 A 優先於通過此函數添加的另一個優先順序。GtkStyleContextsGtkSettingsGtkStyleProvider
語法
參數
screen- 一GdkScreen
provider- 一GtkStyleProvider
priority- 樣式提供程式的優先順序。越低，它在樣式構造中使用的時間越早。通常，這將在自3.0
以來GTK_STYLE_PROVIDER_PRIORITY_FALLBACK andGTK_STYLE_PROVIDER_PRIORITY_USER
之間的範圍內
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_add_region ----

gtk_style_context_add_region
將區域添加到上下文中，因此togtk_style_context_get（） 或任何gtk_render_*（） 函數的後驗調用將利用此新區域進行樣式設置。在 CSS 檔案格式中，定義一個 “row？region” 將匹配：1[/syntax] [syntax]GtkTreeView row { ... }[/語法]
偽類用於匹配標誌，因此以下兩個規則：12[/語法] [語法]GtkTreeView 行：nth-child（even） { ... }GtkTreeView row：nth-child（odd） { ... }[/語法]
將分別應用於偶數行和奇數行。區域名稱只能包含小寫字母和?-?,始終以小寫字母開頭。GtkTreeView
語法
參數
context- 一GtkStyleContext
region_name- 用於樣式的區域名稱
flags- 自 3.0 起適用於該區域
的標誌
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_cancel_animations ----

gtk_style_context_cancel_animations
gtk_style_context_cancel_animations自 3.6 版起已棄用，不應在新編寫的代碼中使用。此函數不執行任何操作。停止region_id的所有正在運行的動畫以及其下的所有可動畫區域。NULL region_id將停止上下文中所有正在進行的動畫，當處理獲取的throughgtk_widget_get_style_context（））時，這通常是在您期望所有小部件都停止的所有情況下為您完成的，因此這應該僅用於具有不同動畫區域的複雜小部件。GtkStyleContext
語法
參數
context- 一GtkStyleContext
region_id- 要停止的可設置動畫區域，或 NULL。請參見 gtk_style_context_push_animatable_region（）。[允許-無]
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get ----

gtk_style_context_get
從給定狀態的上下文中檢索多個樣式屬性值。
語法
參數
context- 一GtkStyleContext
state- 要檢索其屬性值的狀態
...- 屬性名稱/返回值對，後跟 NULL
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_background_color ----

gtk_style_context_get_background_color
獲取給定狀態的背景色。
語法
參數
context- 一GtkStyleContext
state- 狀態以檢索顏色
color- 返回背景顏色的值。[輸出]
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_border ----

gtk_style_context_get_border
將給定狀態的邊框獲取為 .請參閱GTK_STYLE_PROPERTY_BORDER_WIDTH。GtkBorder
語法
參數
context- 一GtkStyleContext
state- 狀態以檢索其邊框
border- 返回邊框設置的值。[輸出]
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_border_color ----

gtk_style_context_get_border_color
獲取給定狀態的邊框顏色。
語法
參數
context- 一GtkStyleContext
state- 狀態以檢索顏色
color- 返回邊框顏色的值。[輸出]
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_color ----

gtk_style_context_get_color
獲取給定狀態的前景色。
語法
參數
context- 一GtkStyleContext
state- 狀態以檢索顏色
color- 前景色的返回值。[輸出]
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_direction ----

gtk_style_context_get_direction
gtk_style_context_get_direction自 3.8 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_style_context_get_state（） 並檢查 和。返回用於渲染的小部件方向。GTK_STATE_FLAG_DIR_LTRGTK_STATE_FLAG_DIR_RTL
語法
參數
context- 一GtkStyleContext
返回
自 3.0 以來的小部件方向
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_font ----

gtk_style_context_get_font
gtk_style_context_get_font自版本 3.8 起已棄用，不應在新編寫的代碼中使用。請改用 gtk_style_context_get（） 作為“字體”或子屬性。返回給定狀態的字體說明。返回的物件是 const，在信號發生之前將保持有效。?changed?
語法
參數
context- 一GtkStyleContext
state- 狀態以檢索字體
返回
對於給定狀態。此物件歸 GTK+ 所有，不應被棄用。[無轉移]
自 3.0 起PangoFontDescription
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_frame_clock ----

gtk_style_context_get_frame_clock
返回附加到的上下文。GdkFrameClock
語法
參數
context- 一GtkStyleContext
返回
a 或 NULLif 上下文沒有附加的幀時鐘。[無轉移]
3.8 起GdkFrameClock
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_junction_sides ----

gtk_style_context_get_junction_sides
返回渲染元素與其他元素在視覺上連接的邊。
語法
參數
context- 一GtkStyleContext
返回
結點側
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_margin ----

gtk_style_context_get_margin
以 .請參閱GTK_STYLE_PROPERTY_MARGIN。GtkBorder
語法
參數
context- 一GtkStyleContext
state- 狀態以檢索其邊框
margin- 邊距設置的返回值。[輸出]
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_padding ----

gtk_style_context_get_padding
將給定狀態的填充作為 .請參閱GTK_STYLE_PROPERTY_PADDING。GtkBorder
語法
參數
context- 一GtkStyleContext
state- 檢索填充的狀態
padding- 填充設置的返回值。[輸出]
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_parent ----

gtk_style_context_get_parent
獲取通過 gtk_style_context_set_parent（） 設置的父上下文。有關詳細資訊，請參閱該函數。
語法
參數
context- 一GtkStyleContext
返回
父上下文或 NULL。[無轉移]
自 3.4 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_path ----

gtk_style_context_get_path
返回用於樣式匹配的小部件路徑。
語法
參數
context- 一GtkStyleContext
返回
一個。[無轉移]
自 3.0 起GtkWidgetPath
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_property ----

gtk_style_context_get_property
從給定狀態的上下文中獲取樣式屬性。當不再需要值時，必須調用 g_value_unset（） 以釋放任何分配的記憶體。
語法
參數
context- 一GtkStyleContext
property- 樣式屬性名稱
state- 要檢索其屬性值的狀態
value- 樣式屬性值的返回位置。[輸出][轉移完整]
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_scale ----

gtk_style_context_get_scale
返回用於資產的比例。
語法
參數
context- 一GtkStyleContext
返回
自3.10以來的規模
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_screen ----

gtk_style_context_get_screen
返回附加到的上下文。GdkScreen
語法
參數
context- 一GtkStyleContext
返回
一個。[無轉移]GdkScreen
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_section ----

gtk_style_context_get_section
查詢 CSS 中為當前上下文定義屬性的位置。請注意，要查詢的狀態採用 fromgtk_style_context_get_state（）。如果該位置不可用，則返回 NULL。由於各種原因，該位置可能不可用，例如屬性被覆蓋，屬性未命名受支援的 CSS 屬性或跟蹤因性能原因而禁用的定義。無法查詢速記 CSS 屬性的位置，並且 willalways 將返回 NULL。
語法
參數
context- 一GtkStyleContext
property- 樣式屬性名稱
返回
NULL 或定義值的部分
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_state ----

gtk_style_context_get_state
返回呈現時使用的狀態。
語法
參數
context- 一GtkStyleContext
返回
自 3.0 以來的州旗
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_style ----

gtk_style_context_get_style
根據當前樣式從上下文中檢索多個構件樣式屬性。
語法
參數
context- 一GtkStyleContext
...- 屬性名稱/返回值對，後跟 NULL
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_style_property ----

gtk_style_context_get_style_property
獲取小部件樣式屬性的值。當不再需要值時，必須調用 g_value_unset（） 以釋放任何分配的記憶體。
語法
參數
context- 一GtkStyleContext
property_name- 小部件樣式屬性的名稱
value- 返回屬性值的位置
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_style_valist ----

gtk_style_context_get_style_valist
根據當前樣式從上下文中檢索多個構件樣式屬性。
語法
參數
context- 一GtkStyleContext
args- va_list屬性名稱/返回位置對，後跟 NULL
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_valist ----

gtk_style_context_get_valist
從給定狀態的上下文中檢索多個樣式屬性值。
語法
參數
context- 一GtkStyleContext
state- 要檢索其屬性值的狀態
args- va_list屬性名稱/返回位置對，後跟 NULL
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_has_class ----

gtk_style_context_has_class
如果上下文當前已定義給定的類名，則返回 TRUE
語法
參數
context- 一GtkStyleContext
class_name- 類名
返回
如果上下文自 3.0
起class_namedefined，則為 true
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_has_region ----

gtk_style_context_has_region
如果上下文定義了區域，則返回 TRUE。如果flags_return不為 NULL，則將其設置為影響該區域的標誌。
語法
參數
context- 一GtkStyleContext
region_name- 區域名稱
flags_return- 區域標誌的返回位置。[輸出][允許-無]
返回
如果區域是從 3.0 開始定義的
，則為 TRUE
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_invalidate ----

gtk_style_context_invalidate
gtk_style_context_invalidate自版本 3.12 起已棄用，不應在新編寫的代碼中使用。樣式上下文將自動失效。使上下文樣式資訊無效，因此將重新構造該資訊。如果您修改上下文並立即需要新資訊，這將非常有用。
語法
參數
context- 一個.
自 3.0 起GtkStyleContext
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_list_classes ----

gtk_style_context_list_classes
返回當前在上下文中定義的類的列表。
語法
參數
context- 一GtkStyleContext
返回
具有當前定義的類的字串。清單的內容歸GTK+所有，但是當您完成g_list_free（）時，您必須使用g_list_free（）釋放listitself。[轉移容器][元素型 utf8]
自 3.0 起GList
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_list_regions ----

gtk_style_context_list_regions
返回當前在上下文中定義的區域的清單。
語法
參數
context- 一GtkStyleContext
返回
具有當前定義區域的字串。清單的內容歸GTK+所有，但是當您完成g_list_free（）時，您必須使用g_list_free（）釋放listitself。[轉移容器][元素型 utf8]
自 3.0 起GList
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_lookup_color ----

gtk_style_context_lookup_color
查找並解析上下文色彩映射表中的顏色名稱。
語法
參數
context- 一GtkStyleContext
color_name- 顏色名稱查找
color- 查找顏色的返回位置。[輸出]
返回
如果找到並解決了color_namewas，則為 true，否則為 FALSE
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_lookup_icon_set ----

gtk_style_context_lookup_icon_set
gtk_style_context_lookup_icon_set自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_icon_theme_lookup_icon（）。在與上下文關聯的圖示工廠和預設圖示工廠中查找stock_id，如果找到，則返回圖示集，否則返回 NULL。
語法
參數
context- 一GtkStyleContext
stock_id- 圖示名稱
返回
查找的 GtkIconSet 或 NULL。[無轉移]
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_new ----

gtk_style_context_new
創建一個獨立的，這種樣式的上下文不會附加到任何小部件上，所以你可能想自己調用gtk_style_context_set_path（）。此函數僅在使用從 GTK+ 分離的主題層時才有用，如果您使用的是 totheme ，請使用 gtk_widget_get_style_context（） 以獲取樣式上下文，以便為小部件設置主題。GtkStyleContextGtkStyleContextGtkWidgets
返回
新創建的 .GtkStyleContext
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_notify_state_change ----

gtk_style_context_notify_state_change
gtk_style_context_notify_state_change自 3.6 版起已棄用，不應在新編寫的代碼中使用。此函數不執行任何操作。通知上下文的狀態更改，因此，如果當前樣式使用過渡動畫，則將啟動一個，以便region_id下的所有渲染元素都進行動畫處理，以便將狀態狀態設置為valuestate_value。使用 window 參數是為了在動畫運行時使渲染的區域失效，因此請確保它與 gtk_render_*（） 函數正在渲染的視窗相同。如果region_id為 NULL，則所有使用上下文呈現的元素都將受此狀態轉換的影響。作為一個實際的例子，在前燈狀態上通知狀態轉換：12345[/語法][語法]gtk_style_context_notify_state_change（上下文，gtk_widget_get_window（小部件），NULL，GTK_STATE_PRELIGHT，按鈕>in_button）;[/語法]
可以在 CSS 檔中像這樣處理： 12345678[/語法] [語法]GtkButton { background-color： #f00}GtkButton：hover { background-color： #fff; transition： 200ms linear}[/syntax]
如果指標進入按鈕，則將按鈕背景從紅色動畫化為白色，如果指標離開按鈕，則返回紅色。請注意，查找過渡參數時使用狀態，這就是樣式將過渡置於 ：hover 偽類下的原因。GtkButton
語法
參數
context- 一GtkStyleContext
window- 一GdkWindow
region_id- 要通知的可動畫區域，或 NULL。請參見 gtk_style_context_push_animatable_region（）。[允許-無]
state- 觸發轉換的狀態
state_value- TRUE 如果 state 是我們要更改為的狀態，則 FALSE 如果我們正在遠離它
，則為 FALSE 自 3.0
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_pop_animatable_region ----

gtk_style_context_pop_animatable_region
gtk_style_context_pop_animatable_region自 3.6 版起已棄用，不應在新編寫的代碼中使用。此函數不執行任何操作。從上下文中彈出可設置動畫的區域。請參見 gtk_style_context_push_animatable_region（）。
語法
參數
context- a
自3.0起GtkStyleContext
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_push_animatable_region ----

gtk_style_context_push_animatable_region
gtk_style_context_push_animatable_region自 3.6 版起已棄用，不應在新編寫的代碼中使用。此函數不執行任何操作。推送一個可設置動畫的區域，因此此調用與以下gtk_style_context_pop_animatable_region（）之間的所有進一步gtk_render_*（） 調用可能會顯示此區域的過渡動畫，ifgtk_style_context_notify_state_change（） 針對給定狀態調用，並且當前主題/樣式定義狀態更改的過渡動畫。使用的region_id在上下文中必須是唯一的，以便主題引擎可以唯一地標識受狀態轉換約束的呈現元素。
語法
參數
context- 一GtkStyleContext
region_id- 自 3.0 以來可動畫區域
的唯一識別碼
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_remove_class ----

gtk_style_context_remove_class
從上下文中刪除class_name。
語法
參數
context- 一GtkStyleContext
class_name- 自 3.0 起要刪除
的類名
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_remove_provider ----

gtk_style_context_remove_provider
從上下文中的樣式提供程式清單中刪除提供程式。
語法
參數
context- 一GtkStyleContext
provider- a
自3.0起GtkStyleProvider
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_remove_provider_for_screen ----

gtk_style_context_remove_provider_for_screen
從螢幕的全域樣式提供程式清單中刪除提供程式。
語法
參數
screen- 一GdkScreen
provider- a
自3.0起GtkStyleProvider
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_remove_region ----

gtk_style_context_remove_region
從上下文中刪除區域。
語法
參數
context- 一GtkStyleContext
region_name- 自 3.0 起要取消設置
的區域名稱
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_reset_widgets ----

gtk_style_context_reset_widgets
此函數重新計算特定下所有小部件的樣式。當某些全域參數已更改而影響所有小部件的外觀時，這很有用，因為當小部件獲得newstyle時，它將重新繪製和重新計算有關其外觀的任何緩存資訊。例如，當相關物件中的配色方案發生變化時，將使用它。GdkScreenGtkSettings
語法
參數
screen- a
自3.0起GdkScreen
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_restore ----

gtk_style_context_restore
將上下文狀態還原到上一階段。請參見 gtk_style_context_save（）。
語法
參數
context- a
自3.0起GtkStyleContext
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_save ----

gtk_style_context_save
保存上下文狀態，以便throughgtk_style_context_add_class（）、gtk_style_context_remove_class（）、gtk_style_context_add_region（）、gtk_style_context_remove_region（）或gtk_style_context_set_junction_sides（） 所做的所有修改都可以通過 gtk_style_context_restore（） 在 onego 中還原。
語法
參數
context- a
自3.0起GtkStyleContext
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_scroll_animations ----

gtk_style_context_scroll_animations
gtk_style_context_scroll_animations自版本 3.6 起已棄用，不應在新編寫的代碼中使用。此函數不執行任何操作。此函數類似於gdk_window_scroll（），並且應該與它一起調用，以便任何正在進行的動畫的無效區域都與它一起滾動。
語法
參數
context- 一GtkStyleContext
window- 以前使用過的ingtk_style_context_notify_state_change（）GdkWindow
dx- 在X軸上滾動的量
dy- 自 3.0 起在 Y 軸
上滾動的量
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_background ----

gtk_style_context_set_background
將視窗的背景設置為在其當前狀態的上下文中指定的背景圖案或顏色。
語法
參數
context- 一GtkStyleContext
window- a
自3.0起GdkWindow
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_direction ----

gtk_style_context_set_direction
gtk_style_context_set_direction自版本 3.8 起已棄用，不應在新編寫的代碼中使用。請改用 gtk_style_context_set_state（） 和。設置用於呈現目的的閱讀方向。如果您使用的是返回的fromgtk_widget_get_style_context（），則無需自行調用。GTK_STATE_FLAG_DIR_LTRGTK_STATE_FLAG_DIR_RTLGtkStyleContext
語法
參數
context- 一GtkStyleContext
direction- 新的方向。
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_frame_clock ----

gtk_style_context_set_frame_clock
將上下文附加到給定的幀時鐘。幀時鐘用於動畫的計時。如果您使用的是返回的fromgtk_widget_get_style_context（），則無需自行調用。GtkStyleContext
語法
參數
context- 一GdkFrameClock
frame_clock- a
自3.8起GdkFrameClock
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_junction_sides ----

gtk_style_context_set_junction_sides
設置渲染元素（主要是throughgtk_render_frame（）））將與其他可視元素直觀連接的位置。這只是一個暗示，可能會或可能不會被主題引擎所尊重。容器小部件應為其子項適當地設置交匯點提示，因此通常不需要手動調用此函數。
語法
參數
context- 一GtkStyleContext
sides- 自 3.0 以來，渲染元素在視覺上連接到其他元素
的邊
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_parent ----

gtk_style_context_set_parent
設置上下文的父樣式上下文。父樣式上下文用於實現屬性的繼承。如果您使用的是返回的fromgtk_widget_get_style_context（），則將為您設置父級。GtkStyleContext
語法
參數
context- 一GtkStyleContext
parent- 新的父項或 NULL。[允許-無]
自 3.4 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_path ----

gtk_style_context_set_path
設置用於樣式匹配的。作為等式序列，樣式將重新生成以匹配新的給定路徑。如果您使用的是返回的fromgtk_widget_get_style_context（），則無需自己調用它。GtkWidgetPathGtkStyleContext
語法
參數
context- 一GtkStyleContext
path- a
自3.0起GtkWidgetPath
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_scale ----

gtk_style_context_set_scale
設置獲取樣式的圖像資源時要使用的比例。
語法
參數
context- 一GtkStyleContext
scale- 規模
自3.10
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_screen ----

gtk_style_context_set_screen
將上下文附加到給定螢幕。該螢幕用於從“全域”添加樣式資訊？樣式提供程式，例如螢幕實例。如果您使用的是返回的fromgtk_widget_get_style_context（），則無需自行調用。GtkSettingsGtkStyleContext
語法
參數
context- 一GtkStyleContext
screen- a
自3.0起GdkScreen
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_state ----

gtk_style_context_set_state
設置使用任意gtk_render_*（） 函數進行渲染時要使用的狀態。
語法
參數
context- 一GtkStyleContext
flags- 狀態表示
自 3.0 以來
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_context_state_is_running ----

gtk_style_context_state_is_running
gtk_style_context_state_is_running自 3.6 版起已棄用，不應在新編寫的代碼中使用。如果當前區域正在運行過渡動畫，則此函數始終返回 FALSEReturns TRUE（請參見gtk_style_context_push_animatable_region（））。如果進度不為 NULL，則將返回動畫進度，0.0 表示狀態最接近未設置，而 1.0 表示最接近設置的狀態。這意味著，當設置狀態時，過渡動畫將從 0 運行到 1;當它未設置時，過渡動畫將從 1 運行到 0。
語法
參數
context- 一GtkStyleContext
state- 小部件狀態
progress- 返回轉換進度的位置。[輸出]
返回
如果狀態有正在運行的過渡動畫，則為 TRUE。
自 3.0 起
另請參見
GtkStyleContext


------------ KeyGTK3gtk_style_copy ----

gtk_style_copy
gtk_style_copy自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用改為創建傳入物件的副本。GtkStyleContextGtkStyle
語法
參數
style- 一GtkStyle
返回
樣式的副本。[轉移完整]
另請參見
GtkStyle


------------ KeyGTK3gtk_style_detach ----

gtk_style_detach
gtk_style_detach自 3.0 版起已棄用，不應在新編寫的代碼中使用。請改用從視窗刪除樣式。如果樣式不再附加到任何視窗，則它未實現。請參見gtk_style_attach（）。GtkStyleContext
語法
參數
style- 一GtkStyle
另請參見
GtkStyle


------------ KeyGTK3gtk_style_get ----

gtk_style_get
gtk_style_get已棄用，不應在新編寫的代碼中使用。獲取widget_typefrom樣式的多個樣式屬性的值。
語法
參數
style- 一GtkStyle
widget_type- 的後代GTypeGtkWidget
first_property_name- 要獲取的第一個樣式屬性的名稱
...- 屬性名稱和位置對將返回屬性值，從位置forfirst_property_name開始，以 NULL 結尾。
2.16 起
另請參見
GtkStyle


------------ KeyGTK3gtk_style_get_style_property ----

gtk_style_get_style_property
gtk_style_get_style_property已棄用，不應在新編寫的代碼中使用。查詢 與 awidget 類對應的樣式屬性的值是否在給定樣式中。
語法
參數
style- 一GtkStyle
widget_type- 的後代GTypeGtkWidget
property_name- 要獲取的樣式屬性的名稱
value- a 自 2.16 起存儲
被查詢屬性的值GValue
另請參見
GtkStyle


------------ KeyGTK3gtk_style_get_valist ----

gtk_style_get_valist
gtk_style_get_valist已棄用，不應在新編寫的代碼中使用。gtk_style_get（） 的非變性變體。主要由語言綁定使用。
語法
參數
style- 一GtkStyle
widget_type- 的後代GTypeGtkWidget
first_property_name- 要獲取的第一個樣式屬性的名稱
var_args- 屬性名稱和位置對的va_list，用於返回屬性值，從first_property_name的位置開始。
2.16 起
另請參見
GtkStyle


------------ KeyGTK3gtk_style_has_context ----

gtk_style_has_context
gtk_style_has_context已棄用，不應在新編寫的代碼中使用。返回樣式是否具有關聯的 .GtkStyleContext
語法
參數
style- 一GtkStyle
返回
true 如果 style 有一個
自 3.0GtkStyleContext
另請參見
GtkStyle


------------ KeyGTK3gtk_style_lookup_color ----

gtk_style_lookup_color
gtk_style_lookup_color自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用gtk_style_context_lookup_color（） 代替在樣式的邏輯顏色映射中查找color_name，填充顏色並在找到時返回 TRUE，否則返回 FALSE。不要緩存找到的映射，因為它取決於主題切換發生時，並且可能會更改。GtkStyle
語法
參數
style- 一GtkStyle
color_name- 要查找的邏輯顏色的名稱
color- 要填寫。GdkColor
返回
如果找到映射，則為 TRUE。
自 2.10 起
另請參見
GtkStyle


------------ KeyGTK3gtk_style_lookup_icon_set ----

gtk_style_lookup_icon_set
gtk_style_lookup_icon_set自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用gtk_style_context_lookup_icon_set（） 代替在與 style 和預設圖示工廠關聯的圖示工廠中查找stock_id，如果找到，則返回圖示集，否則為 NULL。
語法
參數
style- 一GtkStyle
stock_id- 圖示名稱
返回
stock_id的圖示集。 [無轉移]
另請參見
GtkStyle


------------ KeyGTK3gtk_style_new ----

gtk_style_new
gtk_style_new自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 創建新 .GtkStyleContextGtkStyle
返回
一個新的.GtkStyle
另請參見
GtkStyle


------------ KeyGTK3gtk_style_properties_clear ----

gtk_style_properties_clear
清除道具中的所有樣式資訊。
語法
參數
props- 一GtkStyleProperties
另請參見
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_get ----

gtk_style_properties_get
從道具中檢索多個樣式屬性值，以獲取 agiven 狀態。
語法
參數
props- 一GtkStyleProperties
state- 要檢索其屬性值的狀態
...- 屬性名稱/返回值對，後跟 NULL
自 3.0 起
另請參見
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_get_property ----

gtk_style_properties_get_property
從給定狀態的 props 中獲取樣式屬性。當使用值時，需要調用g_value_unset（）來釋放任何分配的記憶體。
語法
參數
props- 一GtkStyleProperties
property- 樣式屬性名稱
state- 要檢索其屬性值的狀態
value- 樣式屬性值的返回位置。[輸出][轉移完整]
返回
如果屬性存在於 props 中，則為 TRUE，否則為 FALSE，因為
3.0
另請參見
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_get_valist ----

gtk_style_properties_get_valist
從給定狀態的 props 中檢索多個樣式屬性值。
語法
參數
props- 一GtkStyleProperties
state- 要檢索其屬性值的狀態
args- va_list屬性名稱/返回位置對，後跟 NULL
自 3.0 起
另請參見
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_lookup_color ----

gtk_style_properties_lookup_color
gtk_style_properties_lookup_color自 3.8 版起已棄用，不應在新編寫的代碼中使用。已棄用。返回映射到名稱的符號顏色。GtkSymbolicColor
語法
參數
props- 一GtkStyleProperties
name- 顏色名稱查找
返回
映射的顏色。[無轉移]
自 3.0 起
另請參見
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_lookup_property ----

gtk_style_properties_lookup_property
gtk_style_properties_lookup_property自版本 3.8 起已棄用，不應在新編寫的代碼中使用。此代碼只能查找自訂屬性，這些屬性已棄用。如果已註冊屬性，則返回 TRUE;如果 pspec orparse_func不為 NULL，則將分別返回 和 分析函數。GParamSpec
語法
參數
property_name- 要查找的屬性名稱
parse_func- 返回解析函數的位置。[輸出]
pspec- 返回位置的 .[輸出][無轉移]GParamSpec
返回
如果屬性已註冊，則為 TRUE，否則為
FALSE 自 3.0 起
另請參見
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_map_color ----

gtk_style_properties_map_color
gtk_style_properties_map_color自版本 3.8 起已棄用，不應在新編寫的代碼中使用。已棄用。地圖顏色，以便可以按名稱引用。Seegtk_style_properties_lookup_color（）GtkSymbolicColor
語法
參數
props- 一GtkStyleProperties
name- 顏色名稱
color  -  	GtkSymbolicColor將 nameto 映射到
3.0 以來
另請參見
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_merge ----

gtk_style_properties_merge
將props_to_merge中包含的所有樣式資訊合併到道具中。如果替換為 TRUE，則將覆蓋這些值，如果它是 FALSE，則以較舊的值為准。
語法
參數
props- 一GtkStyleProperties
props_to_merge- 一秒鐘GtkStyleProperties
replace- 是否替換值
自 3.0
另請參見
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_new ----

gtk_style_properties_new
返回新創建的GtkStyleProperties
返回
一個新的GtkStyleProperties
另請參見
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_register_property ----

gtk_style_properties_register_property
gtk_style_properties_register_property自版本 3.8 起已棄用，不應在新編寫的代碼中使用。代碼應使用 CSS 提供的預設屬性。註冊一個屬性，以便它可以在 CSS 檔案格式中使用。此函數是低級等效ofgtk_theming_engine_register_property（），如果要實現主題引擎，則需要改用該函數。
語法
參數
parse_func- 解析函數使用，或 NULL
pspec- 自3.0以來的新屬性
GParamSpec
另請參見
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_set ----

gtk_style_properties_set
在道具上設置多個樣式屬性。
語法
參數
props- 一GtkStyleProperties
state- 狀態以設置其值
...- 屬性名稱/值對，後跟 NULL
自 3.0 起
另請參見
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_set_property ----

gtk_style_properties_set_property
在道具中設置樣式屬性。
語法
參數
props- 一GtkStyleProperties
property- 要設置的樣式屬性
state- 要為其設置值的狀態
value- 自3.0以來該屬性
的新值
另請參見
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_set_valist ----

gtk_style_properties_set_valist
在道具上設置多個樣式屬性。
語法
參數
props- 一GtkStyleProperties
state- 狀態以設置其值
args- va_list屬性名稱/值對，後跟 NULL
自 3.0 起
另請參見
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_unset_property ----

gtk_style_properties_unset_property
取消設置屬性中的樣式屬性。
語法
參數
props- 一GtkStyleProperties
property- 要取消設置的屬性
state- 狀態為自
3
.
另請參見
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_provider_get_icon_factory ----

gtk_style_provider_get_icon_factory
gtk_style_provider_get_icon_factory自 3.8 版起已棄用，不應在新編寫的代碼中使用。對於 GTK 提供的所有樣式提供程式，將始終返回 NULL。返回要用於路徑的定義，如果未定義，則返回 NULL。GtkIconFactory
語法
參數
provider- 一GtkStyleProvider
path  -  	GtkWidgetPath進行查詢
返回
用於路徑的圖示工廠，或 NULL。[無轉移]
自 3.0 起
另請參見
GtkStyleProvider


------------ KeyGTK3gtk_style_provider_get_style ----

gtk_style_provider_get_style
gtk_style_provider_get_style自 3.8 版起已棄用，不應在新編寫的代碼中使用。對於所有 GTK 提供的樣式提供程式，將始終返回 NULL，因為介面無法按照指定 CSS 的方式正確工作。返回影響由 path 定義的構件的樣式設置，或者 NULL（如果提供者不考慮樣式路徑）。
語法
參數
provider- 一GtkStyleProvider
path  -  	GtkWidgetPath進行查詢
返回
a 包含影響路徑的樣式設置。[轉移完整]
自 3.0 起GtkStyleProperties
另請參見
GtkStyleProvider


------------ KeyGTK3gtk_style_provider_get_style_property ----

gtk_style_provider_get_style_property
查找由提供程式為 path 表示的小部件定義的小部件樣式屬性。
語法
參數
provider- 一GtkStyleProvider
path  -  	GtkWidgetPath進行查詢
state- 查詢樣式屬性的狀態
pspec- 查詢GParamSpec
value- 返回屬性值的位置。[輸出]
返回
如果找到該屬性並且具有值，則為 TRUE，否則為
FALSE From 3。
另請參見
GtkStyleProvider


------------ KeyGTK3gtk_style_render_icon ----

gtk_style_render_icon
gtk_style_render_icon自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_render_icon_pixbuf（） 代替根據給定參數以給定大小呈現源指定的圖示，並以 apixbuf 的形式返回結果。
語法
參數
style- 一GtkStyle
source- 指定要渲染的圖示GtkIconSource
direction- 文本方向
state- 一種狀態
size- 渲染圖示的大小。大小 （GtkIconSize）-1 表示以源的大小呈現，並且不按比例進行渲染。[鍵入整型]
widget- 小部件。[允許-無]
detail- 樣式細節。[允許-無]
返回
包含渲染圖示的新創建。[轉移完整]GdkPixbuf
另請參見
GtkStyle


------------ KeyGTK3gtk_style_set_background ----

gtk_style_set_background
gtk_style_set_background自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_style_context_set_background（） 代替將視窗的背景設置為由給定狀態的樣式指定的背景色或圖元貼圖。
語法
參數
style- 一GtkStyle
window- 一GdkWindow
state_type- 一種狀態
另請參見
GtkStyle


------------ KeyGTK3gtk_switch_get_active ----

gtk_switch_get_active
獲取 是否在其 ？on 中？還是？關閉？州。GtkSwitch
語法
參數
sw- 一GtkSwitch
返回
如果 為活動狀態，則為 TRUE，否則為 FALSE，因為
3.GtkSwitch
另請參見
GtkSwitch


------------ KeyGTK3gtk_switch_new ----

gtk_switch_new
創建新的構件。GtkSwitch
返回
自 3.0 以來新創建的實例
GtkSwitch
另請參見
GtkSwitch


------------ KeyGTK3gtk_switch_set_active ----

gtk_switch_set_active
將 sw 的狀態更改為所需的狀態。
語法
參數
sw- 一GtkSwitch
is_active- 如果 swshould 處於活動狀態，則為 TRUE，否則為
FALSE 自 3.0 起
另請參見
GtkSwitch


------------ KeyGTK3gtk_symbolic_color_new_alpha ----

gtk_symbolic_color_new_alpha
gtk_symbolic_color_new_alpha自版本 3.8 起已棄用，不應在新編寫的代碼中使用。已棄用。通過修改顏色的相對 alpha 值來創建符號顏色。因數 1.0 <將解析為更透明的顏色，而> 1.0 將解析為更不透明的顏色。GtkSymbolicColor
語法
參數
color- 另一個GtkSymbolicColor
factor- 適用於色相的因數
返回
新創建的
自 3.0 以來GtkSymbolicColor
另請參見
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_new_literal ----

gtk_symbolic_color_new_literal
gtk_symbolic_color_new_literal自 3.8 版起已棄用，不應在新編寫的代碼中使用。已棄用。創建指向文字顏色的符號顏色。GtkSymbolicColor
語法
參數
color- 一GdkRGBA
返回
a 自 3.0 以來新創建的
GtkSymbolicColor
另請參見
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_new_mix ----

gtk_symbolic_color_new_mix
gtk_symbolic_color_new_mix自 3.8 版起已棄用，不應在新編寫的代碼中使用。已棄用。創建定義為另二種顏色混合的符號顏色。混合因數 0 將解析為 color1，而因數 1 將解析為 color2。GtkSymbolicColor
語法
參數
color1- 顏色混合
color2- 另一種顏色混合
factor- 混合因數
返回
新創建的
自 3.0 以來GtkSymbolicColor
另請參見
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_new_name ----

gtk_symbolic_color_new_name
gtk_symbolic_color_new_name自版本 3.8 起已棄用，不應在新編寫的代碼中使用。已棄用。創建指向未解析命名顏色的符號顏色。請參見gtk_style_context_lookup_color（） andgtk_style_properties_lookup_color（）。GtkSymbolicColor
語法
參數
name- 顏色名稱
返回
a 自 3.0 以來新創建的
GtkSymbolicColor
另請參見
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_new_shade ----

gtk_symbolic_color_new_shade
gtk_symbolic_color_new_shade自 3.8 版起已棄用，不應在新編寫的代碼中使用。已棄用。創建定義為其他顏色的陰影的符號顏色。因數 > 1.0 將解析為較亮的顏色，而因數 1.0 將解析為較亮的顏色，而 < 1.0 將解析為較深的顏色。GtkSymbolicColor
語法
參數
color- 另一個GtkSymbolicColor
factor- 應用於顏色的陰影因數
返回
新創建的
自 3.0 以來GtkSymbolicColor
另請參見
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_new_win32 ----

gtk_symbolic_color_new_win32
gtk_symbolic_color_new_win32自版本 3.8 起已棄用，不應在新編寫的代碼中使用。已棄用。基於當前 win32 主題創建符號顏色。請注意，雖然此調用在所有平臺上都可用，但返回的實際值在非 win32 平臺上並不可靠。GtkSymbolicColor
語法
參數
theme_class- 從中提取顏色的主題類
id- 顏色 ID
返回
新創建的
自 3.4GtkSymbolicColor
另請參見
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_ref ----

gtk_symbolic_color_ref
gtk_symbolic_color_ref自 3.8 版起已棄用，不應在新編寫的代碼中使用。已棄用。增加顏色的參考計數GtkSymbolicColor
語法
參數
color- 一GtkSymbolicColor
返回
自 3.0 以來的相同顏色
另請參見
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_resolve ----

gtk_symbolic_color_resolve
gtk_symbolic_color_resolve自 3.8 版起已棄用，不應在新編寫的代碼中使用。已棄用。如果顏色是可解析的，則將使用解析的顏色填充resolved_color，並返回 TRUE。通常，如果顏色無法解析，則是由於它被定義在道具中不存在的命名顏色之上。當 props 為 NULL 時，命名顏色的解析將失敗，因此，如果顏色是或引用此類顏色，則此函數將返回 FALSE。GtkSymbolicColor
語法
參數
color- 一GtkSymbolicColor
props  -  	 GtkStyleProperties以在解析命名顏色時使用，或 NULL。[允許-無]
resolved_color- 解析顏色的返回位置。[輸出]
返回
如果顏色自 3.0 以來已解析
，則為 TRUE
另請參見
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_to_string ----

gtk_symbolic_color_to_string
gtk_symbolic_color_to_string自 3.8 版起已棄用，不應在新編寫的代碼中使用。已棄用。將給定顏色轉換為字串表示形式。這對於調試和字串的序列化非常有用。字串的格式可能會在不同版本的GTK之間發生變化，但可以保證GTK css解析器能夠讀取字串並從中創建相同的符號顏色。GtkSymbolicColor
語法
參數
color- 顏色轉換為字串
返回
表示 colo 的新字串
另請參見
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_unref ----

gtk_symbolic_color_unref
gtk_symbolic_color_unref自 3.8 版起已棄用，不應在新編寫的代碼中使用。已棄用。減少顏色的引用計數，如果引用計數達到 0，則釋放其記憶體。GtkSymbolicColor
語法
參數
color- a
自3.0起GtkSymbolicColor
另請參見
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_table_attach ----

gtk_table_attach
gtk_table_attach自 3.4 版起已棄用，不應在新編寫的代碼中使用。將 gtk_grid_attach（） 與 .請注意，這兩個函數之間的附加參數不同。將構件添加到表中。“細胞”的數量？小部件將佔用由left_attach，right_attach，top_attach和bottom_attach指定。它們分別表示表的最左側、最右側、最上部和最低的列號和行號。（列和行從零開始編制索引）。要使按鈕佔據 2x2 表的右下儲存格，請使用 12345[/語法] [語法]gtk_table_attach（表、按鈕、1、2、// 左、右附加 1、2、// 頂部、底部附加 xoptions、yoptions、xpadding、ypadding）;[/語法]
如果要使按鈕跨越整個底部行，請改用 left_attach == 0 和 right_attach = 2。GtkGrid
語法
參數
table- 要添加新的小部件。GtkTable
child- 要添加的小部件。
left_attach- 要將子構件的左側附加到的列號。
right_attach- 要將子構件的右側附加到的列號。
top_attach- 要將子構件的頂部附加到的行號。
bottom_attach- 要將子構件的底部附加到的行號。
xoptions- 用於在調整表大小時指定子構件的屬性。
yoptions- 與 xoptions 相同，只是此欄位確定垂直調整大小的行為。
xpadding- 一個整數值，用於指定要添加到表中的小部件的左側和右側的填充。
ypadding- 子小部件上方和下方的填充量。
另請參見
GtkTable


------------ KeyGTK3gtk_table_attach_defaults ----

gtk_table_attach_defaults
gtk_table_attach_defaults自 3.4 版起已棄用，不應在新編寫的代碼中使用。將 gtk_grid_attach（） 與 .請注意，這兩個函數之間的附加參數不同。由於有許多與gtk_table_attach（）相關的選項，因此此便利功能為程式師提供了一種將子項添加到表中的方法，具有固定的填充和擴展選項。用於 的值GTK_EXPAND |GTK_FILL，並且填充設置為 0。GtkGridGtkAttachOptions
語法
參數
table- 要向其添加新子構件的表。
widget- 要添加的子小部件。
left_attach- 要將子構件的左側附加到的列號。
right_attach- 要將子構件的右側附加到的列號。
top_attach- 要將子構件的頂部附加到的行號。
bottom_attach- 要將子構件的底部附加到的行號。
另請參見
GtkTable


------------ KeyGTK3gtk_table_get_col_spacing ----

gtk_table_get_col_spacing
gtk_table_get_col_spacing自版本 3.4 起已棄用，不應在新編寫的代碼中使用。不提供此功能的替代品。獲取列 col 和列 col + 1 之間的間距量。請參見gtk_table_set_col_spacing（）。GtkGrid
語法
參數
table- 一GtkTable
column- 表中的一列，0 表示第一列
返回
列間距
另請參見
GtkTable


------------ KeyGTK3gtk_table_get_default_col_spacing ----

gtk_table_get_default_col_spacing
gtk_table_get_default_col_spacing自版本 3.4 起已棄用，不應在新編寫的代碼中使用。將 gtk_grid_get_column_spacing（） 與 .獲取表的默認列間距。這是將用於新添加列的間距。（參見gtk_table_set_col_spacings（））GtkGrid
語法
參數
table- 一GtkTable
返回
默認列間距
另請參見
GtkTable


------------ KeyGTK3gtk_table_get_default_row_spacing ----

gtk_table_get_default_row_spacing
gtk_table_get_default_row_spacing自版本 3.4 起已棄用，不應在新編寫的代碼中使用。將 gtk_grid_get_row_spacing（） 與 .獲取表的默認行間距。這是將用於新添加的行的間距。（參見gtk_table_set_row_spacings（））GtkGrid
語法
參數
table- 一GtkTable
返回
默認行距
另請參見
GtkTable


------------ KeyGTK3gtk_table_get_homogeneous ----

gtk_table_get_homogeneous
gtk_table_get_homogeneous自 3.4 版起已棄用，不應在新編寫的代碼中使用。將 gtk_grid_get_row_homogeneous（） 和 gtk_grid_get_column_homogeneous（） 與 一起使用。返回表格儲存格是否全部限制為相同寬度和高度。（參見 gtk_table_set_homogeneous（））GtkGrid
語法
參數
table- 一GtkTable
返回
如果儲存格全部限制為相同大小，則為 TRUE
另請參見
GtkTable


------------ KeyGTK3gtk_table_get_row_spacing ----

gtk_table_get_row_spacing
gtk_table_get_row_spacing自 3.4 版起已棄用，不應在新編寫的代碼中使用。不提供此功能的替代品。獲取行行與行 + 1 之間的間距量。請參見 gtk_table_set_row_spacing（）。GtkGrid
語法
參數
table- 一GtkTable
row- 表中的一行，0 表示第一行
返回
行距
另請參見
GtkTable


------------ KeyGTK3gtk_table_get_size ----

gtk_table_get_size
gtk_table_get_size自版本 3.4 起已棄用，不應在新編寫的代碼中使用。不公開列數和行數。獲取表中的行數和列數。GtkGrid
語法
參數
table- 一GtkTable
rows- 返回行數的位置，或 NULL。[輸出][允許-無]
columns- 返回列數的位置，或 NULL。[輸出][允許-無]
2.22 起
另請參見
GtkTable


------------ KeyGTK3gtk_table_new ----

gtk_table_new
gtk_table_new自版本 3.4 起已棄用，不應在新編寫的代碼中使用。使用 gtk_grid_new（）。用於創建新的表構件。必須通過指定表應具有的行數和列數來給出初始大小，儘管以後可以使用gtk_table_resize（） 進行更改。行和列都必須在 1 的範圍內 。.65535. 由於歷史原因，0 被接受得很好，並被默默地解釋為 1。
語法
參數
rows- 新表應具有的行數。
columns- 新表應具有的列數。
homogeneous- 如果設置為 TRUE，則所有表格儲存格的大小都將調整為包含最大構件的儲存格的大小。
返回
指向新創建的表構件的指標。
另請參見
GtkTable


------------ KeyGTK3gtk_table_resize ----

gtk_table_resize
gtk_table_resize自 3.4 版起已棄用，不應在新編寫的代碼中使用。自動調整大小。如果在創建表後需要更改表的大小，則此函數允許您執行此操作。GtkGrid
語法
參數
table- 您希望更改的大小。GtkTable
rows- 新的行數。
columns- 新的列數。
另請參見
GtkTable


------------ KeyGTK3gtk_table_set_col_spacing ----

gtk_table_set_col_spacing
gtk_table_set_col_spacing自 3.4 版起已棄用，不應在新編寫的代碼中使用。如果需要此功能，請在行中包含的小元件上使用 gtk_widget_set_margin_start（） 和 gtk_widget_set_margin_end（）。 不支持每行間距。更改給定表列與以下列之間的間距量。GtkGrid
語法
參數
table- 一個.GtkTable
column- 應更改其間距的列。
spacing- 間距應佔用的圖元數。
另請參見
GtkTable


------------ KeyGTK3gtk_table_set_col_spacings ----

gtk_table_set_col_spacings
gtk_table_set_col_spacings自 3.4 版起已棄用，不應在新編寫的代碼中使用。將 gtk_grid_set_column_spacing（） 與 一起使用。將表中每列之間的間距設置為等於間距。GtkGrid
語法
參數
table- 一個.GtkTable
spacing- 要放置在表格中每列之間的空間圖元數。
另請參見
GtkTable


------------ KeyGTK3gtk_table_set_homogeneous ----

gtk_table_set_homogeneous
gtk_table_set_homogeneous自 3.4 版起已棄用，不應在新編寫的代碼中使用。將 gtk_grid_set_row_homogeneous（） 和 gtk_grid_set_column_homogeneous（） 與 一起使用。更改表儲存格的同構屬性，即。所有儲存格的大小是否相等。GtkGrid
語法
參數
table- 您希望設置的齊次屬性。GtkTable
homogeneous- 設置為 TRUE 以確保所有表格儲存格的大小相同。Setto FALSE 如果這不是您想要的行為。
另請參見
GtkTable


------------ KeyGTK3gtk_table_set_row_spacing ----

gtk_table_set_row_spacing
gtk_table_set_row_spacing自版本 3.4 起已棄用，不應在新編寫的代碼中使用。如果需要此功能，請在行中包含的小部件上使用 gtk_widget_set_margin_top（） 和 gtk_widget_set_margin_bottom（）。 不支持每行間距。更改給定表行和後續行之間的間距。GtkGrid
語法
參數
table- 包含要更改其屬性的行。GtkTable
row- 行號，其間距將被更改。
spacing- 間距應佔用的圖元數。
另請參見
GtkTable


------------ KeyGTK3gtk_table_set_row_spacings ----

gtk_table_set_row_spacings
gtk_table_set_row_spacings自 3.4 版起已棄用，不應在新編寫的代碼中使用。將 gtk_grid_set_row_spacing（） 與 .將表中每行之間的間距設置為等於間距。GtkGrid
語法
參數
table- 一個.GtkTable
spacing- 要在表格中的每一行之間放置空間的圖元數。
另請參見
GtkTable


------------ KeyGTK3gtk_targets_include_image ----

gtk_targets_include_image
確定目標中的任何目標是否可用於提供 .GdkPixbuf
語法
參數
targets- 一個陣列。[陣列長度 = n_targets]GdkAtoms
n_targets- 目標的長度
writable- 是否只接受GTK +知道如何將pixbuf轉換為格式的目標
返回
如果目標包含圖像的合適目標，則為 TRUE，否則為 FALSE。
自 2.10 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_targets_include_rich_text ----

gtk_targets_include_rich_text
確定目標中的任何目標是否可用于提供格式文本。
語法
參數
targets- 一個陣列。[陣列長度 = n_targets]GdkAtoms
n_targets- 目標的長度
buffer- 一GtkTextBuffer
返回
如果目標包含適合富文本的目標，則為 TRUE，否則為 FALSE。
自 2.10 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_targets_include_text ----

gtk_targets_include_text
確定目標中的任何目標是否可用于提供文本。
語法
參數
targets- 一個陣列。[陣列長度 = n_targets]GdkAtoms
n_targets- 目標的長度
返回
如果目標包含適合文本的目標，則為 TRUE，否則為 FALSE。
自 2.10 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_targets_include_uri ----

gtk_targets_include_uri
確定目標中的任何目標是否可用於提供 uri 列表。
語法
參數
targets- 一個陣列。[陣列長度 = n_targets]GdkAtoms
n_targets- 目標的長度
返回
TRUE 如果目標包含適合 uri 清單的目標，則為 TRUE，否則為 FALSE。
自 2.10 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_target_entry_copy ----

gtk_target_entry_copy
創建 及其資料的副本。GtkTargetEntry
語法
參數
data- 指向GtkTargetEntry
返回
指向數據副本的指標。帶gtk_target_entry_free（）
另請參見
gtk3-Selections


------------ KeyGTK3gtk_target_entry_free ----

gtk_target_entry_free
釋放返回的 fromgtk_target_entry_new（） 或 gtk_target_entry_copy（）。GtkTargetEntry
語法
參數
data- 指向 .GtkTargetEntry
另請參見
gtk3-Selections


------------ KeyGTK3gtk_target_entry_new ----

gtk_target_entry_new
製作一個新的 .GtkTargetEntry
語法
參數
target- 目標的字串識別字
flags- 一組標誌，請參閱GtkTargetFlags
info- 將傳遞回應用程式的 ID
返回
指向新 .帶gtk_target_entry_free（）GtkTargetEntry
另請參見
gtk3-Selections


------------ KeyGTK3gtk_target_list_add ----

gtk_target_list_add
將另一個目標追加到 .GtkTargetList
語法
參數
list- 一GtkTargetList
target- 代表目標的實習原子
flags- 此目標的標誌
info- 將傳遞回應用程式的 ID
另請參見
gtk3-Selections


------------ KeyGTK3gtk_target_list_add_image_targets ----

gtk_target_list_add_image_targets
將 支援的映射目標追加到目標清單中。所有目標都使用相同的資訊添加。GtkSelectionData
語法
參數
list- 一GtkTargetList
info- 將傳遞回應用程式的 ID
writable- 是否僅添加GTK +知道如何將pixbuf轉換為自2.6以來的格式
的目標
另請參見
gtk3-Selections


------------ KeyGTK3gtk_target_list_add_rich_text_targets ----

gtk_target_list_add_rich_text_targets
將註冊的withgtk_text_buffer_register_serialize_format（） orgtk_text_buffer_register_deserialize_format（） 的富文本目標追加到目標清單中。所有目標都使用相同的資訊添加。
語法
參數
list- 一GtkTargetList
info- 將傳遞回應用程式的 ID
deserializable- 如果為 TRUE，則將添加可反序列化的富文本格式，否則為可序列化的格式。
buffer- 一個.
自 2.10 起GtkTextBuffer
另請參見
gtk3-Selections


------------ KeyGTK3gtk_target_list_add_table ----

gtk_target_list_add_table
將 的表預置到目標清單。GtkTargetEntry
語法
參數
list- 一GtkTargetList
targets- 的表。[陣列長度 = n 目標]GtkTargetEntry
ntargets- 表中的目標數量
另請參見
gtk3-Selections


------------ KeyGTK3gtk_target_list_add_text_targets ----

gtk_target_list_add_text_targets
將 支援的文本目標追加到目標清單中。所有目標都使用相同的資訊添加。GtkSelectionData
語法
參數
list- 一GtkTargetList
info- 自 2.6 起將傳遞回應用程式的
ID
另請參見
gtk3-Selections


------------ KeyGTK3gtk_target_list_add_uri_targets ----

gtk_target_list_add_uri_targets
將 支援的 URI 目標追加到目標清單中。所有目標都使用相同的資訊添加。GtkSelectionData
語法
參數
list- 一GtkTargetList
info- 自 2.6 起將傳遞回應用程式的
ID
另請參見
gtk3-Selections


------------ KeyGTK3gtk_target_list_find ----

gtk_target_list_find
在 中查找給定目標。GtkTargetList
語法
參數
list- 一GtkTargetList
target- 一個實習原子，代表要搜索的目標
info- 指向存儲目標應用程式資訊的位置的指標，或 NULL。[輸出][允許-無]
返回
如果找到目標，則為 TRUE，否則為 FALSE
另請參見
gtk3-Selections


------------ KeyGTK3gtk_target_list_new ----

gtk_target_list_new
從 的陣列中創建新的 .GtkTargetListGtkTargetEntry
語法
參數
targets- 指向 .[陣列長度 = n 目標]GtkTargetEntry
ntargets- 目標中的條目數。
返回
新的 .[轉移完整]GtkTargetList
另請參見
gtk3-Selections


------------ KeyGTK3gtk_target_list_ref ----

gtk_target_list_ref
將 的引用計數增加 1。GtkTargetList
語法
參數
list- 一GtkTargetList
返回
傳入的 .GtkTargetList
另請參見
gtk3-Selections


------------ KeyGTK3gtk_target_list_remove ----

gtk_target_list_remove
從目標清單中刪除目標。
語法
參數
list- 一GtkTargetList
target- 代表目標的實習原子
另請參見
gtk3-Selections


------------ KeyGTK3gtk_target_list_unref ----

gtk_target_list_unref
將 的引用計數減少 1。如果生成的引用計數為零，則釋放列表。GtkTargetList
語法
參數
list- 一GtkTargetList
另請參見
gtk3-Selections


------------ KeyGTK3gtk_target_table_free ----

gtk_target_table_free
姝ゅ嚱鏁伴噴鏀捐繑鍥瀊ygtk_target_table_new_from_list錛堬級 鐨勭洰鏍囪〃
璿硶
鍙傛暟
targets- 涓€涓暟緇勩€俒鏁扮粍闀垮害 = n_targets]GtkTargetEntry
n_targets- 鏁扮粍
涓嚜 2.10 浠ユ潵鐨勬潯鐩暟
鍙﹁鍙傝
gtk3-Selections


------------ KeyGTK3gtk_target_table_new_from_list ----

gtk_target_table_new_from_list
此函數創建一個陣列，其中包含與傳遞的清單相同的目標。返回的表是新分配的，當不再需要時，應使用 gtk_target_table_free（） 釋放。GtkTargetEntry
語法
參數
list- 一GtkTargetList
n_targets- 返回表中目標數 ot 的位置。[輸出]
返回
新表。[陣列長度 = n_targets][轉移完整]
自 2.10 起
另請參見
gtk3-Selections


------------ KeyGTK3gtk_tearoff_menu_item_new ----

gtk_tearoff_menu_item_new
gtk_tearoff_menu_item_new自版本 3.4 起已棄用，不應在新編寫的代碼中使用。已棄用，不應在新編寫的代碼中使用。創建新的 .GtkTearoffMenuItemGtkTearoffMenuItem
返回
一個新的GtkTearoffMenuItem
另請參見
GtkTearoffMenuItem


------------ KeyGTK3gtk_test_create_simple_window ----

gtk_test_create_simple_window
創建一個具有視窗標題window_title和文本內容dialog_text的簡單視窗。該視窗在被破壞時將退出任何正在運行的gtk_main（）迴圈，並在測試函數拆卸時自動銷毀。
語法
參數
window_title- 要顯示的視窗的標題。
dialog_text- 要顯示的視窗內的文本。
返回
指向新創建的 GtkWindow 的小部件指標。[無轉移]
自 2.14 起
另請參見
gtk3-Testing


------------ KeyGTK3gtk_test_create_widget ----

gtk_test_create_widget
此函數包裝小部件類型的 g_object_new（）。它將自動顯示所有創建的非視窗小部件，alsog_object_ref_sink（）它們（以在運行測試中保持活動狀態），並在下一個測試拆解階段設置它們以進行銷毀。
語法
參數
widget_type- 有效的小部件類型。
first_property_name- 要設置的第一個屬性的名稱或 NULL。[允許-無]
...- 將第一個屬性設置為的值，後跟更多名稱-值對，以 NULL 結尾
返回
新創建的小部件。[無轉移]
自 2.14 起
另請參見
gtk3-Testing


------------ KeyGTK3gtk_test_display_button_window ----

gtk_test_display_button_window
創建一個視窗，其中包含視窗標題window_title，文本內容dialog_text和多個按鈕，根據給定的配對參數清單@...參數。每個按鈕都使用一個標籤和一個 ：：clicked 信號處理常式創建，該處理常式將存儲在 nump 中的整數引入。該視窗將自動顯示gtk_widget_show_now（）後創建，因此當此函數返回時，它已被映射，調整大小並在螢幕上定位。該視窗在被破壞時將退出任何正在運行的gtk_main（）迴圈，並在測試函數拆卸時自動銷毀。
語法
參數
window_title- 要顯示的視窗的標題。
dialog_text- 要顯示的視窗內的文本。
...- NULL 終止的列表（const char *label， int *nump）對。
返回
指向新創建的 GtkWindow 的小部件指標。[轉移完整]
自 2.14 起
另請參見
gtk3-Testing


------------ KeyGTK3gtk_test_find_label ----

gtk_test_find_label
此函數將在小部件及其所有後代中搜索具有與label_pattern匹配的文本字串的 GtkLabelwidget。label_pattern可能包含星號？*？和問號???作為預留位置，g_pattern_match（） 用於匹配。請注意，除“C？傾向于改變（翻譯？標籤字串），所以這個函數只在具有預定語言環境的測試程式中有用，請參閱gtk_test_init（）以獲取更多詳細資訊。
語法
參數
widget- 有效的標籤或容器小部件。
label_pattern- 殼球圖案，以匹配標籤字串。
返回
一個 GtkLabel 小部件（如果找到）。[無轉移]
自 2.14 起
另請參見
gtk3-Testing


------------ KeyGTK3gtk_test_find_sibling ----

gtk_test_find_sibling
此函數將搜索base_widget的同級和其祖先的同級，以查找與widget_type匹配的所有小部件。在匹配的微件中，將返回幾何上最接近tobase_widget微件。此函數的一般目的是查找相對於另一個標記小部件最有可能的“操作”小部件。如查找主控器或文本輸入小部件，給定其相應的標籤小部件。
語法
參數
base_widget- 有效的小部件，小部件層次結構的一部分
widget_type- 同級小部件的 aearched 類型
返回
找到widget_typeif類型的小部件。[無轉移]
自 2.14 起
另請參見
gtk3-Testing


------------ KeyGTK3gtk_test_find_widget ----

gtk_test_find_widget
此函數將在 widget 的後代中搜索widget_type類型的 widget，該 widget 的標籤與其旁邊label_pattern匹配。這對於自動化GUI測試最有用，例如找到？斷續器按鈕，並合成對它的點擊。但是，請參閱gtk_test_find_label（），gtk_test_find_sibling（）andgtk_test_widget_click（）以瞭解涉及搜索此類小部件和合成小部件事件的可能警告。
語法
參數
widget- 容器小部件，通常是GtkWindow。
label_pattern- 殼球圖案，以匹配標籤字串。
widget_type- 用於標籤同級小部件的 aearched 類型。
返回
如果找到任何小部件，則為 NULL。[無轉移]
自 2.14 起
另請參見
gtk3-Testing


------------ KeyGTK3gtk_test_init ----

gtk_test_init
此函數用於初始化 GTK+ 測試程式。反過來，它將調用g_test_init（）和gtk_init（）來正確初始化測試框架和圖形工具包。它還會將程式的區域設置設置為 ？C?並防止載入 rc 檔和 Gtk+ 模組。這樣做是為了使 tets 程式環境盡可能具有確定性。像gtk_init（）和g_test_init（）一樣，任何已知的參數都將從 argc 和 argv 中處理和剝離。
語法
參數
argcp- themain（） 函數的 argc 參數的位址。如果處理了任何參數，則已更改。
argvp- 主（）的 theargv 參數的地址。g_test_init（） 或 gtk_init（） 理解的任何參數在返回之前都會被剝離。[輸入][陣列長度 = argcp]
...- 自2.14
以來當前未使用
另請參見
gtk3-Testing


------------ KeyGTK3gtk_test_list_all_types ----

gtk_test_list_all_types
返回已註冊的類型 id，在調用gtk_test_register_all_types（） 之後。
語法
參數
n_types- 位置存儲類型數量
返回
以 0 結尾的 id 類型陣列。[陣列長度 = n_types 零終止 = 1][無轉移]
自 2.14 起
另請參見
gtk3-Testing


------------ KeyGTK3gtk_test_register_all_types ----

gtk_test_register_all_types
強制註冊所有核心 Gtk+ 和 Gdk 物件類型。這允許在調用此函數後引用viag_type_from_name（） 的任何這些物件類型。
自 2.14 起
另請參見
gtk3-Testing


------------ KeyGTK3gtk_test_slider_get_value ----

gtk_test_slider_get_value
檢索基於 GtkRange 的微調和旋轉按鈕的文本調整值。請注意，此函數返回的值介於屬於小部件的調整的下限和上限之間，而不是傳遞給gtk_test_slider_set_perc（） 的百分比。
語法
參數
widget- 有效的小部件指針。
返回
gtk_adjustment_get_value（調整）屬於微件的調整。
自 2.14 起
另請參見
gtk3-Testing


------------ KeyGTK3gtk_test_slider_set_perc ----

gtk_test_slider_set_perc
此功能將調整所有基於GtkRange的小部件（例如捲軸或刻度）的滑塊位置，它還將調整旋轉按鈕。根據百分比參數，這些小部件的調整值設置為下限和上限之間的值。
語法
參數
widget- 有效的小部件指針。
percentage- 值介於 0 和 100 之間。
自 2.14 起
另請參見
gtk3-Testing


------------ KeyGTK3gtk_test_spin_button_click ----

gtk_test_spin_button_click
此功能將在向上或向下旋轉按鈕箭頭區域生成按鈕按一下，通常會導致旋轉按鈕值的增加或減少。
語法
參數
spinner- 有效的GtkSpinButton小部件。
button- 事件的指標按鈕編號，通常為 1、2 或 3。
upwards- TRUE 表示向上箭頭按一下，FALSE 表示向下箭頭按一下。
返回
按鈕按一下類比所需的所有操作是否都已成功執行。
自 2.14 起
另請參見
gtk3-Testing


------------ KeyGTK3gtk_test_text_get ----

gtk_test_text_get
如果小部件的文本字串是GtkLabel，GtkEditable（條目和文本小部件）或GtkTextView，請重新提取小部件的文本字串。
語法
參數
widget- 有效的小部件指針。
返回
新的 0 終止 C 字串，需要與 g_free（） 一起發佈。
自 2.14 起
另請參見
gtk3-Testing


------------ KeyGTK3gtk_test_text_set ----

gtk_test_text_set
將小部件的文本字串設置為字串，如果它是GtkLabel，GtkEditable（條目和文本小部件）或GtkTextView。
語法
參數
widget- 有效的小部件指針。
string- 自 2.14 起的 0 終止 C 字串
另請參見
gtk3-Testing


------------ KeyGTK3gtk_test_widget_click ----

gtk_test_widget_click
此函數將在第一個 GdkWindow 找到屬於小部件的中間生成一個按鈕按一下（按鈕按下和按鈕釋放事件）。對於像GtkButton這樣的GTK_NO_WINDOW小部件，這通常是僅輸入事件視窗。對於其他小部件，這通常是小部件>視窗。使用此函數時應考慮某些注意事項，特別是因為滑鼠指標扭曲到按鈕按一下位置，有關詳細資訊，請參閱gdk_test_simulate_button（）。
語法
參數
widget- 小部件生成一個按鈕點擊。
button- 事件的指標按鈕編號，通常為 1、2 或 3。
modifiers- 設置事件的鍵盤修飾符。
返回
按鈕按一下類比所需的所有操作是否都已成功執行。
自 2.14 起
另請參見
gtk3-Testing


------------ KeyGTK3gtk_test_widget_send_ ----

gtk_test_widget_send_key
gtk_test_widget_send_key?()
此功能將在第一個 GdkWindow 發現的屬於小部件的中間生成鍵盤按下和釋放事件。對於像GtkButton這樣的GTK_NO_WINDOW小部件，這通常是僅輸入事件視窗。對於其他小部件，這通常是小部件>視窗。使用此函數時應考慮某些注意事項，特別是因為滑鼠指標扭曲到按鍵位置，有關詳細資訊，請參閱gdk_test_simulate_key（）。
語法
參數
widget- 小部件生成按鍵和釋放。
keyval- Gdk 鍵盤值。
modifiers- 設置事件的鍵盤修飾符。
返回
關鍵事件模擬所需的所有操作是否都已成功執行。
自 2.14 起
另請參見
gtk3-Testing


------------ KeyGTK3gtk_test_widget_wait_for_draw ----

gtk_test_widget_wait_for_draw
進入主迴圈並等待“繪製”小部件。在這個context中，這意味著它等待小部件的幀時鐘運行完整的樣式，佈局和繪圖週期。此函數旨在用於與依賴於小部件中繼或與顯示伺服器的交互的操作同步。
語法
參數
widget- 自3.1以來等待
的小部件
另請參見
gtk3-Testing


------------ KeyGTK3gtk_text_attributes_copy ----

gtk_text_attributes_copy
複製 src 並返回新的 .GtkTextAttributes
語法
參數
src- 一個要複製的GtkTextAttributes
返回
src 的副本，免費，帶 gtk_text_attributes_unref（）
另請參見
GtkTextTag


------------ KeyGTK3gtk_text_attributes_copy_values ----

gtk_text_attributes_copy_values
將值從 src 複製到 dest，以便 dest 具有與 src 相同的值。按 dest 釋放現有值。
語法
參數
src- 一GtkTextAttributes
dest- 另一個GtkTextAttributes
另請參見
GtkTextTag


------------ KeyGTK3gtk_text_attributes_new ----

gtk_text_attributes_new
創建一個 ，它描述某些文本上的一組屬性。GtkTextAttributes
返回
一個新的，免費的gtk_text_attributes_unref（）。GtkTextAttributes
另請參見
GtkTextTag


------------ KeyGTK3gtk_text_attributes_ref ----

gtk_text_attributes_ref
遞增值的引用計數。
語法
參數
values- 一GtkTextAttributes
返回
通過的 iGtkTextAttributes
另請參見
GtkTextTag


------------ KeyGTK3gtk_text_attributes_unref ----

gtk_text_attributes_unref
遞減值上的引用計數，如果引用計數達到 0，則釋放結構。
語法
參數
values- 一GtkTextAttributes
另請參見
GtkTextTag


------------ KeyGTK3gtk_text_buffer_add_mark ----

gtk_text_buffer_add_mark
在位置添加標記。不得將標記添加到另一個緩衝區，如果其名稱不是 NULL，則緩衝區中不得有另一個具有相同名稱的標記。發出信號作為標記的陰性放置的通知。?mark-set?
語法
參數
buffer- 一GtkTextBuffer
mark- 要添加的標記
where- 位置到地點標記
自2.12
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_add_selection_clipboard ----

gtk_text_buffer_add_selection_clipboard
將剪貼板添加到緩衝區的選擇內容可用的剪貼板清單中。在大多數情況下，剪貼板將是緩衝區視圖的GDK_SELECTION_PRIMARY類型。GtkClipboard
語法
參數
buffer- 一GtkTextBuffer
clipboard- 一GtkClipboard
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_apply_tag ----

gtk_text_buffer_apply_tag
發出 “應用標記？緩衝區上的信號。信號的預設處理常式將標記應用於給定的範圍。開始和結束不必按順序排列。
語法
參數
buffer- 一GtkTextBuffer
tag- 一GtkTextTag
start- 一個範圍邊界被標記
end- 要標記的範圍的其他邊界
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_apply_tag_by_name ----

gtk_text_buffer_apply_tag_by_name
調用緩衝區標記表上的 gtk_text_tag_table_lookup（） 以獲取 ，然後調用 gtk_text_buffer_apply_tag（）。GtkTextTag
語法
參數
buffer- 一GtkTextBuffer
name- 一個命名的名稱GtkTextTag
start- 一個範圍邊界被標記
end- 要標記的範圍的其他邊界
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_backspace ----

gtk_text_buffer_backspace
執行相應的操作，就像用戶用游標在 iter 指定的位置點擊 delete 鍵一樣。在正常情況下，將刪除單個字元，但是當涉及組合重音符號時，可以刪除多個字元，並且當涉及預組合字元和重音符號組合時，將刪除少於一個字元。由於緩衝區被修改，所有未完成的反覆運算器在調用此函數後都變得無效;但是，反覆運算器將重新初始化以指向刪除文本的位置。
語法
參數
buffer- 一GtkTextBuffer
iter- 緩衝區中的一個位置
interactive- 刪除是否由用戶交互引起
default_editable- 緩衝區在預設情況下是否可編輯
返回
如果緩衝區自 2.6 起被修改
，則為 TRUE
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_begin_user_action ----

gtk_text_buffer_begin_user_action
調用以指示此處和 acall to gtk_text_buffer_end_user_action（） 之間的緩衝區操作是單用戶可見操作的一部分。然後，在創建撤銷堆疊時，可以將操作betweengtk_text_buffer_begin_user_action（） andgtk_text_buffer_end_user_action（） 進行分組。 維護尚未通過調用 gtk_text_buffer_end_user_action（） 關閉的調用 togtk_text_buffer_begin_user_action（） 的計數，並發出 ？begin-user-action？和最終用戶操作？僅針對最外層的調用對發出信號。這允許您從其他用戶操作構建用戶操作。“互動式”緩衝區突變函數（如 asgtk_text_buffer_insert_interactive（）））會自動圍繞它們執行的緩衝區操作調用 begin/enduser 操作，因此，如果用戶操作僅包含對這些函數之一的單次調用，則無需添加額外的調用。GtkTextBuffer
語法
參數
buffer- 一GtkTextBuffer
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_copy_clipboard ----

gtk_text_buffer_copy_clipboard
將當前選定的文本複製到剪貼板。
語法
參數
buffer- 一GtkTextBuffer
clipboard- 要複製到的對象GtkClipboard
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_create_child_anchor ----

gtk_text_buffer_create_child_anchor
這是一個方便的函數，它只是使用gtk_text_child_anchor_new（）創建一個子錨點，並將其插入到gtk_text_buffer_insert_child_anchor（）的緩衝區中。新錨點由緩衝區擁有;沒有引用計數返回給 gtk_text_buffer_create_child_anchor（） 的調用方。
語法
參數
buffer- 一GtkTextBuffer
iter- 在緩衝區中的位置
返回
創建的子錨點。[無轉移]
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_create_mark ----

gtk_text_buffer_create_mark
在位置處創建標記。如果mark_name為 NULL，則標記是匿名的;否則，可以通過名稱usinggtk_text_buffer_get_mark（）檢索標記。如果標記具有左重心，並且文本插入到標記的當前位置，則該標記將移動到新插入的文本的左側。如果標記具有正確的重力（left_gravity = FALSE），則該標記將最終位於新插入文本的右側。標準的從左到右的游標是具有右重力的標記（鍵入時，游標將停留在您重新鍵入的文本的右側）。此函數的調用方不擁有對返回值的引用，因此您可以根據需要忽略返回值。標記歸緩衝區所有，當緩衝區擁有時，標記將消失。發出信號作為標記的陰性放置的通知。GtkTextMark?mark-set?
語法
參數
buffer- 一GtkTextBuffer
mark_name- 標記的名稱，或 NULL。[允許-無]
where- 位置到位置標記
left_gravity- 標記是否留下了重力
返回
新對象。[無轉移]GtkTextMark
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_create_tag ----

gtk_text_buffer_create_tag
創建一個標記並將其添加到緩衝區的標記表中。等效於調用 gtk_text_tag_new（）， 然後將該標記添加到緩衝區的標記表中。返回的標記歸緩衝區的標記表所有，因此 ref 計數將等於 1。如果tag_name為 NULL，則該標記為匿名。如果tag_name為非 NULL，則此緩衝區的標記表中不得已存在名為 tag_name 的標記。first_property_name參數和後續參數是要在標記上設置的屬性清單，與g_object_set（） 一樣。
語法
參數
buffer- 一GtkTextBuffer
tag_name- 新標記的名稱，或 NULL。[允許-無]
first_property_name- 要設置的第一個屬性的名稱，或 NULL。[允許-無]
...- 以 NULL 結尾的屬性名稱和值清單
返回
一個新標記。[無轉移]
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_cut_clipboard ----

gtk_text_buffer_cut_clipboard
將當前選定的文本複製到剪貼板，然後刪除所述文本（如果該文本可編輯）。
語法
參數
buffer- 一GtkTextBuffer
clipboard- 要剪切到的對象GtkClipboard
default_editable- 緩衝區的默認可編輯性
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_delete ----

gtk_text_buffer_delete
刪除開頭和結尾之間的文本。開始和結束的順序實際上並不相關;gtk_text_buffer_delete（） 將重新排序。此函數實際上發出 “刪除範圍”signal，該信號的預設處理常式將刪除文本。由於修改了緩衝區，因此所有未完成的反覆運算器在調用此函數後都變得無效;但是，開始和結束將重新初始化為指向刪除文本的位置。
語法
參數
buffer- 一GtkTextBuffer
start- 緩衝區中的一個位置
end- 緩衝區中的另一個位置
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_delete_interactive ----

gtk_text_buffer_delete_interactive
刪除給定範圍內的所有可編輯文本。調用 gtk_text_buffer_delete（） 對於 [開始，結束] 的每個可編輯子範圍。重新驗證 start 和 end 以指向上次刪除的範圍的位置，如果未刪除任何文本，則保持不變。
語法
參數
buffer- 一GtkTextBuffer
start_iter- 開始刪除範圍
end_iter- 範圍結束
default_editable- 緩衝區在預設情況下是否可編輯
返回
某些文本是否實際被刪除
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_delete_mark ----

gtk_text_buffer_delete_mark
刪除標記，使其不再位於緩衝區中的任何位置。刪除緩衝區對標記的引用，因此，如果您尚未在標記上調用 g_object_ref（），則將釋放該標記。即使標記未釋放，標記上的大多數操作也會變得無效，直到它再次被添加到具有gtk_text_buffer_add_mark（）的緩衝區。使用 gtk_text_mark_get_deleted（） 找出標記是否已從其緩衝區中刪除。刪除標記後，信號將作為通知發出。?mark-deleted?
語法
參數
buffer- 一GtkTextBuffer
mark- a 在緩衝區中GtkTextMark
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_delete_mark_by_name ----

gtk_text_buffer_delete_mark_by_name
刪除名為名稱的標記;該標記必須存在。有關詳細資訊，Seegtk_text_buffer_delete_mark（）。
語法
參數
buffer- 一GtkTextBuffer
name- 緩衝區中標記的名稱
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_delete_selection ----

gtk_text_buffer_delete_selection
刪除 “插入” 之間的範圍和？selection_bound？標記，即當前選定的文本。如果互動式為 TRUE，則將考慮所選內容的可編輯性（用戶無法刪除不可編輯的文本）。
語法
參數
buffer- 一GtkTextBuffer
interactive- 刪除是否由用戶交互引起
default_editable- 緩衝區在預設情況下是否可編輯
返回
是否有要刪除的非空選擇
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_deserialize ----

gtk_text_buffer_deserialize
此函數以格式反序列化富文本，並在 iter 處插入它。要使用的格式必須事先usinggtk_text_buffer_register_deserialize_format（） orgtk_text_buffer_register_deserialize_tagset（） 註冊。
語法
參數
register_buffer- 格式註冊GtkTextBuffer
content_buffer- 反序列化為GtkTextBuffer
format- 用於反序列化的富文本格式
iter- 反序列化文本的插入點
data- 要反序列化的數據。[陣列長度 = 長度]
length- 數據長度
error- 返回地點GError
返回
成功時為真，否則為假。
自 2.10 起
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_deserialize_get_can_create_tags ----

gtk_text_buffer_deserialize_get_can_create_tags
此函數返回值集 withgtk_text_buffer_deserialize_set_can_create_tags（）
語法
參數
buffer- 一GtkTextBuffer
format- a 表示已註冊的富文本格式GdkAtom
返回
反序列化此格式是否會創建自 2.10 起的標記
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_deserialize_set_can_create_tags ----

gtk_text_buffer_deserialize_set_can_create_tags
使用此函數可允許富文本反序列化函數在接收緩衝區中創建新標記。請注意，使用此函數幾乎總是一個壞主意，因為您註冊的富文本函數應該知道如何將富文本格式他們的處理常式映射到文本緩衝區標記集。在接收緩衝區中創建新的（任意！）標記的功能適用于特殊的富文本格式，例如使用gtk_text_buffer_register_deserialize_tagset（）註冊的內部格式，因為該格式實質上是源緩衝區內部結構的轉儲，包括其標記名稱。只有在您知道自己在做什麼時，才應該允許創建標記，例如，如果您為應用程式套件的文本緩衝區定義了標記集名稱，並且您知道從這些緩衝區接收新標記是可以的，因為您知道您的應用程式可以處理新創建的標記。
語法
參數
buffer- 一GtkTextBuffer
format- a 表示已註冊的富文本格式GdkAtom
can_create_tags- 反序列化此格式是否會創建自 2.10 起的標記
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_end_user_action ----

gtk_text_buffer_end_user_action
應與對 gtk_text_buffer_begin_user_action（） 的調用配對。有關完整說明，請參閱該函數。
語法
參數
buffer- 一GtkTextBuffer
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_bounds ----

gtk_text_buffer_get_bounds
檢索緩衝區中的第一個和最後一個反覆運算器，即整個緩衝區位於 [start，end] 範圍內。
語法
參數
buffer- 一GtkTextBuffer
start- 反覆運算器，用於在緩衝區中以第一個位置進行初始化。[輸出]
end- 使用結束反覆運算器進行初始化的反覆運算器。[輸出]
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_char_count ----

gtk_text_buffer_get_char_count
獲取緩衝區中的字元數;請注意，字元和位元組是不一樣的，例如，您不能期望字串形式的緩衝區內容有這麼多位元組長。字元計數是緩存的，因此此函數非常快。
語法
參數
buffer- 一GtkTextBuffer
返回
緩衝區中的字元數
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_copy_target_list ----

gtk_text_buffer_get_copy_target_list
此函數返回此文本緩衝區可以提供用於複製和作為 DND 源的目標清單。清單中的目標使用枚舉中的資訊值添加，使用gtk_target_list_add_rich_text_targets（） andgtk_target_list_add_text_targets（）。GtkTextBufferTargetInfo
語法
參數
buffer- 一GtkTextBuffer
返回
這。[無轉移]
自 2.10 起GtkTargetList
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_deserialize_formats ----

gtk_text_buffer_get_deserialize_formats
此函數返回使用 gtk_text_buffer_register_deserialize_format（） orgtk_text_buffer_register_deserialize_tagset（） 在緩衝區中註冊的富文本反序列化格式
語法
參數
buffer- 一GtkTextBuffer
n_formats- 格式數的返回位置。[輸出]
返回
表示已註冊格式的陣列。[陣列長度 = n_formats][轉移容器]
自 2.10 起GdkAtoms
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_end_iter ----

gtk_text_buffer_get_end_iter
使用 ？end 反覆運算器初始化反覆運算器，？一個超過文本緩衝區中的最後一個有效字元。如果取消引用withgtk_text_iter_get_char（），則結束反覆運算器的字元值為 0.整個緩衝區位於從緩衝區中的第一個位置（調用 gtk_text_buffer_get_start_iter（） 到 getcharacter 位置 0）到結束反覆運算器的範圍內。
語法
參數
buffer- 一GtkTextBuffer
iter- 初始化反覆運算器。[輸出]
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_has_selection ----

gtk_text_buffer_get_has_selection
指示緩衝區當前是否選擇了某些文本。
語法
參數
buffer- 一GtkTextBuffer
返回
如果選擇了自 2.10 以來的文本
，則為 TRUE
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_insert ----

gtk_text_buffer_get_insert
返回表示游標（插入點）的標記。相當於調用gtk_text_buffer_get_mark（）來獲得標記“insert”，但效率稍微高一些，並且涉及較少的樣式。
語法
參數
buffer- 一GtkTextBuffer
返回
插入點標記。[無轉移]
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_iter_at_child_anchor ----

gtk_text_buffer_get_iter_at_child_anchor
獲取緩衝區中錨點的位置。
語法
參數
buffer- 一GtkTextBuffer
iter- 要初始化的反覆運算器。[輸出]
anchor- 出現在緩衝區中的子錨點
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_iter_at_line ----

gtk_text_buffer_get_iter_at_line
將 iter 初始化為給定行的開頭。如果line_number大於緩衝區中的行數，則返回結束反覆運算器。
語法
參數
buffer- 一GtkTextBuffer
iter- 初始化反覆運算器。[輸出]
line_number- 行號從0開始計數
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_iter_at_line_index ----

gtk_text_buffer_get_iter_at_line_index
獲取指向給定line.byte_index內byte_index的反覆運算器必須是 UTF-8 字元的開頭，並且不得位於行尾。注意位元組，而不是字元;UTF-8 可以將一個字元編碼為多個位元組。
語法
參數
buffer- 一GtkTextBuffer
iter- 初始化反覆運算器。[輸出]
line_number- 行號從0開始計數
byte_index- 從行首開始的位元組索引
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_iter_at_line_offset ----

gtk_text_buffer_get_iter_at_line_offset
獲取指向給定行內char_offset的反覆運算器。char_offset必須存在，不允許偏移線性末端的偏移。注意字元，而不是位元組;UTF-8 可以將一個字元編碼為多個位元組。
語法
參數
buffer- 一GtkTextBuffer
iter- 初始化反覆運算器。[輸出]
line_number- 行號從0開始計數
char_offset- 從行的起點偏移的字元
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_iter_at_mark ----

gtk_text_buffer_get_iter_at_mark
使用標記的當前位置初始化 iter。
語法
參數
buffer- 一GtkTextBuffer
iter- 初始化反覆運算器。[輸出]
mark- a 在緩衝區中GtkTextMark
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_iter_at_offset ----

gtk_text_buffer_get_iter_at_offset
將 iter 初始化為從整個緩衝區的開頭開始char_offset字元的位置。如果char_offset為 -1 或大於緩衝區中的字元數，則將其初始化為結束反覆運算器，即緩衝區中最後一個有效字元之後的反覆運算器。
語法
參數
buffer- 一GtkTextBuffer
iter- 初始化反覆運算器。[輸出]
char_offset- 從緩衝區開始的字元偏移量，從 0 或 -1 開始計數
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_line_count ----

gtk_text_buffer_get_line_count
獲取緩衝區中的行數。這個值是緩存的，所以函數非常快。
語法
參數
buffer- 一GtkTextBuffer
返回
緩衝區中的行數
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_mark ----

gtk_text_buffer_get_mark
返回緩衝區中名為 name 的標記，如果緩衝區中不存在此類標記，則返回 NULL。
語法
參數
buffer- 一GtkTextBuffer
name- 一個標記名稱
返回
a 或空。[無轉移]GtkTextMark
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_modified ----

gtk_text_buffer_get_modified
指示自上次調用以來緩衝區是否已被修改 gtk_text_buffer_set_modified（） 將修改標誌設置為 FALSE。例如，用於啟用 ？保存？文字編輯器中的函數。
語法
參數
buffer- 一GtkTextBuffer
返回
如果緩衝區已被修改，則為 TRUE
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_paste_target_list ----

gtk_text_buffer_get_paste_target_list
此函數返回此文本緩衝區支援粘貼和作為 DND 目標的目標清單。清單中的目標使用枚舉中的資訊值添加，使用gtk_target_list_add_rich_text_targets（） andgtk_target_list_add_text_targets（）。GtkTextBufferTargetInfo
語法
參數
buffer- 一GtkTextBuffer
返回
這。[無轉移]
自 2.10 起GtkTargetList
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_selection_bound ----

gtk_text_buffer_get_selection_bound
返回表示選定範圍標記的標記。等效於調用gtk_text_buffer_get_mark（） 來獲取標記名稱？selection_bound？，但效率略高，並且不涉及鍵入。緩衝區中當前選定的文本是“selection_bound？和 ？插入？標誌著。如果？selection_bound？和？插入？都在同一個地方，那麼沒有當前selection.gtk_text_buffer_get_selection_bounds（）是另一個方便的函數來處理選擇，如果你只是想知道是否有選擇以及它的邊界是什麼。
語法
參數
buffer- 一GtkTextBuffer
返回
選擇綁定標記。[無轉移]
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_selection_bounds ----

gtk_text_buffer_get_selection_bounds
如果選擇了某些文本，則返回 TRUE;將所選內容的邊界置於開始和結束位置（如果所選內容的長度為 0，則開始和結束將使用相同的值填充）。開始和結束將按昇冪排列。如果開始和結束是 NULL，則不會填充它們，但返回值仍指示是否選擇了哪個文本。
語法
參數
buffer- a aGtkTextBufferGtkTextBuffer
start- 反覆運算器以使用選擇開始進行初始化。[輸出]
end- 反覆運算器以選擇結束進行初始化。[輸出]
返回
所選內容是否具有非零長度
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_serialize_formats ----

gtk_text_buffer_get_serialize_formats
此函數返回使用 gtk_text_buffer_register_serialize_format（） orgtk_text_buffer_register_serialize_tagset（） 在緩衝區中註冊的富文本序列化格式
語法
參數
buffer- 一GtkTextBuffer
n_formats- 格式數的返回位置。[輸出]
返回
表示已註冊格式的陣列。[陣列長度 = n_formats][轉移容器]
自 2.10 起GdkAtoms
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_slice ----

gtk_text_buffer_get_slice
返回 [開始、結束]範圍內的文本。排除未顯示的文本（用設置不可見屬性的標記標記的文本），ifinclude_hidden_chars為 FALSE。每當緩衝區包含嵌入圖像時，返回的字串都包含 a0xFFFC 字元，因此返回字串中的位元組和字元索引確實對應於緩衝區中的位元組和字元索引。對比度 withgtk_text_buffer_get_text（）。請注意，0xFFFC也可能出現在普通文本中，因此它不是緩衝區中 pixbuf orwidget 的可靠指標。
語法
參數
buffer- 一GtkTextBuffer
start- 範圍的開始
end- 範圍的結束
include_hidden_chars- 是否包含不可見文本
返回
已分配的 UTF-8 字串
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_start_iter ----

gtk_text_buffer_get_start_iter
初始化了文本緩衝區中第一個位置的反覆運算器。這與使用 gtk_text_buffer_get_iter_at_offset（） 在字元偏移量 0 處獲取 iter 相同。
語法
參數
buffer- 一GtkTextBuffer
iter- 初始化反覆運算器。[輸出]
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_tag_table ----

gtk_text_buffer_get_tag_table
獲取與此緩衝區關聯的 。GtkTextTagTable
語法
參數
buffer- 一GtkTextBuffer
返回
緩衝區的標記表。[無轉移]
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_text ----

gtk_text_buffer_get_text
返回 [開始、結束]範圍內的文本。排除未顯示的文本（用設置不可見屬性的標記標記的文本），ifinclude_hidden_chars為 FALSE。不包括表示嵌入圖像的字元，因此返回字串中的位元組和字元索引與緩衝區中的位元組和字元索引不對應。對比度 withgtk_text_buffer_get_slice（）。
語法
參數
buffer- 一GtkTextBuffer
start- 範圍的開始
end- 範圍的結束
include_hidden_chars- 是否包含不可見文本
返回
已分配的 UTF-8 字串
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert ----

gtk_text_buffer_insert
在位置反覆運算器處插入文本的 len 位元組。如果 len 是 -1，則文本必須以 nul 結尾，並將插入到其同期中。發出“插入文本”信號;插入實際上發生在信號的預設處理常式中。當插入發生時 iter 無效（因為緩衝區內容更改），但預設信號處理常式會重新驗證它以指向插入文本的末尾。
語法
參數
buffer- 一GtkTextBuffer
iter- 緩衝區中的一個位置
text- UTF-8 格式的文本
len- 文本長度（以位元組為單位），或 -1
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_at_cursor ----

gtk_text_buffer_insert_at_cursor
只需調用 gtk_text_buffer_insert（），使用當前游標位置作為插入點。
語法
參數
buffer- 一GtkTextBuffer
text- UTF-8 格式的文本
len- 文本長度，以位元組為單位
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_child_anchor ----

gtk_text_buffer_insert_child_anchor
在反覆運算器處將子構件定位點插入到文本緩衝區中。在字元計數中，Theanchor 將被計為一個字元，當以字串形式獲取緩衝區內容時，將由 Unicode ？ 物件替換字元表示。0xFFFC. 請注意，切片？用於將緩衝區的某些部分作為字串獲取的變體包括子錨點的此字元，但 ？text？變體沒有。例如，參見gtk_text_buffer_get_slice（） andgtk_text_buffer_get_text（）。Considergtk_text_buffer_create_child_anchor（） 作為此函數的更方便的替代詞。緩衝區將添加對錨點的引用，因此您可以在插入後取消引用它。
語法
參數
buffer- 一GtkTextBuffer
iter- 插入錨點的位置
anchor- 一GtkTextChildAnchor
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_interactive ----

gtk_text_buffer_insert_interactive
與 gtk_text_buffer_insert（） 類似，但如果緩衝區中的不可編輯位置，則不會進行插入。通常，如果插入來自用戶操作（互動式）.default_editable指示文本的可編輯性，而該文本不會影響應用于其可編輯的標記，則您希望阻止在不可編輯的位置進行插入。通常，gtk_text_view_get_editable（）在這裡是合適的。
語法
參數
buffer- 一GtkTextBuffer
iter- 緩衝區中的一個位置
text- 一些 UTF-8 文本
len- 文本長度（以位元組為單位），或 -1
default_editable- 緩衝區的默認可編輯性
返回
是否實際插入了文本
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_interactive_at_cursor ----

gtk_text_buffer_insert_interactive_at_cursor
在cursorposition.default_editable調用 gtk_text_buffer_insert_interactive（） 指示文本的可編輯性，該文本不會影響應用于其可編輯的標記。通常，gtk_text_view_get_editable（）在這裡是合適的。
語法
參數
buffer- 一GtkTextBuffer
text- UTF-8 格式的文本
len- 文本長度（以位元組為單位），或 -1
default_editable- 緩衝區的默認可編輯性
返回
是否實際插入了文本
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_pixbuf ----

gtk_text_buffer_insert_pixbuf
在反覆運算器處將圖像插入到文本緩衝區中。圖像將在字元計數中計為一個字元，並且在獲取緩衝區內容作為字串時，將由 Unicode？ 物件替換字元表示。0xFFFC.請注意，用於將緩衝區部分作為字串獲取的“切片”變體包括 pixbufs 的此字元，但 “text”變體沒有。例如，參見gtk_text_buffer_get_slice（） andgtk_text_buffer_get_text（）。
語法
參數
buffer- 一GtkTextBuffer
iter- 插入圖元蟲的位置
pixbuf- 一GdkPixbuf
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_range ----

gtk_text_buffer_insert_range
在開始和結束之間複製文本、標籤和圖元（開始和結束的順序無關緊要），並在反覆運算器處插入副本。用於代替簡單地獲取/插入文本，因為它保留了simage和標籤。如果開始和結束位於與緩衝區不同的緩衝區中，則兩個緩衝區必須共用同一個標記表。通過發射insert_text和apply_tag信號來實現，所以期待這些。
語法
參數
buffer- 一GtkTextBuffer
iter- 緩衝區中的一個位置
start- 一個位置GtkTextBuffer
end- 與開始相同的緩衝區中的另一個位置
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_range_interactive ----

gtk_text_buffer_insert_range_interactive
與gtk_text_buffer_insert_range（）相同，但如果插入點不可編輯，則不執行任何操作。default_editable參數指示如果沒有標記關閉 iter 影響可編輯性，則文本在反覆運算器上是否可編輯。通常，結果ofgtk_text_view_get_editable（） 在這裡是合適的。
語法
參數
buffer- 一GtkTextBuffer
iter- 緩衝區中的一個位置
start- 一個位置GtkTextBuffer
end- 與開始相同的緩衝區中的另一個位置
default_editable- 緩衝區的默認可編輯性
返回
是否可以在反覆運算時插入
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_with_tags ----

gtk_text_buffer_insert_with_tags
在反覆運算時將文本插入緩衝區，將標記清單應用於新插入的文本。最後指定的標記必須為 NULL 才能終止列表。等效於調用gtk_text_buffer_insert（），然後在插入的文本上gtk_text_buffer_apply_tag（）;gtk_text_buffer_insert_with_tags（）只是一個方便的函數。
語法
參數
buffer- 一GtkTextBuffer
iter- 緩衝區中的反覆運算器
text- UTF-8 文本
len- 文本長度，或 -1
first_tag- 第一個應用于文本的標籤
...- 以 NULL 結尾的要應用的標記清單
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_with_tags_by_name ----

gtk_text_buffer_insert_with_tags_by_name
與 gtk_text_buffer_insert_with_tags（） 相同，但允許您傳入標記名稱而不是標記物件。
語法
參數
buffer- 一GtkTextBuffer
iter- 在緩衝區中的位置
text- UTF-8 文本
len- 文本長度，或 -1
first_tag_name- 要應用于文本的標籤的名稱
...- 更多標籤名稱
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_move_mark ----

gtk_text_buffer_move_mark
將標記移動到新位置的位置。發出信號作為移動通知。?mark-set?
語法
參數
buffer- 一GtkTextBuffer
mark- 一GtkTextMark
where- 標記緩衝區的新位置
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_move_mark_by_name ----

gtk_text_buffer_move_mark_by_name
將名為 name 的標記（必須存在）移動到位置。有關詳細資訊，請參閱 gtk_text_buffer_move_mark（）。
語法
參數
buffer- 一GtkTextBuffer
name- 商標名稱
where- 標記的新位置
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_new ----

gtk_text_buffer_new
創建新的文本緩衝區。
語法
參數
table- 一個標籤表，或 NULL 創建一個新標籤表。[允許-無]
返回
新的文本緩衝區
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_paste_clipboard ----

gtk_text_buffer_paste_clipboard
粘貼剪貼板的內容。？如果override_location為 NULL，則粘貼的文本將插入游標位置，或者如果所選內容不為空，則將替換緩衝區選擇。注意：粘貼是非同步的，也就是說，我們會要求粘貼資料並返回，在主迴圈運行後的某個時刻，粘貼資料將入。
語法
參數
buffer- 一GtkTextBuffer
clipboard- 粘貼自GtkClipboard
override_location- 插入粘貼文本的位置，或 NULL。[允許-無]
default_editable- 緩衝區在預設情況下是否可編輯
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_place_cursor ----

gtk_text_buffer_place_cursor
此函數移動 ？插入？和？selection_bound？標記同時。如果您使用gtk_text_buffer_move_mark（）將它們分兩步移動到同一位置，您將暫時在舊位置和新位置之間選擇 aregion，這可能非常不方便，因為臨時選擇的區域將強制重新計算內容。此功能將它們作為一個單元移動，可以對其進行優化。
語法
參數
buffer- 一GtkTextBuffer
where- 放置游標的位置
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_register_deserialize_format ----

gtk_text_buffer_register_deserialize_format
此函數註冊一個富文本反序列化函數，並將其mime_type與傳遞的緩衝區一起註冊。
語法
參數
buffer- 一GtkTextBuffer
mime_type- 格式的默劇類型
function- 反序列化函數進行註冊
user_data- 函數user_data
user_data_destroy- 不再需要user_datais時要調用的函數
返回
對應於新註冊格式的默劇類型。[無轉移]
自 2.10 起GdkAtom
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_register_deserialize_tagset ----

gtk_text_buffer_register_deserialize_tagset
此函數使用傳遞的緩衝區註冊 GTK+ 的內部富文本序列化格式。有關詳細資訊，Seegtk_text_buffer_register_serialize_tagset（）。
語法
參數
buffer- 一GtkTextBuffer
tagset_name- 一個可選的標籤集名稱，位於 NULL 上。[允許-無]
返回
對應於新註冊格式的默劇類型。[無轉移]
自 2.10 起GdkAtom
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_register_serialize_format ----

gtk_text_buffer_register_serialize_format
此函數註冊一個富文本序列化函數以及它mime_type傳遞的緩衝區。
語法
參數
buffer- 一GtkTextBuffer
mime_type- 格式的默劇類型
function- 序列化函數進行註冊
user_data- 函數user_data
user_data_destroy- 不再需要user_datais時要調用的函數
返回
對應於新註冊格式的默劇類型。[無轉移]
自 2.10 起GdkAtom
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_register_serialize_tagset ----

gtk_text_buffer_register_serialize_tagset
此函數使用傳遞的緩衝區註冊 GTK+ 的內部富文本序列化格式。內部格式不符合任何標準的富文本格式，只能在實例之間工作。它能夠序列化所有文本緩衝區的標記和嵌入式圖元。此函數只是一個包裝器 aroundgtk_text_buffer_register_serialize_format（）。用於註冊的默劇類型是“application/x-gtk-text-buffer-rich-text？”，或者？application/x-gtk-text-buffer-rich-text;format=tagset_name？如果atagset_name通過。tagset_name可用于限制將富文本傳輸到具有相容標記集的緩衝區，以避免粘貼未知標記。在這裡傳遞 anidentifier ！= NULL 可能是常見的情況，因為 NULL 標籤集需要其中的緩衝區來處理任意標籤的粘貼。GtkTextBuffer
語法
參數
buffer- 一GtkTextBuffer
tagset_name- 一個可選的標籤集名稱，位於 NULL 上。[允許-無]
返回
對應於新註冊格式的默劇類型。[無轉移]
自 2.10 起GdkAtom
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_remove_all_tags ----

gtk_text_buffer_remove_all_tags
刪除開始和結束之間的範圍內的所有標記。請注意此功能;它可以刪除在與您當前正在編寫的代碼無關的代碼中添加的標記。也就是說，如果您有兩個或多個不相關的程式碼片段來添加標記，則使用此函數可能是一個壞主意。
語法
參數
buffer- 一GtkTextBuffer
start- 一個範圍邊界未標記
end- 其他範圍範圍未標記
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_remove_selection_clipboard ----

gtk_text_buffer_remove_selection_clipboard
刪除添加的 gtk_text_buffer_add_selection_clipboard（）。GtkClipboard
語法
參數
buffer- 一GtkTextBuffer
clipboard- 添加到bufferbygtk_text_buffer_add_selection_clipboard（）GtkClipboard
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_remove_tag ----

gtk_text_buffer_remove_tag
發出 “刪除標記？信號。信號的預設處理常式從給定範圍內刪除所有出現的標記。開始和結束不必按順序排列。
語法
參數
buffer- 一GtkTextBuffer
tag- 一GtkTextTag
start- 一個範圍邊界未標記
end- 其他範圍範圍未標記
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_remove_tag_by_name ----

gtk_text_buffer_remove_tag_by_name
調用緩衝區標記表上的 gtk_text_tag_table_lookup（） 以獲取 ，然後調用 gtk_text_buffer_remove_tag（）。GtkTextTag
語法
參數
buffer- 一GtkTextBuffer
name- 名稱GtkTextTag
start- 一個範圍邊界未標記
end- 其他範圍範圍未標記
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_select_range ----

gtk_text_buffer_select_range
此函數移動 ？插入？和？selection_bound？標記同時。如果您使用gtk_text_buffer_move_mark（）將它們分兩步移動，您將暫時選擇它們的舊位置和新位置之間的 aregion，這可能非常不方便，因為臨時選擇的區域將強制重新計算內容。此功能將它們作為一個單元移動，可以對其進行優化。
語法
參數
buffer- 一GtkTextBuffer
ins- 在哪裡放置“插入”？馬克
bound- 在哪裡放置“selection_bound？標記
自 2.4
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_serialize ----

gtk_text_buffer_serialize
此函數以 format 表示的富文本格式序列化開始和結束之間的文本部分。要使用的格式必須事先usinggtk_text_buffer_register_serialize_format（） orgtk_text_buffer_register_serialize_tagset（） 註冊。
語法
參數
register_buffer- 格式註冊GtkTextBuffer
content_buffer- 序列化GtkTextBuffer
format- 用於序列化的富文本格式
start- 開始序列化的文字區塊
end- 結束測試塊以序列化
length- 序列化資料長度的返回位置。[輸出]
返回
序列化資料，編碼為格式。[陣列長度 = 長度][轉移完整]
自 2.10 起
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_set_modified ----

gtk_text_buffer_set_modified
用於跟蹤緩衝區自上次保存以來是否已被修改。每當將緩衝區保存到磁片時，callgtk_text_buffer_set_modified（緩衝區，FALSE）。當緩衝區被修改時，它將自動再次切換到修改後的位。當修改後的位元翻轉時，緩衝區發出信號。?modified-changed?
語法
參數
buffer- 一GtkTextBuffer
setting- 修改標誌設置
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_set_text ----

gtk_text_buffer_set_text
刪除緩衝區的當前內容，並改為插入文本。Iflen 為 -1，文本必須以 nul 結尾。文本必須有效 UTF-8。
語法
參數
buffer- 一GtkTextBuffer
text- 要插入的 UTF-8 文本
len- 文本位元組的長度
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_unregister_deserialize_format ----

gtk_text_buffer_unregister_deserialize_format
此函數登出以前使用 gtk_text_buffer_register_deserialize_format（） orgtk_text_buffer_register_deserialize_tagset（） 註冊的富文本格式。
語法
參數
buffer- 一GtkTextBuffer
format- a 表示已註冊的富文本格式。
自 2.10 起GdkAtom
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_unregister_serialize_format ----

gtk_text_buffer_unregister_serialize_format
此函數登出以前使用 gtk_text_buffer_register_serialize_format（） orgtk_text_buffer_register_serialize_tagset（） 註冊的富文本格式
語法
參數
buffer- 一GtkTextBuffer
format- a 表示已註冊的富文本格式。
自 2.1 起GdkAtom
另請參見
GtkTextBuffer


------------ KeyGTK3gtk_text_child_anchor_get_deleted ----

gtk_text_child_anchor_get_deleted
確定是否已從緩衝區中刪除子錨點。請記住，從緩衝區中刪除子錨點時將取消引用，因此，如果您使用planto使用此函數，則需要保留自己的引用（帶有g_object_ref（））） ？否則，所有已刪除的子錨點也將最終確定。
語法
參數
anchor- 一GtkTextChildAnchor
返回
如果子錨點已從其緩衝區中刪除，則為 TRUE
另請參見
GtkTextView


------------ KeyGTK3gtk_text_child_anchor_get_widgets ----

gtk_text_child_anchor_get_widgets
獲取錨定在此子錨點上的所有構件的列表。返回的列表應使用 g_list_free（） 釋放。
語法
參數
anchor- 一GtkTextChildAnchor
返回
錨定在錨點的小部件列表。[element-type GtkWidget][轉移容器]
另請參見
GtkTextView


------------ KeyGTK3gtk_text_child_anchor_new ----

gtk_text_child_anchor_new
創建新的 .通常，您將插入帶有gtk_text_buffer_insert_child_anchor（）的a中。要在一個步驟中執行創建和插入，請使用方便函數gtk_text_buffer_create_child_anchor（）。GtkTextChildAnchorGtkTextBuffer
返回
一個新的GtkTextChildAnchor
另請參見
GtkTextView


------------ KeyGTK3gtk_text_iter_assign ----

gtk_text_iter_assign
將 other 的值分配給反覆運算器。此函數在應用程式中沒有用，因為反覆運算器可以使用 GtkTextIter i = j; 進行賦值。該函數由語言綁定使用。
語法
參數
iter- 一GtkTextIter
other- 另一個
自3.2GtkTextIter
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_char ----

gtk_text_iter_backward_char
向後移動一個字元偏移量。如果移動是可能的，則返回 TRUE;如果 iter 是緩衝區中的第一個（字元偏移集 0），gtk_text_iter_backward_char（） 在寫入迴圈時返回 FALSE。
語法
參數
iter- 反覆運算器
返回
移動是否可能
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_chars ----

gtk_text_iter_backward_chars
如果可能，向後移動計數字元（如果計數將移動到緩衝區的開頭或結尾，則移動到緩衝區的開頭或結尾）。返回值指示反覆運算器是否移動到可取消引用的位置;如果反覆運算器沒有移動，或者移動到結束反覆運算器上，則返回 FALSE。如果 count 為 0，則該函數不執行任何操作並返回 FALSE。
語法
參數
iter- 反覆運算器
count- 要移動的字元數
返回
是否被移動並且是可取消引用的
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_cursor_position ----

gtk_text_iter_backward_cursor_position
像gtk_text_iter_forward_cursor_position（），但向後移動。
語法
參數
iter- 一GtkTextIter
返回
如果我們搬家，則為 TRUE
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_cursor_positions ----

gtk_text_iter_backward_cursor_positions
向上移動以對游標位置進行計數。有關詳細資訊，Seegtk_text_iter_forward_cursor_position（）。
語法
參數
iter- 一GtkTextIter
count- 移動位置的數量
返回
TRUE，如果我們移動並且新位置是可取消參考的
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_find_char ----

gtk_text_iter_backward_find_char
與gtk_text_iter_forward_find_char（）相同，但從反覆運算器向後退。
語法
參數
iter- 一GtkTextIter
pred- 要在每個字元上調用的函數。[範圍調用]
user_data- 用於捕食的使用者資料
limit- 搜索限制，或空為無。[允許-無]
返回
是否找到匹配項
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_line ----

gtk_text_iter_backward_line
將 iter 移動到上一行的開頭。返回 TRUE 如果可以移動;即，如果 iter 位於字元偏移量 0 處，則此函數返回 FALSE。因此，如果 iter 已經位於第 0 行，但不在該行的開頭，則 iter 將捕捉到該行的開頭，並且函數返回 TRUE。（請注意，這意味著在調用此函數的迴圈中，如果第一次反覆運算位於第 0 行，則行號在每次反覆運算時都不會更改。
語法
參數
iter- 反覆運算器
返回
是否被移動
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_lines ----

gtk_text_iter_backward_lines
如果可能，向後移動計數行（如果計數將移動到緩衝區的起點或終點，則移動到緩衝區的起點或終點）。返回值指示反覆運算器是否移動到可取消引用的位置;如果反覆運算器沒有移動，或者移動到結束反覆運算器上，則返回 FALSE。如果 count 為 0，則該函數不執行任何操作並返回 FALSE。如果計數為負數，則向前移動 0 - 計數行。
語法
參數
iter- 一GtkTextIter
count- 向後移動的行數
返回
是否被移動並且是可取消引用的
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_search ----

gtk_text_iter_backward_search
與 gtk_text_iter_forward_search（） 相同，但移動backward.match_end永遠不會設置為位於反覆運算器之後，即使存在可能的match_start之前或反覆運算器。GtkTextIter
語法
參數
iter- 搜索開始的地方GtkTextIter
str- 搜索字串
flags- 影響搜索的標誌的位元遮罩
match_start- 返回匹配開始的位置，或 NULL。[輸出調用方分配][允許-無]
match_end- 返回匹配結束的位置，或 NULL。[輸出調用方分配][允許-無]
limit- 最後一個可能的match_start的位置，或 NULL 表示緩衝區的開始。[允許-無]
返回
是否找到匹配項
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_sentence_start ----

gtk_text_iter_backward_sentence_start
向後移動到上一句開頭;如果它已經在句子的開頭，則向後移動到下一個句子。句子邊界由Pango確定，對於幾乎任何語言都應該是正確的（如果不是，正確的修復方法是Pango文本邊界演算法）。
語法
參數
iter- 一GtkTextIter
返回
TRUE 如果反覆運算移動並且不是結束反覆運算器，則為 TRUE
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_sentence_starts ----

gtk_text_iter_backward_sentence_starts
調用gtk_text_iter_backward_sentence_start（） 直到計數次數，或直到它返回 FALSE。如果計數為負數，則向前移動而不是向後移動。
語法
參數
iter- 一GtkTextIter
count- 要移動的句子數
返回
TRUE 如果反覆運算移動並且不是結束反覆運算器，則為 TRUE
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_to_tag_toggle ----

gtk_text_iter_backward_to_tag_toggle
向後移動到標記的下一個開關（打開或關閉），或移動到任何標記的下一個開關 iftag 為 NULL。如果未找到匹配的標記開關，則返回 FALSE，否則返回 TRUE。不返回在反覆運算器處找到的切換開關，只在 iter 之前切換。將反覆運算設置為切換的位置，或者緩衝區的開始位置（如果未找到切換）。GtkTextTag
語法
參數
iter- 一GtkTextIter
tag- a 或 NULL。[允許-無]GtkTextTag
返回
我們是否在 iter 之前找到了標籤切換
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_visible_cursor_position ----

gtk_text_iter_backward_visible_cursor_position
將反覆運算器向前移動到上一個可見光標位置。有關詳細資訊，請參見 gtk_text_iter_backward_cursor_position（）。
語法
參數
iter- 一GtkTextIter
返回
true，如果我們移動並且新倉位是可取消參考的
，因為 2.4
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_visible_cursor_positions ----

gtk_text_iter_backward_visible_cursor_positions
向上移動以對可見光標位置進行計數。有關詳細資訊，Seegtk_text_iter_backward_cursor_position（）。
語法
參數
iter- 一GtkTextIter
count- 移動位置的數量
返回
true，如果我們移動並且新倉位是可取消參考的
，因為 2.4
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_visible_line ----

gtk_text_iter_backward_visible_line
將反覆運算器移動到上一條可見線的開頭。返回 TRUE 如果可以移動;即，如果 iter 位於字元偏移量 0 處，則此函數返回 FALSE。因此，如果 iter 已經位於第 0 行，但不在該行的開頭，則 iter 將捕捉到該行的開頭，並且函數返回 TRUE。（請注意，這意味著在調用此函數的迴圈中，如果第一次反覆運算位於第 0 行，則行號在每次反覆運算時都不會更改。
語法
參數
iter- 反覆運算器
返回
是否自 2.8 起反覆運算
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_visible_lines ----

gtk_text_iter_backward_visible_lines
如果可能，向後移動對可見線進行計數（如果計數將移動到緩衝區的起點或終點，則移動到緩衝區的起點或終點）。返回值指示反覆運算器是否移動到可取消引用的位置;如果反覆運算器沒有移動，或者移動到結束反覆運算器上，則返回 FALSE。如果 count 為 0，則該函數不執行任何操作並返回 FALSE。如果計數為負數，則向前移動 0 - 計數行。
語法
參數
iter- 一GtkTextIter
count- 向後移動的行數
返回
自 2.8 起是否反覆運算且可
取消引用
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_visible_word_start ----

gtk_text_iter_backward_visible_word_start
向後移動到上一個可見單詞開頭。（如果它當前位於單詞開頭，則向後移動到該單詞之後的下一個單詞。分詞由Pango確定，並且對於幾乎任何語言都應該是正確的（如果不是，正確的修復方法是Pango分詞演算法）。
語法
參數
iter- 一GtkTextIter
返回
TRUE 如果反覆運算移動並且不是自 2.4 以來的結束反覆運算器，
則為 TRUE
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_visible_word_starts ----

gtk_text_iter_backward_visible_word_starts
調用gtk_text_iter_backward_visible_word_start（） 直到計數次數。
語法
參數
iter- 一GtkTextIter
count- 移動次數
返回
TRUE 如果反覆運算移動並且不是自 2.4 以來的結束反覆運算器，
則為 TRUE
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_word_start ----

gtk_text_iter_backward_word_start
向後移動到上一個單詞“開始”。（如果它當前位於 aword start 上，則向後移動到該單詞之後的下一個。分詞由Pango確定，並且對於幾乎任何語言都應該是正確的（如果不是，正確的修復方法是Pango分詞演算法）。
語法
參數
iter- 一GtkTextIter
返回
TRUE 如果反覆運算移動並且不是結束反覆運算器，則為 TRUE
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_word_starts ----

gtk_text_iter_backward_word_starts
調用gtk_text_iter_backward_word_start（） 到計數次數。
語法
參數
iter- 一GtkTextIter
count- 移動次數
返回
TRUE 如果反覆運算移動並且不是結束反覆運算器，則為 TRUE
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_begins_tag ----

gtk_text_iter_begins_tag
如果此時標記已打開，則返回 TRUE。如果 tagis NULL，則返回 TRUE（如果此時已打開任何標記）。請注意，如果 gtk_text_iter_begins_tag（） 返回 TRUE，則表示 iter 位於標記範圍的開頭，並且 iter 處的字元位於標記的範圍內。換句話說，與gtk_text_iter_ends_tag（）不同，如果gtk_text_iter_begins_tag（）返回TRUE，gtk_text_iter_has_tag（）也將為同一參數返回TRUE。
語法
參數
iter- 反覆運算器
tag- a 或 NULL。[允許-無]GtkTextTag
返回
是否使用標記標記的範圍的開頭
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_can_insert ----

gtk_text_iter_can_insert
考慮緩衝區的默認可編輯性以及影響可編輯性的標記，確定在 iter 處插入的文本是否可編輯。如果在 iter 處插入的文本是可編輯的，則應允許用戶在 iter.gtk_text_buffer_insert_interactive（） 處插入文本（） 使用此函數來決定是否允許在給定位置插入。
語法
參數
iter- 反覆運算器
default_editability- 如果文本預設可編輯，則為 TRUE
返回
在反覆運算時插入的文本是否可編輯
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_compare ----

gtk_text_iter_compare
一個 qsort（） 樣式的函數，如果 lhs 小於 rhs，則返回負值;如果 lhs 大於 rhs，則返回正值;如果它們相等，則返回 0。排序是按字元偏移順序排列的，即緩衝區中的第一個字元小於緩衝區中的第二個字元。
語法
參數
lhs- 一GtkTextIter
rhs- 另一個GtkTextIter
返回
-1 如果 lhsis 小於 rhs，則為 1 如果 lhsis 大於，則為 0（如果它們相等）
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_copy ----

gtk_text_iter_copy
創建反覆運算器的動態分配副本。此函數在應用程式中沒有用，因為反覆運算器可以使用單純賦值（GtkTextIter i = j;）進行複製。該函數由語言綁定使用。
語法
參數
iter- 反覆運算器
返回
反覆運算器的副本，帶有gtk_text_iter_free（）
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_editable ----

gtk_text_iter_editable
返回反覆運算器處的字元是否在文本的可編輯區域內。不可編輯的文本是否被鎖定？並且用戶無法通過 進行更改。這個函數只是圍繞gtk_text_iter_get_attributes（）的便利包裝。如果對此文本應用的任何標記都不會影響可編輯性，則將返回default_setting。您不想使用此函數來決定是否可以在反覆運算器上插入文本，因為對於插入，您不想知道反覆運算器處的字元是否在可編輯範圍內，而是要知道在iter處插入的新字元是否在可編輯範圍內。使用 gtk_text_iter_can_insert（） 來處理這種情況。GtkTextView
語法
參數
iter- 反覆運算器
default_setting- 如果文本預設可編輯，則為 TRUE
返回
是否在可編輯範圍內
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_ends_line ----

gtk_text_iter_ends_line
如果 iter 指向某行的段落定長符字元的開頭（分隔符號可以是分行符號、回車符、回車符後跟分行符號或 Unicode 段落分隔符號），則返回 TRUE。請注意，指向 \r\n 對的 \n 的反覆運算器將不計為行的末尾，該行在 \r 之前結束。結束反覆運算器被考慮在行的末尾，即使那裡有無參數分隔符號字元。
語法
參數
iter- 反覆運算器
返回
是否在行的末尾
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_ends_sentence ----

gtk_text_iter_ends_sentence
確定 iter 是否結束句子。句子邊界由Pango決定，對於幾乎任何語言都應該是正確的（如果不是，正確的修復方法是Pango文本邊界演算法）。
語法
參數
iter- 一GtkTextIter
返回
如果 iteris 位於句子的末尾，則為 TRUE。
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_ends_tag ----

gtk_text_iter_ends_tag
如果此時標記已關閉，則返回 TRUE。如果 tagis NULL，則返回 TRUE（如果此時有任何標記處於關閉狀態）。請注意，如果 gtk_text_iter_ends_tag（） 返回 TRUE，則表示 iter 位於標記範圍的末尾，但字元 at iter 在標記範圍之外。換句話說，與gtk_text_iter_begins_tag（）不同，如果gtk_text_iter_ends_tag（）返回TRUE，gtk_text_iter_has_tag（）將為相同的參數返回FALSE。
語法
參數
iter- 反覆運算器
tag- a 或 NULL。[允許-無]GtkTextTag
返回
是否包含標記有標記的範圍的末尾
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_ends_word ----

gtk_text_iter_ends_word
確定 iter 是否結束自然語言單詞。分詞由Pango確定，並且對於幾乎任何語言都應該是正確的（如果不是，正確的修復方法是Pango分詞演算法）。
語法
參數
iter- 一GtkTextIter
返回
TRUE 如果 iteris 位於單詞的末尾
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_equal ----

gtk_text_iter_equal
使用最快的可能機制測試兩個反覆運算器是否相等。這個功能非常快;您可以期望它的性能比例如獲取每個反覆運算器的字元偏移量並自己比較偏移量更好。另外，它thangtk_text_iter_compare（）要快一些。
語法
參數
lhs- 一GtkTextIter
rhs- 另一個GtkTextIter
返回
如果反覆運算器指向緩衝區中的同一位置，則為 TRUE
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_char ----

gtk_text_iter_forward_char
將反覆運算器向前移動一個字元偏移量。請注意，嵌入在緩衝區中的圖像佔用 1 個字元槽，如果緩衝區中有圖像，sogtk_text_iter_forward_char（） 實際上可能會移動到圖像上而不是字元上。如果 iter 是結束反覆運算器或它之前的一個字元，則 iter 現在將指向結束反覆運算器，並且 gtk_text_iter_forward_char（） 在寫入迴圈時返回 FALSE forconience。
語法
參數
iter- 反覆運算器
返回
是否被移動並且是可取消引用的
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_chars ----

gtk_text_iter_forward_chars
如果可能，則移動計數字元數（如果計數將移動到緩衝區的開始或結束，則移動到緩衝區的開始或結束）。返回值指示新位置 ofiter 是否與其原始位置不同，並且可取消引用（緩衝區中的最後一個反覆運算器不可取消引用）。如果 countis 0，則該函數不執行任何操作並返回 FALSE。
語法
參數
iter- 反覆運算器
count- 要移動的字元數，可能為負數
返回
是否被移動並且是可取消引用的
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_cursor_position ----

gtk_text_iter_forward_cursor_position
將反覆運算器向前移動單個游標位置。游標位置是（不出所料）游標可以出現的位置。也許令人驚訝的是，在所有字元之間可能沒有游標位置。歐洲語言最常見的例子是回車/換行序列。對於某些 Unicode 字元，相當於說字母 ？a？帶有重音符號的字元將表示為兩個字元，首先是字母，然後是導致重音被呈現的“組合標記”;所以游標不能在這兩個字元之間。另請參見 andpango_break（） 函數。PangoLogAttr
語法
參數
iter- 一GtkTextIter
返回
TRUE，如果我們移動並且新位置是可取消參考的
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_cursor_positions ----

gtk_text_iter_forward_cursor_positions
向上移動以對游標位置進行計數。有關詳細資訊，Seegtk_text_iter_forward_cursor_position（）。
語法
參數
iter- 一GtkTextIter
count- 移動位置的數量
返回
TRUE，如果我們移動並且新位置是可取消參考的
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_find_char ----

gtk_text_iter_forward_find_char
推進反覆運算器，在每個字元上調用pred。Ifpred 返回 TRUE，返回 TRUE 並停止掃描。如果 pred 從不返回 TRUE，則將 iter 設置為限制 iflimit 為 non-NULL，否則設置為結束反覆運算器。
語法
參數
iter- 一GtkTextIter
pred- 要在每個字元上調用的函數。[範圍調用]
user_data- 用於捕食的使用者資料
limit- 搜索限制，或空為無。[允許-無]
返回
是否找到匹配項
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_line ----

gtk_text_iter_forward_line
將 iter 移動到下一行的開頭。如果反覆運算器已位於緩衝區的最後一行上，則 將反覆運算器移動到當前行的末尾。如果在操作之後，反覆運算器位於緩衝區的末尾且不可推斷，則返回 FALSE。否則，返回 TRUE。
語法
參數
iter- 反覆運算器
返回
是否可以取消引用
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_lines ----

gtk_text_iter_forward_lines
如果可能，向前移動計數行（如果計數將移動到緩衝區的起點或終點，則移動到緩衝區的起點或終點）。返回值指示反覆運算器是否移動到可取消引用的位置;如果反覆運算器沒有移動，或者移動到結束反覆運算器上，則返回 FALSE。如果 count 為 0，則該函數不執行任何操作並返回 FALSE。如果計數為負數，則向後移動 0 - 計數行。
語法
參數
iter- 一GtkTextIter
count- 前進的行數
返回
是否被移動並且是可取消引用的
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_search ----

gtk_text_iter_forward_search
向前搜索 str。任何匹配項都由settingmatch_start返回到匹配項的第一個字元，match_end到匹配後的第一個字元。搜索不會繼續過去限制。請注意，搜索是線性或 O（n） 操作，因此您可能希望使用 limit 來避免鎖定 UI，largebuffers.match_start永遠不會設置為 iter 之前的定位，即使有一個可能的match_end在反覆運算之後或反覆運算時。GtkTextIter
語法
參數
iter- 開始搜索
str- 搜索字串
flags- 影響搜索方式的標誌
match_start- 返回匹配開始的位置，或 NULL。[輸出調用方分配][允許-無]
match_end- 返回匹配結束的位置，或 NULL。[輸出調用方分配][允許-無]
limit- 最後一個可能的match_end的位置，或 NULL 表示緩衝區的末尾。[允許-無]
返回
是否找到匹配項
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_sentence_end ----

gtk_text_iter_forward_sentence_end
前進到下一句末尾。（如果 iter 位於句子的末尾，則移動到句子的下一個末尾。句子邊界由Pango確定，對於幾乎任何語言都應該是正確的（如果不是，正確的修復方法是Pango文本邊界演算法）。
語法
參數
iter- 一GtkTextIter
返回
TRUE 如果反覆運算移動並且不是結束反覆運算器，則為 TRUE
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_sentence_ends ----

gtk_text_iter_forward_sentence_ends
調用gtk_text_iter_forward_sentence_end（） 計數次數（或 untilgtk_text_iter_forward_sentence_end（） 返回 FALSE）。如果計數不均衡，則向後移動而不是向前移動。
語法
參數
iter- 一GtkTextIter
count- 要移動的句子數
返回
TRUE 如果反覆運算移動並且不是結束反覆運算器，則為 TRUE
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_to_end ----

gtk_text_iter_forward_to_end
將 iter 向前移動到 ？end 反覆運算器，？它指向緩衝區中的最後一個無效字元。在末端反覆運算器上調用的 gtk_text_iter_get_char（） 返回 0，這對於編寫迴圈很方便。
語法
參數
iter- 一GtkTextIter
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_to_line_end ----

gtk_text_iter_forward_to_line_end
將反覆運算器移動到段落分隔符號字元，這些字元可以是分行符號、回車符、按順序排列的回車符/分行符號或 Unicode 段落分隔符號字元。如果反覆運算器已位於段落分隔符號字元處，則移動到下一行的段落分隔符號字元。如果 iter 位於緩衝區中的最後一行（不以段落分隔符號結尾），則移動到結束反覆運算器（最後一行的末尾），並返回 FALSE。
語法
參數
iter- 一GtkTextIter
返回
TRUE，如果我們移動並且新位置不是結束反覆運算器
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_to_tag_toggle ----

gtk_text_iter_forward_to_tag_toggle
向前移動到標記的下一個切換開關（打開或關閉），或移動到任何標記的下一個開關（如果標記為 NULL）。如果未找到匹配的標記開關，則返回 FALSE，否則返回 TRUE。不返回在反覆運算器處找到的切換開關，只在反覆運算器之後切換。將 iter 設置為切換的位置，或設置為緩衝區的末尾（如果未找到切換）。GtkTextTag
語法
參數
iter- 一GtkTextIter
tag- a 或 NULL。[允許-無]GtkTextTag
返回
我們是否在反覆運算器後找到標籤切換
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_visible_cursor_position ----

gtk_text_iter_forward_visible_cursor_position
將反覆運算器向前移動到下一個可見光標位置。有關詳細資訊，請參見 gtk_text_iter_forward_cursor_position（）。
語法
參數
iter- 一GtkTextIter
返回
true，如果我們移動並且新倉位是可取消參考的
，因為 2.4
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_visible_cursor_positions ----

gtk_text_iter_forward_visible_cursor_positions
向上移動以對可見光標位置進行計數。有關詳細資訊，Seegtk_text_iter_forward_cursor_position（）。
語法
參數
iter- 一GtkTextIter
count- 移動位置的數量
返回
true，如果我們移動並且新倉位是可取消參考的
，因為 2.4
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_visible_line ----

gtk_text_iter_forward_visible_line
將 iter 移動到下一條可見線的開頭。如果有下一行要移動到，則返回 TRUE;如果它只是移動到緩衝區的末尾並且現在不可取消引用，或者如果它在緩衝區的末尾 wasalready，則返回 FALSE。
語法
參數
iter- 反覆運算器
返回
自 2.8
以來是否可以取消引用 iter
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_visible_lines ----

gtk_text_iter_forward_visible_lines
如果可能，向前移動計數可見行（如果計數將移動到緩衝區的開始或結束，則移動到緩衝區的開始或結束）。返回值指示反覆運算器是否移動到可取消引用的位置;如果反覆運算器沒有移動，或者移動到結束反覆運算器上，則返回 FALSE。如果 count 為 0，則該函數不執行任何操作並返回 FALSE。如果計數為負數，則向後移動 0 - 計數行。
語法
參數
iter- 一GtkTextIter
count- 前進的行數
返回
自 2.8 起是否反覆運算且可
取消引用
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_visible_word_end ----

gtk_text_iter_forward_visible_word_end
向前移動到下一個可見的單詞末尾。（如果它當前位於單詞末尾，則轉到該之後的下一個。分詞由Pango確定，並且對於幾乎任何語言都應該是正確的（如果不是，正確的修復方法是Pango分詞演算法）。
語法
參數
iter- 一GtkTextIter
返回
TRUE 如果反覆運算移動並且不是自 2.4 以來的結束反覆運算器，
則為 TRUE
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_visible_word_ends ----

gtk_text_iter_forward_visible_word_ends
調用gtk_text_iter_forward_visible_word_end（） 直到計數次數。
語法
參數
iter- 一GtkTextIter
count- 移動次數
返回
TRUE 如果反覆運算移動並且不是自 2.4 以來的結束反覆運算器，
則為 TRUE
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_word_end ----

gtk_text_iter_forward_word_end
前進到下一個單詞末尾。（如果它當前位於單詞末尾，則轉到該之後的下一個。分詞由Pango確定，並且對於幾乎任何語言都應該是正確的（如果不是，正確的修復方法是Pango分詞演算法）。
語法
參數
iter- 一GtkTextIter
返回
TRUE 如果反覆運算移動並且不是結束反覆運算器，則為 TRUE
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_word_ends ----

gtk_text_iter_forward_word_ends
調用gtk_text_iter_forward_word_end（） 直到計數時間。
語法
參數
iter- 一GtkTextIter
count- 移動次數
返回
TRUE 如果反覆運算移動並且不是結束反覆運算器，則為 TRUE
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_free ----

gtk_text_iter_free
釋放在堆上分配的反覆運算器。此函數旨在用於語言綁定，並且對於應用程式特別有用，因為反覆運算器可以簡單地在堆疊上分配。
語法
參數
iter- 動態分配的反覆運算器
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_attributes ----

gtk_text_iter_get_attributes
計算文本中應用於此點的任何標記的效果。如果沒有標記生效，則應將 values 參數初始化為要使用的預設值設置。您通常會從gtk_text_view_get_default_attributes（）中獲取預設值，.gtk_text_iter_get_attributes（）將修改值，應用反覆運算器中存在的任何標記的有效性。如果任何標籤影響值，該函數返回 TRUE。
語法
參數
iter- 反覆運算器
values- a 要填寫。GtkTextAttributes
返回
如果值已修改，則為 TRUE
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_buffer ----

gtk_text_iter_get_buffer
返回與此反覆運算器關聯的值。GtkTextBuffer
語法
參數
iter- 反覆運算器
返回
緩衝區。[無轉移]
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_bytes_in_line ----

gtk_text_iter_get_bytes_in_line
返回包含反覆運算器的行中的位元組數，包括段落分隔符號。
語法
參數
iter- 反覆運算器
返回
行中的位元組數
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_char ----

gtk_text_iter_get_char
返回此反覆運算器中的 Unicode 字元。（等效於C++反覆運算器上的操作器*。如果此反覆運算器中的元素是非字元元素，例如嵌入在緩衝區中的圖像，則Unicode ？返回字元0xFFFC。如果在結束反覆運算器上調用，則返回零;零 不是有效的 Unicode 字元。所以你可以寫一個迴圈，當gtk_text_iter_get_char（）返回0時結束。
語法
參數
iter- 反覆運算器
返回
Unicode 字元，如果 iteris 不可取消引用，則為 0
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_chars_in_line ----

gtk_text_iter_get_chars_in_line
返回包含 iter 的行中的字元數，包括段落分隔符號。
語法
參數
iter- 反覆運算器
返回
行中的字元數
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_child_anchor ----

gtk_text_iter_get_child_anchor
如果 iter 的位置包含子錨點，則返回 theanchor（不添加新的引用計數）。否則，將返回 NULL。
語法
參數
iter- 反覆運算器
返回
[無轉移]
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_language ----

gtk_text_iter_get_language
gtk_text_iter_get_attributes（） 的便利包裝器，它在 iter 上返回有效的語言。如果沒有影響語言的標記應用於反覆運算器，則返回值與該ofgtk_get_default_language（）相同。
語法
參數
iter- 反覆運算器
返回
反覆運算時有效的語言
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_line ----

gtk_text_iter_get_line
返回包含反覆運算器的行號。ina 行的編號以 0 開頭，表示緩衝區中的第一行。GtkTextBuffer
語法
參數
iter- 反覆運算器
返回
行號
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_line_index ----

gtk_text_iter_get_line_index
返回反覆運算器的位元組索引，從分行符號終止行的開頭開始計數。請記住，在UTF-8中對文本進行編碼，並且字元可能需要可變數量的位元組來表示。GtkTextBuffer
語法
參數
iter- 反覆運算器
返回
距行首的距離，以位元組為單位
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_line_offset ----

gtk_text_iter_get_line_offset
返回反覆運算器的字元偏移量，從分行符號終止行的開頭開始計數。行中的第一個字元的偏移量為 0。
語法
參數
iter- 反覆運算器
返回
從行的起點偏移
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_marks ----

gtk_text_iter_get_marks
返回此位置的所有列表。因為標記是不可反覆運算的（它們不佔用緩衝區中的任何“空間”，它們只是可反覆運算位置之間的標記），因此多個標記可以存在於同一位置。返回的清單不按任何有意義的順序排列。GtkTextMark
語法
參數
iter- 反覆運算器
返回
的列表。[元素類型 GtkTextMark][轉移容器]GtkTextMark
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_offset ----

gtk_text_iter_get_offset
返回反覆運算器的字元偏移量。中的每個字元都有一個偏移量，從 0 開始表示緩衝區中的第一個字元。使用 gtk_text_buffer_get_iter_at_offset（） 將非偏置集轉換回反覆運算器。GtkTextBuffer
語法
參數
iter- 反覆運算器
返回
字元偏移量
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_pixbuf ----

gtk_text_iter_get_pixbuf
如果 iter 處的元素是 pixbuf，則返回 pixbuf（不添加新的引用計數）。否則，將返回 NULL。
語法
參數
iter- 反覆運算器
返回
[無轉移]
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_slice ----

gtk_text_iter_get_slice
返回給定區域中的文本。“切片”是以 UTF-8 格式編碼的字元陣列，包括緩衝區中可反覆運算非字元元素（如圖像）的 Unicode 未知字元0xFFFC。由於圖像是在切片中編碼的，因此返回陣列中的位元組和字元偏移量將對應于文本緩衝區中的位元組偏移集。請注意，0xFFFC也可能出現在普通文本中，因此它不是緩衝區中 pixbuf orwidget 的可靠指標。
語法
參數
start- 範圍開始時的反覆運算器
end- 範圍末尾的反覆運算器
返回
緩衝區中的文本切片
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_tags ----

gtk_text_iter_get_tags
按優先順序昇冪返回應用於 iter 的標記清單（最高優先順序標記位於最後）。列表中沒有添加引用，但您必須釋放列表。GtkTextTag
語法
參數
iter- 一GtkTextIter
返回
的列表。[元素類型 GtkTextTag][轉移容器]GtkTextTag
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_text ----

gtk_text_iter_get_text
返回給定範圍內的文本。如果範圍包含非文本元素（如圖像），則返回的字串中的字元和位元組偏移集將與緩衝區中的字元和位元組偏移量不對應。如果希望偏移量相對應，seegtk_text_iter_get_slice（）。
語法
參數
start- 範圍開始時的反覆運算器
end- 範圍末尾的反覆運算器
返回
緩衝區中的字元陣列
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_toggled_tags ----

gtk_text_iter_get_toggled_tags
返回此時已打開或關閉的那些的列表。（如果toggled_on為 TRUE，則清單包含切換的標記。如果在反覆運算器上打開標記，則 iter 後面的一些非空字元範圍會應用該標記。Ifa 標記處於關閉狀態，則反覆運算後面的某些非空範圍未應用該標記。GtkTextTag
語法
參數
iter- 反覆運算器
toggled_on- TRUE可以獲得切換標籤
返回
標記之間切換。[元素類型 GtkTextTag][轉移容器]
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_visible_line_index ----

gtk_text_iter_get_visible_line_index
返回從行首到給定反覆運算器的位元組數，不計算由於帶有 “不可見”的標記而不可見的位元組數。旗幟切換。
語法
參數
iter- 一GtkTextIter
返回
反覆運算的位元組索引相對於行的開頭
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_visible_line_offset ----

gtk_text_iter_get_visible_line_offset
返回從行首到給定反覆運算器的字元偏移量，不計算由於帶有 “不可見” 的標記而不可見的字元。旗幟切換。
語法
參數
iter- 一GtkTextIter
返回
從行首開始的可見字元偏移
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_visible_slice ----

gtk_text_iter_get_visible_slice
與gtk_text_iter_get_slice（）一樣，但不可見文本不包括在內。不可見的文本通常是不可見的，因為與？不可見的？已打開的屬性已應用於它。GtkTextTag
語法
參數
start- 範圍開始時的反覆運算器
end- 範圍末尾的反覆運算器
返回
緩衝區中的文本切片
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_visible_text ----

gtk_text_iter_get_visible_text
與gtk_text_iter_get_text（）一樣，但不可見文本不包括在內。不可見的文本通常是不可見的，因為與？不可見的？已打開的屬性已應用於它。GtkTextTag
語法
參數
start- 範圍開始時的反覆運算器
end- 範圍末尾的反覆運算器
返回
包含區域中可見文本的字串
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_has_tag ----

gtk_text_iter_has_tag
如果 iter 指向的字元是帶標記標記的範圍的一部分，則返回 TRUE。另請參見 gtk_text_iter_begins_tag（） 和 gtk_text_iter_ends_tag（）。
語法
參數
iter- 反覆運算器
tag- 一GtkTextTag
返回
是否用標籤標記
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_inside_sentence ----

gtk_text_iter_inside_sentence
確定 iter 是否在句子內（而不是在兩個句子之間，例如在句點之後和下一個句子的第一個字母之前）。句子邊界由Pango確定，並且對於幾乎任何語言都應該是正確的（如果不是，則正確的修復將是Pango文本邊界演算法）。
語法
參數
iter- 一GtkTextIter
返回
如果 iteris 在句子中，則為 TRUE。
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_inside_word ----

gtk_text_iter_inside_word
確定它是否在自然語言單詞內（反對在某個空格內說）。分詞由Pango確定，並且對於幾乎任何語言都應該是正確的（如果不是，則正確的修復將是Pango分詞演算法）。
語法
參數
iter- 一GtkTextIter
返回
TRUE 如果 iteris 在單詞內
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_in_range ----

gtk_text_iter_in_range
檢查 iter 是否落在 [開始、結束）的範圍內。開始和結束必須按昇冪排列。
語法
參數
iter- 一GtkTextIter
start- 範圍的開始
end- 範圍結束
返回
如果 iteris 在範圍內，則為 TRUE
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_is_cursor_position ----

gtk_text_iter_is_cursor_position
有關游標位置的詳細資訊，請參閱 gtk_text_iter_forward_cursor_position（） 或 orpango_break（）。PangoLogAttr
語法
參數
iter- 一GtkTextIter
返回
如果游標可以放在反覆運算器處，則為 TRUE
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_is_end ----

gtk_text_iter_is_end
如果 iter 是結束反覆運算器，即緩衝區中最後可忽略反覆運算器的一個，則返回 TRUE。gtk_text_iter_is_end（） 是檢查反覆運算器是否為終端子的最有效方法。
語法
參數
iter- 反覆運算器
返回
是否反覆運算結束反覆運算器
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_is_start ----

gtk_text_iter_is_start
如果 iter 是緩衝區中的第一個反覆運算器，則返回 TRUE，如果 iter 的字元偏移量為 0。
語法
參數
iter- 反覆運算器
返回
是否在緩衝區中包含第一個
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_order ----

gtk_text_iter_order
交換緩衝區中第一個和第二個的值（如果第二個在前面出現第一個）。也就是說，確保第一和第二按順序排列。大多數採用範圍的文本緩衝函數都會代表您自動調用它，因此在這些情況下，沒有真正的理由自己調用它。有一些例外，例如gtk_text_iter_in_range（），需要預先排序的範圍。
語法
參數
first- 一GtkTextIter
second- 另一個 [br \=“”GtkTextIter
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_set_line ----

gtk_text_iter_set_line
將反覆運算器反覆運算器反覆運算器移動到line_number行的開頭。Ifline_number為負數或大於緩衝區中的行數，則將反覆運算器移動到緩衝區中最後一行的開頭。
語法
參數
iter- 一GtkTextIter
line_number- 行號（從0開始計數）
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_set_line_index ----

gtk_text_iter_set_line_index
與 gtk_text_iter_set_line_offset（） 相同，但適用於 abyte 索引。給定的位元組索引必須位於字元的開頭，它不能位於 UTF-8 編碼字元的中間。
語法
參數
iter- 一GtkTextIter
byte_on_line- 相對於反覆運算器當前行的開始的位元組索引
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_set_line_offset ----

gtk_text_iter_set_line_offset
在一行內移動 iter，以新字元（非位元組）偏移量移動。給定的字元偏移量必須小於行中的字元數;如果相等，則反覆運算移動到下一行的開頭。Seegtk_text_iter_set_line_index（） 如果您使用的是位元組索引而不是字元偏移量。
語法
參數
iter- 一GtkTextIter
char_on_line- 相對於反覆運算器當前行的開頭的字元偏移量
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_set_offset ----

gtk_text_iter_set_offset
將 iter 設置為指向char_offset。char_offset從整個文本緩衝區的開頭開始計數，從 0 開始。
語法
參數
iter- 一GtkTextIter
char_offset- 字元號
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_set_visible_line_index ----

gtk_text_iter_set_visible_line_index
與gtk_text_iter_set_line_index（）一樣，但索引以可見位元組為單位，即帶有使其不可見的標記的文本不計入索引中。
語法
參數
iter- 一GtkTextIter
byte_on_line- 一個位元組索引
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_set_visible_line_offset ----

gtk_text_iter_set_visible_line_offset
與gtk_text_iter_set_line_offset（）一樣，但偏移量位於可見字元中，即帶有使其不可見的標記的文本不計入偏移量中。
語法
參數
iter- 一GtkTextIter
char_on_line- 字元偏移量
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_starts_line ----

gtk_text_iter_starts_line
如果 iter 開始一個段落，即如果 gtk_text_iter_get_line_offset（） 將返回 0，則返回 TRUE。但是此函數可能thangtk_text_iter_get_line_offset（） 更有效，因為它不必計算偏移量，只需查看它是否為 0。
語法
參數
iter- 反覆運算器
返回
是否反覆運算成為一條線
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_starts_sentence ----

gtk_text_iter_starts_sentence
確定 iter 是否開始一個句子。句子邊界由Pango決定，對於幾乎任何語言都應該是正確的（如果不是，正確的修復方法是Pango文本邊界演算法）。
語法
參數
iter- 一GtkTextIter
返回
如果 iteris 位於句子的開頭，則為 TRUE。
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_starts_word ----

gtk_text_iter_starts_word
確定 iter 是否以自然語言單詞開頭。分詞由Pango確定，對於幾乎任何語言都應該是正確的（如果不是，正確的修復方法是Pango分詞演算法）。
語法
參數
iter- 一GtkTextIter
返回
TRUE，如果 iteris 位於單詞的開頭
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_iter_toggles_tag ----

gtk_text_iter_toggles_tag
這相當於 （gtk_text_iter_begins_tag（） ||gtk_text_iter_ends_tag（）），即它告訴您應用了帶有標籤的範圍是在反覆運算器處開始還是結束。
語法
參數
iter- 反覆運算器
tag- a 或 NULL。[允許-無]GtkTextTag
返回
tagis 是否在 iter 上打開或關閉
另請參見
GtkTextIter


------------ KeyGTK3gtk_text_mark_get_buffer ----

gtk_text_mark_get_buffer
獲取此標記位於其中的緩衝區，如果刪除標記，則獲取 NULL。
語法
參數
mark- 一GtkTextMark
返回
標記的 .[無轉移]GtkTextBuffer
另請參見
GtkTextMark


------------ KeyGTK3gtk_text_mark_get_deleted ----

gtk_text_mark_get_deleted
如果標記已從其緩衝區中刪除，則返回 true，該標記gtk_text_buffer_delete_mark（）。請參閱 gtk_text_buffer_add_mark（） 以獲取有關再次將其添加到緩衝區的方法。
語法
參數
mark- 一GtkTextMark
返回
是否刪除標記
另請參見
GtkTextMark


------------ KeyGTK3gtk_text_mark_get_left_gravity ----

gtk_text_mark_get_left_gravity
確定標記是否具有左重力。
語法
參數
mark- 一GtkTextMark
返回
如果標記已離開重力，則為 TRUE，否則為 FALSE
另請參見
GtkTextMark


------------ KeyGTK3gtk_text_mark_get_name ----

gtk_text_mark_get_name
返回標記名稱;返回匿名標記的 NULL。
語法
參數
mark- 一GtkTextMark
返回
標記名稱
另請參見
GtkTextMark


------------ KeyGTK3gtk_text_mark_get_visible ----

gtk_text_mark_get_visible
如果標記可見（即為其顯示游標），則返回 TRUE。
語法
參數
mark- 一GtkTextMark
返回
如果可見，則為 TRUE
另請參見
GtkTextMark


------------ KeyGTK3gtk_text_mark_new ----

gtk_text_mark_new
創建文本標記。使用 gtk_text_buffer_add_mark（） 將其添加到緩衝區。如果名稱為 NULL，則該標記是匿名的;否則，可以使用gtk_text_buffer_get_mark（）按名稱檢索標記。如果標記具有左重，並且文本插入到標記的當前位置，則該標記將移動到新插入文本的左側。如果標記具有正確的重力（left_gravity = FALSE），則該標記將最終位於新插入文本的右側。標準的從左到右游標是具有右重力的標記（鍵入時，游標停留在您重新鍵入的文本的右側）。
語法
參數
name- 標記名稱或空。[允許-無]
left_gravity- 標記是否應該留下重力
返回
自 2.12 起的新品
GtkTextMark
另請參見
GtkTextMark


------------ KeyGTK3gtk_text_mark_set_visible ----

gtk_text_mark_set_visible
設置標記的可見性;插入點通常是可見的，即您可以將其視為分隔號。此外，文本視窗使用可見標記來指示拖放文本時將發生拖放的位置。大多數其他標記不可見。預設情況下，標記不可見。
語法
參數
mark- 一GtkTextMark
setting- 標記的可見性
另請參見
GtkTextMark


------------ KeyGTK3gtk_text_tag_event ----

gtk_text_tag_event
發出 ？事件？上的信號。GtkTextTag
語法
參數
tag- 一GtkTextTag
event_object- 接收事件的物件，例如小部件
event- 事件
iter- 接收事件的位置
返回
信號發射的結果（事件是否被處理）
另請參見
GtkTextTag


------------ KeyGTK3gtk_text_tag_get_priority ----

gtk_text_tag_get_priority
獲取標籤優先順序。
語法
參數
tag- 一GtkTextTag
返回
標記的優先順序。
另請參見
GtkTextTag


------------ KeyGTK3gtk_text_tag_new ----

gtk_text_tag_new
創建一個 .使用物件參數配置標籤，即使用g_object_set（）。GtkTextTag
語法
參數
name- 標記名稱，或空。[允許-無]
返回
一個新的GtkTextTag
另請參見
GtkTextTag


------------ KeyGTK3gtk_text_tag_set_priority ----

gtk_text_tag_set_priority
設置 的優先順序。有效優先順序從 0 開始，轉到小於 gtk_text_tag_table_get_size（） 的優先順序。表中的每個標籤都有一個唯一的優先順序;設置一個標籤的優先順序會改變表中所有其他標籤的優先順序，以保持每個標籤的唯一優先順序。更高優先順序的標籤 ？贏？如果兩個標籤都設置了相同的文字屬性。當向標籤表添加標籤時，預設情況下會為該標籤分配表中的最高優先順序;因此，通常一組標記的優先順序是將它們添加到表中或創建withgtk_text_buffer_create_tag（）的順序，這會自動將標記添加到緩衝區的表中。GtkTextTag
語法
參數
tag- 一GtkTextTag
priority- 新的優先順序
另請參見
GtkTextTag


------------ KeyGTK3gtk_text_tag_table_add ----

gtk_text_tag_table_add
向表中添加標記。在表中為標記分配了最高優先順序。標記不得位於標記表中，並且可能與已添加的標記不具有相同的名稱。
語法
參數
table- 一GtkTextTagTable
tag- 一GtkTextTag
另請參見
GtkTextTagTable


------------ KeyGTK3gtk_text_tag_table_foreach ----

gtk_text_tag_table_foreach
使用使用者資料對表中的每個標記調用 func。請注意，在反覆運算表時，可能無法修改該表（您無法添加/刪除標記）。
語法
參數
table- 一GtkTextTagTable
func- 一個在每個標籤上調用的函數。[範圍調用]
data- 使用者資料
另請參見
GtkTextTagTable


------------ KeyGTK3gtk_text_tag_table_get_size ----

gtk_text_tag_table_get_size
返回表的大小（標記數）
語法
參數
table- 一GtkTextTagTable
返回
tabl 中的標籤數
另請參見
GtkTextTagTable


------------ KeyGTK3gtk_text_tag_table_lookup ----

gtk_text_tag_table_lookup
查找命名標記。
語法
參數
table- 一GtkTextTagTable
name- 標籤名稱
返回
表中沒有該名稱的標記，則為 NULL。[無轉移]
另請參見
GtkTextTagTable


------------ KeyGTK3gtk_text_tag_table_new ----

gtk_text_tag_table_new
創建新的 .該表不包含預設標記。GtkTextTagTable
返回
一個新的GtkTextTagTable
另請參見
GtkTextTagTable


------------ KeyGTK3gtk_text_tag_table_remove ----

gtk_text_tag_table_remove
從表格中刪除標記。如果將具有表作為其標記表，則從緩衝區中刪除該標記。表對標記的引用將被刪除，因此，如果您沒有對它的引用，則該標記最終將被銷毀。GtkTextBuffer
語法
參數
table- 一GtkTextTagTable
tag- 一GtkTextTag
另請參見
GtkTextTagTable


------------ KeyGTK3gtk_text_view_add_child_at_anchor ----

gtk_text_view_add_child_at_anchor
在文本緩衝區的給定錨點處添加一個子構件。
語法
參數
text_view- 一GtkTextView
child- 一GtkWidget
anchor- a 在 text_viewGtkTextChildAnchorGtkTextBuffer
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_add_child_in_window ----

gtk_text_view_add_child_in_window
在其中一個文本構件的視窗中的固定座標處添加一個子級。窗口必須具有非零大小 （seegtk_text_view_set_border_window_size（））。請注意，子座標是相對於滾動給出的。當將孩子放在 中時，滾動是相關的，孩子漂浮在所有可滾動區域之上。但是，當將孩子放在其中一個可滾動視窗（邊框視窗或文本視窗）中時，它將根據需要隨滾動而移動。GTK_TEXT_WINDOW_WIDGET
語法
參數
text_view- 一GtkTextView
child- 一GtkWidget
which_window- 孩子應該出現在哪個視窗中
xpos- 子項在視窗座標中的 X 位置
ypos- 子項在視窗座標中的 Y 位置
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_backward_display_line ----

gtk_text_view_backward_display_line
將給定的反覆運算器向後移動一條顯示（換行）線。顯示行不同於段落。段落由分行符號或其他段落分隔符號分隔。顯示線是通過對段落換行創建的。如果關閉包裝，則顯示行和段落將相同。每個視圖的顯示線劃分不同，因為它們取決於視圖的寬度;段落在 allviews 中是相同的，因為它們依賴於 .GtkTextBuffer
語法
參數
text_view- 一GtkTextView
iter- 一GtkTextIter
返回
TRUE 如果 iter 已移動並且不在末端反覆運算器上
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_backward_display_line_start ----

gtk_text_view_backward_display_line_start
將給定的反覆運算器向後移動到下一個顯示行開始。顯示行不同於段落。段落由分行符號或其他段落分隔符號分隔。顯示線是通過對段落換行創建的。如果關閉包裝，則顯示行和段落將相同。每個視圖的顯示線劃分不同，因為它們取決於視圖的寬度;段落在 allviews 中是相同的，因為它們依賴於 .GtkTextBuffer
語法
參數
text_view- 一GtkTextView
iter- 一GtkTextIter
返回
TRUE 如果 iter 已移動並且不在末端反覆運算器上
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_buffer_to_window_coords ----

gtk_text_view_buffer_to_window_coords
將座標（buffer_x、buffer_y）轉換為視窗的座標，並將結果存儲在 （window_x、window_y） 中。請注意，您無法為不存在的視窗轉換座標（請參見gtk_text_view_set_border_window_size（））。
語法
參數
text_view- 一GtkTextView
win- 一個例外GtkTextWindowTypeGTK_TEXT_WINDOW_PRIVATE
buffer_x- 緩衝區 x 座標
buffer_y- 緩衝區 y 座標
window_x- 窗口 x 座標返回位置或空。[輸出][允許-無]
window_y- 窗口 y 座標返回位置或空。[輸出][允許-無]
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_forward_display_line ----

gtk_text_view_forward_display_line
將給定的反覆運算器向前移動一條顯示（換行）線。顯示行不同於段落。段落由分行符號或其他段落分隔符號分隔。顯示線是通過對段落換行創建的。如果關閉包裝，則顯示行和段落將相同。每個視圖的顯示線劃分不同，因為它們取決於視圖的寬度;段落在 allviews 中是相同的，因為它們依賴於 .GtkTextBuffer
語法
參數
text_view- 一GtkTextView
iter- 一GtkTextIter
返回
TRUE 如果 iter 已移動並且不在末端反覆運算器上
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_forward_display_line_end ----

gtk_text_view_forward_display_line_end
將給定的反覆運算器向前移動到下一個顯示行末尾。顯示行不同於段落。段落由分行符號或其他段落分隔符號分隔。顯示線是通過對段落換行創建的。如果關閉包裝，則顯示行和段落將相同。每個視圖的顯示線劃分不同，因為它們取決於視圖的寬度;段落在 allviews 中是相同的，因為它們依賴於 .GtkTextBuffer
語法
參數
text_view- 一GtkTextView
iter- 一GtkTextIter
返回
TRUE 如果 iter 已移動並且不在末端反覆運算器上
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_accepts_tab ----

gtk_text_view_get_accepts_tab
返回按 Tab 鍵是否插入 tab characters.gtk_text_view_set_accepts_tab（）。
語法
參數
text_view- 一GtkTextView
返回
如果按 Tab 鍵插入定位字元，則為 TRUE，如果按 Tab 鍵移動鍵盤焦點，則為 FALSE。
2.4 起
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_border_window_size ----

gtk_text_view_get_border_window_size
獲取指定邊框視窗的寬度。Seegtk_text_view_set_border_window_size（）.
語法
參數
text_view- 一GtkTextView
type- 窗口返回大小從
返回
窗口寬度
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_buffer ----

gtk_text_view_get_buffer
返回此文本視圖顯示的正在運行項。緩衝區上的引用計數不遞增;此函數的調用方不會擁有新的引用。GtkTextBuffer
語法
參數
text_view- 一GtkTextView
返回
一個。[無轉移]GtkTextBuffer
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_cursor_locations ----

gtk_text_view_get_cursor_locations
給定文本佈局中的反覆運算器，如果插入點位於該值，則確定強游標和弱游標的位置。每個游標的位置存儲為零寬度矩形。強游標位置是插入方向性等於段落基本方向的字元的位置。弱游標位置是插入與段落基方向相反的方向性字元的位置。如果它為 NULL，則使用實際的游標位置。請注意，如果 iter 恰好是實際的游標位置，並且當前正在輸入 IM 預編輯序列，則將調整該位置以考慮預編輯序列中的預編輯游標的偏移量。矩形位置在緩衝區座標中;usegtk_text_view_buffer_to_window_coords（） 將這些座標轉換為文本視圖中某個視窗的座標。
語法
參數
text_view- 一GtkTextView
iter- 一個.[允許-無]GtkTextIter
strong- 存儲強游標位置的位置（可能為 NULL）。[輸出][允許-無]
weak- 存儲弱游標位置的位置（可能為 NULL）。[輸出][允許-無]
自 3.0 起
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_cursor_visible ----

gtk_text_view_get_cursor_visible
查明是否正在顯示游標。
語法
參數
text_view- 一GtkTextView
返回
插入標記是否可見
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_default_attributes ----

gtk_text_view_get_default_attributes
獲取默認文字屬性的副本。這些是用於文本的歸因，除非標記覆蓋它們。您通常會在togtk_text_iter_get_attributes（）中傳遞預設屬性，以使屬性在給定的文本位置生效。返回值是此函式呼叫方擁有的副本，應釋放。
語法
參數
text_view- 一GtkTextView
返回
一個新的GtkTextAttributes
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_editable ----

gtk_text_view_get_editable
返回 的缺省可編輯性。對於某些文本範圍，緩衝區中的標記可能會覆蓋此設置。GtkTextView
語法
參數
text_view- 一GtkTextView
返回
預設情況下文本是否可編輯
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_hadjustment ----

gtk_text_view_get_hadjustment
gtk_text_view_get_hadjustment自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_scrollable_get_hadjustment（）獲取水準滾動 。GtkAdjustment
語法
參數
text_view- 一GtkTextView
返回
指向水準 .[無轉移]
2.22 起GtkAdjustment
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_indent ----

gtk_text_view_get_indent
獲取text_view中段落的默認縮進。視圖緩衝區中的標記可能會覆蓋預設值。縮進可能是負數。
語法
參數
text_view- 一GtkTextView
返回
縮進圖元數
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_input_hints ----

gtk_text_view_get_input_hints
獲取屬性的值。?input-hints?
語法
參數
text_view- a
自3.6起GtkTextView
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_input_purpose ----

gtk_text_view_get_input_purpose
獲取屬性的值。?input-purpose?
語法
參數
text_view- a
自3.6起GtkTextView
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_iter_at_location ----

gtk_text_view_get_iter_at_location
檢索緩衝區座標 x 和 y 處的反覆運算器。緩衝區座標是整個緩衝區的座標，而不僅僅是當前顯示的部分。如果您有來自事件的座標，則必須將這些座標轉換為緩衝區座標withgtk_text_view_window_to_buffer_coords（）。
語法
參數
text_view- 一GtkTextView
iter- 一個.[輸出]GtkTextIter
x- x位置，在緩衝區座標中
y- y 位置，在緩衝區座標中
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_iter_at_position ----

gtk_text_view_get_iter_at_position
檢索指向緩衝區座標 x 和 y 處的字元的反覆運算器。緩衝區座標是整個緩衝區的座標，而不僅僅是當前顯示的部分。如果您有來自事件的座標，則必須使用gtk_text_view_window_to_buffer_coords（）將這些座標轉換為緩衝區座標。請注意，這與gtk_text_view_get_iter_at_location（）不同，後者返回游標位置，即字元之間的位置。
語法
參數
text_view- 一GtkTextView
iter- 一個.[輸出]GtkTextIter
trailing- 如果非NULL，則位置存儲一個整數，指示使用者點擊的字形的位置。它要麼是零，要麼是grapheme.0中的字元數代表grapheme的後緣。[輸出][允許-無]
x- x位置，在緩衝區座標中
y- y 位置，在緩衝區座標中，
自 2.6 起
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_iter_location ----

gtk_text_view_get_iter_location
獲取一個矩形，該矩形大致包含反覆運算器處的字元。矩形位置在緩衝區座標中;usegtk_text_view_buffer_to_window_coords（） 將這些座標轉換為文本視圖中某個視窗的座標。
語法
參數
text_view- 一GtkTextView
iter- 一GtkTextIter
location- 字元在反覆運算時的邊界。
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_justification ----

gtk_text_view_get_justification
獲取text_view中段落的預設對齊方式。緩衝區中的標記可能會覆蓋預設值。
語法
參數
text_view- 一GtkTextView
返回
默認理由
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_left_margin ----

gtk_text_view_get_left_margin
獲取text_view中段落的默認左邊距大小。緩衝區中的標記可能會覆蓋預設值。
語法
參數
text_view- 一GtkTextView
返回
左邊距（以圖元為單位）
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_line_at_y ----

gtk_text_view_get_line_at_y
獲取包含座標 y 的行的開頭。y 位於緩衝區座標中，使用 gtk_text_view_window_to_buffer_coords（） 從視窗座標轉換。如果非 NULL，line_top將填充線頂部邊的座標。GtkTextIter
語法
參數
text_view- 一GtkTextView
target_iter- 一個.[輸出]GtkTextIter
y- 一個 y 座標
line_top- 返回線頂部座標的位置。[輸出]
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_line_yrange ----

gtk_text_view_get_line_yrange
獲取包含反覆運算器的行頂部的 y 座標和該行的高度。座標是緩衝區座標;轉換為視窗座標，gtk_text_view_buffer_to_window_coords（）。
語法
參數
text_view- 一GtkTextView
iter- 一GtkTextIter
y- 返回 y 座標的位置。[輸出]
height- 返回高度的位置。[輸出]
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_overwrite ----

gtk_text_view_get_overwrite
返回 是否處於覆蓋模式。GtkTextView
語法
參數
text_view- 一GtkTextView
返回
是否text_viewis覆蓋模式。
自 2.4 起
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_pixels_above_lines ----

gtk_text_view_get_pixels_above_lines
獲取要放在段落上方的預設圖元數。
語法
參數
text_view- 一GtkTextView
返回
段落上方的預設圖元數
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_pixels_below_lines ----

gtk_text_view_get_pixels_below_lines
獲取由 gtk_text_view_set_pixels_below_lines（） 設置的值。
語法
參數
text_view- 一GtkTextView
返回
段落下方的預設空白圖元數
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_pixels_inside_wrap ----

gtk_text_view_get_pixels_inside_wrap
獲取由 gtk_text_view_set_pixels_inside_wrap（） 設置的值。
語法
參數
text_view- 一GtkTextView
返回
換行之間空白區域的預設圖元數
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_right_margin ----

gtk_text_view_get_right_margin
獲取text_view中文本的預設右邊距。緩衝區中的標記可能會覆蓋預設值。
語法
參數
text_view- 一GtkTextView
返回
右邊距（以圖元為單位）
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_tabs ----

gtk_text_view_get_tabs
獲取text_view的預設選項卡。緩衝區中的標記可能會超過預設值。返回的陣列將為 NULL，如果？standard？使用（8 個空格）選項卡。使用pango_tab_array_free（） 釋放返回值。
語法
參數
text_view- 一GtkTextView
返回
預設選項卡陣列的副本，如果使用“標準”選項卡，則為 NULL;必須使用 pango_tab_array_free（） 釋放。
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_vadjustment ----

gtk_text_view_get_vadjustment
gtk_text_view_get_vadjustment自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_scrollable_get_vadjustment（）獲取垂直捲動 。GtkAdjustment
語法
參數
text_view- 一GtkTextView
返回
指向垂直 的指標。[無轉移]
2.22 起GtkAdjustment
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_visible_rect ----

gtk_text_view_get_visible_rect
在緩衝區座標中，使用緩衝區的當前可見區域填滿visible_rect。轉換為視窗座標，gtk_text_view_buffer_to_window_coords（）。
語法
參數
text_view- 一GtkTextView
visible_rect- 矩形填充。[輸出]
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_window ----

gtk_text_view_get_window
檢索與文本視圖的某個區域相對應的視窗;可能的視窗包括整個視窗小部件視窗、左側、右側、頂部、底部的子視窗以及顯示文本緩衝區的視窗。如果視窗的寬度或高度為 0，則 Windows 為 NULL 且不存在，並且在實現小部件之前不存在。GdkWindow
語法
參數
text_view- 一GtkTextView
win- 窗口得到
返回
a 或空。[無轉移]GdkWindow
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_window_type ----

gtk_text_view_get_window_type
通常用於找出事件對應於哪個視窗。如果在 text_view 上連接到事件信號，則應在事件>視窗中調用此函數，以查看它是哪個視窗。
語法
參數
text_view- 一GtkTextView
window- 窗口類型
返回
窗口類型。
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_get_wrap_mode ----

gtk_text_view_get_wrap_mode
獲取視圖的換行。
語法
參數
text_view- 一GtkTextView
返回
換行設置
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_im_context_filter_press ----

gtk_text_view_im_context_filter_keypress
gtk_text_view_im_context_filter_keypress?()
允許輸入法在內部處理按鍵和釋放事件。如果此函數返回 TRUE，則不應對此關鍵事件執行進一步處理。Seegtk_im_context_filter_keypress（）.請注意，在重寫金鑰事件處理時，您需要從處理常式調用此函數。當您需要在 輸入法和 的默認鍵事件處理之間插入自己的鍵處理時，需要這樣做。1234567891011121314[/syntax] [syntax]static gbooleangtk_foo_bar_key_press_event （GtkWidget *widget， GdkEventKey *event）{ if （（key->keyval == GDK_KEY_Return || key->keyval == GDK_KEY_KP_Enter）） { if （gtk_text_view_im_context_filter_keypress （GTK_TEXT_VIEW （view）， event）） 返回 TRUE; } // Do some stuff 返回 GTK_WIDGET_CLASS （gtk_foo_bar_parent_class）->key_press_event （widget， 事件）;}[/語法]GtkTextViewGtkTextView
語法
參數
text_view- 一GtkTextView
event- 關鍵事件
返回
如果輸入法處理鍵事件，則為 TRUE。
2.22 起
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_move_child ----

gtk_text_view_move_child
更新子節點的位置，如gtk_text_view_add_child_in_window（）。
語法
參數
text_view- 一GtkTextView
child- 子小部件已添加到文本視圖中
xpos- 新的X位置在視窗座標
ypos- 視窗座標中新的Y位置
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_move_mark_onscreen ----

gtk_text_view_move_mark_onscreen
在緩衝區內移動標記，使其位於當前可見的文本區域內。
語法
參數
text_view- 一GtkTextView
mark- 一GtkTextMark
返回
如果標記移動，則為 TRUE（尚未在螢幕上顯示）
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_move_visually ----

gtk_text_view_move_visually
直觀地移動反覆運算器給定數量的字元，將其視為強游標位置。如果 count 為正，則新的強游標位置將是舊游標位置右側的 count 位置。如果 count 為負數，則新的強游標位置將是舊游標位置左側的 count 位置。在存在雙向文本的情況下，邏輯順序和視覺順序之間的對應關係將取決於當前運行的方向，並且當游標從運行結束時移開時，可能會出現跳躍。
語法
參數
text_view- 一GtkTextView
iter- 一GtkTextIter
count- 要移動的字元數（向左移動，向右移動正向）
返回
TRUE 如果反覆運算移動並且不在最終反覆運算器上
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_new ----

gtk_text_view_new
創建新的 .如果在使用文本視圖之前未調用 gtk_text_view_set_buffer（），則將為您創建一個空的默認緩衝區。使用 gtk_text_view_get_buffer（） 獲取緩衝區。如果要指定自己的緩衝區，請考慮gtk_text_view_new_with_buffer（）。GtkTextView
返回
一個新的GtkTextView
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_new_with_buffer ----

gtk_text_view_new_with_buffer
創建一個顯示緩衝緩衝區的新小部件。一個緩衝區可以在許多 widgets 之間共用。buffer 可以是 NULL 以創建預設緩衝區，在這種情況下，此函數等效於 gtk_text_view_new（）。文本視圖將其自己的引用計數添加到緩衝區;它不會佔用現有引用。GtkTextView
語法
參數
buffer- 一GtkTextBuffer
返回
一個新的.GtkTextView
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_place_cursor_onscreen ----

gtk_text_view_place_cursor_onscreen
將游標移動到緩衝區的當前可見區域，它不存在。
語法
參數
text_view- 一GtkTextView
返回
如果必須移動游標，則為 TRUE。
另請參見
GtkTextView


------------ KeyGTK3GTK_TEXT_VIEW_PRIORITY_VALIDATE ----

GTK_TEXT_VIEW_PRIORITY_VALIDATE
GTK_TEXT_VIEW_PRIORITY_VALIDATE
文本視圖在後臺空閒作業中驗證螢幕上線條的優先順序
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_reset_im_context ----

gtk_text_view_reset_im_context
如果需要，重置文本視圖的輸入法上下文。在修改緩衝區會混淆正在進行的輸入法行為的情況下，這可能是必要的。
語法
參數
text_view- a
自2.22起GtkTextView
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_scroll_mark_onscreen ----

gtk_text_view_scroll_mark_onscreen
滾動text_view最小距離，以便將標記包含在構件的可見區域中。
語法
參數
text_view- 一GtkTextView
mark- 緩衝區中用於text_view的標記
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_scroll_to_iter ----

gtk_text_view_scroll_to_iter
滾動text_view，以便 iter 位於螢幕上由 xalign 和 yalign 指示的位置。對齊方式 0.0 表示左對齊或頂部，1.0 表示右對齊或下對齊，0.5 表示居中。如果use_align為 FALSE，則文本將滾動最小距離以在螢幕上顯示標記，可能根本不滾動。用於此功能的有效螢幕將減小within_margin的尺寸邊距。請注意，此函數使用文本緩衝區中當前計算的行的高度。行高在空閒處理常式中計算;因此，如果在高度計算之前調用此函數，則此函數可能不會產生預期的效果。為避免奇怪，請考慮使用gtk_text_view_scroll_to_mark（），它將保存一個要在行驗證後滾動到的點。
語法
參數
text_view- 一GtkTextView
iter- 一GtkTextIter
within_margin- 邊距為螢幕尺寸的 [0.0，0.5） 部分
use_align- 是否使用對齊參數（如果為FALSE，只需在螢幕上獲取標記）
xalign- 可見區域內標記的水準對齊
yalign- 可見區域內標記的垂直對齊
返回
如果發生滾動，則為 TRUE
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_scroll_to_mark ----

gtk_text_view_scroll_to_mark
滾動text_view，以便標記在螢幕上由 xalign 和 yalign 指示的位置。對齊方式 0.0 表示左對齊或頂部，1.0 表示右對齊或下對齊，0.5 表示居中。如果use_align為 FALSE，則文本將滾動最小距離以在螢幕上顯示標記，可能根本不滾動。用於此功能的有效螢幕將減小within_margin的尺寸邊距。
語法
參數
text_view- 一GtkTextView
mark- 一GtkTextMark
within_margin- 邊距為螢幕尺寸的 [0.0，0.5） 部分
use_align- 是否使用對齊參數（如果為 FALSE，則只獲取螢幕上的標記）
xalign- 可見區域內標記的水準對齊
yalign- 可見區域內標記的垂直對齊
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_set_accepts_tab ----

gtk_text_view_set_accepts_tab
設置按下 Tab 鍵時文本構件的行為。如果accepts_tab為 TRUE，則插入定位字元。如果accepts_tab為 FALSE，則鍵盤焦點將移動到焦點鏈中的下一個小部件。
語法
參數
text_view- 一GtkTextView
accepts_tab- TRUE 如果按 Tab 鍵應插入定位字元，則為 FALSE，如果按 Tab 鍵應移動鍵盤焦點。
2.4 起
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_set_border_window_size ----

gtk_text_view_set_border_window_size
設置GTK_TEXT_WINDOW_LEFT或GTK_TEXT_WINDOW_RIGHT的寬度，或GTK_TEXT_WINDOW_TOP或GTK_TEXT_WINDOW_BOTTOM的高度。如果大小設置為 0，則自動銷毀相應的視窗;如果大小設置為非零，則創建視窗。此函數只能用於？邊框窗口，？它不能與 、 、 或 一起使用。GTK_TEXT_WINDOW_WIDGETGTK_TEXT_WINDOW_TEXTGTK_TEXT_WINDOW_PRIVATE
語法
參數
text_view- 一GtkTextView
type- 影響窗口
size- 窗口的寬度或高度
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_set_buffer ----

gtk_text_view_set_buffer
將緩衝區設置為text_view顯示的緩衝區。文本視圖顯示的上一個緩衝區未引用，並且引用已添加到緩衝區。如果在將 buffer 傳遞給此函數之前，您擁有對 buffer 的引用，則必須自行刪除該引用;不會“採用”它。GtkTextView
語法
參數
text_view- 一GtkTextView
buffer- 一個.[允許-無]GtkTextBuffer
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_set_cursor_visible ----

gtk_text_view_set_cursor_visible
切換是否顯示插入點。沒有可編輯文本的緩衝區可能不應該有可見的游標，因此您可能需要關閉游標。
語法
參數
text_view- 一GtkTextView
setting- 是否顯示插入游標
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_set_editable ----

gtk_text_view_set_editable
設置 的默認可編輯性。您可以使用標籤的“可編輯”屬性，在緩衝區中使用標籤覆蓋此默認設置。GtkTextView
語法
參數
text_view- 一GtkTextView
setting- 它是否可編輯
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_set_indent ----

gtk_text_view_set_indent
設置text_view中段落的默認縮進。緩衝區中的標記可能會覆蓋預設值。
語法
參數
text_view- 一GtkTextView
indent- 以圖元為單位的縮進
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_set_input_hints ----

gtk_text_view_set_input_hints
設置屬性，該屬性允許輸入方法微調其行為。?input-hints?
語法
參數
text_view- 一GtkTextView
hints- 自3.6以來的
提示
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_set_input_purpose ----

gtk_text_view_set_input_purpose
設置螢幕鍵盤和其他輸入方法可用于調整其行為的屬性。?input-purpose?
語法
參數
text_view- 一GtkTextView
purpose- 自3.6以來的目的
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_set_justification ----

gtk_text_view_set_justification
設置text_view中文本的預設對齊方式。視圖緩衝區中的標記可能會覆蓋預設值。
語法
參數
text_view- 一GtkTextView
justification- 理由
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_set_left_margin ----

gtk_text_view_set_left_margin
設置text_view中文本的預設左邊距。緩衝區中的標記可能會覆蓋預設值。
語法
參數
text_view- 一GtkTextView
left_margin- 左邊距（以圖元為單位）
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_set_overwrite ----

gtk_text_view_set_overwrite
更改覆蓋模式。GtkTextView
語法
參數
text_view- 一GtkTextView
overwrite- TRUE 打開覆蓋模式，FALSE 自 2.4 起關閉
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_set_pixels_above_lines ----

gtk_text_view_set_pixels_above_lines
設置text_view段落上方的預設空白圖元數。緩衝區中用於text_view的標記可能會覆蓋預設值。
語法
參數
text_view- 一GtkTextView
pixels_above_lines- 段落上方的圖元
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_set_pixels_below_lines ----

gtk_text_view_set_pixels_below_lines
設置要將段落放在text_view下方的空白區域的預設圖元數。可能被應用於text_view緩衝區的標記覆蓋。
語法
參數
text_view- 一GtkTextView
pixels_below_lines- 段落下方的圖元
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_set_pixels_inside_wrap ----

gtk_text_view_set_pixels_inside_wrap
設置要在段落內顯示/換行之間保留的缺省空白區域圖元數。可能被text_view緩衝區中的 bytags 覆蓋。
語法
參數
text_view- 一GtkTextView
pixels_inside_wrap- 換行之間的預設圖元數
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_set_right_margin ----

gtk_text_view_set_right_margin
設置文本視圖中文本的預設右邊距。緩衝區中的標記可能會覆蓋預設值。
語法
參數
text_view- 一GtkTextView
right_margin- 右邊距（以圖元為單位）
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_set_tabs ----

gtk_text_view_set_tabs
設置text_view中段落的默認定位停駐點。緩衝區中的標記可能會覆蓋預設值。
語法
參數
text_view- 一GtkTextView
tabs- 選項卡作為一個PangoTabArray
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_set_wrap_mode ----

gtk_text_view_set_wrap_mode
設置視圖的換行。
語法
參數
text_view- 一GtkTextView
wrap_mode- 一GtkWrapMode
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_starts_display_line ----

gtk_text_view_starts_display_line
確定 iter 是否位於顯示線的開頭。有關顯示行與段落的說明，請參閱 gtk_text_view_forward_display_line（）。
語法
參數
text_view- 一GtkTextView
iter- 一GtkTextIter
返回
TRUE 如果反覆運算開始換行
另請參見
GtkTextView


------------ KeyGTK3gtk_text_view_window_to_buffer_coords ----

gtk_text_view_window_to_buffer_coords
將 win 標識的視窗上的座標轉換為緩衝區座標，並將結果存儲在 （buffer_x，buffer_y） 中。請注意，您無法為不存在的視窗轉換座標（請參見gtk_text_view_set_border_window_size（））。
語法
參數
text_view- 一GtkTextView
win- 一個例外GtkTextWindowTypeGTK_TEXT_WINDOW_PRIVATE
window_x- 窗口 x 座標
window_y- 窗口 y 座標
buffer_x- 緩衝區 x 座標返回位置或 NULL。[輸出][允許-無]
buffer_y- 緩衝區 y 座標返回位置或 NULL。[輸出][允許-無]
另請參見
GtkTextView


------------ KeyGTK3gtk_theming_engine_get ----

gtk_theming_engine_get
檢索應用於當前呈現的元素的多個樣式屬性值。
語法
參數
engine- 一GtkThemingEngine
state- 要檢索其值的狀態
...- 屬性名稱/返回值對，後跟 NULL
自 3.0 起
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_background_color ----

gtk_theming_engine_get_background_color
獲取給定狀態的背景色。
語法
參數
engine- 一GtkThemingEngine
state- 狀態以檢索顏色
color- 返回背景顏色的值。[輸出]
自 3.0 起
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_border ----

gtk_theming_engine_get_border
將給定狀態的邊框獲取為 .GtkBorder
語法
參數
engine- 一GtkThemingEngine
state- 狀態以檢索其邊框
border- 返回邊框設置的值。[輸出]
自 3.0 起
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_border_color ----

gtk_theming_engine_get_border_color
獲取給定狀態的邊框顏色。
語法
參數
engine- 一GtkThemingEngine
state- 狀態以檢索顏色
color- 返回邊框顏色的值。[輸出]
自 3.0 起
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_color ----

gtk_theming_engine_get_color
獲取給定狀態的前景色。
語法
參數
engine- 一GtkThemingEngine
state- 狀態以檢索顏色
color- 前景色的返回值。[輸出]
自 3.0 起
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_direction ----

gtk_theming_engine_get_direction
gtk_theming_engine_get_direction自 3.8 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_theming_engine_get_state（） 並檢查 和。返回用於渲染的小部件方向。GTK_STATE_FLAG_DIR_LTRGTK_STATE_FLAG_DIR_RTL
語法
參數
engine- 一GtkThemingEngine
返回
自 3.0 以來的小部件方向
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_font ----

gtk_theming_engine_get_font
gtk_theming_engine_get_font自 3.8 版起已棄用，不應在新編寫的代碼中使用。Use gtk_theming_engine_get（）返回給定狀態的字體說明。
語法
參數
engine- 一GtkThemingEngine
state- 狀態以檢索字體
返回
對於給定狀態。此物件歸 GTK+ 所有，不應被棄用。[無轉移]
自 3.0 起PangoFontDescription
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_junction_sides ----

gtk_theming_engine_get_junction_sides
返回用於渲染的小部件方向。
語法
參數
engine- 一GtkThemingEngine
返回
自 3.0 以來的小部件方向
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_margin ----

gtk_theming_engine_get_margin
以 .GtkBorder
語法
參數
engine- 一GtkThemingEngine
state- 狀態以檢索其邊框
margin- 邊距設置的返回值。[輸出]
自 3.0 起
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_padding ----

gtk_theming_engine_get_padding
將給定狀態的填充作為 .GtkBorder
語法
參數
engine- 一GtkThemingEngine
state- 檢索填充的狀態
padding- 填充設置的返回值。[輸出]
自 3.0 起
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_path ----

gtk_theming_engine_get_path
返回用於樣式匹配的小部件路徑。
語法
參數
engine- 一GtkThemingEngine
返回
一個。[無轉移]
自 3.0 起GtkWidgetPath
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_property ----

gtk_theming_engine_get_property
獲取從應用於當前呈現元素的樣式設置中檢索到的屬性值。
語法
參數
engine- 一GtkThemingEngine
property- 屬性名稱
state- 要檢索其值的狀態
value- 返回屬性值的位置，一旦完成，必須使用g_value_unset（）釋放此記憶體。[輸出][轉移完整]
自 3.0 起
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_screen ----

gtk_theming_engine_get_screen
返回當前呈現到的引擎。GdkScreen
語法
參數
engine- 一GtkThemingEngine
返回
a 或空。[無轉移]GdkScreen
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_state ----

gtk_theming_engine_get_state
返回呈現時使用的狀態。
語法
參數
engine- 一GtkThemingEngine
返回
自 3.0 以來的州旗
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_style ----

gtk_theming_engine_get_style
根據當前呈現的內容的樣式從引擎中檢索多個小部件樣式屬性。
語法
參數
engine- 一GtkThemingEngine
...- 屬性名稱/返回值對，後跟 NULL
自 3.0 起
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_style_property ----

gtk_theming_engine_get_style_property
獲取小部件樣式屬性的值。
語法
參數
engine- 一GtkThemingEngine
property_name- 小部件樣式屬性的名稱
value- 返回屬性值的位置，使用後免費withg_value_unset（）。
自 3.0 起
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_style_valist ----

gtk_theming_engine_get_style_valist
根據當前呈現的內容的樣式從引擎中檢索多個小部件樣式屬性。
語法
參數
engine- 一GtkThemingEngine
args- va_list屬性名稱/返回位置對，後跟 NULL
自 3.0 起
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_valist ----

gtk_theming_engine_get_valist
檢索應用於當前呈現的元素的多個樣式屬性值。
語法
參數
engine- 一GtkThemingEngine
state- 要檢索其值的狀態
args- va_list屬性名稱/返回位置對，後跟 NULL
自 3.0 起
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_has_class ----

gtk_theming_engine_has_class
如果當前呈現的內容已定義給定的類名，則返回 TRUE。
語法
參數
engine- 一GtkThemingEngine
style_class- 要查找的類名
返回
如果引擎
自 3.0 以來class_namedefined，則為 true
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_has_region ----

gtk_theming_engine_has_region
如果當前呈現的內容定義了區域，則返回 TRUE。如果flags_return不為 NULL，則將其設置為影響該區域的標誌。
語法
參數
engine- 一GtkThemingEngine
style_region- 區域名稱
flags- 區域標誌的返回位置。[輸出][允許-無]
返回
如果區域是從 3.0 開始定義的
，則為 TRUE
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_load ----

gtk_theming_engine_load
從標準目錄中載入並初始化主題引擎模組。
語法
參數
name- 要載入的主題引擎名稱
返回
主題引擎，如果引擎名稱不存在，則為 NULL。[無轉移]
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_lookup_color ----

gtk_theming_engine_lookup_color
查找並解析當前樣式的色彩映射表中的顏色名稱。
語法
參數
engine- 一GtkThemingEngine
color_name- 顏色名稱查找
color- 查找顏色的返回位置。[輸出]
返回
如果找到並解決了color_namewas，則為 true，否則為 FALSE
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_register_property ----

gtk_theming_engine_register_property
gtk_theming_engine_register_property自 3.8 版起已棄用，不應在新編寫的代碼中使用。代碼應使用 CSS 提供的預設屬性。註冊一個屬性，以便它可以在CSS檔案格式中使用，在CSS檔上，該屬性將看起來像“-${name_space}-${property_name}”。是${property_name} 給定給 pspec。name_space通常是主題引擎名稱。對於任何類型，都可以提供parse_func，該函數用於將CSS中的任何屬性值（在？：？和？;？之間）轉換為所需的值。對於基本類型，已經有builtin解析支援，因此可以為這些情況提供NULL。引擎必須確保財產登記恰好發生一次，通常GTK+將主題引擎處理為單例，因此這應保證發生一次，但在創建自己時請記住這一點。為了使用 CSS 檔中的自訂註冊屬性，請確保首先通過在前面的規則或 sameone 中指定引擎屬性來載入引擎。1234[/syntax] [syntax]* { engine： someengine; -someEngine-custom-property： 2;}[/語法]GValueGtkThemeEngines
語法
參數
name_space- 屬性名稱的命名空間
parse_func- 解析函數使用，或 NULL
pspec- 自3年以來的新物業
。GParamSpec
另請參見
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_state_is_running ----

gtk_theming_engine_state_is_running
gtk_theming_engine_state_is_running has been deprecated since version 3.6 and should not be used in newly-written code.Always returns FALSEReturns TRUE if there is a transition animation running for thecurrent region (see gtk_style_context_push_animatable_region()).If progress is not NULL, the animation progress will be returnedthere, 0.0 means the state is closest to being FALSE, while 1.0 meansit?s closest to being TRUE. This means transition animations willrun from 0 to 1 when state is being set to TRUE and from 1 to 0 whenit?s being set to FALSE.
Syntax
Parameters
engine  -  	a GtkThemingEngine
state  -  	a widget state
progress  -  	 return location for the transition progress. [out]
Returns
TRUE if there is a running transition animation for state.
Since 3.0
See Also
GtkThemingEngine


------------ KeyGTK3gtk_toggle_action_get_active ----

gtk_toggle_action_get_active
gtk_toggle_action_get_active has been deprecated since version 3.10 and should not be used in newly-written code.Returns the checked state of the toggle action.
Syntax
Parameters
action  -  	the action object
Returns
the checked state of the toggle action
Since 2.4
See Also
GtkToggleAction


------------ KeyGTK3gtk_toggle_action_get_draw_as_radio ----

gtk_toggle_action_get_draw_as_radio
gtk_toggle_action_get_draw_as_radio has been deprecated since version 3.10 and should not be used in newly-written code.Returns whether the action should have proxies like a radio action.
Syntax
Parameters
action  -  	the action object
Returns
whether the action should have proxies like a radio action.
Since 2.
See Also
GtkToggleAction


------------ KeyGTK3gtk_toggle_action_new ----

gtk_toggle_action_new
gtk_toggle_action_new自版本 3.10 起已棄用，不應在新編寫的代碼中使用。創建新對象。要將操作添加到 a 並為操作設置加速器，請調用 gtk_action_group_add_action_with_accel（）。GtkToggleActionGtkActionGroup
語法
參數
name- 操作的唯一名稱
label- 顯示在功能表項目和按鈕上的標籤，或 NULL。[允許-無]
tooltip- 操作的工具提示，或 NULL。[允許-無]
stock_id- 在表示操作的小部件中顯示的股票圖示，或 NULL。[允許-無]
返回
自 2.4 以來的新
GtkToggleAction
另請參見
GtkToggleAction


------------ KeyGTK3gtk_toggle_action_set_active ----

gtk_toggle_action_set_active
gtk_toggle_action_set_active 自 3.10 版起已棄用，不應在新編寫的代碼中使用。設置切換操作的已檢查狀態。
語法
參數
action- 動作物件
is_active- 是否應該檢查
操作
自2.4
另請參見
GtkToggleAction


------------ KeyGTK3gtk_toggle_action_set_draw_as_radio ----

gtk_toggle_action_set_draw_as_radio
gtk_toggle_action_set_draw_as_radio自 3.10 版起已棄用，不應在新編寫的代碼中使用。設置動作是否應具有類似於無線電動作的代理。
語法
參數
action- 動作物件
draw_as_radio- 動作是否應該像無線電動作
一樣有代理 自2.4
另請參見
GtkToggleAction


------------ KeyGTK3gtk_toggle_action_toggled ----

gtk_toggle_action_toggled
gtk_toggle_action_toggled自 3.10 版起已棄用，不應在新編寫的代碼中使用。發出“切換”切換操作上的信號。
語法
參數
action- 自 2.4 以來的操作物件
另請參見
GtkToggleAction


------------ KeyGTK3gtk_toggle_button_get_active ----

gtk_toggle_button_get_active
查詢 a 並返回其當前狀態。如果按下切換按鈕，則返回 TRUE;如果按下切換按鈕，則返回 FALSE。GtkToggleButton
語法
參數
toggle_button- 一個.GtkToggleButton
返回
一個值。gboolean
另請參見
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_get_inconsistent ----

gtk_toggle_button_get_inconsistent
獲取由 gtk_toggle_button_set_inconsistent（） 設置的值。
語法
參數
toggle_button- 一GtkToggleButton
返回
如果按鈕顯示為不一致，則為 TRUE，否則為 FALSE
另請參見
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_get_mode ----

gtk_toggle_button_get_mode
檢索按鈕是否顯示為單獨的指示符和標籤。請參見 gtk_toggle_button_set_mode（）。
語法
參數
toggle_button- 一GtkToggleButton
返回
如果將切換按鈕繪製為單獨的指示符和標籤，則為 TRUE。
另請參見
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_new ----

gtk_toggle_button_new
創建新的切換按鈕。小部件應該打包到按鈕中，如gtk_button_new（）所示。
返回
一個新的切換按鈕。
另請參見
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_new_with_label ----

gtk_toggle_button_new_with_label
創建一個帶有文本標籤的新切換按鈕。
語法
參數
label- 包含要放置在切換按鈕中的消息的字串。
返回
一個新的切換按鈕。
另請參見
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_new_with_mnemonic ----

gtk_toggle_button_new_with_mnemonic
創建包含標籤的新標籤。標籤將使用gtk_label_new_with_mnemonic（）創建，因此底線標籤指示按鈕的助記符。GtkToggleButton
語法
參數
label- 按鈕的文本，在字母字元前面有底線
返回
一個新的GtkToggleButton
另請參見
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_set_active ----

gtk_toggle_button_set_active
設置切換按鈕的狀態。如果希望“按下”將GtkToggleButton設置為 TRUE，則設置為 FALSE 以提升它。此操作會導致發出信號和信號。?toggled??clicked?
語法
參數
toggle_button- 一個.GtkToggleButton
is_active- 真或假。
另請參見
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_set_inconsistent ----

gtk_toggle_button_set_inconsistent
如果使用者選擇了受切換按鈕影響的一系列元素（如某些文本或分頁儲存格），並且該範圍內的當前值不一致，則可能需要在“介於兩者之間？？”中顯示切換。州。此功能在兩者之間打開？顯示。通常，如果使用者切換切換按鈕，您將再次關閉不一致狀態。這必須手動執行，gtk_toggle_button_set_inconsistent（）僅影響視覺外觀，而不會影響按鈕的語義。
語法
參數
toggle_button- 一GtkToggleButton
setting- 如果狀態不一致，則為 TRUE[br \=“”
另請參見
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_set_mode ----

gtk_toggle_button_set_mode
設置按鈕是否顯示為單獨的指示器和標籤。您可以在 checkbutton 或選項按鈕上調用此函數 withdraw_indicator = FALSE 以使按鈕看起來像普通按鈕此函數僅影響類的實例，這些類的實例類似於 和 派生自 ，而不是自身的實例。GtkCheckButtonGtkRadioButtonGtkToggleButtonGtkToggleButton
語法
參數
toggle_button- 一GtkToggleButton
draw_indicator- 如果為 TRUE，則將按鈕繪製為單獨的指示符和標籤;如果為 FALSE，則像繪製普通按鈕一樣繪製按鈕
另請參見
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_toggled ----

gtk_toggle_button_toggled
在 上發出信號。應用程式沒有充分的理由調用此函數。?toggled?GtkToggleButton
語法
參數
toggle_button- 一個.GtkToggleButton
另請參見
GtkToggleButton


------------ KeyGTK3gtk_toggle_tool_button_get_active ----

gtk_toggle_tool_button_get_active
查詢 a 並返回其當前狀態。如果按下切換按鈕，則返回 TRUE;如果按下切換按鈕，則返回 FALSE。GtkToggleToolButton
語法
參數
button- 一GtkToggleToolButton
返回
如果按下切換工具按鈕，則為 TRUE;如果未按 From 2，則
為 FALSE。
另請參見
GtkToggleToolButton


------------ KeyGTK3gtk_toggle_tool_button_new ----

gtk_toggle_tool_button_new
返回新的GtkToggleToolButton
返回
a 自 2.4 以來新創建的
GtkToggleToolButton
另請參見
GtkToggleToolButton


------------ KeyGTK3gtk_toggle_tool_button_new_from_stock ----

gtk_toggle_tool_button_new_from_stock
gtk_toggle_tool_button_new_from_stock自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用 gtk_toggle_tool_button_new（）。創建一個包含 astock 項中的圖像和文本的新項。某些股票 ID 具有前置處理器宏，如 和 。如果stock_id不是庫存物料的名稱，則為錯誤。GtkToggleToolButtonGTK_STOCK_OKGTK_STOCK_APPLY
語法
參數
stock_id- 庫存項目的名稱
返回
自 2.4 以來的新
品GtkToggleToolButton
另請參見
GtkToggleToolButton


------------ KeyGTK3gtk_toggle_tool_button_set_active ----

gtk_toggle_tool_button_set_active
設置切換工具按鈕的狀態。如果您希望“按下”GtkToggleButton，則設置為 TRUE，並設置為 FALSE 以提升它。此操作會導致發出切換的信號。
語法
參數
button- 一GtkToggleToolButton
is_active- 按鈕是否應該從2.4開始處於活動狀態
另請參見
GtkToggleToolButton


------------ KeyGTK3gtk_toolbar_get_drop_index ----

gtk_toolbar_get_drop_index
返回與工具列上指示的點對應的位置。將項目拖動到工具列時，這很有用：此函數返回新專案應插入的位置。x 和 y 在工具列座標中。
語法
參數
toolbar- 一GtkToolbar
x- 工具列上一個點的x座標
y- 工具列上某個點的 y 座標
返回
與工具列上的點 （x， y） 相對應的位置。
2.4 起
另請參見
GtkToolbar


------------ KeyGTK3gtk_toolbar_get_icon_size ----

gtk_toolbar_get_icon_size
檢索工具列的圖示大小。請參見 gtk_toolbar_set_icon_size（）。
語法
參數
toolbar- 一GtkToolbar
返回
工具列上圖示的當前圖示大小。
另請參見
GtkToolbar


------------ KeyGTK3gtk_toolbar_get_item_index ----

gtk_toolbar_get_item_index
返回項在工具列上的位置，如果項不是工具列的子項，則從 0.It 開始是錯誤的。
語法
參數
toolbar- 一GtkToolbar
item- a 是工具列的子項GtkToolItem
返回
項目在工具列上的位置。
2.4 起
另請參見
GtkToolbar


------------ KeyGTK3gtk_toolbar_get_nth_item ----

gtk_toolbar_get_nth_item
返回工具列上的第 n 項，如果工具列不包含第 n 項，則返回 NULL。
語法
參數
toolbar- 一GtkToolbar
n- 工具列上的位置
返回
工具列上的第 n 個，如果沒有第 n 個項目，則為 NULL。[無轉移]
2.4 起GtkToolItem
另請參見
GtkToolbar


------------ KeyGTK3gtk_toolbar_get_n_items ----

gtk_toolbar_get_n_items
返回工具列上的項數。
語法
參數
toolbar- 一GtkToolbar
返回
自 2.4 起工具列
上的項目數
另請參見
GtkToolbar


------------ KeyGTK3gtk_toolbar_get_relief_style ----

gtk_toolbar_get_relief_style
返回工具列上按鈕的浮雕樣式。Seegtk_button_set_relief（）.
語法
參數
toolbar- 一GtkToolbar
返回
工具列上按鈕的浮雕樣式。
2.4 起
另請參見
GtkToolbar


------------ KeyGTK3gtk_toolbar_get_show_arrow ----

gtk_toolbar_get_show_arrow
返回工具列是否具有溢出功能表。請參見gtk_toolbar_set_show_arrow（）。
語法
參數
toolbar- 一GtkToolbar
返回
如果工具列具有溢出功能表，則為 TRUE。
2.4 起
另請參見
GtkToolbar


------------ KeyGTK3gtk_toolbar_get_style ----

gtk_toolbar_get_style
檢索工具列是否具有文本和/或圖示。Seegtk_toolbar_set_style（）.
語法
參數
toolbar- 一GtkToolbar
返回
工具列的當前樣式
另請參見
GtkToolbar


------------ KeyGTK3gtk_toolbar_insert ----

gtk_toolbar_insert
將 a 插入到工具列中的位置位置位置。如果 pos 為 0，則項目將附加到工具列的開頭。如果 pos 是無限制的，則將項目追加到工具列的末尾。GtkToolItem
語法
參數
toolbar- 一GtkToolbar
item- 一GtkToolItem
pos- 自2.4以來新項目
的位置
另請參見
GtkToolbar


------------ KeyGTK3gtk_toolbar_new ----

gtk_toolbar_new
創建新工具列。
返回
新創建的工具列。
另請參見
GtkToolbar


------------ KeyGTK3gtk_toolbar_set_drop_highlight_item ----

gtk_toolbar_set_drop_highlight_item
突出顯示工具列，以瞭解如果將項目添加到工具列中index_指示的位置，它將是什麼樣子。如果專案為 NULL，則關閉突出顯示。在這種情況下，index_將被忽略。傳遞給此函數tool_item不得是任何 widgethierarchy 的一部分。當專案設置為放置突出顯示專案時，它不能添加到任何構件層次結構中，也不能用作另一個工具列的突出顯示專案。
語法
參數
toolbar- 一GtkToolbar
tool_item- a ，或 NULL 以轉為突出顯示。[允許-無]GtkToolItem
index_- 自2.4以來工具列
上的位置
另請參見
GtkToolbar


------------ KeyGTK3gtk_toolbar_set_icon_size ----

gtk_toolbar_set_icon_size
此功能設置工具列中常用圖示的大小。您可以在添加圖示之前和添加圖示之後調用它。您設置的大小將覆蓋預設圖示大小的使用者首選項。這應該只用於特殊用途的工具列，正常應用程式工具列應該尊重使用者對圖示大小的偏好。
語法
參數
toolbar- 一GtkToolbar
icon_size- 工具列中的股票圖示應具有。GtkIconSize
另請參見
GtkToolbar


------------ KeyGTK3gtk_toolbar_set_show_arrow ----

gtk_toolbar_set_show_arrow
設置當工具列沒有空間容納其上的所有專案時是否顯示溢出功能表。如果為 TRUE，則沒有空間的專案可通過溢出功能表獲得。
語法
參數
toolbar- 一GtkToolbar
show_arrow- 是否顯示溢出功能表
自2.4
另請參見
GtkToolbar


------------ KeyGTK3gtk_toolbar_set_style ----

gtk_toolbar_set_style
更改工具列的視圖以僅顯示圖示、僅文本或同時顯示兩者。
語法
參數
toolbar- 一個.GtkToolbar
style- 工具列的新樣式。
另請參見
GtkToolbar


------------ KeyGTK3gtk_toolbar_unset_icon_size ----

gtk_toolbar_unset_icon_size
取消設置使用 gtk_toolbar_set_icon_size（） 設置的工具列圖示大小，以便使用使用者首選項來確定圖示大小。
語法
參數
toolbar- 一GtkToolbar
另請參見
GtkToolbar


------------ KeyGTK3gtk_toolbar_unset_style ----

gtk_toolbar_unset_style
取消設置帶有 gtk_toolbar_set_style（） 的工具列樣式集，以便使用使用者首選項來確定工具列樣式。
語法
參數
toolbar- a [br \=“”GtkToolbar
另請參見
GtkToolbar


------------ KeyGTK3gtk_tooltip_set_custom ----

gtk_tooltip_set_custom
替換包含在工具提示withcustom_widget中的小部件。custom_widget不會在工具提示消失時被銷毀。預設情況下，工具提示中嵌入了一個帶有 和 的框，可以使用 gtk_tooltip_set_markup（） 和 gtk_tooltip_set_icon（） 進行配置。GtkImageGtkLabel
語法
參數
tooltip- 一GtkTooltip
custom_widget- a 或 NULL 以取消設置舊的自訂小部件。[允許-無]
自 2.12 起GtkWidget
另請參見
GtkTooltip


------------ KeyGTK3gtk_tooltip_set_icon ----

gtk_tooltip_set_icon
將工具提示的圖示（位於文本前面）設置為 bepixbuf。如果 pixbuf 為 NULL，則該圖像將被隱藏。
語法
參數
tooltip- 一GtkTooltip
pixbuf- a 或 NULL。[允許-無]
自 2.12 起GdkPixbuf
另請參見
GtkTooltip


------------ KeyGTK3gtk_tooltip_set_icon_from_gicon ----

gtk_tooltip_set_icon_from_gicon
將工具提示的圖示（位於文本前面）設置為 gicon 指示的圖示，其大小由大小指示。如果 gicon 為 NULL，則圖像將被隱藏。
語法
參數
tooltip- 一GtkTooltip
gicon- 表示圖示，或 NULL。[允許-無]GIcon
size- 股票圖示大小。[鍵入整型]
自 2.20 起
另請參見
GtkTooltip


------------ KeyGTK3gtk_tooltip_set_icon_from_icon_name ----

gtk_tooltip_set_icon_from_icon_name
將工具提示的圖示（位於文本前面）設置為由 icon_name 指示的圖示，其大小由大小指示。如果icon_name為 NULL，則該圖像將被隱藏。
語法
參數
tooltip- 一GtkTooltip
icon_name- 圖示名稱，或 NULL。[允許-無]
size- 股票圖示大小。[鍵入整型]
自 2.14 起
另請參見
GtkTooltip


------------ KeyGTK3gtk_tooltip_set_icon_from_stock ----

gtk_tooltip_set_icon_from_stock
gtk_tooltip_set_icon_from_stock自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_tooltip_set_icon_from_icon_name（）。將工具提示的圖示（位於文本前面）設置為由 stock_id 指示的庫存項，其大小由大小指示。如果stock_id為 NULL，則該圖像將被隱藏。
語法
參數
tooltip- 一GtkTooltip
stock_id- 股票 ID 或 NULL。[允許-無]
size- 股票圖示大小。[鍵入整型]
自 2.12 起
另請參見
GtkTooltip


------------ KeyGTK3gtk_tooltip_set_markup ----

gtk_tooltip_set_markup
將工具提示的文本設置為標記，該標記使用 Pango 文本標記語言進行標記。如果標記為 NULL，則標籤將被隱藏。
語法
參數
tooltip- 一GtkTooltip
markup- 標記字串（請參閱 Pango 標記格式）或 NULL。[允許-無]
自 2.12 起
另請參見
GtkTooltip


------------ KeyGTK3gtk_tooltip_set_text ----

gtk_tooltip_set_text
將工具提示的文本設置為文本。如果文本為 NULL，則標籤將被隱藏。另請參見gtk_tooltip_set_markup（）。
語法
參數
tooltip- 一GtkTooltip
text- 文本字串或空值。[允許-無]
自 2.12 起
另請參見
GtkTooltip


------------ KeyGTK3gtk_tooltip_set_tip_area ----

gtk_tooltip_set_tip_area
將應用此工具提示內容的小元件區域設置為 rect（在小組件座標中）。這對於在行和儲存格等上設置工具提示特別有用。要將工具提示設置為 ，請參閱以下操作的便利函數：gtk_tree_view_set_tooltip_row（） andgtk_tree_view_set_tooltip_cell（）。GtkTreeViewGtkIconViewsGtkTreeView
語法
參數
tooltip- 一GtkTooltip
rect- a
自2.1起GdkRectangle
另請參見
GtkTooltip


------------ KeyGTK3gtk_tooltip_trigger_tooltip_query ----

gtk_tooltip_trigger_tooltip_query
在顯示時觸發新的工具提示查詢，以便更新當前可見的工具提示，或顯示/隱藏當前工具提示。此函數可用於調用，例如，當按鍵更改了小部件的狀態時。
語法
參數
display- a
自2.12起GdkDisplay
另請參見
GtkTooltip


------------ KeyGTK3gtk_tool_button_get_icon_name ----

gtk_tool_button_get_icon_name
返回工具按鈕的主題圖示的名稱，請參見gtk_tool_button_set_icon_name（）。
語法
參數
button- 一GtkToolButton
返回
圖示名稱或 NULL（如果工具按鈕自 2.8 以來沒有主題圖示
）
另請參見
GtkToolButton


------------ KeyGTK3gtk_tool_button_get_icon_widget ----

gtk_tool_button_get_icon_widget
返回用作圖示視窗小部件的視窗小部件按鈕。請參見gtk_tool_button_set_icon_widget（）。
語法
參數
button- 一GtkToolButton
返回
用作圖示按鈕或 NULL 的小部件。[無轉移]
2.4 起
另請參見
GtkToolButton


------------ KeyGTK3gtk_tool_button_get_label ----

gtk_tool_button_get_label
返回工具按鈕使用的標籤，如果工具按鈕沒有標籤，則返回 NULL。或使用庫存物料中的標籤。返回的字串歸 GTK+ 所有，不得修改或釋放。
語法
參數
button- 一GtkToolButton
返回
標籤，或 NULL
自 2.4 起
另請參見
GtkToolButton


------------ KeyGTK3gtk_tool_button_get_label_widget ----

gtk_tool_button_get_label_widget
返回用作標籤的微件按鈕。請參見gtk_tool_button_set_label_widget（）。
語法
參數
button- 一GtkToolButton
返回
用作 labelon 按鈕或 NULL 的小部件。[無轉移]
自 2.
另請參見
GtkToolButton


------------ KeyGTK3gtk_tool_button_get_stock_id ----

gtk_tool_button_get_stock_id
gtk_tool_button_get_stock_id自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用 gtk_tool_button_get_icon_name（）。返回庫存物料的名稱。請參見gtk_tool_button_set_stock_id（）。返回的字串歸 GTK+ 所有，不得釋放或修改。
語法
參數
button- 一GtkToolButton
返回
按鈕的庫存項的名稱。
2.4 起
另請參見
GtkToolButton


------------ KeyGTK3gtk_tool_button_get_use_underline ----

gtk_tool_button_get_use_underline
返回 label 屬性中的底線是否用作溢出功能表上的助記符功能表項目。請參見 gtk_tool_button_set_use_underline（）。
語法
參數
button- 一GtkToolButton
返回
如果 label 屬性中的底線在溢出功能表上的功能表上項上用作輔助項，則為 TRUE。
2.4 起
另請參見
GtkToolButton


------------ KeyGTK3gtk_tool_button_new ----

gtk_tool_button_new
使用icon_widget作為內容並標記標籤來創建新的 GtkToolButton。
語法
參數
label- 將用作標籤的字串，或 NULL。[允許-無]
icon_widget- 將用作按鈕內容的小部件，或 NULL。[允許-無]
返回
自 2.4 以來的新
品GtkToolButton
另請參見
GtkToolButton


------------ KeyGTK3gtk_tool_button_new_from_stock ----

gtk_tool_button_new_from_stock
gtk_tool_button_new_from_stock自版本 3.10 起已棄用，不應在新編寫的代碼中使用。請改用 gtk_tool_button_new（）。創建一個包含 astock 項中的圖像和文本的新項。某些股票 ID 具有前置處理器宏，如 和 。如果stock_id不是庫存物料的名稱，則為錯誤。GtkToolButtonGTK_STOCK_OKGTK_STOCK_APPLY
語法
參數
stock_id- 庫存項目的名稱
返回
自 2.4 以來的新
品GtkToolButton
另請參見
GtkToolButton


------------ KeyGTK3gtk_tool_button_set_icon_name ----

gtk_tool_button_set_icon_name
從命名主題圖示設置工具按鈕的圖示。有關更多詳細資訊，請參閱文檔。“icon_name？屬性僅在未被非 NULL ？label?, ?icon_widget 覆蓋時才有影響？和“stock_id”屬性。GtkIconTheme
語法
參數
button- 一GtkToolButton
icon_name- 主題圖示的名稱。[允許-無]
自 2.8 起
另請參見
GtkToolButton


------------ KeyGTK3gtk_tool_button_set_icon_widget ----

gtk_tool_button_set_icon_widget
將圖示設置為用作按鈕上的圖示的小部件。如果icon_widget是“無”，則圖示由 “stock_id？財產。如果？stock_id？屬性也是 NULL，按鈕將沒有圖示。
語法
參數
button- 一GtkToolButton
icon_widget- 用作圖示的小部件，或 NULL。[允許-無]
2.4 起
另請參見
GtkToolButton


------------ KeyGTK3gtk_tool_button_set_label ----

gtk_tool_button_set_label
將標籤設置為用於工具按鈕的標籤。標籤？屬性僅在未被非 NULL 覆蓋時具有效果 ？label_widget？財產。如果兩個 ？label_widget？和 ？標籤？屬性為 NULL，標籤由 ？stock_id？財產。如果 ？stock_id？屬性也是NULL，按鈕將沒有標籤。
語法
參數
button- 一GtkToolButton
label- 將用作標籤的字串，或 NULL。[允許-無]
2.4 起
另請參見
GtkToolButton


------------ KeyGTK3gtk_tool_button_set_label_widget ----

gtk_tool_button_set_label_widget
將label_widget設置為將用作 labelfor 按鈕的微件。如果 label_widget 為 NULL，則為 ？label？屬性用作標籤。如果 ？標籤？也是 NULL，庫存項中的標籤由 ？stock_id？屬性用作標籤。如果？stock_id？也是 NULL，按鈕沒有標籤。
語法
參數
button- 一GtkToolButton
label_widget- 用作標籤的小部件，或 NULL。[允許-無]
2.4 起
另請參見
GtkToolButton


------------ KeyGTK3gtk_tool_button_set_stock_id ----

gtk_tool_button_set_stock_id
gtk_tool_button_set_stock_id自 3.10 版起已棄用，不應在新編寫的代碼中使用。請改用 gtk_tool_button_set_icon_name（）。設置庫存物料的名稱。請參見 gtk_tool_button_new_from_stock（）。stock_id屬性僅在未被非 NULL ？label 覆蓋時才有影響？和？icon_widget？性能。
語法
參數
button- 一GtkToolButton
stock_id- 庫存物料的名稱，或 NULL。[允許-無]
2.4 起
另請參見
GtkToolButton


------------ KeyGTK3gtk_tool_button_set_use_underline ----

gtk_tool_button_set_use_underline
如果設置，則 label 屬性中的底線指示下一個字元應用於溢出功能表中的助記符快速鍵。例如，如果標籤屬性是“_Open？use_underline是TRUE，工具按鈕上的標籤將是？打開？並且溢出功能表上的專案將帶有底線 ？O?.工具按鈕上顯示的標籤上從不帶有助記符;此屬性僅影響溢出功能表上的功能表項目。
語法
參數
button- 一GtkToolButton
use_underline- 按鈕標籤是否具有“_Open”的形式？
2.4 起
另請參見
GtkToolButton


------------ KeyGTK3gtk_tool_item_get_ellipsize_mode ----

gtk_tool_item_get_ellipsize_mode
返回用於tool_item的橢圓大小模式。的自訂子類應調用此函數以找出文本應如何省略。GtkToolItem
語法
參數
tool_item- 一GtkToolItem
返回
a 指示如何對tool_itemshould中的文本進行橢圓化。
自 2.20 起PangoEllipsizeMode
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_expand ----

gtk_tool_item_get_expand
返回是否為tool_item分配了額外空間。請參見gtk_tool_item_set_expand（）。
語法
參數
tool_item- 一GtkToolItem
返回
如果tool_itemis分配了額外空間，則為 TRUE。
2.4 起
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_homogeneous ----

gtk_tool_item_get_homogeneous
返回tool_item是否與其他同類項的大小相同。請參見gtk_tool_item_set_homogeneous（）。
語法
參數
tool_item- 一GtkToolItem
返回
如果項目與其他同類項目的大小相同，則為 TRUE。
2.4 起
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_icon_size ----

gtk_tool_item_get_icon_size
返回用於tool_item的圖示大小。的自訂子類應該調用此函數，以找出它們應該使用什麼大小的圖示。GtkToolItem
語法
參數
tool_item- 一GtkToolItem
返回
a 表示用於tool_item的圖示大小。[鍵入整型]
2.4 起GtkIconSize
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_is_important ----

gtk_tool_item_get_is_important
返回tool_item是否被視為重要。Seegtk_tool_item_set_is_important（）
語法
參數
tool_item- 一GtkToolItem
返回
如果tool_itemis認為重要，則為 true。
2.4 起
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_orientation ----

gtk_tool_item_get_orientation
返回用於tool_item的方向。的自訂子類應該調用此函數，以找出它們應該使用什麼大小的圖示。GtkToolItem
語法
參數
tool_item- 一GtkToolItem
返回
a 表示
自 2.4 以來用於tool_item的方向GtkOrientation
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_proxy_menu_item ----

gtk_tool_item_get_proxy_menu_item
如果menu_item_id匹配，則傳遞的字串 togtk_tool_item_set_proxy_menu_item（） 返回相應的 .的自訂子類應在更改時使用此函數來更新其功能表項目。該themenu_item_ids必須匹配可確保 a 不會無意中更改他們未創建的功能表項目。GtkMenuItemGtkToolItemGtkToolItemGtkToolItem
語法
參數
tool_item- 一GtkToolItem
menu_item_id- 用於標識功能表項目的字串
返回
傳遞的 togtk_tool_item_set_proxy_menu_item（），如果menu_item_idsmatch。[無轉移]
2.4 起GtkMenuItem
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_relief_style ----

gtk_tool_item_get_relief_style
返回tool_item的浮雕樣式。請參見 gtk_button_set_relief（）。的自訂子類應該在信號的處理常式中調用此函數，以找出按鈕的樣式。GtkToolItem?toolbar_reconfigured?
語法
參數
tool_item- 一GtkToolItem
返回
a 表示用於tool_item的浮雕樣式。
2.4 起GtkReliefStyle
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_text_alignment ----

gtk_tool_item_get_text_alignment
返回用於tool_item的文本對齊方式。的自訂子類應調用此函數以找出文本應如何對齊。GtkToolItem
語法
參數
tool_item- 一 ：GtkToolItem
返回
a 表示
自 2.20 以來用於tool_item的水準文本對齊方式gfloat
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_text_orientation ----

gtk_tool_item_get_text_orientation
返回用於tool_item的文本方向。的自訂子類應調用此函數以找出文本應如何定向。GtkToolItem
語法
參數
tool_item- 一GtkToolItem
返回
a 表示
自 2.20 以來用於tool_item的文本方向GtkOrientation
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_text_size_group ----

gtk_tool_item_get_text_size_group
返回用於tool_item中的標籤的大小組。的自訂子類應調用此函數，並將大小組用於標籤。GtkToolItem
語法
參數
tool_item- 一GtkToolItem
返回
一個。[無轉移]
自 2.2 起GtkSizeGroup
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_toolbar_style ----

gtk_tool_item_get_toolbar_style
返回用於tool_item工具列樣式。的自訂子類應該在gtkToolItem：：toolbar_reconfigured的處理常式中調用此函數，以找出以何種樣式顯示工具列並相應地更改自身 可能性是：GTK_TOOLBAR_BOTH，這意味著工具項應該顯示圖示和標籤，堆疊verticallyGTK_TOOLBAR_ICONS，這意味著工具列僅顯示iconsGTK_TOOLBAR_TEXT， 這意味著工具項應僅顯示textGTK_TOOLBAR_BOTH_HORIZ，這意味著工具項應顯示圖示和標籤，水準排列GtkToolItem
語法
參數
tool_item- 一GtkToolItem
返回
指示用於tool_item的工具列樣式。
2.4 起GtkToolbarStyle
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_use_drag_window ----

gtk_tool_item_get_use_drag_window
返回tool_item是否具有拖動窗口。Seegtk_tool_item_set_use_drag_window（）.
語法
參數
tool_item- 一GtkToolItem
返回
如果tool_itemuses拖動視窗，則為 TRUE。
2.4 起
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_visible_horizontal ----

gtk_tool_item_get_visible_horizontal
返回tool_item在水準停靠的工具列上是否可見。
語法
參數
tool_item- 一GtkToolItem
返回
如果tool_itemis水準停靠的工具列上可見，則為 TRUE。
2.4 起
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_visible_vertical ----

gtk_tool_item_get_visible_vertical
返回工具列垂直停靠時tool_item是否可見。請參見 gtk_tool_item_set_visible_vertical（）。
語法
參數
tool_item- 一GtkToolItem
返回
工具列垂直停靠時tool_itemis可見自 2.4 起
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_group_get_collapsed ----

gtk_tool_item_group_get_collapsed
獲取組是折疊還是展開。
語法
參數
group- 一個 GtkToolItemGroup
返回
如果 groupis 已折疊，則為 TRUE;如果自 2.20 起展開，
則為 FALSE
另請參見
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_get_drop_item ----

gtk_tool_item_group_get_drop_item
獲取位置 （x， y） 處的工具項。
語法
參數
group- 一GtkToolItemGroup
x- x 位置
y- y 位置
返回
位置 （x， y）。[無轉移]
自 2.20 起GtkToolItem
另請參見
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_get_ellipsize ----

gtk_tool_item_group_get_ellipsize
獲取組的橢圓化模式。
語法
參數
group- 一GtkToolItemGroup
返回
自 2.20 以來的組
PangoEllipsizeMode
另請參見
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_get_header_relief ----

gtk_tool_item_group_get_header_relief
獲取組的標題按鈕的救濟模式。
語法
參數
group- 一GtkToolItemGroup
返回
自 2.20 以來GtkReliefStyle
另請參見
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_get_item_position ----

gtk_tool_item_group_get_item_position
獲取組中項作為索引的位置。
語法
參數
group- 一GtkToolItemGroup
item- 一GtkToolItem
返回
itemin groupor -1 的索引，如果 item 是自 2.20 以來組的子項
另請參見
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_get_label ----

gtk_tool_item_group_get_label
獲取組的標籤。
語法
參數
group- 一GtkToolItemGroup
返回
組的標籤。標籤是組的內部字串，不得修改。請注意，如果自 2.20 起已使用 gtk_tool_item_group_set_label_widget（）設置
了自訂標記，則返回 NULL
另請參見
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_get_label_widget ----

gtk_tool_item_group_get_label_widget
獲取組的標籤小部件。請參見gtk_tool_item_group_set_label_widget（）。
語法
參數
group- 一GtkToolItemGroup
返回
組的標籤微件。[無轉移]
自 2.20 起
另請參見
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_get_nth_item ----

gtk_tool_item_group_get_nth_item
獲取組中索引處的工具項。
語法
參數
group- 一GtkToolItemGroup
index- 索引
返回
的 at 索引。[無轉移]
自 2.20 起GtkToolItem
另請參見
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_get_n_items ----

gtk_tool_item_group_get_n_items
獲取組中工具項的數目。
語法
參數
group- 一GtkToolItemGroup
返回
組中
自 2.20 以來的工具項目數
另請參見
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_insert ----

gtk_tool_item_group_insert
在組的子級列表中的位置插入項。
語法
參數
group- 一GtkToolItemGroup
item- 插入到組中GtkToolItem
position- itemin 組的位置，從 0 開始。位置 -1 表示列表的結束。
自 2.20 起
另請參見
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_new ----

gtk_tool_item_group_new
創建帶有標籤標籤的新工具項組。
語法
參數
label- 新組的標籤
返回
一個新的.
自 2.20 起GtkToolItemGroup
另請參見
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_set_collapsed ----

gtk_tool_item_group_set_collapsed
設置是應折疊還是展開組。
語法
參數
group- 一GtkToolItemGroup
collapsed-
自2.20以來，這些組是否應該崩潰或擴大
另請參見
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_set_ellipsize ----

gtk_tool_item_group_set_ellipsize
設置組中標籤應使用的橢圓化模式。
語法
參數
group- 一GtkToolItemGroup
ellipsize- 組中的標籤應
自
2.20 起使用PangoEllipsizeMode
另請參見
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_set_header_relief ----

gtk_tool_item_group_set_header_relief
設置組標題的按鈕寬限。有關詳細資訊，請參見 gtk_button_set_relief（）。
語法
參數
group- 一GtkToolItemGroup
style
-
自2.2GtkReliefStyle
另請參見
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_set_item_position ----

gtk_tool_item_group_set_item_position
設置項在組的子項列表中的位置。
語法
參數
group- 一GtkToolItemGroup
item- 移動到一個新的位置，應該是一個組的孩子。GtkToolItem
position- itemin 組的新位置，從 0 開始。位置 -1 表示列表的結束。
自 2.20 起
另請參見
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_set_label ----

gtk_tool_item_group_set_label
設置工具項組的標籤。標籤將顯示在組的頁眉中。
語法
參數
group- 一GtkToolItemGroup
label- 自2.20以來該組
的新人類可讀標籤
另請參見
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_set_label_widget ----

gtk_tool_item_group_set_label_widget
設置工具項組的標籤。標籤微件顯示在組的標題中，以代替通常的標籤。
語法
參數
group- 一GtkToolItemGroup
label_widget- 自2.20以來要顯示的小部件以代替通常的標籤
另請參見
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_new ----

gtk_tool_item_new
創建新的GtkToolItem
返回
新的
自 2.4 以來GtkToolItem
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_rebuild_menu ----

gtk_tool_item_rebuild_menu
調用此函數向工具列發出信號，表明tool_item的溢出功能表項目已更改。如果溢出功能表在調用此函數時可見，則將重建菜單。當工具項更改其回應信號時將執行的操作時，必須調用該函數。?create-menu-proxy?
語法
參數
tool_item- a
自2.6起GtkToolItem
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_retrieve_proxy_menu_item ----

gtk_tool_item_retrieve_proxy_menu_item
返回上次設置bygtk_tool_item_set_proxy_menu_item（），即。將出現在溢出菜單中。GtkMenuItemGtkMenuItem
語法
參數
tool_item- 一GtkToolItem
返回
這將出現在tool_item的溢出菜單中。[無轉移]
2.4 起GtkMenuItem
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_expand ----

gtk_tool_item_set_expand
設置當工具列上有更多的空間時，是否為tool_item分配額外的空間。效果是，當工具列變大時，項目變大;當工具列變小時，項變小。
語法
參數
tool_item- 一GtkToolItem
expand- 自2.4以來是否tool_itemis分配了額外的空間
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_homogeneous ----

gtk_tool_item_set_homogeneous
設置是否要為tool_item分配與其他齊次項相同的大小。效果是所有同構項的寬度將與最寬的項具有相同的寬度。
語法
參數
tool_item- 一GtkToolItem
homogeneous- tool_itemis是否與其他同質專案
的大小相同，因為2.4
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_is_important ----

gtk_tool_item_set_is_important
設置是否應將tool_item視為重要。該類使用此屬性來確定在工具列樣式GTK_TOOLBAR_BOTH_HORIZ時是顯示還是隱藏其標籤。結果是只有工具按鈕與 ？is_important？屬性集有標籤，效果稱為“優先順序文本”GtkToolButton
語法
參數
tool_item- 一GtkToolItem
is_important- 自2.4以來，工具項是否應被視為重要
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_proxy_menu_item ----

gtk_tool_item_set_proxy_menu_item
設置在工具列溢出功能表中使用的 。Themenu_item_id用於標識此函數的調用方，並且還應與gtk_tool_item_get_proxy_menu_item（）一起使用。GtkMenuItem
語法
參數
tool_item- 一GtkToolItem
menu_item_id- 用於標識menu_item字串
menu_item- a 自 2.4 起在溢出菜單中
使用GtkMenuItem
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_tooltip_markup ----

gtk_tool_item_set_tooltip_markup
設置要在專案上顯示為工具提示的標記文本。請參見gtk_widget_set_tooltip_markup（）。
語法
參數
tool_item- 一GtkToolItem
markup-
標記文本將用作tool_item
的工具提示，自 2.12 起
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_tooltip_text ----

gtk_tool_item_set_tooltip_text
設置要在專案上顯示為工具提示的文本。請參見gtk_widget_set_tooltip_text（）。
語法
參數
tool_item- 一GtkToolItem
text-
自 2.12 起用作tool_item
工具提示的文本
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_use_drag_window ----

gtk_tool_item_set_use_drag_window
設置tool_item是否具有拖動視窗。當 TRUE 時，工具項可以用作通過 gtk_drag_source_set（） 的拖動源。當tool_item有一個拖動視窗時，它將攔截所有事件，甚至是那些本來會發送給tool_item子級的事件。
語法
參數
tool_item- 一GtkToolItem
use_drag_window- 是否tool_itemhas拖動窗口。
2.4 起
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_visible_horizontal ----

gtk_tool_item_set_visible_horizontal
設置當工具列水準停靠時，tool_item是否可見。
語法
參數
tool_item- 一GtkToolItem
visible_horizontal- 自2.4起，在水準模式下
是否可見tool_itemis可見
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_visible_vertical ----

gtk_tool_item_set_visible_vertical
設置當工具列垂直停靠時，tool_item是否可見。某些工具項（如文本條目）太寬，無法在垂直停靠的工具列上使用。如果visible_vertical FALSEtool_item將不會顯示在垂直停靠的工具列上。
語法
參數
tool_item- 一GtkToolItem
visible_vertical- 自2.4起，當工具列處於垂直模式
時，tool_itemis可見
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_item_toolbar_reconfigured ----

gtk_tool_item_toolbar_reconfigured
在tool_item上發出信號。和其他實現使用此函數在子級配置的某些方面發生更改時通知子級。?toolbar_reconfigured?GtkToolbarGtkToolShell
語法
參數
tool_item- a
自2.14起GtkToolItem
另請參見
GtkToolItem


------------ KeyGTK3gtk_tool_palette_add_drag_dest ----

gtk_tool_palette_add_drag_dest
將調色板設置為拖動源（請參見gtk_tool_palette_set_drag_source（）），並將微件設置為從調色板拖動的拖動目標。請參見 gtk_drag_dest_set（）。
語法
參數
palette- 一GtkToolPalette
widget- 一個應該是調色板的拖動目的地GtkWidget
flags- 指定GTK+應該對該小部件的dropson採取哪些操作的標誌
targets- 小部件應該支持GtkToolPaletteDragTargets
actions- 自2.20以來小部件應該支持
的內容GdkDragActions
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_drag_item ----

gtk_tool_palette_get_drag_item
從所選內容中獲取拖動的項目。這可以是 或 .GtkToolItemGtkToolItemGroup
語法
參數
palette- 一GtkToolPalette
selection- 一GtkSelectionData
返回
所選內容中拖動的專案。[無轉移]
自 2.20 起
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_drag_target_group ----

gtk_tool_palette_get_drag_target_group
獲取拖動 的 的目標條目。GtkToolItemGroup
返回
的，表示拖動的組。[無轉移]
自 2.20 起GtkTargetEntry
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_drag_target_item ----

gtk_tool_palette_get_drag_target_item
獲取拖動 的目標條目。GtkToolItem
返回
的，用於拖動的項目。[無轉移]
自 2.20 起GtkTargetEntry
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_drop_group ----

gtk_tool_palette_get_drop_group
獲取位於位置 （x， y） 的組。
語法
參數
palette- 一GtkToolPalette
x- x 位置
y- y 位置
返回
at position或NULLif沒有這樣的組。[無轉移]
自 2.20 起GtkToolItemGroup
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_drop_item ----

gtk_tool_palette_get_drop_item
獲取位置 （x， y） 處的項。請參見 gtk_tool_palette_get_drop_group（）。
語法
參數
palette- 一GtkToolPalette
x- x 位置
y- y 位置
返回
at 位置或 NULL（如果沒有此類項目）。[無轉移]
自 2.20 起GtkToolItem
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_exclusive ----

gtk_tool_palette_get_exclusive
獲取組是否為獨佔組。請參見gtk_tool_palette_set_exclusive（）。
語法
參數
palette- 一GtkToolPalette
group- a 這是調色板的子級GtkToolItemGroup
返回
TRUE 如果 group 是排他性的
，則為 2.20
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_expand ----

gtk_tool_palette_get_expand
獲取是否應為組提供額外的空間。請參見gtk_tool_palette_set_expand（）。
語法
參數
palette- 一GtkToolPalette
group- a 這是調色板的子級GtkToolItemGroup
返回
如果組應給予額外空間，則為 TRUE，否則
為 FALSE 自 2.20 起
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_group_position ----

gtk_tool_palette_get_group_position
獲取組在選項板中作為索引的位置。請參見 gtk_tool_palette_set_group_position（）。
語法
參數
palette- 一GtkToolPalette
group- 一GtkToolItemGroup
返回
組的索引或 -1（如果 group 不是調色板的子項
，則為 2.20
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_hadjustment ----

gtk_tool_palette_get_hadjustment
gtk_tool_palette_get_hadjustment自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_scrollable_get_hadjustment（）獲取工具選項板的水準調整。
語法
參數
palette- 一GtkToolPalette
返回
調色板的水準調整。[無轉移]
自 2.20 起
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_icon_size ----

gtk_tool_palette_get_icon_size
獲取工具選項板中圖示的大小。請參見 gtk_tool_palette_set_icon_size（）。
語法
參數
palette- 一GtkToolPalette
返回
工具選項板中圖示的 。[鍵入整型]
自 2.20 起GtkIconSize
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_style ----

gtk_tool_palette_get_style
獲取工具選項板中項的樣式（圖示、文本或兩者）。
語法
參數
palette- 一GtkToolPalette
返回
工具選項板中項的項。
自 2.20 起GtkToolbarStyle
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_vadjustment ----

gtk_tool_palette_get_vadjustment
gtk_tool_palette_get_vadjustment自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_scrollable_get_vadjustment（）獲取工具選項板的垂直調整。
語法
參數
palette- 一GtkToolPalette
返回
調色板的垂直調整。[無轉移]
自 2.2 起
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_new ----

gtk_tool_palette_new
創建新的工具選項板。
返回
自 2.20 以來的新
品GtkToolPalette
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_set_drag_source ----

gtk_tool_palette_set_drag_source
將工具選項板設置為拖動源。啟用工具選項板中的所有組和項目，因為拖動 sourceson 按鈕 1 和按鈕 3 時按下複製和移動操作。請參見gtk_drag_source_set（）。
語法
參數
palette- 一GtkToolPalette
targets- 自2.20以來小部件應該支持
的內容GtkToolPaletteDragTargets
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_set_exclusive ----

gtk_tool_palette_set_exclusive
設置組是否應為獨佔組。如果展開獨佔組，則所有其他組都將折疊。
語法
參數
palette- 一GtkToolPalette
group- a 這是調色板的子級GtkToolItemGroup
exclusive- 該組是否應該自2.20
起是排他性的
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_set_expand ----

gtk_tool_palette_set_expand
設置是否應為組提供額外的空間。
語法
參數
palette- 一GtkToolPalette
group- a 這是調色板的子級GtkToolItemGroup
expand- 自2.20以來是否應該為組提供額外的空間
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_set_group_position ----

gtk_tool_palette_set_group_position
將組的位置設置為工具選項板的索引。如果位置為 0，則組將成為第一個子級，如果位置為 -1，則它將成為最後一個子級。
語法
參數
palette- 一GtkToolPalette
group- a 這是調色板的子級GtkToolItemGroup
position- 自2.20以來的組
的新索引
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_set_icon_size ----

gtk_tool_palette_set_icon_size
設置工具選項板中圖示的大小。
語法
參數
palette- 一GtkToolPalette
icon_size- 工具帕萊特中的圖示應具有。[鍵入整型]
自 2.20 起GtkIconSize
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_set_style ----

gtk_tool_palette_set_style
設置工具選項板中項的樣式（文本和/或圖示）。
語法
參數
palette- 一GtkToolPalette
style- 工具選項板中的專案應具有
自 2.20 以來GtkToolbarStyle
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_unset_icon_size ----

gtk_tool_palette_unset_icon_size
取消設置使用 gtk_tool_palette_set_icon_size（） 設置的工具選項板圖示大小，以便使用者首選項將用於確定圖示大小。
語法
參數
palette- a
自2.20起GtkToolPalette
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_unset_style ----

gtk_tool_palette_unset_style
取消設置帶有 gtk_tool_palette_set_style（） 的工具列樣式集，以便使用者首選項將用於確定工具列樣式。
語法
參數
palette- a
自2.20起GtkToolPalette
另請參見
GtkToolPalette


------------ KeyGTK3gtk_tool_shell_get_ellipsize_mode ----

gtk_tool_shell_get_ellipsize_mode
檢索工具殼的當前橢圓模式。工具項不能直接調用此函數，而應依賴gtk_tool_item_get_ellipsize_mode（）。
語法
參數
shell- 一GtkToolShell
返回
shell
的當前橢圓化模式自 2.20 起
另請參見
GtkToolShell


------------ KeyGTK3gtk_tool_shell_get_icon_size ----

gtk_tool_shell_get_icon_size
檢索工具外殼的圖示大小。工具項不能直接調用此函數，而應依賴gtk_tool_item_get_icon_size（）。
語法
參數
shell- 一GtkToolShell
返回
外殼圖示的當前大小。[鍵入整型]
自 2.14 起
另請參見
GtkToolShell


------------ KeyGTK3gtk_tool_shell_get_orientation ----

gtk_tool_shell_get_orientation
檢索工具殼的當前方向。工具項不得直接調用此函數，而應依賴gtk_tool_item_get_orientation（）。
語法
參數
shell- 一GtkToolShell
返回
shell
的當前方向自 2.14 起
另請參見
GtkToolShell


------------ KeyGTK3gtk_tool_shell_get_relief_style ----

gtk_tool_shell_get_relief_style
返回 shell 上按鈕的浮雕樣式。工具項不得直接調用此函數，而應依賴gtk_tool_item_get_relief_style（）。
語法
參數
shell- 一GtkToolShell
返回
外殼上紐扣的浮雕風格。
自 2.14 起
另請參見
GtkToolShell


------------ KeyGTK3gtk_tool_shell_get_style ----

gtk_tool_shell_get_style
檢索工具殼是否具有文本和/或圖示。工具項不能直接調用此函數，而應依賴gtk_tool_item_get_toolbar_style（）。
語法
參數
shell- 一GtkToolShell
返回
自 2.14 以來的 shell
的當前樣式
另請參見
GtkToolShell


------------ KeyGTK3gtk_tool_shell_get_text_alignment ----

gtk_tool_shell_get_text_alignment
檢索工具外殼的當前文本對齊方式。工具項不能直接調用此函數，而應依賴gtk_tool_item_get_text_alignment（）。
語法
參數
shell- 一GtkToolShell
返回
自 2.20 以來 shell
的當前文本對齊方式
另請參見
GtkToolShell


------------ KeyGTK3gtk_tool_shell_get_text_orientation ----

gtk_tool_shell_get_text_orientation
檢索工具外殼的當前文本方向。工具項不得直接調用此函數，而應依賴gtk_tool_item_get_text_orientation（）。
語法
參數
shell- 一GtkToolShell
返回
shell
的當前文本方向自 2.20 起
另請參見
GtkToolShell


------------ KeyGTK3gtk_tool_shell_get_text_size_group ----

gtk_tool_shell_get_text_size_group
檢索工具外殼的當前文本大小組。工具項不得直接調用此函數，而是依賴於gtk_tool_item_get_text_size_group（）。而應調用。
語法
參數
shell- 一GtkToolShell
返回
shell 的當前文本大小組。[無轉移]
自 2.2 起
另請參見
GtkToolShell


------------ KeyGTK3gtk_tool_shell_rebuild_menu ----

gtk_tool_shell_rebuild_menu
調用此函數會向工具 shell 發出信號，表明工具項的溢出功能表項目已更改。如果存在溢出功能表，並且當它調用此函數時可以看到該功能表，則將重新生成該功能表。工具項不得直接調用此函數，而應依賴ongtk_tool_item_rebuild_menu（）。
語法
參數
shell- a
自2.14起GtkToolShell
另請參見
GtkToolShell


------------ KeyGTK3gtk_tree_drag_dest_drag_data_received ----

gtk_tree_drag_dest_drag_data_received
要求 在路徑 dest 之前插入一行，從 selection_data派生行的內容。如果 dest 位於樹的外部，因此無法在插入之前插入，則將返回 FALSE。此外，如果由於某些特定於模型的原因而未創建新行，則可能會返回 FALSE。是否應該可靠地處理模型中不再存在的dest！GtkTreeDragDest
語法
參數
drag_dest- 一GtkTreeDragDest
dest- 行落在前面
selection_data- 要刪除的資料
返回
是否在位置停止之前創建新行
另請參見
gtk3-GtkTreeView-drag-and-drop


------------ KeyGTK3gtk_tree_drag_dest_row_drop_possible ----

gtk_tree_drag_dest_row_drop_possible
確定在給定dest_path之前，在與dest_path相同的深度上是否可以進行跌落。也就是說，我們可以將資料inselection_data放在該位置嗎？dest_path不必存在;但是，如果dest_path的父母不存在，則返回值幾乎肯定會為FALSE。
語法
參數
drag_dest- 一GtkTreeDragDest
dest_path- 目標行
selection_data- 正在拖動的資料
返回
如果dest_path之前可能掉落，則為 true
另請參見
gtk3-GtkTreeView-drag-and-drop


------------ KeyGTK3gtk_tree_drag_source_drag_data_delete ----

gtk_tree_drag_source_drag_data_delete
要求 刪除路徑處的行，因為它已通過拖放移動到其他位置。返回 FALSEif 刪除失敗是因為路徑不再存在，或者由於某些特定於模型的原因。應該可靠地處理模型中不再存在的路徑！GtkTreeDragSource
語法
參數
drag_source- 一GtkTreeDragSource
path- 被拖動的行
返回
如果行已成功刪除，則為 TRUE
另請參見
gtk3-GtkTreeView-drag-and-drop


------------ KeyGTK3gtk_tree_drag_source_drag_data_get ----

gtk_tree_drag_source_drag_data_get
要求 用路徑處行的表示來填充selection_data。selection_data>target給出了所需的資料類型。應該可靠地處理模型中不再存在的路徑！GtkTreeDragSource
語法
參數
drag_source- 一GtkTreeDragSource
path- 被拖動的行
selection_data- a 用拖動行中的資料填充GtkSelectionData
返回
如果提供了所需類型的資料，則為 TRUE
另請參見
gtk3-GtkTreeView-drag-and-drop


------------ KeyGTK3gtk_tree_drag_source_row_draggable ----

gtk_tree_drag_source_row_draggable
詢問特定行是否可以用作 DND 操作的源。如果源未實現此介面，則假定該行可拖動。GtkTreeDragSource
語法
參數
drag_source- 一GtkTreeDragSource
path- 用戶正在啟動拖動的行
返回
如果可以拖動行，則為 TRUE
另請參見
gtk3-GtkTreeView-drag-and-drop


------------ KeyGTK3gtk_tree_get_row_drag_data ----

gtk_tree_get_row_drag_data
從目標typeGTK_TREE_MODEL_ROW的選擇資料中獲取tree_model和路徑。通常從drag_data_received處理常式調用。僅當selection_data源自調用此函數的同一進程時，才能使用此函數，因為正在傳遞指向樹模型的指標。如果您不在同一進程中，那麼您將受到記憶體損壞。在drag_data_received處理常式中，可以假定GTK_TREE_MODEL_ROW類型的選擇資料來自當前進程。必須釋放返回的路徑withgtk_tree_path_free（）。GtkTreeDragDest
語法
參數
selection_data- 一GtkSelectionData
tree_model- 一個.[輸出]GtkTreeModel
path- tree_model行。[輸出]
返回
如果selection_datahad目標類型GTK_TREE_MODEL_ROW，則為 true，否則為 vali
另請參見
gtk3-GtkTreeView-drag-and-drop


------------ KeyGTK3gtk_tree_iter_copy ----

gtk_tree_iter_copy
創建動態分配的樹反覆運算器作為反覆運算器的副本。此函數不適用於應用程式，因為您可以按值複製結構（GtkTreeIter new_iter = iter;）。您必須使用gtk_tree_iter_free（） 釋放此反覆運算器。
語法
參數
iter- 一GtkTreeIter
返回
新分配的反覆運算器副本
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_iter_free ----

gtk_tree_iter_free
釋放已由 gtk_tree_iter_copy（） 分配的反覆運算器。此函數主要用於語言綁定。
語法
參數
iter- 動態分配的樹反覆運算器
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_filter_clear_cache ----

gtk_tree_model_filter_clear_cache
幾乎永遠不應該調用此函數。它清除了尚未withgtk_tree_model_ref_node（） 重新引用的任何緩存反覆運算器的篩選器。如果正在篩選的子模型是靜態的（並且不經常更改），並且存在大量對節點的未更改訪問，則這可能很有用。作為此函數的副作用，所有未引用的反覆運算器都將無效。
語法
參數
filter- 一.
自 2.GtkTreeModelFilter
另請參見
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_convert_child_iter_to_iter ----

gtk_tree_model_filter_convert_child_iter_to_iter
將filter_iter設置為指向篩選器中與child_iter所指向的行相對應的行。如果未設置filter_iter，則返回 FALSE。
語法
參數
filter- 一.GtkTreeModelFilter
filter_iter- 未初始化的 .[輸出]GtkTreeIter
child_iter- 指向子模型上某一行的有效指標。GtkTreeIter
返回
true，如果filter_iterwas集，即如果child_iteris指向子模型中可見行的無效反覆運算器。
2.4 起
另請參見
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_convert_child_path_to_path ----

gtk_tree_model_filter_convert_child_path_to_path
child_path轉換為相對於篩選器的路徑。也就是說，child_pathpoints子模型中的路徑。返回的路徑將指向已篩選模型中的同一行。如果child_path不是子模型上的有效路徑，或者指向在篩選器中不可見的行，則返回 NULLis。
語法
參數
filter- 一.GtkTreeModelFilter
child_path- A 轉換。GtkTreePath
返回
新分配的 ，或 NULL。
2.4 起GtkTreePath
另請參見
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_convert_iter_to_child_iter ----

gtk_tree_model_filter_convert_iter_to_child_iter
將child_iter設置為指向filter_iter所指向的行。
語法
參數
filter- 一.GtkTreeModelFilter
child_iter- 未初始化的 .[輸出]GtkTreeIter
filter_iter- 指向篩選器上的行的有效指向。
2.4 起GtkTreeIter
另請參見
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_convert_path_to_child_path ----

gtk_tree_model_filter_convert_path_to_child_path
將filter_path轉換為篩選器子模型上的路徑。也就是說，filter_path指向篩檢程式中的某個位置。返回的路徑將指向模型中未篩選的同一位置。如果filter_pathdoes未指向子模型中的位置，則返回 NULL。
語法
參數
filter- 一.GtkTreeModelFilter
filter_path- A 轉換。GtkTreePath
返回
新分配的 ，或 NULL。
2.4 起GtkTreePath
另請參見
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_get_model ----

gtk_tree_model_filter_get_model
返回指向篩選器的子模型的指標。
語法
參數
filter- 一.GtkTreeModelFilter
返回
指向 .[無轉移]
2.4 起GtkTreeModel
另請參見
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_new ----

gtk_tree_model_filter_new
創建一個新的 ，其中child_model作為虛擬根child_modeland根。GtkTreeModel
語法
參數
child_model- 一.GtkTreeModel
root- A 或空。[允許-無]GtkTreePath
返回
一個新的.[轉移完整]
2.4 起GtkTreeModel
另請參見
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_refilter ----

gtk_tree_model_filter_refilter
為子模型中的每一行發出 ：：row_changed，這會導致篩選器重新評估某一行是否可見。
語法
參數
filter- 一.
2.4 起GtkTreeModelFilter
另請參見
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_set_modify_func ----

gtk_tree_model_filter_set_modify_func
使用n_columns和類型參數，您可以為此模型提供一個列類型陣列（將向父模型/視圖公開）。函數、資料和銷毀參數用於指定修改函數。修改函數將針對每個資料訪問進行調用，修改函數的目標是返回應使用修改函數的參數顯示在指定位置的資料。
語法
參數
filter- 一.GtkTreeModelFilter
n_columns- 篩選器模型中的列數。
types- 列的。[陣列長度 = n_columns]GTypes
func- 一GtkTreeModelFilterModifyFunc
data- 要傳遞給修改函數的使用者資料，或 NULL。[允許-無]
destroy- 銷毀資料通知程式，或 NULL。[允許-無]
2.4 起
另請參見
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_set_visible_column ----

gtk_tree_model_filter_set_visible_column
將child_model的列設置為篩選器應在其中查找可見性資訊的列。列應該是typeG_TYPE_BOOLEAN列，其中 TRUE 表示行可見，而 FALSEif 則不可見。
語法
參數
filter- 一.GtkTreeModelFilter
column- A 是包含可見資訊的列。
2.4 起gint
另請參見
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_set_visible_func ----

gtk_tree_model_filter_set_visible_func
將濾鏡時使用的可見函數設置為 func。如果給定行應可見，則該函數應返回 TRUE，否則將返回 FALSE。如果函數計算的條件隨時間而變化（例如，因為它依賴於某些全域參數），則必須調用gtk_tree_model_filter_refilter（）來保持模型的可見性資訊是最新的。請注意，每當插入行時，都會調用 func，此時它可能仍然是空的。因此，可見函數應特別注意空行，如下面的示例所示。12345678910111213141516[/syntax] [syntax]static gbooleanvisible_func （GtkTreeModel *model， GtkTreeIter *iter， gpointer data）{ // Visible if row is non-empty and first column is ？HI？ gchar *str; gboolean visible = FALSE; gtk_tree_model_get （model， iter， 0， &str， -1）; if （str && strcmp （str， “HI”） == 0） visible = TRUE; g_free （str）; return visible;}[/語法]
語法
參數
filter- 一.GtkTreeModelFilter
func- A，可見函數。GtkTreeModelFilterVisibleFunc
data- 要傳遞給可見函數的使用者資料，或 NULL。[允許-無]
destroy- 銷毀資料通知程式，或 NULL。[允許-無]
2.4 起
另請參見
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_foreach ----

gtk_tree_model_foreach
以深度優先的方式在模型中的每個節點上調用 func。如果 func 返回 TRUE，則樹不再行走，gtk_tree_model_foreach（） 返回。
語法
參數
model- 一GtkTreeModel
func- 要在每行上調用的函數。[範圍調用]
user_data- 使用者資料傳遞到函數
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get ----

gtk_tree_model_get
獲取反覆運算器引用的行中一個或多個儲存格的值。變數參數清單應包含整數列號，每個列號後跟一個存儲所檢索值的位置。該列表以 -1 結尾。例如，要從類型為 G_TYPE_STRING 的列 0 獲取值，可以編寫：gtk_tree_model_get（model，iter，0， &place_string_here， -1），其中 place_string_here 是要用字串填充的。類型為 G_TYPE_OBJECT 的返回值必須未引用，類型為 G_TYPE_STRING 或 G_TYPE_BOXED 的值必須釋放。其他值按值傳遞。gchararray
語法
參數
tree_model- 一GtkTreeModel
iter- tree_model中的一行
...- 列號和值返回位置對，以 -1 結尾
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_column_type ----

gtk_tree_model_get_column_type
返回列的類型。
語法
參數
tree_model- 一GtkTreeModel
index_- 列索引
返回
列的類型。[無轉移]
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_flags ----

gtk_tree_model_get_flags
返回此介面支援的一組標誌。這些標誌是 的按位元組合。在tree_model的生存期內，支援的標誌不應更改。GtkTreeModelFlags
語法
參數
tree_model- 一GtkTreeModel
返回
此介面支援的標誌
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_iter ----

gtk_tree_model_get_iter
將 iter 設置為指向 path 的有效反覆運算器。如果 path 不存在，則將 iter 設置為無效的反覆運算器並返回 FALSE。
語法
參數
tree_model- 一GtkTreeModel
iter- 未初始化的 .[輸出]GtkTreeIter
path- 的GtkTreePath
返回
TRUE，如果 iterwas set
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_iter_first ----

gtk_tree_model_get_iter_first
使用樹中的第一個反覆運算器（路徑“0”處的反覆運算器）初始化反覆運算器並返回 TRUE。如果樹為空，則返回FALSE。
語法
參數
tree_model- 一GtkTreeModel
iter- 未初始化的 .[輸出]GtkTreeIter
返回
TRUE，如果 iterwas set
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_iter_from_string ----

gtk_tree_model_get_iter_from_string
將 iter 設置為指向path_string的有效反覆運算器（如果存在）。否則，iter 將保持無效，並返回 FALSE。
語法
參數
tree_model- 一GtkTreeModel
iter- 未初始化的 .[輸出]GtkTreeIter
path_string- 一個字串表示GtkTreePath
返回
TRUE，如果 iterwas set
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_n_columns ----

gtk_tree_model_get_n_columns
返回tree_model支持的列數。
語法
參數
tree_model- 一GtkTreeModel
返回
列數
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_path ----

gtk_tree_model_get_path
返回由反覆運算器引用的新創建。應使用 gtk_tree_path_free（） 釋放此路徑。GtkTreePath
語法
參數
tree_model- 一GtkTreeModel
iter- 的GtkTreeIter
返回
新創建的GtkTreePath
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_string_from_iter ----

gtk_tree_model_get_string_from_iter
生成反覆運算器的字串表示形式。此字串是 ？：？分隔的數字清單。例如，？4：10：0：3？將是此字串的可接受返回值。
語法
參數
tree_model- 一GtkTreeModel
iter- 一GtkTreeIter
返回
新分配的字串。必須使用 g_free（） 釋放。
自 2.2 起
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_valist ----

gtk_tree_model_get_valist
請參閱gtk_tree_model_get（），此版本需要va_listfor語言綁定才能使用。
語法
參數
tree_model- 一GtkTreeModel
iter- tree_model中的一行
var_args- 列/返回位置對的va_list
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_value ----

gtk_tree_model_get_value
初始化值並將其設置為 at 列的值。當使用值時，需要調用g_value_unset（）以釋放任何分配的記憶體。
語法
參數
tree_model- 一GtkTreeModel
iter- 的GtkTreeIter
column- 要查找值的列
value- 要設置的空值。[輸出][無轉移]GValue
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_iter_children ----

gtk_tree_model_iter_children
將 iter 設置為指向父級的第一個子級。如果父級沒有子級，則返回 FALSE，並將 iter 設置為無效。調用此函數後，父節點將保持有效節點。如果父節點為 NULL，則返回第一個節點，等效togtk_tree_model_get_iter_first（tree_model，iter）;
語法
參數
tree_model- 一GtkTreeModel
iter- 要設置為子項的新項。[輸出]GtkTreeIter
parent- 或 NULL。[允許-無]GtkTreeIter
返回
TRUE，如果 child 已設置為第一個孩子
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_iter_has_child ----

gtk_tree_model_iter_has_child
如果 iter 有子項，則返回 TRUE，否則返回 FALSE。
語法
參數
tree_model- 一GtkTreeModel
iter- 兒童測試GtkTreeIter
返回
如果 iter 有孩子，則為 TRUE
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_iter_next ----

gtk_tree_model_iter_next
將 iter 設置為指向當前級別上它後面的節點。如果沒有下一個反覆運算器，則返回 FALSE，並且 iter 設置為無效。
語法
參數
tree_model- 一GtkTreeModel
iter- .[在]GtkTreeIter
返回
TRUE（如果 iter 已更改為下一個節點）為 TRUE
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_iter_nth_child ----

gtk_tree_model_iter_nth_child
使用給定索引將 iter 設置為父級的子級。第一個索引為 0。如果 n 太大，或者父級沒有子級，則將其設置為無效反覆運算器並返回 FALSE。調用此函數後，parent 將保持為有效節點。作為特殊情況，如果父節點為 NULL，則設置第 n 個根節點。
語法
參數
tree_model- 一GtkTreeModel
iter- 設置為第 n 個子項。[輸出]GtkTreeIter
parent- 從中獲取子項，或 NULL。[允許-無]GtkTreeIter
n- 所需孩子的索引
返回
TRUE，如果父母有第 n 個孩子
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_iter_n_children ----

gtk_tree_model_iter_n_children
返回 iter 具有的子項數。作為特殊情況，如果 iter 為 NULL，則返回頂級節點的數量。
語法
參數
tree_model- 一GtkTreeModel
iter- 或 NULL。[允許-無]GtkTreeIter
返回
反覆運算器的子項數
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_iter_parent ----

gtk_tree_model_iter_parent
將 iter 設置為子項的父項。如果子節點處於頂層，並且沒有父節點，則將該物件設置為無效的反覆運算器，並返回 FALSE。在調用此函數後，child 將保持為有效節點。
語法
參數
tree_model- 一GtkTreeModel
iter- 要設置為父級的新項。[輸出]GtkTreeIter
child- 的GtkTreeIter
返回
TRUE，如果 iteris 設置為子項的父項
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_iter_previous ----

gtk_tree_model_iter_previous
將 iter 設置為指向當前級別的上一個節點。如果沒有以前的反覆運算器，則返回 FALSE，並將 iter 設置為無效。
語法
參數
tree_model- 一GtkTreeModel
iter- .[在]GtkTreeIter
返回
如果 iter 已更改為自 3.0 以來的上一個節點
，則為 TRUE
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_ref_node ----

gtk_tree_model_ref_node
允許樹引用節點。這是模型要實現的可選方法。更具體地說，模型可能會忽略此調用，因為它主要出於性能原因而存在。此函數主要是為了讓視圖緩存模型知道何時顯示節點（以及是否緩存該節點）。顯示意味著節點位於展開的分支中，而不管該節點當前在視口中是否可見。例如，基於檔案系統的模型不希望將整個檔層次結構保留在記憶體中，而只想將當前視圖顯示的部分保留在記憶體中。應該期望模型能夠獲得獨立於其 reffed 狀態的反覆運算器。
語法
參數
tree_model- 一GtkTreeModel
iter- 的GtkTreeIter
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_rows_reordered ----

gtk_tree_model_rows_reordered
在tree_model上發出信號。當模型的行已重新排序時，應調用此函數。?rows-reordered?
語法
參數
tree_model- 一GtkTreeModel
path- 指向其子項已重新排序的樹節點GtkTreePath
iter- 指向其子節點已重新排序的有效指向，如果路徑深度為 0，則為 NULLGtkTreeIter
new_order- 一個整數陣列，將每個子級的當前位置映射到其重新排序之前的舊位置，即new_order[newpos] = oldpos[br \=“”
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_row_changed ----

gtk_tree_model_row_changed
在tree_model上發出信號。?row-changed?
語法
參數
tree_model- 一GtkTreeModel
path- 指向已更改行的指標GtkTreePath
iter- 指向已更改行的有效指向GtkTreeIter
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_row_deleted ----

gtk_tree_model_row_deleted
在tree_model上發出信號。這應由模型在刪除行後調用。路徑所指向的位置應該是行之前所在的位置。它可能不再是一個有效的位置。刪除的節點不會被取消引用，這意味著不應釋放已刪除節點上的任何異常引用。?row-deleted?
語法
參數
tree_model- 一GtkTreeModel
path- 指向已刪除行的上一個位置GtkTreePath
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_row_has_child_toggled ----

gtk_tree_model_row_has_child_toggled
發出信號ontree_model。這應該在節點的子狀態更改後由模型調用。?row-has-child-toggled?
語法
參數
tree_model- 一GtkTreeModel
path- 指向已更改行的指標GtkTreePath
iter- 指向已更改行的有效指向GtkTreeIter
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_row_inserted ----

gtk_tree_model_row_inserted
在tree_model上發出信號。?row-inserted?
語法
參數
tree_model- 一GtkTreeModel
path- 指向插入的行GtkTreePath
iter- 指向插入行的有效指標GtkTreeIter
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_model_sort_clear_cache ----

gtk_tree_model_sort_clear_cache
幾乎永遠不應該調用此函數。它清除tree_model_sortof尚未withgtk_tree_model_ref_node（） 中引用的任何緩存反覆運算器。如果排序的子模型是靜態的（並且不經常更改），並且對節點的訪問很多未刪除，這可能很有用。作為此函數的副作用，所有未引用者都將無效。
語法
參數
tree_model_sort- 一GtkTreeModelSort
另請參見
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_sort_convert_child_iter_to_iter ----

gtk_tree_model_sort_convert_child_iter_to_iter
將sort_iter設置為指向tree_model_sort中與child_iter所指向的行相對應的行。如果未設置sort_iter，FALSEis 將返回。注意：布林值僅在 2.14 之後返回。
語法
參數
tree_model_sort- 一GtkTreeModelSort
sort_iter- 未初始化的 .[輸出]GtkTreeIter
child_iter- 指向子模型上某行的有效指標GtkTreeIter
返回
TRUE，如果sort_iterwas設置，即如果sort_iteris指向子模型中可見行的無效反覆運算器指標。
另請參見
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_sort_convert_child_path_to_path ----

gtk_tree_model_sort_convert_child_path_to_path
將child_path轉換為相對於tree_model_sort的路徑。也就是說，child_path指向子模型中的路徑。返回的路徑將指向排序模型中的同一行。如果child_path不是子模型上的有效路徑，則返回 NULL。
語法
參數
tree_model_sort- 一GtkTreeModelSort
child_path- A 轉換GtkTreePath
返回
新分配的 或 NULLGtkTreePath
另請參見
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_sort_convert_iter_to_child_iter ----

gtk_tree_model_sort_convert_iter_to_child_iter
將child_iter設置為指向sorted_iter所指向的行。
語法
參數
tree_model_sort- 一GtkTreeModelSort
child_iter- 未初始化的 .[輸出]GtkTreeIter
sorted_iter- 指向tree_model_sort行的有效指標。GtkTreeIter
另請參見
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_sort_convert_path_to_child_path ----

gtk_tree_model_sort_convert_path_to_child_path
將sorted_path轉換為tree_model_sort子模型上的路徑。也就是說，sorted_path指向tree_model_sort中的某個位置。返回的路徑將指向模型中未排序的相同位置。如果sorted_path不指向子模型中的位置，則返回 NULL。
語法
參數
tree_model_sort- 一GtkTreeModelSort
sorted_path- A 轉換GtkTreePath
返回
新分配的 或 NULLGtkTreePath
另請參見
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_sort_get_model ----

gtk_tree_model_sort_get_model
返回正在排序的模型。GtkTreeModelSort
語法
參數
tree_model- 一GtkTreeModelSort
返回
正在排序的“子模型”。[無轉移]
另請參見
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_sort_iter_is_valid ----

gtk_tree_model_sort_iter_is_valid
此功能很慢。僅將其用於調試和/或測試目的。檢查給定的反覆運算器是否是此 的有效反覆運算器。GtkTreeModelSort
語法
參數
tree_model_sort- 一.GtkTreeModelSort
iter- 一.GtkTreeIter
返回
如果反覆運算器有效，則為 TRUE;如果反覆運算器無效，則為 FALSE。
自 2.
另請參見
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_sort_new_with_model ----

gtk_tree_model_sort_new_with_model
創建一個新的 ，child_model作為子模型。GtkTreeModel
語法
參數
child_model- 一GtkTreeModel
返回
一個新的.[轉移完整]GtkTreeModel
另請參見
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_sort_reset_default_sort_func ----

gtk_tree_model_sort_reset_default_sort_func
這會將預設排序函數重置為位於“未排序”中州。也就是說，它與子模型的順序相同。它將重新排序模型以與子模型相同的順序，僅當州。GtkTreeModelSort
語法
參數
tree_model_sort- 一GtkTreeModelSort
另請參見
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_unref_node ----

gtk_tree_model_unref_node
允許樹取消引用節點。這是模型要實現的可選方法。更具體地說，模型可能會忽略此調用，因為它主要出於性能原因而存在。有關其含義的詳細資訊，請參閱gtk_tree_model_ref_node（）。請注意，被刪除的節點不會被取消引用。
語法
參數
tree_model- 一GtkTreeModel
iter- 的GtkTreeIter
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_append_index ----

gtk_tree_path_append_index
將新索引追加到路徑。因此，路徑的深度會增加。
語法
參數
path- 一GtkTreePath
index_- 索引
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_compare ----

gtk_tree_path_compare
比較兩條路徑。如果 a 出現在樹中 b 之前，則返回 -1。如果 b 出現在 a 之前，則返回 1。如果兩個節點相等，則返回 0。
語法
參數
a- 一GtkTreePath
b- a 比較GtkTreePath
返回
a 和 b 的相對位置
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_copy ----

gtk_tree_path_copy
創建新的路徑副本。GtkTreePath
語法
參數
path- 一GtkTreePath
返回
一個新的GtkTreePath
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_down ----

gtk_tree_path_down
移動路徑以指向當前路徑的第一個子路徑。
語法
參數
path- 一GtkTreePath
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_free ----

gtk_tree_path_free
釋放路徑。如果 path 為 NULL，則只返回。
語法
參數
path- 一個.[允許-無]GtkTreePath
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_get_depth ----

gtk_tree_path_get_depth
返回路徑的當前深度。
語法
參數
path- 一GtkTreePath
返回
路徑深度
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_get_indices ----

gtk_tree_path_get_indices
返回路徑的當前索引。這是一個整數陣列，每個整數表示樹中的一個節點。不應釋放此值。陣列的長度可以通過gtk_tree_path_get_depth（） 獲得。
語法
參數
path- 一GtkTreePath
返回
當前索引或 NULL
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_get_indices_with_depth ----

gtk_tree_path_get_indices_with_depth
返回路徑的當前索引。這是一個整數陣列，每個整數表示樹中的一個節點。它還返回陣列中的元素數。不應釋放陣列。
語法
參數
path- 一GtkTreePath
depth- 返回整數陣列中返回的元素數的位置，或 NULL。[輸出][允許-無]
返回
當前指示，或 NULL。[陣列長度 = 深度][無轉移]
自 3.0 起
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_is_ancestor ----

gtk_tree_path_is_ancestor
如果子體是路徑的子體，則返回 TRUE。
語法
參數
path- 一GtkTreePath
descendant- 另一個GtkTreePath
返回
如果子體包含在路徑內，則為 TRUE
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_is_descendant ----

gtk_tree_path_is_descendant
如果 path 是祖先的後代，則返回 TRUE。
語法
參數
path- 一GtkTreePath
ancestor- 另一個GtkTreePath
返回
TRUE，如果祖先在其下方的某個位置包含路徑
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_new ----

gtk_tree_path_new
創建新的 .這是指一行。GtkTreePath
返回
新創建的 .GtkTreePath
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_new_first ----

gtk_tree_path_new_first
創建新的 .此路徑的字串表示形式為 ？0？。GtkTreePath
返回
一個新的GtkTreePath
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_new_from_indices ----

gtk_tree_path_new_from_indices
創建一個新路徑，first_index和 varargs 作為索引。
語法
參數
first_index- 第一個整數
...- 以 -1 結尾的整數清單
返回
新創建的
自 2.2GtkTreePath
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_new_from_indicesv ----

gtk_tree_path_new_from_indicesv
使用給定的索引長度陣列創建新路徑。
語法
參數
indices- 索引陣列。[陣列長度 = 長度]
length- 索引陣列的長度
返回
自 3.12 以來新創建的
GtkTreePath
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_new_from_string ----

gtk_tree_path_new_from_string
創建一個新的初始化為 path.path 應為以冒號分隔的數字清單。例如，字串 ？10：4：0？將創建一個 depth3 路徑，該路徑指向根節點的第 11 個子節點、該第 11 個子節點的第 5 個子節點以及該第 5 個子節點的第 1 個子節點。如果傳入的路徑字串無效，則返回 NULL。GtkTreePath
語法
參數
path- 路徑的字串表示形式
返回
新創建的 或空GtkTreePath
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_next ----

gtk_tree_path_next
移動路徑以指向當前深度的下一個節點。
語法
參數
path- 一GtkTreePath
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_prepend_index ----

gtk_tree_path_prepend_index
將新索引附加到路徑。因此，路徑的深度會增加。
語法
參數
path- 一GtkTreePath
index_- 索引
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_prev ----

gtk_tree_path_prev
將路徑移動到當前深度處的上一個節點（如果存在）。
語法
參數
path- 一GtkTreePath
返回
如果 path 具有前一個節點，並且已進行移動，則為 TRUE
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_to_string ----

gtk_tree_path_to_string
生成路徑的字串表示形式。此字串是 ？：？分隔的數字清單。例如，？4：10：0：3？將是此字串的可接受返回值。
語法
參數
path- 一GtkTreePath
返回
新分配的字串。必須使用 g_free（） 釋放。
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_path_up ----

gtk_tree_path_up
移動路徑以指向其父節點（如果它具有父節點）。
語法
參數
path- 一GtkTreePath
返回
如果路徑有父級，並且移動已進行，則為 TRUE
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_copy ----

gtk_tree_row_reference_copy
複製 .GtkTreeRowReference
語法
參數
reference- 一GtkTreeRowReference
返回
自2.2起的參考文獻
副本
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_deleted ----

gtk_tree_row_reference_deleted
讓bygtk_tree_row_reference_new_proxy（） 創建的一組行引用知道該模型發出了信號。?row-deleted?
語法
參數
proxy- 一GObject
path- 已刪除的路徑位置
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_free ----

gtk_tree_row_reference_free
免費參考。引用可能為空
語法
參數
reference- a 或 NULL。[允許-無]GtkTreeRowReference
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_get_model ----

gtk_tree_row_reference_get_model
返回行引用正在監視的模型。
語法
參數
reference- 一GtkTreeRowReference
返回
模型。[無轉移]
自 2.8 起
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_get_path ----

gtk_tree_row_reference_get_path
返回行引用當前指向的路徑，如果指向的路徑不再有效，則返回 NULL。
語法
參數
reference- 一GtkTreeRowReference
返回
當前路徑，或 NULL
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_inserted ----

gtk_tree_row_reference_inserted
讓bygtk_tree_row_reference_new_proxy（） 創建的一組行引用知道該模型發出了信號。?row-inserted?
語法
參數
proxy- 一GObject
path- 插入的行位置
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_new ----

gtk_tree_row_reference_new
基於路徑創建行引用。只要此引用存在，它就會一直指向指向路徑的節點。將傳播模型上發生的任何更改，並相應地更新路徑。如果路徑不是模型中的有效路徑，則返回 NULL。
語法
參數
model- 一GtkTreeModel
path- 一個有效的監控GtkTreePath
返回
新分配的 ，或 NULLGtkTreeRowReference
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_new_proxy ----

gtk_tree_row_reference_new_proxy
您不需要使用此功能。基於路徑創建行引用。只要此引用存在，它就會一直指向指向路徑的節點。如果 path 在模型中不是有效路徑，則返回 NULL。但是，與使用gtk_tree_row_reference_new（）創建的引用不同，它不會偵聽模型的更改。行引用的創建者必須usinggtk_tree_row_reference_inserted（）、gtk_tree_row_reference_deleted（）、gtk_tree_row_reference_reordered（） 顯式執行此操作。當發出模型上的對應信號時，每個代理必須只調用一次這些函數。此單個調用將更新該代理的所有行引用。由於內置的GTK +物件已經在內部使用此機制，因此將它們用作代理物件將產生不可預測的結果。此外，由於內部實現的原因，將同一物件與模型和代理傳遞到一樣不起作用。這種類型的行引用主要是指需要仔細監視行引用何時更新自身的結構，並且大多數應用程式通常不需要這些結構。GtkTreeView
語法
參數
proxy- 代理GObject
model- 一GtkTreeModel
path- 一個有效的監控GtkTreePath
返回
新分配的 ，或 NULLGtkTreeRowReference
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_reordered ----

gtk_tree_row_reference_reordered
讓bygtk_tree_row_reference_new_proxy（） 創建的一組行引用知道該模型發出了信號。?rows-reordered?
語法
參數
proxy- 一GObject
path- 重新排序信號的父路徑
iter- 指向重新排序的父級的反覆運算器
new_order- 行的新順序
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_valid ----

gtk_tree_row_reference_valid
如果引用為非 NULL 並引用當前有效路徑，則返回 TRUE。
語法
參數
reference- a 或 NULL。[允許-無]GtkTreeRowReference
返回
如果引用指向有效路徑，則為 TRUE
另請參見
GtkTreeModel


------------ KeyGTK3gtk_tree_selection_count_selected_rows ----

gtk_tree_selection_count_selected_rows
返回已在樹中選擇的行數。
語法
參數
selection- 一.GtkTreeSelection
返回
所選行數。
自 2.2 起
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_get_mode ----

gtk_tree_selection_get_mode
鑾峰彇鐢ㄤ簬閫夋嫨鐨勯€夋嫨妯″紡銆係eegtk_tree_selection_set_mode錛堬級.
璿硶
鍙傛暟
selection- 涓€GtkTreeSelection
榪斿洖
褰撳墠閫夋嫨妯″紡
鍙﹁鍙傝
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_get_selected ----

gtk_tree_selection_get_selected
如果選定內容設置為 或 ，則將 iter 設置為當前選定的節點。如果您只想測試所選內容是否具有任何選定的節點，則 iter 可能為 NULL。模型是用當前模型填充的，以方便。如果將所選內容設置為 .，則此函數將不起作用。GTK_SELECTION_SINGLEGTK_SELECTION_BROWSEGTK_SELECTION_MULTIPLE
語法
參數
selection- 一.GtkTreeSelection
model- 要設置為 或 NULL 的指針。[輸出][允許-無][無轉移]GtkTreeModel
iter- 或空值。[輸出][允許-無]GtkTreeIter
返回
TRUE（如果存在選定的節點）。
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_get_selected_rows ----

gtk_tree_selection_get_selected_rows
創建所有選定行的路徑清單。此外，如果計畫在調用此函數後修改模型，則可能需要將返回的清單轉換為 .為此，您可以使用 gtk_tree_row_reference_new（）。要釋放返回值，請使用：1[/語法] [語法]g_list_free_full（清單，（GDestroyNotify）gtk_tree_path_free）;[/語法]GtkTreeRowReferences
語法
參數
selection- 一.GtkTreeSelection
model- 要設置為 或 NULL 的指針。[輸出][允許-無][無轉移]GtkTreeModel
返回
A，其中包含每個選定行的 。[元素型 GtkTreePath][轉移完整]
自 2.2 起GListGtkTreePath
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_get_select_function ----

gtk_tree_selection_get_select_function
返回當前選擇函數。
語法
參數
selection- 一.GtkTreeSelection
返回
函數。
自 2.14 起
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_get_tree_view ----

gtk_tree_selection_get_tree_view
返回與所選內容關聯的樹狀檢視。
語法
參數
selection- 一GtkTreeSelection
返回
一個。[無轉移]GtkTreeView
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_get_user_data ----

gtk_tree_selection_get_user_data
返回選擇函數的使用者資料。
語法
參數
selection- 一.GtkTreeSelection
返回
使用者資料。
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_iter_is_selected ----

gtk_tree_selection_iter_is_selected
如果當前選擇了位於 iter 處的行，則返回 TRUE。
語法
參數
selection- 一GtkTreeSelection
iter- 有效GtkTreeIter
返回
TRUE，如果選擇了 iteris
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_path_is_selected ----

gtk_tree_selection_path_is_selected
如果當前選擇了路徑所指向的行，則返回 TRUE。如果路徑未指向有效位置，則返回 FALSE
語法
參數
selection- 一.GtkTreeSelection
path- A 檢查選擇。GtkTreePath
返回
如果選擇了路徑，則為 TRUE。
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_selected_foreach ----

gtk_tree_selection_selected_foreach
為每個選定節點調用一個函數。請注意，您無法從此函數中修改樹或選擇。因此，gtk_tree_selection_get_selected_rows（） 可能更有用。
語法
參數
selection- 一.GtkTreeSelection
func- 要為每個選定節點調用的函數。[範圍調用]
data- 要傳遞給函數的使用者資料。
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_select_all ----

gtk_tree_selection_select_all
選擇所有節點。選擇必須設置為模式。GTK_SELECTION_MULTIPLE
語法
參數
selection- 一.GtkTreeSelection
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_select_iter ----

gtk_tree_selection_select_iter
選擇指定的反覆運算器。
語法
參數
selection- 一.GtkTreeSelection
iter- 要選擇的。GtkTreeIter
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_select_path ----

gtk_tree_selection_select_path
選擇路徑處的行。
語法
參數
selection- 一.GtkTreeSelection
path- 要選擇的。GtkTreePath
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_select_range ----

gtk_tree_selection_select_range
選擇由start_path確定的節點範圍，end_path（非獨占）。選擇必須設置為模式。GTK_SELECTION_MULTIPLE
語法
參數
selection- 一.GtkTreeSelection
start_path- 範圍的初始節點。
end_path- 範圍的最後一個節點。
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_set_mode ----

gtk_tree_selection_set_mode
設置所選內容的選擇模式。如果以前的類型是，則錨點保持選中狀態（如果以前已選擇）。GTK_SELECTION_MULTIPLE
語法
參數
selection- 一.GtkTreeSelection
type- 選擇模式
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_set_select_function ----

gtk_tree_selection_set_select_function
設置選擇功能。如果設置，則在選擇或取消選擇任何節點之前調用此函數，從而對選擇哪些節點進行一些控制。如果節點的狀態可以切換，則選擇函數應返回 TRUE，如果節點的狀態應保持不變，則 FALSE。
語法
參數
selection- 一.GtkTreeSelection
func- 選擇功能。可能為空
data- 選擇函數的資料。可能為空
destroy- 使用者資料的銷毀功能。可能為空
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_unselect_all ----

gtk_tree_selection_unselect_all
取消選擇所有節點。
語法
參數
selection- 一.GtkTreeSelection
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_unselect_iter ----

gtk_tree_selection_unselect_iter
取消選擇指定的反覆運算器。
語法
參數
selection- 一.GtkTreeSelection
iter- 要取消選擇的。GtkTreeIter
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_unselect_path ----

gtk_tree_selection_unselect_path
取消選擇路徑處的行。
語法
參數
selection- 一.GtkTreeSelection
path- 要取消選擇的。GtkTreePath
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_unselect_range ----

gtk_tree_selection_unselect_range
取消選擇由start_path和end_pathinclusive確定的節點範圍。
語法
參數
selection- 一.GtkTreeSelection
start_path- 範圍的初始節點。
end_path- 範圍的初始節點。
自 2.
另請參見
GtkTreeSelection


------------ KeyGTK3gtk_tree_set_row_drag_data ----

gtk_tree_set_row_drag_data
設置目標類型的選擇資料GTK_TREE_MODEL_ROW。通常用於drag_data_get處理常式。
語法
參數
selection_data- 一些GtkSelectionData
tree_model- 一GtkTreeModel
path- tree_model中的一行
返回
TRUE 如果 具有正確的目標類型，以允許我們設置樹行GtkSelectionData
另請參見
gtk3-GtkTreeView-drag-and-drop


------------ KeyGTK3GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID ----

GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID
GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID
GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID鍙敤浜庝嬌鐢ㄩ粯璁ゆ帓搴忓嚱鏁般€傚彠璿峰弬瑙乬tk_tree_sortable_set_sort_column_id錛堬級GtkTreeSortable
鍙﹁鍙傝
GtkTreeSortable


------------ KeyGTK3gtk_tree_sortable_get_sort_column_id ----

gtk_tree_sortable_get_sort_column_id
使用當前排序列和順序填充sort_column_id和順序。它返回 TRUE，除非sort_column_id GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID或GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID。
語法
參數
sortable- 一GtkTreeSortable
sort_column_id- 要填寫的排序列 ID。
order- 要填寫的。GtkSortType
返回
如果排序列不是特殊排序列 ID 之一，則為 TRUE。
另請參見
GtkTreeSortable


------------ KeyGTK3gtk_tree_sortable_has_default_sort_func ----

gtk_tree_sortable_has_default_sort_func
如果模型具有預設排序函數，則返回 TRUE。GtkTreeViewColumns 主要使用它來確定模型是否可以返回到預設狀態。
語法
參數
sortable- 一GtkTreeSortable
返回
TRUE，如果模型具有預設排序功能
另請參見
GtkTreeSortable


------------ KeyGTK3gtk_tree_sortable_set_default_sort_func ----

gtk_tree_sortable_set_default_sort_func
將排序時使用的預設比較函數設置為sort_func。如果可排序的當前排序列 id isGTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID，則模型將使用此函數進行排序。如果sort_func為 NULL，則不會有預設比較函數。這意味著，一旦對模型進行了排序，它就不能返回到預設狀態。在這種情況下，當可排序的當前排序列 ID GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID時，模型將不排序。
語法
參數
sortable- 一GtkTreeSortable
sort_func- 比較功能
user_data- 要傳遞給sort_func或 NULL 的使用者資料。[允許-無]
destroy- 銷毀user_data的通知程式，或 NULL。[允許-無]
另請參見
GtkTreeSortable


------------ KeyGTK3gtk_tree_sortable_set_sort_column_id ----

gtk_tree_sortable_set_sort_column_id
將當前排序列設置為sort_column_id。可排序的將在發出信號後自行排序以反映此更改。sort_column_id可以是常規列 ID，也可以是以下特殊值之一：GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID：如果setGTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID，則將使用預設排序函數：不會發生排序?sort-column-changed?
語法
參數
sortable- 一GtkTreeSortable
sort_column_id- 要設置的排序列 id
order- 列的排序順序
另請參見
GtkTreeSortable


------------ KeyGTK3gtk_tree_sortable_set_sort_func ----

gtk_tree_sortable_set_sort_func
將排序時使用的比較函數設置為sort_func。如果可排序的當前排序列 ID 與 sort_column_id 相同，則模型將使用此函數進行排序。
語法
參數
sortable- 一GtkTreeSortable
sort_column_id- 用於設置函數的排序列 id
sort_func- 比較功能
user_data- 要傳遞給sort_func或 NULL 的使用者資料。[允許-無]
destroy- 銷毀user_data的通知程式，或 NULL。[允許-無]
另請參見
GtkTreeSortable


------------ KeyGTK3gtk_tree_sortable_sort_column_changed ----

gtk_tree_sortable_sort_column_changed
在可排序時發出信號。?sort-column-changed?
語法
參數
sortable- 一GtkTreeSortable
另請參見
GtkTreeSortable


------------ KeyGTK3GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID ----

GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID
GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID
GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID鍙敤浜庝嬌鐢ㄦ棤鎺掑簭銆傚彠璿峰弬瑙乬tk_tree_sortable_set_sort_column_id錛堬級GtkTreeSortable
鍙﹁鍙傝
GtkTreeSortable


------------ KeyGTK3gtk_tree_store_append ----

gtk_tree_store_append
將新行追加到tree_store。如果 parent 不是 NULL，則它將新行追加到 parent 的最後一個子級之後，否則它將向頂層追加一行。iter 將更改為指向此新行。調用此函數後，該行將為空。要填寫值，您需要callgtk_tree_store_set（） 或 gtk_tree_store_set_value（）。
語法
參數
tree_store- 一GtkTreeStore
iter- 要設置為追加行的未設置。[輸出]GtkTreeIter
parent- 有效的 或空值。[允許-無]GtkTreeIter
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_clear ----

gtk_tree_store_clear
浠巘ree_store涓垹闄ゆ墍鏈夎
璿硶
鍙傛暟
tree_store- 涓€GtkTreeStore
鍙﹁鍙傝
GtkTreeStore


------------ KeyGTK3gtk_tree_store_insert ----

gtk_tree_store_insert
在位置處創建新行。如果父行為非 NULL，則該行將成為父項的子項。否則，將在頂層創建該行。如果 position 為 -1 或大於該級別的行數，則新行將插入到列表的末尾。iter 將被更改為指向此新行。調用此函數後，該行將為空。要填寫值，您需要調用gtk_tree_store_set（） orgtk_tree_store_set_value（）。
語法
參數
tree_store- 一GtkTreeStore
iter- 要設置為新行的未設置。[輸出]GtkTreeIter
parent- 有效的 或空值。[允許-無]GtkTreeIter
position- 位置插入新行，或 -1 作為最後一行
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_insert_after ----

gtk_tree_store_insert_after
在同級之後插入一個新行。如果同級為 NULL，則該行將優先附加到父級 的子級。如果父級和同級為 NULL，則該行將附加到頂級之前。如果同時設置同級和父級，則父級必須是同級的父級。設置同級時，父級是可選的。iter 將更改為指向此新行。調用此函數後，該行將為空。要填寫值，您需要callgtk_tree_store_set（） 或 gtk_tree_store_set_value（）。
語法
參數
tree_store- 一GtkTreeStore
iter- 要設置為新行的未設置。[輸出]GtkTreeIter
parent- 有效的 或空值。[允許-無]GtkTreeIter
sibling- 有效的 或空值。[允許-無]GtkTreeIter
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_insert_before ----

gtk_tree_store_insert_before
在同級之前插入新行。如果同級為 NULL，則該行將追加到父項 的子項。如果父級和同級為 NULL，則該行將追加到 toplevel。如果同時設置同級和父級，則父級必須是同級的父級。設置同級時，父級是可選的。iter 將更改為指向此新行。調用此函數後，該行將為空。要填寫值，您需要callgtk_tree_store_set（） 或 gtk_tree_store_set_value（）。
語法
參數
tree_store- 一GtkTreeStore
iter- 要設置為新行的未設置。[輸出]GtkTreeIter
parent- 有效的 或空值。[允許-無]GtkTreeIter
sibling- 有效的 或空值。[允許-無]GtkTreeIter
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_insert_with_values ----

gtk_tree_store_insert_with_values
在位置處創建新行。iter 將被更改為指向此新行。如果 position 為 -1，或大於列表中的行數，則新行將追加到列表中。該行將填充給定給此函數的值。Callinggtk_tree_store_insert_with_values（tree_store、反覆運算器、位置等）與調用 12[/語法] [語法]gtk_tree_store_insert（tree_store、反覆運算器、位置）;gtk_tree_store_set（tree_store、反覆運算器、...）具有相同的效果;[/語法]
不同的是，前者只會發出row_inserted信號，而後者會發出row_inserted，row_changed如果樹存儲被排序，rows_reordered。由於重複發射rows_reordered信號會影響程式的性能，因此在排序樹存儲中插入行時通常首選gtk_tree_store_insert_with_values（）。
語法
參數
tree_store- 一GtkTreeStore
iter- 用於設置新行的未設置，或 NULL。[輸出][允許-無]GtkTreeIter
parent- 有效的 或空值。[允許-無]GtkTreeIter
position- 位置插入新行，或 -1 追加在現有行之後
...- 列號和值對，以 -1
結尾，因為 2.10
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_insert_with_valuesv ----

gtk_tree_store_insert_with_valuesv
gtk_tree_store_insert_with_values（） 的變體，它將列和值作為兩個陣列，而不是 varargs。此函數主要用於語言綁定。
語法
參數
tree_store- 一GtkTreeStore
iter- 用於設置新行的未設置，或 NULL。[輸出][允許-無]GtkTreeIter
parent- 有效的 或空值。[允許-無]GtkTreeIter
position- 位置插入新行，或 -1 作為最後一行
columns- 列號陣列。[陣列長度 = n_values]
values- 一個 GValues 陣列。[陣列長度 = n_values]
n_values-
自 2.10 以來的列和值陣列
的長度
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_is_ancestor ----

gtk_tree_store_is_ancestor
如果 iter 是後代的祖先，則返回 TRUE。也就是說，它是後代的父輩（或祖父母或曾祖父母）。
語法
參數
tree_store- 一GtkTreeStore
iter- 有效GtkTreeIter
descendant- 有效GtkTreeIter
返回
TRUE，如果 iteris 是後代的祖先
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_iter_depth ----

gtk_tree_store_iter_depth
返回反覆運算器的深度。對於根級別上的任何內容，此值將為 0，對於級別以下的任何內容，此值為 1，依此類推。
語法
參數
tree_store- 一GtkTreeStore
iter- 有效GtkTreeIter
返回
反覆運算器的深度
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_iter_is_valid ----

gtk_tree_store_iter_is_valid
警告：此功能運行緩慢。僅將其用於調試和/或測試目的。檢查給定的反覆運算器是否是此 的有效反覆運算器。GtkTreeStore
語法
參數
tree_store- 一.GtkTreeStore
iter- 一.GtkTreeIter
返回
如果反覆運算器有效，則為 TRUE;如果反覆運算器無效，則為 FALSE。
自 2.2 起
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_move_after ----

gtk_tree_store_move_after
將反覆運算器在tree_store移動到一個又一個位置。iter 和位置應處於同一級別。請注意，此功能僅適用於未排序的商店。如果位置為 NULL，則 iter 將被移動到關卡的起點。
語法
參數
tree_store- 一.GtkTreeStore
iter- 一.GtkTreeIter
position- 一.[允許-無]
自 2.GtkTreeIter
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_move_before ----

gtk_tree_store_move_before
將 iter tree_store移動到位置之前的位置。iter 和位置應處於同一級別。請注意，此功能僅適用於未排序的商店。如果位置為 NULL，則 iter 將移動到關卡的末尾。
語法
參數
tree_store- 一.GtkTreeStore
iter- 一.GtkTreeIter
position- A 或空。[允許-無]
自 2.2 起GtkTreeIter
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_new ----

gtk_tree_store_new
創建一個新的樹存儲區，如n_columns列中傳遞的每個類型。請注意，僅支援從標準 GObject 基本類型派生的類型。例如，gtk_tree_store_new（3，G_TYPE_INT，G_TYPE_STRING，GDK_TYPE_PIXBUF）;將創建一個包含三列的新列，分別為 、 和 類型。GtkTreeStoregintgchararrayGdkPixbuf
語法
參數
n_columns- 樹存儲中的列數
...- 列的所有類型，從第一個到最後一個GType
返回
一個新的GtkTreeStore
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_newv ----

gtk_tree_store_newv
非變數創建函數。主要由語言綁定使用。
語法
參數
n_columns- 樹存儲中的列數
types- 列的類型陣列，從第一個到最後一個。[陣列長度 = n_columns]GType
返回
一個新的.[轉移完整]GtkTreeStore
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_prepend ----

gtk_tree_store_prepend
在要tree_store的新行前面附加一行。如果 parent 是 non-NULL，則它將在父級的第一個子級之前附加新行，否則它將在頂層前附加一行。iter 將更改為指向此新行。調用此函數後，該行將為空。要填寫值，您需要調用 gtk_tree_store_set（） 或 gtk_tree_store_set_value（）。
語法
參數
tree_store- 一GtkTreeStore
iter- 要設置為前置行的未設置。[輸出]GtkTreeIter
parent- 有效的 或空值。[允許-無]GtkTreeIter
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_remove ----

gtk_tree_store_remove
從tree_store中刪除反覆運算器。刪除後，iter 將設置為該級別的下一個有效行，如果它之前指向最後一個行，則無效。
語法
參數
tree_store- 一GtkTreeStore
iter- 有效GtkTreeIter
返回
如果 iteris 仍然有效，則為 TRUE，如果不是，則為 FALSE。
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_reorder ----

gtk_tree_store_reorder
tree_store中父項的子項重新排序，以遵循new_order指示的順序。請注意，此函數僅適用於未排序的存儲。
語法
參數
tree_store- 一.GtkTreeStore
parent- 一.GtkTreeIter
new_order- 一個整數陣列，將每個子節點的新位置映射到重新排序之前的舊位置，即new_order[newpos] = oldpos。[陣列]
自 2.2 起
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_set ----

gtk_tree_store_set
設置反覆運算器引用的行中一個或多個儲存格的值。變數參數清單應包含整數列號，每個列號後跟要設置的值。該列表以 -1 結尾。例如，將帶有 typeG_TYPE_STRING 的列 0 設置為 ？Foo？，你會writegtk_tree_store_set（store，iter，0，“Foo”，-1）。如果該值是G_TYPE_OBJECT，則由存儲區引用，如果該值是G_TYPE_STRING或G_TYPE_BOXED，則由存儲區複製該值。
語法
參數
tree_store- 一GtkTreeStore
iter- 對正在修改的行有效的GtkTreeIter
...- 列號和值對，以 -1 結尾
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_set_column_types ----

gtk_tree_store_set_column_types
此函數主要用於繼承自 ，並且只應在構造新的 .在添加行或調用介面上的方法後，它將不起作用。GObjectsGtkTreeStoreGtkTreeStoreGtkTreeModel
語法
參數
tree_store- 一GtkTreeStore
n_columns- 樹存儲的列數
types- 類型陣列，每列一個。[陣列長度 = n_columns]GType
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_set_valist ----

gtk_tree_store_set_valist
見gtk_tree_store_set（）;此版本需要va_list語言綁定使用。
語法
參數
tree_store- 一GtkTreeStore
iter- 對正在修改的行有效的GtkTreeIter
var_args- 列/值對的va_list
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_set_value ----

gtk_tree_store_set_value
設置由反覆運算器和列指定的儲存格中的資料。值的類型必須可轉換為列的類型。
語法
參數
tree_store- 一GtkTreeStore
iter- 對正在修改的行有效的GtkTreeIter
column- 要修改的列號
value- 儲存格的新值
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_set_valuesv ----

gtk_tree_store_set_valuesv
gtk_tree_store_set_valist（） 的變體，它將列和值作為兩個陣列，而不是 varargs。此函數主要用於語言綁定，或者在要更改的列數直到運行時才知道的情況下。
語法
參數
tree_store- 一GtkTreeStore
iter- 對正在修改的行有效的GtkTreeIter
columns- 列號陣列。[陣列長度 = n_values]
values- 一個 GValues 陣列。[陣列長度 = n_values]
n_values-
自 2.12 以來的列和值陣列
的長度
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_store_swap ----

gtk_tree_store_swap
以相同級別的tree_store交換 a 和 b。請注意，此函數僅適用於未排序的商店。
語法
參數
tree_store- 一.GtkTreeStore
a- 一.GtkTreeIter
b- 另一個.
自 2.2 起GtkTreeIter
另請參見
GtkTreeStore


------------ KeyGTK3gtk_tree_view_append_column ----

gtk_tree_view_append_column
將列追加到列列表中。如果tree_view啟用了“fixed_height”模式，則列必須具有“大小調整大小”？屬性設置為 beGTK_TREE_VIEW_COLUMN_FIXED。
語法
參數
tree_view- 一.GtkTreeView
column- 要添加。GtkTreeViewColumn
返回
追加tree_viewafter列數。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_collapse_all ----

gtk_tree_view_collapse_all
遞迴折疊tree_view中所有可見的展開節點。
語法
參數
tree_view- 一.GtkTreeView
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_collapse_row ----

gtk_tree_view_collapse_row
折疊一行（隱藏其子行，如果存在）。
語法
參數
tree_view- 一GtkTreeView
path- tree_view中某行的路徑
返回
如果行已折疊，則為 TRUE。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_columns_autosize ----

gtk_tree_view_columns_autosize
將所有列的大小調整為其最佳寬度。只有在實現treeview之後才有效。
語法
參數
tree_view- 一.GtkTreeView
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_column_add_attribute ----

gtk_tree_view_column_add_attribute
將屬性映射添加到tree_column中的列表中。列是要從中獲取值的模型的列，屬性是要從該值設置cell_renderer的參數。例如，如果模型的第 2 列包含字串，則可以擁有？text？的屬性從列 2 獲取其值。GtkCellRendererText
語法
參數
tree_column- 一.GtkTreeViewColumn
cell_renderer- 設置屬性GtkCellRenderer
attribute- 渲染器上的屬性
column- 模型上要從中獲取屬性的列位置。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_cell_get_position ----

gtk_tree_view_column_cell_get_position
獲取列中儲存格的水準位置和大小。如果在列中找不到儲存格，則不會更改start_pos和寬度，並返回FALSE。
語法
參數
tree_column- 一GtkTreeViewColumn
cell_renderer- 一GtkCellRenderer
x_offset- tree_column內儲存格水準放置的返回位置，可以是 NULL。[輸出][允許-無]
width- 返回儲存格寬度的位置，可能是 NULL。[輸出][允許-無]
返回
如果細胞長到tree_column，則為 TRUE。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_cell_get_size ----

gtk_tree_view_column_cell_get_size
獲取呈現列所需的寬度和高度。這主要由 .GtkTreeView
語法
參數
tree_column- 一.GtkTreeViewColumn
cell_area- 將分配列中儲存格的區域，或 NULL。[允許-無]
x_offset- 位置返回儲存格相對於cell_area的 x 偏移量，或 NULL。[輸出][允許-無]
y_offset- 位置返回儲存格相對於cell_area的 y 偏移量，或 NULL。[輸出][允許-無]
width- 位置返回渲染儲存格所需的寬度，或 NULL。[輸出][允許-無]
height- 位置返回渲染儲存格所需的高度，或 NULL。[輸出][允許-無]
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_cell_is_visible ----

gtk_tree_view_column_cell_is_visible
如果打包到tree_column中的任何儲存格可見，則返回 TRUE。要使這有意義，您必須首先初始化儲存格 withgtk_tree_view_column_cell_set_cell_data（）
語法
參數
tree_column- 一GtkTreeViewColumn
返回
TRUE，如果包裝在tree_columnare中的任何細胞當前可見
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_cell_set_cell_data ----

gtk_tree_view_column_cell_set_cell_data
基於tree_model和反覆運算器設置儲存格渲染器。也就是說，在tree_column中，它將從反覆運算器上的setcolumn中獲取一個值，並使用該值在cellrenderer上設置屬性。這主要由 .GtkTreeView
語法
參數
tree_column- 一.GtkTreeViewColumn
tree_model- to 從中獲取儲存格渲染器屬性。GtkTreeModel
iter- 從中獲取儲存格渲染器的屬性。GtkTreeIter
is_expander- TRUE，如果行有子項
is_expanded- TRUE，如果行具有可見的子項
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_clear ----

gtk_tree_view_column_clear
取消設置tree_column上所有渲染器上的所有映射。
語法
參數
tree_column- 一GtkTreeViewColumn
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_clear_attributes ----

gtk_tree_view_column_clear_attributes
清除以前withgtk_tree_view_column_set_attributes（） 設置的所有現有屬性。
語法
參數
tree_column- 一GtkTreeViewColumn
cell_renderer- a 清除屬性映射。GtkCellRenderer
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_clicked ----

gtk_tree_view_column_clicked
發出 “按一下”柱子上的信號。此功能僅在可點擊iftree_column起作用。
語法
參數
tree_column- 一GtkTreeViewColumn
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_focus_cell ----

gtk_tree_view_column_focus_cell
如果列包含 2 個或更多可編輯和可啟動的儲存格，則將當前鍵盤焦點設置為儲存格。
語法
參數
tree_column- 一GtkTreeViewColumn
cell- A
自 2.2GtkCellRenderer
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_alignment ----

gtk_tree_view_column_get_alignment
返回tree_column的當前 x 對齊方式。此值的範圍可以介於 0.0 和 1.0 之間。
語法
參數
tree_column- 一.GtkTreeViewColumn
返回
tree_column的當前對齊點。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_button ----

gtk_tree_view_column_get_button
返回樹狀檢視列標題中使用的按鈕
語法
參數
tree_column- 一GtkTreeViewColumn
返回
列標題的按鈕。[無轉移]
自 3.0 起
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_clickable ----

gtk_tree_view_column_get_clickable
如果用戶可以按一下列的標題，則返回 TRUE。
語法
參數
tree_column- 一GtkTreeViewColumn
返回
如果用戶可以按一下列標題，則為 TRUE。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_expand ----

gtk_tree_view_column_get_expand
如果列展開以填充可用空間，則返回 TRUE。
語法
參數
tree_column- 一.GtkTreeViewColumn
返回
如果列展開以填充可用空間，則為 TRUE。
2.4 起
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_fixed_width ----

gtk_tree_view_column_get_fixed_width
獲取列的固定寬度。這可能不是列的實際顯示寬度;為此，請使用 gtk_tree_view_column_get_width（）。
語法
參數
tree_column- 一.GtkTreeViewColumn
返回
列的固定寬度。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_max_width ----

gtk_tree_view_column_get_max_width
返回tree_column的最大寬度（以圖元為單位），如果未設置最大寬度，則返回 -1。
語法
參數
tree_column- 一.GtkTreeViewColumn
返回
tree_column的最大寬度。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_min_width ----

gtk_tree_view_column_get_min_width
Returns the minimum width in pixels of the tree_column, or -1 if no minimumwidth is set.
Syntax
Parameters
tree_column  -  	A GtkTreeViewColumn.
Returns
The minimum width of the tree_column.
See Also
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_reorderable ----

gtk_tree_view_column_get_reorderable
如果用戶可以對tree_column重新排序，則返回 TRUE。
語法
參數
tree_column- 一GtkTreeViewColumn
返回
如果tree_columncan由用戶重新排序，則為 TRUE。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_resizable ----

gtk_tree_view_column_get_resizable
如果最終用戶可以調整tree_column的大小，則返回 TRUE。
語法
參數
tree_column- 一GtkTreeViewColumn
返回
TRUE，如果tree_columncan調整大小。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_sizing ----

gtk_tree_view_column_get_sizing
返回當前類型的tree_column。
語法
參數
tree_column- 一.GtkTreeViewColumn
返回
tree_column的類型。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_sort_column_id ----

gtk_tree_view_column_get_sort_column_id
獲取選擇此列進行排序時模型排序的邏輯sort_column_id。請參見 gtk_tree_view_column_set_sort_column_id（）。
語法
參數
tree_column- 一GtkTreeViewColumn
返回
當前sort_column_idfor此列，如果此列不能用於排序，則為 -1。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_sort_indicator ----

gtk_tree_view_column_get_sort_indicator
獲取由 gtk_tree_view_column_set_sort_indicator（） 設置的值。
語法
參數
tree_column- 一GtkTreeViewColumn
返回
是否顯示排序指示器箭頭
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_sort_order ----

gtk_tree_view_column_get_sort_order
獲取由 gtk_tree_view_column_set_sort_order（） 設置的值。
語法
參數
tree_column- 一GtkTreeViewColumn
返回
排序指示器指示的排序順序
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_spacing ----

gtk_tree_view_column_get_spacing
返回tree_column的間距。
語法
參數
tree_column- 一.GtkTreeViewColumn
返回
tree_column的間距。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_title ----

gtk_tree_view_column_get_title
返回小組件的標題。
語法
參數
tree_column- 一.GtkTreeViewColumn
返回
列的標題。不應修改或釋放此字串。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_tree_view ----

gtk_tree_view_column_get_tree_view
返回已插入tree_column。如果當前未在任何樹狀檢視中插入列，則返回 NULL。GtkTreeView
語法
參數
tree_column- 一GtkTreeViewColumn
返回
其中的樹狀檢視如果有任何，則插入列，否則為 NULL。[無轉移]
自 2.12 起
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_visible ----

gtk_tree_view_column_get_visible
如果tree_column可見，則返回 TRUE。
語法
參數
tree_column- 一.GtkTreeViewColumn
返回
列是否可見。如果它可見，則樹將顯示該列。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_widget ----

gtk_tree_view_column_get_widget
返回列標題上的 in 按鈕。如果尚未設置自訂小部件，則返回 NULL。GtkWidget
語法
參數
tree_column- 一.GtkTreeViewColumn
返回
列標題中的 ，或 NULL。[無轉移]GtkWidget
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_width ----

gtk_tree_view_column_get_width
返回tree_column的當前大小（以圖元為單位）。
語法
參數
tree_column- 一.GtkTreeViewColumn
返回
tree_column的當前寬度。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_x_offset ----

gtk_tree_view_column_get_x_offset
Returns the current X offset of tree_column in pixels.
Syntax
Parameters
tree_column  -  	A .GtkTreeViewColumn
Returns
The current X offset of tree_column.
Since 3.
See Also
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_new ----

gtk_tree_view_column_new
Creates a new .GtkTreeViewColumn
Returns
A newly created .GtkTreeViewColumn
See Also
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_new_with_area ----

gtk_tree_view_column_new_with_area
Creates a new  using area to render its cells.GtkTreeViewColumn
Syntax
Parameters
area  -  	the  that the newly created column should use to layout cells.GtkCellArea
Returns
A newly created .
Since 3.0GtkTreeViewColumn
See Also
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_new_with_attributes ----

gtk_tree_view_column_new_with_attributes
創建一個具有許多預設值的 new。這等效於在新創建的 上調用 gtk_tree_view_column_set_title（），gtk_tree_view_column_pack_start（）， andgtk_tree_view_column_set_attributes（）。這裡有一個簡單的例子：123456789101112[/syntax] [syntax]enum { TEXT_COLUMN， COLOR_COLUMN， N_COLUMNS };...{ GtkTreeViewColumn *column;GtkCellRenderer *renderer = gtk_cell_renderer_text_new （）;列 = gtk_tree_view_column_new_with_attributes （“標題”， 渲染器， “文本”， TEXT_COLUMN， “前景”， COLOR_COLUMN， NULL）;}[/語法]GtkTreeViewColumnGtkTreeViewColumn
語法
參數
title- 要將標題設置為的標題
cell- 的GtkCellRenderer
...- 以 NULL 結尾的屬性清單
返回
新創建的 .GtkTreeViewColumn
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_pack_end ----

gtk_tree_view_column_pack_end
將儲存格添加到列的末尾。如果 expand 為 FALSE，則分配的 cellis 的空間不超過它需要的空間。任何未使用的空間在擴展為 TRUE 的儲存格之間平均分配。
語法
參數
tree_column- 一.GtkTreeViewColumn
cell- .GtkCellRenderer
expand- 如果 cellis 被分配到分配給tree_column的額外空間，則為 TRUE。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_pack_start ----

gtk_tree_view_column_pack_start
將儲存格打包到列的開頭。如果展開為 FALSE，則為單元分配的空間不超過其所需空間。任何未使用的空間在擴展為 TRUE 的儲存格之間平均分配。
語法
參數
tree_column- 一.GtkTreeViewColumn
cell- .GtkCellRenderer
expand- 如果 cellis 被分配到分配給tree_column的額外空間，則為 TRUE。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_queue_resize ----

gtk_tree_view_column_queue_resize
標記列以及添加到此列的儲存格呈現器，以重新協商其大小。
語法
參數
tree_column- A
自 2.8 起GtkTreeViewColumn
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_alignment ----

gtk_tree_view_column_set_alignment
設置列標題內標題或自訂構件的對齊方式。對齊方式決定了它在按鈕內的位置 -- 0.0 表示左側，0.5 表示中心，1.0 表示右側。
語法
參數
tree_column- 一.GtkTreeViewColumn
xalign- 對齊方式，介於 [0.0 和 1.0] 之間（包括 [0.0 和 1.0]）。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_attributes ----

gtk_tree_view_column_set_attributes
將清單中的屬性設置為tree_column的屬性。屬性應按屬性/列順序排列，如 ingtk_tree_view_column_add_attribute（）。所有現有屬性都將被刪除，並替換為新屬性。
語法
參數
tree_column- 一GtkTreeViewColumn
cell_renderer- 我們正在設置屬性GtkCellRenderer
...- 以 NULL 結尾的屬性清單
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_cell_data_func ----

gtk_tree_view_column_set_cell_data_func
設置要用於列的 。此函數用於代替用於設置列值的標準屬性映射，並且應根據需要設置tree_column的 scell 呈現器的值。func 可以是 NULL 來刪除 anolder one。GtkTreeCellDataFunc
語法
參數
tree_column- 一GtkTreeViewColumn
cell_renderer- 一GtkCellRenderer
func- 使用。[允許-無]GtkTreeCellDataFunc
func_data- 函數的使用者資料。
destroy- func_data銷毀通知
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_clickable ----

gtk_tree_view_column_set_clickable
如果可按一下為 TRUE，則將標題設置為活動狀態。當標題處於活動狀態時，它可以採用鍵盤焦點，並且可以按一下。
語法
參數
tree_column- 一.GtkTreeViewColumn
clickable- 如果標頭處於活動狀態，則為 TRUE。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_expand ----

gtk_tree_view_column_set_expand
將列設置為佔用可用的額外空間。此空間在展開設置為 TRUE 的所有列之間平均共用。如果沒有列設置此選項，則最後一列將獲得所有額外空間。預設情況下，每個列都是使用此 FALSE 創建的。與“固定寬度”一起，“展開”當用戶調整列大小時，屬性會發生變化。
語法
參數
tree_column- 一.GtkTreeViewColumn
expand- 如果列應展開以填充可用空間，則為 TRUE。
2.4 起
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_fixed_width ----

gtk_tree_view_column_set_fixed_width
如果 fixed_width 不是 -1，則設置tree_column的固定寬度;否則取消設置它。fixed_width的有效值夾在柱的最小值和最大寬度之間;但是，存儲在“固定寬度”中的值？屬性未被夾緊。如果列大小調整為 或 ，則設置固定寬度將覆蓋自動計算的寬度。注意 thatfixed_width只是對 GTK+ 的提示;實際分配給列的寬度可能大於或小於請求的寬度。與“展開”一起，“固定寬度”當用戶調整列大小時，屬性會發生變化。GTK_TREE_VIEW_COLUMN_GROW_ONLYGTK_TREE_VIEW_COLUMN_AUTOSIZE
語法
參數
tree_column- 一.GtkTreeViewColumn
fixed_width- 新的固定寬度，以圖元為單位，或 -1。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_max_width ----

gtk_tree_view_column_set_max_width
設置tree_column的最大寬度。如果 max_width 為 -1，則未設置最大寬度。請注意，如果該列是視圖中的最後一列，則該列實際上可以比 maxwidth 寬。在這種情況下，列將展開以填充任何額外的空間。
語法
參數
tree_column- 一.GtkTreeViewColumn
max_width- 列的最大寬度（以圖元為單位）或 -1。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_min_width ----

gtk_tree_view_column_set_min_width
設置tree_column的最小寬度。如果 min_width 為 -1，則未設置最小寬度。
語法
參數
tree_column- 一.GtkTreeViewColumn
min_width- 列的最小寬度（以圖元為單位），或 -1。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_reorderable ----

gtk_tree_view_column_set_reorderable
如果可重新排序為 TRUE，則最終用戶可以對列進行重新排序。
語法
參數
tree_column- 一GtkTreeViewColumn
reorderable- TRUE，如果列可以重新排序。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_resizable ----

gtk_tree_view_column_set_resizable
如果可調整大小為 TRUE，則用戶可以通過抓取列按鈕的外邊緣來顯式調整列的大小。如果可調整大小為 TRUE 並且列的大小調整模式為 ，則大小調整模式更改為 。GTK_TREE_VIEW_COLUMN_AUTOSIZEGTK_TREE_VIEW_COLUMN_GROW_ONLY
語法
參數
tree_column- 一GtkTreeViewColumn
resizable- TRUE，如果列可以調整大小
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_sizing ----

gtk_tree_view_column_set_sizing
將tree_column的增長行為設置為類型。
語法
參數
tree_column- 一.GtkTreeViewColumn
type- .GtkTreeViewColumnSizing
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_sort_column_id ----

gtk_tree_view_column_set_sort_column_id
設置選擇此列進行排序時此列排序的邏輯sort_column_id。這樣做會使列標題可按一下。
語法
參數
tree_column- 一GtkTreeViewColumn
sort_column_id- sort_column_idof模型進行排序。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_sort_indicator ----

gtk_tree_view_column_set_sort_indicator
使用 TRUE 設置調用此函數，以在標題按鈕中顯示一個箭頭，指示該列已排序。Callgtk_tree_view_column_set_sort_order（） 以更改箭頭的方向。
語法
參數
tree_column- 一GtkTreeViewColumn
setting- TRUE 可顯示列已排序的指示器
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_sort_order ----

gtk_tree_view_column_set_sort_order
更改排序指示器的外觀。這實際上並沒有對模型進行排序。Usegtk_tree_view_column_set_sort_column_id（） 如果您想要自動排序支持。此函數主要用於自訂排序行為，應與 gtk_tree_sortable_set_sort_column_id（） to dothat 結合使用。對於自訂模型，機制會有所不同。排序指示器更改方向以指示正常排序或反向排序。請注意，在調用此函數時，您必須啟用排序指示器才能看到任何內容;見gtk_tree_view_column_set_sort_indicator（）。
語法
參數
tree_column- 一GtkTreeViewColumn
order- 排序指示器應指示的排序順序
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_spacing ----

gtk_tree_view_column_set_spacing
設置tree_column的間距欄位，該欄位是要在填充到其中的儲存格渲染器之間放置的圖元數。
語法
參數
tree_column- 一.GtkTreeViewColumn
spacing- 儲存格渲染器之間的距離（以圖元為單位）。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_title ----

gtk_tree_view_column_set_title
設置tree_column的標題。如果已設置自訂微件，則忽略此值。
語法
參數
tree_column- 一.GtkTreeViewColumn
title- tree_column的標題。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_visible ----

gtk_tree_view_column_set_visible
設置tree_column的可見性。
語法
參數
tree_column- 一.GtkTreeViewColumn
visible- 如果tree_columnis可見，則為 true。
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_widget ----

gtk_tree_view_column_set_widget
將頁眉中的構件設置為構件。如果構件為 NULL，則標題按鈕設置為 tree_column 的標題。GtkLabel
語法
參數
tree_column- 一.GtkTreeViewColumn
widget- 子項 ，或 NULL。[允許-無]GtkWidget
另請參見
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_convert_bin_window_to_tree_coords ----

gtk_tree_view_convert_bin_window_to_tree_coords
bin_window座標轉換為樹（樹的完整可滾動區域）的座標。
語法
參數
tree_view- 一GtkTreeView
bx- X 座標相對於bin_window
by- Y 座標相對於bin_window
tx- 返回樹 X 座標的位置。[輸出]
ty- 返回樹 Y 座標的位置。[輸出]
自 2.12 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_convert_bin_window_to_widget_coords ----

gtk_tree_view_convert_bin_window_to_widget_coords
bin_window座標（請參見 gtk_tree_view_get_bin_window（）） 轉換為微件相對座標。
語法
參數
tree_view- 一GtkTreeView
bx- bin_window X 座標
by- bin_window Y座標
wx- 返回小部件X座標的位置。[輸出]
wy- 返回小部件Y座標的位置。[輸出]
自 2.12 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_convert_tree_to_bin_window_coords ----

gtk_tree_view_convert_tree_to_bin_window_coords
將樹座標（樹的完全可滾動區域中的座標）轉換為bin_window座標。
語法
參數
tree_view- 一GtkTreeView
tx- 樹 X 座標
ty- 樹 Y 座標
bx- X座標相對於bin_window的返回位置。[輸出]
by- Y 座標相對於bin_window的返回位置。[輸出]
自 2.12 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_convert_tree_to_widget_coords ----

gtk_tree_view_convert_tree_to_widget_coords
將樹座標（樹的完全可滾動區域中的座標）轉換為微件座標。
語法
參數
tree_view- 一GtkTreeView
tx- X 座標相對於樹
ty- 相對於樹的Y座標
wx- 返回小部件X座標的位置。[輸出]
wy- 返回小部件Y座標的位置。[輸出]
自 2.12 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_convert_widget_to_bin_window_coords ----

gtk_tree_view_convert_widget_to_bin_window_coords
將微件座標轉換為bin_window的座標（請參見gtk_tree_view_get_bin_window（））。
語法
參數
tree_view- 一GtkTreeView
wx- X座標相對於小部件
wy- 相對於小部件的 Y 座標
bx- 返回bin_window X 座標的位置。[輸出]
by- 返回bin_window Y 座標的位置。[輸出]
自 2.12 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_convert_widget_to_tree_coords ----

gtk_tree_view_convert_widget_to_tree_coords
將構件座標轉換為樹（樹的完整可滾動區域）的座標。
語法
參數
tree_view- 一GtkTreeView
wx- X座標相對於小部件
wy- 相對於小部件的 Y 座標
tx- 返回樹 X 座標的位置。[輸出]
ty- 返回樹 Y 座標的位置。[輸出]
自 2.12 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_create_row_drag_icon ----

gtk_tree_view_create_row_drag_icon
創建行在路徑處的表示形式。此圖像用於拖動圖示。cairo_surface_t
語法
參數
tree_view- 一GtkTreeView
path- tree_viewGtkTreePath
返回
拖動圖示的新分配曲面。[轉移完整]
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_enable_model_drag_dest ----

gtk_tree_view_enable_model_drag_dest
將tree_view轉換為自動 DND 的放置目的地。調用此方法設置為 FALSE。?reorderable?
語法
參數
tree_view- 一GtkTreeView
targets- 拖動將支援的目標表。[陣列長度 = n_targets]
n_targets- 目標中的專案數
actions- 從這個小夥伴拖動的可能操作的位元遮罩
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_enable_model_drag_source ----

gtk_tree_view_enable_model_drag_source
將tree_view轉換為自動 DND 的拖動源。調用此方法設置為 FALSE。?reorderable?
語法
參數
tree_view- 一GtkTreeView
start_button_mask- 允許按鈕開始拖動的遮罩
targets- 拖動將支援的目標表。[陣列長度 = n_targets]
n_targets- 目標中的專案數
actions- 從這個小夥伴拖動的可能操作的位元遮罩
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_expand_all ----

gtk_tree_view_expand_all
遞迴展開tree_view中的所有節點。
語法
參數
tree_view- 一.GtkTreeView
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_expand_row ----

gtk_tree_view_expand_row
打開該行，使其子項可見。
語法
參數
tree_view- 一GtkTreeView
path- 行的路徑
open_all- 是遞迴擴展，還是僅擴展直系子項
返回
如果該行存在且具有子項，則為 TRUE
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_expand_to_path ----

gtk_tree_view_expand_to_path
在路徑處展開行。這還將根據需要展開路徑的所有父行。
語法
參數
tree_view- 一.GtkTreeView
path- 行的路徑。
自 2.2 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_activate_on_single_click ----

gtk_tree_view_get_activate_on_single_click
獲取由 gtk_tree_view_set_activate_on_single_click（） 設置的設置。
語法
參數
tree_view- 一GtkTreeView
返回
如果行啟動將在按一下
時發出 TRUE，則為 TRUE，因為 3.8
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_background_area ----

gtk_tree_view_get_background_area
用由路徑指定的行處的儲存格和由列指定的列的bin_window座標填充邊界矩形。如果 path 為 NULL，或者指向樹中找不到的節點，則矩形的 y 和高度欄位將填充為 0。如果列為 NULL，則 x 和寬度欄位將填充為 0。返回的矩形等效於傳遞給gtk_cell_renderer_render（） thebackground_area。這些背景區域磁貼用於覆蓋整個條柱視窗。與cell_area相反，由gtk_tree_view_get_cell_area（）返回，它僅返回大提琴本身，不包括周圍的邊界和樹擴展器區域。
語法
參數
tree_view- 一GtkTreeView
path- a 表示行，或 NULL 僅獲取水準座標。[允許-無]GtkTreePath
column- a 表示列，或 NULL 僅獲取垂直座標。[允許-無]GtkTreeViewColumn
rect- 矩形填充儲存格背景矩形。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_bin_window ----

gtk_tree_view_get_bin_window
返回tree_view呈現到的窗口。這主要用於與事件>視窗進行比較，以確認tree_view上的事件位於正確的窗口中。
語法
參數
tree_view- 一GtkTreeView
返回
A 或 NULL（當tree_viewhasn尚未實現時）。[無轉移]GdkWindow
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_cell_area ----

gtk_tree_view_get_cell_area
用由路徑指定的行處的儲存格和由列指定的列的bin_window座標填充邊界矩形。如果 path 是 NULL，或者指向當前未顯示的路徑，則矩形的 y 和高度欄位將填充 0。如果列為 NULL，則 x 和寬度欄位將填充為 0。所有儲存格矩形的總和不覆蓋集合樹;例如，行與行之間有額外的圖元。此處的矩形等效於傳遞togtk_cell_renderer_render（） cell_area。僅當tree_view實現時，此函數才有效。
語法
參數
tree_view- 一GtkTreeView
path- a 表示行，或 NULL 僅獲取水準座標。[允許-無]GtkTreePath
column- a 表示列，或 NULL 僅獲取垂直座標。[允許-無]GtkTreeViewColumn
rect- 矩形填充儲存格矩形。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_column ----

gtk_tree_view_get_column
獲取 中給定位置的 。GtkTreeViewColumntree_view
語法
參數
tree_view- 一.GtkTreeView
n- 列的位置，從 0 開始計數。
返回
如果位置超出列的範圍，則為 NULL。[無轉移]GtkTreeViewColumn
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_columns ----

gtk_tree_view_get_columns
返回當前處於tree_view中的所有 s 的 a。必須使用 g_list_free（） 釋放返回的列表。GListGtkTreeViewColumn
語法
參數
tree_view- 一GtkTreeView
返回
[元素類型 GtkTreeViewColumn] [傳輸容器] 的列表GtkTreeViewColumn
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_cursor ----

gtk_tree_view_get_cursor
使用當前路徑和焦點列填充路徑和focus_column。如果當前未設置游標，則 *path 將為 NULL。如果當前沒有列具有焦點，則 *focus_column 將為 NULL。當你完成時，返回的必須用gtk_tree_path_free（）釋放它。GtkTreePath
語法
參數
tree_view- 一GtkTreeView
path- 要用當前游標路徑填充的指標，或 NULL。[輸出][轉移完整][允許-無]
focus_column- 要用當前焦點列填充的指針，或 NULL。[輸出][無轉移][允許-無]
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_dest_row_at_pos ----

gtk_tree_view_get_dest_row_at_pos
確定給定位置的目標行。drag_x anddrag_y應位於小部件座標中。僅當實現tree_view時，此功能才有意義。因此，如果tree_view未實現或沒有模型，則此函數將始終返回 FALSE。
語法
參數
tree_view- 一GtkTreeView
drag_x- 確定目標行的位置
drag_y- 確定目標行的位置
path- 返回突出顯示行的路徑的位置，或 NULL。[輸出][允許-無]
pos- 返回放置位置的位置，或 NULL。[輸出][允許-無]
返回
在給定位置是否有一行，如果確實是這種情況，則為 TRUE。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_drag_dest_row ----

gtk_tree_view_get_drag_dest_row
獲取有關為回饋突出顯示的行的資訊。
語法
參數
tree_view- 一GtkTreeView
path- 返回突出顯示行的路徑的位置，或 NULL。[輸出][允許-無]
pos- 返回放置位置的位置，或 NULL。[輸出][允許-無]
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_enable_search ----

gtk_tree_view_get_enable_search
返回樹是否允許通過鍵入文本來啟動互動式搜索。
語法
參數
tree_view- 一GtkTreeView
返回
是否讓用戶以對話模式搜索
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_enable_tree_lines ----

gtk_tree_view_get_enable_tree_lines
返回樹線是否在tree_view繪製。
語法
參數
tree_view- 一個.GtkTreeView
返回
如果樹線是用tree_view繪製的，則為 TRUE。
自 2.10 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_expander_column ----

gtk_tree_view_get_expander_column
返回作為當前展開器列的列。此列旁邊繪製了展開箭頭。
語法
參數
tree_view- 一GtkTreeView
返回
展開器列。[無轉移]
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_fixed_height_mode ----

gtk_tree_view_get_fixed_height_mode
返回是否為tree_view打開固定高度模式。
語法
參數
tree_view- 一GtkTreeView
返回
如果tree_viewis固定高度模式下
為 TRUE，因為 2.6
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_grid_lines ----

gtk_tree_view_get_grid_lines
返回在tree_view中啟用了哪些格線。
語法
參數
tree_view- 一GtkTreeView
返回
指示啟用了哪些格線的值。
自 2.10 起GtkTreeViewGridLines
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_hadjustment ----

gtk_tree_view_get_hadjustment
gtk_tree_view_get_hadjustment自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_scrollable_get_hadjustment（）獲取當前用於水準方面的值。GtkAdjustment
語法
參數
tree_view- 一GtkTreeView
返回
物件或 NULLif 當前未使用。[無轉移]GtkAdjustment
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_headers_clickable ----

gtk_tree_view_get_headers_clickable
返回所有標題列是否都可按一下。
語法
參數
tree_view- 一.GtkTreeView
返回
如果所有標題列都可按一下，則為 TRUE，否則為 FALSE
自 2.10 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_headers_visible ----

gtk_tree_view_get_headers_visible
如果tree_view上的標頭可見，則返回 TRUE。
語法
參數
tree_view- 一.GtkTreeView
返回
標頭是否可見。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_hover_expand ----

gtk_tree_view_get_hover_expand
返回是否為tree_view打開懸停擴展模式。
語法
參數
tree_view- 一GtkTreeView
返回
如果tree_viewis處於懸停擴展模式
，則為 TRUE，因為 2.6
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_hover_selection ----

gtk_tree_view_get_hover_selection
返回是否為tree_view打開懸停選擇模式。
語法
參數
tree_view- 一GtkTreeView
返回
如果tree_viewis懸停選擇模式
，則為 TRUE，因為 2.6
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_level_indentation ----

gtk_tree_view_get_level_indentation
返回子色階的額外縮進量（以圖元為單位）tree_view。
語法
參數
tree_view- 一個.GtkTreeView
返回
子級別的額外縮進量intree_view。返回值為 0 表示此功能已禁用。
自 2.12 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_model ----

gtk_tree_view_get_model
返回 所基於的模型。如果未設置模型，則返回 NULL。GtkTreeView
語法
參數
tree_view- 一GtkTreeView
返回
A 或 NULL（如果當前未使用任何項）。[無轉移]GtkTreeModel
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_n_columns ----

gtk_tree_view_get_n_columns
查詢給定tree_view中的列數。
語法
參數
tree_view- 一GtkTreeView
返回
自 3.4
以來tree_view中的列數
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_path_at_pos ----

gtk_tree_view_get_path_at_pos
查找點 （x， y） 相對於bin_window座標的路徑（請參閱gtk_tree_view_get_bin_window（））。也就是說，x 和 y 是相對於事件座標的。x 和 y 必須從tree_view的事件中產生，僅當事件>窗口 ==gtk_tree_view_get_bin_window（）。它主要是像彈出功能表一樣的輸出。如果 path 為非 NULL，則將在該點填充 。此路徑應withgtk_tree_path_free（） 釋放。如果列為非 NULL，則它將在該點用該列填充。cell_x和cell_y返回與儲存格背景相關的座標（即傳遞togtk_cell_renderer_render（））background_area）。僅當實現iftree_view，此功能才有意義。因此，如果tree_view未實現或沒有模型，此函數將始終返回 FALSEif。要轉換小部件座標（例如，您從GtkWidget：：query-tooltip獲得的座標），請seegtk_tree_view_convert_widget_to_bin_window_coords（）。GtkTreePath
語法
參數
tree_view- 一.GtkTreeView
x- 要識別的 x 位置（相對於bin_window）。
y- 要識別的 y 位置（相對於bin_window）。
path- 指向要填充的指標的指標，或 NULL。[輸出][允許-無]GtkTreePath
column- 指向要填充的指標的指標，或 NULL。[輸出][無轉移][允許-無]GtkTreeViewColumn
cell_x- 一個指標，其中 X 座標相對於儲存格可以放置，或 NULL。[輸出][允許-無]
cell_y- 一個指標，其中可以放置相對於儲存格的 Y 座標，或 NULL。[輸出][允許-無]
返回
如果該座標處存在行，則為 TRUE。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_reorderable ----

gtk_tree_view_get_reorderable
檢索用戶是否可以通過拖放對樹重新排序。Seegtk_tree_view_set_reorderable（）.
語法
參數
tree_view- 一GtkTreeView
返回
如果樹可以重新排序，則為 TRUE。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_row_separator_func ----

gtk_tree_view_get_row_separator_func
返回當前行分隔符號函數。
語法
參數
tree_view- 一GtkTreeView
返回
當前行分隔符號函數。
自 2.6 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_rubber_banding ----

gtk_tree_view_get_rubber_banding
返回是否為tree_view打開橡皮筋。如果選擇模式為 ，橡皮筋將允許使用者通過拖動滑鼠來選擇多行。GTK_SELECTION_MULTIPLE
語法
參數
tree_view- 一GtkTreeView
返回
如果啟用了tree_viewis中的橡皮筋，則為 TRUE。
自 2.10 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_rules_hint ----

gtk_tree_view_get_rules_hint
獲取由 gtk_tree_view_set_rules_hint（） 設置的設置。
語法
參數
tree_view- 一GtkTreeView
返回
如果規則對此樹的使用者有用，則為 TRUE
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_search_column ----

gtk_tree_view_get_search_column
獲取互動式搜索代碼搜索的列。
語法
參數
tree_view- 一GtkTreeView
返回
互動式搜索代碼在其中搜索的列。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_search_entry ----

gtk_tree_view_get_search_entry
返回當前用作tree_view互動式搜索的 it。如果正在使用內置條目，將返回 NULL。GtkEntry
語法
參數
tree_view- 一GtkTreeView
返回
當前用作搜索條目的條目。[無轉移]
自 2.10 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_search_equal_func ----

gtk_tree_view_get_search_equal_func
返回當前正在使用的比較函數。
語法
參數
tree_view- 一GtkTreeView
返回
當前用於搜索代碼的比較函數。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_search_position_func ----

gtk_tree_view_get_search_position_func
返回當前正在使用的定位函數。
語法
參數
tree_view- 一GtkTreeView
返回
當前用於定位搜索對話方塊的函數。
自 2.10 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_selection ----

gtk_tree_view_get_selection
獲取與tree_view關聯的。GtkTreeSelection
語法
參數
tree_view- 一.GtkTreeView
返回
對象。[無轉移]GtkTreeSelection
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_show_expanders ----

gtk_tree_view_get_show_expanders
返回是否在tree_view中繪製展開器。
語法
參數
tree_view- 一個.GtkTreeView
返回
如果擴展器是用tree_view繪製的，則為 TRUE。
自 2.12 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_tooltip_column ----

gtk_tree_view_get_tooltip_column
Returns the column of tree_view?s model which is being used fordisplaying tooltips on tree_view?s rows.
Syntax
Parameters
tree_view  -  	a GtkTreeView
Returns
the index of the tooltip column that is currently beingused, or -1 if this is disabled.
Since 2.12
See Also
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_tooltip_context ----

gtk_tree_view_get_tooltip_context
This function is supposed to be used in a signal handler for .  The x, y and keyboard_tip valueswhich are received in the signal handler, should be passed to thisfunction without modification.The return value indicates whether there is a tree view row at the givencoordinates (TRUE) or not (FALSE) for mouse tooltips.  For keyboardtooltips the row returned will be the cursor row.  When TRUE, then any ofmodel, path and iter which have been provided will be set to point tothat row and the corresponding model.  x and y will always be convertedto be relative to tree_view?s bin_window if keyboard_tooltip is FALSE.?query-tooltip?GtkTreeView
Syntax
Parameters
tree_view  -  	a GtkTreeView
x  -  	 the x coordinate (relative to widget coordinates). [inout]
y  -  	 the y coordinate (relative to widget coordinates). [inout]
keyboard_tip  -  	whether this is a keyboard tooltip or not
model  -  	 a pointer to receive a or NULL. [out][allow-none][transfer none]GtkTreeModel
path  -  	 a pointer to receive a  or NULL. [out][allow-none]GtkTreePath
iter  -  	 a pointer to receive a  or NULL. [out][allow-none]GtkTreeIter
Returns
whether or not the given tooltip context points to a row.
Since 2.12
See Also
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_vadjustment ----

gtk_tree_view_get_vadjustment
gtk_tree_view_get_vadjustment has been deprecated since version 3.0 and should not be used in newly-written code.Use gtk_scrollable_get_vadjustment()Gets the  currently being used for the vertical aspect.GtkAdjustment
Syntax
Parameters
tree_view  -  	A GtkTreeView
Returns
A  object, or NULLif none is currently being used. [transfer none]GtkAdjustment
See Also
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_visible_range ----

gtk_tree_view_get_visible_range
將start_path和end_path設置為第一個和最後一個可見路徑。請注意，中間可能存在不可見的路徑。使用後應使用gtk_tree_path_free（） 釋放路徑。
語法
參數
tree_view- 一GtkTreeView
start_path- 返回區域開始的位置，或空。[輸出][允許-無]
end_path- 返回區域末尾的位置，或 NULL。[輸出][允許-無]
返回
如果有效路徑已放置在start_pathand end_path中，則為 TRUE。
自 2.8 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_visible_rect ----

gtk_tree_view_get_visible_rect
以樹座標用緩衝區的當前可見區域填滿visible_rect。轉換為bin_window座標 withgtk_tree_view_convert_tree_to_bin_window_coords（）。樹座標從樹的第 0 行的 0，0 開始，並覆蓋樹的整個可滾動區域。
語法
參數
tree_view- 一GtkTreeView
visible_rect- 矩形填充。[輸出]
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_insert_column ----

gtk_tree_view_insert_column
這會將列插入到tree_view位置。如果位置為-1，則將列插入到末尾。如果tree_view有？fixed_height？模式啟用，則列必須具有其大小調整？要GTK_TREE_VIEW_COLUMN_FIXED的屬性集。
語法
參數
tree_view- 一.GtkTreeView
column- 要插入的。GtkTreeViewColumn
position- 插入列的位置。
返回
插入tree_viewafter列數。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_insert_column_with_attributes ----

gtk_tree_view_insert_column_with_attributes
創建一個新的並將其插入到tree_view位置。如果位置為 -1，則新創建的列將插入到末尾。該列使用給定的屬性進行初始化。如果tree_viewhas？fixed_height？模式啟用，則新列的尺寸屬性將設置為GTK_TREE_VIEW_COLUMN_FIXED。GtkTreeViewColumn
語法
參數
tree_view- 一GtkTreeView
position- 插入新列的位置
title- 要將標題設置為的標題
cell- 的GtkCellRenderer
...- 以 NULL 結尾的屬性清單
返回
插入tree_viewafter列數。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_insert_column_with_data_func ----

gtk_tree_view_insert_column_with_data_func
方便函數，將新列插入到具有給定儲存格渲染器的 中，並設置儲存格渲染器屬性（通常使用模型中的資料）。參見 alsogtk_tree_view_column_set_cell_data_func（）， gtk_tree_view_column_pack_start（）。如果tree_view有fixed_height？模式啟用，那麼新列將具有其大小？屬性設置為GTK_TREE_VIEW_COLUMN_FIXED。GtkTreeViewGtkTreeCellDataFunc
語法
參數
tree_view- 一GtkTreeView
position- 要插入的位置，-1 用於追加
title- 列標題
cell- 列的儲存格渲染器
func- 設置儲存格渲染器屬性的功能
data- 函數的資料
dnotify- 銷毀資料通知程式
返回
插入後樹狀檢視中的列數
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_is_blank_at_pos ----

gtk_tree_view_is_blank_at_pos
確定tree_view中的點 （x， y） 是否為空，即 nocell 內容，也不是在該位置繪製擴展器箭頭。如果是這樣，則可以將位置視為背景。您可能希望對按一下背景時執行特殊操作，例如清除當前選擇、使用自訂上下文功能表或啟動橡皮筋。提供的 x 和 y 座標必須相對於bin_windowcoordinates。也就是說，x 和 y 必須來自tree_viewwhere事件>window == gtk_tree_view_get_bin_window（） 上的事件。要轉換小部件座標（例如，您從GtkWidget：：query-tooltip獲得的座標），請seegtk_tree_view_convert_widget_to_bin_window_coords（）。路徑、列、cell_x和cell_y參數將像gtk_tree_view_get_path_at_pos（） 一樣填充。有關更多資訊，seegtk_tree_view_get_path_at_pos（）。
語法
參數
tree_view- 一GtkTreeView
x- 要識別的 x 位置（相對於bin_window）
y- 要識別的 y 位置（相對於bin_window）
path- 指向要填充的指標的指標，或 NULL。[輸出][允許-無]GtkTreePath
column- 指向要填充的指標的指標，或 NULL。[輸出][允許-無]GtkTreeViewColumn
cell_x- 一個指標，其中 X 座標相對於儲存格可以放置，或 NULL。[輸出][允許-無]
cell_y- 一個指標，其中可以放置相對於儲存格的 Y 座標，或 NULL。[輸出][允許-無]
返回
如果給定座標處的面積為空，則為 TRUE，否則為 FALSE。
自 3.0 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_is_rubber_banding_active ----

gtk_tree_view_is_rubber_banding_active
返回tree_view當前是否正在執行橡皮筋操作。
語法
參數
tree_view- 一GtkTreeView
返回
如果tree_view中當前正在執行橡皮筋操作，則為 TRUE。
自 2.12 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_map_expanded_rows ----

gtk_tree_view_map_expanded_rows
對所有展開的行調用 func。
語法
參數
tree_view- 一GtkTreeView
func- 要調用的函數。[範圍調用]
data- 要傳遞給函數的使用者資料。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_move_column_after ----

gtk_tree_view_move_column_after
將列移動到後面以base_column。如果base_column為 NULL，則將列放在第一個位置。
語法
參數
tree_view- 一GtkTreeView
column- 要移動的。GtkTreeViewColumn
base_column- 要相對於 或 NULL 移動。[允許-無]GtkTreeViewColumn
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_new ----

gtk_tree_view_new
創建新的構件。GtkTreeView
返回
新創建的小部件。GtkTreeView
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_new_with_model ----

gtk_tree_view_new_with_model
創建一個新小元件，並將模型初始化為模型。GtkTreeView
語法
參數
model- 模型。
返回
新創建的小部件。GtkTreeView
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_remove_column ----

gtk_tree_view_remove_column
從tree_view中刪除列。
語法
參數
tree_view- 一.GtkTreeView
column- 要刪除。GtkTreeViewColumn
返回
刪除tree_viewafter中的列數。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_row_activated ----

gtk_tree_view_row_activated
啟動由路徑和列確定的儲存格。
語法
參數
tree_view- 一GtkTreeView
path- 要啟動的。GtkTreePath
column- 要啟動的。GtkTreeViewColumn
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_row_expanded ----

gtk_tree_view_row_expanded
如果路徑所指向的節點在tree_view中展開，則返回 TRUE。
語法
參數
tree_view- 一.GtkTreeView
path- A 用於測試擴展狀態。GtkTreePath
返回
如果展開，則為 TRUE。path
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_scroll_to_cell ----

gtk_tree_view_scroll_to_cell
將tree_view的對齊方式移動到列和路徑指定的位置。如果列為 NULL，則不會發生水準滾動。同樣，如果路徑為 NULL，則不會發生垂直捲動。列或路徑之一至少需要為非 NULL。row_align確定行的放置位置，col_align確定列的放置位置。預計兩者都在0.0和1.0之間。0.0 表示左/上對齊，1.0 表示右/下對齊，0.5 表示居中。如果use_align為 FALSE，則將忽略對齊參數，並且樹將執行最少的工作量以將儲存格滾動到螢幕上。這意味著儲存格將滾動到最接近其當前位置的邊緣。如果儲存格當前在螢幕上可見，則不執行任何操作。僅當設置了模型，並且 path 是模型上的有效行時，此函數才有效。如果模型在實現tree_view之前發生更改，則將修改居中路徑以反映此更改。
語法
參數
tree_view- 一.GtkTreeView
path- 要移動到的行的路徑，或 NULL。[允許-無]
column- 水準移動到 或 NULL。[允許-無]GtkTreeViewColumn
use_align- 是使用對齊參數，還是 FALSE。
row_align- 由路徑指定的行的垂直對齊方式。
col_align- 列指定的列的水準對齊方式。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_scroll_to_point ----

gtk_tree_view_scroll_to_point
滾動樹狀檢視，使可見區域的左上角tree_x，tree_y，其中tree_x和tree_y是指定的樹座標。在調用此函數之前，必須實現tree_view。如果不是，您可能希望使用gtk_tree_view_scroll_to_cell（）。如果tree_x或tree_y為 -1，則不會滾動該方向。
語法
參數
tree_view- 一GtkTreeView
tree_x- 可見區域左上角新圖元的 X 座標，或 -1
tree_y- 可見區域左上角新圖元的 Y 座標，或 -1
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_activate_on_single_click ----

gtk_tree_view_set_activate_on_single_click
使信號在按一下時發出，而不是按兩下。?row-activated?
語法
參數
tree_view- 一GtkTreeView
single- TRUE 在一次按一下
時發出行啟動自 3.8
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_column_drag_function ----

gtk_tree_view_set_column_drag_function
設置一個使用者函數，用於確定在放置列時可以放置列的位置。在開始列拖動時，依次在每個列對上調用此函數，以確定可以發生拖放的位置。傳遞給func的論據是：tree_view，被dragged，確定掉落點的兩個s，anduser_data。如果放置點的任一參數為 NULL，則它們指示邊緣。如果 func 設置為 NULL，thentree_view將恢復為允許所有列在所有位置都被刪除的默認行為。GtkTreeViewColumnGtkTreeViewColumnGtkTreeViewColumn
語法
參數
tree_view- 一.GtkTreeView
func- 用於確定哪些列可重新排序的函數，或 NULL。[允許-無]
user_data- 要傳遞給 func 或 NULL 的使用者資料。[允許-無]
destroy- 銷毀user_data的通告程式，或 NULL。[允許-無]
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_cursor ----

gtk_tree_view_set_cursor
將當前鍵盤焦點設置為路徑，然後選擇它。當您希望將用戶的注意力集中在特定行上時，這是有用的。Iffocus_column不為 NULL，則焦點將分配給它指定的列。此外，如果指定了focus_column，並且start_editing為 TRUE，則應在指定的儲存格中開始編輯。此功能後面通常跟有gtk_widget_grab_focus（tree_view），以便為小部件提供鍵盤焦點。請注意，只有在實現小部件時才能進行編輯。如果 path 對模型無效，則將取消設置當前游標（如果有），並且函數將返回而不會失敗。
語法
參數
tree_view- 一GtkTreeView
path- 一GtkTreePath
focus_column- A 或空值。[允許-無]GtkTreeViewColumn
start_editing- 如果指定的儲存格應開始編輯，則為 TRUE。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_cursor_on_cell ----

gtk_tree_view_set_cursor_on_cell
將當前鍵盤焦點設置為路徑，然後選擇它。當您希望將用戶的注意力集中在特定行上時，這是有用的。Iffocus_column不為 NULL，則焦點將分配給由it指定的列。如果focus_column和focus_cell不為 NULL，並且focus_columncontains 2 個或更多個可編輯或可啟動的儲存格，則焦點將分配給focus_cell指定的儲存格。此外，如果指定focus_column，並且start_editing為 TRUE，則應在指定的儲存格中開始編輯。此功能通常遵循bygtk_widget_grab_focus（tree_view），以便為widget提供鍵盤焦點。請注意，只有在實現小部件時，才能進行編輯。如果 path 對模型無效，則將取消設置當前游標（如果有），並且函數將返回而不會失敗。
語法
參數
tree_view- 一GtkTreeView
path- 一GtkTreePath
focus_column- A 或空值。[允許-無]GtkTreeViewColumn
focus_cell- A 或空值。[允許-無]GtkCellRenderer
start_editing- 如果指定的儲存格應開始編輯，則為 TRUE。
自 2.2 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_destroy_count_func ----

gtk_tree_view_set_destroy_count_func
gtk_tree_view_set_destroy_count_func自 3.4 版起已棄用，不應在新編寫的代碼中使用。協助工具不再需要該功能。幾乎永遠不要使用此功能。它由 ATK 供私人使用，用於確定在用戶折疊一行或刪除一行時刪除的可見子項的數量。
語法
參數
tree_view- 一GtkTreeView
func- 視圖行被銷毀時要調用的函數，或 NULL。[允許-無]
data- 要傳遞給 func 或 NULL 的使用者資料。[允許-無]
destroy- 銷毀資料的通知程式，或 NULL。[允許-無]
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_drag_dest_row ----

gtk_tree_view_set_drag_dest_row
設置為回饋突出顯示的行。如果 path 為 NULL，則刪除現有突出顯示。
語法
參數
tree_view- 一GtkTreeView
path- 要突出顯示的行的路徑，或 NULL。[允許-無]
pos- 指定是在行之前、之後還是之後放置
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_enable_search ----

gtk_tree_view_set_enable_search
如果設置了enable_search，則使用者可以鍵入文本以對話模式在樹中搜索（這有時稱為“鍵入前查找”）。請注意，即使這是 FALSE，用戶仍然可以使用 “start-interactive-search？鍵綁定。
語法
參數
tree_view- 一GtkTreeView
enable_search- TRUE，如果用戶可以互動式搜索
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_enable_tree_lines ----

gtk_tree_view_set_enable_tree_lines
設置是否繪製連接tree_view中擴展器的線。這對列表沒有任何可見的影響。
語法
參數
tree_view- 一GtkTreeView
enabled- TRUE 啟用樹線繪製，否則為 FALSE。
自 2.10 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_expander_column ----

gtk_tree_view_set_expander_column
設置要在其上繪製擴展器箭頭的列。它必須tree_view。如果列為 NULL，則展開器箭頭始終位於第一個可見列處。如果不希望展開器箭頭出現在樹中，請將展開器列設置為隱藏列。
語法
參數
tree_view- 一GtkTreeView
column- NULL，或要在其上繪製擴展器箭頭的列。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_fixed_height_mode ----

gtk_tree_view_set_fixed_height_mode
啟用或禁用tree_view的固定高度模式。固定高度模式通過假定所有行具有相同的高度來加快速度。僅當所有行的高度都相同且所有列的類型均為 GTK_TREE_VIEW_COLUMN_FIXED時，才啟用此選項。GtkTreeView
語法
參數
tree_view- 一GtkTreeView
enable- TRUE 啟用固定高度模式
，自 2.6 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_grid_lines ----

gtk_tree_view_set_grid_lines
設置要在tree_view繪製的格線。
語法
參數
tree_view- 一GtkTreeView
grid_lines- 指示哪些格線可啟用的值。
自 2.10 起GtkTreeViewGridLines
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_hadjustment ----

gtk_tree_view_set_hadjustment
gtk_tree_view_set_hadjustment自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_scrollable_set_hadjustment（）設置當前水準寬高比的 。GtkAdjustment
語法
參數
tree_view- 一GtkTreeView
adjustment- 要設置的，或空。[允許-無]GtkAdjustment
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_headers_clickable ----

gtk_tree_view_set_headers_clickable
允許按一下列標題按鈕。
語法
參數
tree_view- 一.GtkTreeView
setting- 如果列可按一下，則為 TRUE。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_headers_visible ----

gtk_tree_view_set_headers_visible
設置標頭的可見性狀態。
語法
參數
tree_view- 一.GtkTreeView
headers_visible- 如果標題可見，則為 TRUE
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_hover_expand ----

gtk_tree_view_set_hover_expand
啟用或禁用tree_view的懸停擴展模式。懸停擴展使行在指針移到行上方時會展開或折疊。
語法
參數
tree_view- 一GtkTreeView
expand- TRUE 啟用懸停選擇模式
，自 2.6 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_hover_selection ----

gtk_tree_view_set_hover_selection
啟用或禁用tree_view的懸停選擇模式。懸停選擇使所選行跟隨指針。目前，這僅適用於GTK_SELECTION_SINGLE和GTK_SELECTION_BROWSE選擇模式。
語法
參數
tree_view- 一GtkTreeView
hover- TRUE 啟用懸停選擇模式
，自 2.6 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_level_indentation ----

gtk_tree_view_set_level_indentation
除默認縮進外，設置子級別在tree_viewin中使用的額外縮進量。該值應以圖元為單位指定，值為 0 將禁用此功能，在這種情況下，將僅使用默認縮進。這對列表沒有任何可見的影響。
語法
參數
tree_view- 一GtkTreeView
indentation- tree_view中額外縮進的數量（以圖元為單位）。
自 2.12 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_model ----

gtk_tree_view_set_model
設置 的模型。如果tree_view已有模型集，則會在設置新模型之前將其刪除。如果模型為 NULL，則將取消設置舊模型。GtkTreeView
語法
參數
tree_view- 一.GtkTreeView
model- 模型。[允許-無]
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_reorderable ----

gtk_tree_view_set_reorderable
此函數是一個方便的函數，允許您對支援 和 的模型進行重新排序。兩者兼而有之，支持這些。如果可重新排序為 TRUE，則用戶可以通過拖放行來對模型進行重新排序。開發人員可以通過連接到模型和信號來收聽這些變化。通過將樹狀檢視設置為拖動源和目標來實現重新排序。因此，拖放不能在可重新排序的視圖中用於任何其他目的。此功能不會讓您對訂單進行任何程度的控制 - 允許任何重新排序。如果需要更多控制，則可能應手動處理拖放操作。GtkTreeDragSourceIfaceGtkTreeDragDestIfaceGtkTreeStoreGtkListStore?row-inserted??row-deleted?
語法
參數
tree_view- 一.GtkTreeView
reorderable- TRUE，如果樹可以重新排序。
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_row_separator_func ----

gtk_tree_view_set_row_separator_func
設置行分隔符號函數，該函數用於確定是否應將一行繪製為分隔符號。如果行分隔符號函數為 NULL，則不繪製分隔符號。這是預設值。
語法
參數
tree_view- 一GtkTreeView
func- 一個.[允許-無]GtkTreeViewRowSeparatorFunc
data- 要傳遞給 func 或 NULL 的使用者資料。[允許-無]
destroy- 銷毀資料的通知程式，或 NULL。[允許-無]
自 2.6 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_rubber_banding ----

gtk_tree_view_set_rubber_banding
啟用或禁用tree_view中的橡皮筋。如果選擇模式是 ，橡皮筋將允許使用者通過拖動滑鼠來選擇多行。GTK_SELECTION_MULTIPLE
語法
參數
tree_view- 一GtkTreeView
enable- TRUE 啟用橡皮筋，
自 2.10 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_rules_hint ----

gtk_tree_view_set_rules_hint
此函數告訴 GTK+，應用程式的應用程式的使用者介面要求使用者跨樹行讀取並相互關聯儲存格。預設情況下，GTK+ 將使用交替的行顏色渲染樹。不要使用它只是因為你喜歡規則樹的外觀;這是對主題的質疑。即使關閉規則，某些主題也會繪製樹行以替代顏色，並且始終保持該外觀的使用者可以選擇這些主題。您應僅將此函數作為主題引擎的語義約束，從函數的角度來看，您的樹使交替的顏色有用（因為它通常有很多列）。
語法
參數
tree_view- 一GtkTreeView
setting- 如果樹需要跨行讀取，則為 TRUE
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_search_column ----

gtk_tree_view_set_search_column
將列設置為互動式搜索代碼應在其中搜索當前模型的列。如果設置了搜索列，則用戶可以使用“開始交互搜索”鍵綁定來顯示搜索快顯視窗。啟用搜索屬性控制項只需鍵入文本即可啟動互動式搜索。請注意，該列引用當前模型的列。更改模型時，搜索列將重置為 -1。
語法
參數
tree_view- 一GtkTreeView
column- 要在其中搜索的模型列，或 -1 以禁用搜索
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_search_entry ----

gtk_tree_view_set_search_entry
設置互動式搜索代碼將用於thistree_view的條目。當您想要始終在我們的介面中以固定位置提供搜索條目時，這很有用。傳遞 NULL forentry 將使互動式搜索代碼再次使用內置快顯視窗。
語法
參數
tree_view- 一GtkTreeView
entry- tree_viewshould使用的互動式搜索代碼或 NULL 的條目。[允許-無]
自 2.10 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_search_equal_func ----

gtk_tree_view_set_search_equal_func
設置互動式搜索功能的比較功能;注意，這有點像 strcmp（） 返回 0 作為相等，在匹配項上返回 FALSE。GtkTreeViewSearchEqualFunc
語法
參數
tree_view- 一GtkTreeView
search_equal_func- 搜索期間要使用的比較功能
search_user_data- 要傳遞給search_equal_func的使用者資料，或 NULL。[允許-無]
search_destroy- 銷毀search_user_data的通告程式，或 NULL。[允許-無]
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_search_position_func ----

gtk_tree_view_set_search_position_func
設置定位搜索對話方塊時要使用的函數。
語法
參數
tree_view- 一GtkTreeView
func- 用於定位搜索對話方塊的函數，或 NULL 使用預設的搜索位置函數。[允許-無]
data- 要傳遞給 func 或 NULL 的使用者資料。[允許-無]
destroy- 銷毀資料的通知程式，或 NULL。[允許-無]
自 2.10 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_show_expanders ----

gtk_tree_view_set_show_expanders
設置是繪製和啟用擴展器，還是縮進子行intree_view。禁用後，樹中將看不到任何展開器，預設情況下也無法展開和折疊行。另請注意，隱藏擴展器將禁用默認縮進。在這種情況下，您可以設置自訂縮進usinggtk_tree_view_set_level_indentation（）。這對列表沒有任何可見的影響。
語法
參數
tree_view- 一GtkTreeView
enabled- TRUE 啟用擴展器繪製，否則為 FALSE。
自 2.12 起
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_tooltip_cell ----

gtk_tree_view_set_tooltip_cell
將工具提示的提示區域設置為區域路徑、列和儲存格。例如，如果路徑為 NULL 並且設置了列，則 tiparea 將設置為列覆蓋的完整區域。請參見alsogtk_tooltip_set_tip_area（）。請注意，如果未指定路徑，並且設置了儲存格，並且包含擴展器的列的一部分，則工具提示可能不會在正確的位置顯示和隱藏。在這種情況下，必須將路徑設置為主題游標下的當前節點，此函數才能正常運行。另請參閱 gtk_tree_view_set_tooltip_column（） 以獲取更簡單的替代方法。
語法
參數
tree_view- 一GtkTreeView
tooltip- 一GtkTooltip
path- a 或 NULL。[允許-無]GtkTreePath
column- a 或 NULL。[允許-無]GtkTreeViewColumn
cell- a 或 NULL。[允許-無]
自 2.12 起GtkCellRenderer
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_tooltip_column ----

gtk_tree_view_set_tooltip_column
如果您只計畫在整行上使用簡單（純文字）工具提示，則可以使用此函數自動為您處理這些工具提示。列應設置為包含工具提示文本tree_view模型中的列，或設置為 -1 以禁用此功能。啟用後，將設置為 TRUE，andtree_view將連接信號處理常式。請注意，信號處理常式使用gtk_tooltip_set_markup（），因此 &，<等設置文本必須在文本中轉義。GtkTreeView?has-tooltip??query-tooltip?
語法
參數
tree_view- 一GtkTreeView
column- 一個整數，這是自 2.1 起tree_view模型
的有效列號
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_tooltip_row ----

gtk_tree_view_set_tooltip_row
將工具提示的提示區域設置為行位於路徑所覆蓋的區域。另請參閱 gtk_tree_view_set_tooltip_column（） 以獲取更簡單的替代方法。另請參見gtk_tooltip_set_tip_area（）。
語法
參數
tree_view- 一GtkTreeView
tooltip- 一GtkTooltip
path- a
自2.12起GtkTreePath
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_vadjustment ----

gtk_tree_view_set_vadjustment
gtk_tree_view_set_vadjustment自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_scrollable_set_vadjustment（）設置 當前垂直方面。GtkAdjustment
語法
參數
tree_view- 一GtkTreeView
adjustment- 要設置的，或空。[允許-無]GtkAdjustment
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_unset_rows_drag_dest ----

gtk_tree_view_unset_rows_drag_dest
撤銷效果 ofgtk_tree_view_enable_model_drag_dest（）。調用此方法設置為 FALSE。?reorderable?
語法
參數
tree_view- 一GtkTreeView
另請參見
GtkTreeView


------------ KeyGTK3gtk_tree_view_unset_rows_drag_source ----

gtk_tree_view_unset_rows_drag_source
撤銷效果ofgtk_tree_view_enable_model_drag_source（）。調用此方法設置為 FALSE。?reorderable?
語法
參數
tree_view- 一GtkTreeView
另請參見
GtkTreeView


------------ KeyGTK3gtk_true ----

gtk_true
所有這些函數都執行該函數以返回 TRUE。例如，如果要禁止刪除視窗，這可能很有用。當然，您不應該這樣做，因為使用者希望按一下視窗的關閉圖示會做出反應...
12345678910111213141516171819202122232425262728293031[/語法] [語法]#include的持久視窗
intmain （ argc， **argv）{ GtkWidget *win， *but; const *text = “關閉你自己。我是認真的！“;gtk_init （&argc， &argv）;win = gtk_window_new （GTK_WINDOW_TOPLEVEL）;g_signal_connect（獲勝，“刪除事件”，G_CALLBACK（gtk_true），NULL）;g_signal_connect（獲勝，“摧毀”，G_CALLBACK（gtk_main_quit），NULL）;但是 = gtk_button_new_with_label （文本）;g_signal_connect_swapped（但是，“點擊”，G_CALLBACK（gtk_object_destroy），獲勝）;gtk_container_add（GTK_CONTAINER（獲勝），但是）;gtk_widget_show_all（獲勝）;gtk_main （）;返回 0;}[/語法]intcharchar
返回
真
另請參見
gtk3-General


------------ KeyGTK3gtk_ui_manager_add_ui ----

gtk_ui_manager_add_ui
gtk_ui_manager_add_ui自 3.10 版起已棄用，不應在新編寫的代碼中使用。將 UI 元素添加到管理器的當前內容中。如果類型GTK_UI_MANAGER_AUTO，GTK+ 將插入功能表項目、物件或分隔符號（如果此類元素可以插入到由路徑確定的位置）。否則，type 必須指示可在由路徑確定的位置插入的元素。如果 path 指向功能表項目或拓撲結構，則新元素將在此項之前或之後插入，具體取決於頂部。
語法
參數
manager- 一GtkUIManager
merge_id- 合併 UI 的合併 ID，請參見 gtk_ui_manager_new_merge_id（）
path- 路徑
name- 添加的 UI 元素的名稱
action- 要代理的操作的名稱，或 NULL 添加分隔符號。[允許-無]
type- 要添加的 UI 元素的類型。
top- 如果為 TRUE，則 UI 元素將添加到其同級元素之前，否則將添加到其同級元素之後。
2.4 起
另請參見
GtkUIManager


------------ KeyGTK3gtk_ui_manager_add_ui_from_file ----

gtk_ui_manager_add_ui_from_file
gtk_ui_manager_add_ui_from_file自版本 3.10 起已棄用，不應在新編寫的代碼中使用。分析包含 UI 定義的檔，並將其與管理器的當前內容合併。
語法
參數
manager- 一個物件GtkUIManager
filename- 要解析的檔的名稱。[類型檔案名]
error- 返回錯誤的位置
返回
合併 UI 的合併 ID。合併 ID 可用於將 UI 與 gtk_ui_manager_remove_ui（） 一起取消合併。如果發生錯誤，則返回值為 0。
2.4 起
另請參見
GtkUIManager


------------ KeyGTK3gtk_ui_manager_add_ui_from_resource ----

gtk_ui_manager_add_ui_from_resource
gtk_ui_manager_add_ui_from_resource自版本 3.10 起已棄用，不應在新編寫的代碼中使用。解析包含 UI 定義的資源檔，並將其與管理器的當前內容合併。
語法
參數
manager- 一個物件GtkUIManager
resource_path- 要解析的檔的資源路徑
error- 返回錯誤的位置
返回
合併 UI 的合併 ID。合併 ID 可用於將 UI 與 gtk_ui_manager_remove_ui（） 一起取消合併。如果發生錯誤，則返回值為 0。
自 3.4 起
另請參見
GtkUIManager


------------ KeyGTK3gtk_ui_manager_add_ui_from_string ----

gtk_ui_manager_add_ui_from_string
gtk_ui_manager_add_ui_from_string自 3.10 版起已棄用，不應在新編寫的代碼中使用。分析包含 UI 定義的字串，並將其與管理器的當前內容合併。封閉元素丟失時添加。
語法
參數
manager- 一個物件GtkUIManager
buffer- 要解析的字串
length- 緩衝區的長度（如果緩衝區是 nul 終止的，則可能為 -1）
error- 返回錯誤的位置
返回
合併 UI 的合併 ID。合併 ID 可用於將 UI 與 gtk_ui_manager_remove_ui（） 一起取消合併。如果發生錯誤，則返回值為 0。
2.4 起
另請參見
GtkUIManager


------------ KeyGTK3gtk_ui_manager_ensure_update ----

gtk_ui_manager_ensure_update
gtk_ui_manager_ensure_update自 3.10 版起已棄用，不應在新編寫的代碼中使用。確保已完成對 UI 的所有掛起更新。這有時可能是必要的，因為在空閒函數中更新 UI。此函數有用的一個典型示例是強制在顯示之前將功能表列和工具列添加到主視窗中：1234567[/語法] [語法]gtk_container_add（GTK_CONTAINER（窗口），vbox）;g_signal_connect（merge， “add-widget”， G_CALLBACK （add_widget）， vbox）;gtk_ui_manager_add_ui_from_file （merge， “my-menus”）;gtk_ui_manager_add_ui_from_file （merge， “my-toolbars”）;gtk_ui_manager_ensure_update （merge）;gtk_widget_show（窗口）;[/語法]GtkUIManager
語法
參數
manager- a
自2.GtkUIManager
另請參見
GtkUIManager


------------ KeyGTK3gtk_ui_manager_get_accel_group ----

gtk_ui_manager_get_accel_group
gtk_ui_manager_get_accel_group自 3.10 版起已棄用，不應在新編寫的代碼中使用。返回與管理器關聯的 。GtkAccelGroup
語法
參數
manager- 一個物件GtkUIManager
返回
這。[無轉移]
2.4 起GtkAccelGroup
另請參見
GtkUIManager


------------ KeyGTK3gtk_ui_manager_get_action ----

gtk_ui_manager_get_action
gtk_ui_manager_get_action自 3.10 版起已棄用，不應在新編寫的代碼中使用。通過跟蹤路徑查找操作。有關路徑的詳細資訊，請參閱 gtk_ui_manager_get_widget（）。
語法
參數
manager- 一GtkUIManager
path- 路徑
返回
通過路徑找到其代理小部件的操作，如果未找到任何小部件，則為 NULL。[無轉移]
2.4 起
另請參見
GtkUIManager


------------ KeyGTK3gtk_ui_manager_get_action_groups ----

gtk_ui_manager_get_action_groups
gtk_ui_manager_get_action_groups自 3.10 版起已棄用，不應在新編寫的代碼中使用。返回與管理器關聯的操作組的列表。
語法
參數
manager- 一個物件GtkUIManager
返回
一個行動小組。該列表歸 GTK+ 所有，不應修改。[元素型GtkActionGroup][無轉移]
2.4 起GList
另請參見
GtkUIManager


------------ KeyGTK3gtk_ui_manager_get_add_tearoffs ----

gtk_ui_manager_get_add_tearoffs
gtk_ui_manager_get_add_tearoffs自 3.4 版起已棄用，不應在新編寫的代碼中使用。拆解功能表已棄用，不應在新編寫的代碼中使用。返回由此生成的功能表是否具有撕裂功能表項目。GtkUIManager
語法
參數
manager- 一GtkUIManager
返回
是否添加
撕裂功能表項目 自 2.4
另請參見
GtkUIManager


------------ KeyGTK3gtk_ui_manager_get_toplevels ----

gtk_ui_manager_get_toplevels
gtk_ui_manager_get_toplevels自 3.10 版起已棄用，不應在新編寫的代碼中使用。獲取所請求類型的所有頂級小部件的列表。
語法
參數
manager- 一GtkUIManager
types- 指定要包含的頂級小部件的類型。允許的類型為 、 和 。GTK_UI_MANAGER_MENUBARGTK_UI_MANAGER_TOOLBARGTK_UI_MANAGER_POPUP
返回
新分配的所請求類型的所有頂級小部件。使用g_slist_free（） 釋放返回的列表。[element-type GtkWidget][轉移容器]
2.4 起GSList
另請參見
GtkUIManager


------------ KeyGTK3gtk_ui_manager_get_ui ----

gtk_ui_manager_get_ui
gtk_ui_manager_get_ui自 3.10 版起已棄用，不應在新編寫的代碼中使用。創建合併 UI 的 UI 定義。
語法
參數
manager- 一GtkUIManager
返回
新分配的字串，包含合併 UI 的 XML 表示形式。
2.4 起
另請參見
GtkUIManager


------------ KeyGTK3gtk_ui_manager_get_widget ----

gtk_ui_manager_get_widget
gtk_ui_manager_get_widget自版本 3.10 起已棄用，不應在新編寫的代碼中使用。通過跟蹤路徑查找小部件。該路徑由 UI 的 XML 說明中指定的名稱組成。由 ？/？分隔。在 XML 中沒有名稱或操作屬性的元素（例如） 可以通過其 XML 元素名稱（例如“popup”）進行定址。根項目 （“/ui”） 可以在路徑中省略。請注意，通過遵循以;元素是功能表附加到的功能表項目，而不是它管理的功能表。另請注意，由 ui 管理器構造的小部件與 ui 管理器的生命週期無關。如果將此函數返回的小部件添加到某個容器或顯式引用它們，則它們將在 ui 管理器的指令中倖存下來。
語法
參數
manager- 一GtkUIManager
path- 路徑
返回
通過路徑找到的小部件，如果未找到小部件，則為 NULL。[無轉移]
2.4 起
另請參見
GtkUIManager


------------ KeyGTK3gtk_ui_manager_insert_action_group ----

gtk_ui_manager_insert_action_group
gtk_ui_manager_insert_action_group 自 3.10 版起已棄用，不應在新編寫的代碼中使用。將操作組插入到與管理器關聯的操作組列表中。早期組中的操作會在後面的組中隱藏具有相同名稱的操作。如果 pos 大於管理器中的操作組數，則action_group將插入到內部列表的末尾。
語法
參數
manager- 一個物件GtkUIManager
action_group- 要插入的操作組
pos- 將插入組的位置。
2.4 起
另請參見
GtkUIManager


------------ KeyGTK3gtk_ui_manager_new ----

gtk_ui_manager_new
gtk_ui_manager_new自 3.10 版起已棄用，不應在新編寫的代碼中使用。創建新的 ui 管理器物件。
返回
一個新的 ui 管理器物件。
2.4 起
另請參見
GtkUIManager


------------ KeyGTK3gtk_ui_manager_new_merge_id ----

gtk_ui_manager_new_merge_id
gtk_ui_manager_new_merge_id自版本 3.10 起已棄用，不應在新編寫的代碼中使用。返回一個未使用的合併 ID，適合與 gtk_ui_manager_add_ui（） 一起使用。
語法
參數
manager- 一GtkUIManager
返回
未使用的合併 id。
自 2.4 起
另請參見
GtkUIManager


------------ KeyGTK3gtk_ui_manager_remove_action_group ----

gtk_ui_manager_remove_action_group
gtk_ui_manager_remove_action_group自 3.10 版起已棄用，不應在新編寫的代碼中使用。從與管理器關聯的操作組列表中刪除操作組。
語法
參數
manager- 一個物件GtkUIManager
action_group- 自 2.4 起要刪除的
操作組
另請參見
GtkUIManager


------------ KeyGTK3gtk_ui_manager_remove_ui ----

gtk_ui_manager_remove_ui
gtk_ui_manager_remove_ui自版本 3.10 起已棄用，不應在新編寫的代碼中使用。取消合併由merge_id標識的經理內容部分。
語法
參數
manager- 一個物件GtkUIManager
merge_id- gtk_ui_manager_add_ui_from_string（）
自 2.4 起返回的合併 ID
另請參見
GtkUIManager


------------ KeyGTK3gtk_ui_manager_set_add_tearoffs ----

gtk_ui_manager_set_add_tearoffs
gtk_ui_manager_set_add_tearoffs自 3.4 版起已棄用，不應在新編寫的代碼中使用。拆解功能表已棄用，不應在新編寫的代碼中使用。設置“add_tearoffs？屬性，它控制由此生成的功能表是否具有撕裂功能表項目。請注意，這只會影響常規菜單。生成的彈出菜單永遠不會有撕裂功能表項目。GtkUIManager
語法
參數
manager- 一GtkUIManager
add_tearoffs- 自2.4以來是否添加
撕下功能表項目
另請參見
GtkUIManager


------------ KeyGTK3gtk_vbox_new ----

gtk_vbox_new
gtk_vbox_new自版本 3.2 起已棄用，不應在新編寫的代碼中使用。您可以將 gtk_box_new（） 與 GTK_ORIENTATION_VERTICAL 一起使用，這是一個快速簡便的更改。但建議是切換到 ，因為 最終會消失。請參 閱從其他容器遷移到 GtkGrid。創建新的 容器。GtkGridGtkBoxGtkVBox
語法
參數
homogeneous- 如果所有子項都獲得相等的空間分配，則為 true。
spacing- 預設情況下要放置在子級之間的圖元數。
返回
一個新的GtkVBox
另請參見
GtkVBox


------------ KeyGTK3gtk_vbutton_box_new ----

gtk_vbutton_box_new
gtk_vbutton_box_new自版本 3.2 起已棄用，不應在新編寫的代碼中使用。將 gtk_button_box_new（） 與 GTK_ORIENTATION_VERTICAL 改為創建新的垂直按鈕框。
返回
一個新的按鈕框GtkWidget
另請參見
GtkVButtonBox


------------ KeyGTK3gtk_viewport_get_bin_window ----

gtk_viewport_get_bin_window
獲取 的 bin 窗口。GtkViewport
語法
參數
viewport- 一GtkViewport
返回
一個。[無轉移]
自 2.20 起GdkWindow
另請參見
GtkViewport


------------ KeyGTK3gtk_viewport_get_hadjustment ----

gtk_viewport_get_hadjustment
gtk_viewport_get_hadjustment自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_scrollable_get_hadjustment（）返回視區的水準調整。
語法
參數
viewport- 一個.GtkViewport
返回
視口的水準調整。[無轉移]
另請參見
GtkViewport


------------ KeyGTK3gtk_viewport_get_shadow_type ----

gtk_viewport_get_shadow_type
鑾峰彇 鐨勯槾褰辯被鍨嬨€係eegtk_viewport_set_shadow_type錛堬級.GtkViewport
璿硶
鍙傛暟
viewport- 涓€GtkViewport
榪斿洖
闃村獎綾誨瀷
鍙﹁鍙傝
GtkViewport


------------ KeyGTK3gtk_viewport_get_vadjustment ----

gtk_viewport_get_vadjustment
gtk_viewport_get_vadjustment自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_scrollable_get_vadjustment（）返回視區的垂直調整。
語法
參數
viewport- 一個.GtkViewport
返回
視區的垂直調整。[無轉移]
另請參見
GtkViewport


------------ KeyGTK3gtk_viewport_get_view_window ----

gtk_viewport_get_view_window
獲取 的視圖窗口。GtkViewport
語法
參數
viewport- 一GtkViewport
返回
一個。[無轉移]
自 2.2 起GdkWindow
另請參見
GtkViewport


------------ KeyGTK3gtk_viewport_new ----

gtk_viewport_new
使用給定的調整創建新的調整，如果沒有給定的調整，則使用默認調整。GtkViewport
語法
參數
hadjustment- 水準調整。[允許-無]
vadjustment- 垂直調整。[允許-無]
返回
一個新的GtkViewport
另請參見
GtkViewport


------------ KeyGTK3gtk_viewport_set_hadjustment ----

gtk_viewport_set_hadjustment
gtk_viewport_set_hadjustment自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_scrollable_set_hadjustment（）設置視口的水準調整。
語法
參數
viewport- 一個.GtkViewport
adjustment- 一個.[允許-無]GtkAdjustment
另請參見
GtkViewport


------------ KeyGTK3gtk_viewport_set_shadow_type ----

gtk_viewport_set_shadow_type
設置視區的陰影類型。
語法
參數
viewport- 一個.GtkViewport
type- 新的陰影類型。
另請參見
GtkViewport


------------ KeyGTK3gtk_viewport_set_vadjustment ----

gtk_viewport_set_vadjustment
gtk_viewport_set_vadjustment自 3.0 版起已棄用，不應在新編寫的代碼中使用。使用 gtk_scrollable_set_vadjustment（）設置視口的垂直調整。
語法
參數
viewport- 一個.GtkViewport
adjustment- 一個.[允許-無]GtkAdjustment
另請參見
GtkViewport


------------ KeyGTK3gtk_volume_button_new ----

gtk_volume_button_new
創建一個範圍介於 0.0 和 1.0 之間的 、步進為 0.02 的 。可以使用 中的函數獲取和修改體積值。GtkVolumeButtonGtkScaleButton
返回
自 2.1 以來的全新
GtkVolumeButton
另請參見
GtkVolumeButton


------------ KeyGTK3gtk_vpaned_new ----

gtk_vpaned_new
gtk_vpaned_new自 3.2 版起已棄用，不應在新編寫的代碼中使用。將 gtk_paned_new（） 與 GTK_ORIENTATION_VERTICAL 一起使用，而不是創建新的GtkVPaned
返回
新的GtkVPaned[/code
See Also
GtkVPaned


------------ KeyGTK3gtk_vscale_new ----

gtk_vscale_new
gtk_vscale_new自 3.2 版起已被棄用，不應在新編寫的代碼中使用。將 gtk_scale_new（） 與 GTK_ORIENTATION_VERTICAL 一起使用可改為創建新的 .GtkVScale
語法
參數
adjustment- 設置刻度範圍。GtkAdjustment
返回
一個新的.GtkVScale
另請參見
GtkVScale


------------ KeyGTK3gtk_vscale_new_with_range ----

gtk_vscale_new_with_range
gtk_vscale_new_with_range自 3.2 版起已棄用，不應在新編寫的代碼中使用。將 gtk_scale_new_with_range（） 與 GTK_ORIENTATION_VERTICAL改為創建一個新的垂直比例小部件，該小部件允許使用者使用增量步驟輸入介於最小值和最大值（包括最小值和最大值）之間的數位。步驟必須為非零;它是使用方向鍵調整刻度值時滑塊移動的距離。請注意，如果階躍為 10 的冪，則推導精度的方式效果最佳。如果生成的精度不適合您需要的精度，請使用 gtk_scale_set_digits（） 進行更正。
語法
參數
min- 最小值
max- 最大值
step- 步長增量（刻度大小）與鍵盤快速鍵一起使用
返回
一個新的GtkVScale[/code
See Also
GtkVScale


------------ KeyGTK3gtk_vscrollbar_new ----

gtk_vscrollbar_new
gtk_vscrollbar_new自版本 3.2 起已棄用，不應在新編寫的代碼中使用。將 gtk_scrollbar_new（） 與 GTK_ORIENTATION_VERTICAL 改為創建新的垂直捲動條。
語法
參數
adjustment- 要使用的，或 NULL 創建新的調整。[允許-無]GtkAdjustment
返回
新的GtkVScrollbar[/code
See Also
GtkVScrollbar


------------ KeyGTK3gtk_vseparator_new ----

gtk_vseparator_new
gtk_vseparator_new自版本 3.2 起已棄用，不應在新編寫的代碼中使用。將 gtk_separator_new（） 與 GTK_ORIENTATION_VERTICAL 一起使用可創建一個新的 .GtkVSeparator
返回
一個新的GtkVSeparator
另請參見
GtkVSeparator


------------ KeyGTK3gtk_widget_path_append_for_widget ----

gtk_widget_path_append_for_widget
將資料從小元件追加到由路徑表示的小元件層次結構。此函數是將資訊從小道添加到給定路徑的快捷方式。這包括從微件設置名稱或添加樣式類。
語法
參數
path- 小部件路徑
widget- 要附加到小部件路徑的小部件
返回
自 3.2 以來插入資料的位置
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_append_type ----

gtk_widget_path_append_type
將小部件類型追加到由 path 表示的小部件層次結構中。
語法
參數
path- 一GtkWidgetPath
type- 要追加的小部件類型
返回
自 3.0 以來插入元素的位置
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_append_with_siblings ----

gtk_widget_path_append_with_siblings
將小部件類型及其所有同級追加到由路徑表示的小部件層次結構中。使用此函數代替ofgtk_widget_path_append_type（） 將允許 CSS 主題在選擇器中使用物件匹配項並應用 ：nth-child（） 偽類。反過來，它需要在小部件實現中更加小心，因為當兄弟姐妹的路徑更改時，需要確保在所有參與的小部件上調用gtk_widget_reset_style（）。
語法
參數
path- 要追加到的小部件路徑
siblings- 描述兄弟姐妹清單的小部件路徑。此路徑本身不包含任何兄弟姐妹，以後不得對其進行修改。
sibling_index- 索引到同級用於放置添加的元素的位置。
返回
插入元素的位置。
自 3.2 起
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_copy ----

gtk_widget_path_copy
返回路徑的副本
語法
參數
path- 一GtkWidgetPath
返回
路徑的副本。[轉移完整]
自 3.0 起
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_free ----

gtk_widget_path_free
遞減路徑上的引用計數，如果引用計數達到 0，則釋放結構。
語法
參數
path- a
自3.0起GtkWidgetPath
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_get_object_type ----

gtk_widget_path_get_object_type
返回最頂層的物件類型，即此路徑表示的物件類型。
語法
參數
path- 一GtkWidget
返回
自 3.0 起的對象類型
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_has_parent ----

gtk_widget_path_has_parent
如果 path 中表示的小部件的任何父級類型為類型或其任何子類型，則返回 TRUE。
語法
參數
path- 一GtkWidgetPath
type- 小部件類型簽入父母
返回
如果任何父級的類型類型
為 3.0，則為 TRUE
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_is_type ----

gtk_widget_path_is_type
如果此路徑表示的小部件類型是類型或其子類型，則返回 TRUE。
語法
參數
path- 一GtkWidgetPath
type- 小部件類型匹配
返回
如果由 path 表示的小部件類型為
3.0，則為 TRUE
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_add_class ----

gtk_widget_path_iter_add_class
將類名添加到路徑中定義的層次結構中位置 pos 處的小部件。Seegtk_style_context_add_class（）.
語法
參數
path- 一GtkWidget
pos- 位置修改，-1 為路徑頭
name- 自 3.0 以來的類名
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_add_region ----

gtk_widget_path_iter_add_region
將區域名稱添加到路徑中定義的層次結構中位置 pos 處的小組件中。Seegtk_style_context_add_region（）.區域名稱只能包含小寫字母和?-?,始終以小寫字母開頭。
語法
參數
path- 一GtkWidgetPath
pos- 位置修改，-1 為路徑頭
name- 區域名稱
flags- 自3.0以來影響該地區的
標誌
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_clear_classes ----

gtk_widget_path_iter_clear_classes
從小部件中刪除路徑中定義的層次結構中位置 pos 處的所有類。
語法
參數
path- 一GtkWidget
pos- 位置修改，-1 表示路徑頭
自 3.0 起
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_clear_regions ----

gtk_widget_path_iter_clear_regions
從小元件中路徑中定義的層次結構中的位置 pos 處刪除所有區域。
語法
參數
path- 一GtkWidgetPath
pos- 位置修改，-1 表示路徑頭
自 3.0 起
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_get_name ----

gtk_widget_path_iter_get_name
返回與在由路徑定義的小部件層次結構中的位置 pos 找到的小部件相對應的名稱
語法
參數
path- 一GtkWidgetPath
pos- 獲取小部件名稱的位置，-1 表示路徑頭
返回
小元件名稱，如果未設置任何小部件名稱，則為 NULL。
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_get_object_type ----

gtk_widget_path_iter_get_object_type
返回在 path 中定義的 widgethierarchy 中處於位置 pos 的物件。GType
語法
參數
path- 一GtkWidgetPath
pos- 獲取物件類型的位置，路徑頭為 -1
返回
自 3.0 以來的小部件類型
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_get_siblings ----

gtk_widget_path_iter_get_siblings
返回 pos 處元素的同級元素清單。如果元素未添加同級元素，則返回 NULL。
語法
參數
path- 一GtkWidgetPath
pos- 位置以獲得兄弟姐妹，-1用於路徑頭
返回
NULL 或 pos 處元素的同級清單。
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_get_sibling_index ----

gtk_widget_path_iter_get_sibling_index
將索引返回到由 gtk_widget_path_iter_get_siblings（） 返回的 pos 處的元素的同級清單中。如果該函數由於 pos 上的元素沒有同級函數而返回 NULL，則此函數將返回 0。
語法
參數
path- 一GtkWidgetPath
pos- 位置以獲取同級索引，-1 用於路徑頭
返回
0 或指向 pos 處元素的同級清單的索引。
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_has_class ----

gtk_widget_path_iter_has_class
如果位置 pos 處的小部件具有 namedefined 類，則返回 TRUE，否則返回 FALSE。
語法
參數
path- 一GtkWidgetPath
pos- 要查詢的位置，-1 表示路徑頭
name- 類名
返回
如果自 3.0 以來在 pos
中為小部件定義了類名，則為 TRUE
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_has_name ----

gtk_widget_path_iter_has_name
如果位置 pos 處的小部件具有名稱名稱，則返回 TRUE，否則返回 FALSE。
語法
參數
path- 一GtkWidgetPath
pos- 要查詢的位置，-1 表示路徑頭
name- 小部件名稱
返回
TRUE 如果 posha 上的小部件自 3.0 起使用此名稱
，則為 TRUE
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_has_qclass ----

gtk_widget_path_iter_has_qclass
請參見 gtk_widget_path_iter_has_class（）。這是一個使用GQuarks運行的版本。
語法
參數
path- 一GtkWidgetPath
pos- 要查詢的位置，-1 表示路徑頭
qname- 類名作為GQuark
返回
如果 posha 上的小部件與定義的類匹配，則為 TRUE。
自 3.0 起
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_has_qname ----

gtk_widget_path_iter_has_qname
請參見gtk_widget_path_iter_has_name（）。這是一個在 上運行的版本。GQuarks
語法
參數
path- 一GtkWidgetPath
pos- 要查詢的位置，-1 表示路徑頭
qname- 小部件名稱作為GQuark
返回
TRUE 如果 posha 上的小部件自 3.0 起使用此名稱
，則為 TRUE
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_has_qregion ----

gtk_widget_path_iter_has_qregion
請參見gtk_widget_path_iter_has_region（）。這是一個使用GQuarks運行的版本。
語法
參數
path- 一GtkWidgetPath
pos- 要查詢的位置，-1 表示路徑頭
qname- 區域名稱作為GQuark
flags- 返回區域標誌的位置。[輸出]
返回
如果 posha 處的小部件與定義的區域相同，則為 TRUE。
自 3.0 起
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_has_region ----

gtk_widget_path_iter_has_region
如果位置 pos 處的小部件具有 namedefined 類，則返回 TRUE，否則返回 FALSE。
語法
參數
path- 一GtkWidgetPath
pos- 要查詢的位置，-1 表示路徑頭
name- 區域名稱
flags- 返回區域標誌的位置。[輸出]
返回
如果自 3.0 以來在 pos
中為小部件定義了類名，則為 TRUE
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_list_classes ----

gtk_widget_path_iter_list_classes
返回一個列表，其中包含在 path 中定義的層次結構中為 widgetat 位置 pos 定義的所有類名。
語法
參數
path- 一GtkWidgetPath
pos- 要查詢的位置，-1 表示路徑頭
返回
類的清單，這是一個字串清單，內容歸GTK +所有，但你應該使用g_slist_free（）來釋放列表本身。[轉移容器][元素型 utf8]
自 3.0 起GSList
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_list_regions ----

gtk_widget_path_iter_list_regions
返回一個清單，其中包含為路徑中定義的層次結構中的 widgetat 位置 pos 定義的所有區域名稱。
語法
參數
path- 一GtkWidgetPath
pos- 要查詢的位置，-1 表示路徑頭
返回
區域清單，這是一個字串清單，內容歸GTK+所有，但你應該使用g_slist_free（）來釋放列表本身。[轉移容器][元素型 utf8]
自 3.0 起GSList
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_remove_class ----

gtk_widget_path_iter_remove_class
從路徑中定義的層次結構中位置 pos 的小組件中刪除類名。
語法
參數
path- 一GtkWidgetPath
pos- 位置修改，-1 為路徑頭
name- 自 3.0 起的類名
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_remove_region ----

gtk_widget_path_iter_remove_region
從路徑中定義的層次結構中位置 pos 處的小元件中刪除區域名稱。
語法
參數
path- 一GtkWidgetPath
pos- 位置修改，-1 為路徑頭
name- 自 3.0 起的區域名稱
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_set_name ----

gtk_widget_path_iter_set_name
設置在由路徑定義的小部件層次結構中的位置找到的小部件的構件名稱。
語法
參數
path- 一GtkWidgetPath
pos- 位置修改，-1 為路徑頭
name- 小部件名稱
自3.0起
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_set_object_type ----

gtk_widget_path_iter_set_object_type
設置由路徑定義的構件層次結構中給定位置的物件類型。
語法
參數
path- 一GtkWidgetPath
pos- 位置修改，-1 為路徑頭
type- 自 3.0 起要設置
的對象類型
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_length ----

gtk_widget_path_length
返回表示的widget與其最頂層容器之間的數字。GtkWidgetGTypes
語法
參數
path- 一GtkWidgetPath
返回
路徑
中自 3.0 起的元素數
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_new ----

gtk_widget_path_new
返回空視窗小部件路徑。
返回
新創建的空 .[轉移完整]
自 3.0 起GtkWidgetPath
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_prepend_type ----

gtk_widget_path_prepend_type
將小部件類型附加到由 path 表示的小部件層次結構中。
語法
參數
path- 一GtkWidgetPath
type- 自3.0以來要預置
的小部件類型
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_ref ----

gtk_widget_path_ref
遞增路徑上的引用計數。
語法
參數
path- 一GtkWidgetPath
返回
pathitself.
自 3.2 起
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_to_string ----

gtk_widget_path_to_string
將小部件路徑轉儲為字串表示形式。它嘗試盡可能緊密地匹配 CSS 樣式（請注意，可能存在無法在 CSS 中表示的路徑）。此代碼的主要用途是用於調試目的，以便您在 gdb 會話中cang_print（） 路徑或轉儲它。
語法
參數
path- 路徑
返回
描述路徑的新字串。
自 3.
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_unref ----

gtk_widget_path_unref
遞減路徑上的引用計數，如果引用計數達到 0，則釋放結構。
語法
參數
path- a
自3.2起GtkWidgetPath
另請參見
gtk3-GtkWidgetPath


------------ KeyGTK3gtk__snooper_install ----

gtk_key_snooper_install
gtk_key_snooper_install?()
gtk_key_snooper_install自版本 3.4 起已棄用，不應在新編寫的代碼中使用。不應進行金鑰窺探。事件應由小部件處理。安裝一個金鑰窺探器函數，該函數將在正常傳遞所有金鑰事件之前調用該函數。
語法
參數
snooper- 一GtkKeySnoopFunc
func_data- 資料傳遞給窺探者
返回
此鍵窺探器的唯一 id，用於 withgtk_key_snooper_remove（）。
另請參見
gtk3-General


------------ KeyGTK3gtk__snooper_remove ----

gtk_key_snooper_remove
gtk_key_snooper_remove?()
gtk_key_snooper_remove自 3.4 版起已棄用，不應在新編寫的代碼中使用。不應進行金鑰窺探。事件應由小部件處理。刪除具有給定 ID 的鍵窺探器函數。
語法
參數
snooper_handler_id- 標識要刪除的金鑰窺探器
另請參見
gtk3-General


-------------------------------------------------------- KeyGTK3PgAbs ----

Abs   绝对值
  
计算数字的绝对值

语法
Declare Function Abs ( ByVal number As Integer ) As Integer
Declare Function Abs ( ByVal number As UInteger ) As UInteger
Declare Function Abs ( ByVal number As Double ) As Double

用法
result = Abs( number )

参数
number
值要找到绝对值。

返回值
的绝对值。number

描述
数字的绝对值是其正量级。如果某个数字为负数，则其值将被否定，并返回正结果。例如，两者都返回 。必需的参数可以是任何有效的数值表达式。
无符号数字将被视为有符号，?


-------------------------------------------------------- KeyGTK3PgAbstract ----

Abstract   抽象方法
  
声明抽象方法

语法
Type typename Extends base_typename
Declare Abstract Sub|Function|Property|Operator ...
End Type

描述
Abstract是 的一种特殊形式。不同之处在于抽象方法没有主体，而只有声明。从本质上讲，这允许声明一个接口，该接口可以由各种派生类型实现。
为了调用抽象方法，它必须已被派生数据类型重写和实


-------------------------------------------------------- KeyGTK3PgAccess ----

Access   访问权
  
用于指定所请求特权的语句子句Open

语法
Open filename for Binary Access {Read | Write | Read Write} as [#]filenum

用法
open filename for binary Access Read as #filenum
open filename for binary Access Write as #filenum
open filename for binary Access Read Write as #filenum

参数
Read
仅以读取权限打开文件。
Write
仅以写入权限打开文件。
Read Write
使用读取和写入权限打开文件。

描述
Acces


-------------------------------------------------------- KeyGTK3PgAcos ----

Acos   反余弦
  
查找角度的反余弦

语法
Declare Function Acos ( ByVal number As Double ) As Double

用法
result = Acos( number )

参数
number
范围为 [-1..1] 的余弦值。

返回值
的反余弦，以弧度为单位，在 [0..Pi] 范围内。number

描述
Acos将参数的反余弦作为 0 范围内的 a 返回到 Pi。反余弦是函数


-------------------------------------------------------- KeyGTK3PgAddGfx ----

Add   添加
  
图形语句的参数，该语句选择加法作为 blliting 方法Put

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Add[ ,multiplier ]

参数
Add
必填。
multiplier
介于 0 和 255 之间的可选值。源像素在添加之前会被预乘。如果省略，此值默认为 255。(multiplier / 256)

描述
Add选择加法作为删除图像缓冲区的方法。对于每个源像素和目标像素，将每个相应分量的值相加以生成结果。
加法是饱和的 - 即如果两个值的?


-------------------------------------------------------- KeyGTK3PgAlias ----

Alias (Name)   别名
  
提供备用内部名称的 and 语句的子句。SubFunction

语法
[Declare] { Sub | Function } usablename Alias "alternatename" (...)

用法
declare sub usablename Alias "alternatename" ( ... )
或
declare function usablename Alias "alternatename" ( ... )
或
sub usablename Alias "alternatename" ( ... )
...
end sub
或
function usablename Alias "alternatename" ( ... )
...
end function
或
type typename Alias "alternatename" ( ... )
...
end type

描述
Alias为过程提供备用名称。此备用名称不能在程序中用于调用该过程，但在使用其他语言编写的代码进行链接时，链接器可以看到此备用名称（如果函数不是私有的）。
通常用于用其他语?


-------------------------------------------------------- KeyGTK3PgAliasModifier ----

Alias (Modifier)   别名
  
修改公共符号的数据类型名称修饰（修饰）

语法
... As [ Const ] datatype alias "modifier" [ Const [ Ptr ... ] ]

用法
Dim variable As datatype alias "modifier"
Type name As datatype alias "modifier"
Declare Sub name ( param As datatype alias "modifier", ... )
Declare Function name ( param As datatype alias "modifier", ... ) As datatype alias "modifier"

参数
datatype
要修改的标准数据类型或用户定义的数据类型
modifier
支持的修饰符之一，如下面的“说明”部分所述
描述
Alias "modifier"，当在数据类型之后指定时，会为数据类型提供另一种含义，这对于与 FreeBASIC 以外的语言进行链接时可能需要。
公共


-------------------------------------------------------- KeyGTK3PgAllocate ----

Allocate   分配内存
  
从免费存储区分配内存块

语法
Declare Function Allocate cdecl ( ByVal count As UInteger ) As Any Ptr

用法
result = Allocate( count )

参数
count
要分配的内存块的大小（以字节为单位）。

返回值
如果成功，则返回已分配内存的起始地址。否则，如果无法分配请求的块大小，或者如果 ，则返回空指针 （）。count < 00

描述
尝试从免费存储（堆）中分配或保留字节数。新分配的内存未初始化。
由于新分配的内存的初始值未指定，因此?


-------------------------------------------------------- KeyGTK3PgAlphaGfx ----

Alpha   a通道
  
图形语句的参数，该语句选择 alpha 混合作为方法Put

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Alpha
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Alpha, alphaval

参数
Alpha
必填。
alphaval
范围 [0..255] 中的可选 alpha 参数。覆盖单个像素中的 Alpha 值。

描述
Alpha选择 Alpha 混合作为调色图像的方法。如果指定了该参数，它将覆盖每个像素的 alpha 值，并且蒙版颜色（洋红色）将被视为透明。这适用于 15、16、24 或 


-------------------------------------------------------- KeyGTK3PgAndGfx ----

And   和
  
图形语句的参数，该语句使用按位作为 blitting 方法PutAnd

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], And

参数
And
必填。

描述
该方法使用按位函数将每个源像素与相应的目标像素组合在一起。这样做的结果是输出为目标像素。
此方法适用于所有图形模式。没有遮罩颜色，尽管设置了所有位的颜色值（对于 8 位?


-------------------------------------------------------- KeyGTK3PgAny ----

Any   任意
  
该关键字以各种方式用作类型或值的占位符。Any

语法
Dim identifier As Any Pointer|Ptr
orororororor
Declare Sub|Function identifier ( ByRef identifier As Any [ , ... ] )

Dim identifier(Any [, Any...]) As DataType

[ Declare ] { Sub | Function } proc_name ( param(Any [, Any...]) As DataType  )

Dim identifier As DataType = Any

New DataType ( Any )

New(Address) DataType [count] { Any }

InStr|InStrRev ( string, Any substring )

描述
指针：
称为 （或 “”） 的特殊指针类型允许指向任何变量类型。如果将其转换为 ，则可以对其进行索引或取消引用，以访问作为 的实例访问内存。允许在 上使用指针算术，并将其视为 


-------------------------------------------------------- KeyGTK3PgAppend ----

Append   追加
  
指定要为追加模式打开的文本文件

语法
Open filename for Append [Encoding encoding_type] [Lock lock_type] as [#]filenum 

参数
filename
要打开以进行追加的文件名
encoding_type
指示文件的编码类型
lock_type
锁定以在文件打开时使用
filenum
要与打开的文件关联的未使用的文件编号

描述
用于打开文本文件进行写入的文件模式。
此模式用于向现有文件添加文本，或将逗号分隔的值与 。
文本文件不能在FreeBASIC中同时读


-------------------------------------------------------- KeyGTK3PgArrayLen ----

Arraylen
  
提供给定数组名称的数组的长度。

语法
Declare Function ArrayLen ( arrayname() As Const Any ) As UInteger

用法
#include once "fbc-int/array.bi"
using FB
...
result = ArrayLen(arrayname())

参数
arrayname
返回其长度的数组的名称。

描述
返回 由


-------------------------------------------------------- KeyGTK3PgArraySize ----

Arraysize
  
提供给定数组名称的数组的大小。

语法
Declare Function ArraySize ( arrayname() As Const Any ) As UInteger

用法
#include once "fbc-int/array.bi"
using FB
...
result = ArraySize(arrayname())

参数
arrayname
返回其大小的数组的名称。

描述
返回由 （数组元素的?


-------------------------------------------------------- KeyGTK3PgAs ----

As   为
  
指定数据类型的声明的一部分，或指定文件句柄的 Open 语句的一部分。

语法
symbolname As datatype

Open ... As #filenumber
Type ... As datatype

描述
As用于声明变量、字段或参数的类型，也用于在语句中


-------------------------------------------------------- KeyGTK3PgAsc ----

Asc   字符取码值
  
返回字符的相应 ASCII 或 Unicode 整数表示形式。

语法
Declare Function Asc ( ByRef str As Const String, ByVal position As Integer = 1 ) As ULong
Declare Function Asc ( ByVal str As Const ZString Ptr, ByVal position As Integer = 1 ) As ULong
Declare Function Asc ( ByVal str As Const WString Ptr, ByVal position As Integer = 1 ) As ULong

用法
result = Asc( str [, position ] )

参数
str
源字符串。
position
字符字符串中的位置。

返回值
存储在 中的原始字符值。
如果两者都可以在编译时计算（如 或 或 ...），则在结果中返回值，否则在结果中返回。positionstrstrpositionAsc("a")Asc(chr(97))Asc("abc", 2)UIntegerULong

描述
如果 是 a 或 a ，则返回该处的值。这将是一个 7 位 ASCII 代码，甚至是某些代码页中的 8 位字符值，具体取?


-------------------------------------------------------- KeyGTK3PgAsin ----

Asin   反正弦
  
查找数字的反正弦

语法
Declare Function Asin ( ByVal number As Double ) As Double

用法
result = Asin( number )

参数
number
范围为 [-1..1] 的正弦值。

返回值
的弧正弦（以弧度为单位），范围为 [-Pi/2..Pi/2]。number

描述
Asin将参数的反正弦值作为 -Pi/2 到 Pi/2 范围内的 a 返回。反正弦是函?


-------------------------------------------------------- KeyGTK3PgAsm ----

Asm   汇编
  
允许使用特定于体系结构的指令的代码块。

语法
Asm
architecture-dependent instructions
End Asm

或

Asm architecture-dependent instructions

描述
该块用于在程序中插入特定的机器代码指令，以便执行无法使用语言功能执行的操作，或手动优化性能敏感的代码部分。
当前的 FreeBASIC 编译器目前只为基于英特尔 80x86 的机器生成代?


-------------------------------------------------------- KeyGTK3PgAssert ----

Assert   中断执行
  
调试在表达式计算为 （false） 时停止程序执行的宏。0

语法
#define Assert(expression) If (expression) = 0 Then : fb_Assert( __FILE__, __LINE__, __FUNCTION__, #expression ) : End If

用法
Assert( expression )

参数
expression
任何有效的条件/数值表达式。如果计算结果为（即“false”），则停止执行。expression0

描述
该宏旨在用于调试，并且仅当 或 -eassertfbcexpression0-g 未传递给 fbc、该宏不生成任何代码且不起作用时才有效。
注意：如果在程序位于?


-------------------------------------------------------- KeyGTK3PgAssertwarn ----

AssertWarn   调试警告
  
调试在表达式的计算结果为 0 时打印警告的宏。

语法
#define AssertWarn(expression) If (expression) = 0 Then : fb_AssertWarn( __FILE__, __LINE__, __FUNCTION__, #expression ) : End If

用法
AssertWarn( expression )

参数
expression
任何有效的表达式。如果计算结果为 ，则会向 stderr （控制台） 打印一条警告消息。expression0

描述
该宏旨在用于调试，并且仅当在 FBC 命令行中选择了该选项时才有效。在这种情况下，如果计算结果为


-------------------------------------------------------- KeyGTK3PgAtan2 ----

Atan2   反正切2
  
返回比率的反正切值

语法
Declare Function Atan2 ( ByVal y As Double, ByVal x As Double ) As Double

用法
result = ATan2( y, x )

参数
y
垂直分量的比率。
x
比率的水平分量。

返回值
切线为的角度，以弧度为单位，在 [-Pi..圆周率]。y/x

描述
ATan2返回比率的反正切值，作为 -Pi 到 Pi 范围内的?


-------------------------------------------------------- KeyGTK3PgAtn ----

Atn   反正切
  
返回数字的反正切值

语法
Declare Function Atn ( ByVal number As Double ) As Double

用法
result = Atn( number )

参数
number
数字。

返回值
角度（以弧度为单位，其切线为 ）范围为 [-Pi/2..Pi/2]。number

描述
Atn将参数的反正切值作为 -Pi/2 到 Pi/2 范围内的 a 返回。反正切是函数


-------------------------------------------------------- KeyGTK3PgBase ----

Base (Member Access)   基类
  
提供对 非静态方法中的基类型成员的显式访问Type

语法
Base.member
Base [ .Base ... ] .member

描述
Base提供了一种在用户定义类型的非静态方法的上下文中显式访问特定基类型的成员的方法，这些方法使用 派生自另一种类型。
通过重复使用，如 在 中，可以访问任何所需的基类型，以防


-------------------------------------------------------- KeyGTK3PgBaseInit ----

Base (Initializer)   基类
  
为派生的 Udt 构造函数中的基本 UDT 指定初始值设定项

语法
Base ( constructor-parameters... )
or:
Base ( UDT-initializers... )

描述
初始值设定项可用于派生 UDT 的构造函数的顶部。它允许指定显式构造函数调用或用于初始化基对象的 UDT 初始值设定项。它将替换隐式默认初始化，并且必须出现在使用它的构造函数中的?


-------------------------------------------------------- KeyGTK3PgBeep ----

Beep   响铃
  
发出蜂鸣音。

语法
Declare Sub Beep ( )

用法
Beep

描述
Beep告诉系统发出蜂鸣声。请注意，这可能在某些平台上不起作用。由于此命令不可靠，并且无法指定频率和持续时间，因此您可能希望避免使用它，以支?


-------------------------------------------------------- KeyGTK3PgBin ----

Bin   二进制
  
返回整数的二进制（基数为 2）字符串表示形式

语法
Declare Function Bin ( ByVal number As UByte ) As String
Declare Function Bin ( ByVal number As UShort ) As String
Declare Function Bin ( ByVal number As ULong ) As String
Declare Function Bin ( ByVal number As ULongInt ) As String
Declare Function Bin ( ByVal number As Const Any Ptr ) As String

Declare Function Bin ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

用法
result = Bin[$]( number [, digits ] )

参数
number
计算为数字的数字或表达式。浮点数将转换为 .LongInt
digits
返回的字符串中所需的位数。

返回值
包含 的无符号二进制表示形式的字符串。number

描述
返回一个字符串，该字符串表示整数的无符号二进制值。二进制数字的范围从 0 到 1。
如果指定 > 0，则结果字符串将恰?


-------------------------------------------------------- KeyGTK3PgBinary ----

Binary   二进制流
  
指定要为二进制模式打开的文件或设备

语法
Open filename for Binary [Access access_type] [Lock lock_type] as [#]filenum 

参数
filename
要打开的文件名
access_type
指示文件是可以从中读取、写入文件还是同时读取到两者
lock_type
锁定以在文件打开时使用
filenum
要与打开的文件关联的未使用的文件编号

描述
打开文件或设备，用于以自由格式读取和/或写入文件中的二进制数据。
如果该文件不存在，则将创建一个新文件。文件


-------------------------------------------------------- KeyGTK3PgBit ----

Bit   位
  
获取整数值中单个位的状态。

语法
#define Bit( value, bit_number ) (((value) And (Cast(TypeOf(value), 1) Shl (bit_number))) <> 0)

用法
result = Bit( value, bit_number )

参数
value
整数值。
bit_number
位的索引。

返回值
返回一个值 if 如果设置了该位，或者如果该位已清除。Integer-10

描述
此宏扩展为一个整数值，该值指示 指定的位是否在整数 中设置。行为为“”。
的有效值范围取决于 '' 的大小（以位为单位），即 ''（从最低位开始）?


-------------------------------------------------------- KeyGTK3PgBitreset ----

BitReset   位重置
  
从复制的整数中获取清除指定位的值。

语法
#define BitReset( value, bit_number ) ((value) And Not (Cast(TypeOf(Value), 1) Shl (bit_number)))

用法
result = BitReset( value, bit_number )

参数
value
整数值。
bit_number
要清除的位的索引。

返回值
返回已清除指定位的整数值。

描述
此宏扩展为已清除指定的整数（to off 或 ''）的副本。行为为“”。
要清除变量中的指定位，可以使用以下赋值： 
的有效值范围取决于 '' 的大小（?


-------------------------------------------------------- KeyGTK3PgBitset ----

BitSet   位整数值
  
从复制的整数中获取具有指定位集的值。

语法
#define BitSet( value, bit_number ) ((value) Or (Cast(TypeOf(Value), 1) Shl (bit_number)))

用法
result = BitSet( value, bit_number )

参数
value
整数值。
bit_number
要设置的位的索引。

返回值
返回设置了指定位的整数值。

描述
此宏扩展为具有指定集（to on 或 ''）的整数的副本。行为为“”。
要在变量中设置指定的位，可以使用以下赋值： 
的值的有效范围取决于 '' 的大


-------------------------------------------------------- KeyGTK3PgBload ----

BLoad   位图加载
  
从使用 创建的文件或兼容的 BMP 映像文件中加载任意数据。BSave

语法
Declare Function BLoad ( ByRef filename As Const String, ByVal dest As Any Ptr = 0, ByVal pal As Any Ptr = 0 ) As Long

用法
result = BLoad( filename [, [ dest ] [, pal ] ] )

参数
filename
要从中加载图像的文件的名称;可以包含文件路径
dest
要将图像加载到的内存位置，或 null （） 将图像复制到当前图形屏幕工作页面0
pal
要将调色板加载到的内存位置，或 null （） 更改当前图形屏幕调色板（如果它使用0

返回值
如果成功，则返回零 （），或返回非零错误代码以指示失败。（引发运行时错误）0

描述
BLoad可用于从使用 创建的文件中加?


-------------------------------------------------------- KeyGTK3PgBoolean ----

Boolean   逻辑型
  
标准数据类型

语法
Dim variable As Boolean

描述
布尔数据类型。可以保存的值或
初始化时的默认值是
 关于定义布尔数据类型的注释：TrueFalseFalse
- 理想情况下，布尔数据类型的定义是它包含 True 或 False 的值，仅此而已。然而，要使这个概


-------------------------------------------------------- KeyGTK3PgBsave ----

BSave   位图保存
  
将任意数据和调色板信息的数组保存到磁盘上的文件中

语法
Declare Function BSave ( ByRef filename As Const String, ByVal source As Any Ptr, ByVal size As ULong = 0, ByVal pal As Any Ptr = 0, ByVal bitsperpixel As Long = 0 ) As Long

用法
result = BSave( filename, source [,[ size ][,{ pal | pal, bitsperpixel }]] )

参数
filename
要创建的用于存储像素和调色板数据的文件的名称。
source
要存储的数据的地址，或 null （） 用于存储当前屏幕工作页面中的像素数据。0
size
可选，要存储的数据的总字节数。除非输出是 BMP 文件，否则需要此值。
pal
可选，包含 256 种颜色的缓冲区的地址，或当前屏幕调色板的空 （）。Palette0
bitsperpixel
可选，输出 BMP 图像请求的位深度。如果指定，则还必须指定（至少为 null （） 值），否则将获得错误。bitsperpixelpal0

返回值
如果成功，则返回零 （），或返回非零错误代码以指?


-------------------------------------------------------- KeyGTK3PgByref ----

Byref (Parameters)   传址
  
通过引用显式传递参数的声明说明符

语法
ByRef param As datatype

用法
[ Declare ] { Sub | Function } proc_name ( ByRef param As datatype  )

描述
通过引用（即变量的地址）将变量传递给子例程或函数。当变量通过引用传递时，目标子例程或函数可以更改变量的内容。
在 -lang qb 和 -lang fblite 方言中，是默认参数传递约定，除非?


-------------------------------------------------------- KeyGTK3PgByrefFunction ----

Byref (Function Results)   传址
  
指定通过引用返回函数结果

语法
Function name ( parameter-list ) ByRef As datatype

描述
使函数结果按引用而不是按值返回。返回的函数将返回变量的地址，而不是像按值返回时那样进行复制。这允许函数的调用方修改函数结果指向的变量。
如果未指定，则默认按值返回函数结果。
具?


-------------------------------------------------------- KeyGTK3PgByrefVariables ----

Byref (Variables)   传址
  
声明引用

语法
(Dim | Static) [Shared] ByRef name1 As DataType = variable1 [, ByRef name2 As DataType = variable2, ...]
或
(Dim | Static) [Shared] ByRef As DataType name1 = variable1 [, name2 = variable2, ...]
或
[Static] Var [Shared] ByRef name1 = variable1 [, ByRef name2 = variable2, ...]

参数
name
引用名称
variable
要引用的变量名称

描述
声明对变量的引用（按名称）。
引用是一种实体，用于访问位于内存中的数据。引用不是数据本身，而只是有关其位置的信息。可以将引用视为隐式取消引用的指针。在许多情况下，它可以?


-------------------------------------------------------- KeyGTK3PgByte ----

Byte   字节
  
标准数据类型：8 位签名

语法
Dim variable As Byte

描述
8 位有符号整数数据类型


-------------------------------------------------------- KeyGTK3PgByval ----

ByVal   传值
  
声明说明符，用于按值显式传递参数

语法
ByVal param As datatype

用法
[ Declare ] { Sub | Function } proc_name ( ByVal param As datatype  )

描述
ByVal在声明语句的参数列表中，导致变量的副本通过其值传递给过程（例如，sub 或函数）。
这意味着，如果传递了变量 x 的值，则原始变量 x 将不会以任何方式进行修改;但是，如果传递?


-------------------------------------------------------- KeyGTK3PgCall ----

Call   调用
  
调用子例程的语句

语法
Call procname ([parameter list])

描述
调用 或 。
此关键字是 BASIC 早期方言的保留，主要已弃用。
在 -lang qb 中，它可用于在声明之前在代码中调用 s。该函数将隐式为 'd，并传递任何参数。
注意?


-------------------------------------------------------- KeyGTK3PgCallocate ----

CAllocate   内存分配初始化
  
为自由存储中一定数量的元素分配内存并清除内容

语法
Declare Function CAllocate cdecl ( ByVal num_elements As UInteger, ByVal size As UInteger = 1 ) As Any Ptr

用法
result = CAllocate( num_elements [, size ] )

参数
num_elements
要为其分配内存的元素数。
size
每个元素的大小（以字节为单位）。

返回值
如果成功，则返回已分配内存的起始地址。否则，将返回空指针 （）。0

描述
CAllocate用零初始化分配的内存。
因此，也可以直接


-------------------------------------------------------- KeyGTK3PgCase ----
Case   条
Description



-------------------------------------------------------- KeyGTK3PgCast ----

Cast   转换
  
将表达式转换为指定的数据类型

语法
Cast( datatype, expression )

参数
datatype 
内置数据类型（标准类型）
expression 
另一个内置数据类型的变量

描述
转换为其他 .当未知时以及在转换为类型别名时，在宏中使用非常有用。
这是转换运算符的一种通用形式，例如 或 。
用途更广，因为它可以用于具有内置的内置类?


-------------------------------------------------------- KeyGTK3PgCbool ----

CBool
  
将数字或字符串表达式转换为布尔值 （Boolean)

语法
Declare Function CBool ( ByVal expression As datatype ) As Boolean

Type typename
Declare Operator Cast ( ) As Boolean
End Type

用法
result = CBool( numeric expression )
result = CBool( string expression )
result = CBool( user defined type )

参数
expression
要转换为值的数字、字符串或用户定义类型Boolean
datatype
任何数字、字符串或用户定义的类型
typename
用户定义的类型

返回值
值。Boolean

描述
该函数将零值转换为 ，并将非零值转换为 。
该名称?


-------------------------------------------------------- KeyGTK3PgCbyte ----

CByte   转字节
  
将数字或字符串表达式转换为 。Byte

语法
Declare Function CByte ( ByVal expression As datatype ) As Byte

Type typename
Declare Operator Cast ( ) As Byte
End Type

用法
result = CByte( numeric expression )
result = CByte( string expression )
result = CByte( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式。Byte
datatype
任何数值、字符串或指针数据类型。
typename
用户定义的类型。

返回值
值。Byte

描述
该函数舍入小数部分并返回 8 位值。该函数不?


-------------------------------------------------------- KeyGTK3PgCdbl ----

CDbl   转双精型
  
将数字或字符串表达式转换为精确浮点Double

语法
Declare Function CDbl ( ByVal expression As datatype ) As Double

Type typename
Declare Operator Cast ( ) As Double
End Type

用法
result = CDbl( numeric expression )
result = CDbl( string expression )
result = CDbl( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式Double
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
精度值。Double

描述
该函数返回一个 64 位值。该函数不检查溢出，因此请?


-------------------------------------------------------- KeyGTK3PgCdecl ----

cdecl   cdecl
  
在过程声明中指定 cdecl 样式的调用约定

语法
Sub name cdecl [Overload] [Alias "alias"] ( parameters )
Function name cdecl [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

描述
在过程声明中，指定过程将使用调用约定。在调用约定中，任何参数都将以列出它们的相反顺序传递（推送到堆栈上），即从右到左。过程不需要保留 或 寄存器，并且不得在堆栈返回之前清理堆栈（


-------------------------------------------------------- KeyGTK3PgChain ----

Chain   链接
  
暂时将控制权移交给外部程序

语法
Declare Function Chain ( ByRef program As Const String ) As Long

用法
result = Chain( program )

参数
program
要将控制权移交给的程序（可执行文件）的文件名（包括文件路径）。

返回值
如果成功执行，则返回外部


-------------------------------------------------------- KeyGTK3PgChdir ----

ChDir   改路径
  
更改当前驱动器和目录

语法
Declare Function ChDir ( ByRef path As Const String ) As Long

用法
result = ChDir( path )

参数
path
指定要更改为的路径的参数。String

返回值
成功时返回零 （0），失?


-------------------------------------------------------- KeyGTK3PgChr ----

Chr   数转字符
  
从一个或多个 ASCII 整数值返回一串字符

语法
Declare Function Chr ( ByVal ch As Integer [, ... ] ) As String

用法
result = Chr[$]( ch0 [, ch1 ... chN ] )

参数
ch
字符的 ASCII 整数值。

返回值
返回包含字符的字符串。

描述
Chr返回一个字符串，其中包含由传递给它的 ASCII 值所表示的字符。
当与数值?


-------------------------------------------------------- KeyGTK3PgCint ----

CInt   转整型
  
将数字或字符串表达式转换为IntegerInteger<bits>

语法
Declare Function CInt ( ByVal expression As datatype ) As Integer
Declare Function CInt<bits> ( ByVal expression As datatype ) As Integer<bits>

Type typename
Declare Operator Cast ( ) As Integer
Declare Operator Cast ( ) As Integer<bits>
End Type

用法
result = CInt( expression )
result = CInt( string expression )
result = CInt( user defined type )

参数
bits
一个数字常量表达式，指示所需大小的整数位。允许的值为 、 或 。8163264
expression
要转换为值的数字、字符串或指针表达式Integer
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
包含转换后的值的 或。IntegerInteger<bits>

描述
如果传递给一个数字，它使用舍入到偶数的方法对其进行舍入 - 即它舍入到最接近的整数值，如果数


-------------------------------------------------------- KeyGTK3PgCircle ----

Circle   画圆
  
用于绘制椭圆或圆的图形语句

语法
Circle [target,] [STEP] (x,y), radius[, [color][, [start][, [end][, [aspect][, F]]]]]

参数
target
可选;指定要在其上绘制的图像缓冲区
STEP
表示坐标是相对的
(x, y)
椭圆中心的坐标
radius
圆的半径 - 对于椭圆，为半长轴（即最长半径）
color
颜色属性
start
起始角度
end
结束角度
aspect
椭圆的纵横比，高度与宽度的比率
F
填充模式指示器

描述
Circle将根据给定的参数绘制一个圆、椭圆或圆弧。
指定要在其上绘制的缓冲区。 可能是使用 或 


-------------------------------------------------------- KeyGTK3PgClass ----

Class   类对象
  
声明类对象

语法
Class typename ...

参数
typename
的名称Class

描述
我们会在这里放一些有用的东西（诚实），除了这个功能还没有在编译器中实现。但是


-------------------------------------------------------- KeyGTK3PgClear ----

Clear   清除
  
清除或初始化某些内存

语法
Declare Sub Clear cdecl ( ByRef dst As Any, ByVal value As Long = 0, ByVal bytes As UInteger )

用法
Clear( dst, [value], bytes )

参数
dst
某些内存的起始地址
value
要将所有字节设置为等于的值
bytes
要清除的字节数

描述
Clear将内存中的一个或多个字节设置为特定值（如果未指定，则默认值为零 （）。起始地址取自对变量或数组元素


-------------------------------------------------------- KeyGTK3PgClng ----

CLng   转长型
  
将数值或字符串表达式转换为Long

语法
Declare Function CLng ( ByVal expression As datatype ) As Long

Type typename
Declare Operator Cast ( ) As Long
End Type

用法
result = CLng( numeric expression )
result = CLng( string expression )
result = CLng( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式Long
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。Long

描述
该函数舍入小数部分并返回 32 位值。该函数不检查溢出，并且对于小


-------------------------------------------------------- KeyGTK3PgClngint ----

CLngInt   转长整型
  
将数字或字符串表达式转换为 64 位整数 （LongInt)

语法
Declare Function CLngInt ( ByVal expression As datatype ) As LongInt

Type typename
Declare Operator Cast ( ) As LongInt
End Type

用法
result = CLngInt( numeric expression )
result = CLngInt( string expression )
result = CLngInt( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式LongInt
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。LongInt

描述
该函数舍入小数部分并返回 64 位值。该函数不检查溢出，并且对于小于或大于 的值，未定义结果?


-------------------------------------------------------- KeyGTK3PgClose ----

Close   关闭
  
流 I/O 功能，用于终止对设备的访问

语法
Close [[#]filenum ] [, [#]filenum ...]
 or 
result = Close( [#filenum] )

参数
filenum
要关闭的文件编号列表。

返回值
Close成功时返回 32 位 ：零 （），否则返回非零错误代码。Long0

描述
关闭其文件编号作为参数传递的文件。如果传递了未使用的文件编号，则返回错误。
没有参数将关闭当前


-------------------------------------------------------- KeyGTK3PgCls ----

Cls   清屏
  
在文本模式和图形模式下清除屏幕

语法
Declare Sub Cls ( ByVal mode As Long = 1 )

用法
Cls mode

参数
mode
一个可选的数值变量，其值为 从 到 。如果省略，则默认为 。021

描述
可以给出一个可选参数，mode

如果省略，则清除文本或图形视口。如果已使用该语句定义了图形视口，则将清除图形视口。否则，将清除由 定义的文本视?


-------------------------------------------------------- KeyGTK3PgColor ----

Color   颜色
  
设置与文本的控制台输出和图形输出一起使用的显示前景/背景色

语法
Declare Function Color ( ByVal foreground As ULong , ByVal background As ULong ) As ULong

用法
Color [foreground] [, background]
result = Color [( [foreground] [, background] )]

参数
foreground
要设置的前景色
background
要设置的背景颜色

返回值
返回一个 32 位值，其中包含 中的当前前景色和 中的当前背景色。
在高/真彩色模式下，仅返回前景色，占用整个 32 位。相反，请参阅以返回当前图形模式颜色（前景和背景）。
可以在设置新颜色值的同时检索旧颜色值。Low WordHigh WordScreenControl

描述
该语句设置当前的前景色和/或背景色。、、、、、?


-------------------------------------------------------- KeyGTK3PgCommand ----

Command   命令行
  
返回用于调用程序的命令行参数

语法
Declare Function Command ( ByVal index As Long = -1 ) As String

用法
result = Command[$]( [ index ] )

参数
index
特定命令行参数的从零开始的索引。

返回值
返回命令行参数。

描述
Command返回在执行时传递给程序的命令行参数。
如果 小于零 （），则返回所有命令行参数的空格分隔列表，否则，返回单个参数。值为零 （） 返回可执行文


-------------------------------------------------------- KeyGTK3PgCommon ----

Common   全局变量
  
变量声明和作用域修饰符

语法
Common [Shared] symbolname[()] [AS DataType] [, ...]

描述
声明在代码模块（包括要编译为静态和动态库 （DLL） 的代码模块）之间共享的变量。
匹配语句必须出现在使用该变量的所有其他代码模块中。
无法初始化变量。
数组始终是可变长度的，并且?


-------------------------------------------------------- KeyGTK3PgCondBroadcast ----

CondBroadcast   条件变量广播
  
重新启动句柄的所有线程CondWait

语法
Declare Sub CondBroadcast ( ByVal handle As Any Ptr )

用法
CondBroadcast ( handle )

参数
handle
条件变量的句柄。

描述
一旦条件为并且线程启动，其中一个（包括执行主程序的隐式主线程）可以设置为条件，它们将被停止，直到等待线程可以重新启动的其他线程。 可用于重新启动等待条件的所有线程?


-------------------------------------------------------- KeyGTK3PgCondCreate ----

CondCreate   条件变量创建
  
创建要用于同步线程的条件变量

语法
Declare Function CondCreate ( ) As Any Ptr

用法
result = CondCreate

返回值
新创建的条件变量的句柄，或失败时的空指针 （0）。

描述
一旦条件为Condcreated并且线程启动，其中一个或多个线程（包括执行主程序的隐式主线程）可以设置为条件，它们将被停止，直?


-------------------------------------------------------- KeyGTK3PgCondDestroy ----

CondDestroy   条件变量销毁
  
在不再需要多线程条件变量时销毁该变量

语法
Declare Sub CondDestroy ( ByVal handle As Any Ptr )

用法
CondDestroy ( handle )

参数
handle
要销毁的条件变量的句柄。

描述
一旦条件为 d 并且线程启动，其中一个（包括执行主程序的隐式主线程）可以设置为条件线程，它们将被停止，直到等待线程可以重新启动的其他线程。 可用于重新启动?


-------------------------------------------------------- KeyGTK3PgCondSignal ----

CondSignal   条件变量信号
  
重新启动由调用暂停的线程CondWait

语法
Declare Sub CondSignal ( ByVal handle As Any Ptr )

用法
CondSignal ( handle )

参数
handle
条件变量的句柄。

描述
一旦创建了条件线程并启动了线程，就可以为条件线程设置其中的多个线程（包括执行主程序的隐式主线程）之一，它们将被停止，直到等待线程可以重新启动的其他线程。 可用于重


-------------------------------------------------------- KeyGTK3PgCondWait ----

CondWait   条件变量等待
  
停止执行当前线程，直到某些条件变为 true

语法
Declare Sub CondWait ( ByVal handle As Any Ptr, ByVal mutex As Any Ptr )

用法
CondWait ( handle, mutex )

参数
handle
条件变量的句柄。
mutex
与此条件变量关联的互斥体，在测试条件和调用 时必须锁定该变量。CondWait

描述
停止调用它的线程的函数，直到其他线程 s 或 s 成为句柄。
一旦创建了条件变量并启动了线程，就可以为条件变量设置其中的多个变量之一


-------------------------------------------------------- KeyGTK3PgConst ----

Const   常量
  
不可修改的变量声明。

语法
Const symbolname1 [AS DataType] = value1 [, symbolname2 [AS DataType] = value2, ...]
or
Const [AS DataType] symbolname1 = value1 [, symbolname2 = value2, ...]

描述
声明不可修改的常量数据，这些数据可以是整数或十进制（浮点数）数字或字符串。如果未显式给出，则将推断常量类型。
不允许指定 或 as。
允许指定 as，但不起作用，因为生成的类型始终为 .



-------------------------------------------------------- KeyGTK3PgConstMember ----

Const (Member)   常量
  
指定成员过程为只读。

语法
Type typename
Declare Const Sub|Function|Property|Operator ...
End Type

[Const] Sub|Function|... typename ...
...
End Sub|Function|...

描述
指定方法不更改调用它的对象。隐藏的参数将被视为只读。该声明可以读作“调用 const 方法承诺不更改对象”，如果成员过程尝试更改任何数据字段或调用非 const 成员过程，编译器将出错。
只读?


-------------------------------------------------------- KeyGTK3PgConstQualifier ----

Const (Qualifier)   常量
  
指定数据类型或指针数据类型为只读。

语法
... As [Const] datatype [ [Const] Ptr ... ]

参数
datatype
标准或用户定义的数据类型的名称。

描述
指定将限定符右侧的 or 视为只读。只读（）声明是类型安全的度量，可以理解为“承诺不更改”。编译器使用 const 声明来检查对变量和参数的操作，并在编译时生成错误?


-------------------------------------------------------- KeyGTK3PgConstructor ----

Constructor   构造函数
  
在创建类或用户定义类型时自动调用

语法
Type typename
Declare Constructor ( )
Declare Constructor ( [ ByRef | ByVal ] parameter As datatype [ = default ] [, ... ] )
End Type

Constructor typename ( [ parameters ] ) [ Export ]
statements
End Constructor

参数
typename 
或 的名称TypeClass

描述
Constructor在创建用户定义或变量时调用方法。
是为其声明和定义方法的类型的名称。的名称解析遵循与 在 中使用的过程相同的规则。
一个类型或类可能存在多个构造函数。调用的


-------------------------------------------------------- KeyGTK3PgContinue ----

Continue   继续本次
  
控制流语句以继续循环的下一次迭代

语法
Continue {Do | For | While}

描述
跳过所有代码，直到循环结构的结束子句（即 、或块），然后执行限制条件检查。在 a 的情况下，变量根据指定的递增。
如果有多个 / / 块嵌套，它将继续在该类型的最内层块上，即输入的


-------------------------------------------------------- KeyGTK3PgCos ----

Cos   余弦
  
返回角度的余弦

语法
Declare Function Cos ( ByVal angle As Double ) As Double

用法
result = Cos( angle )

参数
angle
角度（以弧度为单位）

返回值
将参数的余弦作为 to 的范围内返回。angleDouble-1.01.0

描述
参数以弧度（而不是度）为单位进行度量。
对于绝?


-------------------------------------------------------- KeyGTK3PgCptr ----

CPtr   转为PTR
  
将指针表达式转换为指定的数据类型指针

语法
CPtr( PointerDataType, expression )

描述
转换为 .
必须是一种类型（例如数据类型或 ），或者是一对一。
可能具有不同的指针类型，也可能是 .
 注意：目前，FB实际上并没有强制要求必须是指针。不过，这在将来的版本中可能?


-------------------------------------------------------- KeyGTK3PgCshort ----

CShort   转短整型
  
将数字或字符串表达式转换为整数 （Short)

语法
Declare Function CShort ( ByVal expression As datatype ) As Short

Type typename
Declare Operator Cast ( ) As Short
End Type

用法
result = CShort( numeric expression )
result = CShort( string expression )
result = CShort( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式Short
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。Short

描述
该函数舍入小数部分并返回一个 16 位值。该函数不检查?


-------------------------------------------------------- KeyGTK3PgCsign ----

CSign   转符号
  
将表达式转换为有符号

语法
CSign ( expression )

用法
variable = CSign ( expression )

描述
将无符号转换为有符号，这对于强制除法或乘法的有符号行为（


-------------------------------------------------------- KeyGTK3PgCsng ----

CSng   转单精型
  
将数字或字符串表达式转换为精确浮点Single

语法
Declare Function CSng ( ByVal expression As datatype ) As Single

Type typename
Declare Operator Cast ( ) As Single
End Type

用法
result = CSng( numeric expression )
result = CSng( string expression )
result = CSng( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式Single
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
精度值。Single

描述
该函数返回一个 32 位值。该函数不检查溢出，因此请


-------------------------------------------------------- KeyGTK3PgCsrlin ----

CsrLin   光标行
  
返回游标的行位置

语法
Declare Function CsrLin ( ) As Integer

用法
result = CsrLin

返回值
指定游标的当前行。Integer

描述
返回游标所在的?


-------------------------------------------------------- KeyGTK3PgCubyte ----

CUByte   转U字节型
  
将数字或字符串表达式转换为无符号字节 （UByte)

语法
Declare Function CUByte ( ByVal expression As datatype ) As UByte

Type typename
Declare Operator Cast ( ) As UByte
End Type

用法
result = CUByte( numeric expression )
result = CUByte( string expression )
result = CUByte( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式UByte
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。UByte

描述
该函数舍入小数部分并返回 8 位值。该函数不?


-------------------------------------------------------- KeyGTK3PgCuint ----

CUInt   转U整型
  
将数字或字符串表达式转换为或UIntegerUInteger<bits>

语法
Declare Function CUInt ( ByVal expression As datatype ) As UInteger
Declare Function CUInt<bits> ( ByVal expression As datatype ) As UInteger<bits>

Type typename
Declare Operator Cast ( ) As UInteger
Declare Operator Cast ( ) As UInteger<bits>
End Type

用法
result = CUInt( numeric expression )
result = CUInt( string expression )
result = CUInt( user defined type )

参数
bits
一个数值常量表达式，指示所需无符号整数位的大小。允许的值为 、 或 。8163264
expression
要转换为 或 值的数字、字符串或指针表达式UIntegerUInteger<bits>
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
A 或 包含转换后的值。UIntegerUInteger<bits>

描述
该函数舍入小数部分并返回一个值，或者如果提供了值，则返回给定大小的无符号整数类型。
?


-------------------------------------------------------- KeyGTK3PgCulng ----

CULng   转U长型
  
将数值或字符串表达式转换为ULong

语法
Declare Function CULng ( ByVal expression As datatype ) As ULong

Type typename
Declare Operator Cast ( ) As ULong
End Type

用法
result = CULng( numeric expression )
result = CULng( string expression )
result = CULng( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式ULong
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。ULong

描述
该函数舍入小数部分并返回 32 位值。该函


-------------------------------------------------------- KeyGTK3PgCulngint ----

CULngInt   转U长整型
  
将数字或字符串表达式转换为 64 位无符号整数 （ULongInt)

语法
Declare Function CULngInt ( ByVal expression As datatype ) As ULongInt

Type typename
Declare Operator Cast ( ) As ULongInt
End Type

用法
result = CULngInt( numeric expression )
result = CULngInt( string expression )
result = CULngInt( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式ULongInt
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。ULongInt

描述
该函数舍入小数部分并返回 64 位值。该函数不检查溢出，并且对于小于或大于 的值，未定义结果。此外，浮点表达式的强制转换当?


-------------------------------------------------------- KeyGTK3PgCunsg ----
CUnsg   转无
Description



-------------------------------------------------------- KeyGTK3PgCurdir ----

CurDir   目录取当前
  
返回当前目录/文件夹

语法
Declare Function CurDir ( ) As String

用法
result = CurDir

返回值
设置为当前目录/文件夹的名称。String

描述
返回当前目录/文件夹。

例

Print CurDir

输出会有所不同。

方言差异
在 -lang qb 方言中不可用，除非使用别名 引用。__Curdir




-------------------------------------------------------- KeyGTK3PgCushort ----

CUShort   转U短整型
  
将数字或字符串表达式转换为无符号整数 （UShort)

语法
Declare Function CUShort ( ByVal expression As datatype ) As UShort

Type typename
Declare Operator Cast ( ) As UShort
End Type

用法
result = CUShort( numeric expression )
result = CUShort( string expression )
result = CUShort( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式UShort
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。UShort

描述
该函数舍入小数部分并返回一个 16 位值。该函数不检?


-------------------------------------------------------- KeyGTK3PgCustomgfx ----

Custom   自定义
  
选择自定义方法的图形语句的参数Put

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Custom, custom_function_ptr [, parameter]

参数
Custom
必填。
custom_function_ptr
自定义用户定义函数的名称。
parameter
可选传递给自定义函数;如果省略，则默认值为零 （）。Pointer0

描述
Custom选择自定义用户定义函数作为删除图像缓冲区的方法。
该方法使用用户定义的函数来计算要绘制到目标缓冲区的最终像素值。对于源图像的?


-------------------------------------------------------- KeyGTK3PgCvaArg ----

Cva_Arg
  
宏，用于从可变参数列表对象获取下一个参数。

语法
variable = Cva_Arg ( argument_list, datatype )

参数
argument_list
Cva_List要访问下一个值的数据类型变量
datatype
变量参数列表中下一个值的数据类型argument_list

描述
该宏允许在函数中使用可变数量的参数：Cva_Arg
 	Cva_Arg返回列表中的当前参数，其预期数据类型为 。argument_listdatatype
在首次使用之前，?


-------------------------------------------------------- KeyGTK3PgCvaCopy ----

Cva_Copy
  
用于从已初始化的可变参数列表对象变量初始化可变参数列表对象变量的宏

语法
Cva_Copy( dst_list, src_list )

参数
dst_list
要初始化的目标变量Cva_List
src_list
要从中复制的源变量Cva_List

描述
将一个类型变量复制到另一个类型变量。 使用当前状态进行初始化，
必须已使用上一个或语句初始化。
就像可变参数列表对象的副本构造函数，并且最?


-------------------------------------------------------- KeyGTK3PgCvaEnd ----

Cva_End
  
用于清理可变参数列表对象变量的宏

语法
Cva_End( argument_list )

参数
argument_list
Cva_List要清理的变量

描述
清理以前使用 或 初始化的类型变量，如析构函数。
必须已使用与（为了跨平台兼容性）相同的过程中的上一?


-------------------------------------------------------- KeyGTK3PgCvaList ----

Cva_List
  
可变参数列表对象类型

语法
Dim variable As Cva_List

描述
Cva_List是一种内置数据类型，用于在可变参数过程中使用可变长度参数列表。
用于初始化变量（构造函数）。
用于复制变量（复制构造函数）。
用于获取下一个参数的值。
使用完变量（析构函数?


-------------------------------------------------------- KeyGTK3PgCvaStart ----

Cva_Start
  
用于初始化可变参数列表对象变量的宏

语法
Cva_Start( argument_list, last_param )

参数
argument_list
Cva_List要初始化的数据类型变量
last_param
过程参数列表中省略号之前的最后一个参数 ...

描述
在可变参数过程定义中，是具有该类型的变量，必须使用该类型进行初始化才能使用传递给过程的变量长度参数列表。
是可变参数过程定义中省略号之前的最后


-------------------------------------------------------- KeyGTK3PgCvd ----

CVD   转整双精型
  
将 64 位整数或 8 字节字符串转换为双精度值

语法
Declare Function CVD ( ByVal l As LongInt ) As Double
Declare Function CVD ( ByRef str As Const String ) As Double

用法
result = CVD( l )
result = CVD( str )

参数
l
一个 64 位，其中存储了双精度变量的二进制副本。LongInt
str
长度至少为 8 个字节，其中存储了双精度变量的二进制副本。String

返回值
返回一个值，该值保存输入值的二进制副本。Double

描述
从 64 位或 8 字节到变量的二进制副本。如果字符串的长度小于 8 ?


-------------------------------------------------------- KeyGTK3PgCvi ----

CVI   转整单精型
  
使用二进制副本将浮点数或字符串转换为整数变量

语法
32-bit:
Declare Function CVI ( ByVal f As Single ) As Integer
64-bit:
Declare Function CVI ( ByVal f As Double ) As Integer

Declare Function CVI ( ByRef str As Const String ) As Integer
Declare Function CVI<bits> ( expr As DataType ) As Integer<bits>

用法
result = CVI( sng )
result = CVI( str )
result = CVI<bits>( expr )

参数
f
一个浮点数，其中存储了一个整数变量的二进制副本。其精度（或）取决于当前平台上的大小SingleDoubleInteger
str
包含存储在其中的整数变量的二进制副本。String
bits
指定要返回的整数类型大小。接受的类型和大小将取决于调用的相应函数。expr
expr
将复制到 .Integer<bits>

返回值
包含输入表达式的二进制副本的 or 变量。IntegerInteger<bits>

描述
使用浮点值中包含的二进制数据或 .如果字符串?


-------------------------------------------------------- KeyGTK3PgCvl ----

CVL   转整单精整型
  
将单精度浮点数或四字节字符串转换为整数 （） 变量Long

语法
Declare Function CVL ( ByVal sng As Single ) As Long
Declare Function CVL ( ByRef str As Const String ) As Long

用法
result = CVL( sng )
result = CVL( str )

参数
sng
一个浮点数，其中存储了一个整数变量的二进制副本。Single
str
长度至少为四个字节，其中存储了整数变量的二进制副本。String

返回值
要将整数的二进制副本复制到的变量。Long

描述
使用 a 中包含的二进制数据返回一个 32 位整数值，或长度至少为 4 个字节的 a。如果字符串


-------------------------------------------------------- KeyGTK3PgCvlongint ----

CVLongInt   转双精长整型
  
将双精度浮点数或八字节字符串转换为变量LongInt

语法
Declare Function CVLongInt ( ByVal dbl As Double ) As LongInt
Declare Function CVLongInt ( ByRef str As Const String ) As LongInt

用法
result = CVLongInt( dbl )
result = CVLongInt( str )

参数
dbl
一个浮点数，其中存储了变量的二进制副本。DoubleLongInt
str
长度至少为八个字节，其中存储了变量的二进制副本。StringLongInt

返回值
保存输入变量的二进制副本的变量。LongInt

描述
使用长度至少为 8 个字节的 a 或 a 中包含的二进制数据返回一个 64 位值。如果字符串的长度小于八个字节，


-------------------------------------------------------- KeyGTK3PgCvs ----

CVS   转单精整型
  
将 32 位整数或 4 字节字符串转换为单精度变量

语法
Declare Function CVS ( ByVal i As Integer ) As Single
Declare Function CVS ( ByRef str As Const String ) As Single

用法
result = CVS( i )
result = CVS( str )

参数
i
一个 32 位，其中存储了单精度变量的二进制副本。Integer
str
长度至少为 4 个字节，其中存储了单精度变量的二进制副本。String

返回值
返回一个值，该值保存输入值的二进制副本。Single

描述
从 32 位或 4 字节到变量的二进制副本。如果字符串的长度?


-------------------------------------------------------- KeyGTK3PgCvshort ----

CVShort   转字短整型
  
将双字节字符串转换为整数变量Short

语法
Declare Function CVShort ( ByRef str As Const String ) As Short

用法
result = CVShort( str )

参数
str
长度至少为两个字节，其中存储了整数变量的二进制副本。StringShort

返回值
 Short保存 的二进制副本的变量。Keypgshort

描述
使用长度至少为两个字节的 a 中包含的二进制数据返回一个 16 位整数值。如果字符串的长度小于两个字节，则返回值为零 （）。
用于转


-------------------------------------------------------- KeyGTK3PgData ----

Data   数据
  
用于在编译时存储数据的语句。

语法
Data constant_expression1 [,constant_expression2]...

描述
Data存储常量数值或字母表达式的列表，这些表达式在编译时计算（使用 -lang qb 除外），并存储为常量，可以使用 读取到变量中。
程序中的所有语句都表现为单个链式列表;读取一个语句的最?


-------------------------------------------------------- KeyGTK3PgDate ----

Date   日期
  
以字符串形式返回当前系统日期

语法
Declare Function Date ( ) As String

用法
result = Date[$]

返回值
返回当前系统日期，格式为mm-dd-yyyy

描述
没有

例

Print Date ' 打印当前日期



与QB的区别
QB DATE 语句（用于设置系统日期）现在称为 。SetDate
字符串类型后缀“$”在 -lang qb 方言中是必需的。


-------------------------------------------------------- KeyGTK3PgDateAdd ----

DateAdd   日期相加
  
以指定的间隔偏移日期

语法
Declare Function DateAdd ( ByRef interval As Const String, ByVal number As Double, ByVal date_serial As Double ) As Double

用法
#include "vbcompat.bi"
result = DateAdd( interval, number, date_serial )

参数
interval
指示哪个时间段对应于一个单位的字符串number
number
要添加到基准日期的间隔数。该数字将四舍五入为最接近的整数。
date_serial
基准日期

返回值
返回与收到的 加上 的 相对应的 日期序列。date_serialnumberintervals

描述
间隔指


-------------------------------------------------------- KeyGTK3PgDateDiff ----

DateDiff   日期差值
  
获取按指定间隔测量的两个日期的差异

语法
Declare Function DateDiff ( ByRef interval As Const String, ByVal serial1 As Double, ByVal serial2 As Double, ByVal firstdayofweek As Long = fbUseSystem, ByVal firstdayofyear As Long = fbUseSystem ) As Long

用法
#include "vbcompat.bi"
result = DateDiff( interval, date_serial1, date_serial2 [, firstdayofWeek [, firstweekofyear ] ] )

参数
interval
用于测量差值的时间单位（间隔）
date_serial1
开始日期序列
date_serial2
结束日期序列
firstdayofweek
一周的第一天
firstdayofyear
一年的第一天

返回值
返回一个整数，该整数对应于在两个日期序列之间找到的 s 数。
如果>，则结果为负数。intervaldate_serial1date_serial2

描述
interval指定如下：

价值间隔yyyy年q季度（三个月）m月份w七天期间断续器日历周d，y日h小?


-------------------------------------------------------- KeyGTK3PgDatePart ----

DatePart   日期部分
  
从日期获取间隔

语法
Declare Function DatePart ( ByRef interval As Const String, ByVal date_serial As Double, ByVal firstdayofweek As Long = fbUseSystem, ByVal firstdayofyear As Long = fbUseSystem ) As Long

用法
#include "vbcompat.bi"
result = DatePart( interval, date_serial, first_dayofWeek [, first_week_of_year ] )

参数
interval
指示日期的哪一部分需要的字符串
date_serial
要解码的日期序列
firstdayofweek
一周的第一天
firstdayofyear
一年的第一天

返回值
返回一个整数，表示 日期序列中的 。interval

描述

interval指示需要日期的哪一部分的字符串指定如下：

价值间隔yyyy年q季度（三个月）m月份w工作日断续器一年中的一周y一年中的


-------------------------------------------------------- KeyGTK3PgDateSerial ----

DateSerial   日期序列
  
创建日期序列

语法
Declare Function DateSerial ( ByVal year As Long, ByVal month As Long, ByVal day As Long ) As Long

用法
#include "vbcompat.bi"
result = DateSerial( year, month, day )

参数
year
年份
month
一年中的月份
day
月份中的某一天

返回值
返回一个日期序列，其中包含由 和 参数中的值形成的日期。返回的日期序列没有


-------------------------------------------------------- KeyGTK3PgDateValue ----

DateValue   日期数值
  
从字符串返回日期序列

语法
Declare Function DateValue ( ByRef date_string As String ) As Double

用法
#include "vbcompat.bi"
result = DateValue( date_string )

参数
date_string
要转换为日期序列的字符串

返回值
从日期字符串返回日期序列。

描述
日期字符串必须采用在操作系统的区域设置中设置的格式。
仅当区域设置指定了与使用的相同的短日期格式 QB （） 时，才能正常工作。请考虑?


-------------------------------------------------------- KeyGTK3PgDay ----

Day   日期取天
  
从日期序列中获取月份中的某一天

语法
Declare Function Day ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Day( date_serial )

参数
date_serial
日期

返回值
从包含日期序列格式的日期的变量中返回月份中


-------------------------------------------------------- KeyGTK3PgDddate ----

__DATE__   _编译__日期__
  
编译器设置的内部定义（宏值）

语法
__DATE__

描述
将文本字符串（格式）


-------------------------------------------------------- KeyGTK3PgDddateiso ----

__DATE_ISO__   _编译_日期_ISO
  
编译器设置的内部定义（宏值）

语法
__DATE_ISO__

描述
将文本字符串（格式）中的编译器日期替换为已使用的


-------------------------------------------------------- KeyGTK3PgDdfb64bit ----

__FB_64BIT__   _编译_64位
  
编译器设置的内部定义

语法
__FB_64BIT__

描述
定义编译时?


-------------------------------------------------------- KeyGTK3PgDdfbargc ----

__FB_ARGC__   _编译传名称
  
编译器设置的内部定义（宏值）

语法
__FB_ARGC__

描述
替换为命令行上传入的参数数。
 __FB_ARGC__是传递给程序


-------------------------------------------------------- KeyGTK3PgDdfbargcount ----

__FB_ARG_COUNT__
  
编译器执行的内部定义（宏）。

语法
__FB_ARG_COUNT__( args... )

参数
args...
参数列表

描述
计算参数列表 （） 中的参数数并返回相应的值。
始终返回一个值，其中 0 对应于空参


-------------------------------------------------------- KeyGTK3PgDdfbargextract ----

__FB_ARG_EXTRACT__
  
编译器执行的内部定义（宏）。

语法
__FB_ARG_EXTRACT__( index, args... )

参数
index
从第一个参数开始的从零开始的偏移量（零或正整数值）
args...
参数列表

描述
从与索引值 （） 对应的参数列表 （）


-------------------------------------------------------- KeyGTK3PgDdfbargleftof ----

__FB_ARG_LEFTOF__
  
编译器执行的内部定义（宏）。

语法
__FB_ARG_LEFTOF__( arg, sep [, ret] )

参数
arg
论点
sep
分隔符，明显不同于逗号 （，）
ret
如果未找到分隔符，则默认返回

描述
基于分隔符 （） 返回参数 （） 的左标记。
 （在参数的表达式中，标记和分隔符必须间隔）
默认情况下，如果未给出默认返回 


-------------------------------------------------------- KeyGTK3PgDdfbargrightof ----

__FB_ARG_RIGHTOF__
  
编译器执行的内部定义（宏）。

语法
__FB_ARG_RIGHTOF__( arg, sep [, ret] )

参数
arg
论点
sep
分隔符，明显不同于逗号 （，）
ret
如果未找到分隔符，则默认返回

描述
基于分隔符 （） 返回参数 （） 的正确标记。
 （在参数的表达式中，标记和分隔符必须间隔）
默认情况下，如果未给出默认返回


-------------------------------------------------------- KeyGTK3PgDdfbargv ----

__FB_ARGV__   _编译传入值
  
编译器设置的内部定义（宏值）

语法
__FB_ARGV__

描述
替换为指向指向命令行上传入的零个终止的命令行参数的指针列表的指针。
 __FB


-------------------------------------------------------- KeyGTK3PgDdfbarm ----

__FB_ARM__   _编译_ARM_
  
编译器设置的内部定义

语法
__FB_ARM__

描述
如果编译目标使用 ARM CPU 


-------------------------------------------------------- KeyGTK3PgDdfbasm ----

__FB_ASM__   _编译_汇编
  
编译器设置的内部定义

语法
__FB_ASM__

描述
__FB_ASM__返回一个字符串，该字符串等于或取决于内联装?


-------------------------------------------------------- KeyGTK3PgDdFBBackend ----

__FB_BACKEND__   _编译_后端
  
编译器设置的内部定义

语法
__FB_BACKEND__

描述
定义为 或 ，具体取决?


-------------------------------------------------------- KeyGTK3PgDdFBBigEndian ----

__FB_BIGENDIAN__   _编译_大端存储
  
编译器设置的内部定义

语法
__FB_BIGENDIAN__

描述
如果为大端目标进行编译，则在编译?


-------------------------------------------------------- KeyGTK3PgDdFBBuildDate ----

__FB_BUILD_DATE__   _编译_日期_
  
编译器设置的内部定义（宏字符串）

语法
__FB_BUILD_DATE__

描述
替换为包含编译


-------------------------------------------------------- KeyGTK3PgDdfbbuilddateiso ----

__FB_BUILD_DATE_ISO__
  
编译器设置的内部定义（宏字符串）

语法
__FB_BUILD_DATE_ISO__

描述
替换为包含 ISO 日期格式构建?


-------------------------------------------------------- KeyGTK3PgDdfbbuildsha1 ----

__FB_BUILD_SHA1__
  
编译器设置的内部定义（宏字符串）

语法
__FB_BUILD_SHA1__

描述
替换为编译器的源 SHA-1 修订版的字符串。该值是使用用于生成编译器二进制文件的源代码修


-------------------------------------------------------- KeyGTK3PgDdfbcygwin ----

__FB_CYGWIN__   _编译_CYGWIN
  
编译器设置的内部定义

语法
__FB_CYGWIN__

描述
定义时，在编译器的 Cygwin 版本中，或者在使用 -target cygwin 命令行选?


-------------------------------------------------------- KeyGTK3PgDdfbdarwin ----

__FB_DARWIN__   _编译_DARWIN
  
编译器设置的内部定义

语法
__FB_DARWIN__

描述
定义时不使用在编译器的达尔文版本中编译时或使用 -target darwin ?


-------------------------------------------------------- KeyGTK3PgDdfbdebug ----

__FB_DEBUG__   _编译_调试
  
编译器设置的内部定义（宏值）

语法
__FB_DEBUG__

描述
__FB_DEBUG__指示编译时是否在命令行上指定了“生成调试信息”选项或“启用内部定义”选项。
如果指定了任一选项，则返回非零 （-1）。否则返回零 （0）。
可用于


-------------------------------------------------------- KeyGTK3PgDdfbdos ----

__FB_DOS__   _编译_DOS
  
编译器设置的内部定义

语法
__FB_DOS__

描述
如果为 DOS 目标进行编译，则定义时不创建在编译时创建的值。在 DOS 托管版本中缺省，或在使用 -target dos 命令行选项时处于?


-------------------------------------------------------- KeyGTK3PgDdfberr ----

__FB_ERR__   _编译_错误
  
编译器设置的内部定义（宏值）

语法
__FB_ERR__

描述
__FB_ERR__指示在编译模块时是否在编译器命令行上指定了 -e、-ex 或 -exx。
指示在编译模块时，是否在编译器命令行上指定了 -earray、-enullptr 或 -elocation，或者通过使用 -exx 进行


-------------------------------------------------------- KeyGTK3PgDdfbeval ----

__FB_EVAL__
  
编译器执行的内部定义（宏）。

语法
__FB_EVAL__( arg )

参数
arg
论点

描述
在编译时计算参数（常量表达式）。
当参数计算生成字符串时，返回使用预处理器运算符格式化的字符串：__FB_EVAL__
-a （形式： ），
 - 或 （形式： ）如果需要。Non-Escaped String 


-------------------------------------------------------- KeyGTK3PgDdfbfpmode ----

__FB_FPMODE__   _编译_快速_
  
编译器设置的内部定义

语法
__FB_FPMODE__

描述
定义为启用了 SSE 快速算术?


-------------------------------------------------------- KeyGTK3PgDdfbfpu ----

__FB_FPU__   _编译_浮点
  
编译器设置的内部定义

语法
__FB_FPU__

描述
定义为启用了 SSE 浮


-------------------------------------------------------- KeyGTK3PgDdfbfreebsd ----

__FB_FREEBSD__   _编译_FREEBSD
  
编译器设置的内部定义

语法
__FB_FREEBSD__

描述
定义时在编译时在 FreeBSD 版本的编译器中创建的值，或者当使用 -target freebsd 命令?


-------------------------------------------------------- KeyGTK3PgDdfbgcc ----

__FB_GCC__   _编译_GCC
  
编译器设置的内部定义

语法
__FB_GCC__

描述
如果使用 -gen gcc，则定义为 true


-------------------------------------------------------- KeyGTK3PgDdfbgui ----

__FB_GUI__
  
编译器设置的内部定义（宏值）

语法
__FB_GUI__

描述
__FB_GUI__指示编译时是否在命令行上指定了可执行子系统选项 '-s gui'。
如果指定了可执行子系统选项 “-s gui”，则?


-------------------------------------------------------- KeyGTK3PgDdfbjoin ----

__FB_JOIN__
  
编译器执行的内部定义（宏）。

语法
__FB_JOIN__( arg1, arg2 )

参数
arg1,arg2
要加入的左 （1） 和右 （2） 个参数

描述
将两个令牌参数连?


-------------------------------------------------------- KeyGTK3PgDdfblang ----

__FB_LANG__   _编译_语言
  
编译器设置的内部定义（宏值）

语法
__FB_LANG__

描述
__FB_LANG__指示在编译模块时设置的语言兼容性选项。默认情况下将设置为 。可以使用以下一种（或多种）方法更改语言兼容性选项：__FB_LANG__"fb"
 -lang 命令行选项
 -forcelang 命令?


-------------------------------------------------------- KeyGTK3PgDdfblinux ----

__FB_LINUX__   _编译_LINUX
  
编译器设置的内部定义

语法
__FB_LINUX__

描述
在编译到 Linux 目标时，不使用编译时创建的值进行定义。默认为 Linux 托管版本的编译器，或在使用 -tar


-------------------------------------------------------- KeyGTK3PgDdFBMain ----

__FB_MAIN__   _编译_主模_
  
编译器设置的内部定义

语法
__FB_MAIN__

描述
__FB_MAIN__在主模块中定义，而不是在其他模块中定义。
编译器将


-------------------------------------------------------- KeyGTK3PgDdFBMinVersion ----

__FB_MIN_VERSION__   _编译_最小编译版本
  
用于测试最低编译器版本的宏函数

语法
#define __FB_MIN_VERSION__( major, minor, patch) _
((__FB_VER_MAJOR__ > major) or _
((__FB_VER_MAJOR__ = major) and ((__FB_VER_MINOR__ > minor) or _
(__FB_VER_MINOR__ = minor and __FB_VER_PATCH__ >= patch_level))))

用法
__FB_MIN_VERSION__( major, minor, patch)

参数
major
要测试的最低主要版本
minor
要测试的最低次要版本
patch
要测试的最低补丁版本

返回值
如果编译器版本小于指定版本，


-------------------------------------------------------- KeyGTK3PgDdfbmt ----

__FB_MT__   _编译多线程
  
编译器设置的内部定义（宏值）

语法
__FB_MT__

描述
__FB_MT__指示编译时是否在命令行上指定了多线程选项 -mt，或者是否在源代码中更多地使用了 or 关键?


-------------------------------------------------------- KeyGTK3PgDdfbnetbsd ----

__FB_NETBSD__   _编译_NETBSD
  
编译器设置的内部定义

语法
__FB_NETBSD__

描述
定义时，在 NetBSD 版本的编译器中，或者在使用 -target netbsd 命令行选项?


-------------------------------------------------------- KeyGTK3PgDdfbopenbsd ----

__FB_OPENBSD__   _编译_OPENBSD
  
编译器设置的内部定义

语法
__FB_OPENBSD__

描述
在 OpenBSD 版本的编译器中，或者在使用 -target openbsd 命令行选项时，定义时


-------------------------------------------------------- KeyGTK3PgDdfboptimize ----

__FB_OPTIMIZE__
  
编译器设置的内部定义

语法
__FB_OPTIMIZE__

描述
始终定义，并且将具有从 0 到 3（默认情况下?


-------------------------------------------------------- KeyGTK3PgDdfboptionbyval ----

__FB_OPTION_BYVAL__   _编译选项支持值传递
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_BYVAL__

描述
指示当未显式声明 by value /by 引用说明符时，是否通过引用传递给 或 按值传递的参数（如 with ），或者像默认情况下那样按值传递。
如果默认情况下参数是传递值，则设置为非零 ?


-------------------------------------------------------- KeyGTK3PgDdfboptiondynamic ----

__FB_OPTION_DYNAMIC__   _编译选项数组变长
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_DYNAMIC__

描述
__FB_OPTION_DYNAMIC__定义为 true（负数 （-1）），如果发出了最近的语?


-------------------------------------------------------- KeyGTK3PgDdfboptionescape ----

__FB_OPTION_ESCAPE__   _编译选项_支持转义
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_ESCAPE__

描述
指示默认情况下，如果未以 $ 运算符显式前缀（对于非转义字符串）或 ！转义字符串的运算符。
处理字符串文本的缺省方法是在编译或使用源文件中的 -lang 命令行选项期


-------------------------------------------------------- KeyGTK3PgDdfboptionexplicit ----

__FB_OPTION_EXPLICIT__   _编译选项_支持EXPLICIT
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_EXPLICIT__

描述
__FB_OPTION_EXPLICIT__指示以前是否在源中使用过。
如果尚未设置该选项，


-------------------------------------------------------- KeyGTK3PgDdfboptiongosub ----

__FB_OPTION_GOSUB__   _编译选项_支持GOSUB
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_GOSUB__

描述
指示在编译时如何处理和将要处理。如果该选项设置为 （-1），则允许此选项，并且仅被识别为从 gosub 返回。如果未设置该选项 （0），则不允许这样做，并且仅将其识别为从过程返回。
?


-------------------------------------------------------- KeyGTK3PgDdfboptionprivate ----

__FB_OPTION_PRIVATE__   _编译选项_支持PRIVATE
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_PRIVATE__

描述
指示 默认情况下，和 的 是否具有模块作用域或全局作用域（如果未用 或 显式指定）。
函数和子的默认作用域说明符是在编译期间或在源文件中使用 -lang 命令行选项来设置的。
如?


-------------------------------------------------------- KeyGTK3PgDdfboutdll ----

__FB_OUT_DLL__   _编译_输出DLL
  
编译器设置的内部定义（宏值）

语法
__FB_OUT_DLL__

描述
__FB_OUT_DLL__指示编译时编译器命令行上指定的输出文件类型是共享库。
如果输出是共享库，则返回非零 （-1）。否则返回零 （0）。
只有 、 、 或 中的一个将计算


-------------------------------------------------------- KeyGTK3PgDdfboutexe ----

__FB_OUT_EXE__   _编译_输出EXE
  
编译器设置的内部定义（宏值）

语法
__FB_OUT_EXE__

描述
__FB_OUT_EXE__指示编译时编译器命令行上指定的输出文件类型是可执行文件。
如果输出是可执行文件，则返回非零 （-1）。否则返回零 （0）。
只有 、 、 或 中的一个将


-------------------------------------------------------- KeyGTK3PgDdfboutlib ----

__FB_OUT_LIB__   _编译_输出LIB
  
编译器设置的内部定义（宏值）

语法
__FB_OUT_LIB__

描述
__FB_OUT_LIB__指示编译时编译器命令行上指定的输出文件类型是静态库。
如果输出是静态库，则返回非零 （-1）。否则返回零 （0）。
只有 、 、 或 中的一个将计算


-------------------------------------------------------- KeyGTK3PgDdfboutobj ----

__FB_OUT_OBJ__   _编译_输出OBJ
  
编译器设置的内部定义（宏值）

语法
__FB_OUT_OBJ__

描述
__FB_OUT_OBJ__指示编译时编译器命令行上指定的输出文件类型是对象模块。
如果输出是对象模块，则返回非零 （-1）。否则返回零 （0）。
只有一个 、 、 或 的计算结


-------------------------------------------------------- KeyGTK3PgDdfbpcos ----

__FB_PCOS__   _编译常规PC
  
编译器设置的内部定义

语法
__FB_PCOS__

描述
定义在编译时创建的操作系统，如果操作系统具有类似于常见 PC 操作系统的文件系统行为，例如 DOS?


-------------------------------------------------------- KeyGTK3PgDdfbppc ----

__FB_PPC__
  
编译器设置的内部定义

语法
__FB_PPC__

描述
定义编译时创建的编译目标是否?


-------------------------------------------------------- KeyGTK3PgDdfbquote ----

__FB_QUOTE__
  
编译器执行的内部定义（宏）。

语法
__FB_QUOTE__( arg )

参数
arg
论点

描述
将参数转换为字符串，类似于 stringize 运算符 （#），但可以在任何位置使用（将在转换前展开参数）。
更准确地说，与通过参数传递的文本相比，返回一个多引号文本（前缀为 ?


-------------------------------------------------------- KeyGTK3PgDdfbsignature ----

__FB_SIGNATURE__   _编译_编译签名
  
编译器设置的内部定义（宏字符串）

语法
__FB_SIGNATURE__


-------------------------------------------------------- KeyGTK3PgDdfbsse ----

__FB_SSE__   _编译_SSE
  
编译器设置的内部定义

语法
__FB_SSE__

描述
如果启用了 SSE 浮?


-------------------------------------------------------- KeyGTK3PgDdfbuniqueid ----

__FB_UNIQUEID__
  
编译器执行的内部定义（宏）。

语法
__FB_UNIQUEID__( stack-id )

参数
stack-id
要访问的堆栈的名称

描述
获取由 标识的堆栈顶部的标识符（不修改堆栈的大小）。
 （允许将新的唯一标识符推送到堆栈，并允许从堆栈中弹出标识符）
注意：stack-id__FB_UNIQUEID_PUSH____FB_UNIQUEID_PO


-------------------------------------------------------- KeyGTK3PgDdfbuniqueidpop ----

__FB_UNIQUEID_POP__
  
编译器执行的内部定义（宏）。

语法
__FB_UNIQUEID_POP__( stack-id )

参数
stack-id
要弹出的堆栈的名称

描述
从标识的堆栈中弹出一个标识符（堆栈的大小减小 1）。
 （允许获取堆栈顶部的标识符，并允许将新的唯一标识符推送到堆栈）
注意：stack-id__FB_UNIQUEID____FB_UNIQUEID_PUSH__


-------------------------------------------------------- KeyGTK3PgDdfbuniqueidpush ----

__FB_UNIQUEID_PUSH__
  
编译器执行的内部定义（宏）。

语法
__FB_UNIQUEID_PUSH__( stack-id )

参数
stack-id
要推送的堆栈的名称

描述
将新的唯一标识符推送到 由 标识的堆栈（堆栈的大小增加 1）。
 （允许在堆栈顶部获取标识符，并允许从堆栈中弹出标识符）
注意：stack-id__FB_UNIQUEID____FB_UNIQUEID_POP__



-------------------------------------------------------- KeyGTK3PgDdfbunix ----

__FB_UNIX__   _编译_UNIX
  
编译器设置的内部定义

语法
__FB_UNIX__

描述
定义在编译时创建的操作系统，如果操?


-------------------------------------------------------- KeyGTK3PgDdfbunquote ----

__FB_UNQUOTE__
  
编译器执行的内部定义（宏）。

语法
__FB_UNQUOTE__( arg )

参数
arg
论点

描述
采用文本字符串并将其转换回标记。
更准确地说，与通过参数传递的文本相比，返回一个带子引?


-------------------------------------------------------- KeyGTK3PgDdfbvectorize ----

__FB_VECTORIZE__   _编译_编号级别
  
编译器设置的内部定义

语法
__FB_VECTORIZE__

描述
定义为由 


-------------------------------------------------------- KeyGTK3PgDdFBVerMajor ----

__FB_VER_MAJOR__   _编译_主版本号
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_VER_MAJOR__

Description
__FB_VER_MAJOR__ will return the major version of FreeBASIC currently being used.  For example, the major version is 0 for FreeBASIC 0.90, and will remain 0 until FreeBASIC version


-------------------------------------------------------- KeyGTK3PgDdFBVerMinor ----

__FB_VER_MINOR__   _编译_次版本号
  
编译器设置的内部定义（宏值）

语法
__FB_VER_MINOR__

描述
__FB_VER_MINOR__将返回当前正在使用的 FreeBASIC 的次要版本?


-------------------------------------------------------- KeyGTK3PgDdFBVerPatch ----

__FB_VER_PATCH__   _编译_版本修订
  
编译器设置的内部定义（宏值）

语法
__FB_VER_PATCH__

描述
__FB_VER_PATCH__将返回当前正在使用的FreeBASIC版本的补丁/颠覆/修订版号。例如，对于 FreeBAS


-------------------------------------------------------- KeyGTK3PgDdfbversion ----

__FB_VERSION__   _编译_版本号
  
编译器设置的内部定义（宏字符串）

语法
 __FB_VERSION__



-------------------------------------------------------- KeyGTK3PgDdfbwin32 ----

__FB_WIN32__   _编译_Win32
  
编译器设置的内部定义

语法
__FB_WIN32__

描述
如果编译到 Win（32 位或 64 位）目标，则定义在编译时不创建值。在 Win 托管版本中为默认值，如果使用 -target win32 或 -


-------------------------------------------------------- KeyGTK3PgDdfbx86 ----

__FB_X86__
  
编译器设置的内部定义

语法
__FB_X86__

描述
定义编译时创建的编译目标是否使用 X


-------------------------------------------------------- KeyGTK3PgDdfbxbox ----

__FB_XBOX__   _编译_XBOX
  
编译器设置的内部定义

语法
__FB_XBOX__

描述
定义时不使用在编译时使用 -target xbox 命令行选项时创


-------------------------------------------------------- KeyGTK3PgDdfile ----

__FILE__   __文件__
  
编译器设置的内部定义（宏字符串）

语法
__FILE__

描述
替换为引用的源文件名?


-------------------------------------------------------- KeyGTK3PgDdfilenq ----

__FILE_NQ__   __文件_未用
  
编译器设置的内部定义（宏字符串）

语法
__FILE_NQ__

描述


-------------------------------------------------------- KeyGTK3PgDdfunction ----

__FUNCTION__   __函数__
  
编译器设置的内部定义（宏字符串）

语法
__FUNCTION__

描述
替换为当前功能块的引号名称。
它的正常用途是在调试中报告错误的值。
如果在模块级别使用，则给定的?


-------------------------------------------------------- KeyGTK3PgDdfunctionnq ----

__FUNCTION_NQ__   __函数_未引用__
  
编译器设置的内部定义（宏字符串）

语法
__FUNCTION_NQ__

描述
替换为当前功能块（如果使用）的非引号名称。
如果在模块级别使用，则给定的函数名称将用于主模块或其他模块。?


-------------------------------------------------------- KeyGTK3PgDdline ----

__LINE__   __行__
  
编译器设置的内部定义（宏值）

语法
__LINE__

描述
替换为所用源文件的


-------------------------------------------------------- KeyGTK3PgDdpath ----

__PATH__   __路径__
  
编译器设置的内部定义（宏字符串）

语法
__PATH__

描述



-------------------------------------------------------- KeyGTK3PgDdtime ----

__TIME__   __时间__
  
编译器设置的内部定义（宏值）

语法
__TIME__

描述
替换已使用的文本字符串


-------------------------------------------------------- KeyGTK3PgDeallocate ----

Deallocate   内存分配清除
  
释放以前分配的内存

语法
Declare Sub Deallocate cdecl ( ByVal pointer As Any Ptr )

用法
Deallocate( pointer )

参数
pointer
以前分配的缓冲区的地址。

描述
此过程将释放以前使用 分配的内存。 必须是有效的指针。过程返回后，将呈现为无效（指向无效的内存地址），并且其使用（取消引用或再次调用Deallocate）将导致未定义的行为


-------------------------------------------------------- KeyGTK3PgDeclare ----

Declare   声明
  
声明模块级或成员过程

语法
Declare Sub name [ param_list ]
Declare Function name [ param_list ] [ ByRef ] As return_type
Declare Operator op_symbol param_list [ [ ByRef ] As return_type ]

Type T
Declare Constructor [ param_list ]
Declare Destructor
Declare Sub name [ param_list ]
Declare Function name [ param_list ] [ ByRef ] As return_type
Declare Operator name [ param_list ] [ [ ByRef ] As return_type ]
Declare Property name [ ( [ param_list ] ) ] [ [ ByRef ] As return_type ]
End Type

参数
param_list
用逗号分隔的括号括起来的参数列表。
return_type
、或 过程的返回类型。FunctionOperatorProperty
name
过程的名称或符号。
op_symbol
运算符的名称或符号。
T
新的用户定义类型的名称。

描述
该语句声明 a 、 、 、 或 。
可以在代码中引用该过程，而无需查看其定义，尽管它必须在某个位置定义。从本质上讲，该声明引入


-------------------------------------------------------- KeyGTK3PgDefbyte ----

DefByte   默认字节
  
为变量名称范围指定默认数据类型

语法
DefByte start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefByte指定未使用数据类型声明（或根


-------------------------------------------------------- KeyGTK3PgDefdbl ----

DefDbl   默认双精型
  
为变量名称范围指定默认数据类型

语法
DefDbl start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefDbl指定未使用数据类型声明（或根?


-------------------------------------------------------- KeyGTK3PgDefined ----

defined   预定义
  
预处理器函数，用于测试是否定义了交易品种

语法
defined (symbol_name)

参数
symbol_name
要测试的品种的名称

返回值
如果已定义交易品种，则返回非零 （），否则返回零 （）。-10

描述
给定符号名称，如果已定义符号，则预处?


-------------------------------------------------------- KeyGTK3PgDefint ----

DefInt   默认整型
  
为变量名称范围指定默认数据类型

语法
DefInt start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefInt指定未使用数据类型声明（或根本?


-------------------------------------------------------- KeyGTK3PgDeflng ----

DefLng   默认长型
  
为变量名称范围指定默认数据类型

语法
DefLng start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefLng指定未使用数据类型声明（或根


-------------------------------------------------------- KeyGTK3PgDeflongint ----

DefLongInt   默认长整型
  
为变量名称范围指定默认数据类型

语法
DefLongInt start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefLongInt指定未使用数据类型声明（或根本


-------------------------------------------------------- KeyGTK3PgDefshort ----

DefShort   默认短整型
  
为变量名称范围指定默认数据类型

语法
DefShort start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefShort指定未使用数据类型声明（或根


-------------------------------------------------------- KeyGTK3PgDefsng ----

DefSng   默认单精型
  
为变量名称范围指定默认数据类型

语法
DefSng start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefSng指定未使用数据类型声明（或根?


-------------------------------------------------------- KeyGTK3PgDefstr ----

DefStr   默认字符
  
为变量名称范围指定默认数据类型

语法
DefStr start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefStr指定未使用数据类型声明（或根本


-------------------------------------------------------- KeyGTK3PgDefubyte ----

DefUByte   默认U字节
  
为变量名称范围指定默认数据类型

语法
DefUByte start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefUByte指定未使用数据类型声明（或根?


-------------------------------------------------------- KeyGTK3PgDefuint ----

DefUInt   默认U整型
  
为变量名称范围指定默认数据类型

语法
DefUInt start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefUInt指定未使用数据类型声明（或根本不


-------------------------------------------------------- KeyGTK3PgDefulongint ----

Defulongint   默认U长整型
  
为变量名称范围指定默认数据类型

语法
Defulongint start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
Defulongint指定未使用数据类型声明（或根本?


-------------------------------------------------------- KeyGTK3PgDefushort ----

DefUShort   默认U短整型
  
为变量名称范围指定默认数据类型

语法
DefUShort start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefUShort指定未使用数据类型声明（或根?


-------------------------------------------------------- KeyGTK3PgDestructor ----

Destructor   析构函数
  
当类或用户定义的类型超出范围或被销毁时自动调用

语法
Type typename
field declarations
Declare Destructor ( )
End Type

Destructor typename ( ) [ Export ]
statements
End Destructor

参数
typename 
的名称TypeClass

描述
当用户定义的或变量超出范围或使用运算符显式销毁时，将调用析构函数方法。
是为其声明和定义方法的类型的名称。的名称解析遵循与 在 中使用的过程相同的规则。
该方法?


-------------------------------------------------------- KeyGTK3PgDim ----

Dim   定义
  
声明变量

语法
Dim [Shared] name1 As DataType [, name2 As DataType, ...]
或
Dim [Shared] As DataType name1 [, name2, ...]
阵 列：
Dim name ( [lbound To] ubound [, ...] ) As DataType
Dim name ( Any [, Any...] ) As DataType
Dim name ( ) As DataType
初始值设定项：
Dim scalar_symbol As DataType = expression | Any
Dim array_symbol (arraybounds) As DataType = { expression [, ...] } | Any
Dim udt_symbol As DataType = ( expression [, ...] ) | Any

描述
按名称声明变量并保留内存以容纳它。
变量必须先声明，然后才能在 -lang fb 方言中使用，或者在其他方言中使用。只有在 -lang qb 和 -lang fblite 方言中，变量可以在不首先声明它们的情


-------------------------------------------------------- KeyGTK3PgDir ----

Dir   目录取名称
  
在文件系统中搜索并返回有关项目的信息;执行目录搜索属性

语法
# Include "dir.bi"

Declare Function Dir ( ByRef item_spec As Const String, ByVal attrib_mask As Integer = fbNormal, ByRef out_attrib As Integer ) As String
Declare Function Dir ( ByRef item_spec As Const String, ByVal attrib_mask As Integer = fbNormal, ByVal p_out_attrib As Integer Ptr = 0 ) As String
Declare Function Dir ( ByVal attrib_mask As Integer = fbNormal, ByRef out_attrib As Integer ) As String
Declare Function Dir ( ByVal attrib_mask As Integer = fbNormal, ByVal p_out_attrib As Integer Ptr = 0 ) As String

用法
result = Dir( item_spec, [ attrib_mask ], out_attrib ] )
result = Dir( item_spec [, [ attrib_mask ] [, p_out_attrib ] ] )
result = Dir( out_attrib )
result = Dir( [ p_out_attrib ] )

参数
item_spec
要与项目名称匹配的模式。
attrib_mask
要匹配项属性所依据的位掩码。
out_attrib
引用分配给找到的每个项的属性（如果有）的位掩码。
p_out_attrib
指向分配了找到的每个项属性（如果有）的位掩码的指针。

返回值
如果未找到与名称或属性掩码匹配的项目，则 （or ） 将赋值为零并返回空字符串。否则，（或 ）将分配项目的属性掩码，并返回不带路径的项目名称。item_specattrib_maskout_attrib*p_out_attribout_attrib*p_out_attrib

描述
Dir返回与作?


-------------------------------------------------------- KeyGTK3PgDo ----
Do   重复
Description



-------------------------------------------------------- KeyGTK3PgDoloop ----

Do...Loop
  
用于循环的控制流语句

语法
Do [ { Until | While } condition ]
[ statement block ]
Loop
or
Do
[ statement block ]
Loop [ { Until | While } condition ]

描述
该语句执行以下语句块中的语句，直到/同时条件（如果有）的计算结果为 true。
如果使用，则当条件计算结果为 true 时，语句将停止重复语句块。关键字具有相反的效果，如果条件计算结果为 false?


-------------------------------------------------------- KeyGTK3PgDots ----

... (Ellipsis)
  

	用于代替过程参数传递可变数量的参数，或用作数组声明中的上限，以表示元素数将由初始值设定项确定。

语法
Declare { Sub | Function } proc_name cdecl ( param_list, ... )  { | [ ByRef ] As return_type }

#define identifier( [ parameters, ] variadic_parameter... ) body

Dim array_symbol ([lbound To] ...) [As datatype] => { expression_list }

描述
可变参数程序
省略号（三个点，）在过程声明和定义中用于指示变量参数列表。
必须始终指定第一个参数（至少），并且必须使用 C 调用约定调用该过程。
?


-------------------------------------------------------- KeyGTK3PgDouble ----

Double   双精度
  
标准数据类型：64 位浮点

语法
Dim variable As Double

描述
Double 是一种 64 位浮点数据类型，用于存储更精确的十进制数。它们可以在 到 的范围内保存正值，也可以在 到 的范围内保存负值，或者保存为 零 （）。它们最多包含 53 位精度，或大约 15 位?


-------------------------------------------------------- KeyGTK3PgDraw ----

Draw   绘图
  
用于序列化像素绘图的声明

语法
Draw [target,] cmd

参数
target
要利用的缓冲区
cmd
包含命令序列的字符串

描述
绘图将通过 / 缓冲区（如果指定）在当前工作页面集上进行。
该语句可用于同时发出多个绘图命令;快速绘制图形很有用。命令字符串接受以下命令：
用于打印像素的命令：Sc


-------------------------------------------------------- KeyGTK3PgDrawString ----

Draw String   绘图
  
用于将文本呈现到图像或屏幕的图形语句。

语法
Draw String [buffer,] [STEP] (x, y), text [,color [, font [, method [, (alpha|blender) [, parameter] ] ] ] ]

用法
Draw String [buffer,] [STEP] (x, y), text [, color]
Draw String [buffer,] [STEP] (x, y), text , , font [, method [, alpha ] ]
Draw String [buffer,] [STEP] (x, y), text , , font, Custom, blender [, parameter]

参数
buffer
要在其上绘制字符串的子画面。如果未提供，它将被绘制到屏幕上。
STEP
使用相对坐标。如果添加，则相对于最后一个绘制点平移 x 和 y 坐标。STEP
x,y
要绘制的水平/垂直位置，相对于屏幕的左上角（除非使用 - 见上文）。文本的左上角将在此位置绘制。STEP
text
包含要绘制的文本的字符串
color
如果未提供字体，则允许您选择文本的颜色。如果省略，则使用默认前台。
如果提供了字体，则忽略，并且字体本身指定每个像素的颜色。Colorcolor
font
包含自定义字体的图像缓冲区。如果未提供字体，则使用当前文本分辨率的标准字体，并忽略以下参数。
method|Custom
指定如何在目标曲面顶部绘制字体字符。允许使用与为语句找到的相同方法，唯一的区别是默认方法是用于此函数。此参数仅适用于自定义字体。PutTrans
alpha
alpha 值，范围为 0-255。此参数仅适用于 或 方法。AddAlpha
b


-------------------------------------------------------- KeyGTK3PgDylibfree ----

DyLibFree   动态库卸载
  
从内存中卸载动态链接库

语法
Declare Sub DyLibFree ( ByVal libhandle As Any Pointer )

用法
DyLibFree( libhandle )

参数
libhandle
要卸载的库的句柄。

描述
DyLibFree用于在运行时库中发布以前


-------------------------------------------------------- KeyGTK3PgDylibload ----

DyLibLoad   动态库加载
  
在运行时加载到动态链接库 （DLL） 到内存中

语法
Declare Function DyLibLoad ( ByRef libname As String ) As Any Pointer

用法
result = DyLibLoad ( libname )

参数
libname
包含要加载的库的名称。String

返回值
已加载库的句柄。零对错误Pointer

描述
DyLibLoad用于在运行时库中链接到程序。此函数执行链接并返回一个句柄，该句柄在调用库中的函数时必须?


-------------------------------------------------------- KeyGTK3PgDylibsymbol ----

DyLibSymbol   动态库地址
  
返回 dll 中函数或变量的地址

语法
Declare Function DyLibSymbol ( ByVal libhandle As Any Ptr, ByRef symbol As String ) As Any Ptr
Declare Function DyLibSymbol ( ByVal libhandle As Any Ptr, ByVal symbol As Short ) As Any Ptr

用法
result = DyLibSymbol ( libhandle, symbol )

参数
libhandle
返回的 DLL 的 Any Ptr 句柄DyLibLoad
symbol
一个字符串，包含函数的名称，或库中要返回的地址的变量。仅在 Windows 中，也可以是包含函数/变量的序号。Short

返回值
A 表示库中的函数或变量。
如果函数失败，则返回值为 0。Pointer

描述
DyLibSymbol返回一个指针，该指针指向 在 所指向的 dll 中名为 的变量或函数。 是通过使用 加载 dll


-------------------------------------------------------- KeyGTK3PgElse ----
Else   否
Description



-------------------------------------------------------- KeyGTK3PgElseif ----
ElseIf   又
Description



-------------------------------------------------------- KeyGTK3PgEncoding ----

Encoding   编码类型
  
指定文本文件的字符格式

语法
Open filename for {Input|Output|Append} Encoding "utf-8"|"utf-16"|"utf-32"|"ascii" as [#]filenum 

参数
filename对于 {输入|输出|追加}
要打开的文件名，或InputOutputAppend
Encoding "utf-8"|"utf-16"|"utf-32"|"ascii"
指示文件的编码类型
filenum
要与打开的文件关联的未使用的文件编号

描述
Encoding指定 Unicode 文本文件的格式，因此并使用正确的编码。如果从语句中省略，


-------------------------------------------------------- KeyGTK3PgEnd ----

End (Statement)   结束
  
控制流语句以结束程序。

语法
Declare Sub End ( ByVal retval As Long = 0 )

用法
End [ retval ]

参数
retval
错误代码返回系统。

描述
用于退出程序并返回操作系统。可以指定可选的整数返回值以指示系统的错误代码。如果未给出返回值，则在程序结束时自动返回值 。
此语句的用法不会完全关闭范围。局部变量不会自


-------------------------------------------------------- KeyGTK3PgEndblock ----

End (Block)   结束
  
指示复合语句块的结束。

语法
End { Sub | Function | If  | Select  | Type  | Enum  | Scope  | With  | Namespace  | Extern  | Constructor  | Destructor  | Operator | Property }

描述
用于指示最新代码块的结束。
块的类型必须包含在命令中：、 或 之一。
结束 一个 、 、 、 、 或 块也会关闭该块内定义的变量的作用域。当作用域关闭时，作用域内定义的变量将被销毁，并根?


-------------------------------------------------------- KeyGTK3PgEndif ----
End If   结
Description



-------------------------------------------------------- KeyGTK3PgEnum ----

Enum   枚举
  
声明枚举类型。

语法
Enum [typename [ Explicit ] ]
symbolname [= expression] [, ...]
...
End Enum

参数
typename
的名称Enum
symbolname
常量的名称
expression
常量表达式
Explicit
要求符号必须由typename.symbolname

描述
Enum，表示声明与离散值对应的符号名称列表。如果未给出初始值，则第一项将设置为 。除非给出，否则每个后续交易品种的值都比前一个交易品种多一个。
符号可以各在自己的?


-------------------------------------------------------- KeyGTK3PgEnviron ----

Environ   环境变量
  
返回系统环境变量的值

语法
Declare Function Environ ( ByRef varname As Const String ) As String

用法
result = Environ[$]( varname )

参数
varname
环境变量的名称。

返回值
返回环境变量的文本值，如果变量不


-------------------------------------------------------- KeyGTK3PgEof ----

EOF   文件到尾
  
检查是否已到达打开文件的末尾

语法
Declare Function EOF ( ByVal filenum As Long ) As Long

用法
result = EOF( filenum )

参数
filenum
打开的文件的文件编号。

返回值
如果已达到文件末尾，则返回 true （-1），否则返回零 （0）。

描述
从 中打开的文件读取 时，了解何时到达文件末尾非常有用，从而避免了因读取文件末尾而导致的错误。使?


-------------------------------------------------------- KeyGTK3PgErase ----

Erase   擦除
  
擦除数组的声明

语法
Declare Sub Erase ( array As Any [, ... ] )

用法
Erase( array0 [, array1 ... arrayN ] )

参数
array
要擦除的数组。

描述
在固定长度的数组上使用会重置所有元素，而不会释放分配的内存。
在物体的情况下，有破坏然后重建。
在可变长度数组（数组大小已调整）上使用可释放分配?


-------------------------------------------------------- KeyGTK3PgErfn ----

Erfn   错误函数
  
错误报告功能

语法
Declare Function Erfn ( ) As ZString Ptr

用法
result = Erfn ( ) 

返回值
返回一个指针，该指针指向标识发生错误的函数的字符串。
如果未使用 -exx 编译


-------------------------------------------------------- KeyGTK3PgErl ----

Erl   错误行
  
错误处理函数，用于返回发生错误的行

语法
Declare Function Erl ( ) As Integer

用法
result = Erl

返回值
一个 Integer 返回值，其中包含上次发生错误的行号。

描述
Erl将返回上次发生错误的行号。如果未发生任?


-------------------------------------------------------- KeyGTK3PgErmn ----

Ermn   错误模块
  
错误报告功能

语法
Declare Function Ermn ( ) As ZString Ptr

用法
result = Ermn ( ) 

返回值
返回一个指针，该指针指向标识发生错误的模块的字符串。
如果未使用 -exx 编


-------------------------------------------------------- KeyGTK3PgErr ----

Err   错误
  
获取或设置运行时错误号

用法
result = Err( )
or
Err = number

描述
该函数返回 FreeBASIC 运行时错误号（32 位），该错误号可由内置语句和函数设置，或由程序通过 或 设置。与 不同，设置错误号而不调用错误处理程序。
有关预定义的运行时错误号及其相关含义?


-------------------------------------------------------- KeyGTK3PgError ----

Error   错误号
  
用于强制生成错误的错误处理语句

语法
Declare Sub Error ( errno As Integer )

用法
Error number

参数
number
要生成的错误号

描述
Error 调用使用 On Error 指定的错误处理程序，或者，如果未设置任何错误处理程序，则中止程序，打印?


-------------------------------------------------------- KeyGTK3PgEvent ----

Event (Message Data From Screenevent)   事件
  
ScreenEvent 用于返回事件数据的预定义结构 （UDT） fbgfx.bi

语法
#include once "fbgfx.bi"
using fb
Dim variable As Event

描述
为了清楚起见，我们在这里报告结构：
 
该字段将包含事件类型 ID，而其余 4 个整数将保存事件类型的敏感数据。
 事件类型EVENT
Type Event Field = 1
    Type As Long
    Union



-------------------------------------------------------- KeyGTK3PgExec ----

Exec   外部调用
  
临时将执行转移到外部程序

语法
Declare Function Exec ( ByRef program As Const String, ByRef arguments As Const String ) As Long

用法
result = Exec( program, arguments )

参数
program
要将控制权移交给的程序（可执行文件）的文件名（包括文件路径）。
arguments
要传递给程序的命令行参数。

返回值
程?


-------------------------------------------------------- KeyGTK3PgExepath ----

ExePath   程序路径
  
返回正在运行的程序的路径

语法
Declare Function ExePath ( ) As String

用法
result = ExePath

返回值
设置为正在运行的程序的路径的变量。String


-------------------------------------------------------- KeyGTK3PgExit ----

Exit   退出
  

	Control flow statement to exit a compound statement block

Syntax
Exit {Do | For | While | Select }
Exit {Sub | Function | Operator | Constructor | Destructor | Property }

Exit {Do [, Do [ , ...] ] |
For [, For [ , ...] ] | 
While [, While, [...] ] | 
Select [, Select [ , ...] ] }


Description
Leaves a code block such as a , , , , , , , , , or a   block. The execution skips the rest of the block and goes to the line after its end.

Where there are multiple  /  /  /  blocks


-------------------------------------------------------- KeyGTK3PgExp ----

Exp   指数
  
提高到给定数字的幂的返回e

语法
Declare Function Exp cdecl ( ByVal number As Double ) As Double

用法
result = Exp( number )

参数
number
那被提升到权力。Doublenumbere

返回值
将的 Double 值返回为 的幂。enumber

描述
数学常数，也称为欧拉常数，是 和 的基数，并且是一个无理数和超越数。二十个有效数字的值为：。所需的参数可以是函数范围内的任何有效数值表达式。如果太大，则返?


-------------------------------------------------------- KeyGTK3PgExport ----

Export   导出
  
定义说明符，用于指示 DLL 中的过程应从其他程序中可见

语法
{ Sub | Function } proc_name ( argumentlist ) [ [ ByRef ] As datatype ] Export

描述
如果在 DLL 中使用此子句定义了函数，则该函数将添加到公共导出表中，因此外部


-------------------------------------------------------- KeyGTK3PgExtends ----

Extends   派生类型
  
指定从中派生新类型的基类型

语法
Type|Union typename Extends base_typename
...
End Type|Union

描述
Extends声明派生自 。派生的用户定义类型 ，继承基类型的字段和方法。 对象可以代替对象使用。从继承的字段和方法将像 的成员一样隐式访问。
但是，如果继承的成员具有相同的标识符，则?


-------------------------------------------------------- KeyGTK3PgExtendsWstring ----

Extends Wstring   派生类型
  
指定继承 Wstring 行为的类型

语法
Type|Union typename Extends Wstring [, base_typename]
...
End Type|Union

描述
Extends Wstring声明继承 的属性和行为。目的是允许用户创建自定义字符串类型（即动态内存管理），这些类型可以很好地集成到现有的内置 fbc 编译器中（与 fbc 类型的良好互操作性）。
使用合


-------------------------------------------------------- KeyGTK3PgExtendsZstring ----

Extends Zstring   派生类型
  
指定继承 Z 字符串行为的类型

语法
Type|Union typename Extends Zstring [, base_typename]
...
End Type|Union

描述
Extends Zstring声明继承 的属性和行为。目的是允许用户创建自定义字符串类型（即动态内存管理），这些类型可以很好地集成到现有的内置 fbc 编译器中（与 fbc 类型的良好互操作性）。
使?


-------------------------------------------------------- KeyGTK3PgExtern ----

Extern   外部扩展
  
声明具有外部链接的变量、数组或对象

语法
Extern [ Import ] symbolname[ (subscripts) ] [ Alias "aliasname" ] As DataType [, ...]

参数
symbolname
变量、数组或对象的名称。
aliasname
变量、数组或对象的备用外部名称。

描述
声明为外部名称，这意味着它是外部模块的全局模块，包括那些要编译为静态和动态库 （DLL） 的模块。
仅声明变量、数组和对象，而不定义它们（与 或 ?


-------------------------------------------------------- KeyGTK3PgExternBlock ----

Extern...End Extern
  
语句块，允许调用为特定语言或平台编译的函数。

语法
Extern { "C" | "C++" | "Windows" | "Windows-MS" | "rtlib" } [ Lib "libname" ]
declarative statements
End Extern

描述
Extern块为过程提供默认调用约定，并强制要求特定的名称修饰。
块为过程提供了默认的调用约定，并且还保留了其中声明的所有名称的大小写。在没有 EXTERN 块的情况下，可以通过与包?


-------------------------------------------------------- KeyGTK3PgFalse ----

False   假
  
编译器设置的固有常量

语法
Const False As Boolean

描述
在使用的位置


-------------------------------------------------------- KeyGTK3PgFBArray ----

Fbarray (Array Descriptor Structure And Access)
  
包含文件中的预定义结构 （UDT） 和过程声明，可用于访问数组描述符数据字段。fbc-int/array.bi

语法
从：./inc/fbc-int/array.bi

# If __FB_LANG__ = "fb"
Namespace FBC
# endif

Const FB_MAXDIMENSIONS As Integer = 8

Type FBARRAYDIM
    Dim As UInteger elements     “”元素数

    Dim As Integer LBound        '' 尺寸下限

    Dim As Integer UBound        '' 尺寸上限

End Type

Const FBARRAY_FLAGS_DIMENSIONS = &h0000000f    在 dimTb（） 中分配的条目数

Const FBARRAY_FLAGS_FIXED_DIM  = &h00000010    '' 数组具有固定数量的维度

Const FBARRAY_FLAGS_FIXED_LEN  = &h00000020    '' 数组指向固定长度内存

Const FBARRAY_FLAGS_RESERVED   = &hffffffc0    '' 保留，请勿使用


Type FBARRAY
    Dim As Any Ptr index_ptr     '' @array（0， 0， 0， ... ）

    Dim As Any Ptr base_ptr      内存在数组最低边界处开始的''

    Dim As UInteger size         “”已分配内容的字节大小

    Dim As UInteger element_len  单个元素的“”字节大小

    Dim As UInteger dimensions   '' 尺寸数

    Dim As UInteger flags        “” FBARRAY_FLAGS_*


    '' 注意尺寸的数量;全血细胞计数可分配

    “”一个较小的描述符，少于 FB_MAXDIMENSIONS

    dimTb（） 中的 ''，如果在编译时已知它们

    永远不需要“”。始终尊重数量

    访问 dimTb（） 时的'' 尺寸


    Dim As FBARRAYDIM dimTb(0 To FB_MAXDIMENSIONS-1)
End Type

Extern "rtlib"
    Declare Function ArrayDescriptorPtr Alias "fb_ArrayGetDesc" _
        ( array() As Any ) As FBC.FBARRAY Ptr
    Declare Function ArrayConstDescriptorPtr Alias "fb_ArrayGetDesc" _
        ( array() As Const Any ) As Const FBC.FBARRAY Ptr
End Extern

# If __FB_LANG__ = "fb"
End Namespace
# endif
        
用法
#include once "fbc-int/array.bi"
using FBC

' then:
Dim pd As FBARRAY Ptr
...
pd = ArrayDescriptorPtr ( array() )

' or safer:
Dim pd As Const FBARRAY Ptr
...
pd = ArrayConstDescriptorPtr ( array() )

参数
pd 
指向数组描述符的指针的名称
array 


-------------------------------------------------------- KeyGTK3PgFBMemcopy ----

Fb_Memcopy
  
将内存块从一个位置复制到另一个位置

语法
Declare Function fb_memcopy cdecl ( ByRef dst As Any, ByRef src As Any, ByVal bytes As UInteger ) As Any Ptr

用法
[result =] fb_memcopy( dst, src, bytes )

参数
dst
目标内存的起始地址
src
源内存的起始地址
bytes
要复制的字节数

返回值
返回目标内存的起始地址。

描述
fb_memcopy将给定数量的字节从内存位置复制到内存位置。
每个起始地址都取自对变量或数组元素的引用。
内存区域不得重叠（否则，不能保证?


-------------------------------------------------------- KeyGTK3PgFBMemcopyclear ----

fb_MemCopyClear
  
将内存块的第一部分从一个位置复制到另一个位置，并清除其余部分

语法
Declare Sub fb_MemCopyClear ( ByRef dst As Any, ByVal dstlen As UInteger, ByRef src As Any, ByVal srclen As UInteger )

用法
fb_memcopy( dst, dstlen, src, srclen )

参数
dst
目标内存的起始地址
dstlen
要写入的字节数
src
源内存的起始地址
srclen
要复制的第一个字节数（其他已清除）

描述
fb_memcopycopy将给定数量的字节（）从内存位置复制到内存位置，但只有第一个字节被真正复制，其余的被清除（-字节）。
每?


-------------------------------------------------------- KeyGTK3PgFBMemmove ----

Fb_Memmove
  
将内存块从一个位置复制到另一个位置

语法
Declare Function fb_memmove cdecl ( ByRef dst As Any, ByRef src As Any, ByVal bytes As UInteger ) As Any Ptr

用法
[result =] fb_memmove( dst, src, bytes )

参数
dst
目标内存的起始地址
src
源内存的起始地址
bytes
要复制的字节数

返回值
返回目标内存的起始地址。

描述
fb_memmove将给定数量的字节从内存位置复制到内存位置。每个起始地址都取自对变量或数组元素的引用。
复制就像使用中间缓冲区一样进行，允?


-------------------------------------------------------- KeyGTK3PgField ----

Field   字段
  
指定字段对齐方式。

语法
Type|Union typename Field = { 1 | 2 | 4 }
...
End Type|Union

描述
Field可用于打包或比默认布局更紧密。最常用的值是 ，这会导致 尽可能紧密地打包 或，而不会在字段之间或 末尾添加任何填充字节。 只能用于减少字段对齐?


-------------------------------------------------------- KeyGTK3PgFileattr ----

FileAttr   文件属性
  
返回有关打开的文件编号的信息

语法
Declare Function FileAttr ( ByVal filenum As Long, ByVal returntype As Long = 1 ) As Integer

用法
#include "file.bi"
result = FileAttr( filenum, [ returntype ] )

或

#include "vbcompat.bi"
result = FileAttr( filenum, [ returntype ] )

参数
filenum
打开的文件或设备的文件编号Open
returntype
一个整数值，指示要返回的信息类型。

返回值
与返回类型关联的值，否则出错时为 0。

描述
根据提供的文件号返回有关文件编号的信息returntype
价值描述不断1文件模式fbFileAttrMode2文件句柄fbFileAttrHandle3编码fbF


-------------------------------------------------------- KeyGTK3PgFilecopy ----

FileCopy   文件复制
  
复制文件

语法
Declare Function FileCopy ( ByVal source As ZString Ptr, ByVal destination As ZString Ptr ) As Long

用法
#include "file.bi"
FileCopy source, destination

或

#include "file.bi"
result = FileCopy( source, destination )

参数
source
指定要从中复制的文件的文件名的参数。此文件必须存在。String
destination
指定要复制到的文件的文件名的参数。如果此文件存在，它将被覆盖。任何打开的文件句柄当前都不应引用此文件。String

返回值
成功时或发生错误时返回。01

描述
将源文件的内容复制到目标文件中，?


-------------------------------------------------------- KeyGTK3PgFiledatetime ----

FileDateTime   文件日期时间
  
将文件的上次修改日期和时间作为“串行日期”返回 

语法
Declare Function FileDateTime ( ByVal filename As ZString Ptr ) As Double

用法
#include "file.bi"
result = FileDateTime( filename )

或

#include "vbcompat.bi"
result = FileDateTime( filename )

参数
filename
要检索其日期和时间的文件名。



-------------------------------------------------------- KeyGTK3PgFileexists ----

FileExists   文件存在
  
测试文件是否存在

语法
Declare Function FileExists ( ByVal filename As ZString Ptr ) As Long

用法
#include "file.bi"
result = FileExists( filename )

或

#include "vbcompat.bi"
result = FileExists( filename )

参数
filename
用于测试是否存在的文件名。

返回值
如果文件存在，则返回非零 （），否则返回零 （）。-10

描述
FileExists测试文件是否存在。
在内部，它可能会发出Open（）和Close（）函数，这可能会产生后果 - 例如，文


-------------------------------------------------------- KeyGTK3PgFileflush ----

FileFlush
  
将应用程序流缓冲区刷新到系统，或将系统缓冲区刷新到文件

语法
Declare Function FileFlush ( ByVal filenum As Long = -1, ByVal systembuffers As Long = 0 ) As Long

用法
#include "file.bi"
result = FileFlush()
result = FileFlush( filenum )
result = FileFlush( filenum, systembuffers )

参数
filenum
绑定文件或设备的文件编号。如果未给出，或 -1，则刷新所有打开的文件。
systembuffers
如果为非零，则将系统缓冲区刷新到物理设备。默认值为零 （0）。

返回值
返回零 （0） 表示成功，如果无法刷新文件缓冲区，则返回错误代码。

描述
FileFlush将应用程序缓冲输出写入基础流，如果为非零，则写入基础物理?


-------------------------------------------------------- KeyGTK3PgFilelen ----

FileLen   文件大小
  
查找给定文件名的文件的长度

语法
Declare Function FileLen ( filename As String ) As LongInt

用法
#include "file.bi"
result = FileLen(filename)

或

#include "vbcompat.bi"
result = FileLen(filename)

参数
filename
一个参数，指定要返回其长度的文件的文


-------------------------------------------------------- KeyGTK3PgFileseteof ----

FileSetEof
  
设置绑定到文件编号的打开文件的长度

语法
Declare Function FileSetEof ( ByVal filenum As Long ) As Long

用法
#include "file.bi"
result = FileSetEof(fnum)

参数
filenum
绑定文件或设备的文件编号。

返回值
返回零 （0） 表示成功，如果无法设置文件末尾（文件大小），则返回错误代码。

描述
FileSetEof根据当前文件位置设置文件的结尾。文件位置与 中一样基于一个。
当当前文件位置位于文件末尾之前时，文件将被截断。


-------------------------------------------------------- KeyGTK3PgFix ----

Fix   截断
  
返回数字的整数部分，舍入到零

语法
Declare Function Fix ( ByVal number As Single ) As Single
Declare Function Fix ( ByVal number As Double ) As Double
Declare Function Fix ( ByVal number As Integer ) As Integer
Declare Function Fix ( ByVal number As UInteger ) As UInteger

用法
result = Fix( number )

参数
number
要截断的浮点数

返回值
返回 的整数部分，舍入到零。number

描述
等效于： .例如，将返回 ，并将返回 。对于整数类型，返回的数字保持不变。
注意：此函数也等效于 。
一元可以使用用


-------------------------------------------------------- KeyGTK3PgFlip ----

Flip   翻页
  
更改当前视频显示页面

语法
Declare Function Flip ( ByVal frompage As Long = -1, ByVal topage As Long = -1 ) As Long

用法
Flip [ frompage ] [, topage ]

参数
frompage
上一页
topage
要显示的新页面

返回值
如果成功，则返回零 （），或返回非零错误代码以指示失败。0

描述
在普通图形模式下，是 和 的别名。有关详细信息，请参阅。
在 OpenGL 模式下，执行硬件翻页并显示反缓冲器的内容。建议您在 OpenGL 模式下定?


-------------------------------------------------------- KeyGTK3PgFor ----
For   循
Description



-------------------------------------------------------- KeyGTK3PgFormat ----

Format   格式化
  
以指定的格式设置数字的格式

语法
Declare Function Format ( ByVal numerical_expression As Double, ByRef formatting_expression As Const String = "" ) As String

用法
#include "string.bi"
result = Format[$]( numerical_expression, formatting_expression )

参数
numerical_expression
要格式化的数字
formatting_expression
格式化模式

返回值
Format返回一个字符串，其结果的格式设置为格式设置表达式中指示的格式。
格式表达式是一个字符串，可以生成数字或日期时间值。

描述
要恢复有意义的日期时间值，数值表达式必须是从相应函数获取的日期序列。
此函数是 FreeBASIC 的一部分，?


-------------------------------------------------------- KeyGTK3PgFornext ----

For...Next
  
用于循环的控制流语句

语法
For iterator [ As datatype ] = startvalue To endvalue [ Step stepvalue ]
[ statement block ]
Next [ iterator ]

参数
iterator
用于从初始值循环访问到结束值的变量标识符
datatype
如果指定，变量将自动使用类型声明iteratordatatype
startvalue
表示迭代器起始值的表达式
endvalue
用于与迭代器的值进行比较的表达式
stepvalue
每次迭代后添加到迭代器的表达式

描述
循环初始化为 ，然后执行 递增 ， 直到超过 。如果未显式给出，它将设置为 。
和 的值在语句执行后立即存?


-------------------------------------------------------- KeyGTK3PgFrac ----

Frac   小数
  
返回数字的小数部分

语法
Declare Function Frac ( ByVal number As Double ) As Double
Declare Function Frac ( ByVal number As Integer ) As Integer
Declare Function Frac ( ByVal number As UInteger ) As UInteger

用法
result = Frac( number )

参数
number
要获取分数部分的数字或表达式。

返回值
返回数字或表达式的小数部分。

描述
等效于： .
例如，将返回 ，并将返回 。对于整数类型，始终返回该值。
一?


-------------------------------------------------------- KeyGTK3PgFre ----

Fre   内存可用值
  
返回可用内存量

语法
Declare Function Fre ( ByVal value As Long = 0 ) As UInteger

用法
result = Fre( [ value ] )

参数
value
保留未使用的虚拟参数以向后兼容;可以忽略。

返回值
返回可


-------------------------------------------------------- KeyGTK3PgFreefile ----

FreeFile   文件号
  
返回可用文件编号

语法
Declare Function FreeFile ( ) As Long

用法
result = FreeFile

返回值
下一个可用文件编号（如果有），否则为零 （）。0

描述
返回下一个可用文件号的编号，其有效值为 ，或者如果已打开了 255 个文件。此值是文件的必需参数。 在程序员无法跟踪已用文件编号的复杂程序中打开文件时非常有用。


-------------------------------------------------------- KeyGTK3PgFunction ----

Function   函数
  
定义返回值的过程

语法
[Public|Private] Function identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [([parameter_list])] [ ByRef ] As return_type [Static] [Export]
statements
...
{ {Return [return_value]}|{Function = return_value}|{identifier = return_value} }
...
End Function

参数
identifier：函数
的名称：外部可见的（对链接器）名称括在引号中
： 
 ：external_identifierparameter_listparameter[, parameter[, ...]]parameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier：函数中引用的变量的名称。如果参数是数组，则标识符后必须跟空括号。
 ：变量
的类型 ：如果调用中未指定任何参数，则参数的值typedefault_value
return_type：函数
返回的变量的类型：组成函数体
的一个或多个语句：从函数返回的值statementsreturn_value

描述
函数定义一个代码块，该代码块可以使用单个语句（函数调用）执行?


-------------------------------------------------------- KeyGTK3PgFunctionPtr ----

Function Pointer   函数
  
存储指向返回值的过程的指针的数据类型Function

语法
Dim variable As Function [cdecl|pascal|stdcall] [( [parameter_list] )] [ ByRef ] [As return_type] [= initializer]

参数
parameter_list： 参数[， 参数[， ...]]
 ：parameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier：函数
中引用的变量的名称：变量
的类型：如果调用中未指定任何参数，则参数的值typedefault_value
return_value：从函数
返回的值 ：要设置为初始值的函数的地址intializer

描述
指针是一个过程指针，用于存储返回值的已编译代码的内存位置。如果未给出初始值，则默认初始值为零 （0）。



-------------------------------------------------------- KeyGTK3PgGetfileio ----

Get (File I/O)   获取
  
将数据从文件读取到缓冲区

语法
Get #filenum As Long, [position As LongInt], ByRef data As Any [, [amount As UInteger] [, ByRef bytesread As UInteger] ]
Get #filenum As Long, [position As LongInt], data As String [, , ByRef bytesread As UInteger ]
Get #filenum As Long, [position As LongInt], data() As Any [, , ByRef bytesread As UInteger ]

用法
Get #filenum, position, data [, [amount] [, bytesread ] ]
varres = Get (#filenum, position, data [, [amount] [, bytesread ] ] )

参数
filenum
打开文件时传递给的值。Open
position
必须开始读取的位置。如果文件被打开，仓位在记录中;否则，它以字节为单位。如果省略，则从当前文件指针位置开始读取。位置是从 1 开始的：即文件的第一条记录或字节位于 位置 。
如果省略或为零 （），则文件读取将从当前文件位置开始。For Random1position0
data
写入数据的缓冲区。它可以是数值变量、字符串、数组、用户定义类型或取消引用的指针。读取操作将尝试完全填充变量，除非达到。
获取数组时，后跟一对空括号：“”。 将读取数组中所有值的数据。 是不允许的。
获取 s 时，读取的字节数与字符串数据中的字节数相同。 是不允许的。
注意：如果要将值读入缓冲区，则不应将指针传递到缓冲区;相反，您应该传递缓冲区中的第一个变量（这可以通过取消引用指针来完成）。如果直接传递指针，则将覆盖指针变量，而不是它指向的内存。EOFdata()GetamountStringamountOperator * (Value Of)Get
amount
使从文件读取到内存的连续变量，即从 的内存位置开始将文件中的数据字节读取到内存中。如果省略，则默认为 ，表示只?


-------------------------------------------------------- KeyGTK3PgGetgraphics ----

Get (Graphics)   获取
  
获取当前工作页的一部分或图像缓冲区的副本

语法
Get [source,] [STEP](x1, y1) - [STEP](x2, y2), dest

参数
source
图像缓冲区的地址。如果省略它，则会复制当前工作页面。
STEP
表示以下坐标不是绝对坐标。
[STEP](x1, y1)
要复制的子图像左上角的坐标。 指示偏移量相对于当前图形光标位置。STEP(x1, y1)
[STEP](x2, y2)
要复制的子图像右下角的坐标。 指示 和 分别相对于 和。STEPx2y2x1y1
dest
以前分配的缓冲区的地址，用于存储图像数据。

描述
Get复制当前工作页面的矩形部分，该坐标由坐标 （， ） 


-------------------------------------------------------- KeyGTK3PgGetjoystick ----

GetJoystick   游戏杆获取
  
从连接的游戏设备读取按钮和轴信息

语法
Declare Function GetJoystick ( ByVal id As Long, ByRef buttons As Integer = 0, ByRef a1 As Single = 0, ByRef a2 As Single = 0, ByRef a3 As Single = 0, ByRef a4 As Single = 0, ByRef a5 As Single = 0, ByRef a6 As Single = 0, ByRef a7 As Single = 0, ByRef a8 As Single = 0 ) As Integer

用法
result = GetJoystick( id[, buttons[, a1[, a2[, a3[, a4[, a5[, a6[, a7[, a8]]]]]]]]] )

参数
id
设备 id 号 （0 - 15）
buttons
按钮状态
a1
第一轴值
a2
第二轴值
a3
第三轴值
a4
第四轴值
a5
第五轴值
a6
第六轴值
a7
第七轴值
a8
第八轴值

返回值
0成功或失败。所有轴位置都以浮点格式返回。1

描述
GetJoystick将检索按钮状态，以及最多 8 个轴的轴位置，对于由 和 之间的数字确定的操纵杆。按钮的存储方式与


-------------------------------------------------------- KeyGTK3PgGetkey ----

GetKey   键取值
  
返回键盘缓冲区中第一个键的 ascii 代码

语法
Declare Function GetKey ( ) As Long

用法
result = GetKey

返回值
返回的 ascii 代码的值。

描述
它返回键盘缓冲区中第一个键的 ascii 代码。该键将从缓冲区中删除。如果不存在密钥，请等待它。
对于扩展键（返回两个字符），扩展代码在第一个字节中返回，常规代码在第?


-------------------------------------------------------- KeyGTK3PgGetmouse ----

GetMouse   鼠标获取
  
检索鼠标指针设备的状态

语法
Declare Function GetMouse ( ByRef x As Long, ByRef y As Long, ByRef wheel As Long = 0, ByRef buttons As Long = 0, ByRef clip As Long = 0 ) As Long
Declare Function GetMouse ( ByRef x As LongInt, ByRef y As LongInt, ByRef wheel As LongInt = 0, ByRef buttons As LongInt = 0, ByRef clip As LongInt = 0 ) As Long

用法
result = GetMouse (x, y [, [ wheel ] [, [ buttons ] [, [ clip ]]]])

参数
x
x 坐标值
y
y 坐标值
wheel
滚轮值
buttons
按钮状态
clip
剪辑状态

返回值
0成功时，或出错时（例如，因为鼠标位于图形窗口外）或失败时。（设置运行时错误）1

描述
GetMouse检索鼠标位置和按钮状态;信息在通过引用传递给此函数的变量中返回。如果鼠标不可用，则所有变量都将包含该值。
?


-------------------------------------------------------- KeyGTK3PgGosub ----

GoSub   跳转
  
控制流语句以使用一段代码并返回。

语法
GoSub label

描述
执行跳转到由行标签标记的子例程。始终使用 退出 a ，执行将在 之后的下一个语句上继续。
跳转必须与 相同的 main/function/sub 块中的行标签。子例程中的所有变量都与块共享，不能使用


-------------------------------------------------------- KeyGTK3PgGoto ----

Goto   转到
  
控制流语句跳转到程序的另一部分

语法
Goto label

描述
将代码执行跳转到行标签。
使用退出作用域时，将销毁在该作用域中定义的任何局部变量（调用析构函数）。
当 跳过变量定义而不是变量作用域的末尾时，可能会不允许使用。如果变量需要构?


-------------------------------------------------------- KeyGTK3PgHex ----

Hex   十六进制
  
返回给定数字的十六进制数

语法
Declare Function Hex ( ByVal number As UByte ) As String
Declare Function Hex ( ByVal number As UShort ) As String
Declare Function Hex ( ByVal number As ULong ) As String
Declare Function Hex ( ByVal number As ULongInt ) As String
Declare Function Hex ( ByVal number As Const Any Ptr ) As String

Declare Function Hex ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

用法
result = Hex[$]( number [, digits ] )

参数
number
计算为数字的数字或表达式。浮点数将转换为 .LongInt
digits
要返回的可选位数。

返回值
包含 的无符号十六进制表示形式的字符串。number

描述
返回整数 的无符号十六进制字符串表示形式。十六进制数字的范围为 0-9 或 A-F。
如果指定 > 0，则结果字符串将恰好是该长度。如


-------------------------------------------------------- KeyGTK3PgHibyte ----

HiByte   单字节高位
  
获取操作数的第二个字节。

语法
#define HiByte( expr ) ((Cast(UInteger, expr) And &h0000FF00) Shr 8)

用法
result = HiByte( expr )

参数
expr
转换为值的数值表达式。UInteger

返回值
返回 expr 的低 16 位字的高字节值。

描述
此宏将数值表达式转换为值，然后展开?


-------------------------------------------------------- KeyGTK3PgHiword ----

HiWord   双字节高位
  
获取操作数的第二个 16 位字。

语法
#define HiWord( expr ) ((Cast(UInteger, expr) and &hFFFF0000) Shr 16)

用法
result = HiWord( expr )

参数
expr
转换为值的数值表达式。UInteger

返回值
返回 expr 的低 32 位 dword 的 16 位高字的值。

描述
此宏将数值表达式转换为一个值，然后扩展为表示其第?


-------------------------------------------------------- KeyGTK3PgHour ----

Hour   时间取小时
  
从日期序列中获取一天中的小时数 

语法
Declare Function Hour ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Hour( dateserial )

参数
date_serial
日期序列

返回值
从包含日期序列格式的日期的变量中


-------------------------------------------------------- KeyGTK3PgIfthen ----

If...Then
  
用于条件分支的控制流语句

语法
If expression Then [statement(s)] [Else [statement(s)]] [End If]
or
If expression Then : [statement(s)] [Else [statement(s)]] : End If
or
If expression Then
[statement(s)]
[ ElseIf expression Then ]
[statement(s)]
[ Else ]
[statement(s)]
End If

备注：（不带空格）也像在QB中一样支持向后兼容。EndIf

描述
If...Then是一种做决定的方式。
它是一种仅在条件为 true 时才执行代码的机制，并且可以根据更多条件提供要执行的替代代码：
如果条件为真，则执行代码（紧随其后）。


-------------------------------------------------------- KeyGTK3PgIif ----

IIf   如果是
  
返回两个值之一的条件函数。

语法
IIf ( condition, expr_if_true, expr_if_false )

参数
condition
要测试的条件。
非零值的计算结果为 true，而零值的计算结果为 false。
expr_if_true
要计算并返回 if 为 true 的表达式。
它必须返回：condition
一个数值，可以是整数、浮点数或指针，包括布尔值，
或字符串值，
或 UDT 值。
expr_if_false
要计算并返回 if 为 false 的表达式。
它必须与（数字、字符串或 UDT）的类型相同。conditionexpr_if_true

返回值
if 为非零，否则conditionexpr_if_trueexpr_if_false

描述
IIf返回不同的数字或字符串或 UDT 值（不是引用），具体取?


-------------------------------------------------------- KeyGTK3PgImageConvertRow ----

ImageConvertRow   图像转换行
  
将一行图像数据转换为其他颜色深度

语法
Declare Sub ImageConvertRow ( ByVal src As Any  Ptr, ByVal src_bpp As Long, ByVal dst As Any  Ptr, ByVal dst_bpp As Long, ByVal width As Long, ByVal isrgb As Long = 1 )

用法
ImageConvertRow( src, src_bpp, dst, dst_bpp, width [, isrgb ] )

参数
src
源行开头的地址。源可以是位深度为每像素 24 位或 32 位的全彩色图像，也可以是位深度为每像素 1-8 位的调色板图像。只有在进行转换时处于使用正确调色板的屏幕模式时，转换调色板图像才能正常工作。
src_bpp
源行中每个像素的位数。第1-8、24和32段。
dst
目标行开头的地址。图像可以是每像素 16 位或 32 位的全彩色图像。如果源是调色板图像，则目标也可以是每像素 1 到 8 位


-------------------------------------------------------- KeyGTK3PgImagecreate ----

ImageCreate   图像创建
  
为映像分配和初始化存储

语法
Declare Function ImageCreate ( ByVal width As Long, ByVal height As Long, ByVal color As ULong = transparent_color ) As Any Ptr
Declare Function ImageCreate ( ByVal width As Long, ByVal height As Long, ByVal color As ULong = transparent_color, ByVal depth As Long ) As Any Ptr

用法
result = ImageCreate( width, height [, [ color ][, depth ]] )

参数
width
所需宽度，以像素数为单位。
height
所需高度（以像素数为单位）。
color
用于填充图像区域的像素值。
depth
所需的颜色深度，以每像素位数为单位。

返回值
如果无法创建映像，则返回 NULL （），否则返回映像的地址。 必须在图形模式初始化后调用，否则它将返回 。
因此，在变量声明的情况下，不能用作集成初始值设定项，即使在（在成员字段或构造函数中）中也是如此，因为（共享变量的）初始化值是在程序开始时设置的，然后运行任何用户代码。图像分配调用必须在单独的可执行指令中，并且在图形模式初始?


-------------------------------------------------------- KeyGTK3PgImageDestroy ----

ImageDestroy   图像销毁
  
销毁和取消分配映像的存储

语法
Declare Sub ImageDestroy ( ByVal image As Any Ptr )

用法
ImageDestroy( image )

参数
image
要销毁的映像的地址。

描述
销毁 所指向 的图像，该图像必须是从调用 ?


-------------------------------------------------------- KeyGTK3PgImageInfo ----

ImageInfo   图像信息
  
检索有关图像的信息

语法
Declare Function ImageInfo ( ByVal image As Const Any Ptr, ByRef width As Long = 0, ByRef height As Long = 0, ByRef bypp As Long = 0, ByRef pitch As Long = 0, ByRef pixdata As Any Ptr = 0, ByRef size As LongInt = 0 ) As Long
Declare Function ImageInfo ( ByVal image As Const Any Ptr, ByRef width As LongInt, ByRef height As LongInt, ByRef bypp As LongInt = 0, ByRef pitch As LongInt = 0, ByRef pixdata As Any Ptr = 0, ByRef size As LongInt = 0 ) As Long

用法
in the LONG (or INTEGER<32>) version of the function:
result = ImageInfo( image [, [ width ] [, [ height ] [, [ bypp ] [, [ pitch ] [ , [ pixdata ] [, size ]]]]]] )
in the LONGINT (or INTEGER<64>) version of the function:
result = ImageInfo( image , width , height [, [ bypp ] [, [ pitch ] [ , [ pixdata ] [, size ]]]] )

参数
image
映像的地址。
width
存储图像的宽度（以像素为单位）。
height
存储图像的高度（以像素为单位）。
bypp
存储图像每像素的字节数 - 即单个像素的大小，以字节为单位。
pitch
存储图像的间距 - 即每条扫描线（行）的大小，以字节为单位。请注意，这可能不仅仅是 ，因为扫描线可能会被填充，以允许它们在内存中更好地对齐。width * bypp
pixdata
存储图像的第一条扫描线的起始地址。
size
将映像的大小存储在内存中（以字节为单位）。

返回值
如果未指向有效图像，则返回一个 （）。否则，将为 、 、 和 分配适当的值，并返回零 （）。image1widt


-------------------------------------------------------- KeyGTK3PgImplements ----

Implements   继承接口
  
指定要由用户定义类型
实现的接口 注意：存根页。即使此关键字已保留，接口尚未实现。

语法
Type typename Implements interface
...
End Type

描述

例

方言差异
在 -lang qb 方言中不可用，除非使用别名 引用。__Implements

与QB的区别
FreeBASIC 的


-------------------------------------------------------- KeyGTK3PgImport ----

Import   导入
  
位于 DLL 中的公共数据的外部链接属性

语法
Extern Import symbolname[( subscripts)] [ Alias "aliasname"] [ As DataType] [, ...]

描述
仅在外部模块中（使用关键字）用于访问 Win32 DLL 中的全局变量：变量名称将添加到动态?


-------------------------------------------------------- KeyGTK3PgInclib ----

#inclib   #包含库
  
预处理器指令

语法
#inclib "libname"

描述
在链接过程中包含一个库，就


-------------------------------------------------------- KeyGTK3PgInclude ----

#include   #包含
  
预处理器语句，用于包含另一个源文件的内容

语法
#include [once] "file"

描述
#include在指令出现的位置插入来自另一个文件的源代码。这具有从包含文件编译源代码的效果，就好像它是包含它的源文件的一部分一样。一旦编译器到达包含文件的末尾，原始源文件将继?


-------------------------------------------------------- KeyGTK3PgInkey ----

Inkey   键输入
  
返回一个字符串，表示在键盘缓冲区中等待的第一个键

语法
Declare Function Inkey ( ) As String

用法
result = Inkey[$]

返回值
在键盘缓冲区中找到的第一个字符，如果未找到，则为空字符串 （）。""

描述
扫视键盘缓冲区并返回找到的第一个字符（如果有）的表示形式。然后，该键将从缓冲区中删除，并且不会回显到屏幕上。如果键盘缓冲区为空，


-------------------------------------------------------- KeyGTK3PgInp ----

Inp   端口
  
返回硬件端口处的值。

语法
Declare Function Inp ( ByVal port As UShort ) As Integer

用法
value = Inp(port)

参数
port
要读取的端口号。

返回值
指定端口处


-------------------------------------------------------- KeyGTK3PgInput ----

Input   输入
  
从键盘读取值列表

语法
Input [;] ["prompt" ,|; ] variable_list

参数
prompt
作为提示写入屏幕的可选字符串文本。如果后跟分号 （），则提示符后面将附加一个问号 （）。如果它后跟逗号，则不会附加任何内容。;"? "
variable_list
逗号分隔的变量列表，用于保存从用户读取的值。

描述
从键盘读取列表值，直到第一个回车符。数值从其字符串表示形式转换为变量列表中的相应类型。字符在键入?


-------------------------------------------------------- KeyGTK3PgInputfilemode ----

Input (File Mode)   输入
  
指定要为输入模式打开的文本文件

语法
Open filename for Input [Encoding encoding_type] [Lock lock_type] as [#]filenum 

参数
filename
要打开以进行输入的文件名
encoding_type
指示文件的编码类型
lock_type
锁定以在文件打开时使用
filenum
要与打开的文件关联的未使用的文件编号

描述
用于打开文本文件进行读取的文件模式。
此模式允许使用 按顺序读取文本行，或读取 以 逗号分隔的值。
文本文件不能在FreeBASIC中


-------------------------------------------------------- KeyGTK3PgInputnum ----

Input()
  
从控制台或文件中读取许多字符

语法
Declare Function Input ( n As Integer ) As String
Declare Function Input ( n As Integer, filenum As Integer ) As String

用法
result = Input[$]( n [, [#]filenum ] )

参数
n
要读取的字节数。
filenum
绑定文件或设备的文件编号。

返回值
返回读取的字符中的 a 个。String

描述
从 控制台或 指定的绑定文件/设备读取许多字符。
第


-------------------------------------------------------- KeyGTK3PgInputPp ----

Input #   输入
  
从文本文件中读取值列表

语法
Input # filenum, variable_list

参数
filenum
为打开的文件或设备的文件编号Input
variable_list
用于保存读取的值的变量列表

描述
通过绑定文件编号从文本文件读取一组以分隔符分隔的值，并按读取顺序将它们写入 中的变量。如果变量是数值，则读取值将从其字符串表示形式转换为相应的类型。



-------------------------------------------------------- KeyGTK3PgInstr ----

InStr   字符串搜索
  
查找字符串中子字符串或字符的第一个匹配项

语法
Declare Function InStr ( ByRef str As Const String,  [ Any ] ByRef substring As Const String ) As Integer
Declare Function InStr ( ByRef str As Const WString, [ Any ] ByRef substring As Const WString ) As Integer
Declare Function InStr ( ByVal start As Integer, ByRef str As Const String, [ Any ] ByRef substring As Const String ) As Integer
Declare Function InStr ( ByVal start As Integer, ByRef str As Const WString, [ Any ] ByRef substring As Const WString ) As Integer

用法
first = InStr( [ start, ] str, [ Any ] substring )

参数
str
要搜索的字符串。
substring
要查找的子字符串。
start
搜索开始的位置。第一个字符从位置 1 开始。str

返回值
中第一个出现的 的位置。substringstr

描述
定位子字符串或字符在字符串中首次出现的位置。在第一种形式（不带参数）中，搜索从第一个字符开始。
如


-------------------------------------------------------- KeyGTK3PgInstrrev ----

InStrRev   字符串搜索反向
  
查找字符串中子字符串或字符的最后一个匹配项

语法
Declare Function InStrRev ( ByRef str As Const String, [ Any ] ByRef substring As Const String, ByVal start As Integer = -1 ) As Integer
Declare Function InStrRev ( ByRef str As Const WString, [ Any ] ByRef substring As Const WString, ByVal start As Integer = -1 ) As Integer

用法
last = InStrRev( str, [ Any ] substring [, start ]  )

参数
str
要搜索的字符串。
substring
要查找的子字符串。
start
搜索开始的位置。第一个字符从位置 1 开始。str

返回值
中最后出现的 的位置。substringstr

描述
定位子字符串或字符在字符串中最后出现的位置。如果未给出参数或小于零，则搜索从最后一个字符开始。
如果出现以下情


-------------------------------------------------------- KeyGTK3PgInt ----

Int   数取整
  
返回数字的下限

语法
Declare Function Int ( ByVal number As Single ) As Single
Declare Function Int ( ByVal number As Double ) As Double
Declare Function Int ( ByVal number As Integer ) As Integer
Declare Function Int ( ByVal number As UInteger ) As UInteger

用法
result = Int( number )

参数
number
要舍入的浮点数

返回值
返回 的下限，即小于或等于它的最大整数。number

描述
 Int返回 的底线。例如，将返回 ，并将返回 。对于整数类型，


-------------------------------------------------------- KeyGTK3PgInteger ----

Integer   整数型
  
标准数据类型：32 位或 64 位有符号，大小与SizeOf(Any Ptr)

语法
Dim variable As Integer
Dim variable As Integer<bits>

参数
bits
一个数字常量表达式，指示所需大小的整数位。允许的值为 、 或 。8163264

描述
整数是 FreeBASIC 用于整数数学运算和按位运算的主要数据类型。它是数字文本的默认类型。
在第一种形式中，Integer 是 32 位或 64 位有符号整数数据?


-------------------------------------------------------- KeyGTK3PgIs ----

Is   是类
  
语句块中的子句。Select Case

语法
Case Is expression

描述
指定将基于表达式（包括大于 （>） 或小于 （<） 运


-------------------------------------------------------- KeyGTK3PgIsDate ----

IsDate   是日期
  
测试字符串是否可以转换为日期序列

语法
Declare Function IsDate ( ByRef stringdate As Const String ) As Long

用法
#include "vbcompat.bi"
result = IsDate( stringdate )

参数
stringdate
要测试的字符串

返回值
如果日期字符串可以转换为日期序列，则返回非零 （-1），否则返回零 （0）。

描述
日期字符串必须采用在操作系统的区域设置中设置的格式，才能被视为


-------------------------------------------------------- KeyGTK3PgIsredirected ----

IsRedirected   是重定向
  
检查 stdin 或 stdout 是否重定向到文件

语法
Declare Function IsRedirected ( ByVal is_input As Long = 0 ) As Long

用法
#include "fbio.bi"
result = IsRedirected( is_input )

参数
is_input
指示要返回的信息类型的 A。Long

返回值
如果 stdin 或 stdout 被重定向，则返回非零 （），否则返回零 （）。-10

描述
IsRedirected 检查 stdin 或 stdout 是否重定向到文件，而不是像往常一样连接到控制台/终端。
如果


-------------------------------------------------------- KeyGTK3PgKill ----

Kill   删文件
  
从磁盘/存储介质中删除文件。

语法
Declare Function Kill ( ByRef filename As Const String ) As Long

用法
result = Kill( filename )

参数
filename
文件名是要删除的磁盘文件的名称。如果文件不在当前目录中，则路径也必须指定为 。path/file

返回值
成功时返回零 （），出错时返回非零。0

?


-------------------------------------------------------- KeyGTK3PgLbound ----

LBound   数组取下限
  
返回数组维度的下限

语法
Declare Function LBound ( array() As Any, ByVal dimension As Integer = 1 ) As Integer

用法
result = LBound( array [, dimension ] )

参数
array
任何类型的数组
dimension
要获取 的下限的维度

返回值
返回数组维度的下限。
描述
LBound返回可用作数组特定维度的索引的最小值。
数组维度从一 （） 到 的编号，其中维度的总数。如果未指定，将返回第一个维度的下限。
如果为零 （），


-------------------------------------------------------- KeyGTK3PgLcase ----

LCase   字符串小写
  
返回字符串的小写副本

语法
Declare Function LCase ( ByRef str As Const String, ByVal mode As Long = 0 ) As String
Declare Function LCase ( ByRef str As Const WString, ByVal mode As Long = 0 ) As WString

用法
result = LCase[$]( str [ , mode ] )

参数
str
要转换为小写的字符串。
mode
转换模式：0 = 当前区域设置，1 = 仅 ASCII

返回值
的小写副本。str

?


-------------------------------------------------------- KeyGTK3PgLeft ----

Left   字符串取左
  
返回字符串最左侧的子字符串

语法
Declare Function Left ( ByRef str As Const String, ByVal n As Integer ) As String
Declare Function Left ( ByRef str As Const WString, ByVal n As Integer ) As WString

用法
result = Left[$]( str, n )

参数
str
源字符串。
n
要从源字符串返回的字符数。

返回值
返回 最左边的子字符串。str

描述
返回从 的左侧（开头）开始的最左侧字


-------------------------------------------------------- KeyGTK3PgLen ----

Len   字符串总长
  
返回表达式或数据类型的长度

语法
Declare Function Len ( ByRef expression As String ) As Integer
Declare Function Len ( ByRef expression As ZString ) As Integer
Declare Function Len ( ByRef expression As WString ) As Integer

Declare Operator Len ( ByRef expression As datatype ) As datatype

Declare Function Len ( datatype ) As Integer	

用法
result = Len( expression )
或
result = Len( DataType )

参数
expression
任何类型的表达式。
datatype
数据类型。

返回值
返回表达式或数据类型（包括 UDT 的数据字段）的大小（以字节为单位）。

描述
Len返回表达式的长度或数据类型的大小（以字节为单位）。
在第一种形式中，如果 是 ， 或 ，将返回字符串的长度（以字符为单位?


-------------------------------------------------------- KeyGTK3PgLet ----

Let   赋值
  
指示赋值运算符。

语法
Let variable = value
or
Let( variable1 [, variable2 [, ... ]] ) = udt
or
Operator typename.Let ( [ ByRef | ByVal ] rhs As datatype )
statements
end operator

描述
该命令旨在帮助程序员区分赋值语句（例如）和相等性测试（例如）。由于编译器不需要它，因此通常会省略它。
 let 可以用作左侧运算符，将用户定义类型的成员分配给多个


-------------------------------------------------------- KeyGTK3PgLib ----

Lib   库
  
指定可在其中找到子项或函数作为声明的一部分的库

语法
Declare { Sub | Function } proc_name Lib "libname" [ Alias "symbol_name" ] ( arguments list ) As return_type

Extern "mangling" lib "libname"
declarative statements
end Extern

Type T
As Integer dummy
Declare Constructor Lib "libname" [ Alias "symbol_name" ] ( arguments list )
end Type


描述
在 或声明中，以及在类方法声明（包括构造函数和析构函数）中，指示包含函数的库。以这种方式指定的库被链接进来，就好像或已经使用过


-------------------------------------------------------- KeyGTK3PgLinegraphics ----

Line (Graphics)   画线
  
绘制线条

语法
Line [target,] [[STEP]|(x1, y1)]-[STEP] (x2, y2) [, [color][, [B|BF][, style]]]
or
Line - (x2, y2) [, [color][, [B|BF][, style]]]

参数
target
指定要在其上绘制的缓冲区
STEP
指示起始坐标是相对的
(x1, y1)
线路的起始坐标
STEP
指示结束坐标是相对的
(x2, y2)
线的结束坐标
color
颜色属性。
B|BF
指定框或框填充模式
style
线条样式

描述
在两点之间绘制直线或框的图形语句。该操作将在通过 设置的当前工作页面上进行，或者如果指定，则在缓冲区/缓冲区上进行。
坐标


-------------------------------------------------------- KeyGTK3PgLineinput ----

Line Input   画线
  
从键盘读取一行输入

语法
Line Input [;] [promptstring {;|,} ] stringvariable

参数
promptstring
在等待输入之前显示的可选提示。如果后跟分号 （），则提示符后面将附加一个问号 （）。如果它后跟逗号，则不会附加任何内容。;"? "
stringvariable
用于接收文本行的变量

描述
从键盘读取一行文本并将其存储在字符串变量中。
（如果有） 将写入当前光标位置的屏幕，并且读取的字符在提示符之后?


-------------------------------------------------------- KeyGTK3PgLineinputPp ----

Line Input #   画线
  
从文件中读取一行文本

语法
Line Input #file number, string_variable

参数
file number
为其打开的文件的文件编号Input
string_variable
用于接收文本行的变量

描述
从打开的文本文件中读取一行（通过绑定的文件编号打开），并将其存储在字符串变


-------------------------------------------------------- KeyGTK3PgLoByte ----

LoByte   单字节低位
  
获取操作数的最低字节。

语法
#define LoByte( expr ) (Cast(UInteger, expr) And &h000000FF)

用法
result = LoByte( expr )

参数
expr
转换为值的数值表达式。UInteger

返回值
返回 expr 的低字节值。

描述
此宏将数值


-------------------------------------------------------- KeyGTK3PgLoc ----

LOC   文件位置
  
返回上次执行文件读/写操作的文件位置

语法
Declare Function LOC ( ByVal filenum As Long ) As LongInt

用法
result = LOC( filenum )

参数
filenum
打开的文件的文件编号。

返回值
上次执行读/写操作的文件位置。

描述
返回上次执行文件读/写的位置。
该位置在记录中标明：
在随机打开的文件中，打开文件时指定的记录长度用于
文本文件（FOR INPUT|输出|追加，记录


-------------------------------------------------------- KeyGTK3PgLocal ----

Local   本地
  
用于设置当前错误处理程序的错误处理语句

语法
On Local Error Goto label

描述
构造中的子句允许在相同或 in 中定义错误处理程序。
 备注：目前，编译器会忽略该子句（仅在 Sub/Function 内部授权），并且错误处理程序可以在 On [Local] Error 所在的同一过程的?


-------------------------------------------------------- KeyGTK3PgLocate ----

Locate   光标定位
  
设置当前光标位置

语法
Declare Function Locate( row As Long = 0, column As Long = 0, state As Long = -1, start As Long = 0, stop As Long = 0 ) As Long

用法
Locate [row], [column], [state]

result = Locate( [row], [column], [state] )
new_column = LoByte( result )
new_row = HiByte( result )
new_state = HiWord( result )

参数
row
控制台中基于 1 的垂直字符位置。
column
控制台中基于 1 的水平字符位置。
state
游标仅在控制台模式下的状态：关闭，打开;文本光标在图形模式下从不可见。01
start
忽视。仅允许 -lang qb 方言兼容性。
stop
忽视。仅允许 -lang qb 方言兼容性。

返回值
返回包含当前游标位置和状态的 32 位。低字的低字节包含列，低字的高字节包含行，高字包含游标状态。
如果任何行、列或状态参数只是由调用 来设置的，则返回值将反映这些新值，而不是以前的值。如果在调用 中省略了


-------------------------------------------------------- KeyGTK3PgLock ----

Lock   锁定
  
限制对文件或文件部分的读/写访问

语法
Lock #filenum, record
Lock #filenum, start To end

参数
filenum
用于文件的文件编号。Open
record
要锁定的记录（文件）。Random
start
要从中锁定的第一个字节位置（文件）。Binary
end
要锁定到的最后一个字节位置（文件）。Binary

描述
Lock暂时限制其他线程或程序对文件或文件部?


-------------------------------------------------------- KeyGTK3PgLof ----

LOF   文件长度
  
返回打开的磁盘文件的长度

语法
Declare Function LOF ( ByVal filenum As Long ) As LongInt

用法
result = LOF( filenum )

参数
filenum
打开的磁盘文件的文件编号。

返回值
打开的磁盘文件的长度（以字节为单位）。

描述
返回以前使用给?


-------------------------------------------------------- KeyGTK3PgLog ----

Log   对数
  
返回给定数字的自然对数

语法
Declare Function Log cdecl ( ByVal number As Double ) As Double

用法
result = Log( number )

参数
number
用于计算自然对数的数字。

返回值
返回以 e 为底数（也称为自然对数）的对数。number

描述
这种符号可能会有些混淆，因为在数学中，自然对数函数通常表示为LN，而以10为底的对数通常表示为LOG。FreeBASIC，像大多数计算机编程语言一样，使用LO


-------------------------------------------------------- KeyGTK3PgLong ----

Long   长型
  
标准数据类型：32 位有符号整数

语法
Dim variable As Long

描述
32 位有符号整数数据类型。可以保存从 到 的值?


-------------------------------------------------------- KeyGTK3PgLongint ----

LongInt   长整型
  
标准数据类型：64 位有符号

语法
Dim variable As LongInt

描述
64 位有符号整数数据类型。可以保存从 -9 223 372 036 854 775 808 到 9 223 372 0


-------------------------------------------------------- KeyGTK3PgLoop ----
Loop   重复
Description



-------------------------------------------------------- KeyGTK3PgLoWord ----

LoWord   双字节低位
  
获取操作数的最低 16 位字。

语法
#define LoWord( expr ) (Cast(UInteger, expr) And &h0000FFFF)

用法
result = LoWord( expr )

参数
expr
转换为值的数值表达式。UInteger

返回值
返回 expr 的低字的值。

描述
此宏将数值表?


-------------------------------------------------------- KeyGTK3PgLpos ----

LPos   打印位置
  
返回在最后一条语句中发送到打印机端口的字符数。LPrint

语法
Declare Function LPos ( ByVal printer As Long ) As Long

用法
result = LPOS(printer)

参数
printer
0、1、2 或 3。表示打印机端口 （LPT#）

返回值
返回


-------------------------------------------------------- KeyGTK3PgLprint ----

LPrint   打印机打印
  
将文本写入默认打印机。

语法
LPrint  [ Using formatstring,] [expressionlist] [(, | ;)] ...

参数
formatstring
指定输出格式的字符串。
expressionlist
要根据指定格式输出的变量列表。

描述
打印到连接到并行端口 LPT1 的打印机，或者如果不存在，则打印到默认打印机。要打印到与缺省打印机不同的打印机，请使用 。
子句的格式根据 。除了UDT，任何


-------------------------------------------------------- KeyGTK3PgLset ----

LSet   字符串左齐
  
左对齐字符串

语法
Declare Sub LSet ( ByRef dst As String, ByRef src As Const String )
Declare Sub LSet ( ByVal dst As WString Ptr, ByVal src As Const WString Ptr )

用法
LSet dst, src
LSet dst_udt, src_udt

参数
dst
用于接收数据的字符串。String
src
获取数据的源。String
dst_udt
用户定义以接收数据。Type
src_udt
用户定义要从中复制数据。Type

描述
LSetleft 将文本对齐到字符串缓冲区中，用空格填充字符串的左侧，用空格填充右侧部分。不会修改字符串缓冲区大小。
如果文本对于字


-------------------------------------------------------- KeyGTK3PgLtrim ----

LTrim   字符串删空格左边
  
删除字符串左侧的周围子字符串或字符

语法
Declare Function LTrim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function LTrim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

用法
result = LTrim[$]( str [, [ Any ] trimset ] )

参数
str
源字符串。
trimset
要修剪的子字符串。

返回值
返回修剪过的字符串。

描述
此过程从源字符串的左侧（开头）修剪周围的字符。如果指定，将修剪?


-------------------------------------------------------- KeyGTK3PgMemberFunction ----

Function (Member)   函数
  
声明或定义返回值的成员过程

语法
{ Type | Class | Union } typename
Declare [ Static | Const ] Function fieldname [calling convention specifier] [ Alias external_name ] ( [ parameters ] ) [ ByRef ] As datatype [ Static ]
End { Type | Class | Union }

Function typename.fieldname ( [ parameters ] ) [ ByRef ] As datatype [ Export ]
statements
End Function

参数
typename 
、或 的名称TypeClassUnion
fieldname 
过程的名称
external_name
外部链接时看到的字段名称
parameters 
要传递给过程的参数
calling convention specifier	
可以是以下之一：或cdeclstdcallpascal

描述
Function使用或调用返回值的成员过程访问成员过程（也可以通过指定 返回引用）。该过程可以选择性地接受参数或 。 在没有显式使用关键字的情况?


-------------------------------------------------------- KeyGTK3PgMemberSub ----

Sub (Member)   过程
  
声明或定义成员过程

语法
{ Type | Class | Union } typename
Declare [ Static | Const ] Sub fieldname [calling convention specifier] [ Alias external_name ] ( [ parameters ] ) [ Static ] 
End { Type | Class | Union }

Sub typename.fieldname ( [ parameters ] ) [ Export ]
statements
End Sub

参数
typename 
、或 的名称TypeClassUnion
fieldname 
过程的名称
external_name
外部链接时看到的字段名称
parameters 
要传递给过程的参数
calling convention specifier	
可以是以下之一：或cdeclstdcallpascal

描述
Sub成员使用或调用成员过程进行访问，并且可以选择接受参数或 。 在没有显式使用关键字的情况下重载。
是为其声明和定义方法的类型的名称。的名称?


-------------------------------------------------------- KeyGTK3PgMetaDynamic ----

$Dynamic   $动态数组
  
元命令，用于更改数组的分配方式

语法
'$Dynamic
or
Rem $Dynamic

描述
'$Dynamic是一个元命令，它指定以下任何数组声明都是可变长度的，无论它们是否使用常量下标范围声明。这


-------------------------------------------------------- KeyGTK3PgMetaInclude ----

$Include   $包含文件
  
元命令语句以包含另一个源文件的内容

语法
'$Include [once]: 'file'
or
Rem $Include [once]: 'file'

描述
$Include在元命令出现的位置插入来自另一个文件的源代码。这具有从包含文件编译源代码的效果，就好像它是包含它的源文件的一部分一样。一旦编译器到达包含文件的末尾，原始源文件


-------------------------------------------------------- KeyGTK3PgMetaLang ----

$Lang   $语言
  
元命令语句，用于设置编译器方言。

语法
'$lang: "lang"
or
Rem $lang: "lang"

参数
"lang"
要设置的方言，括在双引号中，并且必须是 、 、 或 之一。"fb""fblite""qb""deprecated"

描述
如果未在命令行上提供 -forcelang 选项，则可用于设置显示该选项的源模块的方言。最多将在源模块上进行两次传递。在第一次传递时，如果指定的方言不是默认方


-------------------------------------------------------- KeyGTK3PgMetaStatic ----

$Static   $静态数组
  
元命令，用于更改数组的分配方式

语法
'$Static
or
Rem $Static

描述
'$Static是覆盖 的行为的元命令，也就是说，使用常量下标范围声明的数组是固定长度的。这对于所使用的模


-------------------------------------------------------- KeyGTK3PgMidfunction ----

Mid (Function)   字符串取子串
  
返回字符串的子字符串

语法
Declare Function Mid ( ByRef str as Const String, ByVal start as integer ) as String
Declare Function Mid ( ByVal str as Const WString Ptr, ByVal start as integer ) as WString
Declare Function Mid ( ByRef str as Const String, ByVal start as integer, ByVal n as integer ) as String
Declare Function Mid ( ByVal str as Const WString Ptr, ByVal start as integer, ByVal n as integer ) as WString

用法
result = Mid[$]( str, start [, n ] )

参数
str
源字符串。
start
子字符串中的起始位置。第一个字符从位置 1 开始。str
n
子字符串长度，以字符为单位。

描述
返回从 中开始的子字符串。如果 为空，则返回空字符串 （）。如果或然后返回空字符串 （）。



-------------------------------------------------------- KeyGTK3PgMidstatement ----

Mid (Statement)   字符串取子串
  
用另一个字符串覆盖一个字符串的子字符串

语法
Declare Sub Mid ( ByRef text As String, ByVal start As Integer, ByVal length As Integer, ByRef expression As Const String )
Declare Sub Mid ( ByVal text As WString Ptr, ByVal start As Integer, ByVal length As Integer, ByVal expression As Const WString Ptr )

用法
Mid( text, start ) = expression
Or
Mid( text, start, length ) = expression

参数
text
要使用的字符串。
start
要覆盖的子字符串的起始位置。第一个字符从位置 1 开始。text
length
要覆盖的字符数。

描述
将 的最大字符复制到 中，从 开始。
如果未指定，则复制所有字符串的大小保持不变;如果太大?


-------------------------------------------------------- KeyGTK3PgMinute ----

Minute   时间取分
  
从日期序列中获取小时的分钟数 

语法
Declare Function Minute ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Minute( date_serial )

参数
date_serial
日期序列

返回值
从包含日期序列格式的日期的变量中返


-------------------------------------------------------- KeyGTK3PgMkd ----

MKD   数转字符双精型
  
是否将二进制从变量复制到 ，将其长度设置为 8 个字节DoubleString

语法
Declare Function MKD ( ByVal number As Double ) As String

用法
result = MKD[$]( number )

参数
number
要将变量二进制复制到 .DoubleString

返回值
返回 带有 的二进制副本的 。StringDouble

描述
是否从变量到 的二进制复制将其长度?


-------------------------------------------------------- KeyGTK3PgMkdir ----

MkDir   目录新建
  
在本地文件系统上创建文件夹/目录

语法
Declare Function MkDir ( ByRef folder As Const String ) As Long

用法
result = MkDir( folder )

参数
folder
要创建的新默认文件夹/目录，或要创建的子文件夹/子目录的路径。

返回值
成功时返回零 （0），失败时返回负 1 （-1）。

描述
在本地文件系统上创建文件?


-------------------------------------------------------- KeyGTK3PgMki ----

MKI   数转字符整型
  
是否从整数变量复制到与输入变量大小长度相同的二进制变量String

语法
Declare Function MKI ( ByVal number As Integer ) As String
Declare Function MKI<bits> ( ByVal number As Integer<bits> ) As String

用法
result = MKI[$]( number )
result = MKI[$]<bits>( number )

参数
number
将 或变量复制到 二进制文件。IntegerInteger<bits>String

返回值
返回 包含 的二进制副本。Stringnumber

描述
是否从 或 变量到 的二进制副本将其长度设置为类型中的字节数。生成的字符串可以使用 或 读回整数类型。
此函数可用于在不使用定义的情


-------------------------------------------------------- KeyGTK3PgMkl ----

MKL   数转字符长型
  
是否将二进制从变量复制到 ，将其长度设置为 4 个字节LongString

语法
Declare Function MKL ( ByVal number As Long ) As String

用法
result = MKL( number )

参数
number
要将变量二进制复制到 .LongString

返回值
返回 带有 的二进制副本的 。StringLong

描述
是否将二进制副本从变量复制到 ，将?


-------------------------------------------------------- KeyGTK3PgMklongint ----

MKLongInt   数转字符长整型
  
是否将二进制从变量复制到 ，将其长度设置为 8 个字节LongIntString

语法
Declare Function MKLongInt ( ByVal number As LongInt ) As String

用法
result = MKLongInt[$]( number )

参数
number
要将变量二进制复制到 .LongIntString

返回值
返回 带有 的二进制副本的 。StringLongInt

描述
执行从变量到字符串的二进制复制，将其长度设?


-------------------------------------------------------- KeyGTK3PgMks ----

MKS   数转字符单精型
  
是否将二进制从变量复制到 ，将其长度设置为 4 个字节SingleString

语法
Declare Function MKS ( ByVal number As Single ) As String

用法
result = MKS[$]( number )

参数
number
要将变量二进制复制到 .SingleString

返回值
返回 带有 的二进制副本的 。StringSingle

描述
是否将二进制副本从变量复制到 ，将其长


-------------------------------------------------------- KeyGTK3PgMkshort ----

MKShort   数转字符短型
  
是否将二进制从变量复制到 ，将其长度设置为 2 个字节ShortString

语法
Declare Function MKShort ( ByVal number As Short ) As String

用法
result = MKShort[$](number)

参数
number
要将变量二进制复制到 .ShortString

返回值
返回 带有 的二进制副本的 。StringShort

描述
执行从 SHORT 变量到字符串的二进制复制，


-------------------------------------------------------- KeyGTK3PgModuleConstructor ----

Constructor (Module)   构造函数
  
指定在模块级代码之前执行过程

语法
[Public | Private] Sub procedure_name [Alias "external_identifier"] [()] Constructor [priority] [Static]
{ procedure body }
End Sub

描述
关键字在定义中使用（在声明行级别禁止），以强制执行模块级代码之前的过程。定义为构造函数的过程的使用方式可能与普通过程相同，也就是说，可以从模块级代码以及其他过程中调用它们。



-------------------------------------------------------- KeyGTK3PgModuleDestructor ----

Destructor (Module)   析构函数
  
指定在程序终止时执行过程

语法
[Public | Private] Sub identifier [Alias "external_identifier"] [()] Destructor [priority] [Static]
{ procedure body }
End Sub

描述
定义要从已编译程序的结束代码自动调用的过程。结束代码由编译器生成，并在程序正常终止时执行。定义为析构函数的过程的使用方式可能与普通过程相同，也就是说，可以从模块级代码以及其他?


-------------------------------------------------------- KeyGTK3PgMonth ----

Month   日期取月份
  
从日期序列中获取一年中的月份

语法
Declare Function Month ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Month( date_serial )

参数
date_serial
日期

返回值
从包含日期序列格式的日期的变量中返回月份编号。
月份值的范围为 1-12，1


-------------------------------------------------------- KeyGTK3PgMonthname ----

MonthName   日期月名称
  
从其整数表示形式中获取月份的名称

语法
Declare Function MonthName ( ByVal month As Long, ByVal abbreviate As Long = 0 ) As String

用法
#include "vbcompat.bi"
result = MonthName( month_number [, abreviate ] )

参数
month
一年中月份的数字 - 1：1 月到 12：12 月
abbreviate
标志，指示名称应缩写

返回值
从值 1 到 12 返回本地操作系统语言月份名称。month

描述
如果为 true，则返回月份


-------------------------------------------------------- KeyGTK3PgMultikey ----

MultiKey   扫描键码
  
通过键盘扫描码检测按键的状态。

语法
Declare Function MultiKey ( ByVal scancode As Long ) As Long

用法
result = MultiKey(scancode)

参数
scancode
要检查的密钥的扫描码。

返回值
如果按下指定扫描代码的键，则返回，否则返回 。-10

描述
MultiKey是一个功能，它将随时检测由扫描码确定的任何密钥的状态。如果按下该键，它将返回，否则它将返回 。
使用时未禁用键盘输入缓冲区;也


-------------------------------------------------------- KeyGTK3PgMutexCreate ----

MutexCreate   互斥锁创建
  
创建用于同步线程执行的互斥体

语法
Declare Function MutexCreate ( ) As Any Ptr

用法
result = MutexCreate

返回值
创建的互斥体的句柄，或失败时的空指针 （0）。Any Ptr

描述
互斥体是“互斥”的缩写，是一种在线程内同步共享数据的方法。如果存在多个线程使用的全局变量（或由多个线程多次调用的单个线程使用的局部静态变量），则在


-------------------------------------------------------- KeyGTK3PgMutexDestroy ----

MutexDestroy   互斥锁销毁
  
销毁互斥体

语法
Declare Sub MutexDestroy ( ByVal id As Any Ptr )

用法
MutexDestroy( id )

参数
id
要销毁的互斥体的句柄。Any Ptr

描述
Mutexdestroy放弃 由 创建的互斥体。此调用应在使用互斥锁的任何线


-------------------------------------------------------- KeyGTK3PgMutexLock ----

MutexLock   互斥锁锁住
  
获取互斥体

语法
Declare Sub MutexLock ( ByVal id As Any Ptr )

用法
MutexLock( id )

参数
id
要锁定的互斥体的句柄。Any Ptr

描述
Mutexlock使用由 生成的互斥体“句柄”停止任何其他线程，直到该句柄被 解锁。
此类已停止的线程将挂起其执行，并且


-------------------------------------------------------- KeyGTK3PgMutexUnlock ----

MutexUnlock   互斥锁解锁
  
释放互斥锁

语法
Declare Sub MutexUnlock ( ByVal id As Any Ptr )

用法
MutexUnlock( id )

参数
id
要解锁的互斥体的句柄。Any Ptr

描述
Mutexunlock释放由 创建并用 锁定的互斥体“句柄”。这允许共享互斥体的其他线


-------------------------------------------------------- KeyGTK3PgNaked ----

Naked   裸代码
  
编写没有序言/后记代码的函数

语法
{Sub | Function} identifier Naked [calling_convention] ( param_list ) [[ ByRef ] As data_type]
asm_statements
End {Sub | Function}

参数
identifier- 程序的名称。
 - 调用过程的约定 - 可以是 、 或 
 - 过程正文中的代码。用于处理参数和返回值的代码都必须手动完成。请注意，执行这些操作的方法可能会更改，具体取决于调用约定。
 - 要传递给过程的参数。
 - 函数的数据类型。calling_conventioncdeclpascalstdcallasm_statementsparam_l


-------------------------------------------------------- KeyGTK3PgName ----

Name
  
重命名磁盘上的文件

语法
Declare Function Name( ByRef oldname As Const String, ByRef newname As Const String ) As Long

用法
result = Name( oldname, newname )

参数
oldname
现有文件的名称。
newname
文件的新名称。

返回值
成功时返回零 （），失败时返回非零。0

描述
重命名最初调用的文件或文件夹。
如果存在同名的文件/文件夹，则不能保证该?


-------------------------------------------------------- KeyGTK3PgNamespace ----

Namespace   命名空间
  
声明命名空间块。

语法
Namespace identifier [ Alias "aliasname" ]
statements
End Namespace

参数
identifier
命名空间的名称（包括嵌套名称说明符）。
aliasname
命名空间的备用外部名称。

描述
命名空间允许将对象（预定义的数据类型和 UDT，包括联合和枚举）和过程（包括其声明）等实体分组到名称下。这样，全局范围可以分为“子范围”，每个子范围都


-------------------------------------------------------- KeyGTK3PgNext ----

Next   下步
  
控制流语句以标记循环的结束。For...Next

语法
Next [ identifier_list ]

描述
指示与匹配语句关联的语句块的结尾。
当在没有identifier_list的情况下单独使用时，它将关闭最新的语句块。
是可选的，可以是一个或多个用逗号分隔的变量名称。保留此形式的语句是?


-------------------------------------------------------- KeyGTK3PgNow ----

Now   现在
  
以日期序列形式获取当前系统时间 

语法
Declare Function Now ( ) As Double

用法
#include "vbcompat.bi"
result = Now

返回值
返回一个日期序列，其中包含系统在执行时的日期和时间。

描述
由于时间是日期序列的小数部分，如果


-------------------------------------------------------- KeyGTK3PgObject ----

Object   对象
  
提供运行时类型信息的内置类型

语法
Type Object
As fb_BaseVT Ptr vtable_ptr
Declare Constructor()
End Type

用法
Type typename Extends Object
End Type

Dim variable As Object

描述
Object 是一种内置类型，它为从它派生的所有类型提供运行时类型信息 （RTTI），允许它们与 一起使用，并支持和方法。
扩展内置对象类型允许在 的顶部添加一个额外的隐藏 vtable 指针字?


-------------------------------------------------------- KeyGTK3PgOct ----

Oct   八进制
  
将数字转换为八进制表示形式

语法
Declare Function Oct ( ByVal number As UByte ) As String
Declare Function Oct ( ByVal number As UShort ) As String
Declare Function Oct ( ByVal number As ULong ) As String
Declare Function Oct ( ByVal number As ULongInt ) As String
Declare Function Oct ( ByVal number As Const Any Ptr ) As String

Declare Function Oct ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

用法
result = Oct[$]( number [, digits ] )

参数
number
计算为数字的数字或表达式。浮点数将转换为 .LongInt
digits
返回的字符串中所需的位数。

返回值
包含 的无符号八进制表示形式的字符串。number

描述
返回 的无符号八进制字符串表示形式。八进制数字的范围从 0 到 7。
如果指定 > 0，则结果字符串将恰好是该长度。如有必要，?


-------------------------------------------------------- KeyGTK3PgOffsetof ----

OffsetOf   取偏移值
  
返回类型中字段的偏移量。

语法
#define OffsetOf(typename, fieldname) CInt( @Cast( typename Ptr, 0 )->fieldname )	

用法
result = OffsetOf( typename, fieldname )

参数
typename
使用语句定义的类型的名称。Type...End Type
fieldname
在类型（或派生类型的基类型）中定义的字段的名称。

描述
对于非派生类型，将返回位置，作为从 开头开始的偏移量（以字节为单位） 返回。
对于派生类型，将返回


-------------------------------------------------------- KeyGTK3PgOnerror ----

On Error   在
  
用于设置当前错误处理程序的错误处理语句

语法
On [Local] Error Goto label

参数
label
发生错误时要跳转到的标签

描述
“出错”上，在发生错误时触发跳转到错误处理程序。此类错误可由内置语句触发，例如 ，或在使用语句时触发。
注： 仅当使用 -e、-ex 或 -exx 选项之一编译程序时，才会


-------------------------------------------------------- KeyGTK3PgOngosub ----

On...Gosub
  
基于表达式调用标签

语法
On expression GoSub label1[, ...]

描述
根据表达式的值分支到不同的标签。表达式值 1 将分支到第一个标签，值 2 将分支到第二个标签，依此类推。如果表达式的值为零 （0） 或大于列表中的项目数，则在 后面的下一个语句上继续执行。
此


-------------------------------------------------------- KeyGTK3PgOngoto ----

On...Goto
  
跳转到基于表达式的标签。

语法
On expression Goto label1[, ...]

描述
根据表达式的值分支到不同的标签。表达式值 1 将分支到第一个标签，值 2 将分支到第二个标签，依此类推。如果表达式的值为零 （0） 或大


-------------------------------------------------------- KeyGTK3PgOpAdd ----

Operator + (Addition)   运算符
  
对两个表达式求和

语法
Declare Operator + ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator + ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator + ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator + ( ByRef lhs As Double, ByRef rhs As Double ) As Double

Declare Operator + ( ByRef lhs As T Pointer, ByRef rhs As Integer ) As T Pointer
Declare Operator + ( ByRef rhs As Integer, ByRef lhs As T Pointer ) As T Pointer

Declare Operator + ( ByRef lhs As T, ByRef rhs As Integer ) As T
Declare Operator + ( ByRef lhs As Integer, ByRef rhs As T ) As T

用法
result = lhs + rhs

参数
lhs
要求和的左侧表达式。
rhs
要求和的右侧表达式。
T
任何指针类型。

返回值
返回两个表达式的总和。

描述
当左侧和右侧表达式是数值时，运算符 + （Add） 将返回两个值的总和。
当左侧和右侧表达式是字符串值时，运算符 +（Add） 连接两个字符串并返回


-------------------------------------------------------- KeyGTK3PgOpAnd ----

Operator And (Conjunction)   运算符
  
返回两个数值的按位和（连词）

语法
Declare Operator And ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs And rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的按位和（合词）。

描述
此运算符返回其操作数的按位和，这是一个逻辑运算，该操作将生成一个值，其位设置取决于操作数的位（对于将布尔?


-------------------------------------------------------- KeyGTK3PgOpAndAlso ----

Operator Andalso (Short Circuit Conjunction)   运算符
  
返回两个数值的短路和（合相）

语法
Declare Operator AndAlso ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs AndAlso rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的短路和（合相）。

描述
此运算符计算左侧表达式。如果结果为零，则立即返回零。如果结果为非零，则计算右侧，并返回其逻辑结果。
 （对


-------------------------------------------------------- KeyGTK3PgOpArrayIndex ----

Operator () (Array Index)   运算符
  
返回对数组中元素的引用

语法
Declare Operator () ( lhs() As T, ByRef rhs As Integer, ... ) ByRef As T

用法
result = lhs ( rhs [, ...] )
or
lhs ( rhs [, ...] ) = value

参数
lhs
数组。
rhs
数组中元素的索引。
T
任何数据类型。

描述
此运算符返回对数组中元素的引用。对于多维数组，必须指定多个索引（?


-------------------------------------------------------- KeyGTK3PgOpAssignment ----

Operator =[>] (Assign)   运算符
  
为变量赋值

语法
Declare Operator Let ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs = rhs
或
lhs => rhs

或者，在 QB方言，

[ Let ] lhs = rhs
或
[ Let ] lhs => rhs

参数
lhs
要分配到的变量。
T1
任何数字、布尔值、字符串或指针类型。
rhs
要分配给 的值。lhs
T2
任何类型均可转换为 。T2

描述
此运算符将其右侧操作数 （） 的值分配给其左侧操作数 （）。右侧操作数必须隐式转换为左侧类型 （）（对于布尔值到整数的转换，false ?


-------------------------------------------------------- KeyGTK3PgOpAt ----

Operator @ (Address Of)   运算符
  
返回字符串文本、变量、对象或过程的地址

语法
Declare Operator @ ( ByRef rhs As T ) As T Pointer

用法
result = @ rhs

参数
rhs
要检索其地址的字符串文本、变量、对象或过程。
T
任何标准、用户定义或过程类型。

返回值
返回右侧 （） 操作数的地址。rhs

描述
运算符 @ （地址） 返回其操作数的内存地址。
当操作数为 类型时，将返回内部字符串描述符的地址。使用（字符串


-------------------------------------------------------- KeyGTK3PgOpCast ----

Operator Cast   运算符
  
用于将 UDT（用户定义类型）变量转换为指定数据类型的运算符

语法
{ Type | Class | Union } typename
Declare Operator Cast () [ ByRef ] As datatype
...
End { Type | Class | Union }

Operator typename.Cast () [ ByRef ] As datatype [ Export ]
...

用法
Cast( datatype, expression )

参数
typename 
、或 的名称TypeClassUnion
datatype 
要转换为它的类型的名称、内置数据类型（标准数据类型）或 UDT 不同于typename
expression 
要转换的表达式，实例typename

描述
将（变量）转换为其他 .
必须在 、 、 或 内声明。
与所有非静态成员过程一样，它传递了一个隐藏参数。
当只有返回类?


-------------------------------------------------------- KeyGTK3PgOpCombineAdd ----

Operator += (Add And Assign)   运算符
  
向变量添加和赋值

语法
Declare Operator += ( ByRef lhs As T1, ByRef rhs As T2 )

Declare Operator += ( ByRef lhs As T Ptr, ByRef rhs As Integer )

Declare Operator += ( ByRef lhs As String, ByRef rhs As String )
Declare Operator += ( ByRef lhs As WString, ByRef rhs As WString )

用法
lhs += rhs

参数
lhs
要分配到的变量。
T1
任何数值类型。
rhs
要添加到 的值。lhs
T2
任何数值类型。
T
任何数据类型。

描述
此运算符向变量添加并赋值。它在功能上等效于：
对于数值类型，右侧表达式 （） 将转换为左侧类型 （）。
对于字符串类型，此运算符在功能上等效于 


-------------------------------------------------------- KeyGTK3PgOpCombineAnd ----

Operator And= (Conjunction And Assign)   运算符
  
执行按位和（连词）并将结果赋给变量

语法
Declare Operator And= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs And= rhs

参数
lhs
要分配到的变量。
T1
任何数字或布尔类型。
rhs
与 执行按位和（并入）的值。lhs
T2
任何数字或布尔类型。

描述
此运算符按位执行 and 并将结果赋给变量（对于将布尔值转换为整数，false 或 true 布尔值变为 0 或 -1 整数值）。它在功能上等效于：



-------------------------------------------------------- KeyGTK3PgOpCombineConcat ----

Operator &= (Concatenate And Assign)   运算符
  
将一个字符串追加并分配给另一个字符串

语法
Declare Operator &= ( ByRef lhs As String, ByRef rhs As T2 )
Declare Operator &= ( ByRef lhs As WString, ByRef rhs As T2 )

用法
lhs &= rhs

参数
lhs
要为其分配的字符串。
rhs
要追加到 的值。lhs
T2
任何可以转换为字符串的数字、字符串或用户定义类型。

描述
此运算符将一个字符串追加到另一个字符串上。右侧表达式 （） 在串联之前转换为字符串。它在功能上等效于，
其中结果被分配回左侧字


-------------------------------------------------------- KeyGTK3PgOpCombineDivide ----

Operator /= (Divide And Assign)   运算符
  
将值除法并赋给变量

语法
Declare Operator /= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs /= rhs

参数
lhs
要分配到的变量。
T1
任何数值类型。
rhs
要除以的值。lhs
T2
任何数值类型。

描述
此运算符将值除法并赋给变量。它在功能上等效于：
lhs = lhs / rhs

对于使?


-------------------------------------------------------- KeyGTK3PgOpCombineEqv ----

Operator Eqv= (Equivalence And Assign)   运算符
  
执行按位 eqv（等效性）并将结果分配给变量

语法
Declare Operator Eqv= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Eqv= rhs

参数
lhs
要分配到的变量。
T1
任何数字或布尔类型。
rhs
与 执行按位 eqv（等效）的值。lhs
T2
任何数字或布尔类型。

描述
此运算符执行按位 eqv 并将结果赋给变量（对于将布尔值转换为整数，false 或 true 布尔值变为 0 或 -1 整数值）。它在功能上等效于：



-------------------------------------------------------- KeyGTK3PgOpCombineExponentiate ----

Operator ^= (Exponentiate And Assign)   运算符
  
对变量进行幂化并赋值

语法
Declare Operator ^= ( ByRef lhs As Double, ByRef rhs As Double )

用法
lhs ^= rhs

参数
lhs
要分配到的变量。
rhs
要幂所依据的值。lhs

描述
此运算符对变量进行幂幂赋值。它在功能上等效于：
lhs = lhs ^ rhs

对于使用适当语法作为成员的用户定义类型，可以重载此运算符。
注意：此


-------------------------------------------------------- KeyGTK3PgOpCombineImp ----

Operator Imp= (Implication And Assign)   运算符
  
执行按位 imp（隐含）并将结果分配给变量

语法
Declare Operator Imp= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Imp= rhs

参数
lhs
要分配到的变量。
T1
任何数字或布尔类型。
rhs
使用 执行按位 imp（隐含）的值。lhs
T2
任何数字或布尔类型。

描述
此运算符执行按位 imp 并将结果赋给变量（对于将布尔值转换为整数，false 或 true 布尔值变为 0 或 -1 整数值）。它在功能上等效于：



-------------------------------------------------------- KeyGTK3PgOpCombineIntegerDivide ----

Operator \= (Integer Divide And Assign)   运算符
  
整数除以变量并将其赋值

语法
Declare Operator \= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs \= rhs

参数
lhs
要分配到的变量。
T1
任何数值类型。
rhs
要除以的值。lhs
T2
任何数值类型。

描述
此运算符除法（整数除法）并为变量赋值。它在功能上等效于：
lhs = lhs \ rhs




-------------------------------------------------------- KeyGTK3PgOpCombineModulus ----

Operator Mod= (Modulus And Assign)   运算符
  
除以一个值并将余数赋给变量

语法
Declare Operator Mod= ( ByRef lhs As Integer, ByRef rhs As Integer )

用法
lhs Mod= rhs

参数
lhs
要分配到的变量。
rhs
要除以的值。lhs

描述
此运算符将两个类型的值除以，并将余数赋给其左侧 （） 变量。它在功能上等效于：Integerlhs
lhs = lhs Mod rhs

对于?


-------------------------------------------------------- KeyGTK3PgOpCombineMultiply ----

Operator *= (Multiply And Assign)   运算符
  
将值相乘并赋值给变量

语法
Declare Operator *= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs *= rhs

参数
lhs
要分配到的变量。
T1
任何数值类型。
rhs
要乘以的值。lhs
T2
任何数值类型。

描述
此运算符将值相乘并赋值给变量。它在功能上等效于：
lhs = lhs * rhs

右侧表达式 （） 将转换为左侧类型 


-------------------------------------------------------- KeyGTK3PgOpCombineOr ----

Operator Or= (Inclusive Disjunction And Assign)   运算符
  
执行按位或（包括分离）并将结果赋给变量

语法
Declare Operator Or= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Or= rhs

参数
lhs
要分配到的变量。
T1
任何数字或布尔类型。
rhs
与 执行按位或（包括断开）的值。lhs
T2
任何数字或布尔类型。

描述
此运算符执行按位 or 并将结果赋给变量（对于将布尔值转换为整数，false 或 true 布尔值变为 0 或 -1 整数值）。它在功能上等效于?


-------------------------------------------------------- KeyGTK3PgOpCombineShiftLeft ----

Operator Shl= (Shift Left And Assign)   运算符
  
向左移动并将值赋给变量

语法
Declare Operator Shl= ( ByRef lhs As Integer, ByRef rhs As Integer )
Declare Operator Shl= ( ByRef lhs As UInteger, ByRef rhs As UInteger )
Declare Operator Shl= ( ByRef lhs As LongInt, ByRef rhs As LongInt )
Declare Operator Shl= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt )

用法
lhs shl= rhs

参数
lhs
要分配到的变量。
rhs
要向左移动的值。lhs

描述
此运算符将左侧 （） 参数中的位移动其右侧 （） 参数指定的次数，并将结果分配给 。它在功能上等效于：lhsrhslhs
lhs = lhs Shl rhs


-------------------------------------------------------- KeyGTK3PgOpCombineShiftRight ----

Operator Shr= (Shift Right And Assign)   运算符
  
向右移动并为变量赋值

语法
Declare Operator Shr= ( ByRef lhs As Integer, ByRef rhs As Integer )
Declare Operator Shr= ( ByRef lhs As UInteger, ByRef rhs As UInteger )
Declare Operator Shr= ( ByRef lhs As LongInt, ByRef rhs As LongInt )
Declare Operator Shr= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt )

用法
lhs shr= rhs

参数
lhs
要分配到的变量。
rhs
要直接移动的值。lhs

描述
此运算符将左侧 （） 参数中的位移动其右侧 （） 参数指定的次数，并将结果分配给 。它在功能上等效于：lhsrhslhs
lhs = lhs Shr rhs



-------------------------------------------------------- KeyGTK3PgOpCombineSub ----

Operator -= (Subtract And Assign)   运算符
  
减去变量并将其赋值

语法
Declare Operator -= ( ByRef lhs As T1, ByRef rhs As T2 )
Declare Operator -= ( ByRef lhs As T Ptr, ByRef rhs As Integer )

用法
lhs -= rhs

参数
lhs
要分配到的变量。
T1
任何数值类型。
rhs
要从 中减去的值。lhs
T2
任何数值类型。
T
任何数据类型。

描述
此运算符减去变量并将其赋值。它在功能上等效于：
lhs = lhs - rhs

对于数值类型，右侧表达式 （） 将?


-------------------------------------------------------- KeyGTK3PgOpCombineXor ----

Operator Xor= (Exclusive Disjunction And Assign)   运算符
  
执行按位 xor（独占析取）并将结果赋给变量

语法
Declare Operator Xor= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Xor= rhs

参数
lhs
要分配到的变量。
T1
任何数字或布尔类型。
rhs
使用 执行按位 xor（独占或）的值。lhs
T2
任何数字或布尔类型。

描述
此运算符执行按位 or 并将结果赋给变量（对于将布尔值转换为整数，false 或 true 布尔值变为 0 或 -1 整数值）。它在功能上等效于：



-------------------------------------------------------- KeyGTK3PgOpConcat ----

Operator + (String Concatenation)   运算符
  
连接两个字符串

语法
Declare Operator + ( ByRef lhs As String, ByRef rhs As String ) As String
Declare Operator + ( ByRef lhs As ZString, ByRef rhs As ZString ) As ZString
Declare Operator + ( ByRef lhs As WString, ByRef rhs As WString ) As WString

用法
result = lhs + rhs

参数
lhs
要连接的左侧字符串。
rhs
要连接的右侧字符串。

描述
此运算符连接两个字符串。与 Operator &（带转换的字符串串联）不同，这两个表达式都必须是?


-------------------------------------------------------- KeyGTK3PgOpConcatConvert ----

Operator & (String Concatenation With Conversion)   运算符
  
连接两个字符串，根据需要将非字符串转换为字符串

语法
Declare Operator & ( ByRef lhs As T, ByRef rhs As U ) As V

用法
result = lhs & rhs

参数
lhs
要连接的左侧表达式。
T
可转换为标准数据类型的任何标准数据类型或用户定义类型。
rhs
要连接的右侧表达式。
U
可转换为标准数据类型的任何标准数据类型或用户定义类型。
V
生成的字符串类型（因操作数而异）。

描述
此运算符连接两个表达式。如果任?


-------------------------------------------------------- KeyGTK3PgOpDelete ----

Operator Delete Statement   运算符
  
操作员销毁数据并释放与Operator New Expression

用法
Delete buf
or
Delete[] buf

参数
buf 
指向已由运算符或运算符分配的内存的指针，运算符的数组版本（必须根据要删除的数据类型提供类型化指针）。New ExpressionNew[] ExpressionNew Expression

描述
运算符用于销毁和释放使用运算符创建的对象的内存。删除 TYPE 时，将调用其析构函数。 运算符应仅与从运算符返回的地址一起使用。
运


-------------------------------------------------------- KeyGTK3PgOpDeleteOverload ----

Operator Delete Overload   运算符
  
成员运算符，用于在应用于 UDT（用户定义的类型）时提供过载内存解除分配进程部分。Operator Delete Statement

语法
Declare Operator Delete ( buf  As Any Ptr )
Declare Operator delete[] ( buf  As Any Ptr )

参数
buf 
指向已由运算符或运算符（运算符的数组版本）分配的内存的指针。New OverloadNew[] OverloadNew Overload

描述
成员运算符在应用于 UDT（用户定义的类型）时重载运算符提供的内存解除分配进程部分。因此，用户可以定义自己的内存解除分配进?


-------------------------------------------------------- KeyGTK3PgOpDivide ----

Operator / (Divide)   运算符
  
除以两个数值表达式

语法
Declare Operator / ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator / ( ByRef lhs As Double, ByRef rhs As Double ) As Double

用法
result = lhs / rhs

参数
lhs
左侧的红利表达式。
rhs
右侧除数表达式。

返回值
返回股息和除数的商。

描述
运算符 / （除法）返回股息和除数的商。
这两个操作数都不会以任何方式进行修改。与整数除法不


-------------------------------------------------------- KeyGTK3PgOpen ----

Open   文件打开
  
使用文件操作打开磁盘文件以进行读取或写入

语法
Open filename For Input [encoding_type] [lock_type] As [#]filenumber
Open filename For Output [encoding_type] [lock_type] As [#]filenumber
Open filename For Append [encoding_type] [lock_type] As [#]filenumber

Open filename For Binary [access_type] [lock_type] As [#]filenumber
Open filename For Random [access_type] [lock_type] As [#]filenumber [Len = record_length]

用法
result = Open( filename[,] For {Input|Output|Append}[,] As filenumber )
或
result = Open( filename[,] For Binary[,] Access {Read|Write}[,] As filenumber )
或
result = Open( filename[,] For Random[,] Access {Read|Write}[,] As filenumber [[,] Len =  record_length] )
或
Open filename For {Input|Output|Append} As filenumber
或
Open filename For Binary Access {Read|Write} As filenumber
或
Open filename For Random Access {Read|Write} As filenumber [Len =  record_length]


参数
filename
要打开的磁盘文件的名称的字符串值。相对文件路径相对于当前目录（请参见）。CurDir
encoding_type
读取或写入文本时要使用的编码可以是：
 Encoding "ascii" （默认使用 ASCII 编码）
 Encoding "utf8" （使用 8 位 Unicode 编码）
 Encoding "utf16" （使用 16 位 Unicode 编码）
 Encoding "utf32" （使用 32 位 Unicode 编码）
access_type
调用进程请求的访问类型。
 Access [Read] [Write] （可以使用读写访问权限，这是默认设置）
lock_type
对来自其他进程（线程或程序）的磁盘文件访问施加限制，可以是：
 Shared （文件可由其他进程自由访问）
 Lock [Read] [Write] （可以拒绝对其他进程的读写访问权限）
filenumber
要绑定到磁盘文件的可用文件编号，可通过 找到该文件。FreeFile
record_length
从磁盘文件读取或写入磁盘文件的每条记录的大小（以字节为单位）。缺?


-------------------------------------------------------- KeyGTK3PgOpenCom ----

Open Com   文件打开
  
打开用于输入和输出的串行端口

语法
Declare Function Open Com ( byref options As String, As filenumber As Long ) As Long

用法
result = Open Com( options[,] As[#] filenumber )

参数
options
一个字符串，包含用于控制端口的选项。
filenumber
要绑定到端口的文件编号。

返回值
Open Com()成功时返回 32 位 ：零 （），否则返回非零错误代码。Long0

描述
此命令打开PC的串行端口，允许使用正常的文件命令发送和接收数据，如，，，...
主要参数是 a，它至少描述了要打开的通信?


-------------------------------------------------------- KeyGTK3PgOpenCons ----

Open Cons   ????
  
?????????? ?stdin? ??? ?stdout? ?????????????

??
Open Cons As [#]filenumber
Open Cons For Input As [#]filenumber
Open Cons For Output As [#]filenumber

??
result = Open Cons( [For {Input|Output}[,]] As filenumber )
??????QB?????
Open Cons [For {Input|Output}] As filenumber

??
filenumber
???? stdin ? stdout ??????????? ???????FreeFile

???
?????????? 32 ? ??????? ?0?????????????Open Cons()Long

??
Open Cons?????? stdin ? stdout ?????????????????????????????? ? ???????? ??????????
 ?????? stdin ?????????? ????????? stdout ?????????? ?????????????????
 stdin ? stdout ?????????????? OS ????


-------------------------------------------------------- KeyGTK3PgOpenErr ----

Open Err   文件打开
  
打开文件操作的标准输入 （stdin） 和标准错误 （stderr） 流。

语法
Open Err [for mode] As [#]filenumber As Long

用法
Open Err [for mode] as [#]filenumber
or
result = Open Err( [for mode[,]] as [#]filenumber )

参数
mode
忽视。
filenumber
未使用的文件编号。

返回值
如果成功完成，则返回 32 位 ：零，否则返回非零值以指示失败。LongOpen Err()

描述
此命令打开以读取和写入控制台，从而允许使用普通文件命令执行读取和写入操作。
是不同于允许将错误消息与主控制台输出分开重?


-------------------------------------------------------- KeyGTK3PgOpenLpt ----

Open Lpt   文件打开
  
打开打印机设备

语法
Open Lpt ["[LPT[x]:][Printer_Name][,TITLE=Doc_Title][,EMU=TTY]"] [For Input|Output] As #filenumber

用法
Open Lpt "LPT..." As [#]filenumber
or
result = Open Lpt( "LPT..."[,] As [#]filenumber )

参数
x
指定端口号。如果省略，输出将发送到系统打印后台处理程序。
Printer_Name
要打开的打印机的名称。此参数在 DOS 上被忽略。
TITLE=Doc_Title
打印机后台处理程序看到的打印作业的标题。此参数在 DOS 上被忽略。
EMU=TTY
使用驱动程序文本映像在 Windows GDI 打印机上模拟 TTY 输出。此参数在 DOS 和 Linux 上被忽略。
For Input|Output
子句是允许兼容的，但它被忽略。
filenumber
要分配给设备的未使用文件编号。

返回值
如果成功完成，则返回 32 位 ：，否则返回非零值以指示失败。Long0Open Lpt()

描述
Open Lpt打


-------------------------------------------------------- KeyGTK3PgOpenPipe ----

Open Pipe   文件打开
  
打开外部进程的标准输入 （stdin） 或输出 （stdout） 流以进行文件操作。

语法
Open Pipe shell_command For Input As [#]filenumber
Open Pipe shell_command For Output As [#]filenumber
Open Pipe shell_command For Binary access_type [#]filenumber

用法
result = Open Pipe( command[,] For {Input|Output}[,] As filenumber )
或
result = Open Pipe( command[,] For Binary[,] access_type[,] As filenumber )
（或类似QB的语法，）
Open Pipe filename For {Input|Output} As filenumber
（或，）
Open Pipe filename For Binary access_type As filenumber

参数
shell_command
要在操作系统命令外壳中执行的外部进程。相对文件路径相对于当前目录（请参见）。为需要在其可执行路径或参数中使用双引号的进程打开管道时，整个管道字符串应嵌套在双引号内。CurDir
access_type
调用进程请求的读取或写入访问权限的类型。
 Access {Read|}（  可以打开外部进程的 stdin 或 stdout 流）Write
filenumber
要绑定到外部进程的 stdin 或 stdout 流的可用文件编号。

返回值
在第一次使用中，返回 32 位 ：成功时返回零 （），否则返回非零错误代码?


-------------------------------------------------------- KeyGTK3PgOpenScrn ----

Open Scrn   文件打开
  
直接打开控制台，将输入和输出作为文件

语法
Open Scrn [for mode] As [#]filenumber As Long

用法
Open Scrn [for mode] as [#]filenumber
or
result = Open Scrn( [for mode[,]] as [#]filenumber )

参数
mode
要么或 .如果省略，则假定为。InputOutputOutput
filenumber
未使用的文件编号。

返回值
如果成功完成，则返回 32 位 ：零 （），否则返回非零值以指示失败。Long0Open Scrn()

描述
此命令将作为文件打开输入和输出控制台，允许使用普通文件命令对其进行读/写。
在某些实现中，此命令可能使用对控制台


-------------------------------------------------------- KeyGTK3PgOpEqual ----

Operator = (Equal)   运算符
  
比较两个表达式的相等性

语法
Declare Operator = ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator = ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator = ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator = ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator = ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator = ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator = ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator = ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator = ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator = ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator = ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator = ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator = ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator = ( ByRef lhs As T, ByRef rhs As T ) As Integer

Declare Operator = ( ByRef lhs As Boolean, ByRef rhs As Boolean ) As Boolean

用法
result = lhs = rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果表达式相等，则返回负 1 （-1）;如果表达式不相等，则返回零 （0）。

描述
运算符 = （相等） 是一个二元运算符，它比较两个表达式的相等性并返回结果 - 一个布尔值，主要以： 负 1 （-1）


-------------------------------------------------------- KeyGTK3PgOpEqv ----

Operator Eqv (Equivalence)   运算符
  
返回两个数值的按位和（等效）

语法
Declare Operator Eqv ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Eqv rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的按位等效性。

描述
此运算符返回其操作数的按位等效性，这是一种逻辑运算，该操作将生成一个值，其位设置取决于操作数的位（对于将布?


-------------------------------------------------------- KeyGTK3PgOperator ----

Operator   运算符
  
声明或定义重载运算符。

语法
{ Type | Class | Union } typename
Declare Operator Cast () [ ByRef ] As datatype
Declare Operator @ () [ ByRef ] As datatype Ptr
Declare Operator assignment_op ( [ ByRef | ByVal ] rhs As datatype )
Declare Operator [] ( index As datatype ) [ ByRef ] As datatype
Declare Operator New ( size As UInteger ) As Any Ptr
Declare Operator New[] ( size As UInteger ) As Any Ptr
Declare Operator Delete ( buf  As Any Ptr )
Declare Operator Delete[] ( buf  As Any Ptr )
End { Type | Class | Union }

{ Type | Class | Union } typename
Declare Operator For ()
Declare Operator For ( [ ByRef | ByVal ] stp As typename )
Declare Operator Step ()
Declare Operator Step ( [ ByRef | ByVal ] stp As typename )
Declare Operator Next ( [ ByRef | ByVal ] cond As typename ) As Integer
Declare Operator Next ( [ ByRef | ByVal ] cond As typename, [ ByRef | ByVal ] stp As typename ) As Integer
End { Type | Class | Union }

Declare Operator unary_op ( [ ByRef | ByVal ] rhs As datatype ) As datatype
Declare Operator binary_op ( [ ByRef | ByVal ] lhs As datatype, [ ByRef | ByVal ] rhs As datatype ) As datatype

Operator typename.Cast () [ ByRef ] As datatype [ Export ]
Operator typename.@ () [ ByRef ] As datatype Ptr [ Export ]
Operator typename.assignment_op ( [ ByRef | ByVal ] rhs As datatype ) [ Export ]
Operator typename.[] ( index As datatype ) [ ByRef ] As datatype [ Export ]
Operator unary_op ( [ ByRef | ByVal ] rhs As datatype ) As datatype [ Export ]
Operator binary_op ( [ ByRef | ByVal ] lhs As datatype, [ ByRef | ByVal ] rhs As datatype ) As datatype [ Export ]
Operator typename.New ( size as uinteger ) As Any Ptr [ Export ]
Operator typename.New[] ( size As UInteger ) As Any Ptr [ Export ]
Operator typename.Delete ( buf  As Any Ptr ) [ Export ]
Operator typename.Delete[] ( buf  As Any Ptr ) [ Export ]

参数
typename 
、 、 或 的名称。TypeClassUnionEnum
assignment_op 
let += -= *= &= /= \= mod= shl= shr= and= or= xor= imp= eqv= ^=
unary_op
- not * -> abs sgn fix frac int exp log sin asin cos acos tan atn len sqr
binary_op
+ - * & / \ mod shl shr and or xor imp eqv ^ = <> < > <= >=

描述
内置运算符（如 、）在表达式中使用时具有预定义的行为。当运算符的至少一个参数是 、 、 或数据类型时，可以重载这些运算符以执行预定义操作以外的操作。
运算符只是函数。运算符


-------------------------------------------------------- KeyGTK3PgOpExponentiate ----

Operator ^ (Exponentiate)   运算符
  
将数值表达式提高到一定功效

语法
Declare Operator ^ ( ByRef lhs As Double, ByRef rhs As Double ) As Double

用法
result = lhs ^ rhs

参数
lhs
左侧基本表达式。
rhs
右侧指数表达式。

返回值
返回提高到某个指数的基本表达式的幂。

描述
运算符 ^ （幂） 返回基表达式 （） 提高到某个指数表达式 （） 的结果。 仅适用于双浮点数，其他类型的操作数将在执行幂之前转换为双精度。小?


-------------------------------------------------------- KeyGTK3PgOpFor ----

Operator For (Iteration)   运算符
  
声明或定义具有用户定义类型变量的循环使用的运算符For...Next

语法
{ Type | Class | Union } typename
Declare Operator For ()
Declare Operator For ( [ ByRef | ByVal ] stp As typename )
...
End { Type | Class | Union }

用法
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

参数
(including arguments)
typename
、或 的名称TypeClassUnion
stp,step_value
用作增量值的对象typename
iterator
用作迭代器的对象typename
end_value
用作循环终止值的对象typename
start_value
最初用于将构造或赋值复制到迭代器的对象typename

描述
Operator For，并且可以在用户定义的类型定义中重载，以允许将该类型的对象用作循环中的迭代器和步骤值。
与所有非静


-------------------------------------------------------- KeyGTK3PgOpGreaterThan ----

Operator > (Greater Than)   运算符
  
比较一个表达式大于另一个表达式

语法
Declare Operator > ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator > ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator > ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator > ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator > ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator > ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator > ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator > ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator > ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator > ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator > ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator > ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator > ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator > ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs > rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果左侧表达式大于右侧表达式，则返回负 1 （-1）;如果小于或等于，则返回零 （0）。

描述
运算符 > （大于）是


-------------------------------------------------------- KeyGTK3PgOpGreaterThanOrEqual ----

Operator >= (Greater Than Or Equal)   运算符
  
比较大于或等于另一个表达式的表达式

语法
Declare Operator >= ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator >= ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator >= ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator >= ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator >= ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator >= ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator >= ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator >= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator >= ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator >= ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator >= ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator >= ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator >= ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator >= ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs >= rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果左侧表达式大于或等于右侧表达式，则返回负 1 （-1）;如果小于，则返回零 （0）。

描述
运算符 >=（大于或等于）是一个二元?


-------------------------------------------------------- KeyGTK3PgOpImp ----

Operator Imp (Implication)   运算符
  
返回两个数值的按位和（暗示）

语法
Declare Operator Imp ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Imp rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的按位含义。

描述
此运算符返回其操作数的按位含义，这是一种逻辑运算，该操作将生成一个值，其位设置取决于操作数的位（对于将布尔值


-------------------------------------------------------- KeyGTK3PgOpIntegerDivide ----

Operator \ (Integer Divide)   运算符
  
划分两个表达式Integer

语法
Declare Operator \ ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator \ ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

用法
result = lhs \ rhs

参数
lhs
左侧的红利表达式。
rhs
右侧除数表达式。

返回值
返回股息和除数的商。Integer

描述
运算符 \（整数除法）将两个表达式相除并返回结果。浮点数值通过向上或向下舍入转换为，并且生成的商的小数部?


-------------------------------------------------------- KeyGTK3PgOpIs ----

Operator Is (Run-Time Type Information)   运算符
  
检查对象是否与从其编译时类型派生的类型
兼容（在继承上下文中）

语法
result = expression Is  typename

参数
expression
要检查的表达式，是直接或间接派生自 使用的 类型的对象。ObjectExtends
typename
要检查的子类型。此类型必须直接或间接派生自表达式类型（对象的编译时类型）。

返回值
如果表达式是实类型的对象或其从表达式类型派生的基类型之一，则返回负 1 （）;如果表达式是不兼容类型的对象，则返回零 （）。-1typename0

描述
该运算符必须与继承结合使用，以便?


-------------------------------------------------------- KeyGTK3PgOpLessThan ----

Operator < (Less Than)   运算符
  
比较一个表达式小于另一个表达式

语法
Declare Operator < ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator < ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator < ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator < ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator < ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator < ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator < ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator < ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator < ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator < ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator < ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator < ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator < ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator < ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs < rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果左侧表达式小于右侧表达式，则返回负 1 （-1）;如果大于或等于，则返回零 （0）。

描述
运算符 < （小于） 是一?


-------------------------------------------------------- KeyGTK3PgOpLessThanOrEqual ----

Operator <= (Less Than Or Equal)   运算符
  
比较小于或等于另一个表达式的表达式

语法
Declare Operator <= ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator <= ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator <= ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator <= ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator <= ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator <= ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator <= ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator <= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator <= ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator <= ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator <= ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator <= ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator <= ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator <= ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs <= rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果左侧表达式小于或等于右侧表达式，则返回负 1 （-1）;如果大于，则返回零 （0）。

描述
运算符 <=（小于或等于


-------------------------------------------------------- KeyGTK3PgOpLet ----

Operator Let (Assign)   运算符
  
指示重载运算符 = （赋值） 时的赋值运算符

语法
{ Type | Class | Union } typename
Declare Operator Let ( [ ByRef | ByVal ] rhs As datatype )
End { Type | Class | Union }

Operator typename.Let ( [ ByRef | ByVal ] rhs As datatype )

用法
lhs = rhs
或
lhs => rhs

参数
typename 
、 或 的名称。TypeClassUnion
lhs
要分配到的变量。
rhs
要分配的值。

描述
Let用于重载运算符并将其与比较运算符区分开来。
将通过调用 中定义的运算符过程将 分配给 。
这包括通过使用 （或 ） 赋值从函数返回的对象的情况。
目


-------------------------------------------------------- KeyGTK3PgOpLetlist ----

Operator Let() (Assignment)   运算符
  
将用户定义类型的字段分配给变量列表

语法
Let( variable1 [, variable2 [, ... ]] ) = UDT_var
或
Let( variable1 [, variable2 [, ... ]] ) => UDT_var

参数
variable1 [, variable2 [, ... ]]
以逗号分隔的变量列表，用于接收变量字段的值。UDT
UDT_var
用户定义的类型变量。

描述
将变量字段中的值分配给变量列表。
当为 a Base 时，由运算符分配?


-------------------------------------------------------- KeyGTK3PgOpMemberAccess ----

Operator . (Member Access)   运算符
  
从对对象的引用返回对成员的引用

语法
Declare Operator . ( ByRef lhs As T ) ByRef As U

用法
result = lhs . rhs

参数
lhs
对象。
T
用户定义的类型。
rhs
要访问的成员的名称。
U
引用的类型。rhs

返回值
返回对 指定的成员的引用。rhs

描述
运算符 .（?


-------------------------------------------------------- KeyGTK3PgOpModulus ----

Operator Mod (Modulus)   运算符
  
从除法操作中查找剩余部分

语法
Declare Operator Mod ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer

用法
result = lhs Mod rhs

参数
lhs
左侧的红利表达式。
rhs
右侧除数表达式。

返回值
返回除法操作的其余部分。

描述
运算符 Mod（模数）除以两个表达式并返回余数。?


-------------------------------------------------------- KeyGTK3PgOpMultiply ----

Operator * (Multiply)   运算符
  
将两个数值表达式相乘

语法
Declare Operator * ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator * ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator * ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator * ( ByRef lhs As Double, ByRef rhs As Double ) As Double

用法
result = lhs * rhs

参数
lhs
左侧乘数表达式。
rhs
右侧乘数表达式。

返回值
返回两个乘数的乘积。

描述
运算符 * （乘法?


-------------------------------------------------------- KeyGTK3PgOpNegate ----

Operator - (Negate)   运算符
  
更改数值表达式的符号

语法
Declare Operator - ( ByRef rhs As Integer ) As Integer
Declare Operator - ( ByRef rhs As Single ) As Single
Declare Operator - ( ByRef rhs As Double ) As Double

用法
result = - rhs

参数
rhs
要否定的右侧数值表达式。

返回值
返回表达式的负数。

描述
运算符 - （否定）是否


-------------------------------------------------------- KeyGTK3PgOpNew ----

Operator New Expression   运算符
  
用于动态分配内存并构造指定类型的数据的运算符。

用法
result = New datatype
or
result = New datatype ( initializers, ... )
or
result = New datatype[ count ]

参数
datatype
要创建的数据类型的名称。
initializers
变量的初始值。
count
要分配的元素的确切数量。

返回值
数据类型为指向新分配数据的指针，如果内存分配失败，则为空指针。

描述
运算符动态分配内存并构造指定的数据类型。
对于简单类型（如整数），可以给出初始值。对于没有构造函数


-------------------------------------------------------- KeyGTK3PgOpNewOverload ----

Operator New Overload   运算符
  
成员运算符，用于过载应用于 UDT（用户定义的类型）时提供的动态内存分配过程部分。Operator New Expression

语法
Declare Operator New ( size As UInteger ) As Any Ptr
Declare Operator new[] ( size As UInteger ) As Any Ptr

参数
size 
要分配的字节数。
返回值
类型为 Any Ptr 的指针，指向新分配的内存的开始。

描述
成员运算符在应用于 UDT（用户定义类型）时，会重载该运算符提供的动态内存分配进程部分。因此，用户可以定义自己的动态内存分?


-------------------------------------------------------- KeyGTK3PgOpNext ----

Operator Next (Iteration)   运算符
  
确定是否应终止循环For...Next

语法
{ Type | Class | Union } typename
Declare Operator Next ( [ ByRef | ByVal ] cond As typename ) As Integer
Declare Operator Next ( [ ByRef | ByVal ] cond As typename, [ ByRef | ByVal ] stp As typename ) As Integer
...
End { Type | Class | Union }

用法
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

参数
(including arguments)
typename
、或 的名称TypeClassUnion
cond,end_value
用作循环终止值的对象typename
stp,step_value
用作增量值的对象typename
iterator
用作迭代器的对象typename
start_value
最初用于将构造或赋值复制到迭代器的对象typename

描述
Operator For，并且可以在用户定义的类型定义中重载，以允许将该类型的对象用作循环中的迭代器和步骤值。
与所有非静态成员过程一样?


-------------------------------------------------------- KeyGTK3PgOpNot ----

Operator Not (Complement)   运算符
  
返回数值的按位非补码

语法
Declare Operator Not ( ByRef rhs As Byte ) As Integer
Declare Operator Not ( ByRef rhs As UByte ) As Integer
Declare Operator Not ( ByRef rhs As Single ) As Integer
Declare Operator Not ( ByRef rhs As Double ) As Integer

Declare Operator Not ( ByRef rhs As T ) As T

用法
result = Not rhs

参数
rhs
右侧表达式。
T
任何数字或布尔类型。

返回值
返回其操作数的按位补集。

描述
此运算符返回其操作数的按位补集，这是一个逻辑运算，它生成一个值，其位设置取决于操作数的位。
 （对于布尔类型?


-------------------------------------------------------- KeyGTK3PgOpNotEqual ----

Operator <> (Not Equal)   运算符
  
比较不等式的两个表达式

语法
Declare Operator <> ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator <> ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator <> ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator <> ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator <> ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator <> ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator <> ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator <> ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator <> ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator <> ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator <> ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator <> ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator <> ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator <> ( ByRef lhs As T, ByRef rhs As T ) As Integer

Declare Operator <> ( ByRef lhs As Boolean, ByRef rhs As Boolean ) As Boolean

用法
result = lhs <> rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果表达式不相等，则返回负 1 （-1）;如果表达式相等，则返回零 （0）。

描述
运算符 <> （不等于） 是一个二元运算符，它比较两个表达式的不等式并返回结果 - ?


-------------------------------------------------------- KeyGTK3PgOpOr ----

Operator Or (Inclusive Disjunction)   运算符
  
返回两个数值的按位或（包括析取）

语法
Declare Operator Or ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Or rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的按位析取。

描述
此运算符返回其操作数的按位析取，这是一种逻辑运算，该操作产生一个值，其位设置取决于操作数的位（对于将布尔值


-------------------------------------------------------- KeyGTK3PgOpOrElse ----

Operator Orelse (Short Circuit Inclusive Disjunction)   运算符
  
返回两个数值的短路或（非独占分离）

语法
Declare Operator OrElse ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs OrElse rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的短路或（包括析取）。

描述
此运算符计算左侧表达式。如果结果为非零，则立即返回（true）。如果结果为零，则计算右侧，并返回其逻辑结


-------------------------------------------------------- KeyGTK3PgOpPlacementNew ----

Operator Placement New   运算符
  
用于在指定内存地址处构造对象的运算符。

语法
result = New(address) datatype
or
result = New(address) datatype ( initializers, ... )
or
result = New(address) datatype[ count ]

参数
address 
内存中要构造的位置。括号不是可选的。
initializers
变量的初始值。
datatype
要构造的数据类型的名称。
count
要构造的元素数。

返回值
指向新构造数据的类型的指针。datatype

描述
运算符在指定的内存位置构造指定的数据类型。
对于简单类型（如整数），可以给出初始值。对于没有 s 的类型，可


-------------------------------------------------------- KeyGTK3PgOpPpConcat ----

Operator ## (Preprocessor Concatenate)   运算符
  
用于连接字符串的预处理器运算符

语法
text##text

描述
此运算符通过连接令牌两侧的文本来创建新令牌。此文本可以被其他宏识别并进一步扩展。一种用途是创建一个宏，该宏根?


-------------------------------------------------------- KeyGTK3PgOpPpEscape ----

Operator ! (Escaped String Literal)   运算符
  
显式指示应为转义序列处理字符串文本。

语法
!"text"

参数
!
预处理器转义字符串运算符
"text"	
包含转义字符的字符串文本

描述
此运算符显式指示应处理其后面的字符串文本（用双引号括起来）作为转义序列。这是一个预处理器运算符，只能在编译时与字符串文本一起使用。
字符串文本?


-------------------------------------------------------- KeyGTK3PgOpPpNoescape ----

Operator $ (Non-Escaped String Literal)   运算符
  
显式指示不应为转义序列处理字符串文本。

语法
$"text"

参数
$
预处理器非转义运算符
"text"	
字符串文本

描述
此运算符显式指示不应处理其后面的字符串文本（用双引号括起来）作为转义序列。这是一个预处理器运算符，只能在编译时与字符串文本一起使用。
字符串文本的默认?


-------------------------------------------------------- KeyGTK3PgOpPpStringize ----

Operator # (Preprocessor Stringize)   运算符
  
用于将宏参数转换为字符串的预处理器运算符

语法
#macro_argument

描述
此运算符将 转换为一个字符串，其值为参数的名称。此替换是在宏扩展期间（编译之前）进行的。
 注意：由于此功能，在宏中使用文件处理语句时应小心。由于采用“#”参数的文件处理?


-------------------------------------------------------- KeyGTK3PgOpProcptr ----

Operator Procptr (Procedure Pointer)   运算符
  
返回过程的地址

语法
Declare Operator ProcPtr ( ByRef identifier As proctype [, proctype ] ) As proctype Ptr

用法
result = ProcPtr ( identifier [, proctype ] )

参数
identifier
过程标识符。
proctype
任何类型的过程（子/函数）。

返回值
返回过程的地址。

描述
此运算符返回 或 过程的地址。
使用两个参数语法时，这允许基于子/函数类型获取 过程指针。
这样就可以显式指定子/函数的“类型”，以解决过程重载或检查非


-------------------------------------------------------- KeyGTK3PgOpPtrIndex ----

Operator [] (Pointer Index)   运算符
  
返回对来自地址的内存偏移量的引用

语法
Declare Operator [] ( ByRef lhs As T Pointer, ByRef rhs As Integer ) ByRef As T


用法
result = lhs [ rhs ]
or
lhs [ rhs ] = value

参数
lhs
基址。
rhs
从 的有符号偏移量。lhs
T
任何数据类型。

描述
此运算符返回对内存中距基址一定距离的值的引用。它本质上是“”的简写，因为引用可以被认为是具有内存位置“”作为值的指针，并且隐式取消引用;两者都做同样的


-------------------------------------------------------- KeyGTK3PgOpPtrMemberAccess ----

Operator -> (Pointer To Member Access)   运算符
  
从指向对象的指针返回对成员的引用

语法
Declare Operator -> ( ByRef lhs As T Ptr ) ByRef As U

用法
result = lhs -> rhs

参数
lhs
对象的地址。
T
用户定义的类型。
rhs
要访问的成员的名称。
U
引用的类型。rhs

返回值
返回对 指定的成员的引用。rhs

描述
运算符 ->（指向成员访问的指针）通过指向某个对象的成员的指针返回对该对象的引用。它具有取消引用指向对象的指针，然后使用 的效?


-------------------------------------------------------- KeyGTK3PgOpShiftLeft ----

Operator Shl (Shift Left)   运算符
  
将数值表达式的位向左移动

语法
Declare Operator Shl ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator Shl ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger
Declare Operator Shl ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As LongInt
Declare Operator Shl ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As ULongInt

用法
result = lhs Shl rhs

参数
lhs
左侧表达式。
rhs
右侧偏移表达式。

返回值
返回向左移动次数的结果。lhsrhs

描述
运算符 Shl（向左移）将左侧表达式 （） 中的所有位向左移动，由右侧表达式 （） 指定多次。从数值上讲，结果与 “” 相同。例如，“” 返回二进制数，“


-------------------------------------------------------- KeyGTK3PgOpShiftRight ----

Operator Shr (Shift Right)   运算符
  
将数值表达式的位向右移动

语法
Declare Operator Shr ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator Shr ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger
Declare Operator Shr ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As LongInt
Declare Operator Shr ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As ULongInt

用法
result = lhs Shr rhs

参数
lhs
左侧表达式。
rhs
右侧偏移表达式。

返回值
返回右移移次数的结果。lhsrhs

描述
运算符 Shr（向右移动）将左侧表达式 （） 中的所有位向右移动，由右侧表达式 （） 指定多次。从数值上讲，结果与“ / ”相同。例如，“” 返回二进制数，


-------------------------------------------------------- KeyGTK3PgOpStep ----

Operator Step (Iteration)   运算符
  
递增循环的迭代器For...Next

语法
{ Type | Class | Union } typename
Declare Operator Step ()
Declare Operator Step ( [ ByRef | ByVal ] stp As typename )
...
End { Type | Class | Union }

用法
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

参数
(including arguments)
typename
、或 的名称TypeClassUnion
stp,step_value
用作增量值的对象typename
iterator
用作迭代器的对象typename
end_value
用作循环终止值的对象typename
start_value
最初用于将构造或赋值复制到迭代器的对象typename

描述
Operator For，并且可以在用户定义的类型定义中重载，以允许将该类型的对象用作循环中的迭代器和步骤值。
与所有非静态成员过程一样，


-------------------------------------------------------- KeyGTK3PgOpStringIndex ----

Operator [] (String Index)   运算符
  
返回对字符串中字符的数值的引用

语法
Declare Operator [] ( ByRef lhs As String, ByRef rhs As Integer ) ByRef As UByte
Declare Operator [] ( ByRef lhs As ZString, ByRef rhs As Integer ) ByRef As UByte
Declare Operator [] ( ByRef lhs As WString, ByRef rhs As Integer ) ByRef As T

用法
result = lhs [ rhs ]
or
lhs [ rhs ] = value

参数
lhs
字符串（字符串引用，而不是作为本地副本返回的字符串）。
rhs
与第一个字符的从零开始的偏移量。
T
宽字符类型（因平台而异）。

描述
以下运算符返回对字符串中特定字符的数值的引用：
对于一个或一个：StringZString
a（包含字符的 ASCII 值）。UByte
?


-------------------------------------------------------- KeyGTK3PgOpStrptr ----

Operator Strptr (String Pointer)   运算符
  
返回字符串的字符数据的地址。

语法
Declare Operator StrPtr ( ByRef lhs As String ) As ZString Ptr
Declare Operator StrPtr ( ByRef lhs As WString ) As WString Ptr

用法
result = StrPtr ( lhs )

参数
lhs
字符串。

返回值
向字符串/字符串的字符数据返回 a（如果为空字符串，则为 null 值）。ZString/WString Ptr

描述
此运算符返回指向字符串/字符串的字符数据开头的 。 是获取字符串字符数据地址的正确方法。
如果为空（仅适用于长度可变的字符串），则返回空指


-------------------------------------------------------- KeyGTK3PgOpSubtract ----

Operator - (Subtract)   运算符
  
减去两个表达式

语法
Declare Operator - ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator - ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator - ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator - ( ByRef lhs As Double, ByRef rhs As Double ) As Double

Declare Operator - ( ByRef lhs As T Pointer, ByRef rhs As T Pointer ) As Integer
Declare Operator - ( ByRef lhs As T Pointer, ByRef rhs As Integer ) As T Pointer

Declare Operator - ( ByRef lhs As T, ByRef rhs As T ) As Integer
Declare Operator - ( ByRef lhs As T, ByRef rhs As Integer ) As T
Declare Operator - ( ByRef lhs As Integer, ByRef rhs As T ) As T

用法
result = lhs - rhs

参数
lhs
要从中减去的左侧表达式。
rhs
要减去的右侧表达式。
T
任何指针类型。

返回值
返回两个表达式的减法。

描述
当左侧和右侧表达式是数值时，运算符 - （减去）返回两个值的减法。
如果左侧和右侧表达式都是类型，则对于某种类型，运算符对地址执行指针减?


-------------------------------------------------------- KeyGTK3PgOption ----

Option()
  
指定符号的其他属性和/或特征。

语法
Option( "literal-text" )

参数
literal-text
指定选项的文字文本。请参阅说明。

描述
Option()允许程序员指定其他属性或特征。在语法中，需要将字符串括在引号和括号中。无法识别的选项将被忽略。
还可以用作语句来指定其他编译时选项。请参见编译器开关。



-------------------------------------------------------- KeyGTK3PgOptionbase ----

Option Base   选项
  
指定数组声明的默认下限

语法
Option Base base_subscript

参数
base_subscript
数字文本值

描述
Option Base是为以下任何数组声明设置默认下限的语句。此默认值对于使用模块的其余部分仍然有效，并且可


-------------------------------------------------------- KeyGTK3PgOptionbyval ----

Option ByVal   选项
  
指定默认情况下在过程声明中按值传递参数

语法
Option ByVal

描述
Option ByVal是一个语句，它将过程参数的缺省传递约定设置为按值，就像用 声明一样。此默认


-------------------------------------------------------- KeyGTK3PgOptiondynamic ----

Option Dynamic   选项
  
指定可变长度数组声明

语法
Option Dynamic

描述
Option Dynamic是一个语句，它指定任何后续数组声明都是可变长度的，无论它们是否使用常量下标范围声明。这对于所使用的模?


-------------------------------------------------------- KeyGTK3PgOptionescape ----

Option Escape   选项
  
指定默认情况下应为类似 C 的转义序列处理字符串文本

语法
Option Escape

描述
Option Escape是一个语句，默认情况下，它会导致针对类似 C 的转义序列处理字符串文本。通常，转义序列在字符串文本中不起作用，除非字符串以 ！ 为前缀。运算符（转义字符串文本


-------------------------------------------------------- KeyGTK3PgOptionexplicit ----

Option Explicit   选项
  
强制在使用变量、对象和数组之前对其进行声明

语法
Option Explicit

描述
Option Explicit是一个语句，它强制任何以下变量、对象或数组用法前面加上声明，例如，


-------------------------------------------------------- KeyGTK3PgOptiongosub ----

Option Gosub   选项
  

	Enables support for GoSub and On Gosub.

Syntax
Option Gosub

Description
Option Gosub enables support for GoSub and Return (from gosub).

Because Return could mean return-from-gosub or return-from-procedure, Option Gosub and Option Nogosub can be used to 


-------------------------------------------------------- KeyGTK3PgOptionnogosub ----

Option Nogosub   选项
  
禁用对 和 的支持。GoSubOn Gosub

语法
Option Nogosub

描述
Option Nogosub禁用对 和 的支持（从 gosub）。
因为可能意味着从 gosub 返回或从过程返回，并且可用于启用和禁用支持。当支持被禁用时，将被识别为


-------------------------------------------------------- KeyGTK3PgOptionnokeyword ----

Option NoKeyword   选项
  
“未定义”保留关键字

语法
Option NoKeyword keyword

参数
keyword
要取消定义的关键字

描述
Option NoKeyword是一个取消定义 FreeBASIC 保留关键字的语句，这意味着它可以用作变量、对象


-------------------------------------------------------- KeyGTK3PgOptionprivate ----

Option Private   选项
  
默认情况下为过程声明指定内部链接

语法
Option Private

描述
Option Private是一个语句，默认情况下，它为以下任何过程声明内部链接，就像用 声明一样。此缺省值对于


-------------------------------------------------------- KeyGTK3PgOptionstatic ----

Option Static   选项
  
恢复为默认数组声明行为

语法
Option Static

描述
Option Static是一个语句，它覆盖 的行为，即使用常量下标范围声明的数组是固定长度的。这对于所使用的模块的其余部分仍然有效?


-------------------------------------------------------- KeyGTK3PgOpValueOf ----

Operator * (Value Of)   运算符
  
取消引用指针

语法
Declare Operator * ( ByRef rhs As T Pointer ) ByRef As T


用法
result = * rhs
or
* rhs = value

参数
rhs
要取消引用的地址。
T
任何标准、用户定义或过程类型。

返回值
返回对存储在地址 中的值的引用。rhs

描述
运算符 * （值的）返回对存储在地址处的值的引用，通常称为取消引用运算符。操作数不会以任何方式进行修改。
可以取消引用的任何类型的 ，但 .



-------------------------------------------------------- KeyGTK3PgOpVarptr ----

Operator Varptr (Variable Pointer)   运算符
  
返回变量或对象的地址

语法
Declare Operator VarPtr ( ByRef lhs As T ) As T Ptr

语法
result = VarPtr ( lhs )

参数
lhs
变量或对象。
T
任何数据类型。

返回值
返回变量或对象的地址。

描述
此运算符返回其操作数的地址。
当操作数为 类型时，将返回内部字符串描述符的地址。用于检索字符串数据的地址。
操作数不能是数组，但可以是数组元素。例如


-------------------------------------------------------- KeyGTK3PgOpXor ----

Operator Xor (Exclusive Disjunction)   运算符
  
返回两个数值的按位异构（独占析取）

语法
Declare Operator Xor ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Xor rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的按位 xor。

描述
此运算符返回其操作数的按位排除，这是一种逻辑运算，该操作将生成一个值，其位设置取决于操作数的位（对于将布尔?


-------------------------------------------------------- KeyGTK3PgOrGfx ----

Or   或
  
图形语句的参数，该语句使用按位作为 blitting 方法PutOr

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Or

参数
Or
必填。

描述
该方法使用按位函数将每个源像素与相应的目标像素组合在一起。这样做的结果是输出为目标像素。
此方法适用于所有图形模式。没有蒙版颜色，尽管颜色值（在全彩色模式下）不会产生


-------------------------------------------------------- KeyGTK3PgOut ----

Out   端口输出
  
将值输出到硬件端口。

语法
Declare Function Out ( ByVal port As UShort , ByVal data As UByte ) As Long

用法
Out port,value

参数
port
要写入的硬件端口。
data
要写入的数?


-------------------------------------------------------- KeyGTK3PgOutput ----

Output   输出
  
指定要为输出模式打开的文本文件

语法
Open filename for Output [Encoding encoding_type] [Lock lock_type] as [#]filenum 

参数
filename
要打开以进行输出的文件名
encoding_type
指示文件的编码类型
lock_type
锁定以在文件打开时使用
filenum
要与打开的文件关联的未使用的文件编号

描述
用于打开文本文件进行写入的文件模式。
此模式用于写入带有 的文本，或以逗号分隔的值。
文本文件不能在FreeBASIC中同时读取和写


-------------------------------------------------------- KeyGTK3PgOverload ----

Overload   对象重载
  
指定过程名称可以重载

语法
Declare [Static] Sub procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]

Declare [Static] Function procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type [Static] [Export]

[Public|Private] Sub procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

[Public|Private] Function procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

描述
在过程声明中，允许重载过程名称，也就是说，如果其他过程（无论是子过程还是函数）的参数列表是唯一的，则可以使用相同的名称声明其他过程（ 无论它们是子还是函数）。如果两个参数列表包含


-------------------------------------------------------- KeyGTK3PgOverride ----

Override   对象覆盖
  
方法属性;指定方法必须覆盖虚拟

语法
Type typename Extends basename
...
Declare Sub|Function|Operator|Property|Destructor ... ( [parameterlist] ) [[ ByRef ] As datatype] Override
...
End Type

描述
在方法声明中，可用于指示此方法应重写基类中的虚拟或抽象方法。然后，如果该方法不重写任何内容（只有非静态方法可以重写虚拟或抽象方法），编译器将显示错误。
强烈建议不要强制使用 


-------------------------------------------------------- KeyGTK3PgPaint ----

Paint   填充
  
填充由指定颜色的边框分隔的区域

语法
Paint [target,] [STEP] (x, y)[, [paint][, [border_color]]]

参数
target
指定要在其上绘制的缓冲区。
STEP
表示坐标是相对的
(x, y)
用于开始泛光填充（绘画）的像素的坐标
paint
颜色属性或填充图案
 一个数值表示一种颜色，而一个字符串表示一个填充图案
border_color
填充的边界颜色

描述
图形命令，用于填充由指定颜色的边框分隔的区域。也称为“泛水填充”或“油漆桶”。
可以在语句设


-------------------------------------------------------- KeyGTK3PgPalette ----

Palette   调色模式
  
使用调色板颜色自定义模式中的颜色

语法
Palette [Get] [index, color]
Palette [Get] [index, r, g, b]
Palette [Get] Using arrayname(idx)

参数
Get
指示获取选项板信息，而不是设置选项板信息
index
调色板索引
color
颜色属性
r
红色成分
g
绿色成分
b
蓝色分量
Using
指示使用颜色值数组
arrayname(idx)
用于获取/设置颜色属性的数组和索引

描述
该语句用于检索或自定义颜色深度高达8bpp的图形模式的当前调色板;在具有较高颜色深度的模式下使用时将不起作用


-------------------------------------------------------- KeyGTK3PgPascal ----

pascal   pascal
  
在过程声明中指定 Pascal 样式的调用约定

语法
Sub name pascal [Overload] [Alias "alias"] ( parameters )
Function name pascal [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

描述
在过程声明中，指定过程将使用调用约定。在 Pascal 调用约定中，任何参数都将以与它们列出的顺序相同的顺序传递（推送到堆栈上），即从左到右。过程不需要保留 或 寄存器，并且必须在堆栈返


-------------------------------------------------------- KeyGTK3PgPcopy ----

PCopy   复制P模式
  
将一个图形或文本页面复制到另一个图形或文本页面

语法
Declare Function PCopy ( ByVal source As Long = -1, ByVal destination As Long = -1 ) As Long

用法
PCopy [ source ] [, destination ]

参数
source
要从中复制的页面
destination
要复制到的页面

返回值
如果成功，则返回零 （），或返回非零错误代码以指示失败。0

描述
将一个图形或文本视频页面复制到另一个图形或文本视频页面。用于在一个不可见页面上绘制所有图形并将其复制到活动的可见页?


-------------------------------------------------------- KeyGTK3PgPeek ----

Peek   内存取地址
  
获取内存中某个地址处的任意类型的值

语法
Declare Function Peek ( ByVal address As Any Ptr ) ByRef As UByte
Declare Function Peek ( datatype, ByVal address As Any Ptr ) ByRef As datatype

用法
Peek( [ datatype, ] address )

参数
address
内存中要从中获取值的地址。
datatype
要获取的值的类型。如果省略，则假定为。UByte

描述
此过程返回对内存地址在内存中给出的值的引用，并且等效于：
*cast(ubyte ptr, address)
或
*cast(datatype ptr, address)



-------------------------------------------------------- KeyGTK3PgPmap ----

PMap   映射P模式
  
映射视图和物理映射之间的坐标。

语法
Declare Function PMap ( ByVal coord As Single, ByVal func As Long ) As Single

用法
result = PMap( coord, func )

参数
coord
指示要映射的坐标的表达式。
func
要应用于给定坐标的映射函数编号。

返回值
映射的坐标值。

描述
此函数转换视图（由语句定义）和物理（由语句设置）映射之间的坐标。根据 的值，用于计算要由 以下者返回的不同映射：WindowView (Graphic


-------------------------------------------------------- KeyGTK3PgPoint ----

Point   点
  
返回指定像素坐标的颜色属性

语法
result = Point( coord_x, coord_y [,buffer] )
or
result = Point( function_index )


用法
coord_x
像素的 x 坐标
coord_y
像素的 y 坐标
buffer
要从中读取的图像缓冲区
function_index
要返回的屏幕坐标类型：值之一 、 、 、0123

返回值
返回数据类型为 .
如果提供了像素的坐标，Point 将返回指定坐标处的颜色属性，作为 8 个 bpp 索引模式下的 8 位调色板索引、16 个 bpp 模式下的 24 位 RGB 值（未使用的前 8 位，R、G，B 的精度有限）以及 32 bpp 模式下的 32 位 RGB 或 RGBA 值（高 8 位未使用或保持 Alpha）。请注意，它不会返回 16 位值（5 位 R + 6 位 G + 5 位 B）。
如果参数是函数索引，则 Point 将返回由最后一个图形命令设置的图形光标坐标之一。ULongx, y

论点返回的值0当前物理 x 坐标。1当前物理 y 坐标。2当前视图 x 坐标。如果尚未使用 WINDOW 语句，则返回与 POINT（0） 函数相同的值。3


-------------------------------------------------------- KeyGTK3PgPointCoord ----

PointCoord   点坐标
  
查询的笔在图形模式下的位置Draw

语法
Declare Function PointCoord( ByVal func As Long ) As Single

用法
result = PointCoord( func )

描述
该函数可用于在图形模式下查询笔的 x 和 y 位置。结果值取决于传递的 func 值：PointCoordDraw

函子值：返回值：0x 物理坐标，与 PMap（ 点坐


-------------------------------------------------------- KeyGTK3PgPoke ----

Poke   内存读址
  
将值分配给内存中的位置。

语法
Declare Sub Poke ( ByVal address As Any Ptr, ByRef value As UByte )
Declare Sub Poke ( datatype, ByVal address As Any Ptr, ByRef value As datatype )

用法
Poke [ datatype, ] address, value

参数
datatype
指定地址处的数据类型。如果省略，则假定为。UByte
address
内存中要分配到的位置。
value
要分配的值。

描述
Poke为内存中的某个位置赋值。它等效于
*cast(ubyte ptr, address) = value
或
*cast(datatype ptr, address) = value

当 是用户定义的?


-------------------------------------------------------- KeyGTK3PgPos ----

Pos   位置
  
返回文本光标的水平（从左到右）位置

语法
Declare Function Pos ( ) As Long
Declare Function Pos ( ByVal dummy As Long ) As Long

用法
result = Pos[ ( dummy ) ]

参数
dummy
为向后兼容 QBASIC 而保留的未使用参数。

返回值
返回文本?


-------------------------------------------------------- KeyGTK3PgPpassert ----

#assert   #编译中断
  
预处理器条件指令

语法
#assert  condition

参数
condition
假定为真的条件表达式

描述
在编译时断言条件表达式的真实性。如果 为 false，则编译将因错误而停止。
此语


-------------------------------------------------------- KeyGTK3PgPpcmdline ----

#Cmdline
  
预处理器指令

语法
#cmdline "args..."

参数
args...
有效且通用选项的参数列表（用空格分隔）。Compiler Options-print-help

描述
#cmdline是一个预处理器指令，允许从第一个指定的 fb 源文件内部进行指定。第一个源文件是在 shell 或 IDE 命令行上调用 fbc 编译器的第一个指定的 '.bas' 文件。 在第一个源?


-------------------------------------------------------- KeyGTK3PgPpdefine ----

#define   #预定义
  
用于定义宏的预处理器指令

语法
#define identifier body
#define identifier( [ parameters ] ) body
#define identifier( [ parameters, ] Variadic_Parameter... ) body

描述
#define允许声明基于文本的预处理器宏。一旦编译器看到 a，它将开始用 替换 的进一步出现。 可能为空。扩展以递归方式完成，直到没有更多要扩展的内容，编译器可以继续分析生成的代码。 可?


-------------------------------------------------------- KeyGTK3PgPpelse ----

#else   #否则
  
预处理器条件指令

语法
#if (expression)
' Conditionally included statements if expression is True
#else
' Conditionally included statements if expression is False 
#endif

描述
#else可以添加到 、 或 块中，以便为条件


-------------------------------------------------------- KeyGTK3PgPpelseif ----

#elseif   #又如
  
预处理器条件指令

语法
#if (expression1)
' Conditionally included statements if expression1 is True
#elseif (expression2)
' Conditionally included statements if expression2 is True
#else
' Conditionally included statements if both
' expression1 and expression2 are False
#endif

描述
可以将#elseif?


-------------------------------------------------------- KeyGTK3PgPpendif ----

#endif   #结束如果
  
预处理器条件指令

语法
#endif

描述
结束一组条件指令 请参阅
 、?


-------------------------------------------------------- KeyGTK3PgPperror ----

#error   #错误
  
预处理器诊断指令

语法
#error error_text

参数
error_text
显示消息

描述
#error中断编译以在编译器找到它时显示，然后解析继续。
此关键字必须由 ...括起来，因此编译器只有在满足时才能访问。



-------------------------------------------------------- KeyGTK3PgPpif ----

#if   #如果
  
预处理器条件指令

语法
#if (expression)
' Conditionally included statements
#endif

描述
有条件地在编译时包含语句。
如果计算结果为 True（非零），则包括 / 块中包含的语句;如果计算结果为 False （），则包括排除（忽略）。
此条件指


-------------------------------------------------------- KeyGTK3PgPpifdef ----

#ifdef   #如果定义
  
预处理器条件指令

语法
#ifdef symbol
' Conditionally included statements
#endif

描述
有条件地在编译时包含语句。
如果已定义，则包括块中的语句，如果未定义，则排除（忽略）。
等效于#i


-------------------------------------------------------- KeyGTK3PgPpifndef ----

#ifndef   #如果未定义
  
预处理器条件指令

语法
#ifndef symbol
' Conditionally included statements
#endif

描述
有条件地在编译时包含语句。
如果未定义，则包括块中的语句，如果未定义符号，则排除（忽略）。
等效


-------------------------------------------------------- KeyGTK3PgPplang ----

#lang   #语言
  
用于设置编译器方言的预处理器语句。

语法
#lang "lang"

参数
"lang"
要设置的方言，括在双引号中，并且必须是 、 、 或 之一。"fb""fblite""qb""deprecated"

描述
如果未在命令行上提供 -forcelang 选项，则可用于设置显示该选项的源模块的方言。最多将在源模块上进行两次传递。在第一次传递时，如果指定的方言不是默认?


-------------------------------------------------------- KeyGTK3PgPplibpath ----

#libpath   #库路径
  
用于添加库搜索路径的预处理器语句

语法
#libpath "path"

描述
将库搜索路径添加到链接器的搜索路径列表中，就像在命令行上使用“-p”选项指定一样。
?


-------------------------------------------------------- KeyGTK3PgPpline ----

#line   #行号
  
用于设置当前行号和文件名的预处理器指令

语法
#line number [ "name" ]

参数
number 
新行号
"name"
新文件名（可选）

描述
通知编译器行号和文件名的更改，并相应地更新 和 宏值。
编译时消息和运行时消息都受此指令的影响


-------------------------------------------------------- KeyGTK3PgPpmacro ----

#Macro...#Endmacro
  
用于定义多行宏的预处理器指令

语法
#macro identifier [?] ( [ parameters ] )
body
#endmacro

#macro identifier [?] ( [ parameters, ] Variadic_Parameter... )
body
#endmacro

描述
#macro是 的多行版本。
如果在定义语法中使用 可选的问号 （？），则可以调用带有参数的宏，而无需在参数两边使用括号。
 注意：请注意触发的可能性，以免与包含宏名称作为其术语之一的表?


-------------------------------------------------------- KeyGTK3PgPpPragma ----

#pragma   #兼容设定
  
预处理器指令

语法
#pragma option [ = value ]
或或
#pragma push ( option [, value ] )

#pragma pop ( option )

参数
和相关 s 的可能值：optionvalue

选择价值描述msbitfields假使用与 gcc 兼容的位字段（默认）msbitfields真使用与 Microsoft C 编译器中使用的位字段兼容的位字段一次不适用导致编译指示的源文件的行为就像它曾经包含在#include一样...固执性假禁用当前源中的“CONST 限定符已丢弃”警告固执性真在当前源中启用“已丢弃 CONST 限定符”警告查找108假对非限定符号名称使用常规符号查找查找108真对非限定符号名称使用 fbc-1.08.x 或更早版本的符号查找
如果未给出值，编译器将假定为 True （-1）。可以使用零 （0） 值代替 False。可以使


-------------------------------------------------------- KeyGTK3PgPpPragmaReserve ----

#Pragma Reserve   #兼容设定
  
预处理器指令

语法
#pragma reserve symbol
奥罗罗
#pragma reserve (extern) symbol

#pragma reserve (asm) symbol

#pragma reserve (asm, extern) symbol)或#pragma reserve (extern, asm) symbol)

参数
symbol
要保留的符号名称。

描述
#pragma reserved语句是预处理器指令，允许用户通过访问 fbc 编译器的内部符号表来保留符号名称：
- #pragma reserve symbol
语句将在当前范围/命名空间中保留一个符号名称，如


-------------------------------------------------------- KeyGTK3PgPpprint ----

#print   #输出
  
预处理器诊断指令

语法
#print text

描述
使编译器


-------------------------------------------------------- KeyGTK3PgPpundef ----

#undef   #取消定义
  
用于取消定义宏的预处理器指令

语法
#undef symbol

描述
取消定义以前用 定义的符号。
可用于确保宏或符号的生存期有限，并且不会与稍后可能在源代码中定义的类似宏定义冲突。
 ?


-------------------------------------------------------- KeyGTK3PgPreserve ----

Preserve   数组保留
  
用于保留内容将调整数组大小ReDim

语法
ReDim Preserve array(...) [As datatype]

描述
用于，以便在调整数组大小时，不会重置数据，而是保留数据。这意味着当阵列扩大时，只有新数据被重置，而旧数据保持不变（但不一定在内存中的相同绝对地址）。
 注意：可能无法在所有情?


-------------------------------------------------------- KeyGTK3PgPreset ----

PReset   绘制像素
  
绘制单个像素

语法
PReset [target ,] [STEP] (x, y) [,color]

参数
target
指定要在其上绘制的缓冲区。
STEP
表示坐标是相对的
(x, y)
像素的坐标。
color
颜色属性。

描述
target指定要在其上绘制的缓冲区。 可能是使用 或 创建的映像。如果省略，则目标默认为屏幕的当前工作页面。
是像素的坐标。STEP（如果存在），则表示坐标相


-------------------------------------------------------- KeyGTK3PgPrint ----

(Print | ?)
  
将文本写入屏幕

语法
(Print | ?) [ expressionlist ] [ , | ; ]

参数
expressionlist
要打印的项目列表

描述
Print将值列表输出到屏幕。数值将转换为其字符串表示形式，符号的左填充。用户定义类型的对象必须重载 。
表达式列表中的连续值由逗号 （） 或分号 （） 分隔。逗号表示打印应位于下一个


-------------------------------------------------------- KeyGTK3PgPrintPp ----

(Print | ?) #
  
将值列表写入文件或设备

语法
(Print | ?) # filenum, [ expressionlist ] [ , | ; ]

参数
filenum
为 打开的文件或设备的文件编号。OutputAppend
expressionlist
要写入的值的列表。

描述
Print #将值列表输出到文本文件或设备。数值将转换为其字符串表示形式，符号的左填充。用户定义类型的对象必须重载 。
表达式列表中的连续值由逗号 （） 或分号 （?


-------------------------------------------------------- KeyGTK3PgPrintusing ----

(Print | ?) Using
  
将格式化文本输出到屏幕或输出设备。

语法
(Print | ?) [# filenum ,] [ printexpressionlist {,|;} ] Using formatstring ; [ expressionlist [ ; ] ]

参数
filenum
为 打开的文件或设备的文件编号。（或者，可在适当情况下使用，而不是OutputAppendLPrintPrint #)
printexpressionlist
要打印的项目的可选前面列表，以逗号 （） 或分号 （） 分隔（有关详细信息，请参阅）。,;Print
formatstring
要使用的字符串格式。
expressionlist
要设置格式的项目列表，以分号 （） 分隔。;

描述
使用参数确定的格式打印到屏幕显示各种表达式。在内部，使用 2048 字节的缓冲


-------------------------------------------------------- KeyGTK3PgPrivate ----

Private   私有
  
指定具有内部链接的过程

语法
Private Sub procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

Private Function procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

描述
在过程定义（在声明行级别禁止）中，指定过程具有内部链接，这意味着其名称对外部模块不可见。
因此，在编译的模块中，如果两个过程都是 ，则可能存在两个具有相同标识符但定义在不同模块内?


-------------------------------------------------------- KeyGTK3PgProperty ----

Property   类属性
  
声明或定义类型或类中的属性

语法
{ Type | Class } typename
Declare Property fieldname () [ ByRef ] As datatype
Declare Property fieldname ( [ ByRef | ByVal ] new_value As datatype )
Declare Property fieldname ( [ ByRef | ByVal ] index As datatype ) [ ByRef ] As datatype
Declare Property fieldname ( [ ByRef | ByVal ] index As datatype, [ ByRef | ByVal ] new_value As datatype )
End { Type | Class }

Property typename.fieldname () [ ByRef ] As datatype [ Export ]
statements
End Property

Property typename.fieldname ( [ ByRef | ByVal ] new_value As datatype ) [ Export ]
statements
End Property

Property typename.fieldname (  [ ByRef | ByVal ] index As datatype ) [ ByRef ] As datatype [ Export ]
statements
End Property

Property typename.fieldname (  [ ByRef | ByVal ] index As datatype, [ ByRef | ByVal ] new_value As datatype ) [ Export ]
statements
End Property

参数
typename 
或 的名称TypeClass
fieldname 
属性的名称
new_value 
传递给要分配的属性的值
index 
属性索引值

描述
Property字段用于获取和设置 a 的值，或者以与其他数据字段相同的方式设置 a 的值，只是执行过程，而不是简单地分配到字段或从字段中检索到的值。
是为其声明


-------------------------------------------------------- KeyGTK3PgPset ----

PSet   绘点
  
绘制单个像素

语法
PSet [target ,] [STEP] (x, y) [,color]

参数
target
指定要在其上绘制的缓冲区。
STEP
表示坐标是相对的
(x, y)
像素的坐标。
color
颜色属性。

描述
target指定要在其上绘制的缓冲区。 可能是使用 或 创建的映像。如果省略，则默认为屏幕的当前工作页面。
是像素的坐标。 如果存在，则指示坐标相对于图形光标?


-------------------------------------------------------- KeyGTK3PgPsetGfx ----

PSet   绘点
  
选择作为 blitting 方法的图形语句的参数PutPSet

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], PSet

参数
PSet
必填。

描述
该方法将源像素值复制到目标像素上。
这是最简单的方法。目标缓冲区中的像素将直接被源缓?


-------------------------------------------------------- KeyGTK3PgPtr ----

(Pointer | Ptr)
  
变量声明类型修饰符

语法
... As DataType {Pointer | Ptr}

描述
声明指针变量。
变量类型可以是预定义类型，也可以是用户定义类型。
运算符 或 用于获取变量的地址。运算符用于取消引用指针，即访?


-------------------------------------------------------- KeyGTK3PgPublic ----

Public   公共
  
指定具有外部链接的过程。

语法
Public Sub procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

Public Function procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

描述
在过程定义（在声明行级别禁止）中，指定过程具有外部链接，这意味着其名称对外部


-------------------------------------------------------- KeyGTK3PgPutfileio ----

Put (File I/O)   写入字节
  
将数据从缓冲区写入文件

语法
Put #filenum As Long, [position As LongInt], data As Any [, amount As UInteger]
Put #filenum As Long, [position As LongInt], data As String
Put #filenum As Long, [position As LongInt], data() As Any

用法
Put #filenum, position, data [, amount]
varres = Put (#filenum, position, data [, amount])

参数
filenum
打开文件时传递给的值。Open
position
文件中必须从何处开始的位置。如果文件已打开，则该位置位于记录中，否则以字节为单位给出。如果省略，则从当前文件指针位置开始写入。该位置是从 1 开始的：即文件的第一个记录或字节位于 位置 。
如果省略或为零 （），则文件写入将从当前文件位置开始。PutFor Random1position0
data
从中写入数据的缓冲区。它可以是数值变量、字符串、数组或用户定义的类型。该操作将尝试将完整的变量传输到磁盘，除非给出。
放置数组时，后面应跟一对空的括号：“”。 将写入数组中的所有数据。 是不允许的。
输入 s 时，写入的字节数与字符串数据中的字节数相同。 是不允许的。
注意：如果要从缓冲区写入值，则不应将指针传递到缓冲区;相反，您应该传递缓冲区中的第一个变量（这可以通过取消引用指针来完成）。如果直接传递指针，则将放置指针变量中的内存，而不是它指向的内存。amountdata()PutamountStringamountOperator * (Value Of)Put
amount
使写入文件的连续变量到文件中 - 即它将字?


-------------------------------------------------------- KeyGTK3PgPutgraphics ----

Put (Graphics)   写入字节
  
将图像复制到另一个图像或屏幕

语法
Put [target, ] [ [STEP](x, y), source [, (x1, y1)-[STEP](x2, y2) ] [, method [, ( alphaval|value|blender [, param]) ] ]

参数
target
是要在其中绘制图像的缓冲区的地址。如果省略，图像将被模糊到屏幕上。见下文。
[STEP](x, y)
指定从目标缓冲区或屏幕的左上角开始的偏移量，以便将图像绘制到该缓冲区或屏幕。 指示偏移量相对于当前图形光标位置。STEP(x, y)
source
是要绘制的图像的缓冲区的地址。见下文。
(x1, y1)-[STEP](x2, y2)
在源缓冲区中指定要绘制的矩形区域。如果省略，则绘制整个缓冲区。 指示 和 分别相对于 和。STEPx2y2x1y1
method
指定用于将图像绘制到目标缓冲区的方法，并且可以是以下任一方法（默认方法是）：
 与背景无关的方法XOR
PSet：源像素值将复制而不进行修改。
 ：源像素值在复制之前被否定为 1 的补码。
 ：源像素值将复制而不进行修改。不绘制蒙版颜色的源像素。见下文。PRESETTrans
依赖于背景的方法
And：目标像素与源像素按位排列。见下文。
 ：目标像素与源像素按位排列。见下文。
 ：目标像素与源像素按位排列。见下文。
 ：源与参数或图像的单个像素中指定的透明度因子混合。见下文。
 ：源乘以值，并随着饱和度添加到


-------------------------------------------------------- KeyGTK3PgRandom ----

Random   随机访问
  
指定要为随机访问模式打开的文件或设备

语法
Open filename for Random [Access access_type] [Lock lock_type] as [#]filenum [Len = record_length]

参数
filename
要打开的文件名
access_type
指示文件是可以从中读取、写入文件还是同时读取到两者
lock_type
锁定以在文件打开时使用
filenum
要与打开的文件关联的未使用的文件编号
record_length
用于文件的记录的大小

描述
打开一个文件或设备，用于读取和/或写入给定文件中的二进制数据，其中包含大小为 的记录。
如果该文件


-------------------------------------------------------- KeyGTK3PgRandomize ----

Randomize   随机初始化
  
为随机数生成器设定种子

语法
Declare Sub Randomize ( ByVal seed As Double = -1.0, ByVal algorithm As Long = 0 )

用法
Randomize [ seed ][, algorithm ]

参数
seed
随机数生成器的种子值，但对于除算法 #4 之外的所有算法，小数部分都被剪裁（见下文）。如果省略，将改用基于 的值。DoubleTimer
algorithm
用于选择算法的整数值（有关可用算法，请参阅标准标头“fbmath.bi”）。如果省略，则使用当前语言方言的默认算法。

描述
设置有助于生成随机数的随机种子，并选择要使用的算法。
的常量在 中定义?


-------------------------------------------------------- KeyGTK3PgRead ----

Read   读取
  
读取与语句一起存储的值。Data

语法
Read variable_list

描述
使用命令读取存储在应用程序中的数据。
的元素必须是基本类型，数字，字符串或数组和用户定义类型的元素。
程序中的所有语句都表现为单个列表，在读取一个语句的最后一个元素后，将读取以?


-------------------------------------------------------- KeyGTK3PgReadFile ----

Read (File Access)   读取
  
文件访问说明符

语法
Open filename As String For Binary Access Read As #filenum As Integer

描述
语句中子句的说明符。 指定


-------------------------------------------------------- KeyGTK3PgReadWriteFile ----

Read Write (File Access)   读取
  
文件访问说明符

语法
Open filename As String For Binary Access Read Write As #filenum As Integer

描述
语句中子句的说明符。 指定文件对输入?


-------------------------------------------------------- KeyGTK3PgReallocate ----

Reallocate   重分配内存
  
为现有的保留内存块重新分配存储

语法
Declare Function Reallocate cdecl ( ByVal pointer As Any Ptr, ByVal count As UInteger ) As Any Ptr

用法
result = Reallocate( pointer, count )

参数
pointer
要重新分配的已分配内存的地址。
count
要重新分配的总字节数。

返回值
重新分配的内存的地址。如果重新分配不成功，并且 所指向的原始内存保持不变，则返回 null （） 指针。0pointer

描述
尝试重新分配以前使用 或 分配的内存的大小。缓冲区的内容将被保留，但如果小于内存块的原始大小，缓


-------------------------------------------------------- KeyGTK3PgRedim ----

ReDim   重定义
  
定义可变长度数组或调整其大小

语法
声明动态数组：
ReDim [ Shared ] symbolname([subscript [, ...]]) As datatype [, ...]
ReDim [ Shared ] As datatype symbolname([subscript [, ...]]) [, ...]
调整动态数组的大小：
ReDim [ Preserve ] symbolname([subscript [, ...]]) [, ...]
艺术
ReDim [ Preserve ] [ ( ] expression [ ) ] ([subscript [, ...]]) [, ...]

参数
Shared
指定在整个模块中对阵列的共享（文件范围）访问。
Preserve
与现有阵列一起使用时，在调整大小时将保留阵列的内容。请注意，在某些情况下，数据不会保留其原始索引，请参阅下文。Preserve
symbolname
新的或现有的数组标识符。
expression或(expression)
引用现有数组的表达式。这可用于调整作为用户定义类型成员的数组的大小。在某些情况下，有必要在表达式两边指定括号（特别是如果数组表达式本身包含括号） - 请参阅下面的示例。
subscript: [lowerbound To ] upperbound
数组维度的下限和上限范围。下限默认值为零 （），如果未指定，


-------------------------------------------------------- KeyGTK3PgRem ----

Rem   注释
  
指示源代码中的注释。

语法
Rem comment

' Comment

/' Multi-line
   comment '/

描述
以 开头的源代码行指示该行是注释，不会进行编译。
单引号字符 （'） 也可用于指示注释，并可能出现在源


-------------------------------------------------------- KeyGTK3PgReset ----

Reset   重置
  
关闭所有打开的文件，或重置标准 I/O 句柄。

语法
Declare Sub Reset ( )
Declare Sub Reset ( ByVal streamno As Long )

用法
Reset
or
Reset( streamno )

参数
streamno
要重置的流编号，用于 stdin 或 stdout。01

描述
Reset，当调用时不带任何参数时，将关闭所有磁盘文件。
 ，当使用参数调用时，将重置与 stdin （） 或 stdout （） 关联的重定向流或管道流。
 运行时错误：
可以?


-------------------------------------------------------- KeyGTK3PgRestore ----

Restore   恢复数据
  
更改与语句一起存储的值的下一个读取位置。Data

语法
Restore [label]

描述
将下一个要读取的数据指针设置为标签之后第一个语句的第一个元素。标签必须包含在与当前正在执行的代码相同的模块中。 改变正常的从上到下的顺序，其中 是 


-------------------------------------------------------- KeyGTK3PgResume ----

Resume   恢复行
  
在跳转到错误处理程序后恢复执行的错误处理语句

语法
Resume

描述
Resume在错误处理程序（由 调用）中的传统 QB 错误处理机制中使用，以将执行返回到导致错误的行?


-------------------------------------------------------- KeyGTK3PgResumenext ----

Resume Next   恢复行
  
在跳转到错误处理程序后恢复执行的错误处理语句

语法
Resume Next

描述
Resume Next在错误处理程序（由 调用）中的传统 QB 错误处理机制中使用，以将执行返回到导致?


-------------------------------------------------------- KeyGTK3PgReturn ----

Return (From Procedure)   返回
  
控制要从过程或 返回的流语句。GoSub

语法
Return expression

描述
Return用于从过程返回。
因为可能意味着从 gosub 返回或从过程返回，并且可用于启用和禁用支持。当支持被禁用时，将被识别为从过程返回。启用支持后，将识别为从 gosub 返回。
 （from p


-------------------------------------------------------- KeyGTK3PgReturnGosub ----

Return (From Gosub)   返回
  
控制要从过程或 返回的流语句。GoSub

语法
Return [ label ]

描述
Return用于从 gosub 返回。
因为可能意味着从 gosub 返回或从过程返回，并且可用于启用和禁用支持。当支持被禁用时，将被识别为从过程返回。启用支持后，将识别为从 gosub 返回。
 （来?


-------------------------------------------------------- KeyGTK3PgRgb ----

RGB   RGB
  
计算高/真彩色模式的有效颜色值

语法
#define RGB(r,g,b) CULng((CUByte(r) Shl 16) Or (CUByte(g) Shl 8) Or CUByte(b) Or (&hFF000000ul))

用法
result = RGB(red, green, blue)

参数
red
红色分量值
green
绿色分量值
blue
蓝色分量值

返回值
组合颜色。

描述
red和是 -的分量范围为 -。
该函数可用于计算在高/真彩色模式下使用的有效颜色值。它返回一个无符号 long，格式为 ，其中 ，等于以十六进制格式传递给此函数的?


-------------------------------------------------------- KeyGTK3PgRgba ----

RGBA   RGBA
  
计算有效的颜色值，包括高/真彩色模式的 alpha（透明度）

语法
#define RGBA(r,g,b,a) CULng((CUByte(r) Shl 16) Or (CUByte(g) Shl 8) Or CUByte(b) Or (CUByte(a) Shl 24))

用法
result = RGBA(red, green, blue, alpha)

参数
red
红色分量值
green
绿色分量值
blue
蓝色分量值
alpha
阿尔法分量值

返回值
组合颜色

描述
red、和 是范围为 -的组件。
该函数可用于计算有效的颜色值，包括用于在高/真彩色模式下使用的 Alpha 通道。它返回一个无符号长整型，格式为 ，?


-------------------------------------------------------- KeyGTK3PgRight ----

Right   字符串取右边
  
返回字符串最右边的子字符串

语法
Declare Function Right ( ByRef str As Const String, ByVal n As Integer ) As String
Declare Function Right ( ByRef str As Const WString, ByVal n As Integer ) As WString

用法
result = Right[$]( str, n )

参数
str
源字符串。
n
子字符串长度，以字符为单位。

返回值
返回 最右边的子字符串。str

描述
返回从 的右侧（结尾）开始的最右边?


-------------------------------------------------------- KeyGTK3PgRmdir ----

RmDir   删目录
  
从文件系统中删除文件夹/目录

语法
Declare Function RmDir ( ByRef folder As Const String ) As Long

用法
result = RmDir( folder )

参数
folder
要删除的文件夹/目录。

返回值
成功时返回零 （0），失败时返回


-------------------------------------------------------- KeyGTK3PgRnd ----

Rnd   随机值
  
返回范围中的随机双精度数字[0, 1)

语法
Declare Function Rnd ( ByVal seed As Single = 1.0 ) As Double

用法
result = Rnd( seed )

参数
seed
可选参数。如果的值为零 （），则生成的最后一个随机数为 repeate。对于任何其他数字，将返回一个新的随机数。使用与 QB 兼容的算法，负数将完全重新设定生成器的种子。no 参数的默认值是返回一个新的随机数。Singleseed0.0

返回值
返回生成的随机数。

描述
基于随机种子返回区域中的许多类型（即 ），请参见。
可以使用各种不同的?


-------------------------------------------------------- KeyGTK3PgRset ----

RSet   字符串对齐向右
  
右对齐字符串缓冲区中的字符串

语法
Declare Sub RSet ( ByRef dst As String, ByRef src As Const String )
Declare Sub RSet ( ByVal dst As WString Ptr, ByVal src As Const WString Ptr )

用法
RSet dst, src

参数
dst
用于将文本复制到其中的缓冲区。StringWString
src
来源或正确证明。StringWString

描述
RSetright 将文本对齐到字符串缓冲区中，用空格填充字符


-------------------------------------------------------- KeyGTK3PgRtrim ----

RTrim   字符串删空格右边
  
删除字符串右侧的周围子字符串或字符

语法
Declare Function RTrim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function RTrim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

用法
result = RTrim[$]( str [, [ Any ] trimset ] )

参数
str
源字符串。
trimset
要修剪的子字符串。

返回值
返回修剪过的字符串。

描述
此过程从源字符串的右侧（末尾）修剪周围的字符。如果指定，将修剪?


-------------------------------------------------------- KeyGTK3PgRun ----

Run   运行
  
将执行转移到外部程序

语法
Declare Function Run ( ByRef program As Const String, ByRef arguments As Const String = "" ) As Long

用法
result = Run( program [, arguments ] )

参数
program
要将控制权移交给的程序（可执行文件）的文件名（包括文件路径）。
arguments
要传递给程序的命令行参数。

返回


-------------------------------------------------------- KeyGTK3PgSadd ----

SAdd   取地址
  
返回指向字符串变量数据的指针

语法
Declare Function SAdd ( ByRef str As String ) As ZString Ptr
Declare Function SAdd ( ByRef str As WString ) As WString Ptr
Declare Function SAdd ( ByRef str As ZString ) As ZString Ptr

用法
result = SAdd( str )

参数
str
用于获取 地址的字符串表达式或变量

返回值
指向?


-------------------------------------------------------- KeyGTK3PgScope ----

Scope...End Scope
  
用于开始新作用域块的语句

语法
Scope
[statements]
End Scope

描述
Scope 块允许在程序中（重新）定义和在本地使用变量。
当变量在作用域结构内（重新）定义时，可以从其（重新）定义到作用域结束使用此局部工作变量。在此期间，作用域外具有相同名称的任何变?


-------------------------------------------------------- KeyGTK3PgScreenCons ----

Screen (Console)   屏幕
  
获取给定位置的字符或颜色属性

语法
Declare Function Screen ( ByVal row As Long, ByVal column As Long, ByVal colorflag As Long = 0 ) As Long

用法
result = Screen( row, column [, colorflag ] )

参数
row
从控制台左上角开始的从 1 开始的偏移量。
column
从控制台左上角开始的从 1 开始的偏移量。
colorflag
如果等于 0，则返回 ASCII 代码，否则返回 color 属性。如果省略，则默认为 0。

返回值
字符的 ASCII 或颜色属性。

描述
Screen返回在控制台输出的给定位置找到的字符或 color 属性。它在控制台模式和图形模式下工作。
 col


-------------------------------------------------------- KeyGTK3PgScreencontrol ----

ScreenControl   屏幕控制
  
设置或获取内部图形库设置

语法
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param1 As Long = &h80000000, ByRef param2 As Long = &h80000000, ByRef param3 As Long = &h80000000, ByRef param4 As Long = &h80000000 )
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param1 As LongInt, ByRef param2 As LongInt = &h80000000, ByRef param3 As LongInt = &h80000000, ByRef param4 As LongInt = &h80000000 )
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param As String)

用法
in the LONG (or INTEGER<32>) version of the sub:
ScreenControl( what [, [ param1 ] [, [ param2 ] [, [ param3 ] [, param4 ]]]] )
or,
ScreenControl( what , param )
in the LONGINT (or INTEGER<64>) version of the sub:
ScreenControl( what , param1 [, [ param2 ] [, [ param3 ] [, param4 ]]] )
or,
ScreenControl( what , param )

参数
what
指定要执行的功能
param1
第一个整数参数，包含要在进入时设置的值或在退出时获得的值
param2
第二个整数参数，包含要在进入时设置的值或在退出时获得的值
param3
第三个整数参数，包含要在进入时设置的值或在退出时获得的值
param4
第四个整数参数，包含要在进入时设置的值或在退出时获得的值
param
字符串参数，包含要在输入时设置的文本或在退出时获得的文本

描述
此函数可用于设置或获取?


-------------------------------------------------------- KeyGTK3PgScreencopy ----

ScreenCopy   屏幕复制
  
将图形页的内容复制到另一个图形页

语法
Declare Function ScreenCopy ( ByVal from_page As Long = -1, ByVal to_page As Long = -1 ) As Long

用法
ScreenCopy [ from_page ] [, to_page ]

参数
from_page
要从中复制的页面
to_page
要复制到的页面

返回值
如果成功，则返回零 （），或返回非零错误代码以指示失败。0

描述
from_page是要从中复制的页面。如果省略此参数，则假定当前工作页。 是要复制到的页面。如果省略此参数，则假定当前可见的页面。页


-------------------------------------------------------- KeyGTK3PgScreenevent ----

ScreenEvent   屏幕事件
  
查询和检索系统事件。

语法
Declare Function ScreenEvent ( ByVal event As Any Ptr = 0 ) As Long

用法
result = ScreenEvent( [ event ] )

参数
event
指定函数应在其中存储事件数据的缓冲区。

返回值
如果有要检索的挂起事件，则返回，否则。-10

描述
此函数从内部 GfxLib 事件队列中返回最新的可用系统事件。例如，我们所说的“事件”是指任何鼠标或键盘活动。
事件数据（如果可用）将被复制


-------------------------------------------------------- KeyGTK3PgScreenglproc ----

ScreenGLProc   屏幕GL地址
  
获取 OpenGL 过程的地址

语法
Declare Function ScreenGLProc ( ByRef procname As Const String ) As Any Ptr

参数
procname
要检索 地址的过程的名称

描述
此函数可用于获取任何 OpenGL 过程的地址，以用于检索指向与 OpenGL 扩展关联?


-------------------------------------------------------- KeyGTK3PgScreengraphics ----

Screen (Graphics)   屏幕
  
使用类似 QB 的模式编号初始化图形模式

语法
-lang fb|fblite 方言：-lang qb 方言：
Screen mode [, [ depth ] [, [ num_pages ] [, [ flags ] [, [ refresh_rate ]]]]]
Screen , [ active_page ] [, [ visible_page ]]

Screen [ mode ] [, [ colormode ] [, [ active_page ] [, [ visible_page ]]]]
参数
mode 
是 QB 样式图形屏幕模式编号（见下文）。如果为 ，则关闭任何当前设置的图形模式，并且所有函数都将恢复其正常的控制台模式功能。有关可用模式，请参见下文。mode0
depth
是颜色深度（以每像素位数为单位）。这只对模式和更高版本有影响。和 的值是允许的。 也分别允许作为 和 的别名。如果省略，则默认为 。1481632152416328
num_pages
是您想要的视频页面数，见下文。如果省略，则默认为 。1
flags
用于选择几个东西作为图形驱动程序优先级，全屏模式。文件中预定义了一些常量，可供使用。请参阅页面 ScreenRes 以获取可用标志。fbgfx.bi
refresh_rate
请求刷新率。如果它在当前卡中不可用或省略了参数，FreeBASIC 会自动选择速率。
active_page
用于设置活?


-------------------------------------------------------- KeyGTK3PgScreeninfo ----

ScreenInfo   屏幕信息
  
检索有关当前视频模式或桌面的信息。

语法
Declare Sub ScreenInfo ( ByRef w As Long = 0, ByRef h As Long = 0, ByRef depth As Long = 0, ByRef bpp As Long = 0, ByRef pitch As Long = 0, ByRef rate As Long = 0, ByRef driver As String = "" )
Declare Sub ScreenInfo ( ByRef w As LongInt, ByRef h As LongInt, ByRef depth As LongInt = 0, ByRef bpp As LongInt = 0, ByRef pitch As LongInt = 0, ByRef rate As LongInt = 0, ByRef driver As String = "" )

用法
in the LONG (or INTEGER<32>) version of the sub:
ScreenInfo [ w ] [, [ h ] [, [ depth ] [, [ bpp ] [, [ pitch ] [, [ rate ] [, driver ]]]]]]
in the LONGINT (or INTEGER<64>) version of the sub:
ScreenInfo w , h [, [ depth ] [, [ bpp ] [, [ pitch ] [, [ rate ] [, driver ]]]]]

参数
w
宽度。
h
高度。
depth
颜色深度（以位为单位）。
bpp
每像素字节数。
pitch
每条扫描行的字节数。
rate
刷新率。
driver
驱动程序名称。

描述
此功能可用于获取当前模式信息，如图形驱动程序名称、颜色深度、屏幕大小等。
如果未设置图形模式时调用 if，它将返回有关桌面?


-------------------------------------------------------- KeyGTK3PgScreenlist ----

ScreenList   屏幕列表
  
查找可用的全屏视频模式

语法
Declare Function ScreenList ( ByVal depth As Long = 0 ) As Long

用法
result = ScreenList( [ depth ] )

参数
depth
请求模式列表的颜色深度（支持的深度为 、 、 和815162432)

返回值
返回 ，当没有更多要读取的分辨率时。0

描述
它的工作方式与函数类似：对函数的第一次调用需要指定参数，它返回所请求深度的最低支持分辨率。进一步调用无参数将返回下一个解决方案。当?


-------------------------------------------------------- KeyGTK3PgScreenlock ----

ScreenLock   屏幕锁定
  
锁定工作页的帧缓冲区

语法
Declare Sub ScreenLock ( )

用法
ScreenLock

描述
FreeBASIC 的所有图形库函数都绘制到帧缓冲区，并且每次绘制时都会自动将帧缓冲区复制到实际的屏幕内存中。如果用户程序执行大量绘图，则自动刷新可能需要花费大量时间。
该功能锁定自动?


-------------------------------------------------------- KeyGTK3PgScreenptr ----

ScreenPtr   屏幕指针
  
返回指向当前工作页的帧缓冲区的指针

语法
Declare Function ScreenPtr ( ) As Any Ptr

用法
result = ScreenPtr

返回值
指向当前工作页帧缓冲内存的指针，如果未设置图形模式，则为 NULL （）。0

描述
ScreenPtr提供了一种直接读/写工作页的帧缓冲区的方法。 应在尝试任何读取或写入之前使用。返回的指针在对 或 的任何后续调用之前一直有效，这?


-------------------------------------------------------- KeyGTK3PgScreenres ----

ScreenRes   屏幕初化
  
通过指定水平和垂直分辨率来初始化图形模式

语法
Declare Function ScreenRes ( ByVal width As Long, ByVal height As Long, ByVal depth As Long = 8, ByVal num_pages As Long = 1, ByVal flags As Long = 0, ByVal refresh_rate As Long = 0 ) As Long
用法
ScreenRes width, height [, [depth] [, [num_pages] [, [flags] [, refresh_rate ]]]]
result = ScreenRes( width, height [, [depth] [, [num_pages] [, [flags] [, refresh_rate ]]]] )

参数
width,height
分别显示宽度和高度。对于全屏模式，用户应使用 检查分辨率的可用性。ScreenList
depth
颜色深度（以每像素位数为单位）。有效的颜色深度为：、、、、 和 。和 的值也允许分别作为 和 的别名。如果省略，则默认值为每像素 8 位。8 位及以下将给出调色板图像。缺省调色板将是 中使用的 256 色板的第一种颜色。12481632152416322 ^ depthScreen 13
num_pages
要创建的视频页数，缺省情况下为 。（请参阅1Screen)
flags
用于设置屏幕的各种属性，包括全屏模式和图形驱动程序优先级。（有关可用标志，请参阅标准标头“fbgfx.bi”）
refresh_rate
屏幕所需的刷新率仅对全屏模式有影响，并且仅对某些系统和驱动程序有影响。默认为适当的值，?


-------------------------------------------------------- KeyGTK3PgScreenset ----

ScreenSet   屏幕设置
  
设置当前工作和可见页面

语法
Declare Sub ScreenSet ( ByVal work_page As Long = -1, ByVal visible_page As Long = -1 )

用法
ScreenSet [ work_page ] [, visible_page ]

参数
work_page
工作页面索引
visible_page
可见页面的索引

描述
ScreenSet允许设置当前工作页面和当前可见页面。页码范围从 到 ，其中 是 使用 或 设置图形模式时指定的页数。您可以使用此功能来实现翻页或双缓冲。
如果提供但省略 ，?


-------------------------------------------------------- KeyGTK3PgScreensync ----

ScreenSync   屏幕同步
  
将显示器更新与硬件同步

语法
Declare Function ScreenSync ( ) As Long

用法
result = ScreenSync

返回值
如果成功，则为零;如果以前未设置图形模式，则为非零。

描述
此 GfxLib 语句停止程序的执行，直到图形卡发出信号，它已结束跟踪帧并将启动新帧。
如果程序使用帧之间的这一小段时间间隔来重绘图像，则闪烁会大大减少。


-------------------------------------------------------- KeyGTK3PgScreenunlock ----

ScreenUnlock   屏幕解锁
  
解锁工作页面的帧缓冲区

语法
Declare Sub ScreenUnlock ( ByVal startline As Long = -1, ByVal endline As Long = -1 )

用法
ScreenUnlock [ start_line ] [, end_line ]

参数
startline
可选参数，指定要更新的第一个屏幕行。如果省略，则假定顶部屏幕行。
endline
指定要更新的最后一个屏幕行的可选参数。如果省略，则假定底部屏幕行。

描述
ScreenUnlock解锁当前工作页面（假设它以前已通过调用锁定），并允许系统重新启动定期更新屏幕。当使用 和 调用时?


-------------------------------------------------------- KeyGTK3PgSecond ----

Second   时间取秒
  
从日期序列中获取秒数 

语法
Declare Function Second ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Second( date_serial )

参数
date_serial
日期序列

返回值
从包含日期序列格式的日期的变量中返回?


-------------------------------------------------------- KeyGTK3PgSeekreturn ----

Seek (Function)   文件定位
  
获取文件或设备的下一个读/写操作的位置

语法
Declare Function Seek ( ByVal filenum As Long ) As LongInt

参数
filenum
打开的文件的文件编号

返回值
下一次读取或写入操作将发生的文件位置。

描述
如果文件是在访问模式下打开的，则该位置在记录?


-------------------------------------------------------- KeyGTK3PgSeekset ----

Seek (Statement)   文件定位
  
设置文件上下一个读/写操作的位置

语法
Seek [#]filenum, position

参数
filenum
打开的文件的文件编号
position
i/o 操作的新位置

描述
设置对文件执行下一次读取或写入操作的位置。
如果文件是在访问模式下打开的，则该位置在


-------------------------------------------------------- KeyGTK3PgSelectcase ----

Select Case   选择判断
  
条件语句块

语法
Select Case expression
[ Case expressionlist] 
[statements]
[ Case Else ]
[statements]
End Select
or
Select Case As Const integer_expression
[ Case constant | enumeration ]
[ statements ]
[ Case Else ]
[ statements ]
End Select

描述
Select Case根据表达式的值执行特定代码。该表达式计算一次，并按顺序与每个表达式进行比较，直到找到匹配的表达式。执行匹配的 Case 分支中的代码，程序向下跳到块的末尾。 匹配任何尚未匹配的情


-------------------------------------------------------- KeyGTK3PgSetdate ----

SetDate   设置日期
  
设置当前系统日期

语法
Declare Function SetDate ( ByRef newdate As Const String ) As Long

用法
result = SetDate( newdate )

参数
newdate
要设置的新日期

返回值
在除 DOS 之外的所有端口上成功时返回零，或在失败时返回非零。

描述
要设置日期，只需按照以下格式之一设置格式并发送到：、、、或（是月份、是日或年）。两位数的年份数字基于 1900 年。
返回的错误代码可以在下一


-------------------------------------------------------- KeyGTK3PgSetenviron ----

SetEnviron   设置环境
  
设置系统环境变量

语法
Declare Function SetEnviron ( ByRef varexpression As String ) As Long

用法
result = SetEnviron( varexpression )

参数
varexpression
环境变量的名称和设置采用以下（或等效）形式：varname=varstring。
 （varname 是环境变量的名称，varstring 是要设置的文本值）

返回值
如果成功，则返回零 （0），否则返回非零。

描述
修


-------------------------------------------------------- KeyGTK3PgSetmouse ----

SetMouse   设置鼠标
  
设置鼠标光标的位置和可见性

语法
Declare Function SetMouse ( ByVal x As Long = -1, ByVal y As Long = -1, ByVal visibility As Long = -1, ByVal clip As Long = -1 ) As Long

用法
result = SetMouse([ x ] [, [ y ] [, [ visibility ] [, [ clip ]]]])

参数
（对于每个参数，是一个表示“无更改”的特殊值。-1
x
可选 - 设置 x 坐标
y
可选 - 设置 y 坐标
visibility
可选 - 设置可见性：表示可见，表示隐藏10
clip
可选 - 设置剪切：指示鼠标被剪辑到图形窗口，表示没有剪切10

返回值
成功时为零 （），非零表示失败。0

描述
SetMouse将设置鼠标指针的 （， ） 坐标，以及设置其可见性。鼠标位置是使用 an


-------------------------------------------------------- KeyGTK3PgSettime ----

SetTime   设置时间
  
设置当前系统时间

语法
Declare Function SetTime ( ByRef newtime As Const String ) As Long

用法
result = SetTime( newtime )

参数
newtime
设置新时间

返回值
在除 DOS 之外的所有端口上成功时返回零，或在失败时返回非零。

描述
要设置时间，请格式化日期并按以下格式之一发送到：、 、 或 （是小时、分钟和秒）。
返回的


-------------------------------------------------------- KeyGTK3PgSgn ----

Sgn   数取符号
  
返回数字的符号部分

语法
Declare Function Sgn ( ByVal number As Integer ) As Integer
Declare Function Sgn ( ByVal number As LongInt ) As LongInt
Declare Function Sgn ( ByVal number As Double ) As Double

用法
result = Sgn( number )

参数
number
要查找标志的号码

返回值
返回 的符号部分。number
如果数字大于零，则返回 。Sgn1
如果数字等于零，则返回 。Sgn0
如果数字小于零，则返回 。Sgn-1

描述
必需的参数可以是任何有


-------------------------------------------------------- KeyGTK3PgShared ----

Shared   共享型
  
变量声明修饰符，用于指定整个模块的可见性

语法
Dim Shared ...
ReDim Shared ...
Common Shared ...
Static Shared ...
[Static] Var Shared ...

描述
Shared使模块级变量在 s 和 s 内可见。
如果未在模块级变量的声明中使用，则该变量仅对该文件中的模块级代码可见（此外，堆栈上仅存储了一个声明了不带修饰符的变量，而不是在命名


-------------------------------------------------------- KeyGTK3PgShell ----

Shell   外部程序
  
向系统命令解释器发送命令

语法
Declare Function Shell ( ByRef command As Const String ) As Long

用法
result = Shell( command )

参数
command
指定要发送到命令解释器的命令的字符串。

返回值
如果无法执行该命令，


-------------------------------------------------------- KeyGTK3PgShort ----

Short   短整型
  
标准数据类型：16 位有符号

语法
Dim variable As Short

描述
16 位有符号整数数据类型


-------------------------------------------------------- KeyGTK3PgSin ----

Sin   正弦
  
返回角度的正弦

语法
Declare Function Sin ( ByVal angle As Double ) As Double

用法
result = Sin( angle )

参数
angle
角度（以弧度为单位）

返回值
将参数的正弦值作为 在 的范围内返回。angleDouble-1.01.0

描述
参数以弧度（而不是度）为单位进行度量。
对于


-------------------------------------------------------- KeyGTK3PgSingle ----

Single   单精度
  
标准数据类型：32位浮点

语法
Dim variable As Single

描述
Single 是用于存储十进制数的 32 位浮点数据类型。它们可以在 到 的范围内保存正值，也可以在 到 的范围内保存负值，或者保存为 零 （）。它们最多包含 24 位精度，或大约


-------------------------------------------------------- KeyGTK3PgSizeof ----

SizeOf   取大小
  
返回变量的大小或类型（以字节为单位）。

语法
SizeOf ( variable | DataType )

描述
运算符返回一个值：或 占用的字节数（包括 UDT 的数据字段）。
与 不同，当与固定长度的字符串（包括固定长度的 s 和 s）一起使用时，它将返回它们使用的字节数，当与可变长度字符?


-------------------------------------------------------- KeyGTK3PgSleep ----

Sleep   延迟
  
等待，直到指定的时间过去，或者按下某个键。

语法
Declare Sub Sleep ( ByVal amount As Long = -1 )
Declare Function Sleep ( ByVal amount As Long , ByVal keyflag As Long ) As Long

用法
Sleep [ amount [, keyflag ]]
result = Sleep ( amount, keyflag )

参数
amount
可选的等待毫秒数（默认为等待按键）。
keyflag
可选标志;为它指定一个值，表示正常睡眠，或指定等待不能被按键打断。01

返回值
如果不是有效值（即 or 以外的值）以指示失败或其他值，则返回。1keyflag010

描述
Sleep将等待，直到经过（如果传递了任何值）的毫秒（在 -lang qb 中可以是秒，见下文）或


-------------------------------------------------------- KeyGTK3PgSpace ----

Space   字符串空格
  
创建一个给定长度的字符串，其中填充了空格 （" ")

语法
Declare Function Space( ByVal count As Integer ) As String

用法
result = Space[$]( count )

参数
count
一种整数类型，指定要创建的字符串的长度。

返回值
创建


-------------------------------------------------------- KeyGTK3PgSpc ----

Spc   字符空格
  
输出功能，用于在写入屏幕或文件时跳过空格

语法
Spc( columns )

用法
Print Spc( spaces ) [(, | ;)] ...

参数
spaces
要跳过的空格数

描述
Spc跳过给


-------------------------------------------------------- KeyGTK3PgSqr ----

Sqr   平方根
  
返回数字的平方根

语法
Declare Function Sqr ( ByVal number As Double ) As Double

用法
result = Sqr( number )

参数
number
数字（大于或等于零）

返回值
返回参数 的平方根。
如果等于零，则返回零 （）。
如果 小于零，则返回一个表示“未定义”的特殊值，打印如 “” 或 ，则精确文本与平台相关。numbernumberSqr0.0numberSqrNaN"IND"

描述
这与将参数提高到一半的幂相同：。所需的参数可以是任何大于或等于零的有效数值表达式。
如果 将 or 传递?


-------------------------------------------------------- KeyGTK3PgStatic ----

Static   静态
  
定义具有静态存储的变量、对象和数组

语法
Static symbol1 [ (array-dimensions) ] As DataType [ = expression] [, symbol2 [ (array-dimensions) ] As DataType [ = expression], ...]
or
Static As DataType symbol1 [ (array-dimensions) ] [ = expression] [, symbol2 [ (array-dimensions) ] [ = expression], ...]
or
Static Var symbol1 = expression [, symbol2 = expression, ...]

or

Sub|Function procedurename ( parameters ) [[ ByRef ] As DataType] Static
...
End Sub|Function

参数
symbol
变量或数组符号名称。
array-dimensions
lower-bound To upper-bound [, ...]
或
 或空。Any [, Any...]
expression
常量表达式或常量表达式数组

描述
指定变量、对象和数组的静态存储;它们在程序启动时分配，并在退出时解除分配。对象在定义时构造一次，并在程序退出时销毁。
声明静态数组时，只能将数字


-------------------------------------------------------- KeyGTK3PgStaticMember ----

Static (Member)   静态
  
声明静态成员过程或变量

语法
Type typename
Static variablename As DataType [, ...]
Declare Static Sub|Function procedurename ...
...
End Type

Dim typename.variablename As DataType [= initializer] [, ...]

[Static] Sub|Function typename.procedurename ...
...
End Sub|Function

描述
静态成员过程
Static方法没有传递给它们的隐式实例参数。这允许它们像普通的非成员过程一样使用（例如，使用回调过程指针）。方法的一个优点是它们封装在命名空间中，因此能够访问 的实例的 


-------------------------------------------------------- KeyGTK3PgStdcall ----

stdcall   标准调用
  
在过程声明中指定 stdcall 样式的调用约定

语法
Sub name stdcall [Overload] [Alias "alias"] ( parameters )
Function name stdcall [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

描述
在过程声明中，指定过程将使用调用约定。在调用约定中，任何参数都将以列出它们的相反顺序传递（推送到堆栈上），即从右到左。过程不需要保留 或 寄存器，并且必须在堆栈返回之前清理堆


-------------------------------------------------------- KeyGTK3PgStep ----

Step   步进
  
语句修饰符。

语法
For iterator = initial_value To end_value Step increment

Line [ buffer, ] Step ( x1, y1 ) - Step ( x2, y2 ) [, [ color ][, [ B|BF ][, style ] ] ]

Circle [ target, ] Step ( x, y ), radius [, [ color ][, [ start ][, [ end ][, [ aspect ][, F] ] ] ] ]

Paint [ target, ] STEP ( x, y ) [, [ paint ][, [ border_color ] ] ]

描述
在语句中，指定循环迭代器与每个循环的增量。
在 或 语句中，指示以下


-------------------------------------------------------- KeyGTK3PgStick ----

Stick   游戏操纵杆
  
从连接的游戏设备读取轴位置

语法
Declare Function Stick ( ByVal axis As Long ) As Long

用法
result = Stick( axis )

参数
axis
要查询位置的轴数

返回值
对于指定的 ，返回一个介于 1 和 200 之间的数字，如果未连接设备，则返回零 （0）。axis

描述
Stick将检索第一个和第二个游戏设备上第一个和第二个轴的轴位置。 必须是介于 0 和 3 之间的数字，具有以下含义：axis

轴返回0游?


-------------------------------------------------------- KeyGTK3PgStop ----

Stop
  
暂停程序执行，并在结束程序之前等待按键。

语法
Declare Sub Stop ( ByVal retval As Long = 0 )

用法
Stop

参数
retval
错误代码返回系统。

描述
停止程序的执行并待命。它是作为调试的帮助提供的，因为它保留了内存并且不会关闭文件。对于正常的程?


-------------------------------------------------------- KeyGTK3PgStr ----

Str   数转字符
  
返回数字、布尔或 Unicode 字符串的字符串表示形式

语法
Declare Function Str ( ByVal n As Byte ) As String
Declare Function Str ( ByVal n As UByte ) As String
Declare Function Str ( ByVal n As Short ) As String
Declare Function Str ( ByVal n As UShort ) As String
Declare Function Str ( ByVal n As Long ) As String
Declare Function Str ( ByVal n As ULong ) As String
Declare Function Str ( ByVal n As LongInt ) As String
Declare Function Str ( ByVal n As ULongInt ) As String
Declare Function Str ( ByVal n As Single ) As String
Declare Function Str ( ByVal n As Double ) As String
Declare Function Str ( ByVal b As Boolean ) As String
Declare Function Str ( ByRef str As Const String ) As String
Declare Function Str ( ByVal str As Const WString ) As String

用法
result = Str[$]( number )
or
result = Str( string )

参数
number
要转换为字符串的数值表达式。
string
要转换为字符串的字符串表达式。

描述
Str将数值变量转换为其字符串表示形式。以这种方式使用时，它等效于应用于数值变量，而与函数相反，函数将字符串转换为数字。
将布尔变量?


-------------------------------------------------------- KeyGTK3PgStrig ----

Strig   游戏按钮
  
从连接的游戏设备读取按钮状态

语法
Declare Function Strig ( ByVal button As Long ) As Long

用法
result = Strig( button )

参数
button
用于查询状态的按钮

返回值
返回 -1（按下）或 0（未按下）以指示所请求的状态。button

描述
Strig将检索第一个和第二个游戏设备上第一个和第二个按钮的按钮状态。 必须是介于 0 和 7 之间的数字，并具有以下含义：button

按钮要返回的?


-------------------------------------------------------- KeyGTK3PgString ----

String   数转字符串
  
标准数据类型：8 位字符串

语法
Dim variable As String [ * size]

描述
A 是字符数组。
不带参数的声明将根据字符串的长度动态调整大小。长度范围可以从 0 字节到 2 GB。描述符包含指向实际字符串、字符串长度以及为其分配的空间量的指针。 将返回指向描述符的


-------------------------------------------------------- KeyGTK3PgStringFunction ----

String (Function)   数转字符串
  
创建特定长度的字符串并用特定字符填充

语法
Declare Function String ( ByVal count As Integer, ByVal ch_code As Long ) As String
Declare Function String ( ByVal count As Integer, ByRef ch As Const String ) As String

用法
result = String[$]( count, ch_code )
或
result = String[$]( count, ch )

参数
count
一个整数，指定要创建的字符串的长度。
ch_code
指定要用于填充字符串的 ASCII 字符代码的长字符代码。
ch
一个字符串，其第一个字符将用于填充字符串。

返回值


-------------------------------------------------------- KeyGTK3PgSub ----

Sub   过程
  
定义过程

语法
[Public|Private] Sub identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [( [parameter_list] )] [Static] [Export]
statements
...
[Return]
...
End Sub

[Public] Sub identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [()] [Constructor|Destructor] [Static]
statements
...
[Return]
...
End Sub

参数
identifier：子例程
的名称：外部可见的（对链接器）名称括在引号中
：参数[，参数[，...]]
 ：external_identifierparameter_listparameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier：子例程中引用的变量的名称。如果参数是数组，则标识符后必须跟空括号。
 ：变量
的类型 ：如果调用中未指定任何参数，则参数的值typedefault_value
statements：组成子例程主体的一个或多个语句

描述
子例程是一个代码块，可以随时从程序调用。此代码可能需要多次执行，而子例程提


-------------------------------------------------------- KeyGTK3PgSubPtr ----

Sub Pointer   过程
  
存储指向过程的指针的数据类型Sub

语法
Dim variable As Sub [cdecl|pascal|stdcall] [( [parameter_list] )] [= initializer]

参数
parameter_list： 参数[， 参数[， ...]]
 ：parameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier：子例程
中引用的变量的名称：变量
的类型：如果调用中未指定任何参数，则参数的值typedefault_value
intializer：要设置为初始值的子例程的地址

描述
指针是存储已编译代码的内存位置的过程指针。如果未给出初始值，则默认初始值为零 （0）。
过程的内存地址可以通过获取


-------------------------------------------------------- KeyGTK3PgSwap ----

Swap   交换
  
交换两个变量的值

语法
Declare Sub Swap  ( ByRef a As Any, ByRef b As Any )

参数
a
要交换的变量。
b
要交换的变量。

描述
交换两个变量的值，包括 UDT 实例（交换所有数据成员）。
 注： 当数据由指针单独引用或在描述性结构（例如 UDT）中引用时，仅交换指针的值或描述性结构的内容，而不访?


-------------------------------------------------------- KeyGTK3PgSystem ----

System   系统
  
关闭所有打开的文件并结束程序

语法
Declare Sub System ( ByVal retval As Long = 0 )

用法
System( [ retval ] )

参数
retval
错误代码返回系统。

描述
关闭所有打开的文件，退出程序，然后返回到操作系统。可以指定可选的返回值（整数）以向系统返回错误代码。如果未给出返回值，则自动返回值 0。这与 和 此处相同，用于较旧的


-------------------------------------------------------- KeyGTK3PgTab ----

Tab
  
写入屏幕或文件时设置列

语法
Tab( col_num )

用法
Print Tab( column ) [(, | ;)] ...

参数
column
1-要移动到的基于列号

描述
Tab在将光标移动到屏幕或文件时将光标移动到给定数字。在新旧光标位置之间跳过的字符单元格保持不变。
如?


-------------------------------------------------------- KeyGTK3PgTan ----

Tan   正切
  
返回角度的切线

语法
Declare Function Tan ( ByVal angle As Double ) As Double

用法
result = Tan( angle )

参数
angle
角度（以弧度为单位）

返回值
将参数的切线作为 -无穷大到无穷大范围内的一个返回。angleDouble

描述
参数以弧度（而不是度）为单位进行度量?


-------------------------------------------------------- KeyGTK3PgThen ----
Then   然
Description



-------------------------------------------------------- KeyGTK3PgThis ----

This   本对象
  
将隐藏实例参数传递给 或 中的非静态成员函数TypeClass

语法
This.fieldname
or
With This
.fieldname
End With

描述
This是对 或的实例的引用，该实例（通过隐藏）传递给该类型或类的所有非静态成员函数。非静态成员函数是在 或 的主体内声明的过程，包括 、、、赋值或 和 过程。
附加参数的数据类


-------------------------------------------------------- KeyGTK3PgThiscall ----

__Thiscall
  
在成员过程声明中指定 Thiscall 调用约定

语法
Type typename
declare Sub name __Thiscall [Overload] [Alias "alias"] ( parameters )
declare Function name __Thiscall [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type
End Type

描述
在成员过程声明中，指定过程将使用调用约定。在 Thiscall 调用约定中，隐式和隐藏的 This 参数在寄存器中传递。
调用约定仅适用于 32 位 x86 目标，并且仅部分实现。它在使用 -gen gcc 后端


-------------------------------------------------------- KeyGTK3PgThreadCall ----

ThreadCall   线程调用
  
在单独的执行线程
中启动一个带有参数的用户定义过程 Threadcall 在内部使用 LibFFI：使用此功能编写程序的人应小心遵循 LibFFI 的许可证，该许可证可在 http://github.com/atgreen/libffi/blob/master/LICENSE 中找到。

语法
Function ThreadCall subname([paramlist]) As Any Ptr

用法
threadid = ThreadCall subname([paramlist])

参数
subname
子例程的名称
paramlist
要传递给子例程的参数列表，与普通的子调用一样。

返回值
Threadcall 返回所创建线程的句柄，或在失败时返回空指针 （）。Any Ptr0

描述
例如，Threadcall 创建一个线程，该线程与调用它的代码同时运行。通过?


-------------------------------------------------------- KeyGTK3PgThreadCreate ----

ThreadCreate   线程创建
  
在单独的执行线程中启动用户定义过程

语法
Declare Function ThreadCreate _
( _
ByVal procptr As Sub ( ByVal userdata As Any Ptr ), _
ByVal param As Any Ptr = 0, _
ByVal stack_size As Integer = 0 _
) As Any Ptr

用法
result = ThreadCreate ( procptr [, [ param ] [, stack_size ] ] )

参数
procptr
指向旨在用作线程的指针（请参阅获取指向 sub 的指针）。sub 必须具有以下签名（相同的参数、相同的调用约定）才能与 procptr 兼容：SubOperator Procptr (Procedure Pointer)
Declare Sub myThread ( ByVal userdata As Any Ptr )
userdata
旨在用作线程的参数。FreeBASIC 期望此参数存在，但不得省略！Any PtrSub
param
Any Ptr将通过其 userdata 参数传递给所指向的线程的参数。例如，这可以是指向结构的指针，也可以是包含各种信息的数组，供线程 sub 使用。如果未给出参数，则 （零） 将改为传递给线程子的 userdata 参数。Subprocptr0
stack_size
要为此线程的堆栈保留的可选字节数。

返回值
ThreadCreate 向创建的线程返回句柄，或在失败时?


-------------------------------------------------------- KeyGTK3PgThreadDetach ----

ThreadDetach   线程终止
  
释放线程句柄而不等待线程完成

语法
Declare Sub ThreadDetach ( ByVal id As Any Ptr )

用法
#include "fbthread.bi"
ThreadDetach( id )

参数
id
Any Ptr由 或 创建的线程的句柄ThreadCreateThreadCall

描述
ThreadDetach 释放与 或 返回的线程句柄关联的资源。线程句柄将被 ThreadDetach 销毁，并且无法再使用。
与 不同，ThreadDetach 不会等待线程完成，线程执行会独立继续。


-------------------------------------------------------- KeyGTK3PgThreadSelf ----

ThreadSelf
  
返回当前线程的线程句柄。

语法
Declare Function ThreadSelf ( ) As Any Ptr

用法
#include "fbthread.bi"
result = ThreadSelf

返回值
ThreadSelf 返回当前线程的句柄。Any Ptr

描述
ThreadSelf 用于获取当前线程的句柄。
此函数可以唯一标识现有线程：
-如果有多个线程，并且一个线程已完成，则可以重用该句柄。
 - 因此，对于所有仍在运行的唯一线程，句?


-------------------------------------------------------- KeyGTK3PgThreadWait ----

ThreadWait   线程等待
  
等待线程完成执行并释放线程句柄

语法
Declare Sub ThreadWait ( ByVal id As Any Ptr )

用法
ThreadWait( id )

参数
id
Any Ptr由 或 创建的线程的句柄ThreadCreateThreadCall

描述
ThreadWait 等待由线程创建或完成执行，然后释放与线程句柄关联的资源。在 指定的线程结束之前，ThreadWait 不会返回。
在等待期间，调用方不会消耗 CPU 时间。
为了释


-------------------------------------------------------- KeyGTK3PgTime ----

Time   时间字符
  
以字符串形式返回当前系统时间

语法
Declare Function Time ( ) As String

用法
result = Time[$]

返回值
返回当前系统时间


-------------------------------------------------------- KeyGTK3PgTimer ----

Timer   时间计时值
  
返回自静态参考点以来经过的时间量。

语法
Declare Function Timer ( ) As Double

用法
result = Timer

返回值
返回自静态参考点以来的时间（以秒为单位）的精度结果。Double

描述
该函数对于了解一段代码的运行时间或控制代码的计时非常有用。若要了解程序中两点之间经过了多少时间，可以记录起点和终点处的值，然后从结束值中减


-------------------------------------------------------- KeyGTK3PgTimeserial ----

TimeSerial   时间序列值
  
获取指定小时、分钟和秒的日期序列

语法
Declare Function TimeSerial ( ByVal hour As Long, ByVal minute As Long, ByVal second As Long ) As Double

用法
#include "vbcompat.bi"
result = TimeSerial( hours, minutes, seconds )

参数
hour
小时数，在 0-23 范围内
minute
分钟数
second
秒数

返回值
返回一个日期序列，其中包含由 和 参数中的值形成的时间。返回的日期序列没有整数部分。hoursminut


-------------------------------------------------------- KeyGTK3PgTimeValue ----

TimeValue   时间数值
  
从时间字符串获取日期序列

语法
Declare Function TimeValue ( ByRef timestring As String ) As Double

用法
#include "vbcompat.bi"
result = TimeValue( timestring )

参数
timestring
要转换的字符串

返回值
从时间字符串返回日期序列。

描述
时间字符串必须采用以下格式，否则
编译器


-------------------------------------------------------- KeyGTK3PgTo ----

To   到
  
用于指定范围的语句修饰符。

语法
For iterator intial_value To ending_value
statement(s).
Next [ iterator ]
or
Select Case case_comparison_value
Case lower_bound To upper_bound
statement(s).
End Select
or
Dim variable_identifier( lower_bound To upper_bound ) As type_specifier

描述
关键字用于定义特定的数值范围。仅当与 和 语句一起使用时，此关键字才有效。
在第一种语法中，关键字定义语句中迭代器的初始值和结束值。
在第二种语法中，关键字定义了用于比较的下限和?


-------------------------------------------------------- KeyGTK3PgTransGfx ----

Trans   透明
  
图形语句的参数，该语句选择透明背景作为 blitting 方法Put

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Trans

参数
Trans
必填。

描述
Trans选择透明背景作为删除图像缓冲区的方法。这与方法类似，但会跳过包含蒙版颜色的像素。
对于 8 位彩色图像，蒙版颜色为调色板索引 0。对于 16/32 位彩色图像，蒙版颜色为


-------------------------------------------------------- KeyGTK3PgTrim ----

Trim   字符串删头尾
  
删除字符串左侧和右侧的周围子字符串或字符

语法
Declare Function Trim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function Trim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

用法
result = Trim[$]( str [, [ Any ] trimset ] )

参数
str
源字符串。
trimset
要修剪的子字符串。

返回值
返回修剪过的字符串。

描述
此过程从源字符串的左侧（开头）和右侧（结尾）修剪周围的字符。如果指定?


-------------------------------------------------------- KeyGTK3PgTrue ----

True   真
  
编译器设置的固有常量

语法
Const True As Boolean

描述
在使用位置


-------------------------------------------------------- KeyGTK3PgType ----

Type   类型
  
声明用户定义类型。

语法
Type typename
fieldname1 As DataType
fieldname2 As DataType
As DataType fieldname3, fieldname4
...
End Type

Type typename [Alias "alternatename"] [Extends base_typename] [Field = alignment]
[Private:|Public:|Protected:]

Declare Sub|Function|Constructor|Destructor|Property|Operator ...
Static variablename As DataType
ReDim arrayname(array dimensions) As DataType

fieldname As DataType [= initializer]
fieldname(array dimensions) As DataType [= initializer]
fieldname(Any [, Any...]) As DataType
fieldname : bits As DataType [= initializer]

As DataType fieldname [= initializer], ...
As DataType fieldname(array dimensions) [= initializer], ...
As DataType fieldname(Any [, Any...])
As DataType fieldname : bits [= initializer], ...

Union
fieldname As DataType
Type
fieldname As DataType
...
End Type
...
End Union

...
End Type

描述
Type用于声明包含一个或多个数据字段的自定义数据类型，包括整数类型、浮点类型、固定大小或可变长度（动态）数组、固定大小或可变长度字符串、位字段或其他用户定义类型。
类型支持与面向对象


-------------------------------------------------------- KeyGTK3PgTypeAlias ----

Type (Alias)   类型
  
声明类型的备用名称

语法
Type typename As symbol

参数
typename 
新的备用名称。
symbol 
要与 关联的符号或数据类型声明。typename

描述
symbol可以指任何已声明的数据类型，包括内置数据类型或指针、声明、声明或声明。
类型别名可用于允许在过程声明中对参数进行前向声明，但只能与指针（无论其传递模式


-------------------------------------------------------- KeyGTK3PgTypeof ----

TypeOf   取类型
  
返回变量的类型。

语法
TypeOf ( variable | datatype )

参数
variable
任何类型的变量。
datatype
数据类型。

描述
TypeOf是编译器内部函数，它将自身替换为传递给它的变量的类型。它可以用于变量声明（示例1），也可以用于预处理器中进行比较，打印。（示例 2）
还支持传递任何内部数据类型或


-------------------------------------------------------- KeyGTK3PgTypeTemp ----

Temporary Types
  
创建用户定义类型的临时副本

语法
result = Type( initializers, ... )
or
result = Type<typename>( initializers, ... )

参数
initializers
类型的初始值（或仅第一个）
typename
或 的名称TypeUnion

返回值
类型的临时副本。

描述
用于创建临时类型。如果未明确给出，则将尽可能从其用法中推断出来。临时副本的用法可能包括将其赋给变量、将其作为参数传递给过程或将其作为过程的值返回。



-------------------------------------------------------- KeyGTK3PgUbound ----

UBound   数组取上限
  
返回数组维度的上限

语法
Declare Function UBound ( array() As Any, ByVal dimension As Integer = 1 ) As Integer

用法
result = UBound( array [, dimension ] )

参数
array
任何类型的数组
dimension
要获取的上限的维度

返回值
返回数组维度的上限。
描述
UBound返回可用作数组特定维度的索引的最大值。
数组维度从一 （） 到 的编号，其中维度的总数。如果未指定，将返回第一个维度的上限。
如果为零 （0）?


-------------------------------------------------------- KeyGTK3PgUbyte ----

UByte   无符号字节
  
标准数据类型：8 位无符号。
等效于 。Unsigned Byte

语法
Dim variable As UByte

描述
8 位无符号


-------------------------------------------------------- KeyGTK3PgUcase ----

UCase   字符串大写
  
返回字符串的大写副本

语法
Declare Function UCase ( ByRef str As Const String, ByVal mode As Long = 0 ) As String
Declare Function UCase ( ByRef str As Const WString, ByVal mode As Long = 0 ) As WString

用法
result = UCase[$]( str [ , mode ] )

参数
str
要转换为大写的字符串。
mode
转换模式：0 = 当前区域设置，1 = 仅 ASCII

返回值
的大写副本。str



-------------------------------------------------------- KeyGTK3PgUinteger ----

UInteger   无符号整型
  
标准数据类型：32 位或 64 位无符号，大小与 相同。
等效于 。SizeOf(Any Ptr)Unsigned Integer

语法
Dim variable As UInteger
Dim variable As UInteger<bits>

参数
bits
一个数值常量表达式，指示所需无符号整数位的大小。允许的值为 、 或 。8163264

描述
32 位或 64 位无符号整数数据类型，具体取决于平台。
如果给定了显式位大小，则提供了一种数据类型，该数据类型最多?


-------------------------------------------------------- KeyGTK3PgUlong ----

ULong   无符号长型
  
标准数据类型：32 位无符号整数。
等效于 。Unsigned Long

语法
Dim variable As ULong

描述
32 位无符号整数数据类型。?


-------------------------------------------------------- KeyGTK3PgUlongint ----

ULongInt   无符号长整型
  
标准数据类型：64 位无符号。
等效于 。Unsigned LongInt

语法
Dim variable As ULongInt

描述
64 位无符号整数数据类型。可以保存从 0 到 18 4


-------------------------------------------------------- KeyGTK3PgUnion ----

Union   联合型
  
声明联合用户定义类型。

语法
Union typename
fieldname as datatype
Declare member function declaration ...
...
End Union

参数
typename
的名称Union
fieldname
数据字段成员的名称
member function declaration
任何受支持的成员函数

描述
数据元素占用内存中的公用空间（对于 的所有数据元素，内存地址相同）。的数据元素可以是简单的数据字段，也可以是未命名的数据字段块。
的大小是最大数据元素的大


-------------------------------------------------------- KeyGTK3PgUnlock ----

Unlock   解锁
  
删除文件上的先前访问限制（锁定）

语法
Unlock #filenum, record
Unlock #filenum, start To end

参数
filenum
用于文件的文件编号。Open
record
要解锁的记录（文件）。Random
start
要解锁的范围中的第一个字节位置（文件）。Binary
end
要解锁的范围中的最后一个字节位置（文件）。Binary

描述
Unlock删?


-------------------------------------------------------- KeyGTK3PgUnsigned ----

Unsigned   无符号数
  
整数数据类型修饰符

语法
Dim variable As Unsigned {integer-based data type}

描述
强制基于整数的数据


-------------------------------------------------------- KeyGTK3PgUntil ----

Until   直到
  
语句中使用的条件子句。Do..Loop

语法
Do Until condition
or
Loop Until condition

描述
Until与?


-------------------------------------------------------- KeyGTK3PgUshort ----

UShort   短整型
  
标准数据类型：16 位无符号。
等效于 。Unsigned Short

语法
Dim variable As UShort

描述
16 位无符号整


-------------------------------------------------------- KeyGTK3PgUsing ----

Using (Namespaces)   引用
  
将命名空间符号引入当前范围

语法
Using identifier [, identifier [, ...] ]

参数
identifier：要使用的名称。Namespace

描述
该命令允许访问给定命名空间中的所有符号，而无需该命名空间的名称前缀。与 C++ 不同，但与 C# 不同，在 之后不需要关键字，因为不能从命名空间继承单个符号。
只允许在?


-------------------------------------------------------- KeyGTK3PgVaArg ----

va_arg   变参表
  
从变量参数列表中返回当前参数。

语法
variable = va_arg ( argument_list, datatype )

描述
该宏允许在函数中使用可变数量的参数：va_arg
 	va_arg返回列表中的当前参数，其预期数据类型为 。argument_listdatatype
在首次使用之前，必须使用命令进行初始化。va_argargument_li


-------------------------------------------------------- KeyGTK3PgVaFirst ----

va_first   变参首个
  
返回指向变量参数列表中第一个参数的指针

语法
pointer_variable = va_first()

描述
该函数提供一个非类型化的指针值，该值指向传递给函数的第一个变量参


-------------------------------------------------------- KeyGTK3PgVal ----

Val   数取值
  
将字符串转换为浮点数

语法
Declare Function Val ( ByRef str As Const String ) As Double
Declare Function Val ( ByRef str As Const WString ) As Double

用法
result = Val( strnum )

参数
strnum
包含要转换的数字的字符串

返回值
返回转换后的精度数字
 如果字符串的第一个字符无效，将返回 。DoubleVal0

描述
Val("10")会回来，还会再来。该函数从左侧分析字符串，跳过任何空格，并返回它可以读取的最长数字，并在找到的第一个不合适的字符处停止。科


-------------------------------------------------------- KeyGTK3PgValint ----

ValInt   数取整值
  
将字符串转换为 32 位整数

语法
Declare Function ValInt ( ByRef strnum As Const String ) As Long
Declare Function ValInt ( ByRef strnum As Const WString ) As Long

用法
result = ValInt ( strnum )

参数
strnum
要转换的字符串

返回值
返回转换后的字符串的值 如果字符串
的第一个字符无效，将返回 。LongValInt0

描述
例如，将返回 ，并且也将返回。该函数从左侧分析字符串，跳过任何空格，并返回它可以读取的最长数字，并在找到的第一个不合适的字符处停止。任?


-------------------------------------------------------- KeyGTK3PgVallng ----

ValLng   数取长值
  
将字符串转换为 64 位整数

语法
Declare Function ValLng ( ByRef strnum As Const String ) As LongInt
Declare Function ValLng ( ByRef strnum As Const WString ) As LongInt

用法
result = ValLng ( strnum )

参数
strnum
要转换的字符串

返回值
返回转换后的字符串的 a 如果字符串
的第一个字符无效，将返回 。LongIntValLng0

描述
例如，将返回 ，并且也将返回。该函数从左侧分析字符串，跳过任何空格，并返回它可以读取的最长数字，并在找到的第一个不合适的字符处停止。任何


-------------------------------------------------------- KeyGTK3PgValuint ----

ValUInt   数取无符整型值
  
将字符串转换为无符号的 32 位整数

语法
Declare Function ValUInt ( ByRef strnum As Const String ) As ULong
Declare Function ValUInt ( ByRef strnum As Const WString ) As ULong

用法
result = ValUInt ( strnum )

参数
strnum
要转换的字符串

返回值
返回转换后的字符串的值 如果字符串
的第一个字符无效，将返回 。ULongValUInt0

描述
例如，将返回 ，并且也将返回。该函数从左侧分析字符串，跳过任何空格，并返回它可以读取的最长数字，并在找到的第一个不合适的字符处停


-------------------------------------------------------- KeyGTK3PgValulng ----

ValULng   数取无符长型值
  
将字符串转换为无符号的 64 位整数

语法
Declare Function ValULng ( ByRef strnum As Const String ) As ULongInt
Declare Function ValULng ( ByRef strnum As Const WString ) As ULongInt

用法
result = ValULng ( strnum )

参数
strnum
要转换的字符串

返回值
返回转换后的字符串的 a 如果字符串
的第一个字符无效，将返回 。ULongIntValULng0

描述
例如，将返回 ，并且也将返回。该函数从左侧分析字符串，跳过任何空格，并返回它可以读取的最长数字，并在找到的第一个不合适的字符处停?


-------------------------------------------------------- KeyGTK3PgVaNext ----

va_next   变参次个
  
返回指向变量参数列表中下一个参数的指针

语法
Argument_Pointer = va_next ( Argument_List, datatype )

描述
该宏提供了一个指针值，指向列表中的下一个参数，即当前参数的类型。
使用 时不受支持。使用可?


-------------------------------------------------------- KeyGTK3PgVar ----

Var   变量
  
声明一个变量，其类型是从初始值设定项表达式中隐含的

语法
[Static] Var [Shared] symbolname = expression[, symbolname = expression]

描述
Var声明一个变量，其类型是从初始值设定项表达式中隐含的。在声明中指定显式类型是非法的。初始值设定项表达式可以是常量，也可以是任何类型的任何变量。
注意：不支持 ，因为


-------------------------------------------------------- KeyGTK3PgViewgraphics ----

View (Graphics)
  
为图形关键字设置新的物理坐标映射和修剪区域

语法
View
View ( x1, y1 )-( x2, y2 ) [ [, fill_color ] [, border_color ] ]
View Screen ( x1, y1 )-( x2, y2 ) [ [, fill_color ] [, border_color ] ]

参数
x1 As Integer,y1 As Integer
视口的一角相对于屏幕左上角的水平和垂直偏移量（以像素为单位）。
x2 As Integer,y2 As Integer
视口另一角相对于屏幕左上角的水平和垂直偏移量（以像素为单位）。
fill_color As ULong
用于填充新视口的颜色。
border_color As ULong
要在新视口周围绘制的边框的颜色。

描述
视口或剪切区域是图形屏幕的矩形区域，在此区域之外不会执行图形绘制。也就是说，将?


-------------------------------------------------------- KeyGTK3PgViewtext ----

View Print
  
设置屏幕的可打印文本区域

语法
View Print [ firstrow To lastrow ]

参数
firstrow
第一行打印区域
lastrow
打印区域的最后一行

描述
将屏幕上的文本打印区域（在控制台模式或图形模式下）的边界设置为从第一个开始到最后一个（包括最后


-------------------------------------------------------- KeyGTK3PgVirtual ----

Virtual   虚拟事件
  
声明虚拟方法

语法
Type typename Extends base_typename
Declare Virtual Sub|Function|Property|Operator|Destructor ...
End Type

描述
虚拟方法是可以被从声明它们的类型派生的数据类型覆盖的方法，从而允许动态多态性。与方法相反，虚拟方法必须具有实现，该实现在未覆盖虚拟方法时使用。
派生类型可以通过声明具有相同标识符和?


-------------------------------------------------------- KeyGTK3PgVisPrivate ----

Private: (Access Control)
  
在 或 中指定私有成员访问控制TypeClass

语法
Type typename
Private:
member declarations
End Type

参数
typename
或 的名称TypeClass
member declarations
字段、函数或枚举的声明

描述
Private:表示关注它具有私有访问权限。私有成员只能从 或 的成员函数内部访问（因此，对于从 或 派生的类型或类，不能从成员函数内部访问）。
在给出不同的访问控制说明符?


-------------------------------------------------------- KeyGTK3PgVisProtected ----

Protected: (Access Control)
  
在 或 中指定受保护的成员访问控制TypeClass

语法
Type typename
Protected:
member declarations
End Type

参数
typename
或 的名称TypeClass
member declarations
字段、函数或枚举的声明

描述
Protected:表示关注它具有受保护的访问权限。受保护的成员只能从 or 的成员函数内部访问，也可以从 或 派生的类进行访问。
以下内容受到保护，直到给出不同的访问控制说?


-------------------------------------------------------- KeyGTK3PgVisPublic ----

Public: (Access Control)
  
在 或 中指定公共成员访问控制TypeClass

语法
Type typename
Public:
member declarations
End Type

参数
typename
或 的名称TypeClass
member declarations
字段、函数或枚举的声明

描述
Public:表示关注它具有公共访问权限。公共成员可通过使用 或 访问。
在给出不同的访问控制说明符之前，以下各项是公共的，如果未提供
成员访问控制说明符，则
默?


-------------------------------------------------------- KeyGTK3PgWait ----

Wait   等待
  
从带有掩码的硬件端口读取。

语法
Declare Function Wait ( ByVal port As UShort, ByVal and_mask As Long, ByVal xor_mask As Long = 0 ) As Long

用法
Wait port, and_value [, xor_value]

参数
port
要读取的端口。
and_mask
掩码值为 和 端口值 与。
xor_mask
掩码值为 Xor 端口值。

返回值
成功时为 0，失败时为 -1。

描述



-------------------------------------------------------- KeyGTK3PgWbin ----

WBin   宽字符二进制
  
返回数字的二进制（Unicode）表示形式WString

语法
Declare Function WBin ( ByVal number As UByte ) As WString
Declare Function WBin ( ByVal number As UShort ) As WString
Declare Function WBin ( ByVal number As ULong ) As WString
Declare Function WBin ( ByVal number As ULongInt ) As WString
Declare Function WBin ( ByVal number As Const Any Ptr ) As WString

Declare Function WBin ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

用法
result = WBin( number [, digits] )

参数
number
计算为整数的整数或表达式。
digits
要返回的可选位数。

返回值
返回 的二进制表示形式 被截断或填充零 （） 以适合位数（如果已指定）。WStringnumber"0"

描述
返回一个 （Unicode），表示整数 的二进制值。二进制数字的范围从 到 。
如果指定 > ，则结果 w


-------------------------------------------------------- KeyGTK3PgWchr ----

WChr   取宽字符
  
返回包含一个或多个 Unicode 字符的宽字符字符串

语法
Declare Function Wchr ( ByVal ch As Integer [, ... ] ) As WString

用法
result = WChr( ch0 [, ch1 ... chN ] )

参数
ch
字符的 Unicode 整数值。

返回值
返回宽字符字符串。

描述
WChr返回一个宽字符字符串，其中包含由传递给它的 Unicode 值所表示的字符。
当与数值常量或文本一起使用时，将在编译时计算结果，因此可以在变量


-------------------------------------------------------- KeyGTK3PgWeekday ----

Weekday   工作日
  
从日期序列中获取一周中的天数

语法
Declare Function Weekday ( ByVal serial As Double , ByVal firstdayofweek As Long = fbusesystem ) As Long

用法
#include "vbcompat.bi"
result = Weekday( date_serial [, firstdayofweek ] )

参数
date_serial
日期
firstdayofweek
一周的第一天

返回值
从包含日期序列格式的日期的变量中返回星期日编号。

描述
工作日值必须在 1-7 范围内，其含义取决于参数
是可选的。firstdayofweekfirstdayofweek

价值一周的第一天不断省略星期日 0本地设置fb


-------------------------------------------------------- KeyGTK3PgWeekdayname ----

WeekdayName   工作日名
  
从其整数表示形式中获取工作日的名称

语法
Declare Function WeekdayName ( ByVal weekday As , ByVal abbreviate As Long = 0, ByVal firstdayofweek As Long = fbUseSystem ) As String

用法
#include "vbcompat.bi"
result = WeekdayName( weekday [, abbreviate [, firstdayofweek ] ] )

参数
weekday
星期几
abbreviate
标志，指示名称应缩写
firstdayofweek
一周的第一天

返回值
从值 1 到 7 返回本地操作系统语言星期几名称。weekday

描述
如何解释取决于参数。
如果为 true，则返回 3 个字母的缩写，如果为 false 或省略，则返回整个名称。
是指定如下的可选参数：weekda


-------------------------------------------------------- KeyGTK3PgWend ----

Wend   继续
  
控制流语句。

语法
While [condition]
[statement block]
Wend

描述
Wend指定循环块的


-------------------------------------------------------- KeyGTK3PgWhex ----

WHex   宽字符16进制
  
返回数字的十六进制（Unicode）表示形式WString

语法
Declare Function WHex ( ByVal number As UByte ) As WString
Declare Function WHex ( ByVal number As UShort ) As WString
Declare Function WHex ( ByVal number As ULong ) As WString
Declare Function WHex ( ByVal number As ULongInt ) As WString
Declare Function WHex ( ByVal number As Const Any Ptr ) As WString

Declare Function WHex ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

用法
result = WHex( number [, digits ] )

参数
number
计算为整数的整数或表达式。
digits
要返回的可选位数。

返回值
返回 的十六进制表示形式 被截断或填充零 （） 以适合位数（如果已指定）。WStringnumber"0"

描述
十六进制数字的范围为 -或 -。
如果指定 > ，则得到的将恰?


-------------------------------------------------------- KeyGTK3PgWhile ----

While   当条件
  
控制流语句。

语法
Do While condition
[statement block]
Loop
or
Do
[statement block]
Loop While condition
or
While [condition]
[statement block]
Wend

描述
While指定循环块在以下计算结果为 true 时将继续。在每次?


-------------------------------------------------------- KeyGTK3PgWhilewend ----

While...Wend
  
用于循环的控制流语句

语法
While [condition]
[statement block]
Wend

描述
如果表达式条件的计算结果为 true，则该语句将导致 中的以下一组语句重复执行。
如果在首次执行语句时计算结果为 false，则跳过 ，并在包含语句后立即恢复执行。
如果在语句块内遇到语句，则循


-------------------------------------------------------- KeyGTK3PgWidth ----

Width
  
设置或获取显示的行数和列数

语法
Width [columns] [, rows]
Width LPrint columns
Width { #filenum | devicename }, columns
result = Width( )

参数
columns
用于输出的列（以字符为单位）
rows
用于输出的行（以字符为单位）
filenum
要申请的文件编号
devicename
要应用的设备名称

返回值
返回一个 32 位，其中高字是行数，低字是当前设置的列数。Long

描述
设置输出设备（控制台、打印机或文本文件）的最大字符列数。如果发送到设备的文本达到宽度，则会生成自动回车符


-------------------------------------------------------- KeyGTK3PgWindow ----

Window   窗口
  
为当前视口设置新的视图坐标映射

语法
Window [ [Screen] ( x1, y1 )-( x2, y2 ) ]

参数
Screen
指定 y 坐标的可选参数从上到下递增。
( x1, y1 )-( x2, y2 )
与当前视口的相对角对应的新浮点值。如果省略，则删除坐标映射。Window

描述
Window用于定义新的坐标系。 并且是要映射到当前视口相对角落的新坐标;传递给图形基元语句的所有未来坐标都将受到此新映射的影响。如果


-------------------------------------------------------- KeyGTK3PgWindowtitle ----

WindowTitle   窗口标题
  
设置程序窗口标题

语法
Declare Sub WindowTitle ( ByRef title As Const String )

用法
WindowTitle title

参数
title
要指定为新窗口标题的字符串。

描述
此语句对于更改程序窗口标题很有用。如果程序已在窗口模式下运行，则新标题集将立即变为活动状态，否则将成为由对 or 语句的后续调用产生的任何窗口的新标题。如果在设置新?


-------------------------------------------------------- KeyGTK3PgWinput ----

Winput()
  
从控制台或文件中读取大量宽字符

语法
Declare Function WInput( ByVal num As Integer ) As WString
Declare Function WInput( ByVal num As Integer, ByVal filenum As Long = 0 ) As WString

用法
result = WInput( num [, [#]filenum } )

参数
num
要读取的字符数。
filenum
绑定文件或设备的文件编号。

返回值
返回读取的字符的 WString。

描述
从控制台或 指定的绑定文件/设备读取许多宽字符。
第一个版本等待并从键盘缓冲区读取宽


-------------------------------------------------------- KeyGTK3PgWith ----

With   关联 
  
语句块，以允许隐式访问用户定义类型变量中的字段

语法
With user_defined_var
statements
End With

描述
该块允许在引用用户定义的变量的字段时省略其名称。然后，可以在字段之前仅使用一个句点（）访问字段，例如，如果包含称为“element”的字段元素，则可以在块中以“”的形式访问?


-------------------------------------------------------- KeyGTK3PgWoct ----

WOct   宽字符8进制
  
将数字转换为 Unicode 八进制表示形式

语法
Declare Function WOct ( ByVal number As UByte ) As WString
Declare Function WOct ( ByVal number As UShort ) As WString
Declare Function WOct ( ByVal number As ULong ) As WString
Declare Function WOct ( ByVal number As ULongInt ) As WString
Declare Function WOct ( ByVal number As Const Any Ptr ) As WString

Declare Function WOct ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

用法
result = WOct( number [, digits ] )

参数
number
要转换为八进制表示的数字。
digits
返回的字符串中所需的位数。

返回值
数字的 Unicode 八进制表示形式，截断或用零 （） 填充以适合位数（如果指定）。"0"

描述
返回 的八进制（Unicode）表示形式。八位数字的范围从 到 。
如果指定 > ，则结果字符串将恰好是


-------------------------------------------------------- KeyGTK3PgWrite ----

Write   写入
  
将逗号分隔的值列表输出到屏幕

语法
Write [ expressionlist ]

参数
expressionlist
要打印的以逗号分隔的项目列表

描述
将值输出到屏幕。这些值用逗号分隔，字符串括在双引号中。如果绝对值小于 1 的数值，则以零 （） 为前缀（例如，）。绝对值大于或等于 的浮点数，或?


-------------------------------------------------------- KeyGTK3PgWriteFile ----

Write (File Access)   写入
  
文件访问说明符

语法
Open filename As String For Binary Access Write As #filenum As Integer

描述
语句中子句的说明符。 指定?


-------------------------------------------------------- KeyGTK3PgWritePp ----

Write #   写入
  
将逗号分隔的值列表输出到文本文件或设备

语法
Write # filenum , [ expressionlist ]

参数
filenum
为 或 打开的打开的文件或设备的文件编号。OutputAppend
expressionlist
要打印的以逗号分隔的项目列表

描述
将中的值输出到绑定到 的文本文件或设备中。这些值用逗号分隔，字符串括在双引号中。如果未给出任何值（例如，的值将输出为），则大于零（）和小


-------------------------------------------------------- KeyGTK3PgWspace ----

WSpace   宽字符空格
  
创建一个给定长度的 ，其中填充了空格 （WString" ")

语法
Declare Function WSpace( ByVal count As Integer ) As WString

用法
result = WSpace( count )

参数
count
一种整数类型，指定要创建的字符串的长度。

返回值
创建的 .如果 .WStringcount <


-------------------------------------------------------- KeyGTK3PgWstr ----

WStr   宽字符转换
  
返回数字或 ASCII 字符串的宽字符字符串表示形式

语法
Declare Function WStr ( ByVal n As Byte ) As WString
Declare Function WStr ( ByVal n As UByte ) As WString
Declare Function WStr ( ByVal n As Short ) As WString
Declare Function WStr ( ByVal n As UShort ) As WString
Declare Function WStr ( ByVal n As Long ) As WString
Declare Function WStr ( ByVal n As ULong ) As WString
Declare Function WStr ( ByVal n As LongInt ) As WString
Declare Function WStr ( ByVal n As ULongInt ) As WString
Declare Function WStr ( ByVal n As Single ) As WString
Declare Function WStr ( ByVal n As Double ) As WString
Declare Function WStr ( ByRef str As Const String ) As WString
Declare Function WStr ( ByVal str As Const WString Ptr ) As WString

用法
result = WStr( number )
or
result = WStr( string )

参数
number
要转换为宽字符字符串的数值表达式。
string
要转换为宽字符字符串的字符串表达式。

返回值
返回数值或字符串表达式的宽字符表示形式。

描述
WStr将数值?


-------------------------------------------------------- KeyGTK3PgWstring ----
WStr   宽字?
Description



-------------------------------------------------------- KeyGTK3PgWstringFunction ----

Wstring (Function)   宽字符串
  
用特定宽度的某个宽字符的一定长度填充 aWString

语法
Declare Function WString ( ByVal count As Integer, ByVal ch_code As Long ) As WString
Declare Function WString ( ByVal count As Integer, ByRef ch As Const WString ) As WString

用法
result = WString( count, ch_code )
or
result = WString( count, ch )

参数
count
指定要创建的字符串的长度。Integer
ch_code
指定要用于填充字符串的 Unicode 字符。Long
ch
第一个字符将用于填充字符串的 A。WString

返回值
创建的 .如果是空字符串或 ， 则将返回空字符串。WStrin


-------------------------------------------------------- KeyGTK3PgXorGfx ----

Xor   异或
  
图形语句的参数，该语句使用按位作为 blitting 方法PutXor

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Xor

参数
Xor
必填。

描述
该方法使用按位函数将每个源像素与相应的目标像素组合在一起。这样做的结果是输出为目标像素。
此方法适用于所有图形模式。没有蒙版颜色，尽管颜色值（在全彩色模式下）不会产?


-------------------------------------------------------- KeyGTK3PgYear ----

Year   日期取年份
  
从日期序列中获取年份

语法
Declare Function Year ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Year( date_serial )

参数
date_serial
日期

返回值
从包含日期序列格式的日期的变量中返回年份?


-------------------------------------------------------- KeyGTK3PgZstring ----

ZString   Z字符串
  
标准数据类型：8 位字符串

语法
Dim variable As ZString * size
Dim variable As ZString Ptr

描述
A 是 C 样式的固定大小的字符数组。它没有描述符，因此可以更快地计算其长度，以将其作为参数传递给函数。当变量具有固定的（数值常量或可在编译时计算的表达式）时，FreeBASIC 通过将内容截

-------------------------------------------------------- KeyGTK3Win32AbnormalTermination ----
AbnormalTermination    AbnormalTermination函数指示尝试  -  最后语句的尝试块是否正常终止。该函数只能从尝试  -  最后语句的最后块内调用。
语法



-------------------------------------------------------- KeyGTK3Win32AbortDoc ----
AbortDoc    AbortDoc函数停止当前打印作业，并擦除自上次调用StartDoc函数以来绘制的所有内容。此函数替换ABORTDOC打印机转义。
语法
参数
【HDC】标识打印作业的设备上下文。
返回值
如果函数成功，返回值大于零。如果函数失败，则返回值为SP_ERROR。要获取扩展错误信息，请调用GetLastError.
描述
如果发


-------------------------------------------------------- KeyGTK3Win32AbortPath ----
AbortPath    AbortPath函数关闭并丢弃指定设备上下文中的任何路径。
语法
参数
【HDC】标识将丢弃路径的设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
如果在给定的设备上下


-------------------------------------------------------- KeyGTK3Win32AbortPrinter ----
AbortPrinter    如果打印机配置为假脱机，AbortPrinter函数将删除打印机的假脱机文件。
语法
参数
【hPrinter】标识从中删除假脱机文件的打印机。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
如果打


-------------------------------------------------------- KeyGTK3Win32AbortProc ----
AbortProc    AbortProc函数是一个应用程序定义的回调函数，在假脱机期间要取消打印作业时调用该函数。
语法
参数
【HDC】标识打印作业的设备上下文。【// error value】指定是否发生错误。如果没有发生错误，该参数为零;如果Windows打印管理器目前磁盘空间不足并且应用程序等待更多的磁盘空间


-------------------------------------------------------- KeyGTK3Win32AbortSystemShutdown ----
AbortSystemShutdown    AbortSystemShutdown函数使用InitiateSystemShutdown函数停止系统关机。
语法
参数
【lpMachineName】指向指定要停止关机的计算机的网络名称的以空值终止的字符串的指针。如果【lpMachineName】为NULL或指向空字符串，则该函数将停止本地计算机上的关闭。



-------------------------------------------------------- KeyGTK3Win32AccessCheck ----
AccessCheck    服务器应用程序使用AccessCheck函数，以根据与对象关联的访问控制来检查客户端对对象的访问。
语法
参数
【pSecurityDescriptor】指向检查访问的SECURITY_DESCRIPTOR结构的指针。【ClientToken】标识表示客户端尝试访问的访问令牌。必须从通信会话层__获取


-------------------------------------------------------- KeyGTK3Win32AccessCheckAndAuditAlarm ----
AccessCheckAndAuditAlarm    AccessCheckAndAuditAlarm函数执行访问验证并生成相应的审核消息。应用程序还可以使用此函数来确定客户端进程是否拥有必需的权限。此函数通常由模拟客户端进程的服务器应用程序使用。当前版本的Windows NT不支持警报。
语法
参数
【SubsystemName】指向以null结尾的字符串，指定调用函数__的子系统的名称，例如“DEBUG”或“WIN32”。【HandleId】指向一个唯一的32位值，表示客户端对象的句柄


-------------------------------------------------------- KeyGTK3Win32AcsLan ----
AcsLanAcsLan函数用于使用数据链接控制（DLC）协议与其他计算机或网络外围设备（如打印机）进行通信。呼叫者通过填写命令控制块（CCB），然后调用AcsLan来提交请求。通过AcsLan提交的命令可以同步或异步完成。DLC驱动程序，而不是调用者，确定命令如何完成。这与Netbios的 函数不同，例如，它具有按照调用者的请求同步或异步完成的命令。NT DLC和CCB2接口之间有一些区别。最显着的区别是缓冲池必须在开放适配器实例的基础上进行指定，而不是按SAP规定（服务访问点）。使用DIR.OPEN.ADAPTER命令打开适配器后，必须使用BUFFER.CREATE向DLC驱动程序提供缓冲池。
语法
参数
【PCCB】指向LLC_CCB结构的指针，描述正在执行的函数。有关此结构的信息，请参阅IBM LAN的文档。【ppBadCcb】指向LLC_CCB结构的指针。当提交LLC_CCB结构链时使用


-------------------------------------------------------- KeyGTK3Win32ActivateKeyboardLayout ----
ActivateKeyboardLayout    Windows 95和Windows NT中的ActivateKeyboardLayout的实现有很大的不同。为了适应这些差异，本参考页首先显示Windows 95实现，其次是Windows NT版本。Windows 95：
语法
参数
【HKL】处理键盘布局或零扩展区域设置标识符。该参数可以是使用LoadKeyboardLayout或GetKeyboardLayoutList函数获得的任何有效的键盘布局句柄或以下值之一：值


-------------------------------------------------------- KeyGTK3Win32AddAccessAllowedAce ----
AddAccessAllowedAce    AddAccessAllowedAce函数将一个访问允许的ACE添加到ACL。该访问被授予指定的SID。ACE是一个访问控制条目。ACL是访问控制列表。SID是安全标识符。
语法
参数
【ACL】指向ACL结构。此函数为此ACL添加了访问允许的ACE。ACE以ACCESS_ALLOWED_ACE结构的形式。【dwAceRevision】指定要修改的ACL的修订级别。目前，此


-------------------------------------------------------- KeyGTK3Win32AddAccessDeniedAce ----
AddAccessDeniedAce    AddAccessDeniedAce函数将一个访问被拒绝的ACE添加到ACL。访问被拒绝到指定的SID。ACE是一个访问控制条目。ACL是访问控制列表。SID是安全标识符。
语法
参数
【ACL】指向ACL结构。此函数为此ACL添加访问被拒绝的ACE。ACE以ACCESS_DENIED_ACE结构的形式。【dwAceRevision】指定要修改的ACL的修订级别。目前，此值


-------------------------------------------------------- KeyGTK3Win32AddAce ----
AddAce    AddAce函数将一个或多个ACE添加到指定的ACL。ACE是一个访问控制条目。ACL是访问控制列表。
语法
参数
【ACL】指向ACL结构。此函数将ACE添加到此ACL。【dwAceRevision】指定要修改的ACL的修订级别。目前，此值必须为ACL_REVISION。【dwStartingAceIn


-------------------------------------------------------- KeyGTK3Win32AddAtom ----
AddAtom    AddAtom函数将一个字符串添加到本地atom表中，并返回一个标识字符串的唯一值（atom）。
语法
参数
【lpString】指向要添加的以null结尾的字符串。该字符串的最大长度可以为255字节。仅在情况下不同的字符串被认为是相同的。添加的第一个字符串的情况由GetAtomName函数保留并返


-------------------------------------------------------- KeyGTK3Win32AddAuditAccessAce ----
AddAuditAccessAce    AddAuditAccessAce函数将系统审核ACE添加到系统ACL。审核指定SID的访问。ACE是一个访问控制条目。ACL是访问控制列表。SID是安全标识符。
语法
参数
【ACL】指向ACL结构。此函数将此系统审核ACE添加到此ACL。ACE采用SYSTEM_AUDIT_ACE结构的形式。【dwAceRevision】指定要修改的ACL的修订级别。目前，此值


-------------------------------------------------------- KeyGTK3Win32AddFontResource ----
AddFontResource    AddFontResource函数将字体资源从指定的文件添加到Windows字体表。该字体随后可用于任何基于Windows的应用程序的文本输出。
语法
参数
【lpszFilenamenl】指向包含有效字体文件filename的以null结尾的字符串。文件名可以指定.FON字体资源文件，.FNT原始位图字体文件，.TTF原始TrueType文件或


-------------------------------------------------------- KeyGTK3Win32AddForm ----
AddForm    AddForm函数将表单添加到可以为指定打印机选择的可用表单列表。
语法
参数
【hPrinter】标识支持以指定格式打印的打印机。【水平】指定【P成型】指向的结构的级别。此值必须为1。【P成型】指向FORM_INFO_1结构。
返回值
如果函数成功，返回值不为零。


-------------------------------------------------------- KeyGTK3Win32AddJob ----
AddJob    AddJob函数获取一个路径字符串，指定可用于存储假脱机打印作业的文件。
语法
参数
【hPrinter】手动指定打印作业的打印机。这必须是配置为假脱机打印机的本地打印机。如果【hPrinter】是远程打印机连接的句柄，或者如果打印机配置为直接打印，则AddJob函数失败。【


-------------------------------------------------------- KeyGTK3Win32AddMonitor ----
AddMonitor    AddMonitor函数安装本地打印机监视器并链接配置，数据和监视器文件。Windows NT的未来版本可能允许远程安装打印机监视器。
语法
参数
【PNAME】指向指定要在其上安装监视器的服务器的名称的以null结尾的字符串的指针。对于此版本的Windows NT，只能在本地安装监视器，因此此字符串应为NULL。【水平】指定【//指向


-------------------------------------------------------- KeyGTK3Win32AddPort ----
AddPort    AddPort函数将端口的名称添加到支持的端口列表中。AddPort函数由打印监视器导出。
语法
参数
【PNAME】指向一个零终止字符串的指针，指定端口连接到的服务器的名称。如果此参数为NULL，端口为本地端口。【的hWnd】处理到AddPort对话框的父窗口。【pMonitorName】指


-------------------------------------------------------- KeyGTK3Win32AddPrinter ----
AddPrinter    AddPrinter函数将打印机添加到指定服务器支持的打印机列表中。
语法
参数
【PNAME】指向指定要在其上安装打印机打印处理器的服务器的名称的以空值终止的字符串的指针。如果此字符串为NULL，打印处理器将在本地安装。【水平】指定【pPrinter】指向的结构的版本。


-------------------------------------------------------- KeyGTK3Win32AddPrinterConnection ----
AddPrinterConnection    AddPrinterConnection函数为当前用户添加了指定打印机的连接。
语法
参数
【PNAME】指向指定当前用户希望建立连接的打印机名称的以空值终止的字符串的指针。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLast


-------------------------------------------------------- KeyGTK3Win32AddPrinterDriver ----
AddPrinterDriver    AddPrinterDriver函数安装本地或远程打印机驱动程序，并链接配置，数据和驱动程序文件。
语法
参数
【PNAME】指向以空值终止的字符串的指针，指定应安装驱动程序的服务器的名称。如果【PNAME】为NULL，则驱动程序将在本地安装。【水平】指定【pDriverInfo】指向的结构的版本。该


-------------------------------------------------------- KeyGTK3Win32AddPrintProcessor ----
AddPrintProcessor    AddPrintProcessor函数在指定的服务器上安装打印处理器，并将打印处理器名称添加到支持的打印处理器的内部列表中。
语法
参数
【PNAME】指向指定要在其上安装打印处理器的服务器的名称的以空值终止的字符串的指针。如果此参数为NULL，打印处理器将在本地安装。【pEnvironment】指向指定环境的以空值终止的字符


-------------------------------------------------------- KeyGTK3Win32AddPrintProvidor ----
AddPrintProvidor    AddPrintProvidor函数安装本地打印机提供商并链接配置，数据和提供程序文件。Windows的未来版本可能允许远程安装打印机提供商。
语法
参数
【PNAME】指向以空值终止的字符串，指定应安装提供程序的服务器的名称。对于此版本的Windows 95和Windows NT，提供程序只能在本地安装，因此此参数应为NULL。【水平】指定【


-------------------------------------------------------- KeyGTK3Win32AddPropSheetPageProc ----
AddPropSheetPageProc    AddPropSheetPageProc函数指定一个应用程序定义的回调函数，属性表扩展用于将页面添加到属性表。
语法



-------------------------------------------------------- KeyGTK3Win32AdjustTokenGroups ----
AdjustTokenGroups    AdjustTokenGroups函数调整指定访问令牌中的组。启用或禁用访问令牌中的组需要TOKEN_ADJUST_GROUPS访问。
语法
参数
【TokenHandle】标识包含要修改的组的访问令牌。【ResetToDefault】指定组是否被设置为默认的启用和禁用状态。如果此值为TRUE，则将组设置为其默认状态，并忽略【NewSt


-------------------------------------------------------- KeyGTK3Win32AdjustTokenPrivileges ----
AdjustTokenPrivileges    AdjustTokenPrivileges函数可以在指定的访问令牌中启用或禁用权限。启用或禁用访问令牌中的权限需要TOKEN_ADJUST_PRIVILEGES访问。
语法
参数
【TokenHandle】标识包含要修改的权限的访问令牌。【DisableAllPrivileges】指定该函数是否禁用所有令牌的权限。如果此值为TRUE，该函数将禁用所有权限，并忽略【Ne


-------------------------------------------------------- KeyGTK3Win32AdjustWindowRect ----
AdjustWindowRect    AdjustWindowRect函数根据所需的客户矩形大小计算窗口矩形所需的大小。然后可以将窗口矩形传递给CreateWindowEx函数，以创建一个窗口，其客户端区域是所需的大小。
语法
参数
【LPRECT】指向RECT结构的指针，其中包含所需客户区域的左上角和右下角的坐标。当函数返回时，结构包含窗口左上角和右下角的坐标，以适应所需的客户区。【dwStyle】指定要计算所需大小的


-------------------------------------------------------- KeyGTK3Win32AdjustWindowRectEx ----
AdjustWindowRectEx    AdjustWindowRectEx函数根据所需的客户端矩形大小计算具有扩展样式的窗口的矩形所需的大小。然后可以将窗口矩形传递给CreateWindowEx函数，以创建一个窗口，其客户端区域是所需的大小。
语法
参数
【LPRECT】指向RECT结构的指针，其中包含所需客户区域的左上角和右下角的坐标。当函数返回时，结构包含窗口左上角和右下角的坐标，以适应所需的客户区。【dwStyle】指定要计算所需大小的


-------------------------------------------------------- KeyGTK3Win32AdvancedDocumentProperties ----
AdvancedDocumentProperties    AdvancedDocumentProperties函数显示指定打印机的打印机配置对话框，允许用户配置该打印机。
语法
参数
【的hWnd】标识打印机配置对话框的父窗口。【hPrinter】标识打印机对象。【pDeviceName】指向指定要显示打印机配置对话框的设备名称的以空值终止的字符串的指针。【pDevMod


-------------------------------------------------------- KeyGTK3Win32AllocateAndInitializeSid ----
AllocateAndInitializeSid    AllocateAndInitializeSid函数分配和初始化最多八个子权限的安全标识符（SID）。
语法
参数
【pIdentifierAuthority】指向SID_IDENTIFIER_AUTHORITY结构的指针，给出在SID中设置的顶级标识符权限值。【nSubAuthorityCount】指定


-------------------------------------------------------- KeyGTK3Win32AllocateLocallyUniqueId ----
AllocateLocallyUniqueId    AllocateLocallyUniqueId函数分配本地唯一标识符（LUID）。
语法
参数
【高声】指向接收分配的LUID的缓冲区。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
LUID仅在单个会


-------------------------------------------------------- KeyGTK3Win32AllocConsole ----
AllocConsole    AllocConsole函数为调用进程分配一个新的控制台。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
一个进程只能与一个控制台关联，因此如果调用进


-------------------------------------------------------- KeyGTK3Win32AngleArc ----
AngleArc    AngleArc函数绘制一个线段和弧。线段从当前位置绘制到弧的开头。圆弧沿着具有给定半径和中心的圆的周边绘制。弧的长度由给定的起始和扫掠角度定义。
语法
参数
【HDC】标识设备上下文。【X】指定圆的中心的逻辑x坐标。【Y】指定圆的中心的逻辑y坐标。【dwRadius】指定圆的半径（以逻辑为单位）。该值必须为正。【eStartAngle】指定相对于


-------------------------------------------------------- KeyGTK3Win32AnimatePalette ----
AnimatePalette    AnimatePalette函数将替换指定逻辑调色板中的条目。
语法
参数
【HPAL】标识逻辑调色板。【iStartIndex】指定要替换的第一个逻辑调色板条目。【cEntries】指定要替换的条目数。【PPE】指向用于替换当前条目的PALETTEENTRY结构数


-------------------------------------------------------- KeyGTK3Win32AnsiLower ----
AnsiLowerAnsiLower    函数已过时。为了与16位版本的Windows兼容，此函数实现为调用CharLower函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyGTK3Win32AnsiLowerBuff ----
AnsiLowerBuffAnsiLowerBuff    函数已过时。为了与16位版本的Windows兼容，此函数实现为调用CharLowerBuff函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyGTK3Win32AnsiNext ----
AnsiNextAnsiNext    函数已过时。为了与16位版本的Windows兼容，此函数实现为调用CharNext函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyGTK3Win32AnsiPrev ----
AnsiPrevAnsiPrev    函数已过时。为了与16位版本的Windows兼容，此函数实现为调用CharPrev函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyGTK3Win32AnsiToOem ----
AnsiToOem  AnsiToOem    函数已过时。为了与16位版本的Windows兼容，此函数实现为调用CharToOem函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyGTK3Win32AnsiToOemBuff ----
AnsiToOemBuff  AnsiToOemBuff    函数已过时。为了与16位版本的Windows兼容，此函数实现为调用CharToOemBuff函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyGTK3Win32AnsiUpper ----
AnsiUpperAnsiUpper    函数已过时。为了与16位版本的Windows兼容，此函数实现为调用CharUpper函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyGTK3Win32AnsiUpperBuff ----
AnsiUpperBuffAnsiUpperBuff    函数已过时。为了与16位版本的Windows兼容，此函数实现为调用CharUpperBuff函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyGTK3Win32AnyPopup ----
AnyPopup    AnyPopup函数表示屏幕上是否存在拥有，可见，顶级弹出窗口或重叠窗口。该函数搜索整个Windows屏幕，而不仅仅是呼叫应用程序的客户端区域。
语法
参数
此函数无参数。
返回值
如果弹出窗口存在，则返回值不为零，即使弹出窗口被其他窗口完全覆盖。如果弹出窗口不存在，返回值为零。
描述
AnyPopup是Windows版本1.【x】函数，


-------------------------------------------------------- KeyGTK3Win32AppendMenu ----
AppendMenu    AppendMenu函数将一个新项目附加到指定的菜单栏，下拉菜单，子菜单或快捷菜单的末尾。您可以使用此函数指定菜单项的内容，外观和行为。InsertMenuItem函数已被InsertMenuItem函数取代。但是，如果您不需要InsertMenuItem的任何扩展函数，您仍然可以使用AppendMenu.
语法
参数
【HMENU】标识要更改的菜单栏，下拉菜单，子菜单或快捷菜单。【uFlags】指定用于控制新菜单项的外观和行为的标志。此参数可以是以下备注部分中列出的值的组合。【uIDNewItem】指定新


-------------------------------------------------------- KeyGTK3Win32Arc ----
Arc    弧函数绘制一个椭圆弧。BOOL Arc(HDC 【HDC】,//处理设备上下文INT 【nLeftRect】,//边界矩形左上角的x坐标INT 【nTopRect】,//边界矩形左上角的y坐标INT 【nRightRect】,//边界矩形右下角的x坐标INT 【nBottomRect】,//边界矩形右下角的y坐标INT 【nXStartArc】,//第一个径向结束点INT 【nYStartArc】,//第一个径向结束点INT 【nXEndArc】,//第二径向终点INT 【nYEndArc】//第二径向终点);
参数
【HDC】标识出现绘图的设备上下文。【nLeftRect】指定边界矩形左上角的逻辑x坐标。Windows 95： 【nLeftRect】加上【nRightRect】的总和必须小于32768。


-------------------------------------------------------- KeyGTK3Win32ArcTo ----
ArcTo    ArcTo函数绘制一个椭圆弧。
语法
参数
【HDC】标识出现绘图的设备上下文。【nLeftRect】指定边界矩形左上角的逻辑x坐标。【nTopRect】指定边界矩形左上角的逻辑y坐标。【nRightRect】指定边界矩形右下角的逻辑


-------------------------------------------------------- KeyGTK3Win32AreAllAccessesGranted ----
AreAllAccessesGranted    AreAllAccessesGranted函数检查是否已经授予一组请求的访问权限。访问权限表示为32位访问掩码中的位标志。
语法
参数
【GrantedAccess】一个访问掩码，指定已授予的访问权限。【DesiredAccess】一个访问掩码，指定已请求的访问权限。这个掩码必须已经从通用映射到特定的和标准的访问权限，通常通


-------------------------------------------------------- KeyGTK3Win32AreAnyAccessesGranted ----
AreAnyAccessesGranted    AreAnyAccessesGranted函数测试是否已经授予一组请求的访问权限。访问权限表示为32位访问掩码中的位标志。
语法
参数
【GrantedAccess】指定授权的访问掩码。【DesiredAccess】指定要请求的访问掩码。这个掩码必须已经从通用映射到特定的和标准的访问权限，通常通过调用MapGenericMa


-------------------------------------------------------- KeyGTK3Win32AreFileApisANSI ----
AreFileApisANSI    AreFileApisANSI函数确定一组Win32文件函数是否使用ANSI或OEM字符集代码页。此函数对于8位控制台输入和输出操作非常有用。
语法
参数
此函数无参数。
返回值
如果一组Win32文件函数正在使用ANSI代码页，则返回值不为零。如果一组Win32文件函数正在使用OEM代码页，返回值为零。
描述
SetFileApisT


-------------------------------------------------------- KeyGTK3Win32ArrangeIconicWindows ----
ArrangeIconicWindows    ArrangeIconicWindows函数将排列指定父窗口的所有最小化（图标）子窗口。
语法
参数
【的hWnd】标识父窗口。
返回值
如果函数成功，则返回值是一行图标的高度。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
维护自己的最小化子窗


-------------------------------------------------------- KeyGTK3Win32AttachThreadInput ----
AttachThreadInput    AttachThreadInput函数将一个线程的输入处理机制附加到另一个线程的输入处理机制。
语法
参数
【idAttach】指定要附加到另一个线程的线程的标识符。要连接的线程不能是系统线程。【idAttachTo】指定要附加到的线程的标识符。这个线程不能是系统线程。线程不能附加到自身。因此，【


-------------------------------------------------------- KeyGTK3Win32BackupEventLog ----
BackupEventLog    BackupEventLog函数将指定的事件日志保存到备份文件。该函数不会清除事件日志。
语法
参数
【hEventLog】标识打开的事件日志。该句柄由OpenEventLog或OpenBackupEventLog函数返回。【lpBackupFileName】指向以空字符结尾的字符串，指定备


-------------------------------------------------------- KeyGTK3Win32BackupRead ----
BackupRead    BackupRead函数将与指定文件或目录关联的数据读入缓冲区。您可以使用此函数来备份文件或目录。
语法
参数
【HFILE】处理要备份的文件或目录。该函数读取与此文件相关的数据。通过调用CreateFile函数获取此句柄。如果CreateFile被标记为FILE_FLAG_NO_BUFFERING，


-------------------------------------------------------- KeyGTK3Win32BackupSeek ----
BackupSeek    BackupSeek函数通过使用BackupRead或BackupWrite函数初步访问数据流。
语法
参数
【HFILE】标识要备份的文件或目录。该句柄是通过使用CreateFile函数创建的。【dwLowBytesToSeek】指定要寻找的字节数的低32位。【dwHighBytesToSeek】


-------------------------------------------------------- KeyGTK3Win32BackupWrite ----
BackupWrite    BackupWrite函数将数据流从缓冲区写入指定的文件或目录。数据必须分为由WIN32_STREAM_ID结构分隔的子流。您可以使用此函数来还原已备份的文件或目录。
语法
参数
【HFILE】处理要恢复的文件或目录。该函数将数据写入此文件。您可以通过调用CreateFile函数获取此句柄。如果CreateFile被标记为FILE_FLAG_NO_BUFFERING，


-------------------------------------------------------- KeyGTK3Win32Beep ----
Beep    嘟函数在扬声器上产生简单的音调。函数是同步的在声音完成之前，它不会将控制权返回给其呼叫者。BOOL Beep(DWORD 【dwFreq】,//声音频率，以赫兹为单位DWORD 【dwDuration】//声音持续时间，以毫秒为单位);
参数
【dwFreq】Windows NT：指定频率（赫兹）的声音。该参数必须在37到32,767（0x25到0x7FFF）的范围内。Windows 95：参数被忽略。【dwDuration】Wi


-------------------------------------------------------- KeyGTK3Win32BeginDeferWindowPos ----
BeginDeferWindowPos    BeginDeferWindowPos函数为多窗口位置结构分配内存并返回结构的句柄。
语法
参数
【nNumWindows】指定要存储位置信息的初始窗口数。如果需要，DeferWindowPos函数可以增加结构的大小。
返回值
如果函数成功，则返回值标识多窗口位置结构。如果系统资源不


-------------------------------------------------------- KeyGTK3Win32BeginPaint ----
BeginPaint    BeginPaint函数准备指定的绘画窗口，并填写PAINTSTRUCT结构，其中包含有关绘画的信息。
语法
参数
【HWND】标识要重画的窗口。【Lppant】指向PAINTSTRUCT结构的指针，将接收绘画信息。
返回值
如果函数成功，则返回值是指定窗口的显示设备上下文的句柄。如果函数失败，则返回


-------------------------------------------------------- KeyGTK3Win32BeginPath ----
BeginPath    BeginPath函数在指定的设备上下文中打开路径括号。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
路径括号打开后，应用程序可以开始


-------------------------------------------------------- KeyGTK3Win32BeginUpdateResource ----
BeginUpdateResource    BeginUpdateResource函数返回可由UpdateResource函数使用的句柄，以在可执行文件中添加，删除或替换资源。
语法
参数
【pFileName】指向以空值终止的字符串，指定要在其中更新资源的Windows可执行文件。应用程序必须能够获取对此文件的写入权限;它不能当前正在执行。如果【pFileName】未指定完整


-------------------------------------------------------- KeyGTK3Win32BitBlt ----
BitBlt    BitBlt函数执行与从指定源设备上下文到目标设备上下文的像素矩形相对应的颜色数据的位块传输。
语法
参数
【hdcDest】标识目标设备上下文。【nXDest】指定目标矩形左上角的逻辑x坐标。【nYDest】指定目标矩形左上角的逻辑y坐标。【nWidth】指定源和目标矩形的逻辑宽度。【nHeig


-------------------------------------------------------- KeyGTK3Win32BringWindowToTop ----
BringWindowToTop    BringWindowToTop函数将指定的窗口置于Z顺序的顶部。如果窗口是顶级窗口，它将被激活。如果窗口是子窗口，则与子窗口关联的顶层父窗口将被激活。
语法
参数
【的hWnd】标识要带到Z订单顶部的窗口。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
使用BringW


-------------------------------------------------------- KeyGTK3Win32BroadcastSystemMessage ----
BroadcastSystemMessage    [Now Supported on Windows NT]BroadcastSystemMessage函数会向指定的收件人发送一条消息。收件人可以是应用程序，可安装的驱动程序，基于Windows的网络驱动程序，系统级设备驱动程序或这些系统组件的任意组合。
语法



-------------------------------------------------------- KeyGTK3Win32BrowseCallbackProc ----
BrowseCallbackProc    [Now Supported on Windows NT]指定与SHBrowseForFolder函数一起使用的应用程序定义的回调函数。浏览对话框调用此函数通知它关于事件。BFFCALLBACK类型定义了一个指向此回调函数的指针。int BrowseCallbackProc（HWND【HWND】, UINT【uMsg】, LPARAM【lParam的】, LPARAM 【的lpData】 );
参数
【HWND】处理到浏览对话框。回调函数可以将以下消息发送到此窗口：BFFM_ENABLEOK如果【wParam中】参数为非零，则启用确定按钮，如果【wParam中】为零，则禁用该按钮。BFF


-------------------------------------------------------- KeyGTK3Win32BuildCommDCB ----
BuildCommDCB    BuildCommDCB函数使用设备控制字符串中指定的值填充指定的DCB结构。设备控制字符串使用模式命令的语法。
语法
参数
【lpDef】指向指定设备控制信息的以空值终止的字符串的指针。字符串必须与模式命令的命令行参数的格式相同。例如，以下字符串指定波特率1200，无奇偶校验，8位数据位和1位停止位：baud=1


-------------------------------------------------------- KeyGTK3Win32BuildCommDCBAndTimeouts ----
BuildCommDCBAndTimeouts    BuildCommDCBAndTimeouts函数将设备定义字符串转换为适当的设备控制块代码，然后将这些代码放入设备控制块。该函数还可以为设备设置超时值，包括无超时的可能性;在这方面，函数的行为根据设备定义字符串的内容而有所不同。
语法
参数
【lpDef】指向指定设备的设备控制信息的空终止字符串的指针。该函数使用此字符串，解析它，然后在【lpDCB】指向的DCB结构中设置适当的值。【lpDCB】指向DCB结构的指针，该函数填充【


-------------------------------------------------------- KeyGTK3Win32BuildExplicitAccessWithName ----
BuildExplicitAccessWithName    [New - Windows NT]BuildExplicitAccessWithName函数使用调用者指定的数据初始化EXPLICIT_ACCESS结构。受托人由名称字符串标识。
语法
参数
【pExplicitAccess】指向EXPLICIT_ACCESS结构进行初始化。BuildExplicitAccessWithName不分配任何内存。如果此参数为NULL，则该函数不执行


-------------------------------------------------------- KeyGTK3Win32BuildImpersonateExplicitAccessWithName ----
BuildImpersonateExplicitAccessWithName    [New - Windows NT]提供BuildImpersonateExplicitAccessWithName函数供将来使用。不要在Windows NT版本4.0上调用它。


-------------------------------------------------------- KeyGTK3Win32BuildImpersonateTrustee ----
BuildImpersonateTrustee    [New - Windows NT]提供BuildImpersonateTrustee函数供将来使用。不要在Windows NT版本4.0上调用它。


-------------------------------------------------------- KeyGTK3Win32BuildSecurityDescriptor ----
BuildSecurityDescriptor    [New - Windows NT]BuildSecurityDescriptor函数分配和初始化一个新的安全描述符。安全描述符是一个不透明的结构，其中包含与对象相关联的安全信息。该函数可以通过将指定的安全信息与现有安全描述符中的信息合并来初始化新的安全描述符。如果不指定现有安全描述符，则该函数将根据指定的安全性信息初始化新的安全描述符。
语法
参数
【pOwner】指向TRUSTEE结构的指针，用于标识新安全描述符的所有者。如果结构使用TRUSTEE_IS_NAME表单，BuildSecurityDescriptor将查找与指定受托人名


-------------------------------------------------------- KeyGTK3Win32BuildTrusteeWithName ----
BuildTrusteeWithName    [New - Windows NT]BuildTrusteeWithName函数初始化TRUSTEE结构。来电者指定受托人姓名。该函数将结构的其他成员设置为默认值。
语法
参数
【pTrustee】指向TRUSTEE结构进行初始化。BuildTrusteeWithName函数不分配任何内存。如果此参数为NULL，则该函数不执行任何操作。【PNAME】指向包含TRUS


-------------------------------------------------------- KeyGTK3Win32BuildTrusteeWithSid ----
BuildTrusteeWithSid    [New - Windows NT]BuildTrusteeWithSid函数初始化TRUSTEE结构。来电者指定受托人的安全标识符（SID）。该函数将结构的其他成员设置为默认值。该函数不会查找与SID关联的名称。
语法
参数
【pTrustee】指向TRUSTEE结构进行初始化。BuildTrusteeWithSid函数不分配任何内存。如果此参数为NULL，则该函数不执行任何操作。【PSID】指向识别受托人的SI


-------------------------------------------------------- KeyGTK3Win32CallMsgFilter ----
CallMsgFilter    CallMsgFilter函数将指定的消息和挂钩代码传递给与WH_SYSMSGFILTER和WH_MSGFILTER钩子相关联的钩子过程。WH_SYSMSGFILTER或WH_MSGFILTER挂钩过程是一个应用程序定义的回调函数，用于检查和（可选）修改对话框，消息框，菜单或滚动条的消息。
语法
参数
【LPMSG】指向MSG结构的指针，其中包含要传递给挂钩过程的消息。【NCODE】指定钩子过程使用的应用程序定义代码来确定如何处理消息。代码不能与与WH_SYSMSGFILTER和WH_MS


-------------------------------------------------------- KeyGTK3Win32CallNamedPipe ----
CallNamedPipe    CallNamedPipe函数连接到消息类型的管道（并且等待管道的实例不可用），写入管道并从管道读取，然后关闭管道。
语法
参数
【lpNamedPipeName】指向指定管道名称的以null结尾的字符串的指针。【lpInBuffer】指向包含写入管道的数据的缓冲区。【nInBufferSize】指定写缓冲区的大小（以


-------------------------------------------------------- KeyGTK3Win32CallNextHookEx ----
CallNextHookEx    CallNextHookEx函数将钩子信息传递给当前钩子链中的下一个钩子过程。此函数取代DefHookProc函数。
语法
参数
【HHK】标识当前挂钩。由于以前调用SetWindowsHookEx函数，应用程序会收到此句柄。【NCODE】指定传递给当前挂钩过程的挂钩代码。下一个钩子过程使用此代码来确定如何处理挂钩信息


-------------------------------------------------------- KeyGTK3Win32CallWindowProc ----
CallWindowProc    CallWindowProc函数将消息信息传递到指定的窗口过程。
语法
参数
【lpPrevWndFunc】指向上一个窗口过程。如果通过调用GetWindowLong参数设置为GWL_WNDPROC或DWL_DLGPROC的GetWindowLong函数获得此值，则实


-------------------------------------------------------- KeyGTK3Win32CallWndProc ----
CallWndProc    CallWndProc挂接过程是一种应用程序定义或库定义的回调函数，只要调用SendMessage函数，系统就会调用该函数。在将消息传递到目标窗口过程之前，系统将消息传递给挂接过程。挂钩过程可以检查消息;它不能修改它。
语法
参数
【NCODE】指定挂接过程是否处理消息。如果【NCODE】为HC_ACTION，则挂接过程必须处理该消息。如果【NCODE】小于零，挂钩过程必须将消息传递给CallNextHookEx函数，


-------------------------------------------------------- KeyGTK3Win32CallWndRetProc ----
CallWndRetProc    [Now Supported on Windows NT]CallWndRetProc挂接过程是在调用SendMessage函数后系统调用的应用程序定义或库定义的回调函数。将消息传递到目标窗口过程后，系统将该消息传递给挂钩过程。挂钩过程可以检查消息;它不能修改它。
语法
参数
【NCODE】指定挂接过程是否处理消息。如果【NCODE】为HC_ACTION，则挂接过程必须处理该消息。如果【NCODE】小于零，挂钩过程必须将消息传递给CallNextHookEx函数，


-------------------------------------------------------- KeyGTK3Win32CancelDC ----
CancelDC    CancelDC函数取消指定设备上下文（DC）上的任何挂起操作。
语法
参数
【HDC】识别DC。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
多线程应用程序使用CancelDC函数来取消冗长的绘图操作。如果线程A启动长时间的绘图操作


-------------------------------------------------------- KeyGTK3Win32CancelIO ----
CancelIO  [New - Windows NT]CancelIO函数取消调用线程为指定的文件句柄发出的所有待处理的输入和输出（I / O）操作。该函数不会取消其他线程为文件句柄发出的I / O操作。
语法
参数
【HFILE】处理文件。该函数取消该文件句柄的所有待处理I / O操作。
返回值
如果函数成功，则返回值为非零由调用线程为文件句柄发出的所有待处理I / O操作已成功取消。如果函数失败，


-------------------------------------------------------- KeyGTK3Win32CancelWaitableTimer ----
CancelWaitableTimer    [New - Windows NT]CancelWaitableTimer函数将指定的“等待”定时器设置为非活动状态。
语法
参数
【hTimer】标识定时器对象。CreateWaitableTimer或OpenWaitableTimer函数返回此句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。


-------------------------------------------------------- KeyGTK3Win32CascadeWindows ----
CascadeWindows    [Now Supported on Windows NT]CascadeWindows函数将指定的窗口或指定父窗口的子窗口级联。
语法
参数
【hwndParent】标识父窗口。如果此参数为NULL，则假定桌面窗口。【wHow】指定级联标志。当前可用的唯一标志MDITILE_SKIPDISABLED可防止已禁用MDI子窗口级联。【


-------------------------------------------------------- KeyGTK3Win32CBTProc ----
CBTProc    CBTProc挂接过程是系统在激活，创建，销毁，最小化，最大化，移动或调整窗口大小之前调用的应用程序定义或库定义的回调函数;完成系统命令之前;在从系统消息队列中删除鼠标或键盘事件之前;在设置键盘焦点之前;或在与系统消息队列同步之前。挂钩过程返回的值确定Windows是否允许或阻止其中一个操作。基于计算机的培训（CBT）应用程序使用此挂接过程从系统接收有用的通知。
语法
参数
【NCODE】指定挂钩过程用于确定如何处理消息的代码。此参数可以是以下值之一：值含义HCBT_ACTIVATE系统即将激活一个窗口。HCBT_CLICKSKIPPED系统从系统消息队列中删除


-------------------------------------------------------- KeyGTK3Win32CCHookProc ----
CCHookProc    一个CCHookProc钩子过程是一个应用程序定义或库定义的回调过程，与Color公共对话框一起使用。挂钩过程接收默认对话框过程的消息或通知。
语法
参数
【hdlg】处理消息所针对的颜色对话框窗口。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息。具体含义取决于【uiMsg】参数的值。【lParam的】指定有关该消


-------------------------------------------------------- KeyGTK3Win32CFHookProc ----
CFHookProc    一个CFHookProc挂接过程是一个应用程序定义或库定义的回调过程，它与Font Common对话框一起使用。挂钩过程接收默认对话框过程的消息或通知。
语法
参数
【hdlg】处理到消息所针对的字体对话框窗口。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息。具体含义取决于【uiMsg】参数的值。【lParam的】指定有关该


-------------------------------------------------------- KeyGTK3Win32ChangeClipboardChain ----
ChangeClipboardChain    ChangeClipboardChain函数从剪贴板查看器链中删除指定的窗口。
语法
参数
【hWndRemove】标识要从链中删除的窗口。必须将句柄传递给SetClipboardViewer函数。【hWndNewNext】标识剪贴板查看器链中【hWndRemove】窗口之后的窗口


-------------------------------------------------------- KeyGTK3Win32ChangeDisplaySettings ----
ChangeDisplaySettings    ChangeDisplaySettings函数将显示设置更改为指定的图形模式。
语法
参数
【lpDevMode】指向DEVMODE结构的指针，描述要切换到的图形模式。dmsiz到成员必须初始化为DEVMODE结构的大小（以字节为单位）。使用DEVMODE结构中的以下字段：会员含义


-------------------------------------------------------- KeyGTK3Win32ChangeMenu ----
ChangeMenu    ChangeMenu函数已被以下专用函数取代，这些函数在Windows NT和Windows 95上均可用：函数描述AppendMenu将菜单项添加到菜单的末尾。InsertMenu将菜单项插入到菜单中。ModifyMenu修改菜单中的菜单项。RemoveMenu从菜单中删除菜单项;如果是弹出式项目，相应的弹出式菜单将被破坏（989796034）。
Windows 95：而不是使用AppendMenu，InsertMenu和ModifyMenu，专门为Window 95编写的应用程序应该使用以下新函数，这些函数仅在Windows 95上可用。函数描述GetMenuItemInfo获取有关菜单项的信息。InsertMenuItem在菜单栏或弹出菜单中的指定位置插入新的菜单项。SetMenuItemInfo更改有关菜单项的信息。
为Windows 3.0之前版本编写的应用程序可以继续调用ChangeMenu.为Windows 3.0或更高版本编写的应用程序应调用这些新函数。


-------------------------------------------------------- KeyGTK3Win32ChangeServiceConfig ----
ChangeServiceConfig    ChangeServiceConfig函数可更改服务的配置参数。
语法
参数
【hService】标识服务。该句柄由OpenService或CreateService函数返回，必须具有SERVICE_CHANGE_CONFIG访问权限。【dwServiceType】一


-------------------------------------------------------- KeyGTK3Win32CharLower ----
CharLower    CharLower函数将字符串或单个字符转换为小写。如果操作数是字符串，则该函数将字符转换到位。此函数取代AnsiLower函数。
语法
参数
【lpsz】指向以空值终止的字符串或指定单个字符。如果此参数的高位字为零，则低位字必须包含要转换的单个字符。
返回值
如果操作数是字符串，该函数将返回一个指向转换字符串的指针。由于字符串


-------------------------------------------------------- KeyGTK3Win32CharLowerBuff ----
CharLowerBuff    CharLowerBuff函数将缓冲区中的大写字符转换为小写字符。该函数将字符转换到位。该函数取代AnsiLowerBuff函数。
语法
参数
【lpsz】指向包含一个或多个要处理的字符的缓冲区。【cchLength】指定由【lpsz】指向的缓冲区的大小（以字节为单位（ANSI版本）或字符（Unicode版本））。该函数检查每个字符


-------------------------------------------------------- KeyGTK3Win32CharNext ----
CharNext    CharNext函数返回一个指向字符串中下一个字符的指针。此函数取代AnsiNext函数。
语法
参数
【lpsz】指向以空字符结尾的字符串中的字符。
返回值
如果函数成功，则返回值是指向字符串中下一个字符的指针，如果在字符串末尾则返回到终止空字符。如果【lpsz】指向终止空字符，则返回值


-------------------------------------------------------- KeyGTK3Win32CharNextExA ----
CharNextExA    [Now Supported on Windows NT]CharNextExA函数检索指向字符串中下一个字符的指针。此函数可以处理由单字节或多字节字符组成的字符串。
语法
参数
【CodePage】用于检查前置字节范围的代码页的标识符。可以是Unicode和字符集常量中的“代码页标识符”表中提供的代码页值之一或以下预定义值之一：值含义0使用系统默认的ANSI代码页。


-------------------------------------------------------- KeyGTK3Win32CharPrev ----
CharPrev    CharPrev函数返回一个指向字符串中前一个字符的指针。此函数取代AnsiPrev函数。
语法
参数
【lpszStart】指向字符串的开头。【lpszCurrent】指向以空字符结尾的字符串中的字符。
返回值
如果函数成功，则返回值是指向字符串中前一个字符的指针，如果【lpszCurr


-------------------------------------------------------- KeyGTK3Win32CharPrevExA ----
CharPrevExA    [Now Supported on Windows NT]CharPrevExA函数检索指向字符串中前一个字符的指针。此函数可以处理由单字节或多字节字符组成的字符串。
语法
参数
【CodePage】用于检查前置字节范围的代码页的标识符。可以是Unicode和字符集常量中的“代码页标识符”表中提供的代码页值之一或以下预定义值之一：值含义0使用系统默认的ANSI代码页。


-------------------------------------------------------- KeyGTK3Win32CharToOem ----
CharToOem    CharToOem函数将字符串转换为OEM定义的字符集。（OEM代表原始设备制造商。）此函数取代AnsiToOem函数。
语法
参数
【lpszSrc】指向要终止字符串的空值。【lpszDst】指向缓冲区的翻译字符串。如果CharToOem函数用作ANSI函数，则可以通过将【lpszDst】参数设置为与【lpszSrc】参


-------------------------------------------------------- KeyGTK3Win32CharToOemBuff ----
CharToOemBuff    CharToOemBuff函数将字符串中指定数量的字符转换为OEM定义的字符集。（OEM代表原始设备制造商。）此函数取代AnsiToOemBuff函数。
语法
参数
【lpszSrc】指向要终止字符串的空值。【lpszDst】指向缓冲区的翻译字符串。如果CharToOemBuff函数用作ANSI函数，则可以通过将【lpszDst】参数设置为与【lpszS


-------------------------------------------------------- KeyGTK3Win32CharUpper ----
CharUpper    CharUpper函数将字符串或单个字符转换为大写。如果操作数是字符串，则该函数将字符转换到位。此函数取代AnsiUpper函数。
语法
参数
【lpsz】指向以空值终止的字符串或指定单个字符。如果此参数的高位字为零，则低位字必须包含要转换的单个字符。
返回值
如果操作数是字符串，该函数将返回一个指向转换字符串的指针。由于字符串


-------------------------------------------------------- KeyGTK3Win32CharUpperBuff ----
CharUpperBuff    CharUpperBuff函数将缓冲区中的小写字符转换为大写字符。该函数将字符转换到位。该函数取代AnsiUpperBuff函数。
语法
参数
【lpsz】指向包含一个或多个要处理的字符的缓冲区。【cchLength】指定由【lpsz】指向的缓冲区的大小（以字节为单位（ANSI版本）或字符（Unicode版本））。该函数检查每个字符


-------------------------------------------------------- KeyGTK3Win32CheckColorsInGamut ----
CheckColorsInGamut    CheckColorsInGamut函数指示指定的颜色值是否在指定设备的色域内。
语法
参数
【HDC】处理设备上下文。【lpaRGBQuad】指向包含要检查的颜色值的RGBQUAD结构数组的数组。【lpResult】指向接收颜色检查结果的字节数组的指针。【NCOUNT】数组中的元素


-------------------------------------------------------- KeyGTK3Win32CheckDlgButton ----
CheckDlgButton    CheckDlgButton函数更改按钮控件的检查状态。
语法
参数
【hDlg】标识包含该按钮的对话框。【nIDButton】标识要修改的按钮。【uCheckig】指定按钮的检查状态。此参数可以是以下值之一：值含义BST_CHECKED设置按钮状态以进行检查


-------------------------------------------------------- KeyGTK3Win32CheckMenuItem ----
CheckMenuItem    CheckMenuItem函数将指定菜单项的复选标记属性的状态设置为已选中或未选中。SetMenuItemInfo函数已被SetMenuItemInfo函数取代。但是，如果您不需要SetMenuItemInfo的任何扩展函数，您仍然可以使用CheckMenuItem.
语法
参数
【HMENU】识别感兴趣的菜单。【uIDCheckItem】指定由【uCheckig】参数确定的要设置其复选标记属性的菜单项。【uCheckig】指定控制【uIDCheckItem】参数的解


-------------------------------------------------------- KeyGTK3Win32CheckMenuRadioItem ----
CheckMenuRadioItem    [Now Supported on Windows NT]CheckMenuRadioItem函数检查指定的菜单项，并将其设置为无线电项目。同时，该函数取消选中关联组中的所有其他菜单项，并清除这些项目的无线电项目类型标志。
语法
参数
【HMENU】处理到包含一组菜单项的菜单。【idCheck】组中第一个菜单项的标识符或位置。【Handle to the menu that contains the group of me


-------------------------------------------------------- KeyGTK3Win32CheckRadioButton ----
CheckRadioButton    CheckRadioButton函数将添加一个复选标记（检查）组中的指定单选按钮，并从组（清除）组中的所有其他单选按钮中删除一个复选标记。
语法
参数
【hDlg】标识包含单选按钮的对话框。【nIDFirstButton】指定组中第一个单选按钮的标识符。【nIDLastButton】指定组中最后一个单选按钮的标识符。【nIDCheckBut


-------------------------------------------------------- KeyGTK3Win32ChildWindowFromPoint ----
ChildWindowFromPoint    ChildWindowFromPoint函数确定属于父窗口的子窗口（如果有）包含指定的点。
语法
参数
【hWndParent】标识父窗口。【点】指定定义要检查点的客户端坐标的POINT结构。
返回值
如果函数成功，则返回值是包含该点的子窗口的句柄，即使子窗口被隐藏或禁用。如果该点位于父窗


-------------------------------------------------------- KeyGTK3Win32ChildWindowFromPointEx ----
ChildWindowFromPointEx    [Now Supported on Windows NT]ChildWindowFromPointEx函数确定属于指定父窗口的子窗口（如果有）包含指定的点。该函数可以忽略不可见，禁用和透明的子窗口。
语法
参数
【hwndParent】标识父窗口。【pt】指定定义要检查点的客户端坐标的POINT结构。【uFlags】指定要跳过的子窗口。此参数可以是以下值的组合：值含义CWP_ALL不要跳过任何子窗口


-------------------------------------------------------- KeyGTK3Win32ChooseColor ----
ChooseColor    ChooseColor函数创建一个“颜色常用”对话框，使用户可以选择颜色。
语法
参数
【LPCC】指向CHOOSECOLOR结构的指针，其中包含用于初始化对话框的信息。当ChooseColor返回时，此结构包含有关用户颜色选择的信息。
返回值
如果用户单击对话框的“确定”


-------------------------------------------------------- KeyGTK3Win32ChooseFont ----
ChooseFont    ChooseFont函数创建一个字体公共对话框，使对话框能够为用户选择逻辑字体的属性。这些属性包括字体名称，样式（粗体，斜体或常规），点大小，效果（下划线，删除和文本颜色）以及脚本（或字符集）。
语法
参数
【lpcf】指向CHOOSEFONT结构的指针，其中包含用于初始化对话框的信息。当ChooseFont返回时，此结构包含有关用户字体选择的信息。
返回值
如果用户单击对话框的“确定”按钮


-------------------------------------------------------- KeyGTK3Win32Chord ----
和弦    弦函数绘制一个和弦（由椭圆和线段的交点界定的区域，称为“割线”）。通过使用当前笔并使用当前画笔来填充弦。BOOL Chord(HDC 【HDC】,//处理设备上下文INT 【nLeftRect】,//边界矩形左上角的x坐标INT 【nTopRect】,//边界矩形左上角的y坐标INT 【nRightRect】,//边界矩形右下角的x坐标INT 【nBottomRect】,//边界矩形右下角的y坐标INT 【nXRadial1】,//第一个径向端点的x坐标INT 【nYRadial1】,//第一个径向端点的y坐标INT 【nXRadial2】,//第二个径向端点的x坐标INT 【nYRadial2】//第二个径向端点的y坐标);
参数
【HDC】标识和弦出现的设备上下文。【nLeftRect】指定边界矩形左上角的x坐标。【nTopRect】指定边界矩形左上角的y坐标。【nRightRect】指定边界矩形右下角的x坐标。【n


-------------------------------------------------------- KeyGTK3Win32ClearCommBreak ----
ClearCommBreak    ClearCommBreak函数恢复指定通信设备的字符传输，并将传输线路置于非断开状态。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描


-------------------------------------------------------- KeyGTK3Win32ClearCommError ----
ClearCommError    ClearCommError函数检索有关通信错误的信息，并报告通信设备的当前状态。当发生通信错误时调用此函数，并清除设备的错误标志以启用其他输入和输出（I / O）操作。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【// pointer to variable to receive error codes】指向一个32位变量以填充指示错误


-------------------------------------------------------- KeyGTK3Win32ClearEventLog ----
ClearEventLog    ClearEventLog函数可清除指定的事件日志，并可选择将日志文件的当前副本保存到备份文件。
语法
参数
【hEventLog】标识要清除的事件日志。该句柄由OpenEventLog函数返回。【lpBackupFileName】指向以null结尾的字符串，指定将放置事件日志文件的当前副本的文件的


-------------------------------------------------------- KeyGTK3Win32ClientToScreen ----
ClientToScreen    ClientToScreen函数将指定点的客户端坐标转换为屏幕坐标。
语法
参数
【的hWnd】标识客户端区域用于转换的窗口。【LPPOINT】指向包含要转换的客户端坐标的POINT结构。如果函数成功，新屏幕坐标将被复制到此结构中。
返回值
如果函数成功，返回值不为零


-------------------------------------------------------- KeyGTK3Win32ClipCursor ----
ClipCursor    ClipCursor函数将光标限定在屏幕上的矩形区域。如果随后的光标位置（由SetCursorPos函数或鼠标设置）位于矩形外部，Windows将自动调整位置以将光标保持在矩形区域内。
语法
参数
【LPRC】指向包含限定矩形左上角和右下角的屏幕坐标的RECT结构。如果此参数为NULL，则光标可自由移动到屏幕上的任何位置。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为


-------------------------------------------------------- KeyGTK3Win32CloseClipboard ----
CloseClipboard    CloseClipboard函数关闭剪贴板。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
当窗口完成检查或更改剪贴板时，通过调用Clo


-------------------------------------------------------- KeyGTK3Win32CloseDesktop ----
CloseDesktop    CloseDesktop函数关闭桌面对象的打开句柄。桌面是包含在窗口站对象内的安全对象。桌面具有逻辑显示面，并包含窗口，菜单和挂钩。
语法
参数
【//分配给该线程的桌面的句柄】标识要关闭的桌面。该句柄由CreateDesktop和OpenDesktop函数返回。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获


-------------------------------------------------------- KeyGTK3Win32CloseEnhMetaFile ----
CloseEnhMetaFile    CloseEnhMetaFile函数关闭增强型图元文件设备上下文，并返回一个标识增强格式的图元文件的句柄。
语法
参数
【HDC】标识增强型图元文件设备上下文。
返回值
如果函数成功，则返回值是增强图元文件的句柄。如果函数失败，返回值为NULL。
描述
应用程序可以使用CloseEnhMetaFile


-------------------------------------------------------- KeyGTK3Win32CloseEventLog ----
CloseEventLog    CloseEventLog函数关闭指定的事件日志。
语法
参数
【hEventLog】标识要关闭的事件日志。该句柄由OpenEventLog函数返回。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLa


-------------------------------------------------------- KeyGTK3Win32CloseFigure ----
CloseFigure    CloseFigure函数关闭路径中的开放数字。
语法
参数
【HDC】标识图形将关闭的设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
CloseFigur


-------------------------------------------------------- KeyGTK3Win32CloseHandle ----
CloseHandle    CloseHandle函数关闭一个打开的对象句柄。
语法
参数
【hObject】标识一个打开的对象句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
CloseHan


-------------------------------------------------------- KeyGTK3Win32CloseMetaFile ----
CloseMetaFile    CloseMetaFile函数关闭元文件设备上下文并返回一个标识Windows格式的元文件的句柄。提供此函数以兼容早期版本的Microsoft Windows。基于Win32的应用程序应使用CloseEnhMetaFile函数。
语法
参数
【HDC】标识用于创建Windows格式的元文件的图元文件设备上下文。
返回值
如果函数成功，则返回值是Windows格式的图元文件的句柄。如果函数失败，返回值为NULL。
描述
W


-------------------------------------------------------- KeyGTK3Win32ClosePrinter ----
ClosePrinter    ClosePrinter函数关闭指定的打印机对象。
语法
参数
【hPrinter】处理打印机对象要关闭。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
当ClosePr


-------------------------------------------------------- KeyGTK3Win32CloseServiceHandle ----
CloseServiceHandle    CloseServiceHandle函数会关闭OpenSCManager函数返回的服务控制管理器数据库的句柄，或者关闭OpenService或CreateService函数返回的服务对象的句柄。
语法
参数
【hSCObject】标识要关闭的服务控制管理器数据库或服务对象。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.错误


-------------------------------------------------------- KeyGTK3Win32CloseWindow ----
CloseWindow    CloseWindow函数最小化（但不会破坏）指定的窗口。
语法
参数
【的hWnd】标识要最小化的窗口。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
通过将窗口缩小到图标的大


-------------------------------------------------------- KeyGTK3Win32CloseWindowStation ----
CloseWindowStation    CloseWindowStation函数关闭一个打开的窗口工位句柄。
语法
参数
【hWinSta】识别要关闭的窗口站。该句柄由CreateWindowStation和OpenWindowStation函数返回。
返回值
如果函数成功，返回值不为零。如果函数失败，返回


-------------------------------------------------------- KeyGTK3Win32ColorMatchToTarget ----
ColorMatchToTarget    ColorMatchToTarget函数可以启用或禁用指定设备上下文的预览。启用预览时，会显示指定设备上下文的后续输出中的颜色，因为它们将显示在目标设备上。这对于检查目标在图像中映射指定颜色的效果非常有用。要启用预览，必须为目标和预览设备上下文启用图像颜色匹配。
语法



-------------------------------------------------------- KeyGTK3Win32CombineRgn ----
CombineRgn    CombineRgn函数组合两个区域，并将结果存储在第三个区域。两个区域根据指定的模式组合。
语法
参数
【hrgnDesten】标识通过组合其他两个区域定义尺寸的新区域。（该地区必须在调用CombineRgn之前存在。）【hrgnSrc1】标识要组合的两个区域中的第一个。【hrgnSrc2】标


-------------------------------------------------------- KeyGTK3Win32CombineTransform ----
CombineTransform    CombineTransform函数将两个世界空间与页面空间转换相连接。
语法
参数
【lpxformResult】指向接收组合转换的XFORM结构。【lpxform1】指向XFORM结构的第一个转换。【lpxform2】指向XFORM结构的第二个转换。
返回值
如果函数


-------------------------------------------------------- KeyGTK3Win32CommandLineToArgvW ----
CommandLineToArgvW    CommandLineToArgvW函数解析一个宽字符的Unicode命令行字符串。它返回一个指向一组宽字符Unicode参数字符串和参数计数的指针，类似于标准C运行时ARGV和ARGC值。该函数提供了一种从Unicode命令行字符串获取Unicode集ARGV和ARGC值的方法。
语法
参数
【lpCmdLine】指向空终止的Unicode命令行字符串。应用程序通常会直接传递给GetCommandLineW的调用返回的值。【*pNumArgs】指向函数设置为解析参数计数的整数变量


-------------------------------------------------------- KeyGTK3Win32CommConfigDialog ----
CommConfigDialog    CommConfigDialog函数显示驱动程序提供的配置对话框。
语法
参数
【lpszName】指向以空字符结尾的字符串，指定应显示对话框的设备的名称。【的hWnd】标识拥有该对话框的窗口。该参数可以是任何有效的窗口句柄，如果对话框没有所有者，则该参数应为NULL。


-------------------------------------------------------- KeyGTK3Win32CommDlgExtendedError ----
CommDlgExtendedError    CommDlgExtendedError函数返回一个常见的对话框错误代码。此代码指示在执行以下常见对话框函数之一期间发生的最新错误：ChooseColorGetOpenFileNameChooseFontGetSaveFileNameFindTextPrintDlgReplaceTextPageSetupDlg
语法
参数
此函数无参数。
返回值
如果对公共对话框函数的最近调用成功，则返回值未定义。如果普通对话框函数返回FALSE，因为用户关闭或取消对话框，返回值为零。否则，返回值是非零的错误代码。有关详细


-------------------------------------------------------- KeyGTK3Win32CompareFileTime ----
CompareFileTime    CompareFileTime函数可比较两个64位文件时间。
语法
参数
【lpFileTime1】指向指定第一个64位文件时间的FILETIME结构。【lpFileTime2】指向FILETIME结构的第二个64位文件时间。
返回值
如果函数成功，则返回值为


-------------------------------------------------------- KeyGTK3Win32CompareString ----
CompareString    CompareString函数将使用由给定标识符指定的区域设置作为比较的基础来比较两个字符串。
语法
参数
【语言环境】指定用于比较的区域设置。此参数可以是以下预定义的区域设置标识符之一：值含义LOCALE_SYSTEM_DEFAULT系统的默认语言环境。LOCALE_USER_DEFAULT当前


-------------------------------------------------------- KeyGTK3Win32ConfigurePort ----
ConfigurePort    ConfigurePort函数显示指定服务器端口的端口配置对话框。
语法
参数
【PNAME】指向一个以null结尾的字符串，指定指定端口所在的服务器的名称。如果此参数为NULL，端口为本地端口。【的hWnd】标识端口配置对话框的父窗口。【pPortName】指向一个以


-------------------------------------------------------- KeyGTK3Win32ConnectNamedPipe ----
ConnectNamedPipe    ConnectNamedPipe函数使命名管道服务器进程能够等待客户端进程连接到命名管道的实例。客户端进程通过调用CreateFile或CallNamedPipe 函数进行连接。
语法
参数
【hNamedPipe】标识命名管道实例的服务器端。该句柄由CreateNamedPipe函数返回。【lpOverlapped的】指向OVERLAPPED结构。
返回值
如果函数成功，返


-------------------------------------------------------- KeyGTK3Win32ConnectToPrinterDlg ----
ConnectToPrinterDlg    ConnectToPrinterDlg函数显示一个对话框，让用户浏览和连接到网络上的打印机。如果用户选择打印机，该函数将尝试创建一个连接;如果服务器上没有安装合适的驱动程序，则可以向用户提供在本地创建打印机的选项。
语法
参数
【HWND】指定对话框的父窗口。【旗】此参数保留供将来使用。将其设置为零。
返回值
如果函数成功并且用户选择打印机，则返回值是所选打印机的句柄。如果函数失败，或者用户在不选择打印机的情况


-------------------------------------------------------- KeyGTK3Win32ContinueDebugEvent ----
ContinueDebugEvent    ContinueDebugEvent函数使调试器能够继续先前报告调试事件的线程。
语法
参数
【dwProcessId】标识要继续的过程。【dwThreadId】标识要继续的线程。进程标识符和线程标识符的组合必须标识先前已报告调试事件的线程。【dwContinueStatus】指定如


-------------------------------------------------------- KeyGTK3Win32ControlService ----
ControlService    ControlService函数将控制代码发送到Win32服务。
语法
参数
【hService】标识服务。该句柄由OpenService或CreateService函数返回。此句柄所需的访问取决于所请求的【dwControl】代码。【dwControl】指定所请求的


-------------------------------------------------------- KeyGTK3Win32ConvertDefaultLocale ----
ConvertDefaultLocale    ConvertDefaultLocale函数将特殊的默认语言环境值转换为实际的语言环境标识符。
语法
参数
【语言环境】函数转换为实际区域设置标识符的特殊默认区域设置值。以下列表显示特殊的默认语言环境值：值描述LOCALE_SYSTEM_DEFAULT系统的默认语言环境。LOCALE_USER_D


-------------------------------------------------------- KeyGTK3Win32ConvertThreadToFiber ----
ConvertThreadToFiber    ConvertTheadToFiber函数将当前线程转换为光纤。您必须将线程转换为光纤，然后再安排其他光纤。LPVOID ConvertThreadToFiber（LPVOID 【lpParameter参数】//新光纤的光纤数据);
参数
【lpParameter参数】指定传递给光纤的单个变量。光纤可以使用GetFiberData 函数检索该值。
返回值
如果函数成功，返回值就是光纤的地址。如果函数失败，返回值为NULL。


-------------------------------------------------------- KeyGTK3Win32CopyAcceleratorTable ----
CopyAcceleratorTable    CopyAcceleratorTable函数复制指定的加速器表。该函数用于获取与加速器表句柄相对应的加速器表数据，或用于确定加速器表数据的大小。
语法
参数
【hAccelSrc】标识要复制的加速器表。【lpAccelDst】指向要复制加速器表信息的ACCEL结构数组。【cAccelEntries】指定要复制到【lpAccelDst】参数指向的缓


-------------------------------------------------------- KeyGTK3Win32CopyCursor ----
CopyCursor    CopyCursor函数复制光标。
语法
参数
【pcur】标识要复制的光标。
返回值
如果函数成功，则返回值是复制光标的句柄。如果函数失败，返回值为NULL。要获取扩展错误信息，请调用GetLastError.
描述
CopyC


-------------------------------------------------------- KeyGTK3Win32CopyEnhMetaFile ----
CopyEnhMetaFile    CopyEnhMetaFile函数将增强格式的元文件的内容复制到指定的文件。
语法
参数
【hemfSrc】标识源增强图元文件。【lpszFile】指向目的地文件的名称。如果此参数为NULL，则源图元文件将被复制到内存中。
返回值
如果函数成功，则返回值是增强图元文件副本的句


-------------------------------------------------------- KeyGTK3Win32CopyFile ----
CopyFile    CopyFile函数将现有文件复制到新文件。
语法
参数
【lpExistingFileName】指向以空字符结尾的字符串，指定现有文件的名称。【lpNewFileName】指向以空字符结尾的字符串，指定新文件的名称。【bFailIfExists】


-------------------------------------------------------- KeyGTK3Win32CopyFileEx ----
CopyFileEx    [New - Windows NT]CopyFileEx函数将现有文件复制到新文件。此函数保留扩展属性，OLE结构化存储，NTFS备用数据流和文件属性。现有文件的安全属性不会复制到新文件中。
语法
参数
【lpExistingFileName】指向以空字符结尾的字符串，指定现有文件的名称。【lpNewFileName】指向以空字符结尾的字符串，指定新文件的名称。【lpProgressRout


-------------------------------------------------------- KeyGTK3Win32CopyIcon ----
CopyIcon    CopyIcon函数将指定的图标从另一个模块复制到当前模块。
语法
参数
【惠康】标识要复制的图标。
返回值
如果函数成功，则返回值是复制图标的句柄。如果函数失败，返回值为NULL。要获取扩展错误信息，请调用GetLastError.
描述
CopyIco


-------------------------------------------------------- KeyGTK3Win32CopyImage ----
CopyImage    CopyImage函数创建一个新图像（图标，光标或位图），并将指定图像的属性复制到新图像。如果需要，该函数将该位延伸以适应新图像的所需大小。
语法
参数
【HINST】标识包含要复制的图像的模块的实例。【UTYPE】指定要复制的图像的类型。此参数可以是以下值之一：值含义IMAGE_BITMAP复制位图。IMAGE_CURSOR复制光标。IMA


-------------------------------------------------------- KeyGTK3Win32CopyLZFile ----
CopyLZFile      CopyLZFile函数已过时。它仅用于与16位版本的Windows兼容。对于基于Win32的应用程序，请使用LZCopy函数。


-------------------------------------------------------- KeyGTK3Win32CopyMemory ----
CopyMemory    CopyMemory函数将一个内存块从一个位置复制到另一个位置。
语法
参数
【目的地】指向复制块目标的起始地址。【资源】指向要复制的内存块的起始地址。【长度】指定要复制的内存块的大小（以字节为单位）。
返回值
该函数没有返回值。
描述
如果源和目标块重叠，则


-------------------------------------------------------- KeyGTK3Win32CopyMetaFile ----
CopyMetaFile    CopyMetaFile函数将Windows格式的元文件的内容复制到指定的文件。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用CopyEnhMetaFile函数。
语法
参数
【hmfSrc】标识源Windows格式的图元文件。【lpszFile】指向目的地文件的名称。如果此参数为NULL，则源图元文件将被复制到内存中。
返回值
如果函数成功，则返回值是Win


-------------------------------------------------------- KeyGTK3Win32CopyProgressRoutine ----
CopyProgressRoutine    [New - Windows NT]当CopyFileEx启动的部分复制操作完成时，将调用CopyProgressRoutine函数。此函数是一个应用程序定义的回调例程。
语法
参数
【TotalFileSize】文件的总大小（以字节为单位）。【TotalBytesTransferred】自复制操作开始以来，从源文件传输到目标文件的总字节数。【StreamSize】当前文


-------------------------------------------------------- KeyGTK3Win32CopyRect ----
CopyRect    CopyRect函数将一个矩形的坐标复制到另一个矩形。
语法
参数
【lprcDst】指向将接收源矩形的逻辑坐标的RECT结构。【lprcSrc】指向要复制坐标的RECT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误


-------------------------------------------------------- KeyGTK3Win32CopySid ----
CopySid    CopySid函数将安全标识符（SID）复制到缓冲区。
语法
参数
【nDestinationSidLength】指定接收SID副本的缓冲区的长度（以字节为单位）。【pDestinationSid】指向缓冲区，接收来源SID结构的副本。【pSourceSid


-------------------------------------------------------- KeyGTK3Win32CountClipboardFormats ----
CountClipboardFormats    CountClipboardFormats函数检索剪贴板上当前不同数据格式的数量。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是剪贴板上当前不同数据格式的数量。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32CPlApplet ----
CPlApplet  CPlApplet函数是一个库定义的回调函数，用作控制面板应用程序的入口点。
语法



-------------------------------------------------------- KeyGTK3Win32CreateAcceleratorTable ----
CreateAcceleratorTable    CreateAcceleratorTable函数创建一个加速表。
语法
参数
【Lpaklit】指向描述加速器表的ACCEL结构的数组。【cEntries】指定阵列中ACCEL个结构的数量。
返回值
如果函数成功，则返回值是创建的加速器表的句柄;否则为NULL。



-------------------------------------------------------- KeyGTK3Win32CreateBitmap ----
CreateBitmap    CreateBitmap函数创建一个具有指定宽度，高度和颜色格式（每个像素的颜色平面和位）的位图。
语法
参数
【nWidth】指定位图宽度（以像素为单位）。【nHeight参数】指定位图高度（以像素为单位）。【// XOR位掩码中的平面数】指定设备使用的色平面数。【cBitsPerPel】指定识别单


-------------------------------------------------------- KeyGTK3Win32CreateBitmapIndirect ----
CreateBitmapIndirect    CreateBitmapIndirect函数创建一个具有指定宽度，高度和颜色格式（每个像素的颜色平面和位）的位图。
语法
参数
【LPBM】指向包含位图信息的BITMAP结构。如果应用程序将bmWidth或bmHeight成员设置为零，CreateBitmapIndirect将返回1到1像素的单色位图的句柄。
返回


-------------------------------------------------------- KeyGTK3Win32CreateBrushIndirect ----
CreateBrushIndirect    CreateBrushIndirect函数创建一个具有指定样式，颜色和模式的逻辑画笔。
语法
参数
【lplb】指向包含有关画笔信息的LOGBRUSH结构。
返回值
如果函数成功，则返回值标识一个逻辑画笔。如果函数失败，返回值为NULL。
描述
刷子是Windows用于绘制填充形状


-------------------------------------------------------- KeyGTK3Win32CreateCaret ----
CreateCaret    CreateCaret函数为系统插入符创建一个新形状，并将插入符的所有权分配给指定的窗口。插入符号形状可以是线，块或位图。
语法
参数
【的hWnd】标识拥有插入符号的窗口。【HBITMAP】标识定义插入符号形状的位图。如果此参数为NULL，则插入符号是固定的。如果此参数为（HBITMAP）1，则插入符号为灰色。如果此参数是


-------------------------------------------------------- KeyGTK3Win32CreateColorSpace ----
CreateColorSpace    CreateColorSpace函数创建逻辑颜色空间。
语法
参数
【lpLogColorSpace】指向LOGCOLORSPACE结构。
返回值
如果函数成功，则返回值是标识逻辑颜色空间的句柄。如果函数失败，返回值为NULL。
描述
当您不再需要色


-------------------------------------------------------- KeyGTK3Win32CreateCompatibleBitmap ----
CreateCompatibleBitmap    CreateCompatibleBitmap函数创建与与指定设备上下文关联的设备兼容的位图。
语法
参数
【HDC】标识设备上下文。【nWidth】指定位图宽度（以像素为单位）。【nHeight参数】指定位图高度（以像素为单位）。
返回值
如果函数成功，则返回值是位图的句柄。如果函数失败，返


-------------------------------------------------------- KeyGTK3Win32CreateCompatibleDC ----
CreateCompatibleDC    CreateCompatibleDC函数创建与指定设备兼容的内存设备上下文（DC）。
语法
参数
【HDC】标识设备上下文。如果此句柄为NULL，则该函数将创建与应用程序当前屏幕兼容的内存设备上下文。
返回值
如果函数成功，则返回值是存储器设备上下文的句柄。如果函数失败，返回值为NU


-------------------------------------------------------- KeyGTK3Win32CreateConsoleScreenBuffer ----
CreateConsoleScreenBuffer    CreateConsoleScreenBuffer函数创建一个控制台屏幕缓冲区并返回一个句柄。
语法
参数
【dwDesiredAccess】指定对控制台屏幕缓冲区的所需访问。此参数可以是以下值之一或两者：值含义GENERIC_READ请求访问控制台屏幕缓冲区，使进程能够从缓冲区读取数据。GENE


-------------------------------------------------------- KeyGTK3Win32CreateCursor ----
CreateCursor    CreateCursor函数创建具有指定大小，位模式和热点的光标。
语法
参数
【HINST】标识创建光标的应用程序的当前实例。【xHotSpot】指定光标热点的水平位置。【yHotSpot】指定光标热点的垂直位置。【nWidth】指定光标的宽度（以像素为单位）。【nH


-------------------------------------------------------- KeyGTK3Win32CreateDC ----
CreateDC    CreateDC函数通过使用指定的名称为设备创建设备上下文（DC）。
语法
参数
【lpszDriver】为早期版本的Windows编写的应用程序使用此参数指定设备驱动程序的文件名（无扩展名）。Windows 95：在基于Win32的应用程序中，此参数将被忽略，并且应为N


-------------------------------------------------------- KeyGTK3Win32CreateDesktop ----
CreateDesktop    CreateDesktop函数在与调用进程相关联的窗口工作站上创建一个新的桌面。它返回一个可用于访问新桌面的句柄。调用进程必须具有关联的窗口工作站，由系统在进程创建时分配或由SetProcessWindowStation设置。桌面是包含在窗口站对象内的安全对象。桌面具有逻辑显示面，包含窗口，菜单和挂钩。
语法
参数
【lpszDesktop】指向一个以null结尾的字符串，指定要创建的桌面的名称。桌面名称不区分大小写，不得包含反斜杠字符（\\）。【lpszDevice】保留;桌面使用在引导时加载的默认显


-------------------------------------------------------- KeyGTK3Win32CreateDialog ----
CreateDialog    CreateDialog宏从对话框模板资源创建无模式对话框。CreateDialog宏使用CreateDialogParam函数。
语法
参数
【的hInstance】标识可执行文件包含对话框模板的模块实例。【lpTemplate】标识对话框模板。该参数是指向空值终止的字符串的指针，该字符串指定对话框模板的名称或指定对话框模板的资源


-------------------------------------------------------- KeyGTK3Win32CreateDialogIndirect ----
CreateDialogIndirect    CreateDialogIndirect宏从内存中的对话框模板创建无模式对话框。CreateDialogIndirect宏使用CreateDialogIndirectParam函数。
语法
参数
【的hInstance】标识创建对话框的模块的实例。【lpTemplate】指向包含CreateDialogIndirect用于创建对话框的模板的全局内存对象。对话框模板由描述该对话框的标题


-------------------------------------------------------- KeyGTK3Win32CreateDialogIndirectParam ----
CreateDialogIndirectParam    CreateDialogIndirectParam函数从内存中的对话框模板创建一个无模式对话框。在显示对话框之前，该函数将应用程序定义的值传递给对话框过程作为WM_INITDIALOG消息的【lParam的】参数。应用程序可以使用此值初始化对话框控件。
语法
参数
【的hInstance】标识将创建对话框的模块的实例。【lpTemplate】指向包含CreateDialogIndirectParam用于创建对话框的模板的全局内存对象。对话框模板由描述该


-------------------------------------------------------- KeyGTK3Win32CreateDialogParam ----
CreateDialogParam    CreateDialogParam函数从对话框模板资源创建无模式对话框。在显示对话框之前，该函数将应用程序定义的值传递给对话框过程作为WM_INITDIALOG消息的【lParam的】参数。应用程序可以使用此值初始化对话框控件。
语法
参数
【的hInstance】标识可执行文件包含对话框模板的模块实例。【lpTemplateName】标识对话框模板。该参数是指向空值终止的字符串的指针，该字符串指定对话框模板的名称或指定对话框模


-------------------------------------------------------- KeyGTK3Win32CreateDIBitmap ----
CreateDIBitmap    CreateDIBitmap函数从与设备无关的位图（DIB）创建与设备相关的位图（DDB），并可选地设置位图位。
语法
参数
HDC标识设备上下文。lpbmih指向BITMAPINFOHEADER结构。如果fdwInit是CBM_INIT，则该函数使用BITMAPINFOHEADER结构来获取所需的位图宽度和高度以


-------------------------------------------------------- KeyGTK3Win32CreateDIBPatternBrush ----
CreateDIBPatternBrush    CreateDIBPatternBrush函数创建一个逻辑画笔，该画笔具有指定的与设备无关的位图（DIB）指定的模式。随后可以将刷子选择到与支持光栅操作的设备相关联的任何设备上下文中。此函数仅适用于为早于3.0的Windows版本编写的应用程序的兼容性。对于基于Win32的应用程序，请使用CreateDIBPatternBrushPt函数。
语法
参数
【hglbDIBPacked】标识一个包含打包DIB的全局内存对象，该DIB由BITMAPINFO结构组成，紧随其后是定义位图像素的字节数组。Windows 95：不支持从位图大于8x8像素


-------------------------------------------------------- KeyGTK3Win32CreateDIBPatternBrushPt ----
CreateDIBPatternBrushPt    CreateDIBPatternBrushPt函数创建一个逻辑画笔，其具有由设备无关位图（DIB）指定的模式。
语法
参数
【lpPackedDIB】指向由BITMAPINFO结构组成的压缩DIB，紧跟着定义位图像素的字节数组。Windows 95：不支持从大小不超过8x8像素的位图或DIB创建画笔。如果指定了较


-------------------------------------------------------- KeyGTK3Win32CreateDIBSection ----
CreateDIBSection    CreateDIBSection函数创建一个与设备无关的位图（DIB），应用程序可以直接写入。该函数提供了一个指向位图位值位置的指针。您可以为函数用于创建位图的文件映射对象提供句柄，也可以让操作系统为位图分配内存。
语法
参数
【HDC】处理设备上下文。如果【iUsage】的值为DIB_PAL_COLORS，则该函数使用该设备上下文的逻辑调色板初始化与设备无关的位图的颜色。【PBMI】指向BITMAPINFO结构，


-------------------------------------------------------- KeyGTK3Win32CreateDirectory ----
CreateDirectory    CreateDirectory函数创建一个新目录。如果底层文件系统支持对文件和目录的安全性，则该函数将指定的安全描述符应用于新目录。请注意，CreateDirectory没有模板参数，而CreateDirectoryEx没有。
语法
参数
【lpPathName】指向一个以null结尾的字符串，指定要创建的目录的路径。对于MAX_PATH字符的路径，默认字符串大小限制。此限制与CreateDirectory函数如何解析路径有关


-------------------------------------------------------- KeyGTK3Win32CreateDirectoryEx ----
CreateDirectoryEx    CreateDirectoryEx函数创建一个具有指定路径的新目录，该目录保留指定模板目录的属性。如果底层文件系统支持对文件和目录的安全性，则该函数将指定的安全描述符应用于新目录。新目录保留指定模板目录的其他属性。请注意，CreateDirectoryEx有一个模板参数，而CreateDirectory没有。
语法
参数
【lpTemplateDirectory】指向一个以null结尾的字符串，指定创建新目录时用作模板的目录的路径。【lpNewDirectory】指向一个以null结尾的字符串，指定要创建的目


-------------------------------------------------------- KeyGTK3Win32CreateDiscardableBitmap ----
CreateDiscardableBitmap    CreateDiscardableBitmap函数创建与指定设备兼容的可丢弃位图。位图具有与像素相同的像素格式和与设备相同的调色板。应用程序可以选择该位图作为与指定设备兼容的存储设备的当前位图。
语法
参数
【HDC】标识设备上下文。【nWidth】指定位图的宽度（以位为单位）。【nHeight参数】指定位图的高度（以位为单位）。
返回值
如果函数成功，则返回值是位图的句柄。如果函数失败，返


-------------------------------------------------------- KeyGTK3Win32CreateEllipticRgn ----
CreateEllipticRgn    CreateEllipticRgn函数创建一个椭圆形区域。
语法
参数
【nLeftRect】指定椭圆的边界矩形左上角的x坐标。【nTopRect】指定椭圆的边界矩形左上角的y坐标。【nRightRect】指定椭圆边界矩形右下角的x坐标。【nBottomRect


-------------------------------------------------------- KeyGTK3Win32CreateEllipticRgnIndirect ----
CreateEllipticRgnIndirect    CreateEllipticRgnIndirect函数创建一个椭圆形区域。
语法
参数
【LPRC】指向RECT结构，其中包含椭圆的边界矩形的左上角和右下角的坐标。
返回值
如果函数成功，则返回值是该区域的句柄。如果函数失败，返回值为NULL。
描述
边界矩形定义区域的


-------------------------------------------------------- KeyGTK3Win32CreateEnhMetaFile ----
CreateEnhMetaFile    CreateEnhMetaFile函数为增强格式的图元文件创建一个设备上下文。该设备上下文可用于存储与设备无关的图片。
语法
参数
【hdcRef】标识增强型图元文件的参考设备。【lpFileName的对象】指向要创建的增强型图元文件的文件名。如果此参数为NULL，则增强型图元文件是基于内存的，并且使用DeleteEnh


-------------------------------------------------------- KeyGTK3Win32CreateEvent ----
CreateEvent    CreateEvent函数创建一个命名或未命名的事件对象。
语法
参数
【lpEventAttributes】指向SECURITY_ATTRIBUTES结构的指针，用于确定返回的句柄是否可由子进程继承。如果【lpEventAttributes】为NULL，则无法


-------------------------------------------------------- KeyGTK3Win32CreateFiber ----
CreateFiber    CreateFiber函数分配光纤对象，为其分配堆栈，并将其设置为以指定的起始地址（通常为光纤函数）开始执行。此函数不计划光纤。
语法
参数
【dwStackSize】指定新光纤的堆栈大小（以字节为单位）。如果指定为零，则堆栈大小默认为与主线程大小相同的大小。如果无法提交【dwStackSize】字节，则该函数将失败。请注意，如果


-------------------------------------------------------- KeyGTK3Win32CreateFile ----
CreateFile    CreateFile函数创建或打开以下对象并返回可用于访问对象的句柄：*文件*管道*邮筒*通讯资源*磁盘设备（仅限Windows NT）*游戏机*目录（仅打开）
语法
参数
【lpFileName】指向一个以null结尾的字符串，指定要创建或打开的对象（文件，管道，邮槽，通信资源，磁盘设备，控制台或目录）的名称。如果* 【lpFileName】是路径，则默认字符


-------------------------------------------------------- KeyGTK3Win32CreateFileMapping ----
CreateFileMapping    CreateFileMapping函数为指定的文件创建一个命名或未命名的文件映射对象。
语法
参数
【HFILE】标识要从中创建映射对象的文件。该文件必须以与【//访问类型保护】参数指定的保护标志兼容的访问模式打开。建议尽管不需要，您打算映射的文件被打开以进行独占访问。如果【HFILE】为


-------------------------------------------------------- KeyGTK3Win32CreateFont ----
CreateFont    CreateFont函数创建具有特定特征的逻辑字体。随后可以选择逻辑字体作为任何设备的字体。
语法
参数
【nHeight参数】指定字体的字符单元格或字符的逻辑单位的高度。字符高度值（也称为高度）是字符单元格高度值减去内部前导值。字体映射器以下列方式解释【nHeight参数】中指定的值：值含义>


-------------------------------------------------------- KeyGTK3Win32CreateFontIndirect ----
CreateFontIndirect    CreateFontIndirect函数创建具有指定结构中指定的特征的逻辑字体。该字体随后可以被选择为任何设备上下文的当前字体。
语法
参数
【lplf】指向定义逻辑字体特征的LOGFONT结构。
返回值
如果函数成功，则返回值是逻辑字体的句柄。如果函数失败，返回值为NULL。
描述
CreateFontIndirect函


-------------------------------------------------------- KeyGTK3Win32CreateHalftonePalette ----
CreateHalftonePalette    CreateHalftonePalette函数为指定的设备上下文创建一个半色调调色板。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值标识一个逻辑半色调调色板。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
当设备上下文


-------------------------------------------------------- KeyGTK3Win32CreateHatchBrush ----
CreateHatchBrush    CreateHatchBrush函数创建一个具有指定阴影图案和颜色的逻辑画笔。
语法
参数
【fnStyle】指定刷子的样式.此参数可以是以下值之一：值含义HS_BDIAGONAL从左到右孵化45度HS_CROSS水平和垂直十字线HS_DIAGCROSS45度交叉阴影HS_FDIA


-------------------------------------------------------- KeyGTK3Win32CreateIC ----
CreateIC    CreateIC函数创建指定设备的信息上下文。信息上下文提供了一种获取有关设备的信息而不创建设备上下文的快速方式。
语法
参数
【lpszDriver】指向指定设备驱动程序名称（例如“Epson”）的以null结尾的字符串。【lpszDevice】指向一个空值终止的字符串，指定正在使用的特定输出设备的名称，如Prin


-------------------------------------------------------- KeyGTK3Win32CreateIcon ----
CreateIcon    CreateIcon函数创建一个具有指定大小，颜色和位模式的图标。
语法
参数
【的hInstance】标识创建图标的模块的实例。【nWidth】指定图标的宽度（以像素为单位）。【nHeight参数】指定图标的高度（以像素为单位）。【// XOR位掩码中的平面数】指定图


-------------------------------------------------------- KeyGTK3Win32CreateIconFromResource ----
CreateIconFromResource    CreateIconFromResource函数从描述该图标的资源位创建一个图标或光标。
语法
参数
【presbits】指向包含图标或光标资源位的缓冲区。这些位通常通过调用LookupIconIdFromDirectory（在Windows 95中也可以调用LookupIconIdFrom


-------------------------------------------------------- KeyGTK3Win32CreateIconFromResourceEx ----
CreateIconFromResourceEx    [Now Supported on Windows NT]CreateIconFromResourceEx函数从描述该图标的资源位创建一个图标或光标。
语法
参数
【pbIconBits】指向包含图标或光标资源位的缓冲区。这些位通常通过调用LookupIconIdFromDirectoryEx和LoadResource函数加载。【cbIconBits】


-------------------------------------------------------- KeyGTK3Win32CreateIconIndirect ----
CreateIconIndirect    CreateIconIndirect函数从ICONINFO结构创建一个图标或光标。
语法
参数
【piconinfo】指向该函数用于创建图标或光标的ICONINFO结构。
返回值
如果函数成功，则返回值是创建的图标或游标的句柄。如果函数失败，返回值为NULL。要获取扩展错误信息，请


-------------------------------------------------------- KeyGTK3Win32CreateIoCompletionPort ----
CreateIoCompletionPort    CreateIoCompletionPort函数可以将打开的文件的实例与新创建的或现有的输入/输出完成端口相关联;或者可以创建一个输入/输出完成端口，而不需要将其与文件相关联。将打开的文件的实例与输入/输出完成端口关联使得应用程序接收到涉及该文件的异步输入/输出操作的完成的通知。
语法
参数
【FileHandle】处理到打开的重叠输入/输出完成的文件。当使用CreateFile函数获取这样的句柄时，必须指定FILE_FLAG_OVERLAPPED标志。一旦打开文件的实例与I /


-------------------------------------------------------- KeyGTK3Win32CreateMailslot ----
CreateMailslot    CreateMailslot函数创建一个具有指定名称的邮槽，并返回一个邮件服务器可以用来在邮槽上执行操作的句柄。邮槽是创建它的计算机的本地。如果具有指定名称的邮槽已存在，则会发生错误。
语法
参数
【lpName】指向指定邮槽的名称的以null结尾的字符串。该名称必须具有以下形式：\\\\。\\邮筒\\[【path】]【名称】【名称】字段必须是唯一的。该名称可能包含多个由反斜杠分隔的伪


-------------------------------------------------------- KeyGTK3Win32CreateMappedBitmap ----
CreateMappedBitmap    CreateMappedBitmap函数创建一个用于工具栏的位图。
语法
参数
【的hInstance】使用包含位图资源的可执行文件处理模块实例。【idBitmap】位图资源的资源标识符。【wFlags】位图标志。该参数可以为零或以下值：值含义CMB_MASKED使用位


-------------------------------------------------------- KeyGTK3Win32CreateMenu ----
CreateMenu    CreateMenu函数创建一个菜单。菜单最初为空，但可以使用InsertMenuItem，AppendMenu和InsertMenu函数填充菜单项。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是新建菜单的句柄。如果函数失败，返回值为NULL。
描述
与分配给窗口的菜单相关联的资源将自动释放。如果菜单未分配到窗口，应用程序必须在


-------------------------------------------------------- KeyGTK3Win32CreateMetaFile ----
CreateMetaFile    CreateMetaFile函数为Windows格式的图元文件创建一个设备上下文。提供此函数以兼容早期的16位版本的Microsoft Windows。基于Win32的应用程序应使用CreateEnhMetaFile函数。
语法
参数
【lpszFile】指向要创建的Windows格式图元文件的文件名。如果此参数为NULL，Windows格式的图元文件是基于内存的，并且通过使用DeleteMetaFile函数将其内容丢失。


-------------------------------------------------------- KeyGTK3Win32CreateMutex ----
CreateMutex    CreateMutex函数创建一个命名或未命名的互斥对象。
语法
参数
【lpMutexAttributes】指向SECURITY_ATTRIBUTES结构的指针，用于确定返回的句柄是否可以由子进程继承。如果【lpMutexAttributes】为NULL，则无


-------------------------------------------------------- KeyGTK3Win32CreateNamedPipe ----
CreateNamedPipe    CreateNamedPipe函数创建一个命名管道的实例，并返回一个后续管道操作的句柄。命名管道服务器进程使用此函数来创建特定命名管道的第一个实例，并建立其基本属性或创建现有命名管道的新实例。
语法
参数
【lpName】指向唯一标识管道的以null结尾的字符串。字符串必须具有以下格式：\\\\。\\管\\【\\管\\】该名称的【\\管\\】部分可以包括除反斜杠之外的任何字符，包括数字和特殊字


-------------------------------------------------------- KeyGTK3Win32CreatePalette ----
CreatePalette    CreatePalette函数创建一个逻辑调色板。
语法
参数
【lplgpl】指向LOGPALETTE结构，其中包含有关逻辑调色板中颜色的信息。
返回值
如果函数成功，则返回值是标识逻辑调色板的句柄。如果函数失败，返回值为NULL。要获取扩展错误信


-------------------------------------------------------- KeyGTK3Win32CreatePatternBrush ----
CreatePatternBrush    CreatePatternBrush函数创建具有指定位图模式的逻辑画笔。位图不能是由CreateDIBSection函数创建的DIB部分位图。
语法
参数
【骨形态发生蛋白】标识要用于创建逻辑画笔的位图。Windows 95：不支持从位图大于8x8像素的DIB创建画笔。如果指定了较大的位图，则仅使用位图的一部分。
返回值
如果函数成功，则返


-------------------------------------------------------- KeyGTK3Win32CreatePen ----
CreatePen    CreatePen函数创建一个具有指定样式，宽度和颜色的逻辑笔。笔可以随后被选择到设备上下文中，并用于绘制线条和曲线。
语法
参数
【fnPenStyle】指定钢笔风格。它可以是以下值之一：样式描述PS_SOLID笔是坚实的PS_DASH笔被打破了。仅当设备单位的笔宽为1或更小时，此样式才有效。PS_DOT笔点缀仅当设备


-------------------------------------------------------- KeyGTK3Win32CreatePenIndirect ----
CreatePenIndirect    CreatePenIndirect函数创建一个逻辑的化妆笔，它具有在结构中指定的样式，宽度和颜色。
语法
参数
【If the function succeeds, the return value is a handle that identifies a logical cosmetic pen.


-------------------------------------------------------- KeyGTK3Win32CreatePipe ----
CreatePipe    CreatePipe函数创建一个匿名管道，并返回到管道的读取和写入端的句柄。
语法
参数
【hReadPipe】指向接收管道读取句柄的变量。【hWritePipe】指向接收管道写入句柄的变量。【lpPipeAttributes】指向SECURITY_ATTRIBUTES结构的指针


-------------------------------------------------------- KeyGTK3Win32CreatePolygonRgn ----
CreatePolygonRgn    CreatePolygonRgn函数创建一个多边形区域。
语法
参数
【LPPT】指向定义多边形顶点的POINT结构数组。多边形被推定为封闭。每个顶点只能指定一次。【cPointsen】指定数组中的点数。【fnPolyFillMode】指定用于确定区域中哪些像


-------------------------------------------------------- KeyGTK3Win32CreatePolyPolygonRgn ----
CreatePolyPolygonRgn    CreatePolyPolygonRgn函数创建一个由一系列多边形组成的区域。多边形可以重叠。
语法
参数
【LPPT】指向定义多边形顶点的POINT结构数组。多边形连续指定。每个多边形被假定为封闭，每个顶点只被指定一次。【lpPolyCounts】指向一个整数数组，每个整数指定由【LPPT】指向


-------------------------------------------------------- KeyGTK3Win32CreatePopupMenu ----
CreatePopupMenu    CreatePopupMenu函数创建一个下拉菜单，子菜单或快捷菜单。菜单最初是空的。您可以使用InsertMenuItem函数插入或附加菜单项。您还可以使用InsertMenu函数插入菜单项，并使用AppendMenu函数附加菜单项。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是新建菜单的句柄。如果函数失败，返回值为NULL。
描述
应用程序可以将新菜单添加到现有菜单中，也可以通过调用TrackPopupMen


-------------------------------------------------------- KeyGTK3Win32CreatePrivateObjectSecurity ----
CreatePrivateObjectSecurity    CreatePrivateObjectSecurity函数为新的受保护服务器的对象分配并初始化一个自相关的安全描述符。当创建新的受保护的服务器对象时，将调用此函数。
语法
参数
【ParentDescriptor】指向正在创建新对象的父目录的安全描述符。如果没有父目录，则此参数可以为NULL。【CreatorDescriptor】指向由对象的创建者提供的安全描述符。


-------------------------------------------------------- KeyGTK3Win32CreateProcess ----
CreateProcess    CreateProcess函数创建一个新进程及其主线程。新进程执行指定的可执行文件。
语法
参数
【lpApplicationName】指向指定要执行的模块的以空值终止的字符串的指针。该字符串可以指定要执行的模块的完整路径和文件名。字符串可以指定部分名称。在这种情况下，该函数使用当前驱动


-------------------------------------------------------- KeyGTK3Win32CreateProcessAsUser ----
CreateProcessAsUser    CreateProcessAsUser函数创建一个新进程及其主线程。然后，新进程执行指定的可执行文件。CreateProcessAsUser函数类似于CreateProcess函数，但新进程在由【hToken】参数表示的用户的安全上下文中运行。默认情况下，新进程是非交互式的，即它运行在不可见的桌面上，无法接收用户输入。此外，默认情况下，新进程继承调用进程的环境，而不是与指定用户关联的环境。
语法
参数
【hToken】处理代表用户的主令牌。由令牌表示的用户必须具有对由【lpApplicationName】或【lpCommandLine】参数指定的应用程序的读取和执行访问权限。如果您的进程具


-------------------------------------------------------- KeyGTK3Win32CreatePropertySheetPage ----
CreatePropertySheetPage    CreatePropertySheetPage函数为属性表创建一个新页面。
语法
参数
【If the function succeeds, the return value is the handle to the new property sheet.】指向定义要包含在属性


-------------------------------------------------------- KeyGTK3Win32CreateRectRgn ----
CreateRectRgn    CreateRectRgn函数创建一个矩形区域。
语法
参数
【nLeftRect】指定区域左上角的x坐标。【nTopRect】指定区域左上角的y坐标。【nRightRect】指定区域右下角的x坐标。【nBottomRect】指定区域右下角的y坐标。



-------------------------------------------------------- KeyGTK3Win32CreateRectRgnIndirect ----
CreateRectRgnIndirect    CreateRectRgnIndirect函数创建一个矩形区域。
语法
参数
【LPRC】指向RECT结构，其中包含定义区域的矩形的左上角和右下角的坐标。
返回值
如果函数成功，则返回值是该区域的句柄。如果函数失败，返回值为NULL。
描述
该区域将不包括底部


-------------------------------------------------------- KeyGTK3Win32CreateRemoteThread ----
CreateRemoteThread    CreateRemoteThread函数创建一个在另一个进程的地址空间中运行的线程。
语法
参数
【hProcess】标识要创建线程的进程。Windows NT：句柄必须具有PROCESS_CREATE_THREAD访问权限。有关详细信息，请参阅过程对象.【lpThreadAttribu


-------------------------------------------------------- KeyGTK3Win32CreateRoundRectRgn ----
CreateRoundRectRgn    CreateRoundRectRgn函数创建一个带圆角的矩形区域。
语法
参数
【nLeftRect】指定区域左上角的x坐标。【nTopRect】指定区域左上角的y坐标。【nRightRect】指定区域右下角的x坐标。【nBottomRect】指定区域右下角的y坐标。【


-------------------------------------------------------- KeyGTK3Win32CreateScalableFontResource ----
CreateScalableFontResource    CreateScalableFontResource函数创建可缩放字体的字体资源文件。
语法
参数
【fdwHidden】指定字体是否为只读嵌入字体。此参数可以是以下值之一：值含义0字体具有读写权限。1该字体具有只读权限，并且应该隐藏在系统中的其他应用程序中。设置此标志时，该字体不会由En


-------------------------------------------------------- KeyGTK3Win32CreateSemaphore ----
CreateSemaphore    CreateSemaphore函数创建一个命名或未命名的信号量对象。
语法
参数
【lpSemaphoreAttributes】指向SECURITY_ATTRIBUTES结构的指针，用于确定返回的句柄是否可由子进程继承。如果【lpSemaphoreAttributes】为


-------------------------------------------------------- KeyGTK3Win32CreateService ----
CreateService    CreateService函数创建一个服务对象，并将其添加到指定的服务控制管理器数据库。
语法
参数
hSCManager标识服务控制管理器数据库。必须使用具有SC_MANAGER_CREATE_SERVICE访问权限的OpenSCManager打开该句柄。lpServiceName指向以空


-------------------------------------------------------- KeyGTK3Win32CreateSolidBrush ----
CreateSolidBrush    CreateSolidBrush函数创建一个具有指定纯色的逻辑画笔。
语法
参数
【crColor】指定画笔的颜色。
返回值
如果函数成功，则返回值标识一个逻辑画笔。如果函数失败，返回值为NULL。
描述
一个实心的画笔是Windows用来绘制填充形状内部的位图。


-------------------------------------------------------- KeyGTK3Win32CreateTapePartition ----
CreateTapePartition    CreateTapePartition函数重新格式化磁带。
语法
参数
【hDevice】标识要创建新分区的设备。该句柄是通过使用CreateFile函数创建的。【dwPartitionMethod】指定要创建的分区类型。要确定您的设备支持什么类型的分区，请参阅


-------------------------------------------------------- KeyGTK3Win32CreateThread ----
CreateThread    CreateThread函数创建一个在调用进程的地址空间内执行的线程。
语法
参数
【lpThreadAttributes】指向SECURITY_ATTRIBUTES结构的指针，用于确定返回的句柄是否可由子进程继承。如果【lpThreadAttributes】为NULL，则


-------------------------------------------------------- KeyGTK3Win32CreateToolbarEx ----
CreateToolbarEx    CreateToolbarEx函数创建一个工具栏窗口，并将指定的按钮添加到工具栏。
语法
参数
【HWND】处理工具栏的父窗口。【ws】工具栏的窗口样式。此参数必须至少指定WS_CHILD样式。它还可以包括工具栏和相关主题中讨论的风格的组合。【wID】控制工具栏的标识符。【dyButt


-------------------------------------------------------- KeyGTK3Win32CreateUpDownControl ----
CreateUpDownControl    CreateUpDownControl函数创建一个上下控制。
语法



-------------------------------------------------------- KeyGTK3Win32CreateWaitableTimer ----
CreateWaitableTimer    [New - Windows NT]CreateWaitableTimer函数创建一个“等待”定时器对象。
语法
参数
【lpTimerAttributes】指向SECURITY_ATTRIBUTES结构的指针，指定新定时器对象的安全描述符，并确定子进程是否可以继承返回的句柄。如果【lpTimerAttrib


-------------------------------------------------------- KeyGTK3Win32CreateWindow ----
CreateWindow    CreateWindow函数创建一个重叠的弹出窗口或子窗口。它指定窗口类，窗口标题，窗口样式和（可选）窗口的初始位置和大小。该函数还指定窗口的父项或所有者（如果有）以及窗口的菜单。
语法
参数
【lpClassName】指向一个空值终止的字符串或是一个整数原子。如果这个参数是一个原子，它必须是由先前调用GlobalAddAtom函数创建的全局原子。原子，小于0xC000的16位值必


-------------------------------------------------------- KeyGTK3Win32CreateWindowEx ----
CreateWindowEx    CreateWindowEx函数创建一个具有扩展样式的重叠，弹出窗口或子窗口;否则，此函数与CreateWindow函数相同。有关创建窗口和CreateWindowEx其他参数的完整说明的更多信息，请参阅CreateWindow.
语法
参数
【dwExStyle】指定窗口的扩展样式。此参数可以是以下值之一：样式含义WS_EX_ACCEPTFILES指定使用此样式创建的窗口接受拖放文件。WS_EX_APPWINDOW当窗口最小化时


-------------------------------------------------------- KeyGTK3Win32CreateWindowStation ----
CreateWindowStation    CreateWindowStation函数创建一个窗口站对象。它返回一个可用于访问窗口站的句柄。窗口站是包含一组全局原子，剪贴板和一组桌面对象的安全对象。
语法
参数
【lpwinstafy】指向指定要创建的窗口站的名称的以null结尾的字符串。窗口站名称不区分大小写，不能包含反斜杠字符（\\）。只允许管理员组的成员指定名称。如果【lpwinstafy】为


-------------------------------------------------------- KeyGTK3Win32CryptAcquireContext ----
CryptAcquireContext    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptAcquireContext函数用于获取特定CSP中特定密钥容器的句柄。这个返回的句柄然后可以用来调用所选的CSP。此函数执行两个操作。它首先尝试找到具有【dwProvType】和【pszProvider】参数中描述的特性的CSP。如果找到CSP，则该函数尝试在CSP中找到与【pszContainer】参数指定的名称匹配的密钥容器。此函数也可用于创建和销毁密钥容器，具体取决于【dwFlags中】参数的值。
语法
参数
【phProv】[out]函数将手柄复制到CSP的地址。【pszContainer】[in]密钥容器名称。这是一个零终止的字符串，用于标识CSP的密钥容器。此名称与用于存储密钥的方法无关。一


-------------------------------------------------------- KeyGTK3Win32CryptCreateHash ----
CryptCreateHash    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptCreateHash函数用于启动数据流的散列。它向调用者返回CSP散列对象的句柄。该句柄也可用于后续调用CryptHashData和CryptHashSessionKey，以便对数据流和会话密钥进行散列。
语法
参数
【pbBuffer】[in] CSP使用的句柄。应用程序使用CryptAcquireContext函数获取此句柄。【寒冷的】[in]要使用的散列算法的算法标识符。此参数的有效值将有所不同，具


-------------------------------------------------------- KeyGTK3Win32CryptDecrypt ----
CryptDecrypt    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptDecrypt函数用于解密先前通过CryptEncrypt函数加密的数据。
语法
参数
【的hKeyru-Latn】[in]用于解密的密钥的句柄。应用程序使用CryptGenKey或CryptImportKey函数获取该句柄。该键指定使用的解密算法。【马】[in]散列对象的句柄


-------------------------------------------------------- KeyGTK3Win32CryptDeriveKey ----
CryptDeriveKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptDeriveKey函数生成从基础数据导出的加密密钥。该函数保证从相同的基本数据生成的所有密钥将相同，只要使用相同的CSP和算法即可。基本数据可以是密码或任何其他用户数据。此函数与CryptGenKey相同，只是生成的会话密钥来自基本数据而不是随机的。另一个区别是CryptDeriveKey函数不能用于生成公钥/私钥对。会话密钥的句柄在【phKey】中返回。然后可以根据需要使用任何其他需要密钥句柄的CryptoAPI函数。
语法
参数
【pbBuffer】[in]应用程序的CSP的句柄。应用程序使用CryptAcquireContext函数获取此句柄。【寒冷的】[in]要生成密钥的算法的标识符。此参数的有效值将有所不同，具


-------------------------------------------------------- KeyGTK3Win32CryptDestroyHash ----
CryptDestroyHash    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptDestroyHash函数会破坏由【马】参数引用的散列对象。一旦哈希对象被破坏，它将不能再被使用，并且它的句柄从那时起是没有用的。当应用程序完成后，所有散列对象都应使用CryptDestroyHash函数进行销毁。
语法
参数
【马】[in]要销毁的哈希对象的句柄。
描述
当哈希对象被破坏时，许多CSP将擦除CSP中保存哈希对象的内存。然后CSP内存被释放。在CryptCreateHash和CryptDestr


-------------------------------------------------------- KeyGTK3Win32CryptDestroyKey ----
CryptDestroyKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptDestroyKey函数释放由【的hKeyru-Latn】参数引用的句柄。一旦钥匙把手被释放，它将变得无效，不能再次使用。如果句柄是指通过CryptImportKey导入到CSP的会话密钥或公钥，则此函数会销毁该密钥，并释放该密钥所占用的内存。许多CSP将在释放钥匙之前擦洗记忆。另一方面，如果句柄是指公钥/私钥对（从CryptGetUserKey获得），那么这个函数不会破坏基础密钥对。只有手柄被摧毁。
语法
参数
【的hKeyru-Latn】[in]要被销毁的钥匙的句柄。
描述
键占用操作系统内存空间和CSP内存空间。一些CSP将以非常有限的内存资源在硬件中实现。因此，使用CryptDestroy


-------------------------------------------------------- KeyGTK3Win32CryptEncrypt ----
CryptEncrypt    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptEncrypt函数用于加密数据。用于加密数据的算法由CSP模块保存的密钥指定，由【的hKeyru-Latn】参数引用。
语法
参数
【的hKeyru-Latn】[in]用于加密的密钥的句柄。应用程序通过使用CryptGenKey或CryptImportKey函数获取该句柄。此键指定使用的加密算法。【马】[in]散列对象的


-------------------------------------------------------- KeyGTK3Win32CryptExportKey ----
CryptExportKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptExportKey函数用于以安全的方式从加密服务提供商导出加密密钥。要导出的键的句柄被传递到函数中，该函数向调用者返回一个键blob。这个关键点可以通过非安全运输方式发送或存储在非安全存储位置。直到预期的收件人使用CryptImportKey函数之后，关键的blob才是无用的，然后将其导入到收件人的CSP中。
语法
参数
【的hKeyru-Latn】[in]要导出的键的句柄。【hExpKey】[in]属于目标用户的加密密钥的句柄。使用此密钥对创建的密钥块中的关键数据进行加密。这确保只有目标用户才能使用密钥bl


-------------------------------------------------------- KeyGTK3Win32CryptGenKey ----
CryptGenKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGenKey函数生成用于CSP模块的随机加密密钥。钥匙的句柄在【phKey】中返回。然后可以根据需要使用任何其他需要密钥句柄的CryptoAPI函数。调用此函数时需要调用应用程序来指定算法。由于该算法类型与密钥保持捆绑，所以当执行实际的加密操作时，应用程序不需要稍后指定算法。
语法
参数
【pbBuffer】[in]应用程序的CSP的句柄。应用程序使用CryptAcquireContext函数获取此句柄。【寒冷的】[in]要生成密钥的算法的标识符。此参数的有效值将有所不同，具


-------------------------------------------------------- KeyGTK3Win32CryptGenRandom ----
CryptGenRandom    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGenRandom函数用随机字节填充缓冲区。
语法
参数
【pbBuffer】[in]应用程序的CSP的句柄。应用程序使用CryptAcquireContext函数获取此句柄。【This function is often used to gene


-------------------------------------------------------- KeyGTK3Win32CryptGetHashParam ----
CryptGetHashParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGetHashParam函数允许应用程序检索管理散列对象操作的数据。也可以使用此函数检索实际的哈希值。
语法
参数
【马】[in]查询参数的哈希对象的句柄。【dwParam】[in]参数号。有关参数的列表，请参阅“备注”部分。【pbData】[out]参数数据缓冲区。该函数将指定的参数数据复制到此缓冲区。


-------------------------------------------------------- KeyGTK3Win32CryptGetKeyParam ----
CryptGetKeyParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGetKeyParam函数允许应用程序检索管理键操作的数据。请注意，本函数或任何其他函数无法获得基本键控材料。
语法
参数
【的hKeyru-Latn】[in]查询参数的键的句柄。【dwParam】[in]参数号。有关参数的列表，请参阅“备注”部分。【pbData】[out]参数数据缓冲区。该函数将指定的参数数据


-------------------------------------------------------- KeyGTK3Win32CryptGetProvParam ----
CryptGetProvParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGetProvParam函数允许应用程序检索管理CSP操作的参数。
语法
参数
【pbBuffer】[in]查询参数的CSP的句柄。【dwParam】[in]参数号。有关参数的列表，请参阅“备注”部分。【pbData】[out]参数数据缓冲区。该函数将指定的参数数据复制


-------------------------------------------------------- KeyGTK3Win32CryptGetUserKey ----
CryptGetUserKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGetUserKey函数检索永久用户密钥对的句柄，例如用户的签名密钥对。
语法
参数
【pbBuffer】[in]应用程序的CSP的句柄。应用程序使用CryptAcquireContext函数获取此句柄。【dwKeySpec】[in]要检索的密钥的规范。以下密钥可从几乎所有的


-------------------------------------------------------- KeyGTK3Win32CryptHashData ----
CryptHashData    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptHashData函数用于计算数据流上的加密散列。此函数和CryptHashSessionKey可以多次调用，以计算长流或不连续流上的散列。在调用此函数之前，必须调用CryptCreateHash函数来获取哈希对象的句柄。
语法
参数
【马】[in]散列对象的句柄。应用程序使用CryptCreateHash函数获取此句柄。【pbData】[in]要散列的数据的地址。【dwDataLen】[in]要散列的数据的字节数。如果设


-------------------------------------------------------- KeyGTK3Win32CryptHashSessionKey ----
CryptHashSessionKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptHashSessionKey函数用于计算密钥对象上的密码散列。可以使用相同的散列句柄多次调用此函数来计算多个键上的散列。致电CryptHashSessionKey可以穿插到CryptHashData的电话。在调用此函数之前，必须调用CryptCreateHash函数来获取哈希对象的句柄。
语法
参数
【马】[in]散列对象的句柄。应用程序使用CryptCreateHash函数获取此句柄。【的hKeyru-Latn】[in]要哈希的关键对象的句柄。【dwFlags中】[in]标志值。此参数


-------------------------------------------------------- KeyGTK3Win32CryptImportKey ----
CryptImportKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptImportKey函数用于将密钥从密钥块传输到CSP。
语法
参数
【pbBuffer】[in]应用程序的CSP的句柄。应用程序使用CryptAcquireContext函数获取此句柄。【pbData】[in]包含键blob的缓冲区。该关键点是由CryptE


-------------------------------------------------------- KeyGTK3Win32CryptReleaseContext ----
CryptReleaseContext    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptReleaseContext函数用于释放CSP和密钥容器的句柄。当应用程序使用CSP完成时，应该执行此操作。调用此函数后，【pbBuffer】参数指定的CSP句柄将不再有效。密钥容器和任何密钥对都不会被此函数破坏。
语法
参数
【pbBuffer】[in]应用程序的CSP的句柄。这是使用CryptAcquireContext函数获取的应用程序的句柄。【dwFlags中】[in]标志值。此参数保留供将来使用，并且应始


-------------------------------------------------------- KeyGTK3Win32CryptSetHashParam ----
CryptSetHashParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]在理论上，CryptSetHashParam函数允许应用程序自定义散列对象的操作。目前，该函数只定义了一个参数。
语法
参数
【马】[in]要设置参数的哈希对象的句柄。【dwParam】[in]参数号。有关参数的列表，请参阅“备注”部分。【pbData】[in]参数数据缓冲区。在调用CryptSetHashPara


-------------------------------------------------------- KeyGTK3Win32CryptSetKeyParam ----
CryptSetKeyParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]通过CryptSetKeyParam函数，应用程序可以自定义按键操作的各个方面。通常，此函数用于设置对称密钥上的会话特定参数。请注意，此函数无法访问基本密钥材料。Microsoft RSA Base Provider在密钥交换或签名密钥上没有可设置的参数。然而，定制提供者可以定义可以在这些键上设置的参数。
语法
参数
【的hKeyru-Latn】[in]设置参数的键的句柄。【dwParam】[in]参数号。有关参数的列表，请参阅“备注”部分。【pbData】[in]参数数据缓冲区。在调用CryptSetK


-------------------------------------------------------- KeyGTK3Win32CryptSetProvider ----
CryptSetProvider    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptSetProvider函数用于指定当前用户默认的CSP。调用此函数后，此用户随后发出的任何调用CryptAcquireContext指定【dwProvType】提供程序类型，但不提供程序名称，将导致【pszProvName】提供程序被使用。
语法
参数
【pszProvName】[in]新的默认CSP的名称。这个CSP应该已经安装在电脑上了。【dwProvType】[in] 【pszProvName】参数指定的CSP的提供者类型。
描述



-------------------------------------------------------- KeyGTK3Win32CryptSetProvParam ----
CryptSetProvParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptSetProvParam函数允许应用程序自定义CSP的操作。
语法
参数
【pbBuffer】[in] CSP的句柄，用于设置参数。【dwParam】[in]要设置的参数号。当此参数设置为PP_CLIENT_HWND时，【pbData】缓冲区应包含一个DWORD值


-------------------------------------------------------- KeyGTK3Win32CryptSignHash ----
CryptSignHash    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptSignHash函数用于签署一条数据。因为所有的签名算法都是不对称的，因此非常慢，CryptoAPI不会直接对数据进行签名。相反，您必须先对数据进行散列，然后使用CryptSignHash对哈希值进行签名。
语法
参数
【马】[in]要签名的哈希对象的句柄。【dwKeySpec】[in]用于签署哈希的密钥对。可以指定以下键：* AT_KEYEXCHANGE __ Exchange私钥* AT_SIGNATU


-------------------------------------------------------- KeyGTK3Win32CryptVerifySignature ----
CryptVerifySignature    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptVerifySignature函数用于验证哈希对象的签名。在调用此函数之前，必须调用CryptCreateHash函数来获取哈希对象的句柄。然后使用CryptHashData和/或CryptHashSessionKey函数将数据和/或会话密钥添加到散列对象。一旦这个函数完成，可以使用【马】句柄调用的唯一哈希函数是CryptDestroyHash函数。
语法
参数
【马】[in]要验证的哈希对象的句柄。【pbSignature】[in]要验证的签名数据的地址。【dwSigLen】[in] 【pbSignature】签名数据中的字节数。【hPubKey】


-------------------------------------------------------- KeyGTK3Win32DdeAbandonTransaction ----
DdeAbandonTransaction    DdeAbandonTransaction函数放弃指定的异步事务并释放与事务相关联的所有资源。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获得的应用程序实例标识符。【hConv】标识交易发起的对话。如果此参数为0L，则所有事务都将被放弃（即【idTransactio


-------------------------------------------------------- KeyGTK3Win32DdeAccessData ----
DdeAccessData    DdeAccessData函数可以访问指定的动态数据交换（DDE）对象中的数据。当应用程序已完成访问对象中的数据时，必须调用DdeUnaccessData函数。
语法
参数
【HDATA】标识要访问的DDE对象。【pcbDataSize】指向接收由【HDATA】参数标识的DDE对象的大小（以字节为单位）的变量。如果此参数为NULL，则不返回大小信息。
返回值



-------------------------------------------------------- KeyGTK3Win32DdeAddData ----
DdeAddData    DdeAddData函数将数据添加到指定的动态数据交换（DDE）对象。应用程序可以从与对象开头的任何偏移开始添加数据。如果新数据与对象中已经存在的数据重叠，则新数据会覆盖发生重叠的字节中的旧数据。未写入的对象中的位置的内容未定义。
语法
参数
【HDATA】标识接收附加数据的DDE对象。【PSRC】指向包含要添加到DDE对象的数据的缓冲区。【cb】指定要添加到DDE对象的数据的长度（以字节为单位）。【cbOff】指定从DDE对象开


-------------------------------------------------------- KeyGTK3Win32DdeCallback ----
DdeCallback    DdeCallback函数是一个应用程序定义的回调函数，用于响应其他应用程序的动态数据交换管理库（DDEML）调用，处理发送到函数的动态数据交换（DDE）事务。
语法
参数
【UTYPE】指定当前事务的类型。此参数由事务类标志和事务类型标志的组合组成。下表描述了每个事务类，并提供了每个类中事务类型的列表。有关特定交易类型的信息，请参阅该类型的单个描述。类含义XC


-------------------------------------------------------- KeyGTK3Win32DdeClientTransaction ----
DdeClientTransaction    DdeClientTransaction函数开始客户端和服务器之间的数据事务。只有动态数据交换（DDE）客户端应用程序可以调用此函数，只有在与服务器建立对话之后，应用才可以使用它。
语法
参数
【的pData】指向客户端必须传递到服务器的数据的开头。可选地，应用程序可以指定传递给服务器的数据句柄（HDDEDATA），在这种情况下，【cbData】参数应设置为0xFFFFFFFF。仅


-------------------------------------------------------- KeyGTK3Win32DdeCmpStringHandles ----
DdeCmpStringHandles    DdeCmpStringHandles函数比较两个字符串句柄的值。字符串句柄的值与关联字符串的情况无关。
语法
参数
【hsz1plpl】标识第一个字符串。【hsz2plpl】标识第二个字符串。
返回值
返回值可以是以下值之一：值含义-1【hsz1plpl】的值为0或小于【hsz2plpl】的值。0【h


-------------------------------------------------------- KeyGTK3Win32DdeConnect ----
DdeConnect    DdeConnect函数与支持指定服务名称和主题名称对的服务器应用程序建立对话。如果存在多个这样的服务器，则系统仅选择一个。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获得的应用程序实例标识符。【hszService】标识指定要建立会话的服务器应用程序的服务名称的字符串。此句柄必须先前调用Dde


-------------------------------------------------------- KeyGTK3Win32DdeConnectList ----
DdeConnectList    DdeConnectList函数与支持指定服务名称和主题名称对的所有服务器应用程序建立对话。应用程序也可以使用此函数通过将函数传递给现有的会话句柄来获取会话句柄的列表。动态数据交换管理库从对话列表中删除任何终止对话的句柄。所产生的会话列表包含支持指定的服务名称和主题名称的所有当前建立的会话的句柄。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获得的应用程序实例标识符。【hszService】标识指定要建立会话的服务器应用程序的服务名称的字符串。如果此参数为0L，系统将


-------------------------------------------------------- KeyGTK3Win32DdeCreateDataHandle ----
DdeCreateDataHandle    DdeCreateDataHandle函数创建动态数据交换（DDE）对象，并使用指定缓冲区的数据填充对象。DDE应用程序在涉及将数据传递给合作伙伴应用程序的事务期间使用此函数。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获取的应用程序实例标识符。【PSRC】指向包含要复制到DDE对象的数据的缓冲区。如果此参数为NULL，则不会将数据复制到对象。【


-------------------------------------------------------- KeyGTK3Win32DdeCreateStringHandle ----
DdeCreateStringHandle    DdeCreateStringHandle函数创建一个句柄，用于标识【PES】参数指向的字符串。动态数据交换（DDE）客户端或服务器应用程序可以将字符串句柄作为参数传递给其他动态数据交换管理库（DDEML）函数。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获取的应用程序实例标识符。【PES】指向包含要为其创建句柄的以null结尾的字符串的缓冲区。此字符串最多可以包含255个字符。这


-------------------------------------------------------- KeyGTK3Win32DdeDisconnect ----
DdeDisconnect    DdeDisconnect函数终止由DdeConnect或DdeConnectList函数启动的对话，并使指定的会话句柄无效。
语法
参数
【hConv】识别要终止的活动对话。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。错误DdeGetLastError函数可用于获取错误代码，可能是以下值之一：DMLER


-------------------------------------------------------- KeyGTK3Win32DdeDisconnectList ----
DdeDisconnectList    DdeDisconnectList函数会销毁指定的会话列表，并终止与列表关联的所有会话。
语法
参数
【hConvList】标识会话列表。此句柄必须由先前调用DdeConnectList函数创建。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。错误DdeGetLastEr


-------------------------------------------------------- KeyGTK3Win32DdeEnableCallback ----
DdeEnableCallback    DdeEnableCallback函数启用或禁用特定会话或由呼叫应用程序当前建立的所有会话的交易。在禁用会话的事务后，操作系统将该会话的事务放置在与应用程序关联的事务队列中。该应用程序应尽快重新启用会话，以避免丢失排队的事务。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获得的应用程序实例标识符。【hConv】标识要启用或禁用的会话。如果此参数为NULL，该函数将影响所有对话。【WCMD】指定函数


-------------------------------------------------------- KeyGTK3Win32DdeFreeDataHandle ----
DdeFreeDataHandle    DdeFreeDataHandle函数释放动态数据交换（DDE）对象并删除与对象关联的数据句柄。
语法
参数
【HDATA】标识要释放的DDE对象。此句柄必须由先前调用DdeCreateDataHandle函数创建或由DdeClientTransaction函数返回。
返回值
如果函数成功，返回


-------------------------------------------------------- KeyGTK3Win32DdeFreeStringHandle ----
DdeFreeStringHandle    DdeFreeStringHandle函数释放调用应用程序中的字符串句柄。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获取的应用程序实例标识符。【帖子】标识要释放的字符串句柄。此句柄必须先前调用DdeCreateStringHandle函数创建。


-------------------------------------------------------- KeyGTK3Win32DdeGetData ----
DdeGetData    DdeGetData函数将数据从指定的动态数据交换（DDE）对象复制到指定的本地缓冲区。
语法
参数
【HDATA】标识包含要复制的数据的DDE对象。【pDst】指向接收数据的缓冲区。如果此参数为NULL，则DdeGetData函数返回要复制到缓冲区的数据量（以字节为单位）。【CBMAX】指


-------------------------------------------------------- KeyGTK3Win32DdeGetLastError ----
DdeGetLastError    DdeGetLastError函数返回由动态数据交换管理库（DDEML）函数失败设置的最新错误代码，并将错误代码重置为DMLERR_NO_ERROR。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获取的应用程序实例标识符。
返回值
如果函数成功，则返回值是最后一个错误代码。以下是可能的DDEML错误代码：值含义DMLE


-------------------------------------------------------- KeyGTK3Win32DdeImpersonateClient ----
DdeImpersonateClient    DdeImpersonateClient函数在DDE客户端会话中模拟动态数据交换（DDE）客户端应用程序。
语法
参数
【hConv】标识要模拟的DDE客户端对话。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
模拟是一个进程


-------------------------------------------------------- KeyGTK3Win32DdeInitialize ----
DdeInitialize    DdeInitialize函数使用动态数据交换管理库（DDEML）注册应用程序。调用任何其他DDEML函数之前，应用程序必须调用此函数。
语法
参数
【pidInst】指向应用程序实例标识符。初始化时，该参数应指向0。如果函数成功，则该参数指向应用程序的实例标识符。该值应该在需要它的所有其他DDEML函数中作为【idInst】参数传递。如


-------------------------------------------------------- KeyGTK3Win32DdeKeepStringHandle ----
DdeKeepStringHandle    DdeKeepStringHandle函数会增加与指定句柄关联的使用次数。此函数使应用程序可以将传递到应用程序的动态数据交换（DDE）回调函数的字符串句柄保存。否则，当回调函数返回时，传递给回调函数的字符串句柄被删除。此函数也应用于保留由DdeQueryConvInfo函数返回的CONVINFO结构引用的字符串句柄的副本。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获得的应用程序实例标识符。【帖子】标识要保存的字符串句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyGTK3Win32DdeNameService ----
DdeNameService    DdeNameService函数注册或注销动态数据交换（DDE）服务器支持的服务名称。此函数使系统向其他正在运行的动态数据交换管理库（DDEML）客户端应用程序发送XTYP_REGISTER或XTYP_UNREGISTER事务。服务器应用程序应该调用此函数来注册它支持的每个服务名称，并注销以前注册但不再支持的名称。服务器也应该调用此函数在终止前取消注册其服务名称。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获取的应用程序实例标识符。【hsz1plpl】标识指定服务器正在注册或取消注册的服务名称的字符串。注销所有服务名称的应用程序应将


-------------------------------------------------------- KeyGTK3Win32DdePostAdvise ----
DdePostAdvise    DdePostAdvise函数使系统向每个客户端的主叫（服务器）应用程序的动态数据交换（DDE）回调函数发送XTYP_ADVREQ事务，并在指定的主题和项目上使用一个主动的建议循环。每当与主题名称或项目名称对相关联的数据发生变化时，服务器应用程序都应调用此函数。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获取的应用程序实例标识符。【hszTopic】标识指定主题名称的字符串。要通过主动建议循环发送所有主题的通知，应用程序可以将此参


-------------------------------------------------------- KeyGTK3Win32DdeQueryConvInfo ----
DdeQueryConvInfo    DdeQueryConvInfo函数获取有关动态数据交换（DDE）交易以及交易发生的对话的信息。
语法
参数
【hConv】识别对话。【idTransaction】指定事务。对于异步事务，此参数应为DdeClientTransaction函数返回的事务标识符。对于同步事务，此参数应为QID_SYNC


-------------------------------------------------------- KeyGTK3Win32DdeQueryNextServer ----
DdeQueryNextServer    DdeQueryNextServer函数获取指定会话列表中的下一个会话句柄。
语法
参数
【hConvList】标识会话列表。此句柄必须由先前调用DdeConnectList函数创建。【hConvPrev】标识此函数以前返回的会话句柄。如果此参数为0L，该函数将返回列表中的第一个


-------------------------------------------------------- KeyGTK3Win32DdeQueryString ----
DdeQueryString    DdeQueryString函数将与字符串句柄关联的文本复制到缓冲区中。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获得的应用程序实例标识符。【帖子】标识要复制的字符串。此句柄必须由先前调用DdeCreateStringHandle函数创建。【


-------------------------------------------------------- KeyGTK3Win32DdeReconnect ----
DdeReconnect    DdeReconnect函数允许客户端动态数据交换管理库（DDEML）应用程序尝试重新建立与终止与客户端会话的服务的会话。当对话重新建立时，DDEML尝试重新建立任何预先存在的建议循环。
语法
参数
【hConv】确定要重新建立的对话。客户端必须先前调用DdeConnect函数或从XTYP_DISCONNECT事务获取会话句柄。
返回值
如果函数成功，则返回值是重新建立的会话的句柄。


-------------------------------------------------------- KeyGTK3Win32DdeSetQualityOfService ----
DdeSetQualityOfService    DdeSetQualityOfService函数指定原始DDE应用程序希望启动的未来DDE会话的服务质量。指定的服务质量适用于在这些设置到位时开始的任何对话。DDE对话的服务质量在谈话期间持续;在给定对话期间调用DdeSetQualityOfService函数不会影响对话的服务质量。
语法
参数
【hwndClient】标识指定客户端将要发送的WM_DDE_INITIATE消息来启动DDE会话的DDE客户端窗口。【pqosNew】指向SECURITY_QUALITY_OF_SERVI


-------------------------------------------------------- KeyGTK3Win32DdeSetUserHandle ----
DdeSetUserHandle    DdeSetUserHandle函数将应用程序定义的32位值与会话句柄或事务标识符相关联。这对于简化异步事务的处理非常有用。应用程序可以使用DdeQueryConvInfo函数来检索此值。
语法
参数
【hConv】识别对话。【id】指定与【房屋da】参数指定的值关联的事务标识符。应用程序应将此参数设置为QID_SYNC以将【房屋da】与由【hConv】参数标识的会话相关联。【房屋da】标


-------------------------------------------------------- KeyGTK3Win32DdeUnaccessData ----
DdeUnaccessData    DdeUnaccessData函数无法处理动态数据交换（DDE）对象。应用程序在完成访问对象后必须调用此函数。
语法
参数
【HDATA】标识DDE对象。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。错误DdeGetLastError函数可用于获取错误代码，可能是以下值之一：DMLERR_D


-------------------------------------------------------- KeyGTK3Win32DdeUninitialize ----
DdeUninitialize    所有DdeUninitialize函数可以释放与调用应用程序相关联的所有动态数据交换管理库（DDEML）资源。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获得的应用程序实例标识符。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
DdeUninitia


-------------------------------------------------------- KeyGTK3Win32DebugActiveProcess ----
DebugActiveProcess    DebugActiveProcess函数允许调试器附加到活动进程，然后进行调试。
语法
参数
【dwProcessId】指定要调试的进程的标识符。调试器可以调试对进程的访问，就像使用DEBUG_ONLY_THIS_PROCESS标志创建进程一样。
返回值
如果函数成功，返回值不为


-------------------------------------------------------- KeyGTK3Win32DebugBreak ----
DebugBreak    DebugBreak函数导致在当前进程中发生断点异常，以便调用线程可以发信号通知调试器并强制它采取一些措施。如果没有调试进程，则使用标准异常处理程序的搜索逻辑。在大多数情况下，这会导致调用进程由于未处理的断点异常而终止。
语法
参数
此函数无参数。
返回值
此函数不返回值。



-------------------------------------------------------- KeyGTK3Win32DebugProc ----
DebugProc    DebugProc挂接过程是一个应用程序定义或库定义的回调函数，Windows调用与任何其他类型的钩子关联的钩子过程之前调用。系统将有关要调用的钩子的信息传递给DebugProc挂钩过程，该过程检查信息并确定是否允许调用挂钩。
语法
参数
【NCODE】指定挂接过程是否处理消息。如果【NCODE】为HC_ACTION，则挂接过程必须处理该消息。如果【NCODE】小于零，挂钩过程必须将消息传递给CallNextHookEx函数，


-------------------------------------------------------- KeyGTK3Win32DefDlgProc ----
DefDlgProc    DefDlgProc函数对属于应用程序定义的对话框类的窗口过程执行默认消息处理。
语法
参数
【hDlg】标识对话框。【消息】指定消息号。【wParam中】指定附加的消息特定信息。【lParam的】指定附加的消息特定信息。
返回值
返回值指定消息处理的结果，并取决于发送的消息。



-------------------------------------------------------- KeyGTK3Win32DeferWindowPos ----
DeferWindowPos    DeferWindowPos函数更新指定窗口的指定多窗口位置结构。该函数然后将句柄返回到更新的结构。EndDeferWindowPos函数使用此结构中的信息同时更改多个窗口的位置和大小。BeginDeferWindowPos函数创建结构。
语法
参数
【hWinPosInfo】识别包含一个或多个窗口的大小和位置信息的多窗口位置结构。此结构由BeginDeferWindowPos或最近调用DeferWindowPos返回。【的hWnd】标识


-------------------------------------------------------- KeyGTK3Win32DefFrameProc ----
DefFrameProc    DefFrameProc函数为多文档界面（MDI）框架窗口的窗口过程不处理的任何窗口消息提供默认处理。窗口过程未显式处理的所有窗口消息必须传递给DefFrameProc函数，而不是DefWindowProc函数。
语法
参数
【的hWnd】标识MDI框架窗口。【hWndMDIClient】标识MDI客户端窗口。【uMsg】指定要处理的消息。【wParam中】指定附加的消息特定信息。【lParam的】指定附加的消息


-------------------------------------------------------- KeyGTK3Win32DefHookProc ----
DefHookProc       DefHookProc函数已过时。它仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用CallNextHookEx函数。


-------------------------------------------------------- KeyGTK3Win32DefineDosDevice ----
DefineDosDevice    DefineDosDevice函数允许应用程序定义，重新定义或删除MS-DOS设备名称。MS-DOS设备名称作为符号链接存储在32位版本的Windows中的对象名称空间中。将MS-DOS路径转换为32位版本的Windows中的相应路径的代码将使用这些符号链接映射MS-DOS设备和驱动器号。DefineDosDevice函数提供了一种基于Win32的应用程序可以修改用于实现MS-DOS设备名称空间的符号链接的机制。
语法
参数
【dwFlags中】指定DefineDosDevice函数的几个可控方面。可以使用以下一个或多个值：值含义DDD_RAW_TARGET_PATH如果指定了此值，该函数不会将【lpTarget


-------------------------------------------------------- KeyGTK3Win32DefineHandleTable ----
DefineHandleTable         DefineHandleTable函数已过时。它被提供为一个宏，以简化16位Windows应用程序的移植。在评估其参数后，它将扩展为TRUE。没有其他的效果。


-------------------------------------------------------- KeyGTK3Win32DefMDIChildProc ----
DefMDIChildProc    DefMDIChildProc函数为多文档界面（MDI）子窗口的窗口过程不处理的任何窗口消息提供默认处理。窗口过程未处理的窗口消息必须传递给DefMDIChildProc函数，而不是DefWindowProc函数。
语法
参数
【的hWnd】标识MDI子窗口。【uMsg】指定要处理的消息。【wParam中】指定附加的消息特定信息。【lParam的】指定附加的消息特定信息。
返回值
返回值指定消息处理的结果，并取


-------------------------------------------------------- KeyGTK3Win32DefScreenSaverProc ----
DefScreenSaverProc    DefScreenSaverProc函数为屏幕保护程序应用程序不处理的任何消息提供默认处理。
语法
参数
【的hWnd】标识屏幕保护程序窗口。【味精】指定要处理的消息。DefScreenSaverProc函数将响应影响屏幕保护程序操作的消息，如“备注”部分所述。如果屏幕保护程序应用程序必须对这些


-------------------------------------------------------- KeyGTK3Win32DefWindowProc ----
DefWindowProc    DefWindowProc函数调用默认窗口过程来为应用程序未处理的任何窗口消息提供默认处理。此函数可确保每个消息都被处理。使用窗口过程接收的相同参数调用DefWindowProc.
语法
参数
【的hWnd】标识接收消息的窗口过程。【消息】指定消息。【wParam中】指定附加消息信息。该参数的内容取决于【消息】参数的值。【lParam的】指定附加消息信息。该参数的内容取决于【消息】


-------------------------------------------------------- KeyGTK3Win32DeleteAce ----
DeleteAce    DeleteAce函数从ACL中删除ACE。ACE是一个访问控制条目。ACL是访问控制列表。
语法
参数
【ACL】指向ACL结构。由【dwAceIndex】参数指定的ACE将从此ACL中删除。【dwAceIndex】指定要删除的ACE。值为0对应于ACL中的第一个ACE，1对应于第二个ACE，


-------------------------------------------------------- KeyGTK3Win32DeleteAtom ----
DeleteAtom    DeleteAtom函数减少本地字符串原子的引用计数。如果原子的引用计数减少为零，DeleteAtom将从本地原子表中删除与原子关联的字符串。
语法
参数
【纳多马斯】标识要删除的原子和字符串。
返回值
如果函数成功，返回值为零。如果函数失败，则返回值为【纳多马斯】参数。要获取扩展错误信息，请调用GetLastError.
描述
字符串


-------------------------------------------------------- KeyGTK3Win32DeleteColorSpace ----
DeleteColorSpace    DeleteColorSpace函数删除指定的颜色空间，释放与其关联的所有内部资源。
语法



-------------------------------------------------------- KeyGTK3Win32DeleteCriticalSection ----
DeleteCriticalSection    DeleteCriticalSection函数释放由未知的关键部分对象使用的所有资源。
语法
参数
【lpCriticalSection】指向临界区对象。
返回值
此函数不返回值。
描述
删除关键的部分对象会释放对象使用的所有系统资源。删除后，无法在EnterCriticalSec


-------------------------------------------------------- KeyGTK3Win32DeleteDC ----
DeleteDC    DeleteDC函数删除指定的设备上下文（DC）。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
应用程序不得通过调用GetDC函数删除获取句柄的设备上下文。相反，它必须调用Rele


-------------------------------------------------------- KeyGTK3Win32DeleteEnhMetaFile ----
DeleteEnhMetaFile    DeleteEnhMetaFile函数删除增强格式的图元文件或增强格式的图元文件句柄。
语法
参数
【HEMF】识别增强的图元文件。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
如果【HEMF】参数识别存储在内存中的增强型图元文件，则DeleteEnhMe


-------------------------------------------------------- KeyGTK3Win32DeleteFiber ----
DeleteFiber    DeleteFiber函数删除现有光纤。
语法
参数
【//指向要删除的光纤的指针】指定要删除的光纤的地址。
返回值
此函数不返回值。
描述
DeleteFiber函数删除与光纤相关联的所有数据。该数据包括堆栈，寄存器的子集和光纤数据。


-------------------------------------------------------- KeyGTK3Win32DeleteFile ----
DeleteFile    DeleteFile函数删除现有文件。
语法
参数
【lpFileName】指向指定要删除的文件的以null结尾的字符串。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.


-------------------------------------------------------- KeyGTK3Win32DeleteForm ----
DeleteForm    DeleteForm函数从支持的表单列表中删除表单名称。
语法
参数
【hPrinter】表示要执行此函数的打开的打印机手柄。【pFormName】指向要删除的表单名称。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请


-------------------------------------------------------- KeyGTK3Win32DeleteMenu ----
DeleteMenu    DeleteMenu函数从指定的菜单中删除一个项目。如果菜单项打开菜单或子菜单，此函数会销毁菜单或子菜单的句柄，并释放菜单或子菜单使用的内存。
语法
参数
【HMENU】标识要更改的菜单。【uPositionbs】指定要删除的菜单项，由【uFlags】参数确定。【uFlags】指定如何解释【uPositionbs】参数。此参数必须是以下值之一：


-------------------------------------------------------- KeyGTK3Win32DeleteMetaFile ----
DeleteMetaFile    DeleteMetaFile函数删除Windows格式的图元文件或Windows格式的图元文件句柄。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用DeleteEnhMetaFile函数。
语法
参数
【HMF】标识Windows格式的图元文件。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
Windows格式的图元文件不支持新的曲线，路径和转换函数，例如P


-------------------------------------------------------- KeyGTK3Win32DeleteMonitor ----
DeleteMonitor    DeleteMonitor函数删除由AddMonitor函数添加的打印机监视器。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定要从中删除监视器的服务器的名称。如果此参数为NULL，则本地将删除打印机监视器。【pEnvironment】指向以空字符结尾的字符串，指定要从中删


-------------------------------------------------------- KeyGTK3Win32DeleteObject ----
DeleteObject    DeleteObject函数删除逻辑笔，画笔，字体，位图，区域或调色板，释放与对象相关联的所有系统资源。删除对象后，指定的句柄将不再有效。
语法
参数
【hObject】标识逻辑笔，画笔，字体，位图，区域或调色板。
返回值
如果函数成功，返回值不为零。如果指定的句柄无效或当前被选择到设备上下文中，则返回值为零。
描述
当它仍被选择到


-------------------------------------------------------- KeyGTK3Win32DeletePort ----
DeletePort    DeletePort函数显示一个对话框，允许用户删除端口名称。
语法
参数
【PNAME】指向零终止字符串的指针，指定应删除该端口的服务器的名称。如果此参数为NULL，则删除本地端口。【的hWnd】处理到端口删除对话框的父窗口。【pPortName】指向一个零终止的


-------------------------------------------------------- KeyGTK3Win32DeletePrinter ----
DeletePrinter    DeletePrinter函数删除指定的打印机对象。
语法
参数
【hPrinter】标识将被删除的打印机对象。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
打印机手柄【


-------------------------------------------------------- KeyGTK3Win32DeletePrinterConnection ----
DeletePrinterConnection    DeletePrinterConnection函数删除与通过呼叫AddPrinterConnection或ConnectToPrinterDlg建立的打印机的连接。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定要删除的打印机连接的名称。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.


-------------------------------------------------------- KeyGTK3Win32DeletePrinterData ----
DeletePrinterData    [New - Windows NT]DeletePrinterData函数删除打印机的指定配置数据。打印机的配置数据由一组命名和类型值组成。DeletePrinterData函数删除其值之一指定的值之一。
语法
参数
【hPrinter】处理要删除其配置数据的打印机。通过调用OpenPrinter函数获取此打印机句柄。【pValueName】指向要删除的配置数据值的以null结尾的名称。回报值如果函数成功


-------------------------------------------------------- KeyGTK3Win32DeletePrinterDriver ----
DeletePrinterDriver    DeletePrinterDriver函数从服务器支持的驱动程序的名称列表中删除指定的打印机驱动程序名称。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定要从中删除驱动程序的服务器的名称。如果此参数为NULL，则打印机驱动程序名称将在本地删除。【pEnvironment】指向以空字符结尾的字符串，指


-------------------------------------------------------- KeyGTK3Win32DeletePrintProcessor ----
DeletePrintProcessor    DeletePrintProcessor函数删除由AddPrintProcessor函数添加的打印机处理器。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定要从中移除处理器的服务器的名称。如果此参数为NULL，则打印机处理器在本地被删除。【pEnvironment】指向以空字符结尾的字符串，指定要从中


-------------------------------------------------------- KeyGTK3Win32DeletePrintProvidor ----
DeletePrintProvidor    DeletePrintProvidor函数删除由AddPrintProvidor函数添加的打印机提供商。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定要从中删除提供程序的服务器的名称。如果此参数为NULL，打印机提供程序将在本地删除。【pEnvironment】指向一个空值终止的字符串，指定要从


-------------------------------------------------------- KeyGTK3Win32DeleteService ----
DeleteService    DeleteService函数从服务控制管理器数据库中标记要删除的指定服务。
语法
参数
【hService】标识服务。该句柄由OpenService或CreateService函数返回，并且必须具有DELETE访问权限。
返回值
如果函数成功，返回值不为零。如果函数失败，返


-------------------------------------------------------- KeyGTK3Win32DeregisterEventSource ----
DeregisterEventSource    DeregisterEventSource函数关闭RegisterEventSource函数返回的句柄。
语法
参数
【hEventLog】标识由RegisterEventSource返回句柄的事件日志。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLa


-------------------------------------------------------- KeyGTK3Win32DestroyAcceleratorTable ----
DestroyAcceleratorTable    DestroyAcceleratorTable函数会销毁加速器表。在应用程序关闭之前，它必须使用此函数来销毁使用CreateAcceleratorTable函数创建的每个加速表。
语法
参数
【HACCEL】标识要销毁的加速器表。此句柄必须是通过调用CreateAcceleratorTable函数创建的。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩


-------------------------------------------------------- KeyGTK3Win32DestroyCaret ----
DestroyCaret    DestroyCaret函数会消除插入符当前的形状，从窗口中释放插入符号，并从屏幕中删除插入符号。如果插入符号形状基于位图，DestroyCaret不会释放位图。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
DestroyCaret仅当当前任务中的窗口


-------------------------------------------------------- KeyGTK3Win32DestroyCursor ----
DestroyCursor    DestroyCursor函数会销毁由CreateCursor函数创建的游标，并释放光标所占用的任何内存。不要使用此函数来销毁没有使用CreateCursor函数创建的游标。
语法
参数
【HCURSORpt】标识要销毁的光标。光标不能被使用。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32DestroyIcon ----
DestroyIcon    DestroyIcon函数会销毁图标，并释放图标占用的任何内存。
语法
参数
【惠康】标识要销毁的图标。该图标不得使用。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
只需要为Crea


-------------------------------------------------------- KeyGTK3Win32DestroyMenu ----
DestroyMenu    DestroyMenu函数会销毁指定的菜单，并释放菜单所占用的任何内存。
语法
参数
【HMENU】标识要销毁的菜单。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
关闭前，应用程序必须使用D


-------------------------------------------------------- KeyGTK3Win32DestroyPrivateObjectSecurity ----
DestroyPrivateObjectSecurity    DestroyPrivateObjectSecurity函数删除受保护的服务器对象的安全描述符。必须通过调用CreatePrivateObjectSecurity函数创建此安全描述符。
语法
参数
【ObjectDescriptor】指向要删除的SECURITY_DESCRIPTOR结构的指针。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调


-------------------------------------------------------- KeyGTK3Win32DestroyPropertySheetPage ----
DestroyPropertySheetPage    DestroyPropertySheetPage函数会销毁属性表页面。对于尚未传递给PropertySheet函数的页面，应用程序必须调用此函数。
语法
参数
【hPSPage】处理到属性表页面删除。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyGTK3Win32DestroyWindow ----
DestroyWindow    DestroyWindow函数会破坏指定的窗口。该函数将WM_DESTROY和WM_NCDESTROY消息发送到窗口以停用它并从中删除键盘焦点。该函数还会破坏窗口的菜单，刷新线程消息队列，破坏定时器，删除剪贴板所有权，并打破剪贴板查看器链（如果窗口位于查看器链的顶部）。如果指定的窗口是父窗口或所有者窗口，则DestroyWindow会在销毁父窗口或所有者窗口时自动销毁相关联的子窗口或拥有的窗口。该函数首先销毁子窗口或拥有的窗口，然后破坏父窗口或所有者窗口。
语法
参数
【的hWnd】标识要销毁的窗口。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
线程不能使用Destroy


-------------------------------------------------------- KeyGTK3Win32DeviceCapabilities ----
DeviceCapabilities    DeviceCapabilities函数可检索打印机设备驱动程序的函数。
语法
参数
【pDevice】指向包含打印机名称的以null结尾的字符串。请注意，这是打印机的名称，而不是打印机驱动程序。【pPort】指向包含设备连接到的端口名称的空终止字符串的指针，例如“LPT1”


-------------------------------------------------------- KeyGTK3Win32DeviceIoControl ----
DeviceIoControl    DeviceIoControl函数将控制代码直接发送到指定的设备驱动程序，使相应的设备执行指定的操作。
语法
参数
【hDevice】处理要执行操作的设备。调用CreateFile函数获取设备句柄。【dwIoControlCode】指定操作的控制代码。该值标识要执行的具体操作和要执行操作的设备类型。定义了


-------------------------------------------------------- KeyGTK3Win32DialogBox ----
DialogBox    DialogBox宏从对话框模板资源创建一个模态对话框。DialogBox不会返回控制，直到指定的回调函数通过调用EndDialog函数终止模态对话框。DialogBox宏使用DialogBoxParam函数。
语法
参数
【的hInstance】标识可执行文件包含对话框模板的模块实例。【lpTemplate】标识对话框模板。该参数是指向空值终止的字符串的指针，该字符串指定对话框模板的名称或指定对话框模板的资源


-------------------------------------------------------- KeyGTK3Win32DialogBoxIndirect ----
DialogBoxIndirect    宏DialogBoxIndirect从内存中的对话框模板创建一个模态对话框。DialogBoxIndirect不会返回控制，直到指定的回调函数通过调用EndDialog函数终止模态对话框。DialogBoxIndirect宏使用DialogBoxIndirectParam函数。
语法
参数
【的hInstance】标识创建对话框的模块的实例。【lpTemplate】指向包含DialogBoxIndirect用于创建对话框的模板的全局内存对象。对话框模板由描述该对话框的标题组成，


-------------------------------------------------------- KeyGTK3Win32DialogBoxIndirectParam ----
DialogBoxIndirectParam    DialogBoxIndirectParam函数从内存中的对话框模板创建一个模态对话框。在显示对话框之前，该函数将应用程序定义的值传递给对话框过程作为WM_INITDIALOG消息的【lParam的】参数。应用程序可以使用此值初始化对话框控件。
语法



-------------------------------------------------------- KeyGTK3Win32DialogBoxParam ----
DialogBoxParam    DialogBoxParam函数从对话框模板资源创建一个模态对话框。在显示对话框之前，该函数将应用程序定义的值传递给对话框过程作为WM_INITDIALOG消息的【lParam的】参数。应用程序可以使用此值初始化对话框控件。
语法
参数
【的hInstance】标识可执行文件包含对话框模板的模块实例。【lpTemplateName】标识对话框模板。该参数是指向空值终止的字符串的指针，该字符串指定对话框模板的名称或指定对话框模


-------------------------------------------------------- KeyGTK3Win32DialogProc ----
DialogProc    DialogProc函数是一个应用程序定义的回调函数，用于处理发送到模态或无模式对话框的消息。
语法
参数
【hwndDlg】标识对话框。【uMsg】指定消息。【wParam中】指定附加的消息特定信息。【lParam的】指定附加的消息特定信息。
返回值
除了响应WM_INITDIALOG消息之


-------------------------------------------------------- KeyGTK3Win32DisableThreadLibraryCalls ----
DisableThreadLibraryCalls    DisableThreadLibraryCalls函数禁用由【hLibModule】指定的动态链接库（DLL）的DLL_THREAD_ATTACH和DLL_THREAD_DETACH通知。这可以减少一些应用程序的工作代码集的大小。
语法
参数
【hLibModule】指定要禁用DLL_THREAD_ATTACH和DLL_THREAD_DETACH通知的动态链接库模块。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为


-------------------------------------------------------- KeyGTK3Win32DisconnectNamedPipe ----
DisconnectNamedPipe    DisconnectNamedPipe函数将命名管道实例的服务器端与客户端进程断开连接。
语法
参数
【hNamedPipe】标识命名管道的一个实例。此句柄必须由CreateNamedPipe函数创建。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请


-------------------------------------------------------- KeyGTK3Win32DispatchMessage ----
DispatchMessage    DispatchMessage函数将消息分派给窗口过程。它通常用于调度由GetMessage函数检索到的消息。
语法
参数
【LPMSG】指向包含该消息的MSG结构。
返回值
返回值指定窗口过程返回的值。虽然其含义取决于要分派的消息，但通常忽略返回值。
描述
MSG结构必须包含有效的消息值。如果【LPMS


-------------------------------------------------------- KeyGTK3Win32DlgDirList ----
DlgDirList    DlgDirList函数使用与指定路径或文件名匹配的所有文件的名称填充指定的列表框。
语法
参数
【hDlg】标识包含列表框的对话框。【lpPathSpec】指向包含路径或文件名的以null结尾的字符串。DlgDirList修改此字符串，该字符串应足够长以包含修改。有关此参数的详细信息，


-------------------------------------------------------- KeyGTK3Win32DlgDirListComboBox ----
DlgDirListComboBox    DlgDirListComboBox函数使用目录列表填充指定的组合框。它使用与指定属性和路径字符串匹配的所有文件，驱动器和子目录的名称填充列表。
语法
参数
【hDlg】标识包含组合框的对话框。【lpPathSpec】指向以下形式的以null结尾的字符串：[【drive】:][\]][【directory】\[...]][【filename】]如


-------------------------------------------------------- KeyGTK3Win32DlgDirSelectComboBoxEx ----
DlgDirSelectComboBoxEx    DlgDirSelectComboBoxEx函数从使用DlgDirListComboBox函数填充的组合框中检索当前选择。选择被解释为驱动器盘符，文件或目录名称。
语法
参数
【hDlg】标识包含组合框的对话框。【lpString】指向要接收所选路径的缓冲区。【NCOUNT】指定【lpString】参数指向的缓冲区的长度（以字符为单位）。【nIDComboBox】


-------------------------------------------------------- KeyGTK3Win32DllEntryPoint ----
DllEntryPoint    DllEntryPoint函数是进入动态链接库（DLL）的可选方法。如果使用该函数，则当进程和线程被初始化和终止时，或在调用LoadLibrary和FreeLibrary函数时，系统会调用该函数。DllEntryPoint是库定义函数名称的占位符。实际名称必须在构建时指定。有关更多信息，请参阅开发工具附带的文档。
语法
参数
【hinstDLL】DLL的句柄。该值是DLL的基址。DLL的HINSTANCE与DLL的HMODULE相同，因此【hinstDLL】可用于后续调用GetModuleFileName函数和其


-------------------------------------------------------- KeyGTK3Win32DocumentProperties ----
DocumentProperties    DocumentProperties函数检索或修改打印机初始化信息或显示指定打印机的打印机配置对话框。
语法
参数
【的hWnd】标识打印机配置对话框的父窗口。【hPrinter】标识打印机对象。【pDeviceName】指向以null结尾的字符串，指定要显示打印机配置对话框的设备的名称。【pDevMod


-------------------------------------------------------- KeyGTK3Win32DosDateTimeToFileTime ----
DosDateTimeToFileTime    DosDateTimeToFileTime函数将MS-DOS日期和时间值转换为64位文件时间。
语法
参数
【wFatDate】指定MS-DOS日期。日期是一个包装的16位值，格式如下：位内容0-4当天（1-31）5-8Month (1 = January, 2 = February, and s


-------------------------------------------------------- KeyGTK3Win32DPtoLP ----
DPtoLP    DPtoLP函数将设备坐标转换为逻辑坐标。转换取决于设备上下文的映射模式，窗口和视口的起点和扩展区的设置以及世界变换。
语法
参数
【HDC】标识设备上下文。【lpPoints】指向POINT结构的数组。每个POINT结构中包含的x坐标和y坐标将被转换。【NCOUNT】指定数组中的点数。
返回值
如果函数成功，返回值


-------------------------------------------------------- KeyGTK3Win32DragAcceptFiles ----
DragAcceptFiles    DragAcceptFiles函数注册窗口是否接受删除的文件。
语法
参数
【的hWnd】标识窗口是否接受丢弃的文件。【fAccept】指定由【的hWnd】参数标识的窗口是否接受删除的文件。该值为TRUE以接受丢弃的文件;停止接受丢弃的文件是FALSE。
返回值



-------------------------------------------------------- KeyGTK3Win32DragDetect ----
DragDetect    [Now Supported on Windows NT]DragDetect函数捕获鼠标并跟踪其移动，直到用户释放左按钮，按ESC键或将鼠标移动到指定点周围的“拖动矩形”之外。拖动矩形的宽度和高度由GetSystemMetrics函数返回的SM_CXDRAG和SM_CYDRAG值指定。
语法
参数
【HWND】处理窗口接收鼠标输入。【pt】鼠标的初始位置，屏幕坐标。该函数通过使用该点确定拖动矩形的坐标。
返回值
如果用户将鼠标悬停在拖动矩形的外部，同时向左按住左按钮，则返回值不为零


-------------------------------------------------------- KeyGTK3Win32DragFinish ----
DragFinish    DragFinish函数释放Windows分配用于将文件名传送到应用程序的内存。
语法
参数
【HDROP】标识描述删除文件的结构。从WM_DROPFILES消息的【wParam中】参数检索该句柄。
返回值
此函数不返回值。



-------------------------------------------------------- KeyGTK3Win32DragQueryFile ----
DragQueryFile    DragQueryFile函数检索已删除文件的文件名。
语法
参数
【HDROP】标识包含已删除文件的文件名的结构。【iFile的en】指定要查询的文件的索引。如果【iFile的en】参数的值为0xFFFFFFFF，则DragQueryFile返回丢弃的文件


-------------------------------------------------------- KeyGTK3Win32DragQueryPoint ----
DragQueryPoint    DragQueryPoint函数在文件删除时检索鼠标指针的位置。
语法
参数
【HDROP】标识描述丢弃文件的结构。【LPPT】指向POINT结构，该函数在文件删除时填充鼠标指针的坐标。
返回值
如果在窗口的客户区中发生了丢弃，则返回值不为零。如果在窗口的客户端区


-------------------------------------------------------- KeyGTK3Win32DrawAnimatedRects ----
DrawAnimatedRects    [Now Supported on Windows NT]DrawAnimatedRects函数绘制一个线框矩形，并将其动画化，以指示图标的打开或窗口的最小化或最大化。
语法
参数
【HWND】处理矩形被剪切的窗口。如果此参数为NULL，则使用屏幕的工作区域。【拘留】该参数是保留的，必须为零。【lprcTo】指向SMALL_RECT结构，指定图标或最小化窗口的位置和大小


-------------------------------------------------------- KeyGTK3Win32DrawCaption ----
DrawCaption    [Now Supported on Windows NT]DrawCaption函数绘制一个窗口标题。
语法
参数
【HWND】处理窗口的窗口，为窗口标题提供文本和图标。【HDC】处理设备上下文。该函数将窗口标题绘制到此设备上下文中。【LPRC】指向RECT结构的指针，用于指定窗口标题的边界矩形。【uFl


-------------------------------------------------------- KeyGTK3Win32DrawEdge ----
DrawEdge    DrawEdge函数绘制一个或多个矩形边。
语法
参数
【HDC】标识设备上下文。【QRC】指向包含矩形的逻辑坐标的RECT结构。【边缘】指定要绘制的内边缘和外边缘的类型。此参数必须是一个内部边框标志和一个外部边框标志的组合。内部边界标志如下：值


-------------------------------------------------------- KeyGTK3Win32DrawEscape ----
DrawEscape    DrawEscape函数访问通过图形设备界面（GDI）无法直接使用的视频显示的绘图函数。
语法



-------------------------------------------------------- KeyGTK3Win32DrawFocusRect ----
DrawFocusRect    DrawFocusRect函数在用于指示矩形具有焦点的样式中绘制一个矩形。
语法
参数
【hDC】标识设备上下文。【LPRC】指向RECT结构，指定矩形的逻辑坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastErr


-------------------------------------------------------- KeyGTK3Win32DrawFrameControl ----
DrawFrameControl    DrawFrameControl函数绘制指定类型和样式的框架控件。
语法
参数
【HDC】标识要绘制控件的窗口的设备上下文。【LPRC】指向RECT结构，其中包含框架控制的边界矩形的逻辑坐标。【UTYPE】指定要绘制的框架控件的类型。此参数可以是以下值之一：值含义DFC


-------------------------------------------------------- KeyGTK3Win32DrawIcon ----
DrawIcon    DrawIcon函数在指定设备上下文的窗口的客户区中绘制一个图标。
语法
参数
【hDC】标识窗口的设备上下文。【X】指定图标左上角的逻辑x坐标。【Y】指定图标左上角的逻辑y坐标。【惠康】标识要绘制的图标。Windows NT：图标资源以前必须使用LoadIcon函数加


-------------------------------------------------------- KeyGTK3Win32DrawIconEx ----
DrawIconEx    DrawIconEx函数在指定的设备上下文的窗口的客户区中绘制一个图标或光标，执行指定的栅格操作，并按指定的方式拉伸或压缩图标或光标。
语法
参数
【HDC】标识窗口的设备上下文。【xLeft】指定图标或光标左上角的逻辑x坐标。【的y topsv】指定图标或光标左上角的逻辑y坐标。【惠康】标识要绘制的图标或光标。该参数可以识别动画光标。


-------------------------------------------------------- KeyGTK3Win32DrawInsert ----
DrawInsert    DrawInsert函数在指定的拖动列表框的父窗口中绘制插入图标。
语法



-------------------------------------------------------- KeyGTK3Win32DrawMenuBar ----
DrawMenuBar    DrawMenuBar函数重新绘制指定窗口的菜单栏。如果Windows创建窗口后菜单栏发生更改，则必须调用此函数来绘制更改的菜单栏。
语法
参数
【的hWnd】标识其菜单栏需要重新绘制的窗口。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32DrawState ----
DrawState    [Now Supported on Windows NT]DrawState函数显示图像并应用视觉效果来指示状态，例如禁用或默认状态。
语法
参数
【HDC】标识要绘制的设备上下文。【HBR】如果【fuFlags】参数指定的状态为DSS_MONO，则标识用于绘制图像的画笔。其他状态忽略此参数。【lpOutputFunc】指向用于呈现图像


-------------------------------------------------------- KeyGTK3Win32DrawStateProc ----
DrawStateProc    [Now Supported on Windows NT]DrawStateProc函数是一个应用程序定义的回调函数，它为DrawState函数呈现复杂的图像。
语法
参数
【HDC】标识要绘制的设备上下文。设备上下文是选择位图的存储设备上下文，其尺寸至少与【cx】和【cy】参数指定的尺寸一样大。【LDATA】指定应用程序传递给DrawState的图像信息。【W


-------------------------------------------------------- KeyGTK3Win32DrawStatusText ----
DrawStatusText    DrawStatusText函数以具有边框的状态窗口的样式绘制指定的文本。
语法
参数
【HDC】处理窗口的显示上下文。【LPRC】指向RECT结构的指针，其中包含在客户端坐标中绘制文本的矩形的位置。该函数将边框绘制在指定矩形边缘的内侧。【pszText】指向指定要显示的文本的


-------------------------------------------------------- KeyGTK3Win32DrawText ----
DrawText    DrawText函数在指定的矩形中绘制格式化的文本。它根据指定的方法格式化文本（展开选项卡，调整字符，断开线等）。
语法
参数
【hDC】标识设备上下文。【lpString】指向要绘制的字符串。如果【NCOUNT】参数为-1，则字符串必须为空终止。【NCOUNT】指定字符串中的字符数。如果【NCOUNT】为-1，则【


-------------------------------------------------------- KeyGTK3Win32DrawTextEx ----
DrawTextEx    [Now Supported on Windows NT]DrawTextEx函数在指定的矩形中绘制格式化的文本。
语法
参数
【HDC】标识要绘制的设备上下文。【lpchText】指向字符串绘制。如果【cchText】参数为-1，则该字符串必须为空终止。【cchText】指定由【lpchText】参数指定的字符串的


-------------------------------------------------------- KeyGTK3Win32DuplicateHandle ----
DuplicateHandle    DuplicateHandle函数复制对象句柄。
语法
参数
【hSourceProcessHandle】标识包含要复制的句柄的过程。手柄必须具有PROCESS_DUP_HANDLE访问权限。有关详细信息，请参阅过程对象.【hSourceHandle】


-------------------------------------------------------- KeyGTK3Win32DuplicateToken ----
DuplicateToken    DuplicateToken函数创建一个新的访问令牌，可以复制已存在的一个。
语法
参数
【ExistingTokenHandle】标识使用TOKEN_DUPLICATE访问权限打开的访问令牌。【ImpersonationLevel】指定一个提供新令牌的模拟级别的SECURITY


-------------------------------------------------------- KeyGTK3Win32DuplicateTokenEx ----
DuplicateTokenEx    [New - Windows NT]DuplicateTokenEx函数创建一个新的访问令牌，它与现有令牌重复。此函数可以创建主令牌或模拟令牌。
语法
参数
【hExistingToken】标识使用TOKEN_DUPLICATE访问权限打开的访问令牌。【dwDesiredAccess】指定新令牌的请求的访问权限。DuplicateTokenEx函


-------------------------------------------------------- KeyGTK3Win32EditWordBreakProc ----
EditWordBreakProc    一个EditWordBreakProc函数是一个应用程序定义的回调函数。类型为EDITWORDBREAKPROC的值是指向此类函数的指针。
语法
参数
【LPCH】指向编辑控件的文本。【ichCurrent】指定文本缓冲区中字符位置的索引，该文本标识函数应该开始检查分词的点。【CCHen】指定编辑控件文本中的字符数。【码】指定回调函数要执行


-------------------------------------------------------- KeyGTK3Win32EditWordBreakProcEx ----
EditWordBreakProcEx    [Now Supported on Windows NT]一个应用程序提供的回调函数，用于确定单词中断的字符索引，或指定文本中字符的字符类和分词标志。LONG EditWordBreakProcEx烧焦 【* pchText】, LONG 【cchText】, BYTE 【bCharSet】, INT 【码】 );
参数
【pchText】指向当前位置的文本。如果【码】指定向左移动，那么文本将在元素【pchText】 [-1]至【pchText】 [-【cchText】]和【pchText】 [0]中定义。对


-------------------------------------------------------- KeyGTK3Win32Ellipse ----
Ellipse    椭圆函数绘制一个椭圆。椭圆的中心是指定的边界矩形的中心。使用当前笔勾画椭圆，并使用当前画笔填充椭圆。BOOL Ellipse(HDC 【HDC】,//处理设备上下文INT 【nLeftRect】,// x-coord。边框的左上角INT 【nTopRect】,//的y坐标。边框的左上角INT 【nRightRect】,// x-coord。边框的右下角INT 【nBottomRect】//的y坐标。边框矩形的右下角);
参数
【HDC】标识设备上下文。【nLeftRect】指定边界矩形左上角的x坐标。【nTopRect】指定边界矩形左上角的y坐标。【nRightRect】指定边界矩形右下角的x坐标。【nBotto


-------------------------------------------------------- KeyGTK3Win32EmptyClipboard ----
EmptyClipboard    EmptyClipboard函数清空剪贴板，并释放剪贴板中数据的句柄。然后，该函数将剪贴板的所有权分配给当前打开剪贴板的窗口。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
在致电EmptyClipboard之前，应用


-------------------------------------------------------- KeyGTK3Win32EnableEUDC ----
EnableEUDC    [Now Supported on Windows NT]EnableEUDC函数启用或禁用最终用户定义的字符（EUDC）。启用EUDC允许文本输出函数从EUDC字体中检索有关最终用户定义字符的信息。禁用EUDC可防止输出函数访问这些字体。
语法
参数
【fEnableEUDC】动作标志可以为TRUE启用EUDC或FALSE以禁用它。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
应用程序在添加，修改或删除E


-------------------------------------------------------- KeyGTK3Win32EnableMenuItem ----
EnableMenuItem    EnableMenuItem函数启用，禁用或灰化指定的菜单项。
语法
参数
【HMENU】标识菜单。【uIDEnableItem】指定由【uEnable】参数确定的要启用，禁用或灰色的菜单项。此参数指定菜单栏，菜单或子菜单中的项目。【uEnable】指定控制【uID


-------------------------------------------------------- KeyGTK3Win32EnableScrollBar ----
EnableScrollBar    EnableScrollBar函数启用或禁用一个或两个滚动条箭头。
语法
参数
【的hWnd】根据【wSBflags】参数的值标识窗口或滚动条控件。【wSBflags】指定滚动条类型。此参数可以是以下值之一：值含义SB_BOTH启用或禁用与指定窗口相关联的水平和垂直滚动


-------------------------------------------------------- KeyGTK3Win32EnableWindow ----
EnableWindow    EnableWindow函数启用或禁用鼠标和键盘输入到指定的窗口或控件。当禁用输入时，窗口不会接收到诸如鼠标点击和按键之类的输入。当启用输入时，窗口接收所有输入。
语法
参数
【的hWnd】标识要启用或禁用的窗口。【bEnableid】指定是否启用该窗口。如果此参数为TRUE，则启用该窗口。如果参数为FALSE，窗口将被禁用。
返回值
如果窗口以前被禁用，则返


-------------------------------------------------------- KeyGTK3Win32EndDeferWindowPos ----
EndDeferWindowPos    EndDeferWindowPos函数在单个屏幕刷新周期中同时更新一个或多个窗口的位置和大小。
语法
参数
【hWinPosInfo】识别包含一个或多个窗口的大小和位置信息的多窗口位置结构。该内部结构由BeginDeferWindowPos函数或最近调用DeferWindowPos函数返回。
返


-------------------------------------------------------- KeyGTK3Win32EndDialog ----
EndDialog    EndDialog函数会销毁模态对话框，导致系统结束对话框的任何处理。
语法
参数
【hDlg】标识要销毁的对话框。【如果函数失败，返回值为-1。】从创建对话框的函数中指定要返回给应用程序的值。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述



-------------------------------------------------------- KeyGTK3Win32EndDoc ----
EndDoc    EndDoc函数结束打印作业。此函数替代ENDDOC打印机转义。
语法
参数
【HDC】标识打印作业的设备上下文。
返回值
如果函数成功，返回值大于零。如果函数失败，返回值小于或等于零。要获取扩展错误信息，请调用GetLastError.
描述
完成打印作业后


-------------------------------------------------------- KeyGTK3Win32EndDocPrinter ----
EndDocPrinter    EndDocPrinter函数结束指定打印机的打印作业。
语法
参数
【hPrinter】标识应结束打印作业的打印机。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
如果通过调


-------------------------------------------------------- KeyGTK3Win32EndPage ----
EndPage    EndPage函数通知设备应用程序已完成写入页面。此函数通常用于指示设备驱动程序前进到新页面。此函数将替换NEWFRAME打印机转义。
语法
参数
【HDC】标识打印作业的设备上下文。
返回值
如果函数成功，返回值大于零。如果函数失败，返回值小于或等于零。要获取扩展错误信息，请调用GetLastError.
描述
调用EndPa


-------------------------------------------------------- KeyGTK3Win32EndPagePrinter ----
EndPagePrinter    EndPagePrinter函数指示一页的结束和指定打印机的下一页的开头。
语法
参数
【hPrinter】标识页面将结束的打印机。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
打印机对象句柄


-------------------------------------------------------- KeyGTK3Win32EndPaint ----
EndPaint    EndPaint函数在指定的窗口中标记绘画结束。每个调用BeginPaint函数都需要此函数，但只有在绘制完成之后。
语法
参数
【的hWnd】标识已重新绘制的窗口。【Lppant】指向PAINTSTRUCT结构，其中包含BeginPaint检索到的绘画信息。
返回值
返回值始终为零。
描述
如果BeginPa


-------------------------------------------------------- KeyGTK3Win32EndPath ----
EndPath    EndPath函数关闭路径括号，并将括号中定义的路径选择到指定的设备上下文中。
语法
参数
【HDC】标识选择新路径的设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.GetLastError可能会返


-------------------------------------------------------- KeyGTK3Win32EndUpdateResource ----
EndUpdateResource    EndUpdateResource函数结束可执行文件中的资源更新。
语法
参数
【更新】指定更新句柄。该句柄由BeginUpdateResource函数返回。【// write flag】指定是否将资源更新写入可执行文件。如果此参数为TRUE，则不会对可执行文件进行任何


-------------------------------------------------------- KeyGTK3Win32EnhMetaFileProc ----
EnhMetaFileProc    EnhMetaFileProc函数是一个应用程序定义的回调函数，用于处理增强格式的图元文件记录。该函数由EnumEnhMetaFile函数调用。
语法
参数
【hDC】标识传递给EnumEnhMetaFile的设备上下文。【lpHTable】指向与图元文件中的图形对象（笔，画笔等）相关联的句柄表。第一个条目包含增强型元文件句柄。【lpEMFR】指


-------------------------------------------------------- KeyGTK3Win32EnumCalendarInfo ----
EnumCalendarInfo    EnumCalendarInfo函数枚举指定区域设置的日历信息。【CalType】参数指定要枚举的日历信息的类型。该函数将根据【日历】参数的值返回指定的日历信息，用于该区域设置或单个请求的日历的所有适用日历。
语法
参数
【lpCalInfoEnumProc】指向应用程序定义的回调函数。有关详细信息，请参阅EnumCalendarInfoProc回调函数。【语言环境】指定检索日历信息的区域设置。此参数可以是由


-------------------------------------------------------- KeyGTK3Win32EnumChildProc ----
EnumChildProc    EnumChildProc函数是一个应用程序定义的回调函数，它通过调用EnumChildWindows函数来接收子窗口句柄。
语法
参数
【HWND】标识EnumChildWindows中指定的父窗口的子窗口。【lParam的】指定EnumChildWindows中给出的应用程序定义值。
返回值
要继续枚举，回调函数必须返


-------------------------------------------------------- KeyGTK3Win32EnumChildWindows ----
EnumChildWindows    EnumChildWindows函数通过将每个子窗口的句柄传递给应用程序定义的回调函数来枚举属于指定父窗口的子窗口。EnumChildWindows继续，直到最后一个子窗口被枚举或回调函数返回FALSE。
语法
参数
【hWndParent】标识要窗口子窗口的父窗口。【lpEnumFunc】指向应用程序定义的回调函数。有关回调函数的更多信息，请参阅EnumChildProc回调函数。【lParam的】指定


-------------------------------------------------------- KeyGTK3Win32EnumClipboardFormats ----
EnumClipboardFormats    EnumClipboardFormats函数可以枚举剪贴板上当前可用的数据格式。剪贴板数据格式存储在有序列表中。要执行剪贴板数据格式的枚举，您可以对EnumClipboardFormats函数进行一系列调用。对于每个呼叫，【格式】参数指定可用的剪贴板格式，该函数返回下一个可用的剪贴板格式。
语法
参数
【格式】指定已知可用的剪贴板格式。要启动剪贴板格式的枚举，请将【格式】设置为零。当【格式】为零时，该函数将检索第一个可用的剪贴板格式。对于枚举期间的后续呼叫，将【格式】设置为上一次EnumC


-------------------------------------------------------- KeyGTK3Win32EnumCodePagesProc ----
EnumCodePagesProc    一个EnumCodePagesProc函数是一个应用程序定义的回调函数。作为调用EnumSystemCodePages 函数的结果，它被调用，并且接收到一个指向包含代码页标识符的字符串缓冲区的指针。
语法
参数
【lpCodePageString】指向包含空值终止的代码页标识符字符串的字符串缓冲区。
返回值
要继续枚举，回调函数应该返回TRUE。要停止枚举，回调函数应返回FALSE。
描述



-------------------------------------------------------- KeyGTK3Win32EnumDateFormats ----
EnumDateFormats    EnumDateFormats函数枚举可用于指定区域设置的长日期格式或短日期格式，包括任何备用日历的日期格式。【dwFlags中】参数的值确定是否列举长日期或短日期格式。该函数通过将日期格式字符串指针（每次一个）传递给指定的应用程序定义的回调函数来枚举日期格式。这将继续，直到找到最后的日期格式或回调函数返回FALSE。
语法
参数
【lpDateFmtEnumProc】指向应用程序定义的回调函数。EnumDateFormats函数通过重复调用此回调函数来枚举日期格式。有关详细信息，请参阅EnumDateFormatsP


-------------------------------------------------------- KeyGTK3Win32EnumDateFormatsProc ----
EnumDateFormatsProc    一个EnumDateFormatsProc函数是一个应用程序定义的回调函数。它被调用为调用EnumDateFormats函数的结果，并且接收到包含日期格式字符串的字符串缓冲区的指针。
语法
参数
【lpDateFormatString】指向包含以null结尾的日期格式字符串的字符串缓冲区。该字符串是长或短日期格式，具体取决于传递给EnumDateFormats的【dwFlags中】参


-------------------------------------------------------- KeyGTK3Win32EnumDependentServices ----
EnumDependentServices    EnumDependentServices函数枚举依赖于另一个指定服务的服务;也就是指定的服务必须在枚举服务运行之前运行。提供每个从属服务的名称和状态。
语法
参数
【hService】处理标识服务。该句柄由OpenService或CreateService函数返回，并且必须具有SERVICE_ENUMERATE_DEPENDENTS访问权限。【dwSe


-------------------------------------------------------- KeyGTK3Win32EnumDesktopProc ----
EnumDesktopProc    EnumDesktopProc函数是一个应用程序定义的回调函数，它通过调用EnumDesktops函数接收桌面名称。
语法
参数
【lpszDesktop】指向桌面的以null结尾的名称。【lParam的】指定EnumDesktops函数中给出的应用程序定义值。
返回值
要继续枚举，回调函数必须返回TRUE。要停止


-------------------------------------------------------- KeyGTK3Win32EnumDesktops ----
EnumDesktops    EnumDesktops函数枚举分配给呼叫进程的窗口台中的所有桌面。该函数通过将每个桌面的名称依次传递给应用程序定义的回调函数来实现。
语法
参数
【hwinsta】指定要列举桌面的窗口台的句柄。CreateWindowStation，GetProcessWindowStation和OpenWindowStation函数返回一个窗口工位


-------------------------------------------------------- KeyGTK3Win32EnumDesktopWindows ----
EnumDesktopWindows    EnumDesktopWindows函数通过将每个窗口的句柄依次传递给应用程序定义的回调函数来枚举桌面中的所有窗口。
语法
参数
【//分配给该线程的桌面的句柄】指定要将窗口枚举的桌面的句柄。CreateDesktop，OpenDesktop和GetThreadDesktop函数返回一个桌面句柄。【lpfn】指向应用程


-------------------------------------------------------- KeyGTK3Win32EnumDisplaySettings ----
EnumDisplaySettings    EnumDisplaySettings函数获取有关显示设备的图形模式之一的信息。您可以通过对此函数进行一系列调用来获取所有显示设备的图形模式的信息。
语法
参数
【lpszDeviceName】指向以空值终止的字符串，指定显示设备，其显示模式的函数将获取有关的信息。此参数可以为NULL。NULL值指定计算机上正在运行调用线程的当前显示设备。如果【lp


-------------------------------------------------------- KeyGTK3Win32EnumEnhMetaFile ----
EnumEnhMetaFile    EnumEnhMetaFile函数通过检索每个记录并将其传递给指定的回调函数来枚举增强格式的图元文件中的记录。应用程序提供的回调函数根据需要处理每个记录。枚举继续，直到最后一个记录被处理或当回调函数返回零时。
语法
参数
【HDC】标识设备上下文。该句柄被传递给回调函数。【HEMF】识别增强的图元文件。【lpEnhMetaFunc】指向应用程序提供的回调函数。有关详细信息，请参阅EnhMetaFileProc


-------------------------------------------------------- KeyGTK3Win32EnumFontFamExProc ----
EnumFontFamExProc    [Now Supported on Windows NT]EnumFontFamExProc函数是一个应用程序提供的回调函数，用于处理EnumFontFamiliesEx函数枚举的字体。系统为每个枚举的字体调用一次这个回调函数。
语法
参数
【lpelfe】指向包含有关字体逻辑属性的信息的ENUMLOGFONTEX结构。【lpntme】指向包含有关字体的物理属性的信息的结构。该函数对于TrueType字体使用NEWTEXTMET


-------------------------------------------------------- KeyGTK3Win32EnumFontFamilies ----
EnumFontFamilies    EnumFontFamilies函数枚举指定设备上可用的指定字体系列中的字体。此函数取代EnumFonts函数。
语法
参数
【HDC】标识设备上下文。【lpszFamily】指向指定所需字体的家族名称的以null结尾的字符串。如果【lpszFamily】为NULL，则EnumFontFamilies随机选择并枚举


-------------------------------------------------------- KeyGTK3Win32EnumFontFamiliesEx ----
EnumFontFamiliesEx    [Now Supported on Windows NT]EnumFontFamiliesEx函数枚举系统中符合LOGFONT结构指定的字体特征的所有字体。EnumFontFamiliesEx枚举基于字体名称，字符集或两者的字体。建议基于Win32的应用程序使用此函数而不是EnumFontFamilies列举字体。
语法
参数
【HDC】标识设备上下文。【lpLogfont】指向LOGFONT结构，其中包含有关要枚举的字体的信息。该函数检查这些成员：会员描述为lfcharset如果设置为DEFAULT_CHARSE


-------------------------------------------------------- KeyGTK3Win32EnumFontFamProc ----
EnumFontFamProc    EnumFontFamProc函数是一个应用程序定义的回调函数，用于检索描述可用字体的数据。
语法
参数
【lpelf】指向包含有关字体逻辑属性的信息的ENUMLOGFONT结构。此结构在本地定义。【lpntm】指向NEWTEXTMETRIC结构，其中包含有关字体的物理属性的信息，如果该字体是T


-------------------------------------------------------- KeyGTK3Win32EnumFonts ----
EnumFonts    EnumFonts函数列举指定设备上可用的字体。对于具有指定字体名称的每个字体，EnumFonts函数检索有关该字体的信息，并将其传递给应用程序定义的回调函数。该回调函数可以根据需要处理字体信息。枚举继续，直到没有更多的字体或回调函数返回零。提供此函数以兼容早期版本的Microsoft Windows。基于Win32的应用程序应使用EnumFontFamilies函数。
语法
参数
【HDC】标识设备上下文。【lpFaceName】指向一个以null结尾的字符串，指定所需字体的字体名称。如果【lpFaceName】为NULL，则EnumFonts随机选择并枚举每种可用字


-------------------------------------------------------- KeyGTK3Win32EnumFontsProc ----
EnumFontsProc    EnumFontsProc函数是一个应用程序定义的回调函数，用于处理来自EnumFonts函数的字体数据。
语法
参数
【lplf】指向LOGFONT结构，其中包含有关字体逻辑属性的信息。【lptm】指向包含有关字体的物理属性的信息的TEXTMETRIC结构。【dwType】指定字体的类型。此参数可以是以下值


-------------------------------------------------------- KeyGTK3Win32EnumForms ----
EnumForms    EnumForms函数枚举指定打印机支持的表单。
语法
参数
【hPrinter】标识应列举表单的打印机。【水平】指定【P成型】指向的结构的版本。此值必须为1。【P成型】指向FORM_INFO_1结构。【cbBuf】指定【P成型】指向的缓冲区的大小（以


-------------------------------------------------------- KeyGTK3Win32EnumICMProfiles ----
EnumICMProfiles    EnumICMProfiles函数枚举系统支持的不同颜色配置文件，用于指定的设备上下文。
语法
参数
【HDC】处理设备上下文。【lpICMEnumFunc】指向应用程序定义的回调函数。有关详细信息，请参阅EnumICMProfilesProc函数。【lParam的】应用程序提供的数据。将数


-------------------------------------------------------- KeyGTK3Win32EnumICMProfilesProc ----
EnumICMProfilesProc    EnumICMProfilesProc函数是一个应用程序定义的回调函数，用于处理来自EnumICMProfiles函数的颜色配置文件数据。
语法
参数
【lpszFilenamenl】指向指定颜色配置文件文件名称的以空值终止的字符串的指针。【lParam的】应用程序提供的数据由EnumICMProfiles函数传递。
返回值
返回一个正


-------------------------------------------------------- KeyGTK3Win32EnumJobs ----
EnumJobs    EnumJobs函数初始化JOB_INFO_1或JOB_INFO_2结构的数组，其中包含描述指定打印机的指定打印作业的数据。
语法
参数
【hPrinter】处理打印机对象，该打印机对象的函数将枚举打印作业。【FirstJob】指定要列举的第一个打印作业的打印队列中的从零开始的位置。例如，值为0表示枚举应从打印队列中的第一个打


-------------------------------------------------------- KeyGTK3Win32EnumLocalesProc ----
EnumLocalesProc    一个EnumLocalesProc函数是一个应用程序定义的回调函数。作为调用EnumSystemLocales 函数的结果，它被调用，并且接收到一个指向包含区域设置标识符的字符串缓冲区的指针。
语法
参数
【lpLocaleString】指向包含空值终止的区域设置标识符字符串的字符串缓冲区。请注意，【lpLocaleString】应为EnumLocalesProc的Unicode（W）版本的L


-------------------------------------------------------- KeyGTK3Win32EnumMetaFile ----
EnumMetaFile    EnumMetaFile函数通过检索每个记录并将其传递给指定的回调函数来枚举Windows格式的图元文件中的记录。应用程序提供的回调函数根据需要处理每个记录。枚举继续，直到最后一个记录被处理或当回调函数返回零时。提供此函数以兼容早期版本的Microsoft Windows。基于Win32的应用程序应使用EnumEnhMetaFile函数。
语法
参数
【HDC】标识设备上下文。该句柄被传递给回调函数。【HMF】标识Windows格式的图元文件。【lpMetaFunc】指向应用程序提供的回调函数。有关详细信息，请参阅EnumMetaFile


-------------------------------------------------------- KeyGTK3Win32EnumMetaFileProc ----
EnumMetaFileProc    EnumMetaFileProc函数是一个应用程序定义的回调函数，用于处理Windows格式的图元文件记录。该函数由EnumMetaFile函数调用。提供此函数以兼容早期版本的Microsoft Windows。基于Win32的应用程序应使用EnhMetaFileProc和EnumEnhMetaFile函数。
语法
参数
【hDC】标识传递给EnumMetaFile的设备上下文。【lpHTable】指向与图元文件中的图形对象（笔，画笔等）相关联的句柄表。【lpMFR】指向图元文件中的一个记录。不应修改此记录。


-------------------------------------------------------- KeyGTK3Win32EnumMonitors ----
EnumMonitors    EnumMonitors函数使用描述指定服务器的监视器的数据初始化结构数组。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定监视器所在的服务器的名称。如果此参数为NULL，则枚举本地监视器。【水平】指定【//指向监视器信息的指针。结构体】指向的结构的版本。【//指向监视


-------------------------------------------------------- KeyGTK3Win32EnumObjects ----
EnumObjects    EnumObjects函数枚举可用于指定设备上下文的笔或画笔。该函数为每个可用对象调用一次应用程序定义的回调函数，提供描述该对象的数据。EnumObjects继续调用回调函数，直到回调函数返回零或直到所有对象都被枚举为止。
语法
参数
【HDC】标识设备上下文。【nObjectType】指定对象类型。该参数可以是OBJ_BRUSH或OBJ_PEN。【lpObjectFunc】指向应用程序定义的回调函数的指针。有关回调函数的


-------------------------------------------------------- KeyGTK3Win32EnumObjectsProc ----
EnumObjectsProc    EnumObjectsProc函数是一个应用程序定义的回调函数，用于处理由EnumObjects函数提供的对象数据。
语法
参数
【lpLogObject】指向描述对象属性的LOGPEN或LOGBRUSH结构。【的lpData】指向由EnumObjects函数传递的应用程序定义的数据。
返回值
此函数不返回值。



-------------------------------------------------------- KeyGTK3Win32EnumPorts ----
EnumPorts    EnumPorts函数枚举可用于在指定服务器上打印的端口。
语法
参数
【PNAME】指向以空值终止的字符串，指定要打印端口的服务器的名称。如果【PNAME】为NULL，则该函数枚举本地计算机的打印机端口。【水平】指定【pports】指向的数据结构类型。该值可以


-------------------------------------------------------- KeyGTK3Win32EnumPrinterData ----
EnumPrinterData    [New - Windows NT]EnumPrinterData函数枚举指定打印机的配置数据。打印机的配置数据由一组命名和类型值组成。EnumPrinterData函数可以在每次调用它时获取这些值之一及其名称和类型代码。连续调用EnumPrinterData函数以获取打印机的所有配置数据值。打印机配置数据存储在注册表中。列举打印机配置数据时，应避免调用可能更改数据的注册表函数。
语法
参数
【hPrinter】处理要获取配置数据的打印机。通过调用OpenPrinter函数获取此打印机句柄。【dwIndex】指定要检索的配置数据值的索引值。对于给定的打印机句柄，首次调用EnumP


-------------------------------------------------------- KeyGTK3Win32EnumPrinterDrivers ----
EnumPrinterDrivers    EnumPrinterDrivers函数列举了指定打印机服务器上安装的所有打印机驱动程序。
语法
参数
【PNAME】指向以空值终止的字符串，指定要列举打印机驱动程序的服务器的名称。如果【PNAME】为NULL，则该函数枚举本地计算机的打印机驱动程序。【pEnvironment】指向指定环境的


-------------------------------------------------------- KeyGTK3Win32EnumPrinters ----
EnumPrinters    EnumPrinters函数列举了可用的打印机，打印服务器，域或打印提供商。
语法
参数
【旗】指定函数应枚举的打印对象的类型。该值可以是以下常量的组合：值含义PRINTER_ENUM_LOCAL该函数忽略【名称】参数，并枚举本地安装的打印机。Windows 95：该函数还将枚举


-------------------------------------------------------- KeyGTK3Win32EnumPrintProcessorDatatypes ----
EnumPrintProcessorDatatypes    EnumPrintProcessorDatatypes函数枚举指定的打印处理器支持的数据类型。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定打印处理器所在的服务器的名称。如果此参数为NULL，则枚举本地打印处理器的数据类型。【pPrintProcessorName】指向一个空值终止的字


-------------------------------------------------------- KeyGTK3Win32EnumPrintProcessors ----
EnumPrintProcessors    EnumPrintProcessors函数列举了指定服务器上安装的打印处理器。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定打印处理器所在的服务器的名称。如果此参数为NULL，则枚举本地打印处理器。【pEnvironment】指向指定环境的以null结尾的字符串。例如，


-------------------------------------------------------- KeyGTK3Win32EnumProps ----
EnumProps    EnumProps函数通过将它们逐个传递给指定的回调函数来枚举窗口的属性列表中的所有条目。EnumProps继续，直到最后一个条目被枚举，或者回调函数返回FALSE。
语法
参数
【的hWnd】标识要枚举属性列表的窗口。【lpEnumFunc】指向回调函数。有关回调函数的更多信息，请参阅PropEnumProc函数。
返回值
返回值指定回调函数返回的最后一个值。如


-------------------------------------------------------- KeyGTK3Win32EnumPropsEx ----
EnumPropsEx    EnumPropsEx函数通过将它们逐个传递给指定的回调函数来枚举窗口的属性列表中的所有条目。EnumPropsEx继续，直到最后一个条目被枚举，或者回调函数返回FALSE。
语法
参数
【的hWnd】标识要枚举属性列表的窗口。【lpEnumFunc】指向回调函数。有关回调函数的更多信息，请参阅PropEnumProcEx函数。【lParam的】包含要传递给回调函数的应用程序


-------------------------------------------------------- KeyGTK3Win32EnumRegisterWordProc ----
EnumRegisterWordProc    EnumRegisterWordProc函数是一个应用程序定义的回调函数，用于处理来自ImmEnumRegisterWord函数的寄存器字符串的数据。
语法
参数
【lpszReading】指向指定匹配的读取字符串的以null结尾的字符串的指针。【dwStyle】寄存器字符串的样式【lpszStringhu】指向指定匹配寄存器字符串的以null结尾的字


-------------------------------------------------------- KeyGTK3Win32EnumResLangProc ----
EnumResLangProc    EnumResLangProc函数是一个应用程序定义的回调函数，它通过调用EnumResourceLanguages函数接收资源语言。
语法
参数
【HMODULE】标识可执行文件包含要列举语言的资源的模块。如果此参数为NULL，则该函数枚举用于创建当前进程的模块中的资源语言。【lpszType】指向一个以null结束的字符串，指定要枚


-------------------------------------------------------- KeyGTK3Win32EnumResNameProc ----
EnumResNameProc    EnumResNameProc函数是一个应用程序定义的回调函数，它通过调用EnumResourceNames函数接收资源名称。
语法
参数
【HMODULE】标识可执行文件包含名称被枚举的资源的模块。如果此参数为NULL，则该函数枚举用于创建当前进程的模块中的资源名称。【lpszType】指向一个以null结尾的字符串，指定名称


-------------------------------------------------------- KeyGTK3Win32EnumResourceLanguages ----
EnumResourceLanguages    EnumResourceLanguages函数在模块中搜索指定类型和名称的每个资源，并将其定位的每个资源的语言传递给定义的回调函数。
语法
参数
【HMODULE】标识可执行文件包含要列举语言的资源的模块。如果此参数为NULL，则该函数枚举用于创建当前进程的模块中的资源语言。【//值类型缓冲区的地址】指向一个以null结尾的字符串，指


-------------------------------------------------------- KeyGTK3Win32EnumResourceNames ----
EnumResourceNames    EnumResourceNames函数在模块中搜索指定类型的每个资源，并将其定位的每个资源的名称传递给应用程序定义的回调函数。
语法
参数
【HMODULE】标识可执行文件包含要枚举名称的资源的模块。如果此参数为NULL，则该函数枚举用于创建当前进程的模块中的资源名称。【lpszType】指向一个以null结尾的字符串，指定名称


-------------------------------------------------------- KeyGTK3Win32EnumResourceTypes ----
EnumResourceTypes    EnumResourceTypes函数在模块中搜索资源，并将其找到的每种资源类型传递给应用程序定义的回调函数。
语法
参数
【HMODULE】标识可执行文件包含要枚举类型的资源的模块。如果此参数为NULL，则该函数枚举用于创建当前进程的模块中的资源类型。【lpEnumFunc】指向每个枚举资源类型的回调函数。有关


-------------------------------------------------------- KeyGTK3Win32EnumResTypeProc ----
EnumResTypeProc    EnumResTypeProc函数是一个应用程序定义的回调函数，它通过调用EnumResourceTypes函数接收资源类型。
语法
参数
【HMODULE】标识可执行文件包含要枚举类型的资源的模块。如果此参数为NULL，则该函数枚举用于创建当前进程的模块中的资源类型。【lpszType】指向一个以null结尾的字符串，指定要枚


-------------------------------------------------------- KeyGTK3Win32EnumServicesStatus ----
EnumServicesStatus    EnumServicesStatus函数枚举指定的服务控制管理器数据库中的服务。提供每个服务的名称和状态。
语法
参数
【hSCManager】标识服务控制管理器数据库。OpenSCManager函数返回此句柄，该句柄必须具有SC_MANAGER_ENUMERATE_SERVICE访问权限。【dwServic


-------------------------------------------------------- KeyGTK3Win32EnumSystemCodePages ----
EnumSystemCodePages    EnumSystemCodePages函数枚举系统上安装或支持的代码页。【dwFlags中】参数确定函数是枚举已安装或支持的代码页。该函数通过将代码页标识符（一次一个）传递给指定的应用程序定义的回调函数来枚举代码页。这将继续，直到所有已安装或支持的代码页标识符都传递给回调函数，或者回调函数返回FALSE。
语法
参数
【lpCodePageEnumProc】指向应用程序定义的回调函数。EnumSystemCodePages函数通过重复调用此回调函数来枚举代码页。有关详细信息，请参阅EnumCodePage


-------------------------------------------------------- KeyGTK3Win32EnumSystemLocales ----
EnumSystemLocales    EnumSystemLocales函数枚举系统上安装或支持的区域设置。【dwFlags中】参数确定函数是枚举已安装或支持的系统区域设置。该函数通过将locale标识符（一次一个）传递给指定的应用程序定义的回调函数来枚举语言环境。这将继续，直到所有已安装或受支持的区域设置标识符已传递到回调函数或回调函数返回FALSE。
语法
参数
【lpLocaleEnumProc】指向应用程序定义的回调函数。EnumSystemLocales函数通过重复调用此回调函数来枚举语言环境。有关详细信息，请参阅EnumLocalesProc


-------------------------------------------------------- KeyGTK3Win32EnumTaskWindows ----
EnumTaskWindows              EnumTaskWindows函数已过时。它已被EnumThreadWindows函数所取代。为了保持16位应用程序的兼容性，EnumTaskWindows已被替换为调用EnumThreadWindows的宏。之前的应用程序可以继续调用EnumTaskWindows，但新的应用程序应该使用EnumThreadWindows.


-------------------------------------------------------- KeyGTK3Win32EnumThreadWindows ----
EnumThreadWindows    EnumThreadWindows函数通过将每个窗口的句柄传递给应用程序定义的回调函数来枚举与线程相关联的所有非小时窗口。EnumThreadWindows继续，直到最后一个窗口被枚举或回调函数返回FALSE。要枚举特定窗口的子窗口，请使用EnumChildWindows函数。此函数取代EnumTaskWindows函数。
语法
参数
【dwThreadId】标识要列举窗口的线程。【lpfn】指向应用程序定义的回调函数。有关回调函数的更多信息，请参阅EnumThreadWndProc回调函数。【lParam的】指定要传递给


-------------------------------------------------------- KeyGTK3Win32EnumThreadWndProc ----
EnumThreadWndProc    EnumThreadWndProc函数是一个应用程序定义的回调函数，它通过调用EnumThreadWindows函数接收与线程关联的窗口句柄。
语法
参数
【HWND】标识与EnumThreadWindows函数中指定的线程相关联的窗口。【lParam的】指定EnumThreadWindows函数中给出的应用程序定义值。
返回值
要继续枚举


-------------------------------------------------------- KeyGTK3Win32EnumTimeFormats ----
EnumTimeFormats    EnumTimeFormats函数枚举可用于指定区域设置的时间格式。该函数通过将指针传递给包含应用程序定义回调函数的时间格式的字符串缓冲区来枚举时间格式。它继续这样做，直到找到最后一个格式或回调函数返回FALSE。
语法
参数
【lpTimeFmtEnumProc】指向应用程序定义的回调函数。有关详细信息，请参阅EnumTimeFormatsProc回调函数。【语言环境】指定区域设置以检索时间格式信息。此参数可以是


-------------------------------------------------------- KeyGTK3Win32EnumTimeFormatsProc ----
EnumTimeFormatsProc    一个EnumTimeFormatsProc函数是一个应用程序定义的回调函数。它被称为调用EnumTimeFormats函数的结果，并且接收到一个指向包含时间格式字符串的字符串缓冲区的指针。
语法
参数
【lpTimeFormatString】指向包含空终止时间格式字符串的字符串缓冲区。请注意，【lpTimeFormatString】应为EnumTimeFormatsProc的Unicode


-------------------------------------------------------- KeyGTK3Win32EnumWindows ----
EnumWindows    EnumWindows函数通过将每个窗口的句柄依次传递给应用程序定义的回调函数来枚举屏幕上的所有顶级窗口。EnumWindows继续，直到最后一个顶级窗口被枚举或回调函数返回FALSE。
语法
参数
【lpEnumFunc】指向应用程序定义的回调函数。有关详细信息，请参阅EnumWindowsProc回调函数。【lParam的】指定要传递给回调函数的32位应用程序定义值。
返回值
如


-------------------------------------------------------- KeyGTK3Win32EnumWindowsProc ----
EnumWindowsProc    EnumWindowsProc函数是一个应用程序定义的回调函数，它通过调用EnumWindows或EnumDesktopWindows函数接收顶级窗口句柄。
语法
参数
【HWND】标识顶级窗口。【lParam的】指定EnumWindows或EnumDesktopWindows中给出的应用程序定义值。
返回值
要继续枚举，回调函数必须返回TRUE;要停止


-------------------------------------------------------- KeyGTK3Win32EnumWindowStationProc ----
EnumWindowStationProc    EnumWindowStationProc函数是一个应用程序定义的回调函数，它通过调用EnumWindowStations函数接收窗口站名称。
语法
参数
【lpszWindowStation】指向一个窗口站的空终止名称。【lParam的】指定EnumWindowStations函数中给出的应用程序定义值。
返回值
要继续枚举，回调函数必须


-------------------------------------------------------- KeyGTK3Win32EnumWindowStations ----
EnumWindowStations    EnumWindowStations函数通过将每个窗口站的名称依次传递给应用程序定义的回调函数来枚举系统中的所有窗口。
语法
参数
【lpEnumFunc】指向应用程序定义的EnumWindowStationProc回调函数。【lParam的】指定要传递给回调函数的32位应用程序定义值。
返回值
如果函数成功，返回值


-------------------------------------------------------- KeyGTK3Win32EqualPrefixSid ----
EqualPrefixSid    EqualPrefixSid函数测试两个安全标识符（SID）前缀值以获得相等性。SID前缀是除最后一个子权限值之外的整个SID。
语法
参数
【pSid1】指向第一个SID结构进行比较。这种结构被认为是有效的。【pSid2】指向第二个SID结构进行比较。它也被认为是有效的。
返回值
如果SID前缀相等，则返回值不为零。如果SI


-------------------------------------------------------- KeyGTK3Win32EqualRect ----
EqualRect    EqualRect函数通过比较其左上角和右下角的坐标来确定两个指定的矩形是否相等。
语法
参数
【lprc2】指向包含第一个矩形的逻辑坐标的RECT结构。【If the two rectangles are identical, the return value is nonzero.


-------------------------------------------------------- KeyGTK3Win32EqualRgn ----
EqualRgn    EqualRgn函数检查两个指定的区域，以确定它们是否相同。如果它们的大小和形状相等，则该函数考虑两个区域相同。
语法
参数
【hSrcRgn1】识别一个地区。【hSrcRgn2】识别一个地区。
返回值
如果两个区域相等，则返回值不为零。如果两个区域不相等，返回值为零。返回值ERROR表示区域句柄中的至少一个无


-------------------------------------------------------- KeyGTK3Win32EqualSid ----
EqualSid    EqualSid函数测试两个安全标识符（SID）值以获得相等性。两个SID必须完全匹配以被认为是相等的。
语法
参数
【pSid1】指向第一个SID结构进行比较。这种结构被认为是有效的。【pSid2】指向第二个SID结构进行比较。它也被认为是有效的。
返回值
如果SID结构相等，则返回值不为零。如果SI


-------------------------------------------------------- KeyGTK3Win32EraseTape ----
EraseTape    EraseTape函数会删除磁带的全部或部分。
语法
参数
【hDevice】标识要擦除磁带的设备。该句柄是通过使用CreateFile函数创建的。【dwEraseType】指定擦除技术。此参数可以是以下值之一：值描述TAPE_ERASE_LONG将


-------------------------------------------------------- KeyGTK3Win32Escape ----
Escape    Escape函数允许应用程序访问不能通过GDI直接使用的特定设备的函数。由应用程序进行的Escape呼叫转换并发送给驱动程序。
语法
参数
【HDC】标识设备上下文。【nEscape】指定要执行的转义函数。此参数必须是预定义的转义值之一。如果应用程序定义私有转义值，请使用ExtEscape函数。【cbInput】指定【lpvIn


-------------------------------------------------------- KeyGTK3Win32EscapeCommFunction ----
EscapeCommFunction    EscapeCommFunction函数指示指定的通信设备执行扩展函数。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【dwFunc】指定要执行的扩展函数的代码。此参数可以是以下值之一：值含义CLRDTR清除DTR（数据终端就绪）信号。CLRR


-------------------------------------------------------- KeyGTK3Win32ExcludeClipRect ----
ExcludeClipRect    ExcludeClipRect函数创建一个新的裁剪区域，由现有裁剪区域减去指定的矩形组成。
语法
参数
【HDC】标识设备上下文。【nLeftRect】指定矩形左上角的逻辑x坐标。【nTopRect】指定矩形左上角的逻辑y坐标。【nRightRect】指定矩形右下角的逻辑x坐标。【nBotto


-------------------------------------------------------- KeyGTK3Win32ExcludeUpdateRgn ----
ExcludeUpdateRgn    ExcludeUpdateRgn函数通过从剪切区域中排除窗口中的更新区域来防止在窗口的无效区域内绘制。
语法
参数
【hDC】标识与裁剪区域相关联的设备上下文。【的hWnd】标识要更新的窗口。
返回值
返回值指定排除区域的复杂度;它可以是以下值之一：值含义COMPLEXREGION区域由多个矩形组成。


-------------------------------------------------------- KeyGTK3Win32ExitProcess ----
ExitProcess    ExitProcess函数结束进程及其所有线程。
语法
参数
【uExitCode】指定进程的退出代码以及由于此调用而终止的所有线程。使用GetExitCodeProcess函数来检索进程的退出值。使用GetExitCodeThread函数来检索线程的


-------------------------------------------------------- KeyGTK3Win32ExitThread ----
ExitThread    ExitThread函数结束线程。
语法
参数
【dwExitCode】指定调用线程的退出代码。使用GetExitCodeThread函数检索线程的退出代码。
返回值
此函数不返回值。
描述
ExitThread是退出线程的首选方


-------------------------------------------------------- KeyGTK3Win32ExitWindows ----
ExitWindows    ExitWindows函数将关闭当前用户。
语法
参数
【//保留，必须设置为零】Reserved; must be zero.【Windows does not allow new applications to start up during


-------------------------------------------------------- KeyGTK3Win32ExitWindowsEx ----
ExitWindowsEx    ExitWindowsEx函数注销，关闭或关闭并重新启动系统。
语法
参数
【uFlags】指定关机类型。此参数必须是以下值的某种组合：值含义EWX_FORCE强制进程终止。设置此标志时，Windows不会将消息WM_QUERYENDSESSION和WM_ENDSE


-------------------------------------------------------- KeyGTK3Win32ExpandEnvironmentStrings ----
ExpandEnvironmentStrings    ExpandEnvironmentStrings函数扩展环境变量字符串，并用它们定义的值替换它们。
语法



-------------------------------------------------------- KeyGTK3Win32ExtCreatePen ----
ExtCreatePen    ExtCreatePen函数创建一个具有指定样式，宽度和画笔属性的逻辑化妆或几何笔。
语法
参数
【dwPenStyle】指定类型，样式，端点和连接属性的组合。通过使用按位OR运算符（|）组合来自每个类别的值。笔类型可以是以下值之一：类型描述PS_GEOMETRIC笔是几何。PS_COS


-------------------------------------------------------- KeyGTK3Win32ExtensionPropSheetPageProc ----
ExtensionPropSheetPageProc    ExtensionPropSheetPageProc函数指定一个应用程序定义的回调函数，它接收AddPropSheetPageProc函数的地址，该函数驻留在创建属性表的模块中。属性表扩展名必须导出ExtensionPropSheetPageProc函数。
语法
参数
【LPV】指向应用程序定义值的指针，该值描述要为其创建属性表页面的项目。此参数可以为NULL。【lpfnAddPropSheetPageProc】指向AddPropSheetPageProc


-------------------------------------------------------- KeyGTK3Win32ExtEscape ----
ExtEscape    ExtEscape函数允许应用程序访问通过GDI不可用的特定设备的函数。
语法
参数
【HDC】标识设备上下文。【nEscape】指定要执行的转义函数。【cbInput】指定【lpszInData】参数指向的数据的字节数。【lpszInData】指向指定转义所需的输入结构。【


-------------------------------------------------------- KeyGTK3Win32ExtFloodFill ----
ExtFloodFill    ExtFloodFill函数使用当前画笔填充显示表面的一个区域。
语法
参数
【HDC】标识设备上下文。【nXStart】指定填充开始点的逻辑x坐标。【nYStart】指定要开始填充的点的逻辑y坐标。【crColor】指定要填充的边界或区域的颜色。【crColor】的


-------------------------------------------------------- KeyGTK3Win32ExtractAssociatedIcon ----
ExtractAssociatedIcon    ExtractAssociatedIcon函数返回在相关可执行文件中找到的文件或图标中找到的索引图标的句柄。
语法
参数
【HINST】指定调用函数的应用程序的实例。【lpIconPath】指向一个字符串，指定需要图标的文件的完整路径和文件名。该函数从该文件或与该文件相关联的可执行文件中提取图标句柄。如果从可执


-------------------------------------------------------- KeyGTK3Win32ExtractIcon ----
ExtractIcon    ExtractIcon函数从指定的可执行文件，动态链接库（DLL）或图标文件中检索图标的句柄。
语法



-------------------------------------------------------- KeyGTK3Win32ExtractIconEx ----
ExtractIconEx    ExtractIconEx函数从指定的可执行文件，动态链接库（DLL）或图标文件中检索图标的句柄。
语法
参数
【lpszFile】指向以空值终止的字符串，指定可执行文件，DLL或图标文件的名称。【nIconIndex】指定要检索的图标的索引。如果该值为0，则该函数返回指定文件中第一个图标的句柄。如果


-------------------------------------------------------- KeyGTK3Win32ExtSelectClipRgn ----
ExtSelectClipRgn    ExtSelectClipRgn函数通过使用指定的模式将指定的区域与当前的剪切区域进行组合。
语法
参数
【HDC】标识设备上下文。【HRGN】标识要选择的区域。当指定RGN_COPY模式时，此句柄只能为NULL。【fnMode】指定要执行的操作。它必须是以下值之一：值含义RGN_AND新剪辑区


-------------------------------------------------------- KeyGTK3Win32ExtTextOut ----
ExtTextOut    ExtTextOut函数使用当前选定的字体绘制一个字符串。可以提供一个可选的矩形，用于剪裁，不透明或两者。
语法
参数
【HDC】标识设备上下文。【X】指定用于定位字符串的参考点的逻辑x坐标。【Y】指定用于定位字符串的参考点的逻辑y坐标。【fuOptions】指定如何使用应用程序定义的矩形。此参数可以是以下值


-------------------------------------------------------- KeyGTK3Win32FatalAppExit ----
FatalAppExitFatalAppExit函数显示一个消息框，并在消息框关闭时终止应用程序。如果Windows使用内核调试器运行，则消息框给用户终止应用程序或取消消息框并返回到调用FatalAppExit的应用程序的机会。
语法
参数
【uAction】Reserved; must be zero.【lpMessageText】指向消息框中显示的以空字符结尾的字符串。消息显示在一行。为了适应低分辨率屏幕，字符串的长度不能超


-------------------------------------------------------- KeyGTK3Win32FatalExit ----
FatalExit    FatalExit函数将执行控制传递给调试器。此后调试器的行为特定于所使用的调试器的类型。
语法
参数
【ExitCode】指定与退出相关联的错误代码。
返回值
此函数不返回值。
描述
应用程序只能使用FatalExit进行调试。它不应该调用应用程序的零售版本中的函数，因为这样做会终止


-------------------------------------------------------- KeyGTK3Win32FileIOCompletionRoutine ----
FileIOCompletionRoutine    当异步输入和输出（I / O）函数（ReadFileEx或WriteFileEx）完成并且调用线程处于等待警报状态（使用SleepEx，WaitForSingleObjectEx）时，将调用FileIOCompletionRoutine函数，或WaitForMultipleObjectsEx函数，【的fAlertable】标志设置为TRUE）。
语法
参数
【dwErrorCode】指定I / O完成状态。此参数可能是以下值之一：值含义0I / O成功。ERROR_HANDLE_EOFReadFileEx函数尝试读取文件的最后一行。
【dwN


-------------------------------------------------------- KeyGTK3Win32FileTimeToDosDateTime ----
FileTimeToDosDateTime    FileTimeToDosDateTime函数将64位文件时间转换为MS-DOS日期和时间值。
语法
参数
【lpFileTime】指向FILETIME结构，包含64位文件时间转换为MS-DOS日期和时间格式。FILETIME结构具有以下形式：typedef struct _FILETIME { 


-------------------------------------------------------- KeyGTK3Win32FileTimeToLocalFileTime ----
FileTimeToLocalFileTime    FileTimeToLocalFileTime函数将基于协调世界时（UTC）的文件时间转换为本地文件时间。
语法
参数
【lpFileTime】指向FILETIME结构，其中包含将基于UTC的文件时间转换为本地文件时间。【lpLocalFileTime】指向FILETIME结构以接收转换的本地文件时间。此参数


-------------------------------------------------------- KeyGTK3Win32FileTimeToSystemTime ----
FileTimeToSystemTime    FileTimeToSystemTime函数将64位文件时间转换为系统时间格式。
语法
参数
【lpFileTime】指向FILETIME结构的指针，其中包含转换为系统日期和时间格式的文件时间。FileTimeToSystemTime函数仅适用于小于0x800000000000000


-------------------------------------------------------- KeyGTK3Win32FillConsoleOutputAttribute ----
FillConsoleOutputAttribute    FillConsoleOutputAttribute函数设置指定数量的字符单元格的文本和背景颜色属性，从屏幕缓冲区中的指定坐标开始。
语法
参数
【hConsoleOutput】标识一个屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【wAttribute】指定要写入屏幕缓冲区的前景色和背景颜色属性。可以指定以下值的任意组合：


-------------------------------------------------------- KeyGTK3Win32FillConsoleOutputCharacter ----
FillConsoleOutputCharacter    FillConsoleOutputCharacter函数从指定的坐标开始，将一个字符写入屏幕缓冲区指定的次数。
语法
参数
【hConsoleOutput】标识一个屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【// character to write】指定要写入屏幕缓冲区的字符。【nLength】指


-------------------------------------------------------- KeyGTK3Win32FillMemory ----
FillMemory    FillMemory函数用指定的值填充一个内存块。
语法
参数
【目的地】指向要填写的内存块的起始地址。【长度】指定要填充的内存块的大小（以字节为单位）。【填】指定用于填充内存块的字节值。
返回值
该函数没有返回值。



-------------------------------------------------------- KeyGTK3Win32FillPath ----
FillPath    FillPath函数可以关闭当前路径中的任何打开的图形，并使用当前画笔和多边形填充模式填充路径的内部。
语法
参数
【HDC】标识包含有效路径的设备上下文（DC）。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.GetLastErro


-------------------------------------------------------- KeyGTK3Win32FillRect ----
FillRect    FillRect函数使用指定的画笔填充一个矩形。此函数包括左侧和上边界，但不包括矩形的右侧和底部边框。
语法
参数
【hDC】标识设备上下文。【LPRC】指向RECT结构，其中包含要填充的矩形的逻辑坐标。【HBR】标识用于填充矩形的画笔。
返回值
如果函数成功，返回值为TRUE。如果函数失败，返回值为


-------------------------------------------------------- KeyGTK3Win32FillRgn ----
FillRgn    FillRgn函数使用指定的画笔填充区域。
语法
参数
【HDC】标识设备上下文。【HRGN】标识要填充的区域。该区域的坐标被推定为逻辑单位。【HBR】标识用于填充区域的画笔。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyGTK3Win32FindAtom ----
FindAtom    FindAtom函数在本地atom表中搜索指定的字符串，并检索与该字符串关联的原子。
语法
参数
【lpString】指向要搜索的以null结尾的字符串。
返回值
如果函数成功，则返回值是与给定字符串相关联的原子。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastEr


-------------------------------------------------------- KeyGTK3Win32FindClose ----
FindClose    FindClose函数关闭指定的搜索句柄。FindFirstFile和FindNextFile函数使用搜索句柄来查找名称与给定名称相匹配的文件。
语法
参数
【hFindFile】标识搜索句柄。此句柄以前必须由FindFirstFile函数打开。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetL


-------------------------------------------------------- KeyGTK3Win32FindCloseChangeNotification ----
FindCloseChangeNotification    FindCloseChangeNotification函数停止更改通知句柄监视。
语法
参数
【hChangeHandle】标识由FindFirstChangeNotification函数创建的更改通知句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩


-------------------------------------------------------- KeyGTK3Win32FindClosePrinterChangeNotification ----
FindClosePrinterChangeNotification    FindClosePrinterChangeNotification函数关闭通过调用FindFirstPrinterChangeNotification函数创建的更改通知对象。与更改通知对象关联的打印机或打印服务器将不再被该对象监视。
语法
参数
【H更改】处理更改通知对象要关闭。这是通过调用FindFirstPrinterChangeNotification函数创建的句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回


-------------------------------------------------------- KeyGTK3Win32FindExecutable ----
FindExecutable    FindExecutable函数检索与指定文件名关联的可执行文件（.EXE）的名称和句柄。
语法
参数
【lpFile】指向指定文件名的以null结尾的字符串的指针。这可以是文档或可执行文件。【lpDirectory】指向指定默认目录的以空值终止的字符串的指针。【lpResult】当函数返回时


-------------------------------------------------------- KeyGTK3Win32FindFirstChangeNotification ----
FindFirstChangeNotification    FindFirstChangeNotification函数创建更改通知句柄并设置初始更改通知过滤器条件。当在指定的目录或子树中发生与过滤条件匹配的更改时，通知处理的等待成功。
语法
参数
【lpPathName】指向一个以null结尾的字符串，指定要观看的目录的路径。【bWatchSubtree】指定该函数是否监视目录或目录树。如果此参数为TRUE，则该函数将监视指定目录下的


-------------------------------------------------------- KeyGTK3Win32FindFirstFile ----
FindFirstFile    FindFirstFile函数在目录中搜索名称与指定文件名匹配的文件。FindFirstFile检查子目录名称以及文件名。
语法
参数
【lpFileName】Windows 95：指向一个空值终止的字符串，指定一个有效的目录或路径和文件名，可以包含通配符（*和？）。该字符串不得超过MAX_PATH个字符。指向一个空值终止的


-------------------------------------------------------- KeyGTK3Win32FindFirstFileEx ----
FindFirstFileEx    [New - Windows NT]FindFirstFileEx函数在目录中搜索名称和属性与函数调用中指定的名称和属性相匹配的文件。
语法
参数
【lpFileName】指向一个空值终止的字符串，指定一个有效的目录或路径和文件名，可以包含通配符（*和？）。【fInfoLevelId】指定返回数据的信息级别。如果使用FindExInfo


-------------------------------------------------------- KeyGTK3Win32FindFirstFreeAce ----
FindFirstFreeAce    FindFirstFreeAce函数检索访问控制列表（ACL）中第一个空闲字节的指针。
语法
参数
【ACL】指向ACL结构。【步伐】指向该函数返回时创建的ACL中第一个空闲位置的指针。如果ACL无效，则该参数为NULL。如果ACL已满，则该参数指向ACL后面的字节。
返回值
如果函数


-------------------------------------------------------- KeyGTK3Win32FindFirstPrinterChangeNotification ----
FindFirstPrinterChangeNotification    FindFirstPrinterChangeNotification函数创建一个更改通知对象并返回对象的句柄。然后，您可以在调用其中一个等待函数来监视打印机或打印服务器的更改时使用此句柄。
语法
参数
【hPrinter】处理到要监视的打印机或打印服务器。该句柄通过调用OpenPrinter函数获取。【The system sets one or more of the following


-------------------------------------------------------- KeyGTK3Win32FindNextChangeNotification ----
FindNextChangeNotification    FindNextChangeNotification函数请求操作系统在下次检测到适当的更改时发出更改通知手动信号。
语法
参数
【hChangeHandle】标识由FindFirstChangeNotification函数创建的更改通知句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩


-------------------------------------------------------- KeyGTK3Win32FindNextFile ----
FindNextFile    FindNextFile函数将继续从以前调用FindFirstFile函数的文件搜索。
语法
参数
【hFindFile】标识先前调用FindFirstFile函数返回的搜索句柄。【lpFindFileData】指向WIN32_FIND_DATA结构的接收有关找到的文件或子目录的信息。该结


-------------------------------------------------------- KeyGTK3Win32FindNextPrinterChangeNotification ----
FindNextPrinterChangeNotification    FindNextPrinterChangeNotification函数检索有关与打印机或打印服务器关联的更改通知对象的最新更改通知的信息。当对更改通知对象进行等待操作时，调用此函数。该函数还将更改通知对象重置为未通知状态。然后，您可以在另一个等待操作中使用该对象来继续监视打印机或打印服务器。下一次打印机或打印服务器发生一组特定更改时，操作系统将将对象设置为信号状态。FindFirstPrinterChangeNotification函数创建更改通知对象，并指定要监视的更改集。
语法
参数
【H更改】处理与打印机或打印服务器关联的更改通知对象。通过调用FindFirstPrinterChangeNotification函数获得这样的句柄。当操作系统检测到对象的更改通知过滤器中指


-------------------------------------------------------- KeyGTK3Win32FindResource ----
FindResource    FindResource函数确定指定模块中具有指定类型和名称的资源的位置。
语法
参数
【HMODULE】可执行文件包含资源的模块的句柄。值为NULL指定与操作系统用于创建当前进程的映像文件相关联的模块句柄。【lpName】指定资源的名称。有关详细信息，请参阅备注部分。【//值


-------------------------------------------------------- KeyGTK3Win32FindResourceEx ----
FindResourceEx    FindResourceEx函数确定指定模块中具有指定类型，名称和语言的资源的位置。
语法
参数
【HMODULE】标识可执行文件包含资源的模块。如果此参数为NULL，则该函数将搜索用于创建当前进程的模块。【// address of buffer for value type】指向指定


-------------------------------------------------------- KeyGTK3Win32FindText ----
FindText    FindText函数创建一个系统定义的无模式对话框，允许用户指定要搜索的字符串以及在文档中搜索文本时使用的选项。
语法
参数
【LPFR】指向FINDREPLACE结构的指针，其中包含用于初始化对话框的信息。该对话框使用此结构将有关用户输入的信息发送到您的应用程序。有关详细信息，请参阅以下备注部分。
返回值
如


-------------------------------------------------------- KeyGTK3Win32FindWindow ----
FindWindow    FindWindow函数检索顶级窗口的句柄，其类名和窗口名称与指定的字符串相匹配。此函数不搜索子窗口。
语法
参数
【lpClassName】指向指定类名的空值终止的字符串，或者是标识类名字符串的原子。如果这个参数是一个原子，它必须是由先前调用GlobalAddAtom函数创建的全局原子。原子，16位值，


-------------------------------------------------------- KeyGTK3Win32FindWindowEx ----
FindWindowEx    [Now Supported on Windows NT]FindWindowEx函数检索其类名和窗口名称与指定字符串匹配的窗口的句柄。该函数搜索子窗口，从给定的子窗口之后开始。
语法
参数
【hwndParent】标识要搜索子窗口的父窗口。如果【hwndParent】为NULL，该函数将使用桌面窗口作为父窗口。该函数将在桌面的子窗口的窗口中进行搜索。【hwndChildAfte


-------------------------------------------------------- KeyGTK3Win32FixBrushOrgEx ----
FixBrushOrgEx  Win32 API中没有实现FixBrushOrgEx函数。它提供与Win32s的兼容性。如果被调用，函数什么也不做，返回FALSE。
另请参见
GetBrushOrgEx, SetBrushOrgEx


-------------------------------------------------------- KeyGTK3Win32FlashWindow ----
FlashWindow    FlashWindow函数会闪烁一次指定的窗口。
语法



-------------------------------------------------------- KeyGTK3Win32FlattenPath ----
FlattenPath    FlattenPath函数将所选路径中的任何曲线转换为当前设备上下文（DC），将每条曲线转换为一系列线。
语法
参数
【HDC】标识包含有效路径的DC。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.GetLastError可能会返回以


-------------------------------------------------------- KeyGTK3Win32FloodFill ----
FloodFill    FloodFill函数使用当前画笔填充显示表面的一个区域。该区域被假定为由【crFill】参数指定的有界。
语法
参数
【HDC】标识设备上下文。【nXStart】指定填充开始点的逻辑x坐标。【nYStart】指定要开始填充的点的逻辑y坐标。【crFill】指定要填充的边界或区域的颜色。
返回值
如果函数


-------------------------------------------------------- KeyGTK3Win32FlushConsoleInputBuffer ----
FlushConsoleInputBuffer    FlushConsoleInputBuffer函数刷新控制台输入缓冲区。当前输入缓冲区中的所有输入记录都被丢弃。
语法
参数
【hConsoleInput】标识控制台输入缓冲区。句柄必须具有GENERIC_WRITE权限。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用


-------------------------------------------------------- KeyGTK3Win32FlushFileBuffers ----
FlushFileBuffers    FlushFileBuffers函数清除指定文件的缓冲区，并将所有缓冲的数据写入文件。
语法
参数
【HFILE】一个打开的文件句柄。该函数刷新该文件的缓冲区。文件句柄必须对该文件具有GENERIC_WRITE权限。如果【HFILE】是通信设备的句柄，则该函数仅刷新发送缓冲区。如果【HFI


-------------------------------------------------------- KeyGTK3Win32FlushInstructionCache ----
FlushInstructionCache    FlushInstructionCache函数刷新指定进程的指令高速缓存。
语法



-------------------------------------------------------- KeyGTK3Win32FlushViewOfFile ----
FlushViewOfFile    FlushViewOfFile函数将文件的映射视图中的字节范围写入磁盘。
语法
参数
【lpBaseAddress】指向要刷新到映射文件的磁盘表示的字节范围的基址。【dwNumberOfBytesToFlush】指定要刷新的字节数。如果【dwNumberOfBytesToFl


-------------------------------------------------------- KeyGTK3Win32FMExtensionProc ----
FMExtensionProc    FMExtensionProc函数是一个应用程序定义的回调函数，用于处理发送到文件管理器扩展动态链接库（DLL）的菜单命令和消息。
语法



-------------------------------------------------------- KeyGTK3Win32FoldString ----
FoldString    FoldString函数将一个字符串映射到另一个字符串，执行指定的转换选项。
语法
参数
【dwMapFlags】一组位标志，指示在映射期间要使用的转换类型。该值可以是以下位标志常量的组合：选项含义MAP_FOLDCZONE将兼容区域字符串折成标准的Unicode等价物。有关兼容


-------------------------------------------------------- KeyGTK3Win32ForegroundIdleProc ----
ForegroundIdleProc    ForegroundIdleProc挂接过程是一个应用程序定义的回调函数，系统在32位前台线程即将变为空闲时调用。
语法
参数
【码】指定挂接过程是否处理消息。如果【码】为HC_ACTION，挂接过程必须处理该消息。如果【码】小于零，挂钩过程必须将消息传递给CallNextHookEx函数，无需进一步处理，并返回Ca


-------------------------------------------------------- KeyGTK3Win32FormatMessage ----
FormatMessage    FormatMessage函数格式化消息字符串。该函数需要一个消息定义作为输入。消息定义可以来自传递到函数中的缓冲区。它可以来自已加载模块中的消息表资源。或者呼叫者可以要求该函数在系统的消息表资源中搜索消息定义。该函数基于消息标识符和语言标识符在消息表资源中查找消息定义。该函数将格式化的消息文本复制到输出缓冲区，如果请求，则处理任何嵌入的插入序列。
语法
参数
【dwFlags中】包含一组位标志，用于指定格式化过程的各个方面以及如何解释【// pointer to  message source】参数。【dwFlags中】的低位字节指定函数如何处理


-------------------------------------------------------- KeyGTK3Win32FrameRect ----
FrameRect    FrameRect函数使用指定的画笔在指定的矩形周围绘制一个边框。边框的宽度和高度总是一个逻辑单位。
语法
参数
【hDC】标识绘制边框的设备上下文。【LPRC】指向包含矩形左上角和右下角的逻辑坐标的RECT结构。【HBR】标识用于绘制边框的画笔。
返回值
如果函数成功，返回值为TRUE。如果函数失


-------------------------------------------------------- KeyGTK3Win32FrameRgn ----
FrameRgn    FrameRgn函数使用指定的画笔在指定区域周围绘制一个边框。
语法
参数
【HDC】标识设备上下文。【HRGN】标识要封闭在边框中的区域。该区域的坐标被推定为逻辑单位。【HBR】标识用于绘制边框的画笔。【nWidth】以逻辑单位指定纵向画笔笔画的宽度。【nHeig


-------------------------------------------------------- KeyGTK3Win32FreeConsole ----
FreeConsole    FreeConsole函数从其控制台分离调用进程。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
如果其他进程共享控制台，则控制台不会被销毁，


-------------------------------------------------------- KeyGTK3Win32FreeDDElParam ----
FreeDDElParam    FreeDDElParam函数释放由发布的DDE消息的【lParam的】参数指定的内存。收到发布的DDE消息的应用程序在使用UnpackDDElParam函数打开【lParam的】值后应调用此函数。
语法
参数
【味精】指定发布的DDE消息。【lParam的】指定发布的DDE消息的【lParam的】参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
一个应用程序应该


-------------------------------------------------------- KeyGTK3Win32FreeEnvironmentStrings ----
FreeEnvironmentStrings    FreeEnvironmentStrings函数释放一个环境字符串。
语法
参数
【lpszEnvironmentBlock】指向一个环境字符串的块。必须通过调用GetEnvironmentStrings函数获取指向块的指针。
返回值
如果函数成功，返回值不为零。如果


-------------------------------------------------------- KeyGTK3Win32FreeLibrary ----
FreeLibrary    FreeLibrary函数减少加载的动态链接库（DLL）模块的引用计数。当引用计数达到零时，模块将从调用进程的地址空间中取消映射，并且句柄不再有效。此函数取代FreeModule函数。
语法
参数
【hLibModule】标识加载的库模块。LoadLibrary或GetModuleHandle函数返回此句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展


-------------------------------------------------------- KeyGTK3Win32FreeLibraryAndExitThread ----
FreeLibraryAndExitThread    FreeLibraryAndExitThread函数将加载的动态链接库（DLL）的引用计数减1，然后调用ExitThread终止调用线程。该函数不返回。
语法
参数
【hLibModule】指定函数递减的引用计数的动态链接库模块。【dwExitCode】指定调用线程的退出代码。
返回值
该函数没有返回值。该函数不返回。【hLibModule】句柄无效


-------------------------------------------------------- KeyGTK3Win32FreeModule ----
FreeModule              FreeModule函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用FreeLibrary函数。


-------------------------------------------------------- KeyGTK3Win32FreePrinterNotifyInfo ----
FreePrinterNotifyInfo    FreePrinterNotifyInfo函数释放由FindNextPrinterChangeNotification函数返回的系统分配的缓冲区。
语法
参数
【pPrinterNotifyInfo】指向FindNextPrinterChangeNotification函数的调用返回的PRINTER_NOTIFY_INFO缓冲区。FreePrint


-------------------------------------------------------- KeyGTK3Win32FreeProcInstance ----
FreeProcInstance      FreeProcInstance函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序不应该使用此函数;它在32位环境中没有任何意义。


-------------------------------------------------------- KeyGTK3Win32FreeResource ----
FreeResource       FreeResource函数已过时。它提供了简化16位Windows应用程序的移植。基于Win32的应用程序不需要使用LoadResource函数来释放加载的资源。
另请参见
LoadResource, LockResource


-------------------------------------------------------- KeyGTK3Win32FreeSid ----
FreeSid    FreeSid函数通过使用AllocateAndInitializeSid函数释放先前分配的安全标识符（SID）。
语法
参数
【PSID】指向SID结构免费。
返回值
此函数不返回值。



-------------------------------------------------------- KeyGTK3Win32FRHookProc ----
FRHookProc    一个FRHookProc挂接过程是一个应用程序定义或库定义的回调过程，与“查找和替换”常用对话框一起使用。挂钩过程接收默认对话框过程的消息或通知。
语法
参数
【hdlg】处理查找或替换消??息所针对的公共对话框窗口。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息。确切的含义取决于【uiMsg】参数的值。【lParam


-------------------------------------------------------- KeyGTK3Win32FSCTL_DISMOUNT_VOLUME ----
FSCTL_DISMOUNT_VOLUME    FSCTL_DISMOUNT_VOLUME DeviceIoControl 操作将卸载卷。dwIoControlCode = FSCTL_DISMOUNT_VOLUME;   //操作代码lpInBuffer = NULL; //指向输入缓冲区的指针;不曾用过;必须为NULLnInBufferSize = 0; //输入缓冲区的大小不曾用过;必须为零lpOutBuffer ;      //指向输出缓冲区的指针;不曾用过;必须为NULLnOutBufferSize ;   //输出缓冲区的大小不曾用过;必须为零lpBytesReturned ;  //指向由DeviceIoControl函数使用的DWORD的指针
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyGTK3Win32FSCTL_GET_COMPRESSION ----
FSCTL_GET_COMPRESSION    FSCTL_GET_COMPRESSION DeviceIoControl操作获取文件系统支持每流压缩的卷上的文件或目录的当前压缩状态。dwIoControlCode = FSCTL_GET_COMPRESSION;   //操作代码lpInBuffer = NULL; //指向输入缓冲区的指针;不曾用过;必须为NULLnInBufferSize = 0; //输入缓冲区的大小不曾用过;必须为零lpOutBuffer ;      //指向输出缓冲区的指针nOutBufferSize ;   //输出缓冲区的大小lpBytesReturned ;  //指向输出的实际字节
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyGTK3Win32FSCTL_LOCK_VOLUME ----
FSCTL_LOCK_VOLUME    FSCTL_LOCK_VOLUME DeviceIoControl 操作将锁定卷。只能通过锁定卷的文件对象（* 【hDevice】）的句柄来访问锁定卷。dwIoControlCode = FSCTL_LOCK_VOLUME;   //操作代码lpInBuffer = NULL; //指向输入缓冲区的指针;不曾用过;必须为NULLnInBufferSize = 0; //输入缓冲区的大小不曾用过;必须为零lpOutBuffer ;      //指向输出缓冲区的指针;不曾用过;必须为NULLnOutBufferSize ;   //输出缓冲区的大小不曾用过;必须为零lpBytesReturned ;  //指向由DeviceIoControl函数使用的DWORD的指针
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyGTK3Win32FSCTL_SET_COMPRESSION ----
FSCTL_SET_COMPRESSION    FSCTL_SET_COMPRESSION DeviceIoControl操作设置文件系统支持每卷文件和每目录压缩的卷上的文件或目录的压缩状态。您可以使用此操作压缩或解压缩此卷上的文件或目录。dwIoControlCode = FSCTL_SET_COMPRESSION;   //操作代码lpInBuffer ;        //指向输入缓冲区的指针nInBufferSize ;     //输入缓冲区的大小lpOutBuffer = NULL; //指向输出缓冲区的指针;不曾用过;必须为NULLnOutBufferSize = 0; //输出缓冲区的大小不曾用过;必须为零lpBytesReturned ;   //指向由DeviceIoControl函数使用的DWORD的指针
参数
【lpInBuffer】指向包含指定文件或目录的新压缩状态的USHORT的缓冲区。定义了以下值：值含义COMPRESSION_FORMAT_NONE解压文件或目录。COMPRESSION_F


-------------------------------------------------------- KeyGTK3Win32FSCTL_UNLOCK_VOLUME ----
FSCTL_UNLOCK_VOLUME    FSCTL_UNLOCK_VOLUME DeviceIoControl操作会解锁一个卷。dwIoControlCode = FSCTL_UNLOCK_VOLUME;   //操作代码lpInBuffer = NULL; //指向输入缓冲区的指针;不曾用过;必须为NULLnInBufferSize = 0; //输入缓冲区的大小不曾用过;必须为零lpOutBuffer ;      //指向输出缓冲区的指针;不曾用过;必须为NULLnOutBufferSize ;   //输出缓冲区的大小不曾用过;必须为零lpBytesReturned ;  //指向由DeviceIoControl函数使用的DWORD的指针
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyGTK3Win32GdiComment ----
GdiComment    GdiComment函数将注释从缓冲区复制到指定的增强格式的图元文件中。
语法
参数
【HDC】标识增强型图元文件设备上下文。【CBSIZE】指定注释缓冲区的长度（以字节为单位）。【的lpData】指向包含注释的缓冲区。
返回值
如果函数成功，返回值不为零。如果函数失败，


-------------------------------------------------------- KeyGTK3Win32GdiFlush ----
GdiFlush    GdiFlush函数刷新调用线程的当前批处理。
语法
参数
此函数无参数。
返回值
如果当前批处理中的所有函数成功，则返回值不为零。如果当前批处理中的所有函数都不成功，返回值为零，表示至少有一个函数返回错误。
描述
批处理通过最小化调用返回布


-------------------------------------------------------- KeyGTK3Win32GdiGetBatchLimit ----
GdiGetBatchLimit    GdiGetBatchLimit函数返回可以在调用线程的当前批处理中累积的最大函数调用数。超出此限制时，系统将刷新当前批次。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值为批量限制。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
使用GdiSetBatchLimit函


-------------------------------------------------------- KeyGTK3Win32GdiSetBatchLimit ----
GdiSetBatchLimit    GdiSetBatchLimit函数设置调用线程当前批处理中可累积的最大函数数。超出此限制时，系统将刷新当前批次。
语法
参数
【// batch limit】指定要设置的批量限制。值0设置默认限制。值为1将禁用批处理。
返回值
如果函数成功，则返回值为上一个批量限制。如果函数失败，返回值为零。要获取扩展错误信息


-------------------------------------------------------- KeyGTK3Win32GenerateConsoleCtrlEvent ----
GenerateConsoleCtrlEvent    GenerateConsoleCtrlEvent函数将指定的信号发送到共享与调用进程相关联的控制台的控制台进程组。
语法
参数
【dwCtrlEvent】指定要生成的信号的类型。指定以下值之一：值含义CTRL_C_EVENT产生一个CTRL + C信号。CTRL_BREAK_EVENT产生一个CTRL + BREAK


-------------------------------------------------------- KeyGTK3Win32GetAce ----
GetAce    GetAce函数获取指向ACL中ACE的指针。ACE是访问控制条目。ACL是访问控制列表。
语法
参数
【ACL】指向包含要检索的ACE的ACL结构。【dwAceIndex】指定检索指针的ACE。值为0对应于ACL中的第一个ACE，1对应于第二个ACE，依此类推。【步伐】指向函数设置为ACE地


-------------------------------------------------------- KeyGTK3Win32GetAclInformation ----
GetAclInformation    GetAclInformation函数检索有关访问控制列表（ACL）的信息。
语法
参数
【ACL】指向ACL结构。该函数检索有关此ACL的信息。【pAclInformation】指向缓冲区，接收请求的信息。放入缓冲区的结构取决于【dwAclInformationClass】参数


-------------------------------------------------------- KeyGTK3Win32GetACP ----
GetACP    GetACP函数检索系统的当前ANSI代码页标识符。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是系统的当前ANSI代码页标识符，如果没有代码页是当前的，则返回默认标识符。
描述
以下是ANSI代码页标识符：识别码含义874泰国93


-------------------------------------------------------- KeyGTK3Win32GetActiveWindow ----
GetActiveWindow    GetActiveWindow函数检索与调用该函数的线程相关联的活动窗口的窗口句柄。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是与调用该函数的线程相关联的活动窗口的句柄。如果调用线程没有活动窗口，则返回值为NULL。



-------------------------------------------------------- KeyGTK3Win32GetArcDirection ----
GetArcDirection    GetArcDirection函数返回指定设备上下文的当前弧方向。圆弧和矩形函数使用圆弧方向。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值指定当前的圆弧方向。以下是有效的返回值：值含义AD_COUNTERCLOCKWISE逆时针绘制弧形和矩形。AD_CLOCKWIS


-------------------------------------------------------- KeyGTK3Win32GetAspectRatioFilterEx ----
GetAspectRatioFilterEx    GetAspectRatioFilterEx函数检索当前宽高比滤镜的设置。
语法
参数
【HDC】标识设备上下文。【lpAspectRatio】指向SIZE结构，接收当前的宽高比过滤器。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调


-------------------------------------------------------- KeyGTK3Win32GetAsyncKeyState ----
GetAsyncKeyState    GetAsyncKeyState函数确定在调用函数时键是上下还是关闭，以及在先前调用GetAsyncKeyState之后是否按下了该键。
语法
参数
【V键】指定256个可能的虚拟键代码之一。Windows NT：您可以使用左右区分常量来指定某些键。有关详细信息，请参阅
描述
部分。Windows 95： Windows 95不支持在


-------------------------------------------------------- KeyGTK3Win32GetAtomName ----
GetAtomName    GetAtomName函数检索与指定的本地原子相关联的字符串的副本。此函数将替换GetAtomHandle函数。
语法
参数
【纳多马斯】指定标识要检索的字符串的本地原子。【lpBuffer】指向字符串的缓冲区。【服务提供商】指定缓冲区的大小（以字符为单位）。
返回值
如果函数成功，则返回值是复制到缓冲区的字符


-------------------------------------------------------- KeyGTK3Win32GetAuditedPermissionsFromAcl ----
GetAuditedPermissionsFromAcl    [New - Windows NT]GetAuditedPermissionsFromAcl函数返回指定受托人的审计访问权限。被审核的权限基于指定的访问控制列表（ACL）的访问控制条目（ACE）。经审计的访问权限指示导致系统在系统事件日志中生成审核记录的访问尝试的类型。经审核的权利包括ACL为受托人或受托人所属的任何组指定的权利。在确定被审核权限时，该函数不考虑受托人所持有的安全特权。
语法
参数
【ACL】指向获取受托人审核访问权限的ACL。【pTrustee】指向标识受托人的TRUSTEE结构的指针。受托人可以是用户，组或程序（如Windows NT服务）。您可以使用名称或安全标识


-------------------------------------------------------- KeyGTK3Win32GetBinaryType ----
GetBinaryType    GetBinaryType函数确定文件是否可执行，如果是，则是可执行文件的类型。最后一个属性确定可执行文件在哪个子系统下运行。
语法



-------------------------------------------------------- KeyGTK3Win32GetBitmapBits ----
GetBitmapBits  GetBitmapBits函数将指定位图的位图位复制到缓冲区中。Win32 API中没有实现GetBitmapBits函数。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用GetDIBits函数。


-------------------------------------------------------- KeyGTK3Win32GetBitmapDimensionEx ----
GetBitmapDimensionEx    GetBitmapDimensionEx函数检索位图的尺寸。检索到的维度必须由SetBitmapDimensionEx函数设置。GetMapDimensionEx函数替换GetMapDimension函数。
语法
参数
【HBITMAP】标识位图。【// address of structure receiving dimensions】指向SIZE结构以接收位图维度。
返回值
如果函数成功，返回值不为


-------------------------------------------------------- KeyGTK3Win32GetBkColor ----
GetBkColor    GetBkColor函数返回指定设备上下文的当前背景颜色。
语法
参数
【HDC】标识要返回背景颜色的设备上下文。
返回值
如果函数成功，则返回值为当前背景颜色的COLORREF值。如果函数失败，返回值为CLR_INVALID。



-------------------------------------------------------- KeyGTK3Win32GetBkMode ----
GetBkMode    GetBkMode函数返回指定设备上下文的当前后台混合模式。设备背景的背景混合模式影响不是实线的文本，阴影画笔和笔风格。
语法
参数
【HDC】标识要返回背景模式的设备上下文。
返回值
如果函数成功，则返回值指定当前的背景混合模式，OPAQUE或TRANSPARENT。如果函数失败，返回值为零。



-------------------------------------------------------- KeyGTK3Win32GetBoundsRect ----
GetBoundsRect    GetBoundsRect函数获取指定设备上下文的当前累积边界矩形。Windows为每个应用程序维护一个累积的边界矩形。应用程序可以检索和设置此矩形。
语法
参数
【HDC】标识函数将返回的边界矩形的设备上下文。【lprcBounds】指向将接收当前边界矩形的RECT结构。应用程序的矩形以逻辑坐标返回，Windows矩形返回屏幕坐标。【旗】指定GetB


-------------------------------------------------------- KeyGTK3Win32GetBrushOrgEx ----
GetBrushOrgEx    GetBrushOrgEx函数检索指定设备上下文的当前画笔原点。此函数将替换GetBrushOrg函数。
语法
参数
【HDC】标识设备上下文。【LPPT】指向设备坐标中接收画笔原点的POINT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLast


-------------------------------------------------------- KeyGTK3Win32GetCapture ----
GetCapture    GetCapture函数检索捕获鼠标的窗口（如果有）的句柄。一次只能有一个窗口可以捕捉鼠标;该窗口接收鼠标输入，无论光标是否在其边框内。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是与当前线程相关联的捕获窗口的句柄。如果线程中没有窗口捕获到鼠标，则返回值为NULL。
描述
NULL返回值并不意味着系统中没有其他线程


-------------------------------------------------------- KeyGTK3Win32GetCaretBlinkTime ----
GetCaretBlinkTime    GetCaretBlinkTime函数返回反转插入符号像素所需的经过时间（以毫秒为单位）。用户可以使用控制面板设置此值。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值为闪烁时间，单位为毫秒。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32GetCaretPos ----
GetCaretPos    GetCaretPos函数将客户端坐标中的插入符的位置复制到指定的POINT结构。
语法
参数
【LPPOINT】指向要接收插入符号的客户端坐标的POINT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32GetCharABCWidths ----
GetCharABCWidths    GetCharABCWidths函数以当前TrueType字体检索给定范围内连续字符的逻辑单位宽度。此函数只能使用TrueType字体。
语法
参数
【HDC】标识设备上下文。【uFirstChar】指定当前字体的连续字符组中的第一个字符。【uLastChar】指定当前字体的连续字符组中的最后一个字符。【lpabc】指向ABC结构的数组，


-------------------------------------------------------- KeyGTK3Win32GetCharABCWidthsFloat ----
GetCharABCWidthsFloat    GetCharABCWidthsFloat函数以逻辑单位检索当前字体在指定范围内的连续字符的宽度。
语法
参数
【HDC】标识设备上下文。【iFirstChar】指定寻找ABC宽度的连续字符组中的第一个字符的代码点。【iLastChar】指定寻找ABC宽度的连续字符组中最后一个字符的代码点。这个范围是


-------------------------------------------------------- KeyGTK3Win32GetCharacterPlacement ----
GetCharacterPlacement    [Now Supported on Windows NT]GetCharacterPlacement函数检索有关字符串的信息，例如字符宽度，插入符号定位，字符串中的排序和字形渲染。返回的信息类型取决于【dwFlags中】参数，并且基于给定显示上下文中当前选定的字体。该函数将信息复制到指定的GCP_RESULTS结构或由结构指定的一个或多个数组。
语法
参数
【HDC】标识设备上下文。【lpString】指向要处理的字符串。【NCOUNT】指定字符串中的字符数。【nMaxExtent】指定字符串处理的最大范围（以逻辑单位）。如果被处理的字符超出这


-------------------------------------------------------- KeyGTK3Win32GetCharWidth ----
GetCharWidth    GetCharWidth函数以逻辑坐标检索当前字体在指定范围内的连续字符的宽度。维护GetCharWidth以兼容16位版本的Windows。基于Win32的应用程序应该调用GetCharWidth32函数，它提供更准确的结果。
语法
参数
【HDC】标识设备上下文。【iFirstChar】指定连续字符组中的第一个字符。【iLastChar】指定连续字符组中的最后一个字符，不能在指定的第一个字符之前。【lpBuffer】指向缓冲


-------------------------------------------------------- KeyGTK3Win32GetCharWidth32 ----
GetCharWidth32    GetCharWidth32函数以逻辑坐标检索当前字体在指定范围内的连续字符的宽度。此函数取代GetCharWidth函数。
语法
参数
【HDC】标识设备上下文。【iFirstChar】指定连续字符组中的第一个字符。【iLastChar】指定连续字符组中的最后一个字符，不能在指定的第一个字符之前。【lpBuffer】指向缓冲


-------------------------------------------------------- KeyGTK3Win32GetCharWidthFloat ----
GetCharWidthFloat    GetCharWidthFloat函数从当前字体中检索指定范围内连续字符的分数宽度。
语法
参数
【HDC】标识设备上下文。【iFirstChar】指定连续字符组中第一个字符的代码点。【iLastChar】指定连续字符组中最后一个字符的代码点。【pxBuffer】指向缓冲区以接收字符宽度


-------------------------------------------------------- KeyGTK3Win32GetClassInfo ----
GetClassInfo    GetClassInfo函数检索有关窗口类的信息。GetClassInfoEx函数已被GetClassInfoEx函数取代。但是，如果您不需要关于班级小图标的信息，您仍然可以使用GetClassInfo.
语法
参数
【的hInstance】标识创建该类的应用程序的实例。要检索有关Windows定义的类的信息（如按钮或列表框），请将此参数设置为NULL。【lpClassName】指向包含类名称的以null


-------------------------------------------------------- KeyGTK3Win32GetClassInfoEx ----
GetClassInfoEx    GetClassInfoEx函数检索有关窗口类的信息，包括与窗口类相关联的小图标的句柄。GetClassInfo函数不会检索小图标的句柄。
语法
参数
【HINST】标识创建该类的应用程序的实例。要检索有关Windows定义的类的信息（如按钮或列表框），请将此参数设置为NULL。【lpszClasspl】指向包含类名称的以null结尾的字符


-------------------------------------------------------- KeyGTK3Win32GetClassLong ----
GetClassLong    GetClassLong函数从与指定窗口相关联的WNDCLASS结构中检索指定的32位（长）值。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【参数nIndex】指定要检索的32位值。要从额外的类内存中检索一个32位值，请指定要检索的值的正零，基于零的字节偏移量。有效值范围为零，通过


-------------------------------------------------------- KeyGTK3Win32GetClassName ----
GetClassName    GetClassName函数检索指定窗口所属的类的名称。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【lpClassName】指向要接收类名字符串的缓冲区。【nMaxCount】指定【lpClassName】参数指向的缓冲区的长度（以字符为单


-------------------------------------------------------- KeyGTK3Win32GetClassWord ----
GetClassWord    GetClassWord函数将指定偏移量下的16位（字）值检索到指定窗口所属窗口类的额外类内存中。除了GCW_ATOM和GCW_HICONSM之外，GCW_值在Win32 API中已经过时了。您必须使用GetClassLong函数来检索窗口的类值。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【参数nIndex】指定要检索的值的基于零的字节偏移量。有效值范围为零，通过类内存的字节数减去2;例如，如果您指定了10个或更多字节的额外类别


-------------------------------------------------------- KeyGTK3Win32GetClientRect ----
GetClientRect    GetClientRect函数检索窗口的客户区域的坐标。客户端坐标指定客户区域的左上角和右下角。由于客户端坐标相对于窗口客户区域的左上角，左上角的坐标为（0,0）。
语法
参数
【的hWnd】标识要检索客户端坐标的窗口。【LPRECT】指向接收客户端坐标的RECT结构。剩下和最佳成员为零。对和底部成员包含窗口的宽度和高度。
返回值
如果函数成功，返回值不为零。如


-------------------------------------------------------- KeyGTK3Win32GetClipboardData ----
GetClipboardData    GetClipboardData函数以指定的格式从剪贴板中检索数据。剪贴板以前必须打开。
语法
参数
【UFormat】指定剪贴板格式。有关剪贴板格式的说明，请参阅SetClipboardData函数。
返回值
如果函数成功，则返回值是指定格式的剪贴板对象的句柄。如果函数失败，返回值为N


-------------------------------------------------------- KeyGTK3Win32GetClipboardFormatName ----
GetClipboardFormatName    GetClipboardFormatName函数从剪贴板中检索指定注册格式的名称。该函数将该名称复制到指定的缓冲区。
语法
参数
【格式】指定要检索的格式类型。此参数不能指定任何预定义的剪贴板格式。【lpszFormatName】指向要接收格式名称的缓冲区。【cchMaxCount】指定要复制到缓冲区的字符串的最大长度


-------------------------------------------------------- KeyGTK3Win32GetClipboardOwner ----
GetClipboardOwner    GetClipboardOwner函数检索剪贴板当前所有者的窗口句柄。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是拥有剪贴板的窗口的句柄。如果剪贴板不拥有，则返回值为NULL。要获取扩展错误信息，请调用GetLastError.
描述
即使剪贴板当


-------------------------------------------------------- KeyGTK3Win32GetClipboardViewer ----
GetClipboardViewer    GetClipboardViewer函数检索剪贴板查看器链中第一个窗口的句柄。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是剪贴板查看器链中第一个窗口的句柄。如果没有剪贴板查看器，则返回值为NULL。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32GetClipBox ----
GetClipBox    GetClipBox函数检索可以围绕设备当前可见区域绘制的最紧密的边界矩形的尺寸。可视区域由当前剪辑区域或剪辑路径以及任何重叠窗口定义。
语法
参数
【HDC】标识设备上下文。【LPRC】指向要接收矩形维度的RECT结构。
返回值
如果函数成功，则返回值指定剪切框的复杂度，可以是以下值之一：值含义NULLREGION区域是空的SIMP


-------------------------------------------------------- KeyGTK3Win32GetClipCursor ----
GetClipCursor    GetClipCursor函数检索限制光标的矩形区域的屏幕坐标。
语法
参数
【LPRECT】指向接收限定矩形的屏幕坐标的RECT结构。如果光标不限于矩形，则结构将接收屏幕的尺寸。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，


-------------------------------------------------------- KeyGTK3Win32GetClipRgn ----
GetClipRgn    GetClipRgn函数检索标识指定设备上下文的当前应用程序定义的剪切区域的句柄。
语法
参数
【HDC】标识设备上下文。【HRGN】在调用函数之前标识一个现有区域。函数返回后，此参数标识当前裁剪区域的副本。
返回值
如果函数成功，并且给定设备上下文没有剪切区域，则返回值为零。如果


-------------------------------------------------------- KeyGTK3Win32GetColorAdjustment ----
GetColorAdjustment    GetColorAdjustment函数检索指定设备上下文的颜色调整值。
语法
参数
【HDC】标识设备上下文。【LPCA】指向接收颜色调整值的COLORADJUSTMENT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用G


-------------------------------------------------------- KeyGTK3Win32GetColorSpace ----
GetColorSpace    GetColorSpace函数从指定的设备上下文中检索逻辑颜色空间的当前句柄。
语法
参数
【HDC】处理设备上下文。
返回值
如果函数成功，则返回值是逻辑颜色空间的当前句柄。如果函数失败，返回值为NULL。



-------------------------------------------------------- KeyGTK3Win32GetCommandLine ----
GetCommandLine    GetCommandLine函数返回一个指向当前进程的命令行字符串的指针。
语法
参数
此函数无参数。
返回值
返回值是指向当前进程的命令行字符串的指针。
描述
使用C编写的非Unicode控制台进程可以使用ARGC和ARGV参数来访问命令行参数。命令行字符串的参数（不


-------------------------------------------------------- KeyGTK3Win32GetCommConfig ----
GetCommConfig    [Now Supported on Windows NT]GetCommConfig函数获取通信设备的当前配置。
语法
参数
【hCommDev】标识开放的通信设备。【lpCC】指向接收COMMCONFIG结构的缓冲区。【lpdwSize】指向32位变量，指定由【lpCC】指向的缓冲区的大小（以字节为单位）。当函数


-------------------------------------------------------- KeyGTK3Win32GetCommMask ----
GetCommMask    GetCommMask函数检索指定通信设备的事件掩码值。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【lpEvtMask】指向32位变量以填充当前启用的事件掩码。此参数可以是以下值中的一个或多个：值含义EV_BREAK输入时检


-------------------------------------------------------- KeyGTK3Win32GetCommModemStatus ----
GetCommModemStatus    GetCommModemStatus函数检索调制解调器控制寄存器值。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【lpModemStat】指向一个32位变量，指定调制解调器控制寄存器值的当前状态。此参数可以是以下值的组合：值含义MS_CT


-------------------------------------------------------- KeyGTK3Win32GetCommProperties ----
GetCommProperties    GetCommProperties函数填充缓冲区，其中包含有关指定通信设备的通信属性的信息。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【lpCommProp】指向返回通信属性信息的COMMPROP结构。此信息可用于以后调用SetCommState，SetCom


-------------------------------------------------------- KeyGTK3Win32GetCommState ----
GetCommState    GetCommState函数使用指定通信设备的当前控制设置填充设备控制块（DCB结构）。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【lpDCB】指向返回控制设置信息的DCB结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展


-------------------------------------------------------- KeyGTK3Win32GetCommTimeouts ----
GetCommTimeouts    GetCommTimeouts函数检索指定通信设备上所有读取和写入操作的超时参数。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【lpCommTimeouts】指向返回超时信息的COMMTIMEOUTS结构。
返回值
如果函数成功，返回值不为零。如果


-------------------------------------------------------- KeyGTK3Win32GetCompressedFileSize ----
GetCompressedFileSize    GetCompressedFileSize函数获取指定文件的压缩大小（以字节为单位）。
语法
参数
【lpFileName】指向指定文件名称的以空值终止的字符串的指针。【lpFileSizeHigh】指向DWORD变量的指针，该变量将该函数设置为压缩文件大小的高位双字。函数的返回值是压缩文


-------------------------------------------------------- KeyGTK3Win32GetComputerName ----
GetComputerName    GetComputerName函数检索当前系统的计算机名称。该名称在系统启动时，从注册表初始化时建立。
语法
参数
【lpBuffer】指向缓冲区以接收包含计算机名称的以null结尾的字符串。【服务提供商】指向一个变量，指定缓冲区的最大大小（以字符为单位）。该值应足够大以包含MAX_COMPUTERNAM


-------------------------------------------------------- KeyGTK3Win32GetConsoleCP ----
GetConsoleCP    Windows NT： GetConsoleCP函数返回与调用进程关联的控制台使用的输入代码页的标识。控制台使用其输入代码页将键盘输入转换为相应的字符值。
语法
参数
此函数无参数。
返回值
返回值是标识代码页的代码。
描述
代码页将256个字符代码映射到单个字符。不同的代码页包括不同的特殊字符，通常是针对一种语言或一组语言定制的。要设置控制台的输


-------------------------------------------------------- KeyGTK3Win32GetConsoleCursorInfo ----
GetConsoleCursorInfo    GetConsoleCursorInfo函数检索有关指定控制台屏幕缓冲区的游标的大小和可见性的信息。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_READ权限。【lpConsoleCursorInfo】指向CONSOLE_CURSOR_INFO结构，其中


-------------------------------------------------------- KeyGTK3Win32GetConsoleMode ----
GetConsoleMode    GetConsoleMode函数报告控制台输入缓冲区的当前输入模式或控制台屏幕缓冲区的当前输出模式。
语法
参数
【hConsoleHandle】标识控制台输入缓冲区或屏幕缓冲区。句柄必须具有GENERIC_READ权限。【//当前模式标志】指向一个32位变量，指示指定缓冲区的当前模式。如果【hCons


-------------------------------------------------------- KeyGTK3Win32GetConsoleOutputCP ----
GetConsoleOutputCP    Windows NT： GetConsoleOutputCP函数返回与调用进程关联的控制台使用的输出代码页的标识。控制台使用其输出代码页将由各种输出函数写入的字符值转换为控制台窗口中显示的图像。
语法
参数
此函数无参数。
返回值
返回值是标识代码页的代码。
描述
代码页将256个字符代码映射到单个字符。不同的代码页包括不同的特殊字符，通常是针对一种语言或一组语言定制的。要设置控制台的输


-------------------------------------------------------- KeyGTK3Win32GetConsoleScreenBufferInfo ----
GetConsoleScreenBufferInfo    GetConsoleScreenBufferInfo函数检索有关指定控制台屏幕缓冲区的信息。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_READ权限。【lpConsoleScreenBufferInfo】指向返回屏幕缓冲区信息的CONSOLE_


-------------------------------------------------------- KeyGTK3Win32GetConsoleTitle ----
GetConsoleTitle    GetConsoleTitle函数检索当前控制台窗口的标题栏字符串。
语法
参数
【lpConsoleTitle】指向一个缓冲区，接收一个空值终止的字符串，其中包含控制台窗口标题栏中显示的文本。【服务提供商】指定由【lpConsoleTitle】参数指向的缓冲区的大小（以


-------------------------------------------------------- KeyGTK3Win32GetCPInfo ----
GetCPInfo    GetCPInfo函数检索有关任何有效的已安装或可用代码页的信息。
语法
参数
【CodePage】指定要检索哪些信息的代码页。您可以为任何已安装或可用的代码页指定代码页标识符，也可以指定以下预定义值之一：值含义CP_ACP使用系统默认的ANSI代码页CP_MACCP使


-------------------------------------------------------- KeyGTK3Win32GetCurrencyFormat ----
GetCurrencyFormat    GetCurrencyFormat函数将数字字符串格式化为指定区域设置的货币字符串。
语法
参数
【语言环境】指定要格式化货币字符串的区域设置。如果【lpFormat】为NULL，则该函数将根据该区域设置的货币格式格式化该字符串。如果【lpFormat】不为NULL，则该函数仅对CURR


-------------------------------------------------------- KeyGTK3Win32GetCurrentDirectory ----
GetCurrentDirectory    GetCurrentDirectory函数检索当前进程的当前目录。
语法
参数
【nBufferLength】指定当前目录字符串的缓冲区的长度（以字符为单位）。缓冲区长度必须包含终止空字符的空间。【lpBuffer】指向当前目录字符串的缓冲区。这个以null结尾的字符串


-------------------------------------------------------- KeyGTK3Win32GetCurrentFiber ----
GetCurrentFiber    GetCurrentFiber函数返回当前光纤的地址。
语法
参数
此函数无参数。
返回值
返回值是当前正在运行的光纤的地址。
描述
创建光纤时，CreateFiber和ConvertThreadToFiber函数返回光纤地址。GetCurrentF


-------------------------------------------------------- KeyGTK3Win32GetCurrentHwProfile ----
GetCurrentHwProfile    [New - Windows NT]GetCurrentHwProfile函数检索有关本地计算机的当前硬件配置文件的信息。
语法
参数
【lpHwProfileInfo】指向HW_PROFILE_INFO结构的指针，其中函数返回有关当前硬件配置文件的信息。
返回值
如果函数成功，则返回值为非零值。如果函数失败，返回值为零


-------------------------------------------------------- KeyGTK3Win32GetCurrentObject ----
GetCurrentObject    GetCurrentObject函数返回指定类型的当前选定对象。
语法
参数
【HDC】标识设备上下文。【uObjectType】指定要查询的对象类型。此参数可以是以下值之一：值含义OBJ_PEN返回当前选择的笔。OBJ_BRUSH返回当前所选画笔。OBJ_PAL返回


-------------------------------------------------------- KeyGTK3Win32GetCurrentPositionEx ----
GetCurrentPositionEx    GetCurrentPositionEx函数以逻辑坐标检索当前位置。
语法
参数
【HDC】标识设备上下文。【LPPOINT】指向POINT结构，它接收当前位置的坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyGTK3Win32GetCurrentProcess ----
GetCurrentProcess    GetCurrentProcess函数返回当前进程的伪句柄。
语法
参数
此函数无参数。
返回值
返回值是当前进程的伪手柄。
描述
伪句柄是一个特殊的常量，被解释为当前的进程句柄。当需要进程句柄时，调用进程可以使用该句柄来指定自己的进程。伪句柄不是由子进程


-------------------------------------------------------- KeyGTK3Win32GetCurrentProcessId ----
GetCurrentProcessId    GetCurrentProcessId函数返回调用进程的进程标识符。
语法
参数
此函数无参数。
返回值
返回值是调用进程的进程标识符。
描述
在进程终止之前，进程标识符唯一地标识整个系统中的进程。



-------------------------------------------------------- KeyGTK3Win32GetCurrentThread ----
GetCurrentThread    GetCurrentThread函数返回当前线程的伪句柄。
语法
参数
此函数无参数。
返回值
返回值是当前线程的伪句柄。
描述
伪句柄是一个特殊常量，被解释为当前的线程句柄。当需要线程句柄时，调用线程可以使用此句柄来指定自身。伪句柄不是由子进程继承的。


-------------------------------------------------------- KeyGTK3Win32GetCurrentThreadId ----
GetCurrentThreadId    GetCurrentThreadId函数返回调用线程的线程标识符。
语法
参数
此函数无参数。
返回值
返回值是调用线程的线程标识符。
描述
直到线程终止，线程标识符唯一地标识整个系统中的线程。



-------------------------------------------------------- KeyGTK3Win32GetCurrentTime ----
GetCurrentTime    GetCurrentTime已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用GetTickCount函数或在注册表项HKEY_PERFORMANCE_DATA中的性能数据中查找“系统启动时间”计数器。


-------------------------------------------------------- KeyGTK3Win32GetCursor ----
GetCursor    GetCursor函数检索当前游标的句柄。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值就是当前光标的句柄。如果没有游标，则返回值为NULL。



-------------------------------------------------------- KeyGTK3Win32GetCursorPos ----
GetCursorPos    GetCursorPos函数以屏幕坐标取得光标的位置。
语法
参数
【LPPOINT】指向接收光标屏幕坐标的POINT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
光


-------------------------------------------------------- KeyGTK3Win32GetDateFormat ----
GetDateFormat    GetDateFormat函数将日期格式指定为指定区域设置的日期字符串。该函数格式化指定的日期或本地系统日期。
语法
参数
【语言环境】指定要格式化日期字符串的区域设置。如果【lpFormat】为NULL，则该函数根据该语言环境的日期格式对该字符串进行格式化。如果【lpFormat】不为NULL，则该函数仅对格式


-------------------------------------------------------- KeyGTK3Win32GetDC ----
GetDC    GetDC函数检索指定窗口的客户端区域的显示设备上下文（DC）的句柄。显示设备上下文可用于随后的GDI函数，以绘制窗口的客户区。此函数根据为指定窗口指定的类样式检索公共，类或私有设备上下文。对于常见的设备上下文，GetDC每次检索时都会将默认属性分配给设备上下文。对于类和私有设备上下文，GetDC保留先前分配的属性不变。
语法
参数
【的hWnd】标识要检索其设备上下文的窗口。
返回值
如果函数成功，则返回值标识给定窗口客户区的设备上下文。如果函数失败，返回值为NULL。
描述
在使用公共设备上下文绘制后，必须调


-------------------------------------------------------- KeyGTK3Win32GetDCEx ----
GetDCEx    GetDCEx函数检索指定窗口的显示设备（DC）上下文的句柄。显示设备上下文可用于随后的GDI函数，以绘制客户区。此函数是GetDC函数的扩展，使应用程序能够更好地控制客户端区域中是否发生裁剪。
语法
参数
【的hWnd】标识出现绘图的窗口。【hrgnClip】指定可与客户端窗口的可见区域组合的裁剪区域。【旗】指定如何创建设备上下文。此参数可以是以下值的组合：值含义DCX_WINDOW返回与窗口


-------------------------------------------------------- KeyGTK3Win32GetDCOrgEx ----
GetDCOrgEx    GetDCOrgEx函数获取指定设备上下文（DC）的最终转换起始点。最终翻译来源指定Windows用于将设备坐标转换为客户端坐标（对于应用程序窗口中的坐标）的偏移量。此函数取代GetDCOrg函数。
语法
参数
【HDC】指定要检索其最终翻译原点的设备上下文。【LPPOINT】指向POINT结构，该函数将在设备坐标中设置为最终翻译原点。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为


-------------------------------------------------------- KeyGTK3Win32GetDefaultCommConfig ----
GetDefaultCommConfig    [Now Supported on Windows NT]GetDefaultCommConfig函数获取通信设备的默认配置。
语法
参数
【lpszName】指向指定设备名称的以null结尾的字符串。【lpCC】指向接收COMMCONFIG结构的缓冲区。【lpdwSize】指向32位变量，指定由【lpCC】指向的缓冲区的大小（


-------------------------------------------------------- KeyGTK3Win32GetDesktopWindow ----
GetDesktopWindow    GetDesktopWindow函数返回Windows桌面窗口的句柄。桌面窗口覆盖整个屏幕。桌面窗口是其上所有图标和其他窗口的区域。
语法
参数
此函数无参数。
返回值
返回值是桌面窗口的句柄。



-------------------------------------------------------- KeyGTK3Win32GetDeviceCaps ----
GetDeviceCaps    GetDeviceCaps函数检索有关指定设备的特定于设备的信息。
语法
参数
【HDC】标识设备上下文。【参数nIndex】指定要返回的项目。此参数可以是以下值之一：指数含义DRIVERVERSION设备驱动程序版本。TECHNOLOGY设备技术。它可以是以下值之一：


-------------------------------------------------------- KeyGTK3Win32GetDeviceGammaRamp ----
GetDeviceGammaRamp    GetDeviceGammaRamp函数检索直接彩色显示板上的伽马斜坡。
语法
参数
【HDC】处理设备上下文。【lpRamp】指向一组256字节元素的三个数组。这些数组是帧缓冲器和DAC值之间的颜色值之间的映射。第一个数组是红色，下一个是绿色，最后一个是蓝色。
返回值



-------------------------------------------------------- KeyGTK3Win32GetDialogBaseUnits ----
GetDialogBaseUnits    GetDialogBaseUnits函数返回Windows使用的对话框基本单位，以创建对话框。Windows和应用程序都使用这些单元将对话框和控件的宽度和高度从对话框模板中转换为像素，反之亦然。
语法
参数
此函数无参数。
返回值
返回值是包含对话框基本单位的32位值。返回值的低位字包含水平对话框基本单位，高位字包含垂直对话框基本单位。
描述
水平基本单位等于系统字体中字符的平均宽度（以


-------------------------------------------------------- KeyGTK3Win32GetDIBits ----
GetDIBits    GetDIBits函数检索指定位图的位，并使用指定的格式将它们复制到缓冲区中。
语法
参数
【HDC】标识设备上下文。【骨形态发生蛋白】标识位图。【uStartScan】指定要检索的第一条扫描线。【cScanLines】指定要检索的扫描线数。【lpvBits】指向缓冲区以接收位图数


-------------------------------------------------------- KeyGTK3Win32GetDiskFreeSpace ----
GetDiskFreeSpace    GetDiskFreeSpace函数检索有关指定磁盘的信息，包括磁盘上的可用空间量。
语法
参数
【lpRootPathName】指向一个以null结尾的字符串，指定磁盘的根目录以返回有关的信息。如果【lpRootPathName】为NULL，则该函数使用当前目录的根。【lpSector


-------------------------------------------------------- KeyGTK3Win32GetDiskFreeSpaceEx ----
GetDiskFreeSpaceEx    [New - Windows NT][New - Windows 95, OEM Service Release 2]GetDiskFreeSpaceEx函数获取有关磁盘卷上可用空间量的信息：空间总量，可用空间总量以及与调用线程相关联的用户可用空间总量。
语法
参数
【lpDirectoryName】指向一个以空值终止的字符串，指定感兴趣的磁盘上的目录。该字符串可以是UNC名称。如果【lpDirectoryName】为NULL，则GetDiskFreeS


-------------------------------------------------------- KeyGTK3Win32GetDlgCtrlID ----
GetDlgCtrlID    GetDlgCtrlID函数返回指定控件的标识符。
语法
参数
【//控制柄】标识控件。
返回值
如果函数成功，返回值就是控件的标识符。如果函数失败，返回值为NULL。例如，【//控制柄】参数的无效值将导致该函数失败。
描述
GetDlgCtrl


-------------------------------------------------------- KeyGTK3Win32GetDlgItem ----
GetDlgItem    GetDlgItem函数在指定的对话框中检索控件的句柄。
语法
参数
【hDlg】标识包含控件的对话框。【nIDDlgItem】指定要检索的控件的标识符。
返回值
如果函数成功，则返回值是给定控件的窗口句柄。如果函数失败，则返回值为NULL，表示无效的对话


-------------------------------------------------------- KeyGTK3Win32GetDlgItemInt ----
GetDlgItemInt    GetDlgItemInt函数将对话框中指定控件的文本转换为整数值。
语法
参数
【hDlg】处理包含感兴趣的控件的对话框。【nIDDlgItem】对话框项目标识符，指定要翻译其文本的控件。【lpTranslated】指向接收函数成功/失败值的布尔变量。TRUE表示成功，


-------------------------------------------------------- KeyGTK3Win32GetDlgItemText ----
GetDlgItemText    GetDlgItemText函数在对话框中检索与控件相关联的标题或文本。
语法
参数
【hDlg】标识包含控件的对话框。【nIDDlgItem】指定要检索其标题或文本的控件的标识符。【lpString】指向缓冲区以接收标题或文本。【nMaxCount】指定要复制到【lpStr


-------------------------------------------------------- KeyGTK3Win32GetDoubleClickTime ----
GetDoubleClickTime    GetDoubleClickTime函数检索鼠标当前的双击时间。双击鼠标是两次点击鼠标，第二次在第一次指定的时间后发生。双击时间是双击的第一次和第二次点击之间可能发生的最大毫秒数。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值指定当前的双击时间（以毫秒为单位）。



-------------------------------------------------------- KeyGTK3Win32GetDriveType ----
GetDriveType    GetDriveType函数确定磁盘驱动器是可移动的，固定的，CD-ROM，RAM磁盘还是网络驱动器。
语法
参数
【lpRootPathName】指向一个以null结尾的字符串，指定磁盘的根目录以返回有关的信息。如果【lpRootPathName】为NULL，则该函数使用当前目录的根。
返回值
返回


-------------------------------------------------------- KeyGTK3Win32GetEffectiveClientRect ----
GetEffectiveClientRect    GetEffectiveClientRect函数计算客户区域中矩形的尺寸。此函数的实用性有限。
语法
参数
【的hWnd】处理到有客户区要检查的窗口。【LPRC】指向接收矩形尺寸的RECT结构的指针。【lpinfoit】指向客户区域中控件的16位控制标识符数组。每个控件需要两个数组元素。第一个元素


-------------------------------------------------------- KeyGTK3Win32GetEffectiveRightsFromAcl ----
GetEffectiveRightsFromAcl    [New - Windows NT]GetEffectiveRightsFromAcl函数检索ACL允许指定的受托人的有效访问权限。受托人的有效访问权限是ACL授予受托人或受托人所属组织的访问权限。该函数不考虑受托人在确定有效访问权限时所持有的安全特权。
语法
参数
【ACL】指向获取受托人有效访问权限的ACL。【pTrustee】指向TRUSTEE结构的指针，用于标识受托人。受托人可以是用户，组或程序（如Windows NT服务）。您可以使用名称或安全


-------------------------------------------------------- KeyGTK3Win32GetEnhMetaFile ----
GetEnhMetaFile    GetEnhMetaFile函数创建一个句柄，用于标识存储在指定文件中的增强格式的元文件。
语法
参数
【lpszMetaFile】指向以空值终止的字符串，指定增强型图元文件的名称。
返回值
如果函数成功，则返回值是增强的图元文件的句柄。如果函数失败，返回值为NULL。
描述
当应用程


-------------------------------------------------------- KeyGTK3Win32GetEnhMetaFileBits ----
GetEnhMetaFileBits    GetEnhMetaFileBits函数检索指定的增强格式的图元文件的内容并将其复制到缓冲区中。
语法
参数
【HEMF】识别增强的图元文件。【cbBuffer】指定接收数据的缓冲区的大小（以字节为单位）。【lpbBuffer】指向缓冲区以接收元文件数据。缓冲区必须足够大以容纳数据。如果【lpbBu


-------------------------------------------------------- KeyGTK3Win32GetEnhMetaFileDescription ----
GetEnhMetaFileDescription    GetEnhMetaFileDescription函数从增强格式的图元文件中检索可选文本描述，并将该字符串复制到指定的缓冲区。
语法
参数
【HEMF】识别增强的图元文件。【cchBuffer】指定接收数据的缓冲区的大小（以字符为单位）。只有这么多人物才会被复制。【XNUM】指向缓冲区以接收可选文本描述。
返回值
如果可选文


-------------------------------------------------------- KeyGTK3Win32GetEnhMetaFileHeader ----
GetEnhMetaFileHeader    GetEnhMetaFileHeader函数检索包含指定增强格式图元文件的标题的记录。
语法
参数
【HEMF】标识要检索标题的增强型图元文件。【cbBuffer】指定接收数据的缓冲区的大小（以字节为单位）。只会复制这么多字节。【lpemhsq】指向ENHMETAHEADER结构以接收头记


-------------------------------------------------------- KeyGTK3Win32GetEnhMetaFilePaletteEntries ----
GetEnhMetaFilePaletteEntries    GetEnhMetaFilePaletteEntries函数从指定的增强型图元文件中检索可选的调色板条目。
语法
参数
【HEMF】识别增强的图元文件。【cEntries】指定要从可选调色板检索的条目数。【LPPE】指向一系列PALETTEENTRY结构以接收调色板颜色。该数组必须至少包含与【cEntries


-------------------------------------------------------- KeyGTK3Win32GetEnvironmentStrings ----
GetEnvironmentStrings    GetEnvironmentStrings函数返回当前进程的环境块地址。此函数将替换GetDOSEnvironment函数。
语法
参数
此函数无参数。
返回值
返回值是指向当前进程的环境块的指针。
描述
不要使用GetEnvironmentStrings的返回值来获取或设置环境变量。而是使用GetEnvironmen


-------------------------------------------------------- KeyGTK3Win32GetEnvironmentVariable ----
GetEnvironmentVariable    GetEnvironmentVariable函数从调用进程的环境块中检索指定变量的值。该值以空字符结尾的字符串的形式。
语法
参数
【lpName】指向指定环境变量的以null结尾的字符串。【lpBuffer】指向缓冲区以接收指定环境变量的值。【服务提供商】指定【lpBuffer】参数指向的缓冲区的大小（以字符为单位）。


-------------------------------------------------------- KeyGTK3Win32GetExceptionCode ----
GetExceptionCode    GetExceptionCode函数检索一个代码，该代码标识发生的异常类型。该函数只能从尝试  -  除异常处理程序的过滤器表达式或异常处理程序块中调用。
语法
参数
此函数无参数。
返回值
返回值标识异常的类型。以下是由于常见的编程错误而可能发生的异常代码：值含义EXCEPTION_ACCESS_VIOLATION  线程尝试从不具有适当访问权限的虚


-------------------------------------------------------- KeyGTK3Win32GetExceptionInformation ----
GetExceptionInformation    GetExceptionInformation函数检索与机器无关的异常描述，以及有关发生异常时针对线程存在的计算机状态的信息。只能从尝试  -  除异常处理程序的过滤器表达式中调用此函数。
语法
参数
此函数无参数。
返回值
返回值是一个指向EXCEPTION_POINTERS结构的指针，其中包含两个其他结构的指针：包含异常描述的EXCEPTION_RECORD结构和包含机器状态信息的


-------------------------------------------------------- KeyGTK3Win32GetExitCodeProcess ----
GetExitCodeProcess    GetExitCodeProcess函数检索指定进程的终止状态。
语法
参数
【hProcess】标识过程。Windows NT：句柄必须具有PROCESS_QUERY_INFORMATION权限。有关详细信息，请参阅过程对象.【lpExitCode】指向32位变量以


-------------------------------------------------------- KeyGTK3Win32GetExitCodeThread ----
GetExitCodeThread    GetExitCodeThread函数检索指定线程的终止状态。
语法
参数
【hThread】标识线程。Windows NT：句柄必须具有THREAD_QUERY_INFORMATION权限。有关详细信息，请参阅线程对象.【lpExitCode】指向32位变量以接收


-------------------------------------------------------- KeyGTK3Win32GetExpandedName ----
GetExpandedName    如果通过使用Microsoft文件压缩实用程序（COMPRESS.EXE）压缩了该文件并且指定了/r选项，则GetExpandedName函数将检索压缩文件的原始名称。
语法



-------------------------------------------------------- KeyGTK3Win32GetExplicitEntriesFromAcl ----
GetExplicitEntriesFromAcl    [New - Windows NT]GetExplicitEntriesFromAcl函数检索描述访问控制列表（ACL）中访问控制条目（ACE）的EXPLICIT_ACCESS结构的数组。
语法
参数
【ACL】指向获取ACE信息的ACL。【pcCountOfExplicitEntries】指向【pListOfExplicitEntries数组。】中返回的EXPLICIT_ACCESS结构


-------------------------------------------------------- KeyGTK3Win32GetFiberData ----
GetFiberData    GetFiberData函数返回与当前光纤相关联的光纤数据。
语法
参数
此函数无参数。
返回值
返回值是当前运行光纤的光纤数据。
描述
光纤数据是传递给【lpParameter参数】参数中CreateFiber或ConvertThreadToFiber函


-------------------------------------------------------- KeyGTK3Win32GetFileAttributes ----
GetFileAttributes    GetFileAttributes函数返回指定文件或目录的属性。
语法
参数
【lpFileName】指向一个以空字符结尾的字符串，指定文件或目录的名称。Windows NT：对于MAX_PATH字符的路径，默认字符串大小限制。此限制与GetFileAttribute


-------------------------------------------------------- KeyGTK3Win32GetFileAttributesEx ----
GetFileAttributesEx    [New - Windows NT]GetFileAttributesEx函数获取有关指定文件或目录的属性信息。此函数类似于GetFileAttributes函数。GetFileAttributes返回一组FAT样式的属性信息。GetFileAttributesEx旨在获取其他文件或目录属性信息集。目前，GetFileAttributeEx获得了一组作为FAT样式属性信息超集的标准属性。
语法
参数
【lpFileName】指向指定文件或目录的以空值终止的字符串的指针。默认情况下，此字符串限制为MAX_PATH个字符。限制与GetFileAttributesEx函数如何解析路径有关。通过


-------------------------------------------------------- KeyGTK3Win32GetFileInformationByHandle ----
GetFileInformationByHandle    GetFileInformationByHandle函数检索有关指定文件的信息。
语法
参数
【HFILE】处理您要获取有关信息的文件。该手柄不应该是管道手柄。GetFileInformationByHandle函数不适用于管道手柄。【lpFileInformation】指向BY_H


-------------------------------------------------------- KeyGTK3Win32GetFileSecurity ----
GetFileSecurity    GetFileSecurity函数获取有关文件或目录安全性的指定信息。所获得的信息受到呼叫者的访问权限和权限的约束。
语法
参数
【lpFileName】指向以null结尾的字符串，指定检索安全信息的文件或目录。【RequestedInformation】指定一个SECURITY_INFORMATION结构，用于标识正


-------------------------------------------------------- KeyGTK3Win32GetFileSize ----
GetFileSize    GetFileSize函数检索指定文件的大小（以字节为单位）。
语法
参数
【HFILE】指定要返回大小的文件的打开句柄。必须使用GENERIC_READ或GENERIC_WRITE访问该文件创建句柄。【lpFileSizeHigh】指向返回文件大小高位字的变量。如


-------------------------------------------------------- KeyGTK3Win32GetFileTime ----
GetFileTime    GetFileTime函数检索文件创建，上次访问和上次修改的日期和时间。
语法
参数
【HFILE】标识要获取日期和时间的文件。必须使用GENERIC_READ访问该文件创建文件句柄。【lpCreationTime】指向FILETIME结构以接收文件创建的日期和时间。如果应用


-------------------------------------------------------- KeyGTK3Win32GetFileTitle ----
GetFileTitle    GetFileTitle函数返回由【lpszFile】参数标识的文件的名称。
语法
参数
【lpszFile】指向文件的名称和位置。【lpszTitle】指向缓冲区的指针，其中函数将复制文件的名称。【cbBuf】指定【lpszTitle】参数指向的缓冲区的长度（以字符为单位）。



-------------------------------------------------------- KeyGTK3Win32GetFileType ----
GetFileType    GetFileType函数返回指定文件的类型。
语法
参数
【HFILE】标识一个打开的文件句柄。
返回值
返回值是以下值之一：值含义FILE_TYPE_UNKNOWN指定文件的类型是未知的。FILE_TYPE_DISK指定的文件是磁盘文件。FI


-------------------------------------------------------- KeyGTK3Win32GetFileVersionInfo ----
GetFileVersionInfo    GetFileVersionInfo函数返回有关指定文件的版本信息。与其他文件安装函数一样，GetFileVersionInfo仅适用于Win32文件映像。它不适用于16位Windows文件映像。
语法
参数
【lptstrFilename】指向指定感兴趣文件的以null结尾的文件名字符串的指针。【dwHandle】此参数被忽略。【This function is often used to ge


-------------------------------------------------------- KeyGTK3Win32GetFileVersionInfoSize ----
GetFileVersionInfoSize    GetFileVersionInfoSize函数确定操作系统是否可以获取有关指定文件的版本信息。如果版本信息可用，GetFileVersionInfoSize返回该信息的字节大小。与其他文件安装函数一样，GetFileVersionInfo仅适用于Win32文件映像。它不适用于16位Windows文件映像。
语法
参数
【lptstrFilename】指向指定感兴趣文件的以null结尾的文件名字符串的指针。【lpdwHandlexh】指向函数设置为零的变量的指针。
返回值
如果函数成功，则返回值是文件版


-------------------------------------------------------- KeyGTK3Win32GetFocus ----
GetFocus    如果窗口与调用线程的消息队列相关联，则GetFocus函数将检索具有键盘焦点的窗口的句柄。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是具有键盘焦点的窗口的句柄。如果调用线程的消息队列没有与键盘焦点关联的窗口，则返回值为NULL。
描述
即使GetFocus返回NULL


-------------------------------------------------------- KeyGTK3Win32GetFontData ----
GetFontData    GetFontData函数检索TrueType字体的字体度量数据。
语法
参数
【HDC】标识设备上下文。【dwTable】指定要从中检索字体数据的字体度量表的名称。此参数可以标识由Microsoft Corporation发布的TrueType字体文件规范中记录的度量


-------------------------------------------------------- KeyGTK3Win32GetFontLanguageInfo ----
GetFontLanguageInfo    [Now Supported on Windows NT]GetFontLanguageInfo函数返回有关指定显示上下文的当前选定字体的信息。应用程序通常使用此信息和GetCharacterPlacement函数来准备一个字符串进行显示。
语法
参数
【HDC】处理显示上下文。
返回值
返回值标识当前所选字体的特征。如果字体为“标准化”，该函数返回0，并将其视为简单的拉丁字体;如果发生错误，它返回GCP_ERROR。否则，函数返回以下


-------------------------------------------------------- KeyGTK3Win32GetForegroundWindow ----
GetForegroundWindow    GetForegroundWindow函数返回前台窗口的句柄（用户当前正在使用的窗口）。系统为创建前台窗口的线程分配比其他线程稍高的优先级。
语法
参数
此函数无参数。
返回值
返回值是前台窗口的句柄。



-------------------------------------------------------- KeyGTK3Win32GetForm ----
GetForm    GetForm函数使用描述打印机指定表单的数据初始化FORM_INFO_1结构。
语法
参数
【hPrinter】标识打印机。【pFormName】指向指定表单名称的以null结尾的字符串。【水平】指定【P成型】指向的结构的版本。此值必须为1。【P成型】指向接收初始化FORM_INF


-------------------------------------------------------- KeyGTK3Win32GetFreeSpace ----
GetFreeSpace         GetFreeSpace函数已过时。它提供了简化16位Windows应用程序的移植。基于Win32的应用程序应使用GlobalMemoryStatus函数。


-------------------------------------------------------- KeyGTK3Win32GetFullPathName ----
GetFullPathName    GetFullPathName函数检索指定文件的完整路径和文件名。
语法
参数
【lpFileName】指向一个空值终止的字符串，指定一个有效的文件名。该字符串可以使用短（8.3格式）或长文件名。【nBufferLength】指定驱动器和路径的缓冲区的大小（以字符为单位


-------------------------------------------------------- KeyGTK3Win32GetGlyphOutline ----
GetGlyphOutline    GetGlyphOutline函数检索在指定设备上下文中选择的TrueType字体中的字符的轮廓或位图。
语法
参数
【HDC】标识设备上下文。【飞行】指定要返回数据的字符。【UFormat】指定函数检索的数据格式。使用以下值之一：值含义GGO_BITMAP该函数检索字形位图。有关内存分配的信息，请参阅以下


-------------------------------------------------------- KeyGTK3Win32GetGraphicsMode ----
GetGraphicsMode    GetGraphicsMode函数检索指定设备上下文的当前图形模式。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，返回值就是当前的图形模式。它可以是以下值之一：值含义GM_COMPATIBLE当前的图形模式是兼容的图形模式，这是与Windows 3.


-------------------------------------------------------- KeyGTK3Win32GetHandleInformation ----
GetHandleInformation    GetHandleInformation函数获取有关对象句柄的某些属性的信息。信息作为一组位标志获得。
语法
参数
【hObject】指定对象的句柄。GetHandleInformation函数获取有关该对象句柄的信息。【lpdwFlagsaf】指向一个变量以接收一组指定对象句柄属性的位标志。定义了以下标


-------------------------------------------------------- KeyGTK3Win32GetICMProfile ----
GetICMProfile    GetICMProfile函数检索与指定设备上下文关联的设备的颜色配置文件的名称。
语法
参数
【HDC】处理设备上下文。【lpcbName】指向DWORD的指针，其中包含接收文件名的缓冲区的大小（以字节或字符为单位），具体取决于是使用ANSI或Unicode版本的函数。如果缓冲区太小


-------------------------------------------------------- KeyGTK3Win32GetIconInfo ----
GetIconInfo    GetIconInfo函数检索有关指定图标或光标的信息。
语法
参数
【惠康】标识图标或光标。要检索有关标准图标或游标的信息，请指定以下值之一：值含义IDC_ARROW箭头光标IDC_IBEAMI-beam光标IDC_WAIT沙漏光标IDC_CROSS十字准线


-------------------------------------------------------- KeyGTK3Win32GetInputState ----
GetInputState    GetInputState函数确定调用线程的消息队列中是否有鼠标按钮或键盘消息。
语法
参数
此函数无参数。
返回值
如果队列包含一个或多个新的鼠标按钮或键盘消息，则返回值不为零。如果队列中没有新的鼠标按钮或键盘消息，则返回值为零。



-------------------------------------------------------- KeyGTK3Win32GetJob ----
GetJob    GetJob函数检索指定打印机的打印作业数据。
语法
参数
【hPrinter】标识检索打印作业数据的打印机。【JobId】标识应检索数据的打印作业。【水平】指定【pJob】指向的结构的级别。该值必须是1或2。【pJob】指向包含JOB_INFO_1


-------------------------------------------------------- KeyGTK3Win32GetKBCodePage ----
GetKBCodePage    提供GetKBCodePage函数以兼容早期版本的Windows。在Win32应用程序编程接口（API）中，它只调用GetOEMCP函数。新应用程序应使用GetOEMCP函数。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是OEM代码页标识符，如果注册表值不可读，则它是默认标识符。有关OEM代码页标识符的列表，请参阅GetOEMCP.



-------------------------------------------------------- KeyGTK3Win32GetKernelObjectSecurity ----
GetKernelObjectSecurity    GetKernelObjectSecurity函数检索保护内核对象的安全描述符的副本。
语法
参数
【处理】标识一个内核对象。【RequestedInformation】指定一个SECURITY_INFORMATION结构，用于标识正在请求的安全信息。【pSecurityDescripto


-------------------------------------------------------- KeyGTK3Win32GetKerningPairs ----
GetKerningPairs    GetKerningPairs函数检索指定设备上下文当前选定字体的字符间距对。
语法
参数
【HDC】标识设备上下文。【nNumPairs】指定适合【lpkrnpair】数组的对数。如果字体超过【nNumPairs】字距对，则返回错误。【lpkrnpair】指向KERNINGPAI


-------------------------------------------------------- KeyGTK3Win32GetKeyboardLayout ----
GetKeyboardLayout    [Now Supported on Windows NT]GetKeyboardLayout函数检索指定线程的活动键盘布局。如果【dwLayout】参数为零，则返回活动线程的布局。
语法
参数
【dwLayout】标识要查询的线程或当前线程为零。
返回值
返回值是线程的键盘布局句柄。低字包含标识输入语言的区域标识符，高字包含识别键盘的物理布局的设备句柄。



-------------------------------------------------------- KeyGTK3Win32GetKeyboardLayoutList ----
GetKeyboardLayoutList    [Now Supported on Windows NT]GetKeyboardLayoutList函数检索与系统中当前输入区域设置集相对应的键盘布局句柄。该函数将句柄复制到给定的缓冲区。
语法
参数
【nBuff】指定缓冲区可以容纳的最大句柄数。【lpList】指向缓冲区，一个接收键盘布局句柄的数组。
返回值
如果函数成功，则返回值是复制到缓冲区的布局句柄数，或者如果【nBuff】为


-------------------------------------------------------- KeyGTK3Win32GetKeyboardLayoutName ----
GetKeyboardLayoutName    GetKeyboardLayoutName函数检索活动键盘布局的名称。
语法
参数
【pwszKLID】指向至少KL_NAMELENGTH个字符的缓冲区，用于接收键盘布局的名称，包括NULL终止符。这将是提供给LoadKeyboardLayout函数的字符串的副本，除非进行


-------------------------------------------------------- KeyGTK3Win32GetKeyboardState ----
GetKeyboardState    GetKeyboardState函数将256个虚拟键的状态复制到指定的缓冲区。
语法
参数
【lpKeyState】指向将接收每个虚拟键的状态数据的256字节数组。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError


-------------------------------------------------------- KeyGTK3Win32GetKeyboardType ----
GetKeyboardType    GetKeyboardType函数检索有关当前键盘的信息。
语法



-------------------------------------------------------- KeyGTK3Win32GetKeyNameText ----
GetKeyNameText    GetKeyNameText函数检索表示键名称的字符串。
语法



-------------------------------------------------------- KeyGTK3Win32GetKeyState ----
GetKeyState    GetKeyState函数检索指定虚拟键的状态。该状态指定键是上，下还是切换（每次按下键时__交替关闭）。
语法
参数
【nVirtKey】指定虚拟键。如果所需的虚拟键是字母或数字（A到Z，a到z或0到9），则必须将【nVirtKey】设置为该字符的ASCII值。对于其他键，它必须是虚拟键代码。如果使用非英文


-------------------------------------------------------- KeyGTK3Win32GetLargestConsoleWindowSize ----
GetLargestConsoleWindowSize    根据当前的字体和显示的大小，GetLargestConsoleWindowSize函数返回最大可能的控制台窗口的大小。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。
返回值
如果函数成功，则返回值是一个COORD结构，它指定了最大可能的控制台窗口中的字符单元行数（X成员）和列（Y成员）的数量。否


-------------------------------------------------------- KeyGTK3Win32GetLastActivePopup ----
GetLastActivePopup    GetLastActivePopup函数确定指定窗口拥有的弹出窗口最近处于活动状态。
语法
参数
【的hWnd】标识所有者窗口。
返回值
返回值标识最近活动的弹出窗口。返回值与【的hWnd】参数相同，如果满足以下任一条件：* 【的hWnd】标识的窗口最近是活动的。* 【的hWnd】标


-------------------------------------------------------- KeyGTK3Win32GetLastError ----
GetLastError    GetLastError函数返回调用线程的最后一个错误代码值。最后一个错误代码基于每个线程进行维护。多个线程不会覆盖彼此的最后一个错误代码。
语法
参数
此函数无参数。
返回值
返回值是调用线程的最后一个错误代码值。函数通过调用SetLastError函数设置此值。每个参考页面的回报值部分说明了函数设置最后一个错误代码的条件。
描述



-------------------------------------------------------- KeyGTK3Win32GetLengthSid ----
GetLengthSid    GetLengthSid函数返回有效SID结构的长度（以字节为单位）。SID是安全标识符。
语法
参数
【PSID】指向返回长度的SID结构。该结构被认为是有效的。
返回值
如果函数成功，则返回值为SID结构的长度（以字节为单位）。如果SID结构无效，则返回值未定义。要获取扩展错误信息，请


-------------------------------------------------------- KeyGTK3Win32GetLocaleInfo ----
GetLocaleInfo    GetLocaleInfo函数检索有关区域设置的信息。
语法
参数
【语言环境】指定检索信息的区域设置。此参数可以是由MAKELCID宏或以下预定义值之一创建的区域设置标识符：LOCALE_SYSTEM_DEFAULT默认系统区域设置。LOCALE_USER


-------------------------------------------------------- KeyGTK3Win32GetLocalTime ----
GetLocalTime    GetLocalTime函数检索当前的本地日期和时间。
语法
参数
【lpSystemTime】指向SYSTEMTIME结构以接收当前的当地日期和时间。
返回值
此函数不返回值。



-------------------------------------------------------- KeyGTK3Win32GetLogColorSpace ----
GetLogColorSpace    GetLogColorSpace函数检索由指定句柄标识的逻辑颜色空间的信息。
语法
参数
【hColorSpace】处理逻辑色彩空间。【lpBuffer】指向接收逻辑颜色空间信息的LOGCOLORSPACE结构的指针。【服务提供商】缓冲区的最大大小（以字节为单位）。
返回值



-------------------------------------------------------- KeyGTK3Win32GetLogicalDrives ----
GetLogicalDrives    GetLogicalDrives函数返回表示当前可用磁盘驱动器的位掩码。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是表示当前可用磁盘驱动器的位掩码。位位置0（最低有效位）为驱动器A，位位置1为驱动器B，位位置2为驱动器C，依此类推。如果函数失败，返回值为


-------------------------------------------------------- KeyGTK3Win32GetLogicalDriveStrings ----
GetLogicalDriveStrings    GetLogicalDriveStrings函数使用指定系统中有效驱动器的字符串填充缓冲区。
语法
参数
【nBufferLength】指定【lpBuffer】指向的缓冲区的最大大小（以字符为单位）。此大小不包括终止空字符。【lpBuffer】指向缓冲区，该缓冲区接收一系列以null结尾的字符串


-------------------------------------------------------- KeyGTK3Win32GetMailslotInfo ----
GetMailslotInfo    GetMailslotInfo函数检索有关指定邮槽的信息。
语法
参数
【hMailslot】标识一个邮槽。CreateMailslot函数必须创建此句柄。【lpMaxMessageSize】指向缓冲区，指定函数返回时允许此邮槽的最大邮件大小（以字节为单位）。该


-------------------------------------------------------- KeyGTK3Win32GetMapMode ----
GetMapMode    GetMapMode函数检索当前的映射模式。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值指定映射模式。如果函数失败，返回值为零。
描述
以下列表描述了各种映射模式：值描述MM_ANISOTROPIC逻辑单位通过任


-------------------------------------------------------- KeyGTK3Win32GetMenu ----
GetMenu    GetMenu函数检索分配给给定窗口的菜单的句柄。
语法
参数
【的hWnd】标识检索其菜单句柄的窗口。
返回值
如果函数成功，返回值就是菜单的句柄。如果给定的窗口没有菜单，则返回值为NULL。如果窗口是子窗口，返回值是未定义的。



-------------------------------------------------------- KeyGTK3Win32GetMenuCheckMarkDimensions ----
GetMenuCheckMarkDimensions    此函数已过时。使用具有CXMENUCHECK和CYMENUCHECK值的GetSystemMetrics来检索位图维度。GetMenuCheckMarkDimensions函数返回默认复选标记位图的尺寸。Windows在检查菜单项旁边显示此位图。在调用SetMenuItemBitmaps函数替换菜单项的默认复选标记位图之前，应用程序必须通过调用GetMenuCheckMarkDimensions来确定正确的位图大小。
语法
参数
此函数无参数。
返回值
返回值指定默认复选标记位图的高度和宽度（以像素为单位）。高位词包含高度;低位字包含宽度。



-------------------------------------------------------- KeyGTK3Win32GetMenuContextHelpId ----
GetMenuContextHelpId    GetMenuContextHelpId函数检索与指定菜单相关联的帮助上下文标识符。
语法
参数
【HMENU】处理要检索帮助上下文标识符的菜单。
返回值
如果菜单有一个或另一个则返回帮助上下文标识符。



-------------------------------------------------------- KeyGTK3Win32GetMenuDefaultItem ----
GetMenuDefaultItem    [Now Supported on Windows NT]GetMenuDefaultItem函数确定指定菜单上的默认菜单项。
语法
参数
【HMENU】处理到要检索默认菜单项的菜单。【fByPos】指定是否检索菜单项的标识符或其位置的值。如果此参数为FALSE，则返回标识符。否则返回位置。【gmdiFlags】指定函数如何搜索


-------------------------------------------------------- KeyGTK3Win32GetMenuItemCount ----
GetMenuItemCount    GetMenuItemCount函数确定指定菜单中的项目数。
语法
参数
【HMENU】标识要检查的菜单的句柄。
返回值
如果函数成功，则返回值指定菜单中的项目数。如果函数失败，返回值为-1。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32GetMenuItemID ----
GetMenuItemID    GetMenuItemID函数检索位于菜单中指定位置的菜单项的菜单项标识符。
语法
参数
【HMENU】标识包含其标识符要检索的项目的菜单。【nPos】指定要检索其标识符的菜单项的基于零的相对位置。
返回值
如果函数成功，则返回值指定给定菜单项的标识符。如果菜单项标识符为NU


-------------------------------------------------------- KeyGTK3Win32GetMenuItemInfo ----
GetMenuItemInfo    [Now Supported on Windows NT]GetMenuItemInfo函数检索有关菜单项的信息。
语法
参数
【HMENU】处理包含菜单项的菜单。【藤】要获取有关信息的菜单项的标识符或位置。该参数的含义取决于【fByPosition】的值。【fByPosition】指定【藤】的含义的值。如果此参数为


-------------------------------------------------------- KeyGTK3Win32GetMenuItemRect ----
GetMenuItemRect    [Now Supported on Windows NT]GetMenuItemRect函数检索指定菜单项的边界矩形。
语法
参数
【的hWnd】处理到包含菜单的窗口。【HMENU】处理菜单。【藤】基于零的菜单项的位置。【Handle to a menu.】指向RECT结构的指针，该结构接收以屏幕坐标表示的指定菜单项的边


-------------------------------------------------------- KeyGTK3Win32GetMenuState ----
GetMenuState    GetMenuState函数检索与指定菜单项相关联的菜单标志。如果菜单项打开子菜单，此函数也返回子菜单中的项目数。GetMenuItemInfo函数已被GetMenuItemInfo函数取代。但是，如果您不需要GetMenuItemInfo的任何扩展函数，您仍然可以使用GetMenuState.
语法
参数
【HMENU】标识包含要检索其标志的菜单项的菜单。【的uId】指定由【uFlags】参数确定的要检索菜单标志的菜单项。【uFlags】指定如何解释【的uId】参数。此参数可以是以下值之一：值


-------------------------------------------------------- KeyGTK3Win32GetMenuString ----
GetMenuString    GetMenuString函数将指定菜单项的文本字符串复制到指定的缓冲区中。
语法
参数
【HMENU】标识菜单。【uIDItem】指定要更改的菜单项，由【//菜单标志】参数确定。【lpString】指向要接收空终止字符串的缓冲区。如果【lpString】为NULL，则该函数返回


-------------------------------------------------------- KeyGTK3Win32GetMessage ----
GetMessage    GetMessage函数从调用线程的消息队列中检索消息，并将其放在指定的结构中。此函数可以检索与指定窗口相关联的消息和通过PostThreadMessage 函数发布的线程消息。该函数检索位于指定的消息值范围内的消息。GetMessage不检索属于其他线程或应用程序的Windows的邮件。
语法
参数
【LPMSG】指向从线程的消息队列接收消息信息的MSG结构。【的hWnd】标识要检索其消息的窗口。一个值具有特殊意义：值含义NULLGetMessage通过PostThreadMessage


-------------------------------------------------------- KeyGTK3Win32GetMessageExtraInfo ----
GetMessageExtraInfo    GetMessageExtraInfo函数检索与GetMessage或PeekMessage函数检索到的最后一条消息相关联的额外信息。该信息可以被驱动程序添加到指示设备或键盘的消息中。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值指定额外的信息。额外信息的含义是具体的设备。



-------------------------------------------------------- KeyGTK3Win32GetMessagePos ----
GetMessagePos    GetMessagePos函数返回一个长的值，它给出了屏幕坐标中的光标位置。此位置是由GetMessage函数检索到的最后一条消息时光标所占据的位置。
语法
参数
此函数无参数。
返回值
返回值指定光标位置的x坐标和y坐标。x坐标在LOWORD中，y坐标在HIWORD中。
描述
如上所述，x坐标在返回值的低位字中; y坐标在高位字中。如果将返回


-------------------------------------------------------- KeyGTK3Win32GetMessageTime ----
GetMessageTime    GetMessageTime函数返回当前线程的消息队列中GetMessage函数检索到的最后一条消息的消息时间。时间是一个长整型，指定从系统启动时间到消息创建时间（即放置在线程的消息队列中）的经过时间（以毫秒为单位）。
语法
参数
此函数无参数。
返回值
返回值指定消息时间。
描述
来自GetMessageTime函数的返回值不一定在后续消息之间增加，因为如果定时器计数超过长整数的最大值，则值将返回为零。要计算


-------------------------------------------------------- KeyGTK3Win32GetMetaFile ----
GetMetaFile  GetMetaFile函数创建一个标识给定Windows格式的元文件的句柄。Win32 API中没有实现GetMetaFile函数。此函数用于与16位版本的Microsoft Windows兼容。基于Win32的应用程序应使用GetEnhMetaFile函数。


-------------------------------------------------------- KeyGTK3Win32GetMetaFileBitsEx ----
GetMetaFileBitsEx    GetMetaFileBitsEx函数检索Windows格式的图元文件的内容，并将它们复制到指定的缓冲区。提供此函数以兼容早期版本的Microsoft Windows。基于Win32的应用程序应使用GetEnhMetaFileBits函数。
语法
参数
【HMF】标识Windows格式的图元文件。【服务提供商】指定接收数据的缓冲区的大小（以字节为单位）。【// address of metafile data】指向缓冲区以接收元文件数据。缓


-------------------------------------------------------- KeyGTK3Win32GetMetaRgn ----
GetMetaRgn    GetMetaRgn函数检索指定设备上下文的当前配额。
语法
参数
【HDC】标识设备上下文。【HRGN】在调用函数之前标识一个现有区域。函数返回后，此参数标识当前区域的副本。
返回值
如果函数成功，则返回值为1。如果函数失败，返回值为零。
描述
如


-------------------------------------------------------- KeyGTK3Win32GetMiterLimit ----
GetMiterLimit    GetMiterLimit函数返回指定设备上下文的斜角限制。
语法
参数
【HDC】标识设备上下文。【// address of variable receiving miter limit】指向将返回当前斜角限制的浮点值。
返回值
如果函数成功，返回值不为零


-------------------------------------------------------- KeyGTK3Win32GetModuleFileName ----
GetModuleFileName    GetModuleFileName函数检索包含指定模块的可执行文件的完整路径和文件名。
语法
参数
【HMODULE】标识正在请求其可执行文件名的模块。如果此参数为NULL，则GetModuleFileName返回用于创建调用进程的文件的路径。【lpFileName的对象】指向填充有给定模


-------------------------------------------------------- KeyGTK3Win32GetModuleHandle ----
GetModuleHandle    如果文件已被映射到调用进程的地址空间，GetModuleHandle函数将返回指定模块的模块句柄。
语法
参数
【lpModuleName】指向一个以空字符结尾的字符串，命名一个Win32模块（一个.DLL或.EXE文件）。如果省略了文件扩展名，则附加默认库扩展名.DLL。文件名字符串可以包括一个尾点


-------------------------------------------------------- KeyGTK3Win32GetMsgProc ----
GetMsgProc    GetMsgProc挂接过程是应用程序定义或库定义的回调函数，只要GetMessage函数从应用程序消息队列中检索到消息，系统就会调用该函数。在将检索到的消息传递到目标窗口过程之前，系统将该消息传递给挂钩过程。
语法
参数
【码】指定挂接过程是否处理消息。如果【码】为HC_ACTION，则挂接过程必须处理消息。如果【码】小于零，挂钩过程必须将消息传递给CallNextHookEx函数，无需进一步处理，并应返回C


-------------------------------------------------------- KeyGTK3Win32GetMultipleTrustee ----
GetMultipleTrustee    [New - Windows NT]提供GetMultipleTrustee函数供将来使用。不要在Windows NT版本4.0上调用它。


-------------------------------------------------------- KeyGTK3Win32GetMultipleTrusteeOperation ----
GetMultipleTrusteeOperation    [New - Windows NT]提供GetMultipleTrusteeOperation函数供将来使用。不要在Windows NT版本4.0上调用它。


-------------------------------------------------------- KeyGTK3Win32GetNamedPipeHandleState ----
GetNamedPipeHandleState    GetNamedPipeHandleState函数检索有关指定命名管道的信息。返回的信息可以在命名管道的实例的生命周期内变化。
语法
参数
【hNamedPipe】标识需要信息的命名管道。句柄必须具有对命名管道的GENERIC_READ访问权限。【lpState】指向一个32位变量，指示句柄的当前状态。如果不需要此信息，此参数可


-------------------------------------------------------- KeyGTK3Win32GetNamedPipeInfo ----
GetNamedPipeInfo    GetNamedPipeInfo函数检索有关指定命名管道的信息。
语法
参数
【hNamedPipe】标识命名的管道实例。句柄必须具有对命名管道的GENERIC_READ访问权限。【的lpFlags】指向一个32位变量，指示命名管道的类型。如果不需要此信息，此参数可以


-------------------------------------------------------- KeyGTK3Win32GetNamedSecurityInfo ----
GetNamedSecurityInfo    [New - Windows NT]GetNamedSecurityInfo函数检索由name指定的对象的安全描述符副本。
语法
参数
【pObjectName】指向以null结尾的字符串，指定从中检索安全信息的对象的名称。有关不同对象类型的字符串格式的说明，请参阅SE_OBJECT_TYPE.【ObjectType】指定S


-------------------------------------------------------- KeyGTK3Win32GetNearestColor ----
GetNearestColor    GetNearestColor函数返回从系统调色板中标识颜色的颜色值，该颜色值将在使用指定的颜色值时显示。
语法
参数
【HDC】标识设备上下文。【crColor】指定标识所请求颜色的颜色值。
返回值
如果函数成功，则返回值会从系统调色板中识别与给定颜色值对应的颜色。如果函数失败，返回值为CLR_INVA


-------------------------------------------------------- KeyGTK3Win32GetNearestPaletteIndex ----
GetNearestPaletteIndex    GetNearestPaletteIndex函数检索最接近匹配指定颜色值的指定逻辑调色板中条目的索引。
语法
参数
【HPAL】标识逻辑调色板。【crColor】指定要匹配的颜色。
返回值
如果函数成功，则返回值是逻辑调色板中条目的索引。如果函数失败，返回值为CLR_INVALID。要获取扩展错误信息


-------------------------------------------------------- KeyGTK3Win32GetNextDlgGroupItem ----
GetNextDlgGroupItem    GetNextDlgGroupItem函数检索对话框中指定控件之前（或后）的一组控件中的第一个控件的句柄。
语法
参数
【hDlg】标识正在搜索的对话框。【HCTL】标识要用作搜索起点的控件。如果此参数为NULL，该函数将使用对话框中的最后一个（或第一个）控件作为搜索的起始点。【bPrevious】指定该函数


-------------------------------------------------------- KeyGTK3Win32GetNextDlgTabItem ----
GetNextDlgTabItem    GetNextDlgTabItem函数检索具有指定控件之前（或后）的WS_TABSTOP样式的第一个控件的句柄。
语法
参数
【hDlg】标识要搜索的对话框。【HCTL】标识要用作搜索起点的控件。如果此参数为NULL，该函数将使用对话框中的最后一个（或第一个）控件作为搜索的起始点。【bPrevious】指定函数如何


-------------------------------------------------------- KeyGTK3Win32GetNextWindow ----
GetNextWindow    GetNextWindow函数检索Z订单中下一个或上一个窗口的句柄。下一个窗口在指定的窗口下方;以前的窗口在上面。如果指定的窗口是最上面的窗口，则该函数将检索下一个（或上一个）最上面的窗口的句柄。如果指定的窗口是顶级窗口，则该函数将检索下一个（或上一个）顶级窗口的句柄。如果指定的窗口是子窗口，则该函数将搜索下一个（或上一个）子窗口的句柄。
语法
参数
【的hWnd】标识一个窗口根据【WCMD】参数的值，检索到的窗口句柄相对于此窗口。【WCMD】指定函数是否返回下一个窗口或上一个窗口的句柄。此参数可以是以下值之一：值含义GW_HWNDNEX


-------------------------------------------------------- KeyGTK3Win32GetNumberFormat ----
GetNumberFormat    GetNumberFormat函数将数字字符串格式化为为指定区域设置定制的数字字符串。
语法
参数
【语言环境】指定要格式化数字字符串的区域设置。如果【lpFormat】为NULL，则该函数根据该区域设置的数字格式对字符串进行格式化。如果【lpFormat】不为NULL，则该函数仅对NUM


-------------------------------------------------------- KeyGTK3Win32GetNumberOfConsoleInputEvents ----
GetNumberOfConsoleInputEvents    GetNumberOfConsoleInputEvents函数检索控制台输入缓冲区中未读输入记录的数量。
语法
参数
【hConsoleInput】标识控制台输入缓冲区。句柄必须具有GENERIC_READ权限。【lpcNumberOfEvents】指向接收控制台输入缓冲区中未读输入记录数的32位变量。



-------------------------------------------------------- KeyGTK3Win32GetNumberOfConsoleMouseButtons ----
GetNumberOfConsoleMouseButtons    GetNumberOfConsoleMouseButtons函数检索当前控制台使用的鼠标上的按钮数量。
语法
参数
【lpNumberOfMouseButtons】指向接收鼠标按钮数量的32位变量。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLast


-------------------------------------------------------- KeyGTK3Win32GetNumberOfEventLogRecords ----
GetNumberOfEventLogRecords    GetNumberOfEventLogRecords函数检索指定事件日志中的记录数。
语法
参数
【hEventLog】标识打开的事件日志。该句柄由OpenEventLog或OpenBackupEventLog函数返回。【NumberOfRecords】指向接收给定事件日志中记录数的变量


-------------------------------------------------------- KeyGTK3Win32GetObject ----
GetObject    GetObject函数获取有关指定图形对象的信息。根据图形对象，该函数将填充BITMAP，DIBSECTION，EXTLOGPEN，LOGBRUSH，LOGFONT或LOGPEN结构或表条目数（对于逻辑调色板），进入指定的缓冲区。
语法
参数
【hgdiobj】感兴趣的图形对象的句柄。这可以是以下之一的句柄：通过调用CreateDIBSection函数创建的逻辑位图，画笔，字体，调色板，笔或与设备无关的位图。【cbBuffer】指


-------------------------------------------------------- KeyGTK3Win32GetObjectType ----
GetObjectType    GetObjectType标识指定对象的类型。
语法
参数
【h】标识对象。
返回值
如果函数成功，则返回值标识对象。该值可以是以下之一：值含义OBJ_BITMAP位图OBJ_BRUSH刷OBJ_FONT字形OBJ_PAL调色板OBJ_PEN钢笔


-------------------------------------------------------- KeyGTK3Win32GetOEMCP ----
GetOEMCP    GetOEMCP函数检索系统的当前OEM代码页标识符。（OEM代表原始设备制造商。）
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是系统的当前OEM代码页标识符，如果没有代码页是当前的，则返回默认标识符。
描述
以下是OEM代码页标识符：识别码含义437MS-DOS


-------------------------------------------------------- KeyGTK3Win32GetOldestEventLogRecord ----
GetOldestEventLogRecord    GetOldestEventLogRecord函数检索指定事件日志中最早记录的绝对记录号。
语法
参数
【hEventLog】标识打开的事件日志。该句柄由OpenEventLog或OpenBackupEventLog函数返回。【OldestRecord】指向接收给定事件日志中最早记录的绝对记录


-------------------------------------------------------- KeyGTK3Win32GetOpenClipboardWindow ----
GetOpenClipboardWindow    GetOpenClipboardWindow函数检索当前打开剪贴板的窗口的句柄。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是打开剪贴板的窗口的句柄。如果没有窗口打开剪贴板，则返回值为NULL。要获取扩展错误信息，请调用GetLastError.
描述
如果应


-------------------------------------------------------- KeyGTK3Win32GetOpenFileName ----
GetOpenFileName    GetOpenFileName函数创建一个“打开”公共对话框，该对话框允许用户指定要打开的文件或文件集的驱动器，目录和名称。
语法
参数
【lpofn】指向OPENFILENAME结构的指针，其中包含用于初始化对话框的信息。当GetOpenFileName返回时，此结构包含有关用户文件选择的信息。
返回值
如果用户指定文件


-------------------------------------------------------- KeyGTK3Win32GetOutlineTextMetrics ----
GetOutlineTextMetrics    GetOutlineTextMetrics函数检索TrueType字体的文本度量。
语法
参数
【HDC】标识设备上下文。【cbData】指定要在其中返回文本度量的数组的大小（以字节为单位）。【lpOTM】指向OUTLINETEXTMETRIC结构的数组。如果此参数为NULL，则该函数


-------------------------------------------------------- KeyGTK3Win32GetOverlappedResult ----
GetOverlappedResult    GetOverlappedResult函数返回指定文件（名称为管道或通信设备）上的重叠操作的结果。
语法
参数
【HFILE】标识文件，命名管道或通信设备。这是通过调用ReadFile WriteFile，ConnectNamedPipe，TransactNamedPipe，DeviceIoContr


-------------------------------------------------------- KeyGTK3Win32GetPaletteEntries ----
GetPaletteEntries    GetPaletteEntries函数从给定的逻辑调色板中检索指定范围的调色板条目。
语法
参数
【HPAL】标识逻辑调色板。【iStartIndex】指定要检索的逻辑调色板中的第一个条目。【的nentries】指定要检索的逻辑调色板中的条目数。【LPPE】指向PALETTEENTRY结


-------------------------------------------------------- KeyGTK3Win32GetParent ----
GetParent    GetParent函数检索指定的子窗口的父窗口的句柄。
语法
参数
【的hWnd】标识要检索父窗口句柄的窗口。
返回值
如果函数成功，则返回值是父窗口的句柄。如果窗口没有父窗口，则返回值为NULL。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32GetPath ----
GetPath    GetPath函数检索定义线路端点的坐标以及在指定设备上下文中选择的路径中找到的曲线的控制点。
语法
参数
【HDC】标识包含封闭路径的设备上下文。【lpPoints】指向包含线路端点和曲线控制点的POINT结构数组。【// address of array of path vertex type


-------------------------------------------------------- KeyGTK3Win32GetPixel ----
GetPixel    GetPixel函数检索指定坐标处的像素的红色，绿色，蓝色（RGB）颜色值。
语法
参数
【HDC】标识设备上下文。【nXPos】指定要检查的像素的逻辑x坐标。【nYPos】指定要检查的像素的逻辑y坐标。
返回值
如果函数成功，则返回值为RGB值。如果像素在当前剪辑区域之外，


-------------------------------------------------------- KeyGTK3Win32GetPolyFillMode ----
GetPolyFillMode    GetPolyFillMode函数检索当前的多边形填充模式。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值指定多边形填充模式，可以是以下值之一：值含义ALTERNATE选择交替模式（在每条扫描线上填充奇数和偶数多边形之间的面积）。WI


-------------------------------------------------------- KeyGTK3Win32GetPrinter ----
GetPrinter    GetPrinter函数检索有关指定打印机的信息。
语法
参数
【hPrinter】处理感兴趣的打印机【水平】指定函数存储到【pPrinter】指向的缓冲区中的PRINTER_INFO_*结构的级别或类型。Windows 95：此值可以是1，2或5。Wi


-------------------------------------------------------- KeyGTK3Win32GetPrinterData ----
GetPrinterData    GetPrinterData函数检索指定打印机的打印机配置数据。
语法
参数
【hPrinter】标识应检索哪个配置数据的打印机。【pValueName】指向一个以null结尾的字符串，指定函数应该检索的数据类型。【PTYPE】指向接收SetPrinterData函数


-------------------------------------------------------- KeyGTK3Win32GetPrinterDriver ----
GetPrinterDriver    GetPrinterDriver函数检索指定打印机的驱动程序数据。
语法
参数
【hPrinter】标识应检索驱动程序数据的打印机。【pEnvironment】指向指定环境的以null结尾的字符串。例如，“Windows NT x86”指定在Intel 80386或80


-------------------------------------------------------- KeyGTK3Win32GetPrinterDriverDirectory ----
GetPrinterDriverDirectory    GetPrinterDriverDirectory函数检索打印机驱动程序目录的路径。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定打印机驱动程序所在的服务器的名称。如果此参数为NULL，则检索本地驱动程序目录路径。【pEnvironment】指向指定环境的以null结尾的字符


-------------------------------------------------------- KeyGTK3Win32GetPrintProcessorDirectory ----
GetPrintProcessorDirectory    GetPrintProcessorDirectory函数检索指定服务器上打印处理器的路径。
语法
参数
【PNAME】指向指定服务器名称的以null结尾的字符串。如果此参数为NULL，则返回本地路径。【pEnvironment】指向指定环境的以null结尾的字符串。例如，“Windows NT


-------------------------------------------------------- KeyGTK3Win32GetPriorityClass ----
GetPriorityClass    GetPriorityClass函数返回指定进程的优先级。该值与进程每个线程的优先级值一起确定每个线程的基本优先级。
语法
参数
【hProcess】标识过程。Windows NT：句柄必须具有PROCESS_QUERY_INFORMATION权限。有关详细信息，请参阅过程对象.
返回值
如果函数成功，则返回值是指


-------------------------------------------------------- KeyGTK3Win32GetPriorityClipboardFormat ----
GetPriorityClipboardFormat    GetPriorityClipboardFormat函数返回指定列表中第一个可用的剪贴板格式。
语法
参数
【paFormatPriorityList】指向按照优先顺序标识剪贴板格式的无符号整数数组。有关剪贴板格式的说明，请参阅SetClipboardData函数。【cFormats】指定【paF


-------------------------------------------------------- KeyGTK3Win32GetPrivateObjectSecurity ----
GetPrivateObjectSecurity    GetPrivateObjectSecurity从受保护的服务器对象的安全描述符中检索信息。
语法
参数
【ObjectDescriptor】指向SECURITY_DESCRIPTOR结构。这是要查询的安全描述符。【SecurityInformation】指定一个SECURITY_INFORMA


-------------------------------------------------------- KeyGTK3Win32GetPrivateProfileInt ----
GetPrivateProfileIntGetPrivateProfileInt函数检索与给定初始化文件的指定部分中的键相关联的整数。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向包含初始化文件中的段名称的以null结尾的字符串。【lpKeyName】指向包含要检索其值的键名称的以null结尾的字符串。此值为字符串的形式; GetPrivat


-------------------------------------------------------- KeyGTK3Win32GetPrivateProfileSection ----
GetPrivateProfileSectionGetPrivateProfileSection函数从初始化文件中检索指定部分的所有键和值。此函数用于与为Windows编写的16位应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向包含初始化文件中的段名称的以null结尾的字符串。【lpReturnedString】指向缓冲区，接收与命名部分关联的密钥名称和值对。缓冲区填充一个或多个以null


-------------------------------------------------------- KeyGTK3Win32GetPrivateProfileSectionNames ----
GetPrivateProfileSectionNamesGetPrivateProfileSectionNames函数检索初始化文件中所有部分的名称。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpszReturnBuffer】指向缓冲区，接收与命名文件关联的段名称。缓冲区填充一个或多个以null结尾的字符串;最后一个字符串后跟一个第二个空字符。【服务提供商】指定由【lpszRe


-------------------------------------------------------- KeyGTK3Win32GetPrivateProfileString ----
GetPrivateProfileStringGetPrivateProfileString函数从初始化文件中的指定部分检索一个字符串。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向一个以null结尾的字符串，指定包含键名称的部分。如果此参数为NULL，则GetPrivateProfileString函数将文件中的所有段名称复制到提供的缓冲区。


-------------------------------------------------------- KeyGTK3Win32GetPrivateProfileStruct ----
GetPrivateProfileStructGetPrivateProfileStruct函数检索与初始化文件给定部分中指定键相关联的数据。当它检索数据时，该函数计算校验和，并将其与数据添加到文件时由WritePrivateProfileStruct函数计算的校验和进行比较。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpszSection】指向包含初始化文件中的段名称的以null结尾的字符串。【lpszKey】指向包含要检索其数据的键名称的以null结尾的字符串。【定义了与值名称一起使用的以下控制代码


-------------------------------------------------------- KeyGTK3Win32GetProcAddress ----
GetProcAddress    GetProcAddress函数返回指定的导出动态链接库（DLL）函数的地址。
语法
参数
【HMODULE】标识包含该函数的DLL模块。LoadLibrary或GetModuleHandle函数返回此句柄。【lpProcName】指向包含函数名的空值终止的字符串，或指定函数的序数


-------------------------------------------------------- KeyGTK3Win32GetProcessAffinityMask ----
GetProcessAffinityMask    GetProcessAffinityMask函数获取指定进程的进程关联掩码和系统的系统关联掩码。进程关联掩码是一个位向量，其中每个位表示允许进程运行的处理器。系统相似性掩码是一个位向量，其中每个位表示配置到系统中的处理器。进程关联掩码是系统相关性掩码的一个适当子集。一个进程只允许在配置到系统中的处理器上运行。
语法
参数
【hProcess】需要亲和力掩模的过程的打开句柄。Windows NT：此句柄必须具有PROCESS_QUERY_INFORMATION权限。有关详细信息，请参阅过程对象.【lpProce


-------------------------------------------------------- KeyGTK3Win32GetProcessHeap ----
GetProcessHeap    GetProcessHeap函数获取调用进程的堆的句柄。然后可以在HeapAlloc，HeapReAlloc，HeapFree和HeapSize函数的呼叫中使用该句柄。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是调用进程的堆的句柄。如果函数失败，返回值为NULL。
描述
GetProcessHeap允许基于Win32的应用程序从进程堆分配内存，


-------------------------------------------------------- KeyGTK3Win32GetProcessHeaps ----
GetProcessHeaps    GetProcessHeaps函数获取对调用进程有效的所有堆的句柄。
语法
参数
【NumberOfHeaps】指定可以存储到【ProcessHeaps】指向的缓冲区中的最大堆处理数。【ProcessHeaps】指向缓冲区以接收堆数组的句柄。
返回值
返回值是对调用进


-------------------------------------------------------- KeyGTK3Win32GetProcessPriorityBoost ----
GetProcessPriorityBoost    [New - Windows NT]GetProcessPriorityBoost函数返回指定进程的优先级提升控制状态。
语法
参数
hProcess处理过程。该句柄必须具有PROCESS_QUERY_INFORMATION访问权限。有关详细信息，请参阅过程对象.pDisablePriorityBoost指向接收优先级提升


-------------------------------------------------------- KeyGTK3Win32GetProcessShutdownParameters ----
GetProcessShutdownParameters    GetProcessShutdownParameters函数检索当前调用进程的关闭参数。
语法
参数
lpdwLevel指向接收关闭优先级的变量。较高的水平首先关闭。系统级关机命令是为系统组件保留的。较高的数字首先关闭。以下是级别约定：值含义000-0FF系统保留上次关机范围。100-1FF


-------------------------------------------------------- KeyGTK3Win32GetProcessTimes ----
GetProcessTimes    GetProcessTimes函数获取有关指定进程的时间信息。
语法
参数
【hProcess】一个打开的句柄，指定寻找定时信息的进程。必须使用PROCESS_QUERY_INFORMATION访问权限创建此句柄。有关详细信息，请参阅过程对象.【lpCreation


-------------------------------------------------------- KeyGTK3Win32GetProcessVersion ----
GetProcessVersion    GetProcessVersion函数获取指定进程期望运行的Windows版本的主版本号和次版本号。
语法



-------------------------------------------------------- KeyGTK3Win32GetProcessWindowStation ----
GetProcessWindowStation    GetProcessWindowStation函数返回与调用进程相关联的窗口工作站的句柄。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是与调用进程相关联的窗口工作站的句柄。如果函数失败，返回值为NULL。如果调用进程不是为Windows NT编写的应用程序，则可能会发生这种


-------------------------------------------------------- KeyGTK3Win32GetProcessWorkingSetSize ----
GetProcessWorkingSetSize    GetProcessWorkingSetSize函数获取指定进程的最小和最大工作集大小。进程的“工作集”是物理RAM存储器中进程当前可见的一组内存页面。这些页面是驻留的，可供应用程序使用，而不会触发页面错误。进程的工作集大小以字节指定。最小和最大工作集大小影响进程的虚拟内存分页行为。
语法
参数
【hProcess】打开一个可以获得工作集大小的进程的句柄。句柄必须具有PROCESS_QUERY_INFORMATION访问权限。有关详细信息，请参阅过程对象.【lpMinimumWork


-------------------------------------------------------- KeyGTK3Win32GetProfileInt ----
GetProfileIntGetProfileInt函数从WIN.INI文件的给定部分中的指定键名称中检索整数。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向一个以null结尾的字符串，指定包含键名称的部分。【lpKeyName】指向包含要检索其值的键名称的以null结尾的字符串。此值为字符串的形式; GetProfil


-------------------------------------------------------- KeyGTK3Win32GetProfileSection ----
GetProfileSectionGetProfileSection函数检索WIN.INI文件的指定部分的所有键和值。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向包含WIN.INI文件中的段名称的以null结尾的字符串。【lpReturnedString】指向缓冲区，接收与命名部分相关联的键和值。缓冲区填充一个或多个以nul


-------------------------------------------------------- KeyGTK3Win32GetProfileString ----
GetProfileStringGetProfileString函数检索WIN.INI文件给定部分中与指定键相关联的字符串。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向指定包含该键的部分的以空值终止的字符串的指针。如果此参数为NULL，则该函数将文件中的所有段名称复制到提供的缓冲区。【lpKeyName】指向包含要检索其关联字符串


-------------------------------------------------------- KeyGTK3Win32GetProp ----
GetProp    GetProp函数从给定窗口的属性列表中检索数据句柄。给定的字符串标识要检索的句柄。字符串和句柄必须通过先前调用SetProp函数添加到属性列表中。
语法
参数
【的hWnd】标识要搜索其属性列表的窗口。【lpString】指向以null结尾的字符串或包含标识字符串的原子。如果此参数是原子，则必须使用GlobalAddAtom函数创建。原子，16位值


-------------------------------------------------------- KeyGTK3Win32GetQueuedCompletionStatus ----
GetQueuedCompletionStatus    GetQueuedCompletionStatus函数尝试从指定的输入/输出完成端口出发I / O完成数据包。如果没有完成数据包排队，该函数将等待与完成端口关联的挂起输入/输出操作完成。该函数可以在完成数据包出队时返回，或者当函数超时时可以返回。如果由于I / O操作完成而返回该函数，则它将设置几个变量，以提供有关操作的信息。
语法
参数
【CompletionPort】处理感兴趣的输入/输出完成端口。I / O完成端口由CreateIoCompletionPort函数创建。【lpNumberOfBytesTransferre


-------------------------------------------------------- KeyGTK3Win32GetQueueStatus ----
GetQueueStatus    GetQueueStatus函数返回指示在调用线程的消息队列中找到的消息类型的标志。
语法
参数
【旗】指定队列状态标志，给出要检查的消息类型。此参数可以是以下值的组合：值含义QS_ALLEVENTS队列中输入的WM_TIMER，WM_PAINT，WM_HOTKEY或已发邮件。QS_AL


-------------------------------------------------------- KeyGTK3Win32GetRasterizerCaps ----
GetRasterizerCaps    GetRasterizerCaps函数返回指示TrueType字体是否安装在系统中的标志。
语法
参数
【LPRS】指向RASTERIZER_STATUS结构以接收有关光栅化器的信息。【cb】指定要复制到【LPRS】参数指向的结构中的字节数。
返回值
如果函数成功，返回值不为零。如果函数失


-------------------------------------------------------- KeyGTK3Win32GetRegionData ----
GetRegionData    GetRegionData函数使用描述区域的数据填充指定的缓冲区。该数据包括组成该区域的矩形的尺寸。
语法
参数
【HRGN】识别该地区。【dwCount】指定【lpRgnData】缓冲区的大小（以字节为单位）。【lpRgnData】指向接收信息的RGNDATA结构。如果此参数为NULL，则返回值包含区


-------------------------------------------------------- KeyGTK3Win32GetRgnBox ----
GetRgnBox    GetRgnBox函数检索指定区域的边界矩形。
语法
参数
【HRGN】识别该地区。【LPRC】指向接收边界矩形的RECT结构。
返回值
返回值指定区域的复杂度。它可以是以下值之一：值含义NULLREGION区域是空的SIMPLEREGION区域


-------------------------------------------------------- KeyGTK3Win32GetROP2 ----
GetROP2    GetROP2函数检索指定设备上下文的前台混合模式。混合模式指定笔或内部颜色和屏幕上已经组合的颜色，以产生新颜色。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值指定前台混合模式。如果函数失败，返回值为零。
描述
以下是前景混合模式：混合模式描述R2_BLACK像素始终为0。R2_CO


-------------------------------------------------------- KeyGTK3Win32GetSaveFileName ----
GetSaveFileName    GetSaveFileName函数创建一个保存公共对话框，允许用户指定要保存的文件的驱动器，目录和名称。
语法
参数
【lpofn】指向OPENFILENAME结构的指针，其中包含用于初始化对话框的信息。当GetSaveFileName返回时，此结构包含有关用户文件选择的信息。
返回值
如果用户指定文件


-------------------------------------------------------- KeyGTK3Win32GetScrollInfo ----
GetScrollInfo    GetScrollInfo函数检索滚动条的参数，包括最小和最大滚动位置，页面大小和滚动框（拇指）的位置。
语法
参数
【HWND】根据【fnBar】参数的值标识滚动条控件或带有标准滚动条的窗口。【fnBar】指定要检索参数的滚动条的类型。此参数可以是以下值之一：值含义SB_CTL检索滚动条控件的参数。【HW


-------------------------------------------------------- KeyGTK3Win32GetScrollPos ----
GetScrollPos    GetScrollPos函数在指定的滚动条中检索滚动框（thumb）的当前位置。当前位置是一个取决于当前滚动范围的相对值。例如，如果滚动范围为0到100，滚动条位于条的中间，则当前位置为50。
语法
参数
【的hWnd】根据【NBAR】参数的值，标识滚动条控件或带有标准滚动条的窗口。【NBAR】指定要检查的滚动条。此参数可以是以下值之一：值含义SB_CTL在滚动条控件中检索滚动框的位置。【的h


-------------------------------------------------------- KeyGTK3Win32GetScrollRange ----
GetScrollRange    GetScrollRange函数检索指定滚动条的当前最小和最大滚动条（拇指）位置。对于Windows 95，GetScrollRange函数与兼容于4.0之前的操作系统版本存在。使用版本4.0或更高版本，请使用GetScrollInfo函数。
语法
参数
【的hWnd】根据【NBAR】参数的值，标识滚动条控件或具有标准滚动条的窗口。【NBAR】指定检索位置的滚动条。此参数可以是以下值之一：值含义SB_CTL检索滚动条控件的位置。【的hWnd】


-------------------------------------------------------- KeyGTK3Win32GetSecurityDescriptorControl ----
GetSecurityDescriptorControl    GetSecurityDescriptorControl函数检索安全描述符的控制和修订信息。
语法
参数
【pSecurityDescriptor】指向SECURITY_DESCRIPTOR结构，其函数检索的控制和修订信息。【PControl则】指向SECURITY_DESCRIPTOR_CON


-------------------------------------------------------- KeyGTK3Win32GetSecurityDescriptorDacl ----
GetSecurityDescriptorDacl    GetSecurityDescriptorDacl函数检索指定安全描述符中自由访问控制列表（ACL）的指针。
语法
参数
【pSecurityDescriptor】指向包含自由ACL的SECURITY_DESCRIPTOR结构。该函数检索一个指向它的指针。【lpbDaclPresent】指向一个标志，该函数用于


-------------------------------------------------------- KeyGTK3Win32GetSecurityDescriptorGroup ----
GetSecurityDescriptorGroup    GetSecurityDescriptorGroup函数从安全描述符中检索主组信息。
语法
参数
【pSecurityDescriptor】指向函数检索的主组信息的SECURITY_DESCRIPTOR结构。【PGROUP】指向指向SID结构的指针，该结构在函数返回时标识主组。（SID是


-------------------------------------------------------- KeyGTK3Win32GetSecurityDescriptorLength ----
GetSecurityDescriptorLength    GetSecurityDescriptorLength函数返回结构有效SECURITY_DESCRIPTOR结构的长度（以字节为单位）。长度包括所有关联结构的长度，例如SID和ACL结构。
语法
参数
【pSecurityDescriptor】指向函数返回长度的SECURITY_DESCRIPTOR结构。假设SECURITY_DESCRIPTOR结构是有效的。
返回值
如果函数成功，则


-------------------------------------------------------- KeyGTK3Win32GetSecurityDescriptorOwner ----
GetSecurityDescriptorOwner    GetSecurityDescriptorOwner函数从安全描述符中检索所有者信息。
语法
参数
【pSecurityDescriptor】指向SECURITY_DESCRIPTOR结构，其函数检索的所有者信息。【pOwner】指向指向SID结构的指针，该结构在函数返回时标识所有者。（S


-------------------------------------------------------- KeyGTK3Win32GetSecurityDescriptorSacl ----
GetSecurityDescriptorSacl    GetSecurityDescriptorSacl函数将在指定的安全描述符中检索指向系统访问控制列表（ACL）的指针。
语法
参数
【pSecurityDescriptor】指向SECURITY_DESCRIPTOR结构，其中包含该函数检索指针的系统ACL。【lpbSaclPresent】指向一个标志，该函数设置为指示在


-------------------------------------------------------- KeyGTK3Win32GetSecurityInfo ----
GetSecurityInfo    [New - Windows NT]GetSecurityInfo函数检索由句柄指定的对象的安全描述符的副本。
语法
参数
【处理】用于检索安全信息的对象的句柄。【ObjectType】指定SE_OBJECT_TYPE枚举中指示由【pObjectName】参数命名的对象的类型的值。【SecurityInfo】一组


-------------------------------------------------------- KeyGTK3Win32GetServiceDisplayName ----
GetServiceDisplayName    GetServiceDisplayName函数获取与特定服务名称相关联的显示名称。服务名称与服务的注册表项名称相同。
语法
参数
【hSCManager】处理机器的服务控制管理器数据库。此参数是由OpenSCManager函数返回的RPC服务器句柄。【lpServiceName】指向以null结尾的服务名称字符串。该名


-------------------------------------------------------- KeyGTK3Win32GetServiceKeyName ----
GetServiceKeyName    GetServiceKeyName函数获取与特定服务的显示名称相关联的服务名称。服务名称与服务的注册表项名称相同。
语法
参数
【hSCManager】处理计算机的服务控制管理器数据库。此参数是由OpenSCManager返回的远程过程调用（RPC）服务器句柄。【lpDisplayName】指向以null结尾的服务显


-------------------------------------------------------- KeyGTK3Win32GetShortPathName ----
GetShortPathName    GetShortPathName函数获取指定输入路径的短路径形式。
语法
参数
【lpszLongPath】指向以null结尾的路径字符串。该函数获取此路径的简短形式。【lpszShortPath】指向缓冲区以接收由【lpszLongPath】指定的路径的空终止短格式。


-------------------------------------------------------- KeyGTK3Win32GetSidIdentifierAuthority ----
GetSidIdentifierAuthority    GetSidIdentifierAuthority函数返回指定安全标识符（SID）中SID_IDENTIFIER_AUTHORITY 结构的地址。
语法
参数
【PSID】指向返回SID_IDENTIFIER_AUTHORITY结构的地址的SID结构。
返回值
如果函数成功，则返回值是指定SID结构的SID_IDENTIFIER_AUTHORI


-------------------------------------------------------- KeyGTK3Win32GetSidLengthRequired ----
GetSidLengthRequired    GetSidLengthRequired函数返回以指定数量的子权限存储SID结构所需的缓冲区长度（以字节为单位）。
语法
参数
【nSubAuthorityCount】指定要存储在SID结构中的子权限的数量。
返回值
返回值是存储SID结构所需的缓冲区的长度（以字节为单位）。此函数不能失败。



-------------------------------------------------------- KeyGTK3Win32GetSidSubAuthority ----
GetSidSubAuthority    GetSidSubAuthority函数返回SID结构中指定的次授权的地址。次授权值是相对标识符（RID）。SID是安全标识符。
语法
参数
【PSID】指向要从其返回次授权地址的SID结构。【nSubAuthority】指定标识子函数数组元素的索引值，该函数将返回其地址。该函数不对该值执行验证测试。应用程序可以调用GetSidS


-------------------------------------------------------- KeyGTK3Win32GetSidSubAuthorityCount ----
GetSidSubAuthorityCount    GetSidSubAuthorityCount函数返回包含子权限计数的SID结构中的字段的地址。SID是安全标识符。
语法
参数
【PSID】指向SID结构，从中返回指向次授权计数的指针。
返回值
如果函数成功，则返回值是指向SID结构的子注册计数的指针。如果函数失败，则返回值未定义。如果指定的SID结构无效，该函


-------------------------------------------------------- KeyGTK3Win32GetStartupInfo ----
GetStartupInfo    GetStartupInfo函数检索创建调用进程时指定的STARTUPINFO结构的内容。
语法
参数
【lpStartupInfo】指向由该函数填充的STARTUPINFO结构。
返回值
此函数不返回值。
描述
STARTUPINFO结构由创建调用进程的进程指定。它可以用于指定与调用


-------------------------------------------------------- KeyGTK3Win32GetStdHandle ----
GetStdHandle    GetStdHandle函数返回标准输入，标准输出或标准错误装置的句柄。
语法
参数
【nStdHandle】指定要返回句柄的设备。此参数可以具有以下值之一：值含义STD_INPUT_HANDLE标准输入手柄STD_OUTPUT_HANDLE标准输出手柄STD_ERROR_H


-------------------------------------------------------- KeyGTK3Win32GetStockObject ----
GetStockObject    GetStockObject函数检索一个预定义库存笔，笔刷，字体或调色板的句柄。
语法
参数
【fnObject】指定库存对象的类型。此参数可以是以下值之一：值含义BLACK_BRUSH黑色刷子DKGRAY_BRUSH深灰色刷子GRAY_BRUSH灰色刷。HOLLOW_BRUSH空心


-------------------------------------------------------- KeyGTK3Win32GetStretchBltMode ----
GetStretchBltMode    GetStretchBltMode函数检索当前的拉伸模式。拉伸模式定义当调用StretchBlt函数时，如何将颜色数据添加到或从位图中删除，这些位图被拉伸或压缩。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值为当前的拉伸模式。如果函数失败，返回值为零。



-------------------------------------------------------- KeyGTK3Win32GetStringTypeA ----
GetStringTypeA    GetStringTypeA函数返回指定源字符串中字符的字符类型信息。对于字符串中的每个字符，该函数设置输出数组的相应16位元素中的一个或多个位。每个位都标识给定的字符类型，例如字符是字母，数字还是两者。
语法
参数
【语言环境】指定区域设置标识符。此值唯一地定义用于将由【lpSrcStr】指向的字符串从ANSI转换为Unicode的ANSI代码页。该函数然后分析每个Unicode字符的字符类型信息。此参


-------------------------------------------------------- KeyGTK3Win32GetStringTypeEx ----
GetStringTypeEx    GetStringTypeEx函数返回指定源字符串中字符的字符类型信息。对于字符串中的每个字符，该函数设置输出数组的相应16位元素中的一个或多个位。每个位都标识给定的字符类型，例如字符是字母，数字还是两者。与其近亲GetStringTypeA和GetStringTypeW不同，GetStringTypeEx通过使用#define UNICODE交换机展示了合适的A或W行为。这是推荐的Win32函数。
语法
参数
【语言环境】指定区域设置标识符。此值唯一地定义用于将由【lpSrcStr】指向的字符串从ANSI转换为Unicode的ANSI代码页。该函数然后分析每个Unicode字符的字符类型信息。请注


-------------------------------------------------------- KeyGTK3Win32GetStringTypeW ----
GetStringTypeW    GetStringTypeW函数返回指定源字符串中字符的字符类型信息。对于字符串中的每个字符，该函数设置输出数组的相应16位元素中的一个或多个位。每个位都标识给定的字符类型，例如字符是字母，数字还是两者。
语法
参数
【dwInfoType】指定用户想要检索的字符信息的类型。各种类型分为不同的级别（有关每种类型中包含的信息的列表，请参阅以下备注部分）。此参数可以指定以下字符类型标志之一：CT_CTYPE1


-------------------------------------------------------- KeyGTK3Win32GetSubMenu ----
GetSubMenu    GetSubMenu函数检索由指定的菜单项激活的下拉菜单或子菜单的句柄。
语法
参数
【HMENU】标识菜单。【nPos】指定激活下拉菜单或子菜单的项目的给定菜单中的从零开始的相对位置。
返回值
如果函数成功，则返回值是由菜单项激活的下拉菜单或子菜单的句柄。如果菜单项未激


-------------------------------------------------------- KeyGTK3Win32GetSysColor ----
GetSysColor    GetSysColor函数检索指定的显示元素的当前颜色。显示元素是窗口的部分和显示在系统显示屏幕上的Windows显示。
语法
参数
【参数nIndex】指定要检索其颜色的显示元素。此参数必须是以下值之一：值含义COLOR_3DDKSHADOW三维显示元素的阴影。COLOR_3DFACE,
COLOR_BTNFACE面向


-------------------------------------------------------- KeyGTK3Win32GetSysColorBrush ----
GetSysColorBrush    GetSysColorBrush函数检索一个标识对应于指定颜色索引的逻辑画笔的句柄。
语法
参数
【参数nIndex】指定颜色索引。该值对应于用于绘制21个窗口元素之一的颜色。
返回值
如果函数成功，则返回值标识一个逻辑画笔。要获取扩展错误信息，请调用GetLastError.
描


-------------------------------------------------------- KeyGTK3Win32GetSysModalWindow ----
GetSysModalWindow          GetSysModalWindow函数已过时。此函数仅用于与16位版本的Windows兼容。


-------------------------------------------------------- KeyGTK3Win32GetSystemDefaultLangID ----
GetSystemDefaultLangID    GetSystemDefaultLangID函数检索系统默认语言标识符。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是系统默认语言标识符。
描述
有关语言标识符的更多信息，请参阅语言标识符和语言环境。



-------------------------------------------------------- KeyGTK3Win32GetSystemDefaultLCID ----
GetSystemDefaultLCID    GetSystemDefaultLCID函数检索系统默认的区域设置标识符。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是系统默认的区域设置标识符。
描述
有关区域设置标识符的更多信息，请参阅区域标识符.



-------------------------------------------------------- KeyGTK3Win32GetSystemDirectory ----
GetSystemDirectory    GetSystemDirectory函数检索Windows系统目录的路径。系统目录包含Windows库，驱动程序和字体文件等文件。
语法
参数
【lpBuffer】指向缓冲区以接收包含路径的以null结尾的字符串。除非系统目录是根目录，否则此路径不会以反斜杠结尾。例如，如果系统目录在驱动器C上命名为WINDOWS \\ SYSTEM


-------------------------------------------------------- KeyGTK3Win32GetSystemInfo ----
GetSystemInfo    GetSystemInfo函数返回有关当前系统的信息。
语法
参数
【lpSystemInfo】指向此函数填写的SYSTEM_INFO结构。
返回值
此函数不返回值。



-------------------------------------------------------- KeyGTK3Win32GetSystemMenu ----
GetSystemMenu    GetSystemMenu函数允许应用程序访问窗口菜单（也称为系统菜单或控制菜单）进行复制和修改。
语法
参数
【的hWnd】标识将拥有窗口菜单的副本的窗口。【// reset flag】指定要执行的操作。如果此参数为FALSE，GetSystemMenu返回当前正在使用的窗口菜单副本的句柄。该副本最


-------------------------------------------------------- KeyGTK3Win32GetSystemMetrics ----
GetSystemMetrics    GetSystemMetrics函数可以检索各种系统指标和系统配置设置。系统度量是Windows显示元素的尺寸（宽度和高度）。由GetSystemMetrics检索的所有维度均为像素。
语法



-------------------------------------------------------- KeyGTK3Win32GetSystemPaletteEntries ----
GetSystemPaletteEntries    GetSystemPaletteEntries函数从与指定设备上下文关联的系统调色板中检索一系列调色板条目。
语法
参数
【HDC】标识设备上下文。【iStartIndex】指定要从系统调色板检索的第一个条目。【的nentries】指定要从系统调色板检索的条目数。【LPPE】指向PALETTEENTRY结构的数


-------------------------------------------------------- KeyGTK3Win32GetSystemPaletteUse ----
GetSystemPaletteUse    GetSystemPaletteUse函数检索指定设备上下文的系统（物理）调色板的当前状态。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值是系统调色板的当前状态。它可以是以下值之一：值含义SYSPAL_NOSTATIC系统调色板不包含黑色和白色以外的静态颜色。SYS


-------------------------------------------------------- KeyGTK3Win32GetSystemTime ----
GetSystemTime    GetSystemTime函数检索当前系统日期和时间。系统时间以协调世界时（UTC）表示。
语法
参数
【lpSystemTime】指向SYSTEMTIME结构以接收当前系统的日期和时间。
返回值
此函数不返回值。



-------------------------------------------------------- KeyGTK3Win32GetSystemTimeAdjustment ----
GetSystemTimeAdjustment    GetSystemTimeAdjustment函数决定系统是否在每个时钟中断期间对其日期时钟进行周期性时间调整，以及任何此类调整的值和周期。请注意，此类调整的周期等于时钟中断之间的时间间隔。
语法
参数
【lpTimeAdjustment】指向DWORD的函数，该函数设置为在每个周期时间调整时添加到时钟时钟的100纳秒单位。【lpTimeIncrement】指向DWORD的函数设置为间隔，以


-------------------------------------------------------- KeyGTK3Win32GetSystemTimeAsFileTime ----
GetSystemTimeAsFileTime    GetSystemTimeAsFileTime函数获取当前系统的日期和时间。信息是协调世界时（UTC）格式。
语法
参数
【lpSystemTimeAsFileTime】指向FILETIME结构以便以UTC格式接收当前系统日期和时间。
返回值
此函数不返回值。
描述
GetSystemTimeAsFil


-------------------------------------------------------- KeyGTK3Win32GetTabbedTextExtent ----
GetTabbedTextExtent    GetTabbedTextExtent函数计算字符串的宽度和高度。如果字符串包含一个或多个制表符，则字符串的宽度将基于指定的制表位。GetTabbedTextExtent函数使用当前选定的字体来计算字符串的尺寸。
语法
参数
【hDC】标识设备上下文。【lpString】指向一个字符串。【NCOUNT】指定文本字符串中的字符数。【nTabPositions】指定【lpnTabStopPositions】参数指向的


-------------------------------------------------------- KeyGTK3Win32GetTapeParameters ----
GetTapeParameters    GetTapeParameters函数检索描述磁带或磁带机的信息。
语法
参数
【hDevice】标识要查找哪些信息的设备。该句柄是通过使用CreateFile函数创建的。【// preparation method】指定所请求信息的类型。此参数必须是以下值之一：值描述


-------------------------------------------------------- KeyGTK3Win32GetTapePosition ----
GetTapePosition    GetTapePosition函数以逻辑或绝对块取回磁带的当前地址。
语法
参数
【hDevice】标识要获取磁带位置的设备。该句柄是通过使用CreateFile创建的。【dwPositionType】指定要获取的地址类型。此参数可以是以下值之一：值描述TAPE_ABSO


-------------------------------------------------------- KeyGTK3Win32GetTapeStatus ----
GetTapeStatus    GetTapeStatus函数指示磁带设备是否准备好处理磁带命令。
语法
参数
【hDevice】标识要获取设备状态的设备。该句柄是通过使用CreateFile函数创建的。
返回值
如果磁带设备准备好接受适当的磁带访问命令而不返回错误，则返回值为NO_ERROR。如


-------------------------------------------------------- KeyGTK3Win32GetTempFileName ----
GetTempFileName    GetTempFileName函数创建临时文件的名称。文件名是指定路径和前缀字符串的连接，由指定整数形成的十六进制字符串和.TMP扩展名。指定的整数可以是非零，在这种情况下，函数创建文件名，但不会创建文件。如果为整数指定零，该函数将创建一个唯一的文件名，并在指定的目录中创建该文件。
语法
参数
【lpPathName】指向指定文件名的目录路径的以null结尾的字符串。该字符串必须由ANSI字符集中的字符组成。应用程序通常为此参数指定句点（。）或GetTempPath函数的结果。如果


-------------------------------------------------------- KeyGTK3Win32GetTempPath ----
GetTempPath    GetTempPath函数检索为临时文件指定的目录的路径。此函数取代GetTempDrive函数。
语法
参数
【nBufferLength】指定由【lpBuffer】标识的字符串缓冲区的大小（以字符为单位）。【lpBuffer】指向一个字符串缓冲区，它接收指定临时文件路径的以null结尾的字符串。



-------------------------------------------------------- KeyGTK3Win32GetTextAlign ----
GetTextAlign    GetTextAlign函数检索指定设备上下文的文本对齐设置。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，返回值就是文本对齐标志的状态。如果函数失败，返回值为GDI_ERROR.要获取扩展错误信息，请调用GetLastError.有关状态返回


-------------------------------------------------------- KeyGTK3Win32GetTextCharacterExtra ----
GetTextCharacterExtra    GetTextCharacterExtra函数检索指定设备上下文的当前字符间距。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值是当前的字符间距。如果函数失败，返回值为0x8000000。
描述
字符间距定义了沿着基线的逻辑单位的额外空间，即TextO


-------------------------------------------------------- KeyGTK3Win32GetTextCharset ----
GetTextCharset    GetTextCharset函数获取当前选定到指定设备上下文中的字体的字符集标识符。函数调用GetTextCharset（【HDC】）等效于函数调用GetTextCharsetInfo（【HDC】，NULL，0）。
语法
参数
【HDC】处理设备上下文。该函数获取在该设备上下文中选择的字体的字符集标识符。
返回值
如果函数成功，则返回值标识当前选定到指定设备上下文中的字体的字符集。定义了以下字符集标识符：ANS


-------------------------------------------------------- KeyGTK3Win32GetTextCharsetInfo ----
GetTextCharsetInfo    GetTextCharsetInfo函数获取有关当前选定到指定设备上下文中字体的字符集的信息。
语法
参数
【HDC】处理设备上下文。该函数获取有关在此设备上下文中选择的字体的信息。【lpSig】指向接收字体签名信息的FONTSIGNATURE 数据结构的指针。如果当前在设备上下文中选择TrueT


-------------------------------------------------------- KeyGTK3Win32GetTextColor ----
GetTextColor    GetTextColor函数检索指定设备上下文的当前文本颜色。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值为当前文本颜色，为COLORREF值。如果函数失败，返回值为CLR_INVALID。
描述
文本颜色定义使用TextOut或


-------------------------------------------------------- KeyGTK3Win32GetTextExtentExPoint ----
GetTextExtentExPoint    GetTextExtentExPoint函数检索指定字符串中适合指定空间的字符数，并使用每个字符的文本扩展名填充数组。（文本范围是空格开头和适合空格的字符之间的距离。）此信息对于文字包装计算非常有用。
语法
参数
【HDC】标识设备上下文。【lpszStr】指向要检索的区域的以null结尾的字符串。【cchString】指定【lpszStr】参数指向的字符串中的字节数。【nMaxExtent】指定格式


-------------------------------------------------------- KeyGTK3Win32GetTextExtentPoint ----
GetTextExtentPoint    GetTextExtentPoint函数计算指定的文本字符串的宽度和高度。
语法
参数
【HDC】标识设备上下文。【lpString】指向文本字符串。该字符串不需要为零终止，因为【cbString】指定字符串的长度。【cbString】指定字符串中的字符数。【lpsiz到】指向


-------------------------------------------------------- KeyGTK3Win32GetTextExtentPoint32 ----
GetTextExtentPoint32    GetTextExtentPoint32函数计算指定的文本字符串的宽度和高度。此函数取代GetTextExtentPoint函数。
语法
参数
【HDC】标识设备上下文。【lpString】指向文本字符串。字符串不需要为零终止，因为【cbString】指定字符串的长度。【cbString】指定字符串中的字符数。【lpsiz到】指向S


-------------------------------------------------------- KeyGTK3Win32GetTextFace ----
GetTextFace    GetTextFace函数检索在指定的设备上下文中选择的字体的字体名称。
语法
参数
【HDC】标识设备上下文。【NCOUNT】指定缓冲区的大小（以字符为单位）。【lpFaceName】指向要接收字体名称的缓冲区。如果此参数为NULL，则该函数返回名称中包含终止空字符的字符数


-------------------------------------------------------- KeyGTK3Win32GetTextMetrics ----
GetTextMetrics    GetTextMetrics函数使用当前选定字体的指标填充指定的缓冲区。
语法
参数
【HDC】标识设备上下文。【lptm】指向要接收指标的TEXTMETRIC结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastE


-------------------------------------------------------- KeyGTK3Win32GetThreadContext ----
GetThreadContext    GetThreadContext函数检索指定线程的上下文。
语法
参数
【hThread】标识要检索其上下文的线程的打开句柄。Windows NT：句柄必须具有对线程的THREAD_GET_CONTEXT访问权限。有关详细信息，请参阅线程对象.【lpContex


-------------------------------------------------------- KeyGTK3Win32GetThreadDesktop ----
GetThreadDesktop    GetThreadDesktop函数返回与指定线程关联的桌面的句柄。
语法
参数
【dwThreadId】标识要返回桌面句柄的线程。GetCurrentThreadId和CreateProcess函数返回线程标识符。
返回值
如果函数成功，则返回值是与指定线程关联的桌


-------------------------------------------------------- KeyGTK3Win32GetThreadLocale ----
GetThreadLocale    GetThreadLocale函数返回调用线程当前的语言环境。
语法
参数
此函数无参数。
返回值
该函数返回调用线程的32位LCID区域设置标识符。
描述
当一个线程被创建时，它被给予系统默认的线程语言环境。系统引导时，系统从注册表读取系统默认线程区域设置


-------------------------------------------------------- KeyGTK3Win32GetThreadPriority ----
GetThreadPriority    GetThreadPriority函数返回指定线程的优先级值。该值与线程进程的优先级类一起确定线程的基本优先级。
语法
参数
【hThread】标识线程。Windows NT：句柄必须具有THREAD_QUERY_INFORMATION权限。有关详细信息，请参阅线程对象.
返回值
如果函数成功，则返回值是线程的


-------------------------------------------------------- KeyGTK3Win32GetThreadPriorityBoost ----
GetThreadPriorityBoost    [New - Windows NT]GetThreadPriorityBoost函数返回指定线程的优先级提升控制状态。
语法
参数
hThread处理线程。该线程必须具有THREAD_QUERY_INFORMATION访问权限。有关详细信息，请参阅线程对象.pDisablePriorityBoost指向接收优先级提升控制


-------------------------------------------------------- KeyGTK3Win32GetThreadSelectorEntry ----
GetThreadSelectorEntry    GetThreadSelectorEntry函数检索指定选择器和线程的描述符表条目。
语法
参数
【hThread】标识包含指定选择器的线程的句柄。Windows NT：句柄必须具有THREAD_QUERY_INFORMATION权限。有关详细信息，请参阅线程对象.【//要查找的选择器值


-------------------------------------------------------- KeyGTK3Win32GetThreadTimes ----
GetThreadTimes    GetThreadTimes函数获取有关指定线程的时序信息。
语法
参数
【hThread】一个打开的句柄，指定寻找定时信息的线程。必须使用THREAD_QUERY_INFORMATION访问来创建此句柄。有关详细信息，请参阅线程对象.【lpCreationTim


-------------------------------------------------------- KeyGTK3Win32GetTickCount ----
GetTickCount    GetTickCount函数检索自Windows启动以来经过的毫秒数。
语法



-------------------------------------------------------- KeyGTK3Win32GetTimeFormat ----
GetTimeFormat    GetTimeFormat函数将时间格式化为指定区域设置的时间字符串。该函数格式化指定时间或本地系统时间。
语法
参数
【语言环境】指定要格式化时间字符串的区域设置。如果【lpFormat】为NULL，则该函数将根据该语言环境的时间格式格式化该字符串。如果【lpFormat】不为NULL，则该函数仅对格式图片


-------------------------------------------------------- KeyGTK3Win32GetTimeZoneInformation ----
GetTimeZoneInformation    GetTimeZoneInformation函数检索当前的时区参数。这些参数控制协调世界时（UTC）与本地时间之间的转换。
语法
参数
【lpTimeZoneInformation】指向TIME_ZONE_INFORMATION结构以接收当前时区参数。
返回值
如果函数成功，则返回值为以下值之一：值含义TIME_ZONE


-------------------------------------------------------- KeyGTK3Win32GetTokenInformation ----
GetTokenInformation    GetTokenInformation函数检索有关访问令牌的指定类型的信息。调用进程必须具有获取信息的适当访问权限。
语法
参数
【TokenHandle】标识检索信息的访问令牌。【TokenInformationClass】指定TOKEN_INFORMATION_CLASS枚举类型的变量，标识函数检索的信息类型。【T


-------------------------------------------------------- KeyGTK3Win32GetTopWindow ----
GetTopWindow    GetTopWindow函数检查与指定的父窗口相关联的子窗口的Z顺序，并检索Z顺序顶部的子窗口的句柄。
语法
参数
【的hWnd】标识要检查子窗口的父窗口。如果此参数为NULL，该函数将返回Z顺序顶部窗口的句柄。
返回值
如果函数成功，则返回值是Z顺序顶部子窗口的句柄。如果指定的窗口没有子窗口，返回值


-------------------------------------------------------- KeyGTK3Win32GetTrusteeForm ----
GetTrusteeForm    [New - Windows NT]GetTrusteeForm函数检索分配给指定TRUSTEE结构的TrusteeForm成员的值。此值指示结构是否使用名称字符串或安全标识符（SID）来标识受信任者。
语法
参数
【pTrustee】指向TRUSTEE结构。
返回值
返回值是TRUSTEE_FORM枚举中的常量之一。



-------------------------------------------------------- KeyGTK3Win32GetTrusteeName ----
GetTrusteeName    [New - Windows NT]GetTrusteeName函数从TRUSTEE结构中检索受托人名称。
语法
参数
【pTrustee】指向TRUSTEE结构。
返回值
如果TRUSTEE结构的TrusteeForm成员是TRUSTEE_IS_NAME，则返回值是分配给该结构的ptstrNameaf成


-------------------------------------------------------- KeyGTK3Win32GetTrusteeType ----
GetTrusteeType    [New - Windows NT]GetTrusteeType函数检索分配给指定TRUSTEE结构的TrusteeType成员的值。此值表示受托人是用户，组还是受托人类型未知。
语法
参数
【pTrustee】指向TRUSTEE结构。
返回值
返回值是来自TRUSTEE_TYPE枚举的常量之一。



-------------------------------------------------------- KeyGTK3Win32GetUpdateRect ----
GetUpdateRect    GetUpdateRect函数检索完全包围指定窗口的更新区域的最小矩形的坐标。如果使用CS_OWNDC样式创建窗口，并且映射模式不是MM_TEXT，则GetUpdateRect将以逻辑坐标检索矩形。否则，它将检索客户端坐标中的矩形。如果没有更新区域，GetUpdateRect将检索一个空矩形（将所有坐标设置为零）。
语法
参数
【的hWnd】标识具有要检索的更新区域的窗口。【LPRECT】指向接收包围矩形坐标的RECT结构。应用程序可以将此参数设置为NULL，以确定窗口是否存在更新区域。如果此参数为NULL，则Ge


-------------------------------------------------------- KeyGTK3Win32GetUpdateRgn ----
GetUpdateRgn    GetUpdateRgn函数通过将窗口的更新区域复制到指定的区域来检索更新区域。更新区域的坐标相对于窗口的左上角（即它们是客户端坐标）。
语法
参数
【的hWnd】标识具有要检索的更新区域的窗口。【HRGN】标识接收更新区域的区域。【// erase-background flag】指定是否应该擦除窗口背景以及是否应绘制子窗口的非客户区域


-------------------------------------------------------- KeyGTK3Win32GetUserDefaultLangID ----
GetUserDefaultLangID    GetUserDefaultLangID函数检索用户默认语言标识符。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是用户默认语言标识符。



-------------------------------------------------------- KeyGTK3Win32GetUserDefaultLCID ----
GetUserDefaultLCID    GetUserDefaultLCID函数检索用户默认的区域设置标识符。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是用户默认的区域设置标识符。
描述
有关区域设置标识符的更多信息，请参阅区域标识符.



-------------------------------------------------------- KeyGTK3Win32GetUserName ----
GetUserName    GetUserName函数检索当前线程的用户名。这是当前登录到系统的用户的名称。
语法
参数
【lpBuffer】指向缓冲区以接收包含用户登录名的空终止字符串。如果此缓冲区不足以包含整个用户名，该函数将失败。【服务提供商】指向DWORD的输入，指定由【lpBuffer】参数指定的缓冲


-------------------------------------------------------- KeyGTK3Win32GetUserObjectInformation ----
GetUserObjectInformation    GetUserObjectInformation函数返回有关窗口站或桌面对象的信息。
语法
参数
【hObjhr】标识要返回信息的窗口台或桌面对象。这可以是HDESK或HWINSTA句柄（例如，CreateWindowStation OpenWindowStation，CreateDes


-------------------------------------------------------- KeyGTK3Win32GetUserObjectSecurity ----
GetUserObjectSecurity    GetUserObjectSecurity函数检索指定用户对象的安全信息。
语法
参数
【hObjhr】标识要返回安全信息的用户对象。【pSIRequested】指向SECURITY_INFORMATION结构，指定所请求的安全信息。【pSID】指向SECURITY_DESCR


-------------------------------------------------------- KeyGTK3Win32GetVersion ----
GetVersion    GetVersion函数返回当前的Windows版本号以及有关操作系统平台的信息。此函数已被GetVersionEx取代，该选项是获取系统版本号信息的首选方法。新应用程序应使用GetVersionEx.GetVersionEx函数的开发是因为许多现有的Windows应用程序在检查GetVersion函数调用的DWORD返回值时将错误地转换为DWORD中的主要和次要版本号。GetVersionEx函数强制应用程序明确检查版本信息的每个元素，并允许将来对该信息的增强。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值为DWORD，该值包含低位字中Windows的主版本号和次版本号，以及高阶字中操作系统平台的信息。对于所有平台，低位字包含Windows的版


-------------------------------------------------------- KeyGTK3Win32GetVersionEx ----
GetVersionEx    GetVersionEx函数可获取有关当前正在运行的操作系统版本的扩展信息。
语法
参数
【lpVersionInformation】指向函数填充操作系统版本信息的OSVERSIONINFO数据结构的指针。在调用GetVersionEx函数之前，请将OSVERSIONINFO数据


-------------------------------------------------------- KeyGTK3Win32GetViewportExtEx ----
GetViewportExtEx    GetViewportExtEx函数检索指定设备上下文的当前视口的x范围和y范围。
语法
参数
【HDC】标识设备上下文。【lpsiz到】指向SIZE结构。设备单位中的x和y范围被放置在此结构中。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyGTK3Win32GetViewportOrgEx ----
GetViewportOrgEx    GetViewportOrgEx函数检索指定设备上下文的视口原点的x坐标和y坐标。
语法
参数
【HDC】标识设备上下文。【LPPOINT】指向接收原点坐标的POINT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyGTK3Win32GetVolumeInformation ----
GetVolumeInformation    GetVolumeInformation函数返回有关指定根目录的文件系统和卷的信息。
语法
参数
【lpRootPathName】指向包含要描述的卷的根目录的字符串。如果此参数为NULL，则使用当前目录的根。如果此参数是UNC名称，则必须使用其他反斜杠来执行此操作。例如，您可以将\\\\


-------------------------------------------------------- KeyGTK3Win32GetWindow ----
GetWindow    GetWindow函数检索具有指定关系（Z订单或所有者）的窗口的句柄到指定的窗口。
语法
参数
【的hWnd】标识一个窗口根据【uCmd】参数的值，检索到的窗口句柄相对于此窗口。【uCmd】指定指定窗口和要检索句柄的窗口之间的关系。此参数可以是以下值之一：值含义GW_CHILD如果指定


-------------------------------------------------------- KeyGTK3Win32GetWindowContextHelpId ----
GetWindowContextHelpId    GetWindowContextHelpId函数检索与指定窗口相关联的帮助上下文标识符（如果有）。
语法
参数
【HWND】处理到要检索帮助上下文标识符的窗口。
返回值
如果窗口有一个或另一个则返回帮助上下文标识符。



-------------------------------------------------------- KeyGTK3Win32GetWindowDC ----
GetWindowDC    GetWindowDC函数检索整个窗口的设备上下文（DC），包括标题栏，菜单和滚动条。窗口设备上下文允许在窗口中的任何地方进行绘制，因为设备上下文的原点是窗口的左上角而不是客户区。
语法
参数
【的hWnd】标识具有要检索的设备上下文的窗口。
返回值
如果函数成功，则返回值是指定窗口的设备上下文的句柄。如果函数失败，则返回值为NULL，表示错误或无效的【的hWnd】参数。
描


-------------------------------------------------------- KeyGTK3Win32GetWindowExtEx ----
GetWindowExtEx    此函数检索指定设备上下文的窗口的x范围和y范围。BOOL GetWindowExtEx(HDC 【HDC】,//设备上下文的句柄LPSIZE 【lpsiz到】//结构接收窗口范围的地址);
参数
【HDC】标识设备上下文。【lpsiz到】指向SIZE结构。页面空间单元中的x和y范围被放置在此结构中。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyGTK3Win32GetWindowLong ----
GetWindowLong    GetWindowLong函数检索有关指定窗口的信息。该函数还可以将指定偏移量的32位（长）值检索到窗口的额外窗口存储器中。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【参数nIndex】指定要检索的值的从零开始的偏移量。有效值范围为零，通过额外的窗口内存的字节数减去4;例如，如果指定了12个或更多字节的额外


-------------------------------------------------------- KeyGTK3Win32GetWindowOrgEx ----
GetWindowOrgEx    GetWindowOrgEx函数检索指定设备上下文的窗口原点的x坐标和y坐标。
语法
参数
【HDC】标识设备上下文。【LPPOINT】指向POINT结构，它以窗口原点的页面单位接收坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyGTK3Win32GetWindowPlacement ----
GetWindowPlacement    GetWindowPlacement函数检索指定窗口的显示状态和还原的，最小化的和最大化的位置。
语法
参数
【的hWnd】标识窗口。【lpwndplel，LATN】指向接收显示状态和位置信息的WINDOWPLACEMENT结构。在致电GetWindowPlacement之前，将WINDOWPLAC


-------------------------------------------------------- KeyGTK3Win32GetWindowRect ----
GetWindowRect    GetWindowRect函数检索指定窗口的边界矩形的尺寸。尺寸以相对于屏幕左上角的屏幕坐标给出。
语法
参数
【的hWnd】标识窗口。【LPRECT】指向RECT结构，可以接收窗口左上角和右下角的屏幕坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用


-------------------------------------------------------- KeyGTK3Win32GetWindowRgn ----
GetWindowRgn    GetWindowRgn函数获取窗口的窗口区域的副本。通过调用SetWindowRgn函数设置窗口的窗口区域。窗口区域确定操作系统允许绘制的窗口内的区域。操作系统不显示位于窗口区域之外的窗口的任何部分
语法
参数
【的hWnd】处理要获得窗口区域的窗口。【HRGN】处理一个地区。该区域接收窗口区域的副本。
返回值
返回值指定函数获取的区域的类型。它可以是以下值之一：值含义NULLREGION该地区


-------------------------------------------------------- KeyGTK3Win32GetWindowsDirectory ----
GetWindowsDirectory    GetWindowsDirectory函数检索Windows目录的路径。Windows目录包含基于Windows的应用程序，初始化文件和帮助文件等文件。
语法
参数
【lpBuffer】指向缓冲区以接收包含路径的以null结尾的字符串。除非Windows目录是根目录，否则此路径不会以反斜杠结尾。例如，如果Windows目录在驱动器C上命名为WINDOWS


-------------------------------------------------------- KeyGTK3Win32GetWindowTask ----
GetWindowTask     GetWindowTask函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用GetWindowThreadProcessId函数。


-------------------------------------------------------- KeyGTK3Win32GetWindowText ----
GetWindowText    GetWindowText函数将指定窗口的标题栏（如果有）的文本复制到缓冲区中。如果指定的窗口是控件，将复制控件的文本。
语法
参数
【的hWnd】标识包含文本的窗口或控件。【lpString】指向将接收文本的缓冲区。【nMaxCount】指定要复制到缓冲区的最大字符数。如果文本超出此限制，则会被截断。
返回值
如果函


-------------------------------------------------------- KeyGTK3Win32GetWindowTextLength ----
GetWindowTextLength    GetWindowTextLength函数检索指定窗口标题栏文本的长度（如果窗口有标题栏）。如果指定的窗口是控件，则该函数将检索控件中文本的长度。
语法
参数
【的hWnd】标识窗口或控件。
返回值
如果函数成功，则返回值是文本的长度（以字符为单位）。在某些条件下，该值实际上可能大于文本的长度。有关详细信息，请参阅以下备注部分。如果窗口没有文本


-------------------------------------------------------- KeyGTK3Win32GetWindowThreadProcessId ----
GetWindowThreadProcessId    GetWindowThreadProcessId函数检索创建指定窗口的线程的标识符，以及可选地，创建窗口的进程的标识符。此函数取代GetWindowTask函数。
语法



-------------------------------------------------------- KeyGTK3Win32GetWindowWord ----
GetWindowWord    GetWindowWord函数以指定的偏移量将16位（字）值检索到指定窗口的额外窗口内存中。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【参数nIndex】指定要检索的值的基于零的字节偏移量。有效值的范围为零，通过额外的窗口内存的字节数减去2;例如，如果您指定了10个或更多字节


-------------------------------------------------------- KeyGTK3Win32GetWinMetaFileBits ----
GetWinMetaFileBits    GetWinMetaFileBits函数将增强格式记录从元文件转换为Windows格式记录，并将转换的记录存储在指定的缓冲区中。
语法
参数
【HEMF】识别增强的图元文件。【cbBuffer】指定要复制转换的记录的缓冲区的大小（以字节为单位）。【lpbBuffer】指向要复制转换记录的缓冲区。如果【lpbBuffer】为NULL


-------------------------------------------------------- KeyGTK3Win32GetWorldTransform ----
GetWorldTransform    GetWorldTransform函数检索当前的世界空间到页空间转换。
语法
参数
【HDC】标识设备上下文。【lpXform】指向XFORM结构的接收当前世界空间到页面空间转换的结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
如果应用


-------------------------------------------------------- KeyGTK3Win32GlobalAddAtom ----
GlobalAddAtom    GlobalAddAtom函数将一个字符串添加到全局原子表，并返回一个唯一的值（一个原子），用于标识字符串。
语法
参数
【lpString】指向要添加的以null结尾的字符串。该字符串的最大长度可以为255字节。仅在情况下不同的字符串被认为是相同的。添加到表中的该名称的第一个字符串的情况由GlobalGetA


-------------------------------------------------------- KeyGTK3Win32GlobalAlloc ----
GlobalAlloc    GlobalAlloc函数从堆中分配指定的字节数。在线性Win32 API环境中，本地堆和全局堆之间没有区别。
语法
参数
【uFlags】指定如何分配内存。如果指定为零，则默认值为GMEM_FIXED。除了特别注明的不兼容的组合外，还可以使用以下标志的任何组合。要指示函数是分配固定或可移动内存，请指定前四个标志


-------------------------------------------------------- KeyGTK3Win32GlobalCompact ----
GlobalCompact        GlobalCompact函数已过时。此函数仅用于与16位版本的Windows兼容。它在32位环境中没有任何意义。


-------------------------------------------------------- KeyGTK3Win32GlobalDeleteAtom ----
GlobalDeleteAtom    GlobalDeleteAtom函数减少全局字符串原子的引用计数。如果原子的引用计数达到零，GlobalDeleteAtom将从全局原子表中删除与原子关联的字符串。
语法
参数
【纳多马斯】标识要删除的原子和字符串。
返回值
如果函数成功，返回值为零。如果函数失败，则返回值为【纳多马斯】参数。要获取扩展错误信息，请调用GetLastError.
描述
字符串


-------------------------------------------------------- KeyGTK3Win32GlobalDiscard ----
GlobalDiscard    GlobalDiscard函数会丢弃指定的全局内存块。内存对象的锁计数必须为零。
语法
参数
【Hglbmm】标识全局内存对象。该手柄由GlobalAlloc或GlobalReAlloc函数返回。
返回值
如果函数成功，返回值就是内存对象的句柄。如果函数失败，返回值为NULL。要


-------------------------------------------------------- KeyGTK3Win32GlobalFindAtom ----
GlobalFindAtom    GlobalFindAtom函数在全局原子表中搜索指定的字符串，并检索与该字符串关联的全局原子。
语法
参数
【lpString】指向要搜索的以null结尾的字符串。
返回值
如果函数成功，则返回值是与给定字符串关联的全局原子。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastE


-------------------------------------------------------- KeyGTK3Win32GlobalFix ----
GlobalFix         GlobalFix函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用VirtualLock和VirtualUnlock函数。


-------------------------------------------------------- KeyGTK3Win32GlobalFlags ----
GlobalFlags    GlobalFlags函数返回有关指定的全局内存对象的信息。
语法
参数
【HMEM】标识全局内存对象。该手柄由GlobalAlloc或GlobalReAlloc函数返回。
返回值
如果函数成功，则返回值是一个32位值，用于指定内存对象的分配标志和锁计数。如果


-------------------------------------------------------- KeyGTK3Win32GlobalFree ----
GlobalFree    GlobalFree函数释放指定的全局内存对象并使其句柄无效。
语法
参数
【HMEM】标识全局内存对象。该手柄由GlobalAlloc或GlobalReAlloc函数返回。
返回值
如果函数成功，返回值为NULL。如果函数失败，返回值等于全局内存对象的句柄。要


-------------------------------------------------------- KeyGTK3Win32GlobalGetAtomName ----
GlobalGetAtomName    GlobalGetAtomName函数检索与指定的全局原子相关联的字符串的副本。
语法
参数
【纳多马斯】标识与要检索的字符串相关联的全局原子。【lpBuffer】指向字符串的缓冲区。【服务提供商】指定缓冲区的大小（以字符为单位）。
返回值
如果函数成功，则返回值是复制到缓冲区的


-------------------------------------------------------- KeyGTK3Win32GlobalHandle ----
GlobalHandle    GlobalHandle函数检索与指定的指针关联到全局内存块的句柄。
语法
参数
【PME?】指向全局内存块的第一个字节。该指针由GlobalLock函数返回。
返回值
如果函数成功，则返回值是指定的全局内存对象的句柄。如果函数失败，返回值为NULL。要获取扩展错误信


-------------------------------------------------------- KeyGTK3Win32GlobalLock ----
GlobalLock    GlobalLock函数锁定全局内存对象，并返回指向对象内存块第一个字节的指针。与锁定的存储器对象相关联的存储器块不能被移动或丢弃。对于使用GMEM_MOVEABLE标志分配的内存对象，该函数会增加与内存对象关联的锁定计数。
语法
参数
【HMEM】标识全局内存对象。该手柄由GlobalAlloc或GlobalReAlloc函数返回。
返回值
如果函数成功，则返回值是指向内存块第一个字节的指针。如果函数失败，返回值为NU


-------------------------------------------------------- KeyGTK3Win32GlobalLRUNewest ----
GlobalLRUNewest         GlobalLRUNewest函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用VirtualLock和VirtualUnlock函数。


-------------------------------------------------------- KeyGTK3Win32GlobalLRUOldest ----
GlobalLRUOldest        GlobalLRUOldest函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用VirtualLock和VirtualUnlock函数。


-------------------------------------------------------- KeyGTK3Win32GlobalMemoryStatus ----
GlobalMemoryStatus    GlobalMemoryStatus函数检索有关当前可用内存的信息。该函数返回有关物理和虚拟内存的信息。此函数取代GetFreeSpace函数。
语法
参数
【lpBuffer】指向MEMORYSTATUS结构，其中返回有关当前内存可用性的信息。在调用此函数之前，调用进程应设置此结构的dwLength成员。
返回值
此函数不返回值。
描述



-------------------------------------------------------- KeyGTK3Win32GlobalReAlloc ----
GlobalReAlloc    GlobalReAlloc函数更改指定的全局内存对象的大小或属性。尺寸可以增减。
语法
参数
【HMEM】标识要重新分配的全局内存对象。该句柄由GlobalAlloc或GlobalReAlloc函数返回。【dwBytes】指定内存块的新大小（以字节为单位）。如果此参数为零，并且【uF


-------------------------------------------------------- KeyGTK3Win32GlobalSize ----
GlobalSize    GlobalSize函数检索指定的全局内存对象的当前大小（以字节为单位）。
语法
参数
【HMEM】标识全局内存对象。该手柄由GlobalAlloc或GlobalReAlloc函数返回。
返回值
如果函数成功，则返回值是指定的全局内存对象的大小（以字节为单位）。如果指定的句


-------------------------------------------------------- KeyGTK3Win32GlobalUnfix ----
GlobalUnfix       GlobalUnfix函数已过时。此函数仅用于与16位版本的Windows兼容。它在32位环境中没有任何意义。


-------------------------------------------------------- KeyGTK3Win32GlobalUnlock ----
GlobalUnlock    GlobalUnlock函数减少与使用GMEM_MOVEABLE标志分配的内存对象关联的锁定计数。此函数对使用GMEM_FIXED标志分配的内存对象没有影响。
语法
参数
【HMEM】标识全局内存对象。该手柄由GlobalAlloc或GlobalReAlloc函数返回。
返回值
如果内存对象在递减锁定计数后仍然被锁定，则返回值为非零值。如果函数失败，返回值


-------------------------------------------------------- KeyGTK3Win32GlobalUnWire ----
GlobalUnWire      GlobalUnWire函数已过时。需要锁定全局内存对象的应用程序应使用GlobalLock和GlobalUnlock函数。此函数仅用于与16位版本的Windows兼容。新的基于Win32的应用程序不应该使用此函数。


-------------------------------------------------------- KeyGTK3Win32GlobalWire ----
GlobalWire       GlobalWire函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用GlobalLock和GlobalUnlock函数。


-------------------------------------------------------- KeyGTK3Win32GrayString ----
GrayString    GrayString函数在指定位置绘制灰色文本。该函数通过将文本复制到内存位图中，使位图变灰，然后将位图复制到屏幕来绘制文本。无论选定的画笔和背景如何，该函数都会灰化文本。GrayString使用当前为指定的设备上下文选择的字体。如果【lpOutputFunc】参数为NULL，则GDI使用TextOut函数，并且【的lpData】参数被假定为要输出的字符串的指针。如果要输出的字符不能由TextOut处理（例如，字符串作为位图存储），应用程序必须提供自己的输出函数。
语法
参数
【hDC】标识设备上下文。【HBRUSH】标识用于变灰的画笔。如果此参数为NULL，则文本将与用于绘制窗口文本的相同画笔呈灰色。【lpOutputFunc】指向将绘制字符串的应用程序定义的函


-------------------------------------------------------- KeyGTK3Win32Handler ----
{处理程序} 999796002    处理器函数是服务进程指定为特定服务的控制处理函数的函数。该函数可以有任何应用程序定义的名称。VOID WINAPI处理程序DWORD 【fdwControl】//请求控制代码);
参数
【fdwControl】表示所请求的控制代码。该值可以是表中的标准控制代码之一，也可以是128到255范围内的用户定义的控制代码。对于用户定义的控制代码，服务定义与控制代码相关联的操作。值含


-------------------------------------------------------- KeyGTK3Win32HandlerRoutine ----
HandlerRoutine    一个HandlerRoutine函数是控制台进程指定的一个函数来处理进程接收到的控制信号。该函数可以有任何名称。
语法
参数
【dwCtrlType】指示处理程序接收到的控制信号的类型。此值为以下之一：信号描述CTRL_C_EVENT从键盘输入或由GenerateConsoleCtrlEvent函数生成的信号接收到


-------------------------------------------------------- KeyGTK3Win32HeapAlloc ----
HeapAlloc    HeapAlloc函数从堆中分配一个内存块。分配的内存不可移动。
语法
参数
【hHeap】指定将从其分配内存的堆。此参数是由HeapCreate或GetProcessHeap函数返回的句柄。【dwFlags中】指定堆分配的几个可控方面。指定任何这些标志将覆盖使用He


-------------------------------------------------------- KeyGTK3Win32HeapCompact ----
HeapCompact    HeapCompact函数尝试压缩指定的堆。它通过合并相邻的空闲内存块来压缩堆，并且消除大的可用内存块。
语法
参数
【hHeap】处理堆的函数将尝试压缩。【dwFlags中】在函数操作期间控制堆访问的一组位标志。以下位标志有意义：值含义HEAP_NO_SERIALIZE如果设置此标志，则HeapCompa


-------------------------------------------------------- KeyGTK3Win32HeapCreate ----
HeapCreate    HeapCreate函数创建一个可以由调用进程使用的堆对象。该函数在进程的虚拟地址空间中保留一个连续的块，并为此块的指定初始部分分配物理存储。
语法
参数
【flOptions】指定新堆的可选属性。这些标志将通过调用堆函数（HeapAlloc，HeapFree，HeapReAlloc和HeapSize）来影响对新堆的后续访问。您可以指定以下一个


-------------------------------------------------------- KeyGTK3Win32HeapDestroy ----
HeapDestroy    HeapDestroy函数会销毁指定的堆对象。HeapDestroy解除并释放专用堆对象的所有页面，并使堆的句柄无效。
语法
参数
【hHeap】指定要销毁的堆。该参数应该是由HeapCreate函数返回的堆处理。不应使用GetProcessHeap函数返回的堆处理。
返回值
如果函数成功，返回值不为零。如果函数失败


-------------------------------------------------------- KeyGTK3Win32HeapLock ----
HeapLock    HeapLock函数尝试获取与指定堆相关联的关键部分对象或锁定。如果函数成功，调用线程拥有堆锁。只有调用线程才能从堆中分配或释放内存。如果该线程尝试从堆中分配或释放内存，则调用进程的任何其他线程的执行将被阻止。这样的线程将保持阻塞，直到拥有堆锁的线程调用HeapUnlock 函数。
语法
参数
【hHeap】处理堆以锁定调用线程的独占访问。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
HeapLo


-------------------------------------------------------- KeyGTK3Win32HeapReAlloc ----
HeapReAlloc    HeapReAlloc函数从堆中重新分配一块内存。此函数使您可以调整内存块大小并更改其他内存块属性。分配的内存不可移动。
语法
参数
【hHeap】指定将重新分配内存的堆。这是由HeapCreate或GetProcessHeap函数返回的句柄。【dwFlags中】指定堆重新分配的几个可控方面。当使用HeapCreate函数


-------------------------------------------------------- KeyGTK3Win32HeapSize ----
HeapSize    HeapSize函数返回由HeapAlloc或HeapReAlloc函数从堆分配的内存块的大小（以字节为单位）。
语法
参数
【hHeap】指定内存块所在的堆。该句柄由HeapCreate或GetProcessHeap函数返回。【dwFlags中】指定访问内存块的几个可控方面。目前只有一个标志被定义;然而，所有其他


-------------------------------------------------------- KeyGTK3Win32HeapUnlock ----
HeapUnlock    HeapUnlock函数释放与指定堆相关联的关键部分对象或锁定的所有权。HeapUnlock函数可以反转HeapLock 函数的动作。
语法
参数
【hHeap】处理堆堆解锁。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
HeapLock函数主要用于在


-------------------------------------------------------- KeyGTK3Win32HeapValidate ----
HeapValidate    HeapValidate函数尝试验证指定的堆。该函数扫描堆中的所有内存块，并验证操作系统的堆管理器维护的堆控制结构是否处于一致状态。您也可以使用HeapValidate函数来验证指定堆中的单个内存块，而不检查整个堆的有效性。
语法
参数
【hHeap】处理感兴趣的堆。HeapValidate函数尝试验证此堆或此堆内的单个内存块。【dwFlags中】在函数操作期间控制堆访问的一组位标志。以下位标志有意义：值含义HEAP_NO_


-------------------------------------------------------- KeyGTK3Win32HeapWalk ----
HeapWalk    HeapWalk函数枚举指定堆中的内存块。
语法
参数
【hHeap】处理到要记录的内存块的堆中。【dwFlags中】指向维护特定堆枚举的状态信息的PROCESS_HEAP_ENTRY 结构。如果HeapWalk函数成功，则返回值TRUE，此结构


-------------------------------------------------------- KeyGTK3Win32HideCaret ----
HideCaret    HideCaret函数从屏幕中删除插入符号。隐藏插入符号不会破坏其当前形状或使插入点无效。
语法
参数
【的hWnd】标识拥有插入符号的窗口。如果此参数为NULL，则HideCaret将搜索具有插入符号的窗口的当前任务。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取


-------------------------------------------------------- KeyGTK3Win32HiliteMenuItem ----
HiliteMenuItem    HiliteMenuItem函数突出显示或删除菜单栏中项目的突出显示。
语法
参数
【HWND】标识包含菜单的窗口。【HMENU】标识包含要突出显示的项目的菜单栏。【uItemHilite】指定要突出显示的菜单项。此参数是菜单项的标识符或菜单栏中菜单项的偏移量，具体取决于【


-------------------------------------------------------- KeyGTK3Win32ImageList_Add ----
ImageList_Add    ImageList_Add函数将图像或图像添加到图像列表。
语法
参数
【HIML】处理图像列表。【hbmImagexh】处理包含图像或图像的位图。从位图的宽度推断图像的数量。【hbmMask】处理包含掩码的位图。如果图像列表中没有使用掩码，则忽略该参数。
返


-------------------------------------------------------- KeyGTK3Win32ImageList_AddMasked ----
ImageList_AddMasked    ImageList_AddMasked函数将图像或图像添加到图像列表，从指定的位图生成蒙版。
语法
参数
【HIML】处理图像列表。【hbmImagexh】处理包含一个或多个图像的位图。从位图的宽度推断图像的数量。【crMask】用于生成面具的颜色。指定位图中此颜色的每个像素都变为黑色，掩码中的


-------------------------------------------------------- KeyGTK3Win32ImageList_BeginDrag ----
ImageList_BeginDrag    ImageList_BeginDrag函数开始拖动图像。
语法
参数
【himlTrack】处理图像列表。【iTrack】索引要拖动的图像。【dxHotspot】和【dyHotspot】拖动位置相对于图像左上角的位置。
返回值
如果函数成功，返回值不为零。


-------------------------------------------------------- KeyGTK3Win32ImageList_Create ----
ImageList_Create    ImageList_Create函数创建一个新的图像列表。
语法



-------------------------------------------------------- KeyGTK3Win32ImageList_Destroy ----
ImageList_Destroy    ImageList_Destroy函数会销毁图像列表。
语法



-------------------------------------------------------- KeyGTK3Win32ImageList_DragEnter ----
ImageList_DragEnter    ImageList_DragEnter函数在拖动操作期间将更新锁定到指定的窗口，并将拖动图像显示在窗口中的指定位置。
语法
参数
【hwndLock】处理拥有拖动图像的窗口。【x】指定显示拖动图像的x坐标。坐标相对于窗口的左上角，而不是客户区。【y】指定显示拖动图像的y坐标。坐标相对于窗口的左上角，而不是客户区。
返


-------------------------------------------------------- KeyGTK3Win32ImageList_DragLeave ----
ImageList_DragLeave    ImageList_DragLeave函数解锁指定的窗口并隐藏拖动图像，允许更新窗口。
语法



-------------------------------------------------------- KeyGTK3Win32ImageList_DragMove ----
ImageList_DragMove    ImageList_DragMove函数在拖放操作期间移动正在拖动的图像。此函数通常响应于WM_MOUSEMOVE消息而被调用。
语法
参数
【x】指定显示拖动图像的x坐标。坐标相对于窗口的左上角，而不是客户区。【y】指定显示拖动图像的y坐标。坐标相对于窗口的左上角，而不是客户区。
返回值
如果函数成功，返回值不为零。如果函数


-------------------------------------------------------- KeyGTK3Win32ImageList_DragShowNolock ----
ImageList_DragShowNolock    ImageList_DragShowNolock函数显示或隐藏正在拖动的图像。
语法



-------------------------------------------------------- KeyGTK3Win32ImageList_Draw ----
ImageList_Draw    ImageList_Draw函数在指定的设备上下文中绘制一个图像列表项。
语法



-------------------------------------------------------- KeyGTK3Win32ImageList_DrawEx ----
ImageList_DrawEx    ImageList_DrawEx函数在指定的设备上下文中绘制一个图像列表项。该函数使用指定的绘图样式并将图像与指定的颜色混合。
语法
参数
【HIML】处理图像列表【i】要绘制的图像的索引。【hdcDst】处理目标设备上下文。【x】指定在指定的设备上下文中绘制的x坐标。【y】指定在指定的设备上下文中绘制的y坐标。【dx】指定要绘


-------------------------------------------------------- KeyGTK3Win32ImageList_EndDrag ----
ImageList_EndDrag    ImageList_EndDrag函数结束拖动操作。BOOL ImageList_EndDrag(VOID)
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。


-------------------------------------------------------- KeyGTK3Win32ImageList_ExtractIcon ----
ImageList_ExtractIcon    ImageList_ExtractIcon函数根据图像列表中的图像和掩码创建一个图标或光标。ImageList_ExtractIcon是一个调用ImageList_GetIcon函数的宏。
语法
参数
【hi】Ignored; set to zero.【HIML】处理图像列表。【i】图像索引
返回值
如果函数成功，则返回值是图标或光标的句柄。如果函数失败，返回值为NULL。



-------------------------------------------------------- KeyGTK3Win32ImageList_GetBkColor ----
ImageList_GetBkColor    ImageList_GetBkColor函数检索图像列表的当前背景颜色。
语法



-------------------------------------------------------- KeyGTK3Win32ImageList_GetDragImage ----
ImageList_GetDragImage    ImageList_GetDragImage函数检索用于拖动图像的临时图像列表。该函数还检索当前拖动位置，以及拖动图像相对于拖动位置的偏移量。
语法
参数
【PPT】指向接收当前拖动位置的POINT结构的指针。可以为NULL。【pptHotSpot】指向POINT结构的指针，该结构接收拖动图像相对于拖动位置的偏移量。可以为NULL。
返回值



-------------------------------------------------------- KeyGTK3Win32ImageList_GetIcon ----
ImageList_GetIcon    ImageList_GetIcon函数根据图像列表中的图像和掩码创建一个图标或光标。
语法
参数
【HIML】处理图像列表。【i】图像索引【旗】组合指定绘图样式的标志。有关值列表，请参阅ImageList_Draw函数的说明。
返回值
如果函数成功，则返回值是图标或光标的句柄。如果函


-------------------------------------------------------- KeyGTK3Win32ImageList_GetIconSize ----
ImageList_GetIconSize    ImageList_GetIconSize函数检索图像列表中图像的尺寸。图像列表中的所有图像具有相同的尺寸。
语法



-------------------------------------------------------- KeyGTK3Win32ImageList_GetImageCount ----
ImageList_GetImageCount    ImageList_GetImageCount函数检索图像列表中的图像数。
语法



-------------------------------------------------------- KeyGTK3Win32ImageList_GetImageInfo ----
ImageList_GetImageInfo    ImageList_GetImageInfo函数检索有关图像的信息。
语法
参数
【HIML】处理图像列表。【i】图像索引【pImageInfo】指向IMAGEINFO结构的指针，可以接收有关图像的信息。该结构中的信息可用于直接操作图像的位图。
返回值
如果函数成功，


-------------------------------------------------------- KeyGTK3Win32ImageList_LoadBitmap ----
ImageList_LoadBitmap    ImageList_LoadBitmap函数从指定的位图资源创建一个图像列表。ImageList_LoadBitmap是一个调用ImageList_LoadImage函数的宏。
语法
参数
【hi】处理包含位图资源的实例。【lpbmp】资源名称【cx】每张图片的宽度。每个图像的高度和图像的初始数量都由指定位图的尺寸推断。【cGrow】当系统需要调整列表大小以为新图像腾出空间时，


-------------------------------------------------------- KeyGTK3Win32ImageList_LoadImage ----
ImageList_LoadImage    ImageList_LoadImage函数从指定的位图，光标或图标资源创建一个图像列表。
语法
参数
【hi】处理包含资源的实例。如果【hi】参数为零，则此参数的低位字必须是要加载的OEM映像的标识符。OEM图像标识符在WINUSER.H中定义。以下是标识符前缀及其含义：字首含义OBM_OE


-------------------------------------------------------- KeyGTK3Win32ImageList_Merge ----
ImageList_Merge    ImageList_Merge函数通过组合两个现有图像创建新图像。该函数还创建一个新的图像列表来存储图像。
语法



-------------------------------------------------------- KeyGTK3Win32ImageList_Read ----
ImageList_Read    ImageList_Read函数从流中读取图像列表。
语法



-------------------------------------------------------- KeyGTK3Win32ImageList_Remove ----
ImageList_Remove    ImageList_Remove函数从图像列表中删除图像。
语法



-------------------------------------------------------- KeyGTK3Win32ImageList_Replace ----
ImageList_Replace    ImageList_Replace函数用图像替换图像列表中的图像。
语法
参数
【HIML】处理图像列表。【i】要替换的图像的索引。【hbmImagexh】处理包含图像的位图。【hbmMask】处理包含掩码的位图。如果图像列表中没有使用掩码，则忽略该参数。
返回值



-------------------------------------------------------- KeyGTK3Win32ImageList_ReplaceIcon ----
ImageList_ReplaceIcon    ImageList_ReplaceIcon函数用图标或光标替换图像。
语法
参数
【HIML】处理图像列表。【i】要替换的图像的索引。【HICON】处理包含新图像的位图和掩码的图标或光标。
返回值
如果函数成功，则返回值是图像的索引。如果函数失败，返回值为-1。
描


-------------------------------------------------------- KeyGTK3Win32ImageList_SetBkColor ----
ImageList_SetBkColor    ImageList_SetBkColor函数设置图像列表的背景颜色。
语法



-------------------------------------------------------- KeyGTK3Win32ImageList_SetDragCursorImage ----
ImageList_SetDragCursorImage    ImageList_SetDragCursorImage函数通过将指定的图像（通常是鼠标光标图像）与当前拖动图像组合来创建新的拖动图像。
语法



-------------------------------------------------------- KeyGTK3Win32ImageList_SetIconSize ----
ImageList_SetIconSize    ImageList_SetIconSize函数设置图像列表中图像的尺寸，并从列表中删除所有图像。
语法



-------------------------------------------------------- KeyGTK3Win32ImageList_SetOverlayImage ----
ImageList_SetOverlayImage    ImageList_SetOverlayImage函数将图像的索引添加到要用作叠加掩码的图像列表中。列表中最多可添加四个索引。
语法
参数
【HIML】处理图像列表。【图像】图像用作覆盖蒙版。【iOverlay】叠加掩码的一个索引。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
覆盖蒙版是在另一个


-------------------------------------------------------- KeyGTK3Win32ImageList_Write ----
ImageList_Write    ImageList_Write函数将图像列表写入流。
语法



-------------------------------------------------------- KeyGTK3Win32ImmAssociateContext ----
ImmAssociateContext    [Now Supported on Windows NT]ImmAssociateContext函数将指定的输入上下文与指定的窗口相关联。如果【hIMC】为NULL，该函数将删除窗口可能与输入上下文的任何关联。默认情况下，系统会将默认输入上下文与创建的每个窗口相关联。
语法



-------------------------------------------------------- KeyGTK3Win32ImmConfigureIME ----
ImmConfigureIME    [Now Supported on Windows NT]ImmConfigureIME函数显示IME的配置对话框。
语法



-------------------------------------------------------- KeyGTK3Win32ImmCreateContext ----
ImmCreateContext    [Now Supported on Windows NT]ImmCreateContext函数创建一个新的输入上下文，为上下文分配内存并进行初始化。应用程序调用此函数来准备其自己的输入上下文。HIMC ImmCreateContext(void);
返回值
如果函数成功，则返回值是新输入上下文的句柄。如果函数失败，返回值为NULL。


-------------------------------------------------------- KeyGTK3Win32ImmDestroyContext ----
ImmDestroyContext    [Now Supported on Windows NT]ImmDestroyContext函数释放输入上下文，并释放与之相关联的任何内存。
语法
参数
【hIMC】处理输入上下文以释放。
返回值
如果函数成功，则返回值为非零值。如果函数失败，返回值为零。
描述
使用ImmCreateContext函数创建输入上下文的任何应用程序都必


-------------------------------------------------------- KeyGTK3Win32ImmEnumRegisterWord ----
ImmEnumRegisterWord    [Now Supported on Windows NT]ImmEnumRegisterWord函数枚举具有指定读取字符串，样式和寄存器字符串的寄存器字符串。
语法
参数
【hKL】处理键盘布局。【lpfnEnumProc】指向回调函数。有关更多信息，请参阅EnumRegisterWordProc.【lpszReading】指向要列举的阅读字符串。如果为NUL


-------------------------------------------------------- KeyGTK3Win32ImmEscape ----
ImmEscape    [Now Supported on Windows NT]ImmEscape函数执行IME特定的子函数，主要用于国家/地区的函数。
语法



-------------------------------------------------------- KeyGTK3Win32ImmGetCandidateList ----
ImmGetCandidateList    [Now Supported on Windows NT]ImmGetCandidateList函数检索指定的候选列表，将列表复制到指定的缓冲区。
语法
参数
【hIMC】处理输入上下文。【deIndex】基于零的候选人名单索引。【lpCandList】指向接收候选列表的CANDIDATELIST结构的指针。【dwBufLen】缓冲区的大小，以字节


-------------------------------------------------------- KeyGTK3Win32ImmGetCandidateListCount ----
ImmGetCandidateListCount    [Now Supported on Windows NT]ImmGetCandidateListCount函数检索候选列表的大小（以字节为单位）。
语法
参数
【hIMC】处理输入上下文。【lpdwListCount】指向接收候选列表大小的32位变量的指针。
返回值
返回接收所有候选列表所需的字节数。
描述
响应于IMN_OPENCANDI


-------------------------------------------------------- KeyGTK3Win32ImmGetCandidateWindow ----
ImmGetCandidateWindow    [Now Supported on Windows NT]ImmGetCandidateWindow函数获取有关候选列表窗口的信息。
语法
参数
【hIMC】处理输入上下文。【dwBufLen】接收信息的缓冲区的大小（以字节为单位）。【lpCandidate】指向CANDIDATEFORM结构的指针，可以接收有关候选窗口的信息。
返


-------------------------------------------------------- KeyGTK3Win32ImmGetCompositionFont ----
ImmGetCompositionFont    [Now Supported on Windows NT]ImmGetCompositionFont函数检索有关当前用于在合成窗口中显示字符的逻辑字体的信息。
语法
参数
【hIMC】处理输入上下文。【lplf】指向接收字体信息的LOGFONT结构的指针。
返回值
如果函数成功，则返回值为非零值。如果函数失败，返回值为零。



-------------------------------------------------------- KeyGTK3Win32ImmGetCompositionString ----
ImmGetCompositionString    [Now Supported on Windows NT]ImmGetCompositionString函数检索有关组合字符串的信息。
语法
参数
【hIMC】处理输入上下文。【dwIndex】要检索的信息的索引。该参数可以是输入法编辑器常量中“IME Composition String Values”表中给出的值之一。对于除GCS_


-------------------------------------------------------- KeyGTK3Win32ImmGetCompositionWindow ----
ImmGetCompositionWindow    [Now Supported on Windows NT]ImmGetCompositionWindow函数获取有关组合窗口的信息。
语法
参数
【hIMC】处理输入上下文。【lpCompForm】指向COMPOSITIONFORM结构的指针，该结构接收有关组合窗口的信息。
返回值
如果函数成功，则返回值为非零值。如果函数失败，返


-------------------------------------------------------- KeyGTK3Win32ImmGetContext ----
ImmGetContext    [Now Supported on Windows NT]ImmGetContext函数检索与指定窗口相关联的输入上下文。
语法



-------------------------------------------------------- KeyGTK3Win32ImmGetConversionList ----
ImmGetConversionList    [Now Supported on Windows NT]ImmGetConversionList函数从一个字符或单词中检索字符或单词的列表。
语法
参数
【hKL】处理键盘布局。【hIMC】处理输入上下文。【lpSrc】指向空终止字符串的指针。【Pointer to a null-terminated character string.】指向


-------------------------------------------------------- KeyGTK3Win32ImmGetConversionStatus ----
ImmGetConversionStatus    [Now Supported on Windows NT]ImmGetConversionStatus函数获取当前的转换状态。
语法



-------------------------------------------------------- KeyGTK3Win32ImmGetDefaultIMEWnd ----
ImmGetDefaultIMEWnd    [Now Supported on Windows NT]ImmGetDefaultIMEWnd函数获取IME类的默认窗口句柄。
语法
参数
【的hWnd】处理窗口的应用程序。
返回值
如果函数成功，则返回值是IME类的默认窗口句柄。如果函数失败，返回值为NULL。
描述
系统为每个线程创建一个默认的IME窗口。IME窗口


-------------------------------------------------------- KeyGTK3Win32ImmGetDescription ----
ImmGetDescription    [Now Supported on Windows NT]ImmGetDescription函数将IME的描述复制到指定的缓冲区。
语法



-------------------------------------------------------- KeyGTK3Win32ImmGetGuideLine ----
ImmGetGuideLine    [Now Supported on Windows NT]ImmGetGuideLine函数获取有关错误的信息。应用程序使用该信息通知用户。
语法



-------------------------------------------------------- KeyGTK3Win32ImmGetIMEFileName ----
ImmGetIMEFileName    [Now Supported on Windows NT]ImmGetIMEFileName函数获取与指定键盘布局相关联的IME的文件名。
语法



-------------------------------------------------------- KeyGTK3Win32ImmGetOpenStatus ----
ImmGetOpenStatus    [Now Supported on Windows NT]ImmGetOpenStatus函数检查IME是打开还是关闭。
语法



-------------------------------------------------------- KeyGTK3Win32ImmGetProperty ----
ImmGetProperty    [Now Supported on Windows NT]ImmGetProperty函数获取与指定键盘布局相关联的IME的属性和函数。
语法



-------------------------------------------------------- KeyGTK3Win32ImmGetRegisterWordStyle ----
ImmGetRegisterWordStyle    [Now Supported on Windows NT]ImmGetRegisterWordStyle函数获取与指定键盘布局相关联的IME支持的样式列表。
语法
参数
【hKL】处理键盘布局。【有限la】缓冲区可容纳的最大样式数。【lpStyleBuf】指向接收样式信息的STYLEBUF结构的指针。
返回值
返回值是复制到缓冲区的布局句柄的数量，或者如


-------------------------------------------------------- KeyGTK3Win32ImmGetStatusWindowPos ----
ImmGetStatusWindowPos    [Now Supported on Windows NT]ImmGetStatusWindowPos函数获取状态窗口的位置。
语法
参数
【hIMC】处理输入上下文。【同步读取操作期间的文件结束测试很简单，如下例所示：】指向接收位置坐标的POINT结构的指针。这些是相对于屏幕左上角的屏幕坐标。
返回值
如果函数成功，则返回


-------------------------------------------------------- KeyGTK3Win32ImmGetVirtualKey ----
ImmGetVirtualKey    [Now Supported on Windows NT]ImmGetVirtualKey函数恢复与已经由IME处理的密钥输入消息相关联的原始虚拟键值。
语法



-------------------------------------------------------- KeyGTK3Win32ImmInstallIME ----
ImmInstallIME    [Now Supported on Windows NT]ImmInstallIME函数将IME安装到系统中。
语法



-------------------------------------------------------- KeyGTK3Win32ImmIsIME ----
ImmIsIME    [Now Supported on Windows NT]ImmIsIME函数检查指定的句柄是否识别IME。
语法



-------------------------------------------------------- KeyGTK3Win32ImmIsUIMessage ----
ImmIsUIMessage    [Now Supported on Windows NT]ImmIsUIMessage函数检查用于IME窗口的消息，并将这些消息发送到指定的窗口。
语法



-------------------------------------------------------- KeyGTK3Win32ImmNotifyIME ----
ImmNotifyIME    [Now Supported on Windows NT]ImmNotifyIME函数通知IME有关输入上下文状态的更改。
语法



-------------------------------------------------------- KeyGTK3Win32ImmRegisterWord ----
ImmRegisterWord    [Now Supported on Windows NT]ImmRegisterWord函数将字符串注册到与指定键盘布局相关联的IME的字典中。
语法



-------------------------------------------------------- KeyGTK3Win32ImmReleaseContext ----
ImmReleaseContext    [Now Supported on Windows NT]ImmReleaseContext函数释放输入上下文并解锁上下文中相关的内存。对于ImmGetContext函数的每次调用，应用程序都必须调用此函数。
语法
参数
【的hWnd】处理到之前检索到输入上下文的窗口。【hIMC】处理输入上下文。
返回值
如果函数成功，则返回值为非零值。如果函数失败，返回值为零。



-------------------------------------------------------- KeyGTK3Win32ImmSetCandidateWindow ----
ImmSetCandidateWindow    [Now Supported on Windows NT]ImmSetCandidateWindow函数设置有关候选列表窗口的信息。
语法
参数
【hIMC】处理输入上下文。【lpCandidate】指向CANDIDATEFORM结构的指针，其中包含有关候选窗口的信息。
返回值
如果函数成功，则返回值为非零值。如果函数失败，返回值


-------------------------------------------------------- KeyGTK3Win32ImmSetCompositionFont ----
ImmSetCompositionFont    [Now Supported on Windows NT]ImmSetCompositionFont函数设置用于在合成窗口中显示字符的逻辑字体。
语法
参数
【hIMC】处理输入上下文。【lplf】指向包含要设置的字体信息的LOGFONT结构。
返回值
如果函数成功，则返回值为非零值。如果函数失败，返回值为零。
描述
即使应用程序从不使用


-------------------------------------------------------- KeyGTK3Win32ImmSetCompositionString ----
ImmSetCompositionString    [Now Supported on Windows NT]ImmSetCompositionString函数设置组合和读取字符串的字符，属性和子句。
语法
参数
【hIMC】处理输入上下文。【dwIndex】要设置的信息类型。此参数可以是以下值之一：值含义SCS_SETSTR设置组合字符串，读取字符串或两者。【lpComp】和【lpReadga】参数


-------------------------------------------------------- KeyGTK3Win32ImmSetCompositionWindow ----
ImmSetCompositionWindow    [Now Supported on Windows NT]ImmSetCompositionWindow函数设置组合窗口的位置。
语法
参数
【hIMC】处理输入上下文。【lpCompForm】指向包含新位置的COMPOSITIONFORM结构以及有关组合窗口的其他相关信息。
返回值
如果函数成功，则返回值为非零值。如果函数失


-------------------------------------------------------- KeyGTK3Win32ImmSetConversionStatus ----
ImmSetConversionStatus    [Now Supported on Windows NT]ImmSetConversionStatus函数设置当前的转换状态。
语法



-------------------------------------------------------- KeyGTK3Win32ImmSetOpenStatus ----
ImmSetOpenStatus    [Now Supported on Windows NT]ImmSetOpenStatus函数打开或关闭IME。
语法
参数
【hIMC】处理输入上下文。【FOPEN】Open flag. If TRUE, the IME is opened; otherwise, it is closed.
返回值
如果函数


-------------------------------------------------------- KeyGTK3Win32ImmSetStatusWindowPos ----
ImmSetStatusWindowPos    [Now Supported on Windows NT]ImmSetStatusWindowPos函数设置状态窗口的位置。
语法
参数
【hIMC】处理输入上下文。【同步读取操作期间的文件结束测试很简单，如下例所示：】指向POINT结构的指针，可以接收状态窗口的新位置。
返回值
如果函数成功，则返回值为非零值。如果函数失


-------------------------------------------------------- KeyGTK3Win32ImmSimulateHotKey ----
ImmSimulateHotKey    [Now Supported on Windows NT]ImmSimulateHotKey函数模拟指定的IME热键，导致与用户在指定窗口中按下热键相同的响应。
语法



-------------------------------------------------------- KeyGTK3Win32ImmUnregisterWord ----
ImmUnregisterWord    [Now Supported on Windows NT]ImmUnregisterWord函数从与指定键盘布局相关联的IME的字典中删除注册字符串。
语法



-------------------------------------------------------- KeyGTK3Win32ImpersonateDdeClientWindow ----
ImpersonateDdeClientWindow    ImpersonateDdeClientWindow函数使DDE服务器应用程序能够模拟DDE客户端应用程序的安全上下文，以保护安全的服务器数据免遭未经授权的DDE客户端。
语法
参数
【hWndClient】标识要模拟的DDE客户端窗口。客户端窗口必须与由【hWndServer】参数标识的服务器窗口建立DDE会话。【hWndServer】标识DDE服务器窗口。在调用此函数


-------------------------------------------------------- KeyGTK3Win32ImpersonateLoggedOnUser ----
ImpersonateLoggedOnUser    ImpersonateLoggedOnUser函数允许调用线程模仿一个用户。用户由令牌句柄表示。
语法
参数
【hToken】处理代表登录用户的主要或模拟访问令牌。这可以是通过调用LogonUser，DuplicateToken，DuplicateTokenEx，OpenProcessToken或O


-------------------------------------------------------- KeyGTK3Win32ImpersonateNamedPipeClient ----
ImpersonateNamedPipeClient    ImpersonateNamedPipeClient函数模拟命名管道客户端应用程序。
语法
参数
【hNamedPipe】标识一个命名管道。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError函数。
描述
Impers


-------------------------------------------------------- KeyGTK3Win32ImpersonateSelf ----
ImpersonateSelf    ImpersonateSelf函数获取模拟调用进程的安全上下文的访问令牌。令牌被分配给调用线程。
语法
参数
【ImpersonationLevel】指定一个SECURITY_IMPERSONATION_LEVEL枚举类型，提供新令牌的模拟级别。
返回值
如果函数成功，返回值不为零。如果函数失败


-------------------------------------------------------- KeyGTK3Win32InflateRect ----
InflateRect    InflateRect函数可以增加或减小指定矩形的宽度和高度。InflateRect函数将【dy】单位添加到矩形的左侧和右侧，并将【dy】单位添加到顶部和底部。【dx】和【dy】参数是有符号值;正值增加宽度和高度，负值减小。
语法
参数
【LPRC】指向尺寸增加或减小的RECT结构。【dx】指定增加或减少矩形宽度的数量。该参数必须为负值才能减小宽度。【dy】指定增加或减少矩形高度的数量。该参数必须为负值才能降低高度。
返回


-------------------------------------------------------- KeyGTK3Win32InitAtomTable ----
InitAtomTable    InitAtomTable函数初始化本地原子表并将其设置为指定的大小。
语法
参数
【服务提供商】指定原子表的表条目中的大小。该值应该是素数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
应用程序不需要使用此函数来使用本地atom表。本地和


-------------------------------------------------------- KeyGTK3Win32InitCommonControls ----
InitCommonControls    InitCommonControls函数可确保加载公共控制动态链接库（DLL）。void InitCommonControls(VOID);
返回值
此函数不返回值。


-------------------------------------------------------- KeyGTK3Win32InitializeAcl ----
InitializeAcl    InitializeAcl函数创建一个新的ACL结构。ACL是访问控制列表。
语法
参数
【ACL】指向由此函数初始化的ACL结构。【nAclLength】指定【ACL】参数指向的缓冲区的长度（以字节为单位）。该值必须足够大以包含ACL头和所有访问控制条目（ACE）存储在ACL中


-------------------------------------------------------- KeyGTK3Win32InitializeCriticalSection ----
InitializeCriticalSection    InitializeCriticalSection函数初始化一个关键部分对象。
语法
参数
【lpCriticalSection】指向临界区对象。
返回值
此函数不返回值。
描述
单个进程的线程可以使用关键部分对象进行互斥同步。该过程负责分配关键部分对象使用的内存，该对象可


-------------------------------------------------------- KeyGTK3Win32InitializeSecurityDescriptor ----
InitializeSecurityDescriptor    InitializeSecurityDescriptor函数初始化一个新的安全描述符。
语法
参数
【pSecurityDescriptor】指向函数初始化的SECURITY_DESCRIPTOR结构。【dwRevision】指定要分配给安全描述符的修订级别。这必须是SECURITY_DE


-------------------------------------------------------- KeyGTK3Win32InitializeSid ----
InitializeSid    InitializeSid函数初始化SID结构。SID是安全标识符。
语法
参数
【希德】指向要初始化的SID结构。【pIdentifierAuthority】指向要设置SID结构的SID_IDENTIFIER_AUTHORITY结构。【nSubAuthorityCoun


-------------------------------------------------------- KeyGTK3Win32InitiateSystemShutdown ----
InitiateSystemShutdown    InitiateSystemShutdown函数启动指定计算机的关机和可选重新启动。
语法
参数
【lpMachineName】指向以空值终止的字符串，指定要关闭的计算机的网络名称。如果【lpMachineName】为NULL或指向空字符串，该函数将关闭本地计算机。【// address


-------------------------------------------------------- KeyGTK3Win32InSendMessage ----
InSendMessage    InSendMessage函数指定当前窗口过程是否正在处理通过调用SendMessage函数从另一个线程发送的消息。
语法
参数
此函数无参数。
返回值
如果窗口过程使用SendMessage函数处理从另一个线程发送的消息，则返回值不为零。如果窗口过程没有使用SendMessage函数处理从另一个线程发送的消息，返


-------------------------------------------------------- KeyGTK3Win32InsertMenu ----
InsertMenu    InsertMenu函数将一个新的菜单项插入菜单，将其他项目向下移动到菜单中。InsertMenuItem函数已被InsertMenuItem函数取代。但是，如果您不需要InsertMenuItem的任何扩展函数，您仍然可以使用InsertMenu.
语法
参数
【HMENU】标识要更改的菜单。【uPositionbs】指定由【uFlags】参数确定的要插入新菜单项的菜单项。【uFlags】指定控制【uPositionbs】参数的解释以及新菜单项的内


-------------------------------------------------------- KeyGTK3Win32InsertMenuItem ----
InsertMenuItem    [Now Supported on Windows NT]InsertMenuItem函数在菜单中的指定位置插入一个新的菜单项。
语法
参数
【HMENU】处理插入新菜单项的菜单。【藤】在插入新项目之前的菜单项的标识符或位置。该参数的含义取决于【fByPosition】的值。【fByPosition】指定【藤】的含义的值。如果此参


-------------------------------------------------------- KeyGTK3Win32Int32x32To64 ----
Int32x32To64    Int32x32To64函数将两个带符号的32位整数相乘，返回带符号的64位整数结果。该函数在所有Win32平台上执行最佳。
语法
参数
【乘数】指定乘法的第一个带符号的32位整数。【被乘数】指定乘法的第二个带符号的32位整数。
返回值
返回值是乘法的带符号64位整数结果。
描述
该函数通过最佳内联代码在所有平台上实现


-------------------------------------------------------- KeyGTK3Win32Int64ShllMod32 ----
Int64ShllMod32    Int64ShllMod32函数对无符号64位整数值执行左逻辑移位操作。该函数提供了用于左逻辑移位的改进的移位代码，其中移位计数在0-31范围内。
语法
参数
【值】指定要移位的无符号64位整数。【ShiftCount】指定移位计数范围0  -  31。
返回值
返回值是左逻辑移位操作的无符号64位整数结果。
描述
移位计数是值的位移动的位


-------------------------------------------------------- KeyGTK3Win32Int64ShraMod32 ----
Int64ShraMod32    Int64ShraMod32函数对有符号的64位整数值执行正确的算术移位操作。该函数提供了改进的移位代码，用于右移算，其中移位计数范围为0  -  31。
语法
参数
【值】指定要移位的带符号的64位整数。【ShiftCount】指定移位计数范围0  -  31。
返回值
返回值是右侧算术移位操作的带符号64位整数结果。
描述
移位计数是值的位移动


-------------------------------------------------------- KeyGTK3Win32Int64ShrlMod32 ----
Int64ShrlMod32    Int64ShrlMod32函数对无符号64位整数值执行正确的逻辑移位操作。该函数为移位计数范围为0  -  31的正确逻辑移位提供了改进的移位代码。
语法
参数
【值】指定要移位的无符号64位整数。【ShiftCount】指定移位计数范围0  -  31。
返回值
返回值是正确的逻辑移位操作的无符号64位整数结果。
描述
移位计数是值的位移动


-------------------------------------------------------- KeyGTK3Win32InterlockedCompareExchange ----
InterlockedCompareExchange    [New - Windows NT]InterlockedCompareExchange函数将根据比较结果对【目的地】和【Comperand】参数中指定的值进行原子比较，并交换值。该函数可防止多个线程同时使用相同的变量。
语法
参数
【目的地】指定目标值的地址。这是一个32位值。标志被忽略。【交换】指定交换值。这是一个32位值。标志被忽略。【Comperand】指定与【目的地】进行比较的值。这是一个32位值。标志被忽略。


-------------------------------------------------------- KeyGTK3Win32InterlockedDecrement ----
InterlockedDecrement    InterlockedDecrement函数同时减少（减少1）指定的32位变量的值，并检查结果值。该函数可防止多个线程同时使用相同的变量。
语法
参数
【// address of the variable to increment】指向32位变量递减。
返回值
如果减量的结果为零，返回值为零。如果减量的结果小于零，则返回值小于零。如果


-------------------------------------------------------- KeyGTK3Win32InterlockedExchange ----
InterlockedExchange    InterlockedExchange函数以原子方式交换一对32位值。该函数可防止多个线程同时使用相同的变量。
语法
参数
【目标】LONG的交易地址。该函数将此LONG值设置为【值】，并返回其先前的值。【值】指定【目标】指向的LONG值的新值。
返回值
该函数返回【目标】指向的LONG值的先前值。
描述



-------------------------------------------------------- KeyGTK3Win32InterlockedExchangeAdd ----
InterlockedExchangeAdd    [New - Windows NT]InterlockExchangeAdd函数对加数变量执行增量值的原子加法。该函数可防止多个线程同时使用相同的变量。AddendPLONG 【加数】,//指向加数的指针LONG 【增量】//增加值);
参数
【加数】指定添加了【增量】号码的号码的地址。【增量】指定要添加到【加数】参数指向的变量的数字。
返回值
返回值是【加数】参数的初始值。
描述
函数InterlockedExchang


-------------------------------------------------------- KeyGTK3Win32InterlockedIncrement ----
InterlockedIncrement    InterlockedIncrement函数同时增加（增加1）指定的32位变量的值，并检查结果值。该函数可防止多个线程同时使用相同的变量。
语法
参数
【// address of the variable to increment】指向32位变量增量。
返回值
如果增量的结果为零，返回值为零。如果增量的结果小于零，则返回值小于零。如果


-------------------------------------------------------- KeyGTK3Win32IntersectClipRect ----
IntersectClipRect    IntersectClipRect函数从当前剪切区域和指定矩形的交点创建一个新的剪切区域。
语法
参数
【HDC】标识设备上下文。【nLeftRect】指定矩形左上角的逻辑x坐标。【nTopRect】指定矩形左上角的逻辑y坐标。【nRightRect】指定矩形右下角的逻辑x坐标。【nBotto


-------------------------------------------------------- KeyGTK3Win32IntersectRect ----
IntersectRect    IntersectRect函数计算两个源矩形的交集，并将交点矩形的坐标放置到目标矩形中。如果源矩形不相交，则将空矩形（其中所有坐标设置为零）放入目标矩形。
语法
参数
【lprcDst】指向RECT结构的接收【lprcSrc1】和【lprcSrc2】参数指向的矩形的交点。【lprcSrc1】指向包含第一个源矩形的RECT结构。【lprcSrc2】指向包含第


-------------------------------------------------------- KeyGTK3Win32InvalidateRect ----
InvalidateRect    InvalidateRect函数向指定的窗口的更新区域添加一个矩形。更新区域表示必须重新绘制的窗口的客户区域的部分。
语法
参数
【的hWnd】标识更新区域已更改的窗口。如果此参数为NULL，则Windows会使所有窗口无效并重新绘制，并在函数返回之前将WM_ERASEBKGND和WM_NCPAINT消息发送到窗口过程


-------------------------------------------------------- KeyGTK3Win32InvalidateRgn ----
InvalidateRgn    InvalidateRgn函数将指定区域中的客户端区域添加到窗口的当前更新区域，使其无效。无效区域以及更新区域中的所有其他区域在下一个WM_PAINT消息发生时被标记为绘画。
语法
参数
【的hWnd】标识具有要修改的更新区域的窗口。【HRGN】标识要添加到更新区域的区域。假设该区域具有客户端坐标。如果此参数为NULL，则将整个客户端区域添加到更新区域。【// erase-b


-------------------------------------------------------- KeyGTK3Win32InvertRect ----
InvertRect    InvertRect函数通过对矩形内部的每个像素的颜色值执行逻辑NOT操作来反转窗口中的矩形。
语法
参数
【hDC】标识设备上下文。【LPRC】指向包含要反转的矩形的逻辑坐标的RECT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLas


-------------------------------------------------------- KeyGTK3Win32InvertRgn ----
InvertRgn    InvertRgn函数可以反转指定区域的颜色。
语法
参数
【HDC】标识设备上下文。【HRGN】标识颜色反转的区域。该区域的坐标被推定为逻辑坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
在单色屏幕上，Inve


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_CHECK_VERIFY ----
IOCTL_DISK_CHECK_VERIFYIOCTL_DISK_CHECK_VERIFY函数已被IOCTL_STORAGE_CHECK_VERIFY函数取代。


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_EJECT_MEDIA ----
IOCTL_DISK_EJECT_MEDIAIOCTL_DISK_EJECT_MEDIA函数已被IOCTL_STORAGE_EJECT_MEDIA函数取代。


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_FORMAT_TRACKS ----
IOCTL_DISK_FORMAT_TRACKS    IOCTL_DISK_FORMAT_TRACKS DeviceIoControl操作格式化磁盘上指定的，连续的磁道集。dwIoControlCode = IOCTL_DISK_FORMAT_TRACKS;   //操作代码lpInBuffer;         //输入缓冲区的地址nInBufferSize;      //输入缓冲区的大小lpOutBuffer = NULL; //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0; //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;    //输出的实际字节的地址
参数
【lpInBuffer】指向包含FORMAT_PARAMETERS数据结构的缓冲区。【nInBufferSize】指定由【lpInBuffer】指向的缓冲区的大小（以字节为单位），该大小必须


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_GET_DRIVE_GEOMETRY ----
IOCTL_DISK_GET_DRIVE_GEOMETRY    IOCTL_DISK_GET_DRIVE_GEOMETRY DeviceIoControl操作返回有关物理磁盘几何的信息：类型，柱面数，每个磁道的磁道，每个磁道的扇区以及每个扇区的字节数。dwIoControlCode = IOCTL_DISK_GET_DRIVE_GEOMETRY;   //操作代码lpInBuffer = NULL;  //输入缓冲区的地址不曾用过;必须为NULLnInBufferSize = 0;  //输入缓冲区的大小不曾用过;必须为零lpOutBuffer ;       //输出缓冲区的地址nOutBufferSize ;    //输出缓冲区的大小lpBytesReturned ;   //输出的实际字节的地址
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_GET_DRIVE_LAYOUT ----
IOCTL_DISK_GET_DRIVE_LAYOUT    IOCTL_DISK_GET_DRIVE_LAYOUT DeviceIoControl操作返回有关磁盘上分区数和每个分区的函数的信息。dwIoControlCode = IOCTL_DISK_GET_DRIVE_LAYOUT;   //操作代码lpInBuffer = NULL;  //输入缓冲区的地址不曾用过;必须为NULLnInBufferSize = 0;  //输入缓冲区的大小不曾用过;必须为零lpOutBuffer ;       //输出缓冲区的地址nOutBufferSize ;    //输出缓冲区的大小lpBytesReturned ;   //输出的实际字节的地址
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_GET_MEDIA_TYPES ----
IOCTL_DISK_GET_MEDIA_TYPESIOCTL_DISK_GET_MEDIA_TYPES函数已被IOCTL_STORAGE_GET_MEDIA_TYPES函数取代。


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_GET_PARTITION_INFO ----
IOCTL_DISK_GET_PARTITION_INFO    IOCTL_DISK_GET_PARTITION_INFO DeviceIoControl操作返回有关磁盘分区的类型，大小和性质的信息。dwIoControlCode = IOCTL_DISK_GET_PARTITION_INFO ;   //操作代码lpInBuffer = NULL;  //输入缓冲区的地址不曾用过;必须为NULLnInBufferSize = 0;  //输入缓冲区的大小不曾用过;必须为零lpOutBuffer;        //输出缓冲区的地址nOutBufferSize;     //输出缓冲区的大小lpBytesReturned;    //输出的实际字节的地址
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_LOAD_MEDIA ----
IOCTL_DISK_LOAD_MEDIAIOCTL_DISK_LOAD_MEDIA函数已被IOCTL_STORAGE_LOAD_MEDIA函数取代。


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_MEDIA_REMOVAL ----
IOCTL_DISK_MEDIA_REMOVALIOCTL_DISK_MEDIA_REMOVAL函数已被IOCTL_STORAGE_MEDIA_REMOVAL函数取代。


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_PERFORMANCE ----
IOCTL_DISK_PERFORMANCE    IOCTL_DISK_PERFORMANCE DeviceIoControl操作提供磁盘性能信息。dwIoControlCode = IOCTL_DISK_PERFORMANCE;   //操作代码lpInBuffer = NULL; //输入缓冲区的地址不曾用过;必须为NULLnInBufferSize = 0; //输入缓冲区的大小不曾用过;必须为零lpOutBuffer;       //输出缓冲区的地址nOutBufferSize;    //输出缓冲区的大小lpBytesReturned;   //输出的实际字节的地址
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_REASSIGN_BLOCKS ----
IOCTL_DISK_REASSIGN_BLOCKS    IOCTL_DISK_REASSIGN_BLOCKS DeviceIoControl操作指示磁盘设备将一个或多个块映射到其备用块池。dwIoControlCode = IOCTL_DISK_REASSIGN_BLOCKS;   //操作代码lpInBuffer;          //输入缓冲区的地址nInBufferSize;       //输入缓冲区的大小lpOutBuffer = NULL;  //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0;  //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;     //输出的实际字节的地址
参数
【lpInBuffer】指向包含REASSIGN_BLOCKS数据结构的缓冲区，指定要重新分配给其备用块池的块。【nInBufferSize】指定由【lpInBuffer】指向的缓冲区的大小


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_SET_DRIVE_LAYOUT ----
IOCTL_DISK_SET_DRIVE_LAYOUT    IOCTL_DISK_SET_DRIVE_LAYOUT DeviceIoControl操作按驱动器布局和分区信息数据指定分区磁盘。dwIoControlCode = IOCTL_DISK_SET_DRIVE_LAYOUT;   //操作代码lpInBuffer;          //输入缓冲区的地址nInBufferSize;       //输入缓冲区的大小lpOutBuffer = NULL;  //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0;  //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;     //输出的实际字节的地址
参数
【lpInBuffer】指向包含驱动器布局和分区信息数据的缓冲区。数据以DRIVE_LAYOUT_INFORMATION数据结构和一系列PARTITION_INFORMATION数据结构的形


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_SET_PARTITION_INFO ----
IOCTL_DISK_SET_PARTITION_INFO    IOCTL_DISK_SET_PARTITION_INFO DeviceIoControl操作设置指定磁盘分区的分区类型。dwIoControlCode = IOCTL_DISK_SET_PARTITION_INFO;   //操作代码lpInBuffer;          //输入缓冲区的地址nInBufferSize;       //输入缓冲区的大小lpOutBuffer = NULL;  //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0;  //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;     //输出的实际字节的地址
参数
【lpInBuffer】指向包含要设置的分区数据的缓冲区。数据以SET_PARTITION_INFORMATION数据结构存在。【nInBufferSize】指定由【lpInBuffer】指


-------------------------------------------------------- KeyGTK3Win32IOCTL_DISK_VERIFY ----
IOCTL_DISK_VERIFY    IOCTL_DISK_VERIFY DeviceIoControl操作在磁盘上执行指定盘区的逻辑格式。dwIoControlCode = IOCTL_DISK_VERIFY;   //操作代码lpInBuffer;          //输入缓冲区的地址nInBufferSize;       //输入缓冲区的大小lpOutBuffer = NULL;  //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0;  //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;     //输出的实际字节的地址
参数
【lpInBuffer】指向包含VERIFY_INFORMATION数据结构的缓冲区。【nInBufferSize】指定由【lpInBuffer】指向的缓冲区的大小（以字节为单位），该大小必


-------------------------------------------------------- KeyGTK3Win32IOCTL_SERIAL_LSRMST_INSERT ----
IOCTL_SERIAL_LSRMST_INSERT    IOCTL_SERIAL_LSRMST_INSERT DeviceIoControl操作启用或禁用将线路状态和调制解调器状态值放置在应用程序通过ReadFile函数获取的常规数据流中。当启用此线路状态和调制解调器状态数据放置模式时，转义字符将在数据流中的状态值前面。用户可定义的转义字符由IOCTL_SERIAL_LSRMST_INSERT操作设置。状态值由1到3 BYTE s组成。有关状态值详细信息，请参阅下面的备注部分。dwIoControlCode = IOCTL_SERIAL_LSRMST_INSERT;     //操作代码lpInBuffer;         //输入缓冲区的地址nInBufferSize;      //输入缓冲区的大小lpOutBuffer = NULL; //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0; //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;    //输出的实际字节的地址
参数
【lpInBuffer】指向包含单个BYTE的缓冲区。如果BYTE是非零值，则它是所需的线路状态和调制解调器状态值转义字符。操作将打开LSRMST_INSERT线路状态和调制解调器状态数据放


-------------------------------------------------------- KeyGTK3Win32IOCTL_STORAGE_CHECK_VERIFY ----
IOCTL_STORAGE_CHECK_VERIFY  IOCTL_STORAGE_CHECK_VERIFY DeviceIoControl操作确定设备的介质是否可访问;例如，媒体是否在设备中。dwIoControlCode = IOCTL_STORAGE_CHECK_VERIFY ;   //操作代码lpInBuffer = NULL;  //输入缓冲区的地址不曾用过;必须为NULLnInBufferSize = 0;  //输入缓冲区的大小不曾用过;必须为零lpOutBuffer = NULL; //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0; //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;    //输出的实际字节的地址
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyGTK3Win32IOCTL_STORAGE_EJECT_MEDIA ----
IOCTL_STORAGE_EJECT_MEDIA  IOCTL_STORAGE_EJECT_MEDIA DeviceIoControl操作会导致从SCSI设备弹出介质。dwIoControlCode = IOCTL_STORAGE_EJECT_MEDIA;   //操作代码lpInBuffer = NULL;  //输入缓冲区的地址不曾用过;必须为NULLnInBufferSize = 0;  //输入缓冲区的大小不曾用过;必须为零lpOutBuffer = NULL; //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0; //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;    //输出的实际字节的地址
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyGTK3Win32IOCTL_STORAGE_GET_MEDIA_TYPES ----
IOCTL_STORAGE_GET_MEDIA_TYPES  IOCTL_STORAGE_GET_MEDIA_TYPES DeviceIoControl操作返回有关设备驱动程序支持的媒体类型的信息。dwIoControlCode = IOCTL_STORAGE_GET_MEDIA_TYPES;   //操作代码lpInBuffer = NULL;  //输入缓冲区的地址不曾用过;必须为NULLnInBufferSize = 0;  //输入缓冲区的大小不曾用过;必须为零lpOutBuffer ;       //输出缓冲区的地址nOutBufferSize ;    //输出缓冲区的大小lpBytesReturned;    //输出的实际字节的地址
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyGTK3Win32IOCTL_STORAGE_LOAD_MEDIA ----
IOCTL_STORAGE_LOAD_MEDIA  IOCTL_STORAGE_LOAD_MEDIA DeviceIoControl操作会将介质加载到设备中。dwIoControlCode = IOCTL_STORAGE_LOAD_MEDIA;   //操作代码lpInBuffer = NULL;  //输入缓冲区的地址不曾用过;必须为NULLnInBufferSize = 0;  //输入缓冲区的大小不曾用过;必须为零lpOutBuffer = NULL; //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0; //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;    //输出的实际字节的地址
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyGTK3Win32IOCTL_STORAGE_MEDIA_REMOVAL ----
IOCTL_STORAGE_MEDIA_REMOVAL  IOCTL_STORAGE_MEDIA_REMOVAL DeviceIoControl操作启用或禁用弹出介质的机制，对于具有该锁定函数的设备。dwIoControlCode = IOCTL_STORAGE_MEDIA_REMOVAL;   //操作代码lpInBuffer;         //输入缓冲区的地址nInBufferSize;      //输入缓冲区的大小lpOutBuffer = NULL; //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0; //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;    //输出的实际字节的地址
参数
【lpInBuffer】指向包含PREVENT_MEDIA_REMOVAL数据结构的缓冲区。该结构的PreventMediaRemoval成员的TRUE值指定禁止介质删除（设备已锁定）。FA


-------------------------------------------------------- KeyGTK3Win32IsBadCodePtr ----
IsBadCodePtr    IsBadCodePtr函数确定调用进程是否具有对指定地址的内存的读访问权限。
语法
参数
【lpfn】指向内存中的地址。
返回值
如果调用进程具有对指定内存的读取访问权限，返回值为零。如果调用进程没有对指定内存的读取访问权限，则返回值不为零。要获取扩展错误信息，请调用GetL


-------------------------------------------------------- KeyGTK3Win32IsBadHugeReadPtr ----
IsBadHugeReadPtr    IsBadHugeReadPtr函数验证调用进程是否具有对指定范围的内存的读取访问权限。
语法
参数
【lp】指向内存块的第一个字节。【UCB】指定内存块的大小（以字节为单位）。如果此参数为零，返回值为零。
返回值
如果调用进程对指定内存范围内的所有字节具有读取访问权限，返回值为零。如果


-------------------------------------------------------- KeyGTK3Win32IsBadHugeWritePtr ----
IsBadHugeWritePtr    IsBadHugeWritePtr函数验证调用进程是否具有对指定范围的内存的写访问权限。
语法
参数
【lp】指向内存块的第一个字节。【UCB】指定内存块的大小（以字节为单位）。如果此参数为零，返回值为零。
返回值
如果调用进程对指定内存范围内的所有字节具有写入访问权限，返回值为零。如果


-------------------------------------------------------- KeyGTK3Win32IsBadReadPtr ----
IsBadReadPtr    IsBadReadPtr函数验证调用进程是否具有对指定范围的内存的读取访问权限。
语法
参数
【lp】指向内存块的第一个字节。【UCB】指定内存块的大小（以字节为单位）。如果此参数为零，返回值为零。
返回值
如果调用进程对指定内存范围内的所有字节具有读取访问权限，返回值为零。如果


-------------------------------------------------------- KeyGTK3Win32IsBadStringPtr ----
IsBadStringPtr    IsBadStringPtr函数验证调用进程是否具有对字符串指针指向的内存范围的读取访问权限。
语法
参数
【lpsz】指向一个空值终止的字符串，Unicode或ASCII。【// maximum storage capacity of buffer】指定字符串的最大大小（以字符为单位）。该函数检


-------------------------------------------------------- KeyGTK3Win32IsBadWritePtr ----
IsBadWritePtr    IsBadWritePtr函数验证调用进程是否具有对指定范围的内存的写访问权限。
语法
参数
【lp】指向内存块的第一个字节。【UCB】指定内存块的大小（以字节为单位）。如果此参数为零，返回值为零。
返回值
如果调用进程对指定内存范围内的所有字节具有写入访问权限，返回值为零。如果


-------------------------------------------------------- KeyGTK3Win32IsCharAlpha ----
IsCharAlpha    IsCharAlpha函数确定字符是否是字母字符。该确定基于用户在设置期间或通过使用控制面板选择的语言的语义。
语法
参数
【ch】指定要测试的字符。
返回值
如果字符是字母，则返回值不为零。如果字符不是字母，则返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32IsCharAlphaNumeric ----
IsCharAlphaNumeric    IsCharAlphaNumeric函数确定字符是字母还是数字字符。该确定基于用户在设置期间或通过使用控制面板选择的语言的语义。
语法
参数
【ch】指定要测试的字符。
返回值
如果字符是字母数字，则返回值不为零。如果字符不是字母数字，则返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32IsCharLower ----
IsCharLower    IsCharLower函数确定字符是否为小写。该确定基于用户在设置期间或通过使用控制面板选择的语言的语义。
语法
参数
【ch】指定要测试的字符。
返回值
如果字符是小写，则返回值不为零。如果字符不是小写，则返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32IsCharUpper ----
IsCharUpper    IsCharUpper函数可确定字符是大写字母。该确定基于用户在设置期间或通过使用控制面板选择的语言的语义。
语法
参数
【ch】指定要测试的字符。
返回值
如果字符是大写的，则返回值不为零。如果字符不是大写，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32IsChild ----
IsChild    IsChild函数测试窗口是否为指定父窗口的子窗口或后代窗口。如果父窗口位于父窗口的链中，则子窗口是指定父窗口的直接后代;父窗口链从原始的重叠窗口或弹出窗口引导到子窗口。
语法
参数
【hWndParent】标识父窗口。【的hWnd】标识要测试的窗口。
返回值
如果窗口是指定父窗口的子窗口或后代窗口，则返回值不为零。如果窗口不是指定父窗口的子窗口或后代窗口，返回值为零


-------------------------------------------------------- KeyGTK3Win32IsClipboardFormatAvailable ----
IsClipboardFormatAvailable    IsClipboardFormatAvailable函数确定剪贴板是否包含指定格式的数据。
语法
参数
【格式】指定标准或注册的剪贴板格式。有关剪贴板格式的说明，请参阅SetClipboardData函数。
返回值
如果剪贴板格式可用，则返回值不为零。如果剪贴板格式不可用，返回值为零。要获


-------------------------------------------------------- KeyGTK3Win32IsDBCSLeadByte ----
IsDBCSLeadByte    IsDBCSLeadByte函数确定一个字符是一个前导字节__，即双字节字符集（DBCS）中字符的第一个字节。
语法
参数
【TestChar】指定要测试的字符。
返回值
如果字符是引导字节，则返回值不为零。如果字符不是引导字节，则返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
引


-------------------------------------------------------- KeyGTK3Win32IsDBCSLeadByteEx ----
IsDBCSLeadByteEx    IsDBCSLeadByteEx函数确定一个字符是一个前导字节__，即双字节字符集（DBCS）中字符的第一个字节。
语法



-------------------------------------------------------- KeyGTK3Win32IsDebuggerPresent ----
IsDebuggerPresent    [New - Windows NT]IsDebuggerPresent函数指示调用进程是否在调试器的上下文下运行。此函数从KERNEL32.DLL导出。
语法
参数
此函数无参数。回报值如果当前进程在调试器的上下文中运行，则返回值不为零。如果当前进程没有在调试器的上下文中运行，返回值为零。
描述
此函数允许应用程序确定是否正在调试它，以便它可以修改其


-------------------------------------------------------- KeyGTK3Win32IsDialogMessage ----
IsDialogMessage    IsDialogMessage函数确定消息是否针对指定的对话框，如果是，则处理消息。
语法
参数
【hDlg】标识对话框。【LPMSG】指向包含要检查的消息的MSG结构。
返回值
如果消息已经被处理，则返回值不为零。如果消息未被处理，返回值为零。
描述
虽然IsDialogMes


-------------------------------------------------------- KeyGTK3Win32IsDlgButtonChecked ----
IsDlgButtonChecked    IsDlgButtonChecked函数确定按钮控件是否在其旁边有复选标记，还是三态按钮控件是否为灰色，已检查或两者都不是。
语法
参数
【hDlg】标识包含按钮控件的对话框。【nIDButton】指定按钮控件的整数标识符。
返回值
使用BS_AUTOCHECKBOX，BS_AUTORADIOBUTTON，BS_AUTO3


-------------------------------------------------------- KeyGTK3Win32IsIconic ----
IsIconic    IsIconic函数确定指定的窗口是否被最小化（标志）。
语法
参数
【的hWnd】标识窗口。
返回值
如果窗口是标志性的，则返回值不为零。如果窗口不是标志性的，返回值为零。



-------------------------------------------------------- KeyGTK3Win32IsMenu ----
IsMenu    IsMenu函数确定句柄是否是菜单句柄。
语法



-------------------------------------------------------- KeyGTK3Win32IsProcessorFeaturePresent ----
IsProcessorFeaturePresent    [New - Windows NT]IsProcessorFeaturePresent函数确定当前机器上至少有一个处理器是否支持指定的处理器函数。
语法



-------------------------------------------------------- KeyGTK3Win32IsRectEmpty ----
IsRectEmpty    IsRectEmpty函数确定指定的矩形是否为空。空矩形是没有区域的矩形;也就是说，右侧的坐标小于或等于左侧的坐标，或者底侧的坐标小于或等于顶侧的坐标。
语法
参数
【LPRC】指向包含矩形的逻辑坐标的RECT结构。
返回值
如果矩形为空，则返回值不为零。如果矩形不为空，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32IsTextUnicode ----
IsTextUnicode    IsTextUnicode函数确定缓冲区是否可能包含一种Unicode文本形式。该函数使用各种统计和确定性方法，在通过【LPI】传递的标志的控制下进行确定。当函数返回时，这些测试的结果通过【LPI】报告。如果所有指定的测试都被传递，函数返回TRUE;否则返回FALSE。
语法



-------------------------------------------------------- KeyGTK3Win32IsValidAcl ----
IsValidAcl    IsValidAcl函数验证访问控制列表（ACL）。
语法
参数
【ACL】指向此函数验证的ACL结构。这必须是非NULL值。
返回值
如果ACL有效，则返回值不为零。如果ACL无效，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32IsValidCodePage ----
IsValidCodePage    IsValidCodePage确定指定的代码页是否有效。
语法
参数
【CodePage】指定要检查的代码页。每个代码页由唯一的数字标识。
返回值
如果代码页有效，则返回值不为零。如果代码页无效，返回值为零。要获取扩展错误信息，请调用GetLastErro


-------------------------------------------------------- KeyGTK3Win32IsValidLocale ----
IsValidLocale    IsValidLocale函数对区域设置标识符应用有效性测试。【dwFlags中】参数确定有效性测试的性质。目前，该函数测试是否在呼叫系统上安装或支持区域设置标识符。
语法
参数
【语言环境】指定要验证的区域设置标识符。您可以使用MAKELCID宏创建区域设置标识符。【dwFlags中】指定应用于区域设置标识符的有效性测试。此参数可以是以下值之一：值含义LCID_IN


-------------------------------------------------------- KeyGTK3Win32IsValidSecurityDescriptor ----
IsValidSecurityDescriptor    IsValidSecurityDescriptor函数验证SECURITY_DESCRIPTOR结构。通过检查安全描述符中每个组件的修订级别来执行验证。
语法
参数
【pSecurityDescriptor】指向函数验证的SECURITY_DESCRIPTOR结构。
返回值
如果安全描述符的结构有效，则返回值不为零。如果安全描述符的结构无效，返回值为


-------------------------------------------------------- KeyGTK3Win32IsValidSid ----
IsValidSid    IsValidSid函数通过验证修订版本号是否在已知范围内，并且子权限的数量小于最大值来验证SID结构。SID是安全标识符。
语法
参数
【PSID】指向要验证的SID结构。这必须是非NULL值。
返回值
如果SID结构有效，则返回值不为零。如果SID结构无效，返回值为零。要获取扩展错误信息，请调用GetLastError


-------------------------------------------------------- KeyGTK3Win32IsWindow ----
IsWindow    IsWindow函数确定指定的窗口句柄是否标识现有窗口。
语法
参数
【的hWnd】指定窗口句柄。
返回值
如果窗口句柄标识现有窗口，则返回值不为零。如果窗口句柄不标识现有窗口，返回值为零。



-------------------------------------------------------- KeyGTK3Win32IsWindowEnabled ----
IsWindowEnabled    IsWindowEnabled函数确定是否为鼠标和键盘输入启用了指定的窗口。
语法
参数
【的hWnd】标识要测试的窗口。
返回值
如果启用该窗口，则返回值不为零。如果窗口未启用，返回值为零。
描述
子窗口只有在启用和可见时才接收输入。



-------------------------------------------------------- KeyGTK3Win32IsWindowUnicode ----
IsWindowUnicode    IsWindowUnicode函数确定指定的窗口是否是本地Unicode窗口。
语法



-------------------------------------------------------- KeyGTK3Win32IsWindowVisible ----
IsWindowVisible    IsWindowVisible函数检索指定窗口的可见性状态。
语法
参数
【的hWnd】标识窗口。
返回值
如果指定的窗口及其父窗口具有WS_VISIBLE样式，则返回值不为零。如果指定的窗口及其父窗口没有WS_VISIBLE样式，返回值为零。因为返回值指定窗


-------------------------------------------------------- KeyGTK3Win32IsZoomed ----
IsZoomed    IsZoomed函数确定窗口是否最大化。
语法
参数
【的hWnd】标识窗口。
返回值
如果窗口缩放，则返回值不为零。如果窗口没有缩放，返回值为零。



-------------------------------------------------------- KeyGTK3Win32JournalPlaybackProc ----
JournalPlaybackProc    JournalPlaybackProc挂接过程是将鼠标和键盘消息插入到系统消息队列中的回调函数。通常，应用程序使用此钩子过程播放先前由JournalRecordProc挂钩过程记录的一系列鼠标和键盘消息。只要安装JournalPlaybackProc挂钩程序，禁用常规鼠标和键盘输入。
语法
参数
【码】指定挂钩过程用于确定如何处理消息的代码。此参数可以是以下值之一：值含义HC_GETNEXT挂钩过程必须将当前鼠标或键盘消息复制到【lParam的】参数指向的EVENTMSG结构。HC_


-------------------------------------------------------- KeyGTK3Win32JournalRecordProc ----
JournalRecordProc    JournalRecordProc挂接过程是一个回调函数，用于记录系统从系统消息队列中删除的消息。之后，应用程序可以使用JournalPlaybackProc挂钩过程来播放消息。
语法
参数
【码】指定如何处理消息。此参数可以是以下值之一：值含义HC_ACTION【lParam的】参数指向EVENTMSG结构，其中包含有关从系统队列中删除的消息的信息。挂钩过程必须通过将结构复制到


-------------------------------------------------------- KeyGTK3Win32keybd_event ----
keybd_event     keybd_event函数合成了一个按键。系统可以使用这样一个合成的按键来生成WM_KEYUP或WM_KEYDOWN消息。键盘驱动程序的中断处理程序调用{??989796012}函数。
语法
参数
【BVK】指定虚拟键代码。代码必须是1到254范围内的值。【BSCAN】指定密钥的硬件扫描代码。【dwFlags中】一组标志位，指定函数操作的各个方面。应用程序可以使用以下预定义常量值的任意


-------------------------------------------------------- KeyGTK3Win32KeyboardProc ----
KeyboardProc    KeyboardProc挂接过程是应用程序定义或库定义的回调函数，系统在应用程序调用{??989796011}或PeekMessage函数时调用，并且有一个键盘消息（WM_KEYUP或WM_KEYDOWN）为处理。
语法
参数
【码】指定挂钩过程用于确定如何处理消息的代码。此参数可以是以下值之一：值含义HC_ACTION【wParam中】和【lParam的】参数包含有关击键消息的信息。HC_NOREMOVE【wPa


-------------------------------------------------------- KeyGTK3Win32KillTimer ----
KillTimer    KillTimer函数会破坏指定的定时器。
语法
参数
【的hWnd】标识与指定定时器相关联的窗口。该值必须与传递给创建定时器的SetTimer函数的【的hWnd】值相同。【uIDEvent】指定要销毁的定时器。如果传递给SetTimer的窗口句


-------------------------------------------------------- KeyGTK3Win32LBItemFromPt ----
LBItemFromPt    LBItemFromPt函数将在列表框中的指定点检索项目的索引。
语法
参数
【hLB】处理列表框以进行检查。【pt】POINT结构包含要检查的屏幕坐标。【bAutoScroll】滚动标志。如果此参数为TRUE，并且该点直接位于列表框的上方或下方，该函数将列表框滚动一


-------------------------------------------------------- KeyGTK3Win32LCMapString ----
LCMapString    LCMapString函数将一个字符串映射到另一个字符串，执行指定的区域设置相关转换。该函数也可用于为输入字符串生成排序键。
语法
参数
【语言环境】指定区域设置标识符。语言环境为字符串映射或排序键生成提供了一个上下文。应用程序可以使用MAKELCID宏创建区域设置标识符。【dwMapFlags】一组标志，指示在字符串映射或排


-------------------------------------------------------- KeyGTK3Win32LeaveCriticalSection ----
LeaveCriticalSection    LeaveCriticalSection函数释放指定的关键段对象的所有权。
语法
参数
【lpCriticalSection】指向临界区对象。
返回值
此函数不返回值。
描述
单个进程的线程可以使用临界区对象进行互斥同步。该过程负责分配关键部分对象使用的内存，它可以通过


-------------------------------------------------------- KeyGTK3Win32LimitEmsPages ----
LimitEmsPages     LimitEmsPages函数已过时。此函数仅用于与16位版本的Windows兼容。新的基于Win32的应用程序不需要此函数。


-------------------------------------------------------- KeyGTK3Win32LineDDA ----
LineDDA    LineDDA函数决定了由指定的起点和终点定义的行应突出显示哪些像素。
语法
参数
【nXStart】指定线的起始点的x坐标。【nYStart】指定线的起始点的y坐标。【nXEnd】指定行的终点的x坐标。【nYEnd】指定线的终点的y坐标。【lpLineFunc】指定应用程


-------------------------------------------------------- KeyGTK3Win32LineDDAProc ----
LineDDAProc    LineDDAProc函数是一个应用程序定义的回调函数，用于处理LineDDA函数中的坐标。类型为LINEDDAPROC的值是指向此类函数的指针。
语法
参数
【X】指定当前点的x坐标。【Y】指定当前点的y坐标。【的lpData】指向应用程序定义的数据。
描述
LineDDAProc是应用程序定义的函数名称的占位符。应用程序通过将其地址传递给L


-------------------------------------------------------- KeyGTK3Win32LineTo ----
LineTo    LineTo函数从当前位置绘制一条线，但不包括指定点。
语法
参数
【HDC】标识设备上下文。【nXEnd】指定行的终点的x坐标。【nYEnd】指定线的终点的y坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
行的结束点的


-------------------------------------------------------- KeyGTK3Win32LoadAccelerators ----
LoadAccelerators    LoadAccelerators函数加载指定的加速器表。
语法
参数
【的hInstance】标识可执行文件包含要加载的加速表的模块实例。【lpTableName】指向一个以null结尾的字符串，命名要加载的加速表。或者，该参数可以指定低位字中的加速器表资源的


-------------------------------------------------------- KeyGTK3Win32LoadBitmap ----
LoadBitmap    LoadBitmap函数从模块的可执行文件中加载指定的位图资源。
语法
参数
【的hInstance】标识可执行文件包含要加载的位图的模块的实例。【lpBitmapName】指向一个以null结尾的字符串，其中包含要加载的位图资源的名称。或者，该参数可以由低位字中的资


-------------------------------------------------------- KeyGTK3Win32LoadCursor ----
LoadCursor    LoadCursor函数从与应用程序实例关联的可执行文件（.EXE）文件加载指定的游标资源。
语法
参数
【的hInstance】标识可执行文件包含要加载的光标的模块实例。【lpCursorName】指向一个以null结尾的字符串，其中包含要加载的游标资源的名称。或者，该参数可以由低位字中的资源


-------------------------------------------------------- KeyGTK3Win32LoadCursorFromFile ----
LoadCursorFromFile    LoadCursorFromFile函数根据文件中包含的数据创建一个游标。该文件由其名称或系统光标标识符指定。该函数返回新创建的游标的句柄。包含游标数据的文件可以是游标（.CUR）或动画光标（.ANI）格式。
语法
参数
【lpFileName】表示要用于创建光标的文件数据的来源。文件中的数据必须是.CUR或.ANI格式。如果【lpszFileName】的高位字是非零的，它是指向一个字符串的指针，该字符串是包


-------------------------------------------------------- KeyGTK3Win32LoadIcon ----
LoadIcon    LoadIcon函数从与应用程序实例关联的可执行文件（.EXE）文件加载指定的图标资源。
语法
参数
【的hInstance】标识可执行文件包含要加载的图标的模块实例。加载标准图标时，此参数必须为NULL。【lpIconName】指向一个以null结尾的字符串，其中包含要加载的图标资源的名称


-------------------------------------------------------- KeyGTK3Win32LoadImage ----
LoadImage    [Now Supported on Windows NT]LoadImage函数加载图标，光标或位图。
语法
参数
【HINST】标识包含要加载的图像的模块实例。要加载OEM映像，请将此参数设置为零。【lpszName】标识要加载的图像。如果【HINST】参数为非空，并且【fuLoad】参数不包含LR_L


-------------------------------------------------------- KeyGTK3Win32LoadKeyboardLayout ----
LoadKeyboardLayout    Windows 95和Windows NT中的LoadKeyboardLayout的实现有很大的不同。为了适应这些差异，本参考页首先显示Windows 95实现，其次是Windows NT版本。
语法
参数
【pwszKLID】指向指定键盘布局名称的缓冲区。该名称是由主要语言标识符（低字）和设备标识符（高字）的十六进制值组成的字符串。例如，美国英语的语言标识符为0x0409，所以主要的美国英文版


-------------------------------------------------------- KeyGTK3Win32LoadLibrary ----
LoadLibrary    LoadLibrary函数将指定的可执行模块映射到调用进程的地址空间。
语法
参数
【lpLibFileName】指向以空字符结尾的字符串，命名可执行模块（一个.DLL或.EXE文件）。指定的名称是模块的文件名，并且与库模块本身中存储的名称无关，如模块定义（.DEF）文件中


-------------------------------------------------------- KeyGTK3Win32LoadLibraryEx ----
LoadLibraryEx    LoadLibraryEx函数将指定的可执行模块映射到调用进程的地址空间。可执行模块可以是.DLL或.EXE文件。指定的模块可能会导致其他模块映射到地址空间。
语法
参数
【lpLibFileName】指向一个以空值终止的字符串，命名一个Win32可执行模块（.DLL或.EXE文件）。指定的名称是可执行模块的文件名。该名称与库模块本身存储的名称无关，如模块定义


-------------------------------------------------------- KeyGTK3Win32LoadMenu ----
LoadMenu    LoadMenu函数从与应用程序实例关联的可执行文件（.EXE）文件加载指定的菜单资源。
语法
参数
【的hInstance】标识包含要加载的菜单资源的模块的实例。【lpMenuName】指向包含菜单资源名称的以null结尾的字符串。或者，该参数可以由低位字中的资源标识符和高阶字中的零组成。


-------------------------------------------------------- KeyGTK3Win32LoadMenuIndirect ----
LoadMenuIndirect    LoadMenuIndirect函数将指定的菜单模板加载到内存中。
语法
参数
【lpMenuTemplate】指向菜单模板或扩展菜单模板。菜单模板由MENUITEMTEMPLATEHEADER结构组成，后跟一个或多个连续的MENUITEMTEMPLATE结构。扩展菜单


-------------------------------------------------------- KeyGTK3Win32LoadModule ----
LoadModule    LoadModule函数加载并执行基于Windows的应用程序或创建现有基于Windows的应用程序的新实例。提供此函数以兼容早期版本的Windows。基于Win32的应用程序应使用CreateProcess函数。
语法
参数
【lpModuleName】指向包含要运行的应用程序的文件名的以null结尾的字符串。如果【lpModuleName】参数不包含目录路径，Windows将按以下顺序搜索可执行文件：1.应用程


-------------------------------------------------------- KeyGTK3Win32LoadResource ----
LoadResource    LoadResource函数将指定的资源加载到全局内存中。
语法
参数
【HMODULE】标识可执行文件包含资源的模块。如果【HMODULE】为NULL，Windows将从用于创建当前进程的模块加载资源。【hResInfo】标识要加载的资源。必须使用FindRe


-------------------------------------------------------- KeyGTK3Win32LoadString ----
LoadString    LoadString函数从与指定模块相关联的可执行文件中加载字符串资源，将字符串复制到缓冲区中，并附加一个终止空字符。
语法
参数
【的hInstance】标识可执行文件包含字符串资源的模块实例。【uID】指定要加载的字符串的整数标识符。【lpBuffer】指向缓冲区以接收字符串。【nBufferMax】指定缓冲区的大小


-------------------------------------------------------- KeyGTK3Win32LocalAlloc ----
LocalAlloc    LocalAlloc函数从堆中分配指定的字节数。在线性Win32 API环境中，本地堆和全局堆之间没有区别。
语法
参数
【uFlags】指定如何分配内存。如果指定为零，则默认值为LMEM_FIXED标志。除了具体注明的不兼容的组合外，还可以指定以下标志的任意组合。要指示函数是分配固定或可移动内存，请指定前六个


-------------------------------------------------------- KeyGTK3Win32LocalCompact ----
LocalCompact      LocalCompact函数已过时。此函数仅用于与16位版本的Windows兼容。


-------------------------------------------------------- KeyGTK3Win32LocalDiscard ----
LocalDiscard    LocalDiscard函数将丢弃指定的本地内存对象。内存对象的锁计数必须为零。
语法
参数
【hlocMemhmn】标识本地内存对象。该手柄由LocalAlloc或LocalReAlloc函数返回。
返回值
如果函数成功，则返回值是本地内存对象的句柄。如果函数失败，返回值为NU


-------------------------------------------------------- KeyGTK3Win32LocalFileTimeToFileTime ----
LocalFileTimeToFileTime    LocalFileTimeToFileTime函数根据协调世界时（UTC）将本地文件时间转换为文件时间。
语法
参数
【lpLocalFileTime】指向FILETIME结构，指定将本地文件时间转换为基于UTC的文件时间。【lpFileTime】指向FILETIME结构以接收基于UTC的文件转换时间。此参


-------------------------------------------------------- KeyGTK3Win32LocalFlags ----
LocalFlags    LocalFlags函数返回有关指定的本地内存对象的信息。
语法
参数
【HMEM】标识本地内存对象。该手柄由LocalAlloc或LocalReAlloc函数返回。
返回值
如果函数成功，则返回值是32位值，用于指定内存对象的分配标志和锁计数。如果函数失败


-------------------------------------------------------- KeyGTK3Win32LocalFree ----
LocalFree    LocalFree函数释放指定的本地内存对象并使其句柄无效。
语法
参数
【HMEM】标识本地内存对象。该手柄由LocalAlloc或LocalReAlloc函数返回。
返回值
如果函数成功，返回值为NULL。如果函数失败，返回值等于本地内存对象的句柄。要获取


-------------------------------------------------------- KeyGTK3Win32LocalHandle ----
LocalHandle    LocalHandle函数检索与指定的本地内存对象指针关联的句柄。
语法
参数
【PME?】指向本地内存对象的第一个字节。该指针由LocalLock函数返回。
返回值
如果函数成功，则返回值是指定的本地内存对象的句柄。如果函数失败，返回值为NULL。要获取扩展错误信


-------------------------------------------------------- KeyGTK3Win32LocalLock ----
LocalLock    LocalLock函数锁定本地内存对象，并返回指向对象内存块第一个字节的指针。与锁定的存储器对象相关联的存储器块不能被移动或丢弃。对于使用LMEM_MOVEABLE标志分配的内存对象，该函数会增加对象的锁定计数。
语法
参数
【HMEM】标识本地内存对象。该手柄由LocalAlloc或LocalReAlloc函数返回。
返回值
如果函数成功，则返回值是指向内存块第一个字节的指针。如果函数失败，返回值为NULL


-------------------------------------------------------- KeyGTK3Win32LocalReAlloc ----
LocalReAlloc    LocalReAlloc函数更改指定的本地内存对象的大小或属性。尺寸可以增减。
语法
参数
【HMEM】标识要重新分配的本地内存对象。该句柄由LocalAlloc或LocalReAlloc函数返回。【指向包含要写入文件的数据的缓冲区。】指定内存块的新大小（以字节为单位）。如果此参数


-------------------------------------------------------- KeyGTK3Win32LocalShrink ----
LocalShrink     LocalShrink函数已过时。此函数仅用于与16位版本的Windows兼容。它在32位环境中没有任何意义。


-------------------------------------------------------- KeyGTK3Win32LocalSize ----
LocalSize    LocalSize函数返回指定本地内存对象的当前大小（以字节为单位）。
语法
参数
【HMEM】标识本地内存对象。该手柄由LocalAlloc，LocalReAlloc或LocalHandle函数返回。
返回值
如果函数成功，则返回值是指定本地内存对象的大小（以字节为单


-------------------------------------------------------- KeyGTK3Win32LocalUnlock ----
LocalUnlock    LocalUnlock函数减少与使用LMEM_MOVEABLE标志分配的内存对象关联的锁定计数。此函数对使用LMEM_FIXED标志分配的内存对象没有影响。
语法
参数
【HMEM】标识本地内存对象。该手柄由LocalAlloc或LocalReAlloc函数返回。
返回值
如果内存对象在递减锁定计数后仍然被锁定，则返回值不为零。如果函数失败，返回值为零。


-------------------------------------------------------- KeyGTK3Win32LockFile ----
LockFile    LockFile函数锁定打开文件中的区域。锁定区域可防止其他进程访问该区域。
语法
参数
【HFILE】标识要锁定的区域的文件。必须使用GENERIC_READ或GENERIC_WRITE访问文件（或两者）创建文件句柄。【dwFileOffsetLow】指定锁应该开始的文件中起始


-------------------------------------------------------- KeyGTK3Win32LockFileEx ----
LockFileEx    LockFileEx函数锁定打开的文件中的字节范围以进行共享或独占访问。
语法
参数
【HFILE】标识一个文件的打开句柄，该文件要锁定一段字节，用于共享或独占访问。必须使用GENERIC_READ或GENERIC_WRITE访问该文件创建句柄。【dwFlags中】指定修改此


-------------------------------------------------------- KeyGTK3Win32LockResource ----
LockResource    LockResource函数将指定的资源锁定在内存中。
语法
参数
【hResData】标识要锁定的资源。LoadResource函数返回此句柄。
返回值
如果加载的资源被锁定，则返回值是指向资源的第一个字节的指针;否则为NULL。
描述
基于Win


-------------------------------------------------------- KeyGTK3Win32LockSegment ----
LockSegment     LockSegment函数已过时。此函数仅用于与16位版本的Windows兼容。它在32位环境中没有任何意义。


-------------------------------------------------------- KeyGTK3Win32LockServiceDatabase ----
LockServiceDatabase    LockServiceDatabase函数锁定指定的数据库。
语法
参数
【hSCManager】标识服务控制管理器数据库。OpenSCManager函数返回此句柄，该句柄必须具有SC_MANAGER_LOCK访问权限。
返回值
如果函数成功，则返回值是指定的


-------------------------------------------------------- KeyGTK3Win32LockWindowUpdate ----
LockWindowUpdate    LockWindowUpdate函数在指定的窗口中禁用或重新启用绘图。一次只能锁定一个窗口。
语法
参数
【hWndLock】指定绘图将被禁用的窗口。如果此参数为NULL，则启用锁定窗口中的绘图。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零，表示发生错误或其他窗口已被锁定。


-------------------------------------------------------- KeyGTK3Win32LogonUser ----
LogonUser    LogonUser函数尝试执行用户登录操作。您指定具有用户名和域的用户，并使用明文密码对用户进行身份验证。如果函数成功，您将收到一个代表登录用户的令牌的句柄。然后，您可以使用此令牌句柄模拟指定的用户，或者在大多数情况下，创建在指定用户的上下文中运行的进程。
语法
参数
【lpszUsername】指向指定用户名的空终止字符串的指针。这是要登录的用户帐户的名称。【lpszDo mainhu】指向指定要登录到的域或服务器的以空值终止的字符串的指针。如果此参数为


-------------------------------------------------------- KeyGTK3Win32LookupAccountName ----
LookupAccountName    LookupAccountName函数接受系统和帐户的名称作为输入。它检索帐户的安全标识符（SID）和找到该帐户的域的名称。
语法
参数
【lpSystemName】指向指定系统的以null结尾的字符串。该字符串可以是远程计算机的名称。如果此字符串为NULL，则会在本地系统上查找帐户名称。【lpAccountName】指向指定


-------------------------------------------------------- KeyGTK3Win32LookupAccountSid ----
LookupAccountSid    LookupAccountSid函数接受安全标识符（SID）作为输入。它检索此SID的帐户的名称以及找到此SID的第一个域的名称。
语法
参数
【lpSystemName】指向指定系统的以null结尾的字符串。该字符串可以是远程计算机的名称。如果此字符串为NULL，则会在本地系统上查找SID。【希德】指向要查找帐户名称的SID结构。


-------------------------------------------------------- KeyGTK3Win32LookupIconIdFromDirectory ----
LookupIconIdFromDirectory    LookupIconIdFromDirectory函数可以搜索最符合当前显示设备的图标或光标的图标或光标数据。
语法
参数
【presbits】指向图标或光标目录数据。因为此函数不能验证资源数据，所以如果【presbits】未指向有效的资源数据，则会导致一般保护（GP）故障或返回未定义的值。【FICON】指定是否


-------------------------------------------------------- KeyGTK3Win32LookupIconIdFromDirectoryEx ----
LookupIconIdFromDirectoryEx    [Now Supported on Windows NT]LookupIconIdFromDirectoryEx函数可以搜索最符合当前显示设备的图标或光标的图标或光标数据。
语法
参数
【presbits】指向图标或光标目录数据。因为此函数不会验证资源数据，所以如果【presbits】未指向有效的资源数据，则会导致一般保护（GP）故障或返回未定义的值。【FICON】指定是否


-------------------------------------------------------- KeyGTK3Win32LookupPrivilegeDisplayName ----
LookupPrivilegeDisplayName    LookupPrivilegeDisplayName函数检索表示指定权限的可显示名称。
语法
参数
【lpSystemName】指向一个以null结尾的字符串，指定查看可显示特权名称的系统的名称。如果指定了一个空字符串，该函数将尝试在本地系统上查找可显示的名称。【lpName】指向一个以空


-------------------------------------------------------- KeyGTK3Win32LookupPrivilegeName ----
LookupPrivilegeName    LookupPrivilegeName函数通过指定的本地唯一标识符（LUID）检索与特定系统上表示的权限相对应的名称。
语法
参数
【lpSystemName】指向一个以null结尾的字符串，指定查询特权名称的系统的名称。如果指定了空字符串，则该函数尝试在本地系统上查找特权名称。【lpLuid】指向目标系统上已知特权的本


-------------------------------------------------------- KeyGTK3Win32LookupPrivilegeValue ----
LookupPrivilegeValue    LookupPrivilegeValue函数检索在指定系统上使用的本地唯一标识符（LUID）以本地表示指定的权限名称。
语法
参数
【lpSystemName】指向一个以null结尾的字符串，指定查询特权名称的系统的名称。如果指定了空字符串，则该函数尝试在本地系统上查找特权名称。【lpName】指向一个以空值终止的字符串


-------------------------------------------------------- KeyGTK3Win32LookupSecurityDescriptorParts ----
LookupSecurityDescriptorParts    [New - Windows NT]LookupSecurityDescriptorParts函数从自相关安全描述符中检索安全信息。
语法
参数
【pOwner】指向接收指向TRUSTEE结构的指针的变量的指针。该函数将在【pSD】安全描述符中查找与所有者SID关联的名称，并返回指向TRUSTEE结构的ptstrNameaf成员中的名


-------------------------------------------------------- KeyGTK3Win32LPtoDP ----
LPtoDP    LPtoDP函数将逻辑坐标转换为设备坐标。转换取决于设备上下文的映射模式，窗口和视口的起点和扩展区的设置以及世界变换。
语法
参数
【HDC】识别DC。【lpPoints】指向POINT结构的数组。每个POINT结构中包含的x坐标和y坐标将被转换。【NCOUNT】指定数组中的点数。
返回值
如果函数成功，返回值不为零


-------------------------------------------------------- KeyGTK3Win32LSEnumProviders ----
LSEnumProviders    注意：这是Microsoft Windows的将来版本中将支持的技术的初步文档。LSEnumProviders函数为每个已安装的许可证系统服务提供程序返回唯一的字符串。
语法
参数
【指数】[in]指定服务提供商的索引。第一个提供者的索引为零，第二个索引为1，依此类推。每个连续调用LSEnumProviders，呼叫者应该增加该索引，直到它返回LS_BAD_INDEX状


-------------------------------------------------------- KeyGTK3Win32LSFreeHandle ----
LSFreeHandle    注意：这是Microsoft Windows的将来版本中将支持的技术的初步文档。LSFreeHandle函数释放许可句柄上下文。
语法
参数
【LicenseHandle】[in]指定不再有效的许可证上下文的句柄。该参数必须是使用LSRequest函数创建的句柄。
返回值
没有。
描述
在调用LSRelease函数后，或L


-------------------------------------------------------- KeyGTK3Win32LSGetMessage ----
LSGetMessage    注意：这是Microsoft Windows的将来版本中将支持的技术的初步文档。LSGetMessage函数返回与许可证服务函数状态代码相关联的消息字符串。
语法
参数
【LicenseHandle】[in]指定许可上下文的句柄。该参数必须是使用LSRequest 函数创建的句柄。【值】[in]指定许可证服务函数返回的任何状态代码。【缓冲】[out]指向将返


-------------------------------------------------------- KeyGTK3Win32LSQuery ----
LSQuery    注意：这是Microsoft Windows的将来版本中将支持的技术的初步文档。LSQuery函数返回有关通过调用LSRequest函数获得的与指定句柄相关联的服务提供商或许可证系统上下文的信息。
语法
参数
【LicenseHandle】[in]指定许可上下文的句柄。此参数必须是使用LSRequest函数创建的句柄。【信息】[in]指定标识要返回的信息的索引。【InfoBuffer】[out]指


-------------------------------------------------------- KeyGTK3Win32LSRelease ----
LSRelease    注意：这是Microsoft Windows的将来版本中将支持的技术的初步文档。LSRelease函数请求许可证系统发布与由【LicenseHandle】参数标识的许可证上下文相关联的许可资源。
语法
参数
【LicenseHandle】[in]指定许可上下文的句柄。此参数必须是使用LSRequest 函数创建的句柄。【TotUnitsConsumed】[in]指定自LSRequest函数的初始


-------------------------------------------------------- KeyGTK3Win32LSRequest ----
LSRequest    注意：这是Microsoft Windows的将来版本中将支持的技术的初步文档。LSRequest函数要求许可证系统授予许可资源，以便调用应用程序可以执行。
语法
参数
【LicenseSystem】[in]指向唯一标识特定许可证系统的字符串。您可以使用LSEnumProviders函数获取此字符串。如果指定了常量LS_ANY，则将搜索所有许可证系统提供程序


-------------------------------------------------------- KeyGTK3Win32lstrcat ----
lstrcat    lstrcat函数将一个字符串附加到另一个字符串。
语法
参数
【lpString1】指向一个以null结尾的字符串。缓冲区必须足够大以容纳两个字符串。【lpString2】指向要附加到【lpString1】参数中指定的字符串的以null结尾的字符串。



-------------------------------------------------------- KeyGTK3Win32LSTRCMP ----
LSTRCMP     LSTRCMP函数比较两个字符串。比较区分大小写。
语法
参数
【lpString1】指向要比较的第一个以null结尾的字符串。【lpString2】指向要比较的第二个以null结尾的字符串。
返回值
如果函数成功，【lpString1】指向的字符串


-------------------------------------------------------- KeyGTK3Win32LSTRCMPI ----
LSTRCMPI    LSTRCMPI函数比较两个字符串。比较不区分大小写。
语法
参数
【lpString1】指向要比较的第一个以null结尾的字符串。【lpString2】指向要比较的第二个以null结尾的字符串。
返回值
如果函数成功，【lpString1】指向的字符串


-------------------------------------------------------- KeyGTK3Win32lstrcpy ----
lstrcpy    lstrcpy函数将字符串复制到缓冲区。
语法
参数
【lpString1】指向缓冲区以接收【lpString2】参数指向的字符串的内容。缓冲区必须足够大以容纳字符串，包括终止空字符。【lpString2】指向要复制的以null结尾的字符串。



-------------------------------------------------------- KeyGTK3Win32lstrcpyn ----
lstrcpyn    lstrcpyn函数将指定数量的字符从源字符串复制到缓冲区。
语法
参数
【lpString1】指向函数复制字符的缓冲区。缓冲区必须足够大以包含由【iMaxLength】指定的字节数（ANSI版本）或字符（Unicode版本），包括终止空字符的空间。【lpStri


-------------------------------------------------------- KeyGTK3Win32lstrlen ----
lstrlen    lstrlen函数返回指定字符串的长度（ANSI版本）或字符（Unicode版本）（不包括终止空字符）。
语法
参数
【lpString】指向一个以null结尾的字符串。
返回值
如果函数成功，返回值将以字节（ANSI版本）或字符（Unicode版本）指定字符串的长度。



-------------------------------------------------------- KeyGTK3Win32LSUpdate ----
LSUpdate    注意：这是Microsoft Windows的将来版本中将支持的技术的初步文档。LSUpdate函数更新许可的应用程序软件和许可证系统之间的同步。
语法
参数
【LicenseHandle】[in]指定许可上下文的句柄。该参数必须是使用LSRequest 函数创建的句柄。【TotUnitsConsumed】[in]指定自LSRequest函数的初始


-------------------------------------------------------- KeyGTK3Win32LZClose ----
LZClose    LZClose函数关闭使用LZOpenFile函数打开的文件。
语法
参数
【HFILE】标识要关闭的源文件。
返回值
此函数不返回值。
描述
必须通过调用LZOpenFile函数检索识别文件的句柄。如果通过调用CreateFile或OpenFile函数检索


-------------------------------------------------------- KeyGTK3Win32LZCopy ----
LZCopy    LZCopy函数将源文件复制到目标文件。如果使用Microsoft文件压缩实用程序（COMPRESS.EXE）压缩源文件，则此函数将创建一个解压缩的目标文件。如果源文件未压缩，则此函数将复制原始文件。
语法
参数
【hfSource】标识源文件。【hfDest】标识目标文件。
返回值
如果函数成功，则返回值指定目标文件的大小（以字节为单位）。如果函数失败，则返回值为LZERROR_ *代码。这些代


-------------------------------------------------------- KeyGTK3Win32LZDone ----
LZDone      LZDone函数已过时。它仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用LZOpenFile函数。


-------------------------------------------------------- KeyGTK3Win32LZInit ----
LZInit    LZInit函数为解压缩文件所需的内部数据结构分配内存，然后创建并初始化它们。
语法



-------------------------------------------------------- KeyGTK3Win32LZOpenFile ----
LZOpenFile    LZOpenFile函数创建，打开，重新打开或删除指定的文件。
语法
参数
【lpFileName】指向指定文件名称的字符串。【lpReOpenBuf】指向OFSTRUCT结构，即在文件首次打开时接收有关文件的信息。该结构可用于后续调用LZOpenFile函数以引用


-------------------------------------------------------- KeyGTK3Win32LZRead ----
LZRead    LZRead函数从文件中读取（最多）指定的字节数，并将它们复制到缓冲区中。
语法
参数
【HFILE】标识源文件。【lpBuffer】指向从文件读取的字节的缓冲区。【cbReaden】指定要读取的字节数。
返回值
如果函数成功，则返回值指定读取的字节数。如果函数失败，则返回


-------------------------------------------------------- KeyGTK3Win32LZSeek ----
LZSeek    LZSeek函数将一个文件指针从起始位置移动多个字节。
语法
参数
【HFILE】标识源文件。【我偏移fy】指定移动文件指针的字节数。【iOrigin】指定指针的起始位置。此参数必须是以下值之一：值含义0从文件的开头移动文件指针【我偏移fy】个字节。1从当前


-------------------------------------------------------- KeyGTK3Win32LZStart ----
LZStart     LZStart函数已过时。它仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用LZCopy函数。


-------------------------------------------------------- KeyGTK3Win32MakeAbsoluteSD ----
MakeAbsoluteSD    MakeAbsoluteSD函数通过使用自相关格式的安全描述符作为模板，以绝对格式创建安全描述符。
语法
参数
【pSelfRelativeSecurityDescriptor】以自相关格式指向SECURITY_DESCRIPTOR结构。该函数创建此安全描述符的绝对格式版本，而不修改原始安全描述符。【


-------------------------------------------------------- KeyGTK3Win32MakeDragList ----
MakeDragList    MakeDragList函数将指定的单选列表框更改为拖动列表框。
语法



-------------------------------------------------------- KeyGTK3Win32MakeProcInstance ----
MakeProcInstance     MakeProcInstance函数已过时。Win32函数可以直接调用。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序不应该使用此函数。


-------------------------------------------------------- KeyGTK3Win32MakeSelfRelativeSD ----
MakeSelfRelativeSD    MakeSelfRelativeSD函数通过使用绝对格式的安全描述符作为模板，以自相关格式创建安全描述符。
语法
参数
【pAbsoluteSecurityDescriptor】以绝对格式指向SECURITY_DESCRIPTOR结构。该函数以自相关格式创建此安全描述符的版本，无需修改原始文件。【pSelfR


-------------------------------------------------------- KeyGTK3Win32MapDialogRect ----
MapDialogRect    MapDialogRect函数将指定的对话框单位转换（映射）为屏幕单位（像素）。该函数用转换的坐标替换指定的RECT结构中的坐标，允许使用该结构创建对话框或在对话框中定位控件。
语法
参数
【hDlg】标识一个对话框。此函数仅接受由对话框创建函数之一创建的对话框的句柄;其他窗口的句柄无效。【LPRECT】指向包含要转换的对话框坐标的RECT结构。
返回值
如果函数成功，返回


-------------------------------------------------------- KeyGTK3Win32MapGenericMask ----
MapGenericMask    MapGenericMask函数将访问掩码中的通用访问权限映射到特定的和标准的访问权限。该函数应用GENERIC_MAPPING结构中提供的映射。
语法
参数
【AccessMask】指向访问掩码，接收从通用访问权限映射的特定和标准权限。【GenericMapping】指向GENERIC_MAPPING结构，指定通用访问类型到特定和标准访问类型的映


-------------------------------------------------------- KeyGTK3Win32MapViewOfFile ----
MapViewOfFile    MapViewOfFile函数将文件的视图映射到调用进程的地址空间。
语法
参数
【hFileMappingObject】标识文件映射对象的打开句柄。CreateFileMapping和OpenFileMapping函数返回此句柄。【dwDesiredAccess】指定对


-------------------------------------------------------- KeyGTK3Win32MapViewOfFileEx ----
MapViewOfFileEx    MapViewOfFileEx函数将文件的视图映射到调用进程的地址空间。此扩展函数允许调用进程为映射视图指定建议的内存地址。此函数仅适用于基于Win32的应用程序。
语法
参数
【hFileMappingObject】标识文件映射对象的打开句柄。CreateFileMapping和OpenFileMapping函数返回此句柄。【dwDesiredAccess】指定对


-------------------------------------------------------- KeyGTK3Win32MapVirtualKey ----
MapVirtualKey    MapVirtualKey函数将虚拟键代码（映射）为扫描代码或字符值，或将扫描代码转换为虚拟键代码。
语法
参数
【UCODE】指定密钥的虚拟密钥代码或扫描代码。该值如何解释取决于【uMapType】参数的值。【uMapType】指定要执行的翻译。该参数的值取决于【UCODE】参数的值：值含义0【UCO


-------------------------------------------------------- KeyGTK3Win32MapVirtualKeyEx ----
MapVirtualKeyEx    [Now Supported on Windows NT]MapVirtualKeyEx函数将虚拟键代码（映射）为扫描代码或字符值，或将扫描代码转换为虚拟键代码。该函数使用由给定键盘布局句柄标识的输入语言和物理键盘布局来转换代码。
语法
参数
【UCODE】指定密钥的虚拟密钥代码或扫描代码。该值如何解释取决于【uMapType】参数的值。【uMapType】指定要执行的翻译。该参数的值取决于【UCODE】参数的值：值含义0【UCO


-------------------------------------------------------- KeyGTK3Win32MapWindowPoints ----
MapWindowPoints    MapWindowPoints函数将相对于一个窗口的坐标空间中的一组点转换（映射）到相对于另一个窗口的坐标空间。
语法
参数
【hWndFrom】标识要转换点的窗口。如果此参数为NULL或HWND_DESKTOP，则假定该点处于屏幕坐标。【hWndTo】标识要转换点的窗口。如果此参数为NULL或HWND_DESKT


-------------------------------------------------------- KeyGTK3Win32MenuHelp ----
MenuHelp    MenuHelp函数处理WM_MENUSELECT和WM_COMMAND消息，并在指定的状态窗口中显示有关当前菜单的帮助文本。
语法
参数
【uMsg】WM_MENUSELECT或WM_COMMAND讯息。【wParam中】第一个消息参数。【lParam的】第二个消息参数。【hMainMenu】处理应用程序的主菜单。【HINST


-------------------------------------------------------- KeyGTK3Win32MenuItemFromPoint ----
MenuItemFromPoint    [Now Supported on Windows NT]MenuItemFromPoint函数确定哪个菜单项（如果有）位于指定位置。
语法
参数
【的hWnd】处理到包含菜单的窗口。【HMENU】处理到包含菜单项的菜单进行测试。【ptScreennl】POINT结构，指定要测试的位置。如果【HMENU】指定菜单栏，则此参数在窗口坐标中


-------------------------------------------------------- KeyGTK3Win32MessageBeep ----
MessageBeep    MessageBeep函数播放波形。每个声音类型的波形声音由注册表的[sounds]部分中的条目标识。
语法
参数
【UTYPE】指定由注册表的[sounds]部分中的条目标识的声音类型。此参数可以是以下值之一：值声音0xFFFFFFFF使用电脑扬声器进行标准蜂鸣MB_ICONASTERISKSystem


-------------------------------------------------------- KeyGTK3Win32MessageBox ----
MessageBox    MessageBox函数创建，显示和操作消息框。消息框包含应用程序定义的消息和标题，以及预定义图标和按钮的任意组合。
语法
参数
【的hWnd】标识要创建的消息框的所有者窗口。如果此参数为NULL，则消息框不具有所有者窗口。【lpText】指向包含要显示的消息的以null结尾的字符串。【lpCaption】指向用于对话


-------------------------------------------------------- KeyGTK3Win32MessageBoxEx ----
MessageBoxEx    MessageBoxEx函数创建，显示和操作消息框。消息框包含应用程序定义的消息和标题，以及预定义图标和按钮的任意组合。【wLanguageId】参数指定用于预定义按钮的语言资源集。有关MessageBoxEx的其他参数的完整说明，请参阅MessageBox.
语法
参数
【的hWnd】标识要创建的消息框的所有者窗口。如果此参数为NULL，则消息框不具有所有者窗口。【lpCaption】指向包含要显示的消息的以null结尾的字符串。【lpszTitle】指向用


-------------------------------------------------------- KeyGTK3Win32MessageBoxIndirect ----
MessageBoxIndirect    [Now Supported on Windows NT]MessageBoxIndirect函数创建，显示和操作消息框。消息框包含应用程序定义的消息文本和标题，任何图标以及预定义按钮的任意组合。
语法
参数
【lpMsgBoxParams】指向MSGBOXPARAMS结构的指针，其中包含用于显示消息框的信息。
返回值
如果没有足够的内存创建消息框，返回值为零。如果函数成功，则返回值是对话框返


-------------------------------------------------------- KeyGTK3Win32MessageProc ----
MessageProc    MessageProc挂接过程是系统在对话框，消息框，菜单或滚动条中发生输入事件之后但在处理输入事件生成的消息之前调用的应用程序定义的回调函数。挂钩过程可以监视由特定应用程序或所有应用程序创建的对话框，消息框，菜单或滚动条的消息。
语法
参数
【码】指定生成消息的输入事件的类型。此参数可以是以下值之一：值含义MSGF_DDEMGR当动态数据交换管理库（DDEML）等待同步事务完成时，输入事件发生。有关DDEML的更多信息，请参阅动


-------------------------------------------------------- KeyGTK3Win32ModifyMenu ----
ModifyMenu    ModifyMenu函数可以更改现有的菜单项。此函数用于指定菜单项的内容，外观和行为。SetMenuItemInfo函数已被SetMenuItemInfo函数取代。但是，如果您不需要SetMenuItemInfo的任何扩展函数，您仍然可以使用ModifyMenu.
语法
参数
【的编程实例bs】标识要更改的菜单。【uPositionbs】指定要更改的菜单项，由【uFlags】参数确定。【uFlags】指定控制【uPositionbs】参数的解释以及菜单项的内容，外


-------------------------------------------------------- KeyGTK3Win32ModifyWorldTransform ----
ModifyWorldTransform    ModifyWorldTransform函数使用指定的模式更改设备上下文的世界变换。
语法
参数
【HDC】指定设备上下文。【lpXform】指向XFORM结构，用于修改给定设备上下文的世界转换。【iMode平台】指定转换数据如何修改当前世界转换。此参数必须是以下值之一：值描述MWT_I


-------------------------------------------------------- KeyGTK3Win32MouseProc ----
MouseProc    MouseProc挂接过程是应用程序定义或库定义的回调函数，系统在应用程序调用{??989796010}或PeekMessage函数时调用，并且有一个要处理的鼠标消息。
语法
参数
【NCODE】指定挂钩过程用于确定如何处理消息的代码。此参数可以是以下值之一：值含义HC_ACTION【wParam中】和【lParam的】参数包含有关鼠标消息的信息。HC_NOREMOVE


-------------------------------------------------------- KeyGTK3Win32mouse_event ----
mouse_event     mouse_event函数可以合成鼠标移动和按钮点击。
语法
参数
【dwFlags中】一组标志位，指定鼠标运动和按钮点击的各个方面。此参数中的位可以是以下值的任何合理组合：值含义MOUSEEVENTF_ABSOLUTE指定【dx】和【dy】参数包含归一化的


-------------------------------------------------------- KeyGTK3Win32MoveFile ----
MoveFile    MoveFile函数重命名现有文件或目录（包括其所有子项）。
语法
参数
【lpExistingFileName】指向以空字符结尾的字符串，命名现有文件或目录。【lpNewFileName】指向指定文件或目录的新名称的以null结尾的字符串。新名称不能存在。新文件


-------------------------------------------------------- KeyGTK3Win32MoveFileEx ----
MoveFileEx    MoveFileEx函数重命名现有的文件或目录。
语法
参数
【lpExistingFileName】指向以空字符结尾的字符串，命名现有文件或目录。【lpNewFileName】指向一个以null结尾的字符串，指定新名称【lpExistingFileN


-------------------------------------------------------- KeyGTK3Win32MoveMemory ----
MoveMemory    MoveMemory函数将一个内存块从一个位置移动到另一个位置。
语法
参数
【目的地】指向移动目的地的起始地址。【资源】指向要移动的内存块的起始地址。【长度】指定要移动的内存块的大小（以字节为单位）。
返回值
该函数没有返回值。
描述
源和目标块可能重叠。



-------------------------------------------------------- KeyGTK3Win32MoveToEx ----
MoveToEx    MoveToEx函数将当前位置更新到指定点，并可选地返回上一个位置。
语法
参数
【HDC】标识设备上下文。【X】以逻辑单位指定新位置的x坐标。【Y】以逻辑单位指定新位置的y坐标。【LPPOINT】指向存储先前当前位置的POINT结构。如果此参数是NULL指针，则不返回上


-------------------------------------------------------- KeyGTK3Win32MoveWindow ----
MoveWindow    MoveWindow函数可以更改指定窗口的位置和尺寸。对于顶级窗口，位置和尺寸相对于屏幕的左上角。对于子窗口，它们相对于父窗口的客户区域的左上角。
语法
参数
【的hWnd】标识窗口。【X】指定窗口左边的新位置。【Y】指定窗口顶部的新位置。【nWidth】指定窗口的新宽度。【nHeight参数】指定窗口的新高度。【bRepaint】指定窗口是否要重


-------------------------------------------------------- KeyGTK3Win32MsgWaitForMultipleObjects ----
MsgWaitForMultipleObjects    当发生以下其中一种情况时，MsgWaitForMultipleObjects函数返回：*任何一个或所有指定的对象都处于信号状态。对象可以包括使用【dwWakeMask】参数指定的输入事件对象。*经过了超时间隔。请注意，如果队列中存在指定类型的以前未读的输入，则MsgWaitForMultipleObjects不返回。输入到达时才醒来。
语法
参数
【NCOUNT】指定【蜡烛xh】指向的数组中的对象句柄数。对象句柄的最大数量为MAXIMUM_WAIT_OBJECTS减1。【蜡烛xh】指向一组对象句柄。有关可以指定句柄的对象类型的列表，请


-------------------------------------------------------- KeyGTK3Win32MsgWaitForMultipleObjectsEx ----
MsgWaitForMultipleObjectsEx    [New - Windows NT]当发生以下其中一种情况时，MsgWaitForMultipleObjectsEx函数返回：*任何一个或所有指定的对象都处于信号状态。对象数组可以包括使用【dwWakeMask】参数指定的输入事件对象。* I / O完成例程或异步过程调用（APC）排队等待线程。*经过了超时间隔。如果队列中指定类型的未读取输入为MsgWaitForMultipleObjectsEx函数，则不返回。仅当新输入到达时才返回。
语法
参数
【NCOUNT】指定【蜡烛xh】指向的数组中的对象句柄数。对象句柄的最大数量为MAXIMUM_WAIT_OBJECTS减1。【蜡烛xh】指向一组对象句柄。有关可以指定句柄的对象类型的列表，请


-------------------------------------------------------- KeyGTK3Win32MulDiv ----
MulDiv    MulDiv函数将两个32位值相乘，然后将64位结果除以第三个32位值。返回值向上或向下舍入到最接近的整数。
语法
参数
【n已接收】指定被乘数。【// 32-bit signed multiplier】指定乘数。【// 32-bit signed divisor】指定乘法运算结果（【n已接收】 * 【// 3


-------------------------------------------------------- KeyGTK3Win32MultiByteToWideChar ----
MultiByteToWideChar    MultiByteToWideChar函数将字符串映射为宽字符（Unicode）字符串。由该函数映射的字符串不一定来自多字节字符集。
语法
参数
【CodePage】指定要用于执行转换的代码页。该参数可以被赋予在系统中安装或可用的任何代码页的值。以下值可用于指定系统默认代码页之一：值含义CP_ACPANSI代码页CP_MACCPMac


-------------------------------------------------------- KeyGTK3Win32MultinetGetConnectionPerformance ----
MultinetGetConnectionPerformance    MultinetGetConnectionPerformance函数返回有关用于访问网络资源的连接的预期性能的信息。此函数仅可用于请求重定向到网络资源的本地设备的信息，或者对于当前连接的网络资源。
语法
参数
【lpNetResource】指定以下网络资源之一：值含义【lpLocalName】指向指定本地设备的缓冲区的指针，例如“F：”或“LPT1”，被重定向到要查询的网络资源。如果此参数为NUL


-------------------------------------------------------- KeyGTK3Win32NDdeGetErrorString ----
NDdeGetErrorString    调用NDdeGetErrorString函数将网络DDE函数返回的错误代码转换为解释返回的错误代码的错误字符串。
语法



-------------------------------------------------------- KeyGTK3Win32NDdeGetShareSecurity ----
NDdeGetShareSecurity    调用NDdeGetShareSecurity函数来获取与DDE共享关联的SECURITY_DESCRIPTOR.这是通常进行编辑。
语法
参数
【lpszServer】DSDM所在的服务器名称的地址。【lpszShareName】要从DSDM检索其安全描述符的共享名的地址。此参数不能为NULL。【si】标识要从与该共享相关联的SEC


-------------------------------------------------------- KeyGTK3Win32NDdeGetTrustedShare ----
NDdeGetTrustedShare    调用NDdeGetTrustedShare函数来检索与服务器用户的受信任共享列表中的DDE共享相关联的选项。
语法
参数
【lpszServer】DSDM所在的服务器名称的地址。【lpszShareName】正在查询受信任状态的共享名称的地址。此参数不能为NULL。【lpdwTrustOptions】将存储TR


-------------------------------------------------------- KeyGTK3Win32NDdeIsValidAppTopicList ----
NDdeIsValidAppTopicList    调用NDdeIsValidAppTopicList函数来检查应用程序和主题字符串（“【AppName】 | 【TopicName】”）以获得正确的语法。
语法
参数
【targetTopic】应用程序的地址和要验证的主题字符串。此参数不能为NULL。
返回值
如果【targetTopic】参数具有有效的语法，则返回值不为零。如果函数失败，返回值为零。


-------------------------------------------------------- KeyGTK3Win32NDdeIsValidShareName ----
NDdeIsValidShareName    调用NDdeIsValidShareName函数来检查共享名称以获取正确的语法。
语法
参数
【SHARENAME】共享名称的地址进行验证。此参数不能为NULL。
返回值
如果共享名称具有有效的语法，则返回值不为零。如果共享名称没有有效的语法，则返回值为零。
描述
此函数在创


-------------------------------------------------------- KeyGTK3Win32NDdeSetShareSecurity ----
NDdeSetShareSecurity    调用NDdeSetShareSecurity函数来设置与DDE共享关联的SECURITY_DESCRIPTOR.这通常在编辑分配给DDE共享的DACL后完成。
语法
参数
【lpszServer】要修改DSDM的服务器名称的地址。【lpszShareName】要在DSDM中修改安全描述符的共享名的地址。此参数不能为NULL。【si】指定SECURITY_INF


-------------------------------------------------------- KeyGTK3Win32NDdeSetTrustedShare ----
NDdeSetTrustedShare    调用NDdeSetTrustedShare函数以在当前用户的上下文中授予引用的DDE共享信任状态。
语法
参数
【lpszServer】要修改DSDM的服务器名称的地址。【lpszShareName】共享名称的地址被授予信任状态。此参数不能为NULL。【dwTrustOptions】指定影响DDE共享


-------------------------------------------------------- KeyGTK3Win32NDdeShareAdd ----
NDdeShareAdd    调用NDdeShareAdd函数来创建和添加一个新的DDE共享到DDE共享数据库管理器（DSDM）。
语法
参数
【lpszServer】要修改DSDM的服务器名称的地址。【n级】一定是2。【pSD】将与此共享相关联的SECURITY_DESCRIPTOR的地址，以及将在后续启动此共享时执行哪些访问检查


-------------------------------------------------------- KeyGTK3Win32NDdeShareDel ----
NDdeShareDel    调用NDdeShareDel函数从DSDM中删除DDE共享。
语法



-------------------------------------------------------- KeyGTK3Win32NDdeShareEnum ----
NDdeShareEnum    调用NDdeShareEnum函数列出DSDM中可用的DDE共享。
语法



-------------------------------------------------------- KeyGTK3Win32NDdeShareGetInfo ----
NDdeShareGetInfo    调用NDdeShareGetInfo函数从DSDM中检索DDE共享信息。这通常用于编辑。
语法
参数
【lpszServer】DSDM所在的服务器名称的地址。【lpszShareName】要从DSDM检索其信息的共享名称的地址。此参数不能为NULL。【n级】必须是2。【lpBuffer】要接


-------------------------------------------------------- KeyGTK3Win32NDdeShareSetInfo ----
NDdeShareSetInfo    调用NDdeShareSetInfo函数来修改存储在NetDDE DSDM中的DDE共享信息。这通常在编辑之后完成。
语法
参数
【lpszServer】要修改DSDM的服务器名称的地址。【lpszShareName】要在DSDM中修改其信息的共享名称的地址。此参数不能为NULL。【n级】必须是2。【lpBuffer】


-------------------------------------------------------- KeyGTK3Win32NDdeTrustedShareEnum ----
NDdeTrustedShareEnum    NDdeTrustedShareEnum函数列出了在调用进程上下文中受信任的所有网络DDE共享的名称。
语法



-------------------------------------------------------- KeyGTK3Win32NetAccessAdd ----
NetAccessAdd    NetAccessAdd函数已过时。基于Win32的应用程序应使用GetFileSecurity和SetFileSecurity函数。


-------------------------------------------------------- KeyGTK3Win32NetAccessCheck ----
NetAccessCheck    NetAccessCheck函数已过时。基于Win32的应用程序应使用AccessCheck函数。


-------------------------------------------------------- KeyGTK3Win32NetAccessDel ----
NetAccessDel    NetAccessDel函数已过时。基于Win32的应用程序应使用GetFileSecurity和SetFileSecurity函数。


-------------------------------------------------------- KeyGTK3Win32NetAccessEnum ----
NetAccessEnum    NetAccessEnum函数已过时。基于Win32的应用程序应使用GetFileSecurity和SetFileSecurity函数。


-------------------------------------------------------- KeyGTK3Win32NetAccessGetInfo ----
NetAccessGetInfo    NetAccessGetInfo函数已过时。基于Win32的应用程序应使用GetFileSecurity和SetFileSecurity函数。


-------------------------------------------------------- KeyGTK3Win32NetAccessGetUserPerms ----
NetAccessGetUserPerms    NetAccessGetUserPerms函数已过时。基于Win32的应用程序应使用GetFileSecurity和SetFileSecurity函数。


-------------------------------------------------------- KeyGTK3Win32NetAccessSetInfo ----
NetAccessSetInfo    NetAccessSetInfo函数已过时。基于Win32的应用程序应使用GetFileSecurity和SetFileSecurity函数。


-------------------------------------------------------- KeyGTK3Win32NetAlertRaise ----
NetAlertRaise    NetAlertRaise函数通知所有注册的客户端发生特定事件。
语法
参数
【AlertEventName】指向要引发的中断消息的Unicode字符串的指针。【缓冲】指向要发送给侦听此中断消息的客户端的数据的指针。数据应由STD_ALERT结构组成，后面是来自ADM


-------------------------------------------------------- KeyGTK3Win32NetAlertRaiseEx ----
NetAlertRaiseEx    NetAlertRaiseEx函数简化了管理员中断消息的提升。
语法
参数
【AlertEventName】指向Unicode字符串的指针，该字符串指定要提升的中断消息类型。【VariableInfo】信息放入管理员中断消息。【VariableInfoSize】可变


-------------------------------------------------------- KeyGTK3Win32NetApiBufferAllocate ----
NetApiBufferAllocate    NetApiBufferAllocate函数从堆中分配内存。仅当需要与NetApiBufferFree函数兼容时才能使用此函数。否则，请使用LocalAlloc.
语法
参数
【ByteCount】要分配的字节数。【缓冲】指向存储指向分配缓冲区的指针的位置的指针。



-------------------------------------------------------- KeyGTK3Win32NetApiBufferFree ----
NetApiBufferFree    NetApiBufferFree函数释放NetApiBufferAllocate分配的内存。使用此函数释放其他LAN Manager函数返回的内存。
语法
参数
【缓冲】指向之前在函数调用中返回的其他LAN Manager函数的信息缓冲区。



-------------------------------------------------------- KeyGTK3Win32NetApiBufferReallocate ----
NetApiBufferReallocate    NetApiBufferReallocate函数更改使用NetApiBufferAllocate分配的缓冲区的大小。
语法
参数
【OldBuffer】指向重定位缓冲区的指针。【NewByteCount】缓冲区的新大小。【NewBuffer】指向以前在函数调用中返回的函数信息缓冲区。



-------------------------------------------------------- KeyGTK3Win32NetApiBufferSize ----
NetApiBufferSize    NetApiBufferSize函数使用NetApiBufferAllocate返回分配缓冲区的大小（以字节为单位）。
语法
参数
【缓冲】指向以前在函数调用中返回的函数信息缓冲区。【ByteCount】缓冲区的大小。



-------------------------------------------------------- KeyGTK3Win32NetAuditClear ----
NetAuditClear    NetAuditClear函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应该使用事件记录.


-------------------------------------------------------- KeyGTK3Win32NetAuditRead ----
NetAuditRead    NetAuditRead函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应该使用事件记录.


-------------------------------------------------------- KeyGTK3Win32Netbios ----
{的NetBIOS} 999796002    Netbios的函数解释并执行指定的网络控制块（NCB）。
语法
参数
【pncb】指向描述网络控制块的NCB结构的指针。
返回值
对于同步请求，返回值是NCB 结构的返回码。该值也在NCB结构的ncb_retcode成员中返回。接受的异步请求有两个返回值的


-------------------------------------------------------- KeyGTK3Win32NetConfigGet ----
NetConfigGet    NetConfigGet函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应使用注册处.


-------------------------------------------------------- KeyGTK3Win32NetConfigGetAll ----
NetConfigGetAll    NetConfigGetAll函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应使用注册处.


-------------------------------------------------------- KeyGTK3Win32NetConfigSet ----
NetConfigSet    NetConfigSet函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应使用注册处.


-------------------------------------------------------- KeyGTK3Win32NetConnectionEnum ----
NetConnectionEnum    NetConnectionEnum函数已过时。它仅用于与LAN Manager和16位版本的Windows兼容。基于Win32的应用程序应使用WNetEnumResource函数。


-------------------------------------------------------- KeyGTK3Win32NetErrorLogClear ----
NetErrorLogClear    NetErrorLogClear函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应该使用事件记录.


-------------------------------------------------------- KeyGTK3Win32NetErrorLogRead ----
NetErrorLogRead    NetErrorLogRead函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应该使用事件记录.


-------------------------------------------------------- KeyGTK3Win32NetFileClose ----
NetFileClose    在基于Win32的应用程序编程接口（API）中，NetFileClose函数已过时。它包含与16位版本的Windows兼容。


-------------------------------------------------------- KeyGTK3Win32NetFileEnum ----
NetFileEnum    NetFileEnum函数提供有关服务器上某些或所有打开文件的信息，允许用户提供一个简历句柄，并通过重复调用函数获取所需的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【基本路径】指向包含返回信息限定符的Unicode字符串。如果为NULL，则枚举


-------------------------------------------------------- KeyGTK3Win32NetFileGetInfo ----
NetFileGetInfo    NetFileGetInfo函数检索有关服务器资源特定开放的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【FILEID】要向其返回信息的打开资源的文件标识符。【FILEID】值必须是在


-------------------------------------------------------- KeyGTK3Win32NetGetAnyDCName ----
NetGetAnyDCName    NetGetAnyDCName函数获取由服务器名称直接信任的域的任何域控制器的名称。
语法
参数
【ServerName】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【DomainName】指定域的名称（主域为


-------------------------------------------------------- KeyGTK3Win32NetGetDCName ----
NetGetDCName    NetGetDCName函数返回指定域的主域控制器（PDC）的名称。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【域名】指向包含域名称的Unicode字符串。【】 NULL指针或字符串表示该函


-------------------------------------------------------- KeyGTK3Win32NetGetDisplayInformationIndex ----
NetGetDisplayInformationIndex    NetGetDisplayInformationIndex函数获取第一个显示信息条目的索引，其名称以指定的字符串开头，或按字母顺序排列。您可以使用此函数确定对NetQueryDisplayInformation函数的后续调用的起始索引。
语法
参数
【ServerName】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。


-------------------------------------------------------- KeyGTK3Win32NetGroupAdd ----
NetGroupAdd    NetGroupAdd函数在安全数据库中创建一个全局组。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。水平指定以下值之一来设置BUF参数中指向的信息级别。值含义0指定组名。BUF参数包含


-------------------------------------------------------- KeyGTK3Win32NetGroupAddUser ----
NetGroupAddUser    NetGroupAddUser函数为现有全局组中的现有用户帐户成员资格提供。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【GroupName】指向包含要向用户提供成员身份的全局组的名称的Unicode


-------------------------------------------------------- KeyGTK3Win32NetGroupDel ----
NetGroupDel    NetGroupDel函数从帐户数据库中删除全局组帐户。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【GROUPNAME】指向包含要删除的全局组帐户名称的Unicode字符串。



-------------------------------------------------------- KeyGTK3Win32NetGroupDelUser ----
NetGroupDelUser    NetGroupDelUser函数从安全数据库中的特定全局组中删除用户。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【GroupName】指向一个Unicode字符串，其中包含要从中删除用户成员身


-------------------------------------------------------- KeyGTK3Win32NetGroupEnum ----
NetGroupEnum    NetGroupEnum函数检索有关每个全局组帐户的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一返回【bufptrig】参数中指向的信息级别。值含义0返回


-------------------------------------------------------- KeyGTK3Win32NetGroupGetInfo ----
NetGroupGetInfo    NetGroupGetInfo函数检索有关服务器上特定全局组帐户的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【GROUPNAME】指向包含要在其上返回信息的全局组帐户的名称的Unicode


-------------------------------------------------------- KeyGTK3Win32NetGroupGetUsers ----
NetGroupGetUsers    NetGroupGetUsers函数检索安全数据库中特定全局组成员的列表。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【GROUPNAME】指向包含要列出其成员的全局组的名称的Unicode字符串。


-------------------------------------------------------- KeyGTK3Win32NetGroupSetInfo ----
NetGroupSetInfo    NetGroupSetInfo函数设置全局组帐户的参数。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。GROUPNAME指向包含要设置信息的全局组帐户名称的Unicode字符串。水平指定


-------------------------------------------------------- KeyGTK3Win32NetGroupSetUsers ----
NetGroupSetUsers    NetGroupSetUsers函数设置指定全局组的全局组成员资格。指定的每个用户都是全局组的成员。未指定但目前为全球组成员的用户将被撤销。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【GROUPNAME】指向包含指定用户所属的全局组名称的Unicode字符串。【


-------------------------------------------------------- KeyGTK3Win32NetHandleGetInfo ----
NetHandleGetInfo    NetHandleGetInfo函数可检索特定字符设备和命名管道句柄的信息。
语法
参数
【hHandle】标识通信设备队列或命名管道。【sLevelen】指定要求的详细程度（1或2）。注意只有当【hHandle】参数的值是远程服务器上存在的命名管道或字符设备的有效句柄时，才能在


-------------------------------------------------------- KeyGTK3Win32NetHandleSetInfo ----
NetHandleSetInfo    NetHandleSetInfo函数设置字符设备和命名管道句柄特定的信息。
语法
参数
【hHandle】标识通信设备队列或命名管道。【sLevelen】Specifies the level of detail provided; must be 1.【此函数通常用于生成随机


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupAdd ----
NetLocalGroupAdd    NetLocalGroupAdd函数在安全数据库中创建本地组。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。水平指定以下值之一来设置BUF参数中指向的信息级别。值含义0指定用户的本地组名。指定


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupAddMember ----
NetLocalGroupAddMemberNetLocalGroupAddMember函数已过时。基于Win32的应用程序应使用NetLocalGroupAddMembers函数。


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupAddMembers ----
NetLocalGroupAddMembers    NetLocalGroupAddMembers函数将一个或多个现有用户帐户或全局组的成员资格添加到现有本地组。该函数不会更改当前是本地组成员的用户或全局组的成员资格状态。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【LocalGroupName】指向一个null终止的


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupDel ----
NetLocalGroupDel    NetLocalGroupDel函数从帐户数据库中删除本地组帐户及其所有成员。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【LocalGroupName】指向包含要删除的本地组帐户名称的Unicode字


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupDelMember ----
NetLocalGroupDelMember    NetLocalGroupDelMember函数已过时。基于Win32的应用程序应使用NetLocalGroupDelMembers函数。


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupDelMembers ----
NetLocalGroupDelMembers    NetLocalGroupDelMembers函数从现有本地组中删除一个或多个成员。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【LocalGroupName】指向以null结尾的U


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupEnum ----
NetLocalGroupEnum    NetLocalGroupEnum函数检索有关每个本地组帐户的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一返回【bufptrig】参数中指向的信息级别。值含义0返回


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupGetInfo ----
NetLocalGroupGetInfo    NetLocalGroupGetInfo函数检索有关服务器上特定本地组帐户的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【LocalGroupName】指向包含要在其上返回信息的本地组帐户的名称的Un


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupGetMembers ----
NetLocalGroupGetMembers    NetLocalGroupGetMembers函数检索安全数据库中特定本地组成员的列表。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【localgroupname】指向包含要列出其成员的本地组的名称的Unicod


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupSetInfo ----
NetLocalGroupSetInfo    NetLocalGroupSetInfo函数设置本地组的参数。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。LocalGroupName指向包含要设置信息的本地组帐户名称的Unicode字符串


-------------------------------------------------------- KeyGTK3Win32NetLocalGroupSetMembers ----
NetLocalGroupSetMembers    NetLocalGroupSetMembers函数设置指定本地组的本地组成员资格。指定的每个用户或全局组都是本地组的成员。未指定但目前为本地组成员的用户或全局组将撤销成员身份。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【LocalGroupName】指向包含指定用户或全局组所属的本地组的名称的Un


-------------------------------------------------------- KeyGTK3Win32NetMessageBufferSend ----
NetMessageBufferSend    NetMessageBufferSend函数将信息缓冲区发送到已注册的消息别名。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【msgname】指向包含应发送消息缓冲区的消息名称的Unicode字符串。【F


-------------------------------------------------------- KeyGTK3Win32NetMessageNameAdd ----
NetMessageNameAdd    NetMessageNameAdd函数在消息名称表中注册消息别名。此函数要求启动Messenger服务。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【msgname】指向包含要添加的消息名称的Unicode字符串。字符串不能超过


-------------------------------------------------------- KeyGTK3Win32NetMessageNameDel ----
NetMessageNameDel    NetMessageNameDel函数从计算机上的消息别名表中删除消息别名。此函数要求启动Messenger服务。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【msgname】指向包含要删除的消息名称的Unicode字符串。字符串不能超过


-------------------------------------------------------- KeyGTK3Win32NetMessageNameEnum ----
NetMessageNameEnum    NetMessageNameEnum函数列出将在指定的计算机上接收消息的消息别名。此函数要求启动Messenger服务。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一返回所提供的所请求的信息级别。值含义0【bufptrig】


-------------------------------------------------------- KeyGTK3Win32NetMessageNameGetInfo ----
NetMessageNameGetInfo    NetMessageNameGetInfo函数在消息名称表中检索有关特定邮件别名的信息。此函数要求启动Messenger服务。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【msgname】指向包含要在其上返回信息的消息名称的Unicode字符串。【水


-------------------------------------------------------- KeyGTK3Win32NetQueryDisplayInformation ----
NetQueryDisplayInformation    NetQueryDisplayInformation函数返回用户，计算机或全局组帐户信息。使用此函数快速枚举用户界面中显示的帐户信息。
语法
参数
【ServerName】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。


-------------------------------------------------------- KeyGTK3Win32NetRemoteTOD ----
NetRemoteTOD    NetRemoteTOD函数返回指定服务器的时间信息。
语法



-------------------------------------------------------- KeyGTK3Win32NetReplExportDirAdd ----
NetReplExportDirAdd    NetReplExportDirAdd函数在导出路径中注册要复制的现有目录。
语法
参数
服务器名称指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。水平指定以下值来设置提供的信息级别。值含义1BUF参数指向


-------------------------------------------------------- KeyGTK3Win32NetReplExportDirDel ----
NetReplExportDirDel    NetReplExportDirDel函数删除了复制目录的注册。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【目录名】指向一个空值终止的Unicode字符串，其中


-------------------------------------------------------- KeyGTK3Win32NetReplExportDirEnum ----
NetReplExportDirEnum    NetReplExportDirEnum函数列出导出路径中的复制目录。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。值含义0【


-------------------------------------------------------- KeyGTK3Win32NetReplExportDirGetInfo ----
NetReplExportDirGetInfo    NetReplExportDirGetInfo函数检索复制目录的控制信息。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【目录名】指向一个以null结尾的Unicode字符串


-------------------------------------------------------- KeyGTK3Win32NetReplExportDirLock ----
NetReplExportDirLock    NetReplExportDirLock函数锁定复制目录，以便可以暂停从其复制。此函数会增加指定目录的锁定引用计数。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【目录名】指向一个null终止的Unicode字符串，


-------------------------------------------------------- KeyGTK3Win32NetReplExportDirSetInfo ----
NetReplExportDirSetInfo    NetReplExportDirSetInfo函数修改复制目录的控制信息。
语法
参数
服务器名称指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。目录名指向一个null终止的Unicode字符串，其中包含


-------------------------------------------------------- KeyGTK3Win32NetReplExportDirUnlock ----
NetReplExportDirUnlock    NetReplExportDirUnlock函数解锁了一个目录，以便可以恢复它。该函数减少指定目录的锁引用计数。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【目录名】指向一个null终止的Unicode字符串，


-------------------------------------------------------- KeyGTK3Win32NetReplGetInfo ----
NetReplGetInfo    NetReplGetInfo函数检索Replicator服务的配置信息。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【水平】指定以下值返回提供的信息级别。值含义0【buf


-------------------------------------------------------- KeyGTK3Win32NetReplImportDirAdd ----
NetReplImportDirAdd    NetReplImportDirAdd函数在导入路径中注册现有目录，以从主机接收复制。
语法
参数
服务器名称指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。水平指定以下值来设置提供的信息级别。值含义0BUF参数指向


-------------------------------------------------------- KeyGTK3Win32NetReplImportDirDel ----
NetReplImportDirDel    NetReplImportDirDel函数删除目录的注册，使其不再从主机接收更新。请注意，该函数实际上并不从文件系统中删除该目录。Replicator服务可以随时自动注册目录服务。要防止导入某些Replicator服务导出的目录，请改用NetReplImportDirLock函数。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【目录名】指向以空值终止的Unicode字符串，其中包


-------------------------------------------------------- KeyGTK3Win32NetReplImportDirEnum ----
NetReplImportDirEnum    NetReplImportDirEnum函数列出导入路径中的复制目录。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。值含义0【


-------------------------------------------------------- KeyGTK3Win32NetReplImportDirGetInfo ----
NetReplImportDirGetInfo    NetReplImportDirGetInfo函数检索客户端复制目录上的状态信息。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【目录名】指向一个以null结尾的Unicode字符串


-------------------------------------------------------- KeyGTK3Win32NetReplImportDirLock ----
NetReplImportDirLock    NetReplImportDirLock函数锁定复制目录，以便可以暂停对它的复制。此函数会增加指定目录的锁定引用计数。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【目录名】指向一个null终止的Unicode字符串，


-------------------------------------------------------- KeyGTK3Win32NetReplImportDirUnlock ----
NetReplImportDirUnlock    NetReplImportDirUnlock函数解锁了一个目录，以便可以恢复它。该函数减少指定目录的锁引用计数。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【目录名】指向一个null终止的Unicode字符串，


-------------------------------------------------------- KeyGTK3Win32NetReplSetInfo ----
NetReplSetInfo    NetReplSetInfo函数修改Replicator服务配置信息。
语法
参数
服务器名称指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。水平指定以下值之一来设置提供的信息级别。值含义0BUF参数


-------------------------------------------------------- KeyGTK3Win32NetScheduleJobAdd ----
NetScheduleJobAdd    NetScheduleJobAdd函数提交作业以在指定的未来时间和日期运行。此函数要求在提交作业的计算机上启动Schedule服务。
语法



-------------------------------------------------------- KeyGTK3Win32NetScheduleJobDel ----
NetScheduleJobDel    NetScheduleJobDel函数删除排队等待在计算机上运行的作业范围。此函数要求在发送作业删除请求的计算机上启动计划服务。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【MinJobId】最小作业标识符。作业标识符小于【MinJobId】的作业将不


-------------------------------------------------------- KeyGTK3Win32NetScheduleJobEnum ----
NetScheduleJobEnum    NetScheduleJobEnum函数列出了在指定计算机上排队的作业。此函数要求启动Schedule服务。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【PointerToBuffer】返回时，返回信息结构的指针返回到【Pointe


-------------------------------------------------------- KeyGTK3Win32NetScheduleJobGetInfo ----
NetScheduleJobGetInfo    NetScheduleJobGetInfo函数检索有关指定计算机上排队的特定作业的信息。此函数要求启动Schedule服务。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【JobId】有关工作的工作标识符。【PointerToBuffer】返回指向缓


-------------------------------------------------------- KeyGTK3Win32NetServerDiskEnum ----
NetServerDiskEnum    NetServerDiskEnum函数检索服务器上的磁盘驱动器列表。此函数将其结果作为三个字符串的数组（驱动器号，冒号，NULL）返回。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值返回提供的信息级别。值含义100【bufptrig】参数指向S


-------------------------------------------------------- KeyGTK3Win32NetServerEnum ----
NetServerEnum    NetServerEnum函数列出了在指定域中可见的指定类型的所有服务器。例如，应用程序可以调用NetServerEnum列出所有域控制器或仅列出所有SQL服务器。您可以组合位掩码列出几种类型。例如，0x00000003的值组合了SV_TYPE_WORKSTATION（0x00000001）和SV_TYPE_SERVER（0x00000002）的位掩码。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。值含义100【bufptrig】参数


-------------------------------------------------------- KeyGTK3Win32NetServerGetInfo ----
NetServerGetInfo    NetServerGetInfo函数检索有关指定服务器的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。值含义100【bufptrig】参数


-------------------------------------------------------- KeyGTK3Win32NetServerSetInfo ----
NetServerSetInfo    NetServerSetInfo函数设置服务器的操作参数;它可以单独设置或集体设置。该信息以允许系统重新初始化后保持有效的方式进行存储。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】要设置的信息级别。SERVER_INFO_100，SERVER_INFO


-------------------------------------------------------- KeyGTK3Win32NetServerTransportAdd ----
NetServerTransportAdd    NetServerTransportAdd函数将服务器绑定到传输。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值来设置提供的信息级别。值含义0【bufptrig】参数指向SE


-------------------------------------------------------- KeyGTK3Win32NetServerTransportDel ----
NetServerTransportDel    NetServerTransportDel函数将传输协议从服务器解除绑定（或断开连接）。实际上，服务器不能再使用传输协议与客户端进行通信。服务器将不再处理活动传输协议（如TCP，NetBEUI和XNS）的客户端请求。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【transportname】指向包含要解除绑定的传输协议名称的Unicode字


-------------------------------------------------------- KeyGTK3Win32NetServerTransportEnum ----
NetServerTransportEnum    NetServerTransportEnum函数提供有关由服务器管理的传输的信息。
语法



-------------------------------------------------------- KeyGTK3Win32NetServiceControl ----
NetServiceControl    NetServiceControl函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应使用服务函数.


-------------------------------------------------------- KeyGTK3Win32NetServiceEnum ----
NetServiceEnum    NetServiceEnum函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应使用服务函数.


-------------------------------------------------------- KeyGTK3Win32NetServiceGetInfo ----
NetServiceGetInfo    NetServiceGetInfo函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应使用服务函数.


-------------------------------------------------------- KeyGTK3Win32NetServiceInstall ----
NetServiceInstall    NetServiceInstall函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应使用服务函数.


-------------------------------------------------------- KeyGTK3Win32NetSessionDel ----
NetSessionDel    NetSessionDel函数结束服务器和工作站之间的会话。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【UncClientName】指向包含要断开连接的客户端计算机名的Unicode


-------------------------------------------------------- KeyGTK3Win32NetSessionEnum ----
NetSessionEnum    NetSessionEnum函数提供有关所有当前会话的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【UncClientName】指向包含要返回信息的计算机会话名称的Unicode


-------------------------------------------------------- KeyGTK3Win32NetSessionGetInfo ----
NetSessionGetInfo    NetSessionGetInfo函数检索有关在特定服务器和工作站之间建立的会话的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【UncClientName】指向包含要返回信息的计算机会话名称的Unicode


-------------------------------------------------------- KeyGTK3Win32NetShareAdd ----
NetShareAdd    NetShareAdd函数共享服务器资源。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。水平指定以下值之一来设置提供的信息级别。值含义2BUF参数指向SHARE_INFO_


-------------------------------------------------------- KeyGTK3Win32NetShareCheck ----
NetShareCheck    NetShareCheck函数检查服务器是否共享设备。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【设备】指向包含要检查共享访问的设备名称的Unicode字符串。【类型】指向包含


-------------------------------------------------------- KeyGTK3Win32NetShareDel ----
NetShareDel    NetShareDel函数从服务器的共享资源列表中删除共享名称，断开与共享资源的所有连接。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【网络名】指向包含要删除的共享的网络名称的Unicode字符串。【保留的】保留，


-------------------------------------------------------- KeyGTK3Win32NetShareEnum ----
NetShareEnum    NetShareEnum函数已过时。它仅用于与LAN Manager和16位版本的Windows兼容。基于Win32的应用程序应使用WNetEnumResource函数。


-------------------------------------------------------- KeyGTK3Win32NetShareGetInfo ----
NetShareGetInfo    NetShareGetInfo函数检索有关服务器上特定共享资源的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【网络名】指向包含要返回信息的共享的网络名称的Unicode字符串。【水平】指定


-------------------------------------------------------- KeyGTK3Win32NetShareSetInfo ----
NetShareSetInfo    NetShareSetInfo函数设置共享资源的参数。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。网络名指向包含要设置信息的共享的网络名称的Unicode字符串。水平指定以下值之一来


-------------------------------------------------------- KeyGTK3Win32NetStatisticsGet ----
NetStatisticsGet    NetStatisicsGet函数已过时。基于Win32的应用程序应使用NetStatisticsGet2函数


-------------------------------------------------------- KeyGTK3Win32NetStatisticsGet2 ----
NetStatisticsGet2    NetStatisticsGet2检索服务的运行统计信息。目前，只支持Workstation和Server服务。
语法
参数
【服务器】指向包含要在其上执行NetStatisticsGet2的服务器名称的Unicode字符串。NULL指针或空字符串指定本地计算机。【服务】指向一个Unicode字符串，其中包含获取统


-------------------------------------------------------- KeyGTK3Win32NetUseAdd ----
NetUseAdd    NetUseAdd函数已过时。它仅用于与LAN Manager和16位版本的Windows兼容。基于Win32的应用程序应使用WNetAddConnection2函数。


-------------------------------------------------------- KeyGTK3Win32NetUseDel ----
NetUseDel    NetUseDel函数已过时。它仅用于与LAN Manager和16位版本的Windows兼容。基于Win32的应用程序应使用WNetCancelConnection2函数。


-------------------------------------------------------- KeyGTK3Win32NetUseEnum ----
NetUseEnum    NetUseEnum函数已过时。它仅用于与LAN Manager和16位版本的Windows兼容。基于Win32的应用程序应使用WNetEnumResource函数。


-------------------------------------------------------- KeyGTK3Win32NetUseGetInfo ----
NetUseGetInfo    NetUseGetInfo函数已过时。它仅用于与LAN Manager和16位版本的Windows兼容。基于Win32的应用程序应使用WNetGetConnection函数。


-------------------------------------------------------- KeyGTK3Win32NetUserAdd ----
NetUserAdd    NetUserAdd函数添加用户帐户并分配密码和权限级别。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。水平指定以下值之一来设置提供的信息级别。值含义1BUF参数指向USER_INFO_1


-------------------------------------------------------- KeyGTK3Win32NetUserChangePassword ----
NetUserChangePassword    NetUserChangePassword函数可更改指定网络服务器或域的用户密码。
语法
参数
【域名】指向指定远程服务器或域的名称的以null结尾的Unicode字符串的指针。NetUserChangePassword函数可以更改该远程服务器或域上的用户密码。【域名】参数中的值为空，


-------------------------------------------------------- KeyGTK3Win32NetUserDel ----
NetUserDel    NetUserDel函数从服务器中删除用户帐号。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【用户名】指向要删除的用户帐户名称的Unicode字符串。
描述
用户或应用


-------------------------------------------------------- KeyGTK3Win32NetUserEnum ----
NetUserEnum    NetUserEnum函数提供有关服务器上所有用户帐户的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。值含义0【bufptrig】参数指向


-------------------------------------------------------- KeyGTK3Win32NetUserGetGroups ----
NetUserGetGroups    NetUserGetGroups函数检索指定用户所属的全局组列表。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定在本地计算机上运行的服务器程序。【用户名】指向包含要在每个组帐户中搜索的用户名称的Unico


-------------------------------------------------------- KeyGTK3Win32NetUserGetInfo ----
NetUserGetInfo    NetUserGetInfo函数检索有关服务器上特定用户帐户的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【用户名】指向包含要在其上返回信息的用户帐户名称的Unicode字符串。【水平】


-------------------------------------------------------- KeyGTK3Win32NetUserGetLocalGroups ----
NetUserGetLocalGroups    NetUserGetLocalGroups函数检索指定用户所属的本地组列表。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【用户名】指向包含用于返回全局组成员身份的用户名称的Unicode字符串。此参数


-------------------------------------------------------- KeyGTK3Win32NetUserModalsGet ----
NetUserModalsGet    NetUserModalsGet函数检索安全数据库中所有用户和全局组的全局信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。值含义0【bufptrig】参数指向


-------------------------------------------------------- KeyGTK3Win32NetUserModalsSet ----
NetUserModalsSet    NetUserModalsSet函数为安全数据库中的所有用户和全局组设置全局信息。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。水平指定以下值之一来设置提供的信息级别。值含义0BUF参数指向USER_MODALS


-------------------------------------------------------- KeyGTK3Win32NetUserSetGroups ----
NetUserSetGroups    NetUserSetGroups函数为指定的用户帐户设置全局组成员资格。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【用户名】指向包含用于设置全局组成员资格的用户名称的Unicode字符串。【水平


-------------------------------------------------------- KeyGTK3Win32NetUserSetInfo ----
NetUserSetInfo    NetUserSetInfo函数设置用户帐户的参数。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。用户名指向包含用户帐户名称的Unicode字符串以设置信息。水平指定以下值之一来设置


-------------------------------------------------------- KeyGTK3Win32NetWkstaGetInfo ----
NetWkstaGetInfo    NetWkstaGetInfo函数返回有关工作站的配置元素的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。值含义100【bufptrig】参数


-------------------------------------------------------- KeyGTK3Win32NetWkstaSetInfo ----
NetWkstaSetInfo    NetWkstaSetInfo函数配置工作站。该信息在系统重新初始化后仍然有效。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来设置提供的信息级别。值含义100【缓冲】参数指向WKST


-------------------------------------------------------- KeyGTK3Win32NetWkstaTransportAdd ----
NetWkstaTransportAdd    NetWkstaTransportAdd函数将重定向器绑定（或连接）到传输器。重定向器是客户端计算机上为服务器计算机生成文件请求的软件。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值来设置提供的信息级别。值含义0【BUF】参数指向WKSTA_T


-------------------------------------------------------- KeyGTK3Win32NetWkstaTransportDel ----
NetWkstaTransportDel    NetWkstaTransportDel函数从转发程序中取消绑定传输协议，这是客户端计算机上向服务器计算机生成文件请求的软件。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【transportname】指向包含要解除绑定的传输名称的Unicode字符串


-------------------------------------------------------- KeyGTK3Win32NetWkstaTransportEnum ----
NetWkstaTransportEnum    NetWkstaTransportEnum函数提供有关由重定向器管理的传输协议的信息，这是客户端计算机上为服务器计算机生成文件请求的软件。
语法
参数
服务器名称Ppointer指向包含要在其上执行该函数的远程服务器的名称的Unicode字符串。NULL指针或字符串指定本地计算机。水平指定以下值返回提供的信息级别。值含义0bufptrig参


-------------------------------------------------------- KeyGTK3Win32NetWkstaUserEnum ----
NetWkstaUserEnum    NetWkstaUserEnum函数列出了有关当前登录到工作站的所有用户的信息。此列表包括交互式，服务和批量登录。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。值含义0【bufptrig】参数指向


-------------------------------------------------------- KeyGTK3Win32NetWkstaUserGetInfo ----
NetWkstaUserGetInfo    NetWkstaUserGetInfo函数返回有关当前登录的用户的信息。必须在登录用户的上下文中调用此函数。
语法
参数
【保留的】此参数必须设置为NULL。【水平】指定以下值之一来返回提供的信息级别。值含义0【bufptrig】参数指向WKSTA_USER_INFO_0结构。1【bufptrig】参数指向WK


-------------------------------------------------------- KeyGTK3Win32NetWkstaUserSetInfo ----
NetWkstaUserSetInfo    NetWkstaUserSetInfo函数设置有关工作站的配置元素的用户特定信息。
语法
参数
保留的该参数必须设置为零。水平指定以下值之一来设置提供的信息级别。值含义0BUF参数指向WKSTA_USER_INFO_0结构。1BUF参数指向WKSTA_USER_INFO_1结构。110


-------------------------------------------------------- KeyGTK3Win32NotifyBootConfigStatus ----
NotifyBootConfigStatus    NotifyBootConfigStatus函数通知服务控制管理员有关启动系统的配置的可接受性。可接受的配置触发该配置的存储作为最后一个已知的良好配置;不可接受的配置触发系统重新启动。
语法



-------------------------------------------------------- KeyGTK3Win32NotifyChangeEventLog ----
NotifyChangeEventLog    NotifyChangeEventLog函数允许应用程序在将事件写入【hEventLog】参数指定的事件日志文件时收到通知。当事件写入事件日志文件时，该函数会使由【活动】参数指定的事件对象发出信号。
语法
参数
【hEventLog】处理通过调用OpenEventLog函数获取的事件日志文件。当事件被写入此日志文件时，【活动】指定的事件变为信号。【活动】一个Win32事件的句柄。这是当事件写入由【h


-------------------------------------------------------- KeyGTK3Win32ObjectCloseAuditAlarm ----
ObjectCloseAuditAlarm    当删除对象的句柄时，ObjectCloseAuditAlarm函数会生成审核消息。当前版本的Windows NT不支持警报。
语法
参数
【SubsystemName】指向一个以null结尾的字符串，指定调用该函数的子系统的名称，例如“DEBUG”或“WIN32”。【HandleId】指定一个唯一的32位值，表示客户端对象的句


-------------------------------------------------------- KeyGTK3Win32ObjectDeleteAuditAlarm ----
ObjectDeleteAuditAlarm    [New - Windows NT]删除对象时，ObjectDeleteAuditAlarm函数会生成审核消息。Windows NT安全性不支持警报。
语法
参数
【SubsystemName】指向以null结尾的字符串的指针，指定调用该函数的子系统的名称;例如“DEBUG”或“WIN32”。此字符串显示在该对象的审核日志中。【HandleId】指定一


-------------------------------------------------------- KeyGTK3Win32ObjectOpenAuditAlarm ----
ObjectOpenAuditAlarm    当客户端应用程序尝试访问对象或创建新对象时，ObjectOpenAuditAlarm函数将生成审核消息。当前版本的Windows NT不支持警报。
语法
参数
【SubsystemName】指向一个以null结束的字符串，指定调用此函数的子系统，例如“DEBUG”或“WIN32”。【HandleId】指向一个唯一的32位值，表示客户端对象的句柄。如


-------------------------------------------------------- KeyGTK3Win32ObjectPrivilegeAuditAlarm ----
ObjectPrivilegeAuditAlarm    由于客户端尝试使用该对象已经打开的句柄对服务器应用程序对象执行特权操作，ObjectPrivilegeAuditAlarm函数将生成审核消息。当前版本的Windows NT不支持警报。
语法
参数
【SubsystemName】指向一个以null结尾的字符串，指定调用函数的子系统的名称;例如“DEBUG”或“WIN32”。【HandleId】指向一个唯一的32位值，表示客户端对象的句柄


-------------------------------------------------------- KeyGTK3Win32OemKeyScan ----
OemKeyScan    OEM代码0到0x0FF的OemKeyScan函数将映射到OEM扫描代码和移位状态。该函数提供的信息允许程序通过模拟键盘输入将OEM文本发送到另一个程序。
语法
参数
【wOemChar】指定OEM字符的ASCII值。
返回值
如果函数成功，返回值的低位字包含给定OEM字符的扫描码，高位字包含移位状态，它可以是以下标志位的组合：位含义1按SHIFT键。


-------------------------------------------------------- KeyGTK3Win32OemToAnsi ----
OemToAnsi  OemToAnsi函数已过时。为了与16位版本的Windows兼容，此函数实现为调用OemToChar函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyGTK3Win32OemToAnsiBuff ----
OemToAnsiBuff  OemToAnsiBuff函数已过时。为了与16位版本的Windows兼容，此函数实现为调用OemToCharBuff函数的宏，该函数应用于基于Win32的应用程序。


-------------------------------------------------------- KeyGTK3Win32OemToChar ----
OemToChar    OemToChar函数将一个字符串从OEM定义的字符集转换为ANSI或宽字符串。（OEM代表原始设备制造商。）此函数取代OemToAnsi函数。
语法
参数
【lpszSrc】指向OEM定义的字符集中以空字符结尾的字符串。【lpszDst】指向缓冲区的翻译字符串。如果OemToChar函数用作ANSI函数，则可以通过将【lpszDst】参数设置为


-------------------------------------------------------- KeyGTK3Win32OemToCharBuff ----
OemToCharBuff    OemToCharBuff函数将字符串中指定数量的字符从OEM定义的字符集转换为ANSI或宽字符串。（OEM代表原始设备制造商。）此函数取代OemToAnsiBuff函数。
语法
参数
【lpszSrc】指向包含OEM定义字符集中的一个或多个字符的缓冲区。【lpszDst】指向缓冲区的翻译字符串。如果OemToCharBuff函数用作ANSI函数，则可以通过将【lpszDs


-------------------------------------------------------- KeyGTK3Win32OffsetClipRgn ----
OffsetClipRgn    OffsetClipRgn函数将设备上下文的剪切区域移动指定的偏移量。
语法
参数
【HDC】标识设备上下文。【nXOffset】指定向左或向右移动的逻辑单位数。【nYOffset】指定上下移动的逻辑单位数。
返回值
如果函数成功，则返回值指定新区域的复杂度，并且可以是


-------------------------------------------------------- KeyGTK3Win32OffsetRect ----
OffsetRect    OffsetRect函数将指定的矩形移动指定的偏移量。
语法
参数
【LPRC】指向包含要移动的矩形的逻辑坐标的RECT结构。【dx】指定向左或向右移动矩形的量。此参数必须是负值才能将矩形向左移动。【dy】指定向上或向下移动矩形的量。此参数必须为负值才能将矩


-------------------------------------------------------- KeyGTK3Win32OffsetRgn ----
OffsetRgn    OffsetRgn函数将区域移动指定的偏移量。
语法



-------------------------------------------------------- KeyGTK3Win32OffsetViewportOrgEx ----
OffsetViewportOrgEx    OffsetViewportOrgEx函数使用指定的水平和垂直偏移修改设备上下文的视口原点。
语法
参数
【HDC】标识设备上下文。【nXOffset】以设备为单位指定水平偏移。【nYOffset】以设备为单位指定垂直偏移。【LPPOINT】指向POINT结构。以前的视口原点（以设备为单位）放置


-------------------------------------------------------- KeyGTK3Win32OffsetWindowOrgEx ----
OffsetWindowOrgEx    OffsetWindowOrgEx函数使用指定的水平和垂直偏移修改设备上下文的窗口原点。
语法



-------------------------------------------------------- KeyGTK3Win32OFNHookProc ----
OFNHookProc    一个OFNHookProc挂接过程是一个应用程序定义或库定义的回调过程，它与Explorer风格的Open和Save As常用对话框一起使用。挂钩过程接收从公共对话框发送的通知消息。挂钩过程还会接收通过指定子对话框模板定义的任何其他控件的消息。如果您在创建“打开”或“另存为公共”对话框时未指定OFN_EXPLORER标志，并且希望使用挂钩过程，则必须使用旧式OFNHookProcOldStyle挂接过程。在这种情况下，对话框将具有旧式用户界面。
语法
参数
【hdlg】处理“打开”或“另存为”对话框的子对话框。使用GetParent函数获取打开或另存为对话框窗口的句柄。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息


-------------------------------------------------------- KeyGTK3Win32OFNHookProcOldStyle ----
OFNHookProcOldStyle    一个OFNHookProcOldStyle挂接过程是一个应用程序定义或库定义的回调过程，与“打开和另存为”常用对话框一起使用。挂钩过程接收针对对话框过程的消息或通知。如果您在创建“打开”或“另存为公共”对话框时指定OFN_EXPLORER标志，并且想要挂钩过程，则必须使用资源管理器风格的OFNHookProc挂接过程。
语法
参数
【hdlg】处理打开或另存为对话框窗口，其消息的目的是。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息。具体含义取决于【uiMsg】参数的值。【lParam的】


-------------------------------------------------------- KeyGTK3Win32OpenBackupEventLog ----
OpenBackupEventLog    OpenBackupEventLog函数打开备份事件日志的句柄。该手柄可以与BackupEventLog函数一起使用。
语法
参数
【lpUNCServerName】指向以空字符结尾的字符串，该字符串指定要执行此操作的服务器的通用命名约定（UNC）名称。如果此参数为NULL，则在本地计算机上执行该操作。【lpFileNa


-------------------------------------------------------- KeyGTK3Win32OpenClipboard ----
OpenClipboard    OpenClipboard函数打开剪贴板进行检查，并阻止其他应用程序修改剪贴板内容。
语法
参数
【hWndNewOwner】标识与打开的剪贴板关联的窗口。如果此参数为NULL，则打开的剪贴板与当前任务相关联。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展


-------------------------------------------------------- KeyGTK3Win32OpenDesktop ----
OpenDesktop    OpenDesktop函数返回一个现有桌面的句柄。桌面是包含在窗口站对象内的安全对象。桌面具有逻辑显示面，并包含窗口，菜单和挂钩。
语法
参数
【lpszDesktop】指向以空字符结尾的字符串，指定要打开的桌面的名称。桌面名称不区分大小写。【dwFlags中】一个位标志参数，用于控制呼叫应用程序将如何与桌面上的其他应用程序配合使用


-------------------------------------------------------- KeyGTK3Win32OpenEvent ----
OpenEvent    OpenEvent函数返回现有命名事件对象的句柄。
语法
参数
【dwDesiredAccess】指定对事件对象的请求访问。对于支持对象安全性的系统，如果指定对象的安全描述符不允许调用进程的请求访问，则该函数将失败。此参数可以是以下值的任意组合：访问描述


-------------------------------------------------------- KeyGTK3Win32OpenEventLog ----
OpenEventLog    OpenEventLog函数打开事件日志的句柄。
语法
参数
【lpUNCServerName】指向以空字符结尾的字符串，指定要在其上打开事件日志的服务器的通用命名约定（UNC）名称。如果此参数为NULL，则在本地计算机上打开该日志。【lpSource


-------------------------------------------------------- KeyGTK3Win32OpenFile ----
OpenFile    OpenFile函数创建，打开，重新打开或删除文件。此函数用于与16位版本的Windows兼容。特别地，OpenFile函数无法打开命名管道。基于Win32的应用程序应使用CreateFile函数。
语法
参数
【lpFileName】指向以空字符结尾的字符串，命名要打开的文件。字符串必须包含来自Windows 3.【x】字符集的字符。OpenFile函数不支持Unicode文件名。【lpReOpe


-------------------------------------------------------- KeyGTK3Win32OpenFileMapping ----
OpenFileMapping    OpenFileMapping函数打开一个命名的文件映射对象。
语法
参数
【dwDesiredAccess】指定对文件映射对象的访问。Windows NT：对目标文件映射对象上的任何安全描述符检查此访问。Windows 95：Windows 95不支持文件映射对象


-------------------------------------------------------- KeyGTK3Win32OpenIcon ----
OpenIcon    OpenIcon函数将最小化（标志性）窗口恢复到其先前的大小和位置;然后激活窗口。
语法
参数
【的hWnd】标识要恢复和激活的窗口。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
OpenIcon向给


-------------------------------------------------------- KeyGTK3Win32OpenInputDesktop ----
OpenInputDesktop    OpenInputDesktop函数返回一个接收用户输入的桌面的句柄。输入桌面是与登录用户相关联的窗口台上的桌面。
语法
参数
【dwFlags中】一个位标志参数，用于控制呼叫应用程序将如何与桌面上的其他应用程序配合使用。此参数可以指定零或以下值：值描述DF_ALLOWOTHERACCOUNTHOOK允许进程在桌面上


-------------------------------------------------------- KeyGTK3Win32OpenMutex ----
OpenMutex    OpenMutex函数返回一个现有的命名互斥对象的句柄。
语法
参数
【dwDesiredAccess】指定对互斥体对象的请求访问。对于支持对象安全性的系统，如果指定对象的安全描述符不允许调用进程的请求访问，则该函数将失败。此参数可以是以下值的任意组合：访问描


-------------------------------------------------------- KeyGTK3Win32OpenPrinter ----
OpenPrinter    OpenPrinter函数可检索识别指定打印机或打印服务器的句柄。
语法
参数
【pPrinterName】指向以空字符结尾的字符串，指定打印机或打印服务器的名称。【phPrinter】指向接收标识打开的打印机或打印服务器对象的句柄的变量。【pDefault】指向PRI


-------------------------------------------------------- KeyGTK3Win32OpenProcess ----
OpenProcess    OpenProcess函数返回现有进程对象的句柄。
语法
参数
【dwDesiredAccess】指定对进程对象的访问。对于支持安全检查的操作系统，将针对目标进程的任何安全描述符检查此访问。除了STANDARD_RIGHTS_REQUIRED访问标志之外


-------------------------------------------------------- KeyGTK3Win32OpenProcessToken ----
OpenProcessToken    OpenProcessToken函数打开与进程关联的访问令牌。
语法
参数
【ProcessHandle】标识访问令牌打开的进程。【DesiredAccess】指定一个访问掩码，指定访问令牌的请求类型。这些请求的访问类型与令牌的自由访问控制列表（ACL）进行比较，以


-------------------------------------------------------- KeyGTK3Win32OpenSCManager ----
OpenSCManager    OpenSCManager函数在指定的计算机上建立与服务控制管理器的连接，并打开指定的数据库。
语法
参数
【lpMachineName】指向以目标计算机命名的以null结尾的字符串。如果指针为NULL或指向空字符串，则该函数将连接到本地计算机上的服务控制管理器。【lpDatabaseName】指


-------------------------------------------------------- KeyGTK3Win32OpenSemaphore ----
OpenSemaphore    OpenSemaphore函数返回一个现有的命名信号量对象的句柄。
语法
参数
【dwDesiredAccess】指定对信号量对象的请求访问。对于支持对象安全性的系统，如果指定对象的安全描述符不允许调用进程的请求访问，则该函数将失败。此参数可以是以下值的任意组合：访问描


-------------------------------------------------------- KeyGTK3Win32OpenService ----
OpenService    OpenService函数打开现有服务的句柄。
语法
参数
【hSCManager】标识服务控制管理器（SCM）数据库。OpenSCManager函数返回此句柄。【lpServiceName】指向以空字符结尾的字符串，命名要打开的服务。最大字符串长度


-------------------------------------------------------- KeyGTK3Win32OpenThreadToken ----
OpenThreadToken    OpenThreadToken函数打开与线程相关联的访问令牌。
语法
参数
【ThreadHandle】标识其访问令牌被打开的线程。【DesiredAccess】指定一个访问掩码，指定访问令牌的请求类型。这些请求的访问类型与令牌的自由访问控制列表（ACL）进行协调，


-------------------------------------------------------- KeyGTK3Win32OpenWaitableTimer ----
OpenWaitableTimer    [New - Windows NT]OpenWaitableTimer函数返回一个现有命名的“等待”定时器对象的句柄。
语法
参数
【dwDesiredAccess】指定对定时器对象的请求访问。对于支持对象安全性的系统，如果指定对象的安全描述符不允许调用进程的请求访问，则该函数将失败。此参数可以是以下值的任意组合：值含义


-------------------------------------------------------- KeyGTK3Win32OpenWindowStation ----
OpenWindowStation    OpenWindowStation函数返回一个现有窗口站的句柄。
语法
参数
【lpszWinSta】指向以空字符结尾的字符串，指定要打开的窗口站的名称。窗口站名称不区分大小写。【Finherit】指定在创建新进程时是否继承返回的句柄。如果此值为TRUE，则新进程将继


-------------------------------------------------------- KeyGTK3Win32ORASADFunc ----
ORASADFunc    ORASADFunc函数是一个应用程序定义的回调函数，可用于为自动拨号提供自定义用户界面。提供此原型是为了与早期版本的Windows兼容。新应用程序应使用RASADFunc回调函数。在以后版本的RAS中可能会删除对该原型的支持。
语法
参数
【hwndOwner】处理所有者窗口。【lpszEntry】指向指定要使用的电话簿条目的以空值终止的字符串的指针。【dwFlags中】Reserved; must be zero.【lpdw


-------------------------------------------------------- KeyGTK3Win32OutputDebugString ----
OutputDebugString    OutputDebugString函数向当前应用程序的调试器发送一个字符串。
语法



-------------------------------------------------------- KeyGTK3Win32OutputProc ----
OutputProc    OutputProc函数是一个应用程序定义的回调函数，它通过调用GrayString函数来绘制一个字符串。
语法
参数
【HDC】标识至少具有【nWidth】和【nHeight参数】传递给GrayString的参数指定的宽度和高度的位图的设备上下文。【的lpData】指向要绘制的字符串。【//要绘制的字符串的


-------------------------------------------------------- KeyGTK3Win32PackDDElParam ----
PackDDElParam    PackDDElParam函数将DDE 【lParam的】值打包到用于在进程之间共享DDE数据的内部结构中。
语法
参数
【味精】指定要发布的DDE消息。【uiLoga】指定与要发布的DDE消息的{389796046}参数的Windows 3.【x】低位字对应的值。【uiHi】指定对应于要发布的DDE消息的{3


-------------------------------------------------------- KeyGTK3Win32PagePaintHook ----
PagePaintHook    一个PagePaintHook挂接过程是与“页面设置”对话框一起使用的应用程序定义或库定义的回调过程。挂钩过程接收允许您在“页面设置”对话框中自定义样本页面的消息。
语法
参数
【hdlg】处理页面设置对话框窗口。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息。具体含义取决于【uiMsg】参数的值。【lParam的】指定有关该消息的附加


-------------------------------------------------------- KeyGTK3Win32PageSetupDlg ----
PageSetupDlg    PageSetupDlg函数创建一个“页面设置”对话框，使用户可以指定打印页面的属性。这些属性包括纸张尺寸和来源，页面方向（纵向或横向）以及页边距的宽度。
语法
参数
【lppsd】指向PAGESETUPDLG结构的指针，其中包含用于初始化对话框的信息。当函数返回时，结构接收有关用户选择的信息。
返回值
如果用户单击确定按钮，则返回值不为零。PAGES


-------------------------------------------------------- KeyGTK3Win32PageSetupHook ----
PageSetupHook    一个PageSetupHook挂接过程是与页面设置公用对话框一起使用的应用程序定义或库定义的回调过程。挂钩过程接收默认对话框过程的消息或通知。
语法
参数
【hdlg】处理该消息所针对的页面设置对话框窗口。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息。具体含义取决于【uiMsg】参数的值。【lParam的】指定有


-------------------------------------------------------- KeyGTK3Win32PaintDesktop ----
PaintDesktop    [Now Supported on Windows NT]PaintDesktop函数使用桌面图案或壁纸填充指定设备上下文中的裁剪区域。该函数主要用于外壳桌面。
语法



-------------------------------------------------------- KeyGTK3Win32PaintRgn ----
PaintRgn    PaintRgn函数通过使用当前选定的画笔在设备上下文中绘制指定的区域。
语法
参数
【HDC】标识设备上下文。【HRGN】标识要填充的区域。该区域的坐标被推定为逻辑坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyGTK3Win32PatBlt ----
PatBlt    PatBlt函数使用当前在指定设备上下文中选择的画笔来绘制给定的矩形。通过使用给定的光栅操作来组合画笔颜色和表面颜色。
语法
参数
【HDC】标识设备上下文。【nXLeft】指定要填充的矩形左上角的x坐标（以逻辑为单位）。【nYLeft】指定要填充的矩形左上角的y坐标（以逻辑为单位）。【nWidth】指定矩形的逻辑单位宽


-------------------------------------------------------- KeyGTK3Win32PathToRegion ----
PathToRegion    PathToRegion函数从选择到指定设备上下文的路径中创建一个区域。
语法
参数
【HDC】标识包含封闭路径的设备上下文。
返回值
如果函数成功，则返回值标识有效区域。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.GetLastErro


-------------------------------------------------------- KeyGTK3Win32PeekConsoleInput ----
PeekConsoleInput    PeekConsoleInput函数从指定的控制台输入缓冲区中读取数据，而不从缓冲区中删除它。
语法
参数
【hConsoleInput】标识输入缓冲区。句柄必须具有GENERIC_READ权限。【lpBuffer】指向接收输入缓冲区数据的INPUT_RECORD缓冲区。【nLength】指定由【


-------------------------------------------------------- KeyGTK3Win32PeekMessage ----
PeekMessage    PeekMessage函数检查线程消息队列中的消息，并将消息（如果有）放在指定的结构中。
语法
参数
【LPMSG】指向MSG结构，其中包含基于Windows的应用程序队列中的消息信息。【的hWnd】标识要检查其消息的窗口。【wMsgFilterMin】指定要检查的消息范围内的第一条消息的值


-------------------------------------------------------- KeyGTK3Win32PeekNamedPipe ----
PeekNamedPipe    PeekNamedPipe函数将数据从命名或匿名管道复制到缓冲区，而不从管道中删除。它还返回有关管道中数据的信息。
语法
参数
【hNamedPipe】标识管道。该参数可以是CreateNamedPipe或CreateFile函数返回的命名管道实例的句柄，或者它可以是CreatePipe函数返回的匿名管道的读取端的句


-------------------------------------------------------- KeyGTK3Win32Pie ----
馅饼    馅饼函数绘制一个由椭圆和两个径向交点界定的饼形楔形。通过使用当前笔并使用当前画笔填充饼图。BOOL Pie(HDC 【HDC】,//处理设备上下文INT 【nLeftRect】,// x-coord。边框的左上角INT 【nTopRect】,//的y坐标。边框的左上角INT 【nRightRect】,// x-coord。边框的右下角INT 【nBottomRect】,//的y坐标。边框的右下角INT 【nXRadial1】,// x-coord。的第一个径向的终点INT 【nYRadial1】,//的y坐标。的第一个径向的终点INT 【nXRadial2】,// x-coord。的第二径向端点INT 【nYRadial2】//的y坐标。的第二径向端点);
参数
【HDC】标识设备上下文。【nLeftRect】指定边界矩形左上角的x坐标。【nTopRect】指定边界矩形左上角的y坐标。【nRightRect】指定边界矩形右下角的x坐标。【nBotto


-------------------------------------------------------- KeyGTK3Win32PlayEnhMetaFile ----
PlayEnhMetaFile    PlayEnhMetaFile函数显示存储在指定的增强格式图元文件中的图片。
语法
参数
【HDC】标识出现图像的输出设备的设备上下文。【HEMF】识别增强的图元文件。【LPRECT】指向RECT结构，其中包含用于显示图片的边界矩形的坐标。坐标以逻辑单位指定。
返回值
如果函


-------------------------------------------------------- KeyGTK3Win32PlayEnhMetaFileRecord ----
PlayEnhMetaFileRecord    通过执行由记录识别的图形设备接口（GDI）函数，PlayEnhMetaFileRecord函数播放增强型元文件记录。
语法
参数
【HDC】标识传递给EnumEnhMetaFile函数的设备上下文。【这里ndletable】指向演示图元文件时使用的GDI对象的句柄表。此表中的第一个条目包含增强型图元文件句柄。【lpEn


-------------------------------------------------------- KeyGTK3Win32PlayMetaFile ----
PlayMetaFile    PlayMetaFile函数显示存储在指定设备上给定的Windows格式元文件的图片。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用PlayEnhMetaFile函数。
语法
参数
【HDC】标识设备上下文。【HMF】标识Windows格式的图元文件。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
Windows格式的图元文件不支持新的曲


-------------------------------------------------------- KeyGTK3Win32PlayMetaFileRecord ----
PlayMetaFileRecord    PlayMetaFileRecord函数通过执行该记录中包含的图形设备接口（GDI）函数来播放Windows格式的图元文件记录。此函数用于与16位版本的Microsoft Windows兼容。基于Win32的应用程序应使用PlayEnhMetaFileRecord函数。
语法
参数
【HDC】标识设备上下文。【这里ndletable】指向演示图元文件时使用的GDI对象的句柄表。【lpMetaRecord】指向Windows格式的图元文件记录。【nHandles】指定句柄


-------------------------------------------------------- KeyGTK3Win32PlgBlt ----
PlgBlt    PlgBlt函数执行将源设备上下文中指定矩形的颜色数据位的位块传输到目标设备上下文中指定的平行四边形。如果给定的位掩码句柄识别有效的单色位图，则该函数使用该位图来屏蔽源矩形中颜色数据的位。
语法
参数
【hdcDest】标识目标设备上下文。【LPPOINT】指向逻辑空间中的三个点的数组，其中标识目标平行四边形的三个角。源矩形的左上角被映射到该数组中的第一个点，右上角到该数组中的第二个点，左


-------------------------------------------------------- KeyGTK3Win32PolyBezier ----
PolyBezier    PolyBezier函数绘制一个或多个B zier曲线。
语法
参数
【HDC】标识设备上下文。【LPPT】指向包含曲线的端点和控制点的POINT结构数组。【cPointsen】指定【LPPT】数组中的点数。该值必须是要绘制的曲线数量的三倍以上，因为每个B z


-------------------------------------------------------- KeyGTK3Win32PolyBezierTo ----
PolyBezierTo    PolyBezierTo函数绘制一个或多个B zier曲线。
语法
参数
【HDC】标识设备上下文。【LPPT】指向包含端点和控制点的POINT结构数组。【cCount】指定【LPPT】数组中的点数。该值必须是要绘制的曲线数量的三倍，因为每个B zier曲线需要两


-------------------------------------------------------- KeyGTK3Win32PolyDraw ----
PolyDraw    PolyDraw函数绘制一组线段和B zier曲线。
语法
参数
【HDC】标识设备上下文。【LPPT】指向POINT结构的数组，其中包含每个线段的端点以及每个B zier曲线的端点和控制点。【lpbTypes】指向一个数组，指定如何使用【LPPT】数组中


-------------------------------------------------------- KeyGTK3Win32Polygon ----
多边形    多边形函数绘制由直线连接的两个或多个顶点组成的多边形。使用当前笔并使用当前画笔和多边形填充模式填充多边形。BOOL Polygon(HDC 【HDC】,//处理设备上下文CONST POINT *【lpPoints】,//指向多边形顶点的指针INT 【NCOUNT】//多边形顶点数);
参数
【HDC】标识设备上下文。【lpPoints】指向指定多边形顶点的POINT结构数组。【NCOUNT】指定数组中的顶点数。该值必须大于或等于2。
返回值
如果函数成功，返回值不为零。如果


-------------------------------------------------------- KeyGTK3Win32Polyline ----
折线    折线函数通过连接指定数组中的点来绘制一系列线段。BOOL Polyline(HDC 【HDC】,//设备上下文的句柄CONST POINT *【LPPT】,//包含端点的数组的地址INT 【cPointsen】//数组中的点数);
参数
【HDC】标识设备上下文。【LPPT】指向POINT结构的数组。阵列中的每个结构标识逻辑空间中的一个点。【cPointsen】指定数组中的点数。该数字必须大于或等于2。
返回值
如果函数


-------------------------------------------------------- KeyGTK3Win32PolylineTo ----
PolylineTo    PolylineTo函数绘制一条或多条直线。
语法
参数
【HDC】标识设备上下文。【LPPT】指向包含该行顶点的POINT结构的数组。【cCount】指定数组中的点数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述



-------------------------------------------------------- KeyGTK3Win32PolyPolygon ----
PolyPolygon    PolyPolygon函数绘制一系列封闭的多边形。通过使用当前笔并使用当前画笔和多边形填充模式填充每个多边形。由此函数绘制的多边形可以重叠。
语法
参数
【HDC】标识设备上下文。【lpPoints】指向定义多边形顶点的POINT结构数组。多边形连续指定。每个多边形通过从最后一个顶点到第一个顶点绘制一条线来自动关闭。每个顶点应该被指定一次。【


-------------------------------------------------------- KeyGTK3Win32PolyPolyline ----
PolyPolyline    PolyPolyline函数可绘制多个连接的线段。
语法
参数
【HDC】标识设备上下文。【LPPT】指向包含折线的顶点的POINT结构的数组。折线是连续指定的。【lpdwPolyPoints】指向一组变量，指定相应折线的【LPPT】阵列中的点数。每个条


-------------------------------------------------------- KeyGTK3Win32PolyTextOut ----
PolyTextOut    PolyTextOut函数使用当前在指定的设备上下文中选择的字体和文本颜色绘制多个字符串。
语法
参数
【HDC】标识设备上下文。【pptxt】指向描述要绘制的字符串的POLYTEXT结构的数组。该数组包含要绘制的每个字符串的一个结构。【cStrings】指定【pptxt】阵列中POLYTEX


-------------------------------------------------------- KeyGTK3Win32PostAppMessage ----
PostAppMessage    PostAppMessage函数已过时。该函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用PostThreadMessage函数。


-------------------------------------------------------- KeyGTK3Win32PostMessage ----
PostMessage    PostMessage函数将消息放置在与创建指定窗口的线程相关联的消息队列中，然后返回，而不等待线程处理消息。通过调用GetMessage或PeekMessage函数检索消息队列中的消息。
语法
参数
【的hWnd】标识窗口程序接收消息的窗口。两个值有特殊含义：值含义HWND_BROADCAST该消息被发布到系统中的所有顶级窗口，包括禁用或不可见的未知窗口，重叠窗口和弹出窗口。消息未发布到


-------------------------------------------------------- KeyGTK3Win32PostQueuedCompletionStatus ----
PostQueuedCompletionStatus    通过PostQueuedCompletionStatus函数，您可以将I / O完成数据包发送到I / O完成端口。I / O完成数据包将满足对GetQueuedCompletionStatus函数的未完成调用。GetQueuedCompletionStatus函数返回三个作为调用PostQueuedCompletionStatus的第二个，第三个和第四个参数传递的值。
语法
参数
【CompletionPort】处理要发布I / O完成数据包的I / O完成端口。【dwNumberOfBytesTransferred】指定通过GetQueuedCompletionSt


-------------------------------------------------------- KeyGTK3Win32PostQuitMessage ----
PostQuitMessage    PostQuitMessage函数向Windows指出线程已经请求终止（退出）。它通常用于响应WM_DESTROY消息。
语法
参数
【nExitCode】指定应用程序退出代码。该值用作WM_QUIT消息的【wParam中】参数。
返回值
此函数不返回值。
描述
PostQuitMessage函数向线程的消息队列发


-------------------------------------------------------- KeyGTK3Win32PostThreadMessage ----
PostThreadMessage    PostThreadMessage函数将消息放置在指定线程的消息队列中，然后返回，而不等待线程处理消息。
语法
参数
【idThread】标识消息将被发布到的线程。如果指定的线程没有消息队列，该函数将失败。当线程首次调用Win32 USER或GDI函数之一时，系统会创建线程的消息队列。有关详细信息，请参阅备


-------------------------------------------------------- KeyGTK3Win32PrepareTape ----
PrepareTape    PrepareTape函数准备要访问或删除的磁带。
语法
参数
【hDevice】标识准备磁带的设备。该句柄是通过使用CreateFile函数创建的。【// preparation method】指定如何准备磁带设备。此参数可以是以下值之一：值含义TAP


-------------------------------------------------------- KeyGTK3Win32PrintDlg ----
PrintDlg    PrintDlg函数显示“打印”对话框或“打印设置”对话框。“打印”对话框使用户能够指定特定打印作业的属性。“打印设置”对话框不应在新应用程序中使用。它已被PageSetupDlg函数创建的Page Setup常用对话框所取代。
语法
参数
【LPPD】指向PRINTDLG结构的指针，其中包含用于初始化对话框的信息。当PrintDlg返回时，此结构包含有关用户选择的信息。
返回值
如果用户单击确定按钮，则返回值不为零。【LP


-------------------------------------------------------- KeyGTK3Win32PrinterMessageBox ----
PrinterMessageBox    PrinterMessageBox函数显示一个消息框，允许正在打印的应用程序通知用户打印作业错误。如果作业的所有者远程登录，该函数会向所有者发送一个网络弹出窗口。如果用户在消息框中选择“取消”，该函数将取消打印作业;否则，该函数将清除作业错误状态，系统再次尝试打印作业。
语法
参数
【hPrinter】标识作业发送到的打印机。【错误】指定发生的错误。此参数可以是以下值之一：值含义ERROR_OUT_OF_PAPER打印机缺纸。ERROR_NOT_READY打印机尚未就绪


-------------------------------------------------------- KeyGTK3Win32PrinterProperties ----
PrinterProperties    PrinterProperties函数显示指定打印机的打印机属性对话框。
语法
参数
【的hWnd】标识对话框的父窗口。【hPrinter】标识打印机对象。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.


-------------------------------------------------------- KeyGTK3Win32PrintHookProc ----
PrintHookProc    一个PrintHookProc挂接过程是一个应用程序定义或库定义的回调过程，与打印公共对话框一起使用。挂钩过程接收默认对话框过程的消息或通知。
语法
参数
【hdlg】处理打印公共对话框窗口，消息的目的是打开公共对话框窗口。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息。具体含义取决于【uiMsg】参数的值。【lP


-------------------------------------------------------- KeyGTK3Win32PrivilegeCheck ----
PrivilegeCheck    PrivilegeCheck函数测试由特定访问令牌表示的安全上下文，以发现它是否包含指定的权限。服务器应用程序通常会调用此函数来检查客户端访问令牌的权限。
语法
参数
【ClientToken】标识表示客户端进程的访问令牌。必须通过打开假冒客户端的线程的令牌来获取此句柄。必须打开令牌才能进行TOKEN_QUERY访问。【RequiredPrivileges


-------------------------------------------------------- KeyGTK3Win32PrivilegedServiceAuditAlarm ----
PrivilegedServiceAuditAlarm    当尝试执行特权系统服务操作时，PrivilegedServiceAuditAlarm函数会生成审核消息。当前版本的Windows NT不支持警报。
语法
参数
【SubsystemName】指向一个以null结尾的字符串，指定调用该函数的子系统的名称，例如“DEBUG”或“WIN32”。【ServiceName】指向一个以空值终止的字符串，指定特权


-------------------------------------------------------- KeyGTK3Win32PropEnumProc ----
PropEnumProc    一个PropEnumProc函数是一个应用程序定义的回调函数，它从窗口的属性列表接收属性条目。作为调用EnumProps函数的结果，调用PropEnumProc函数。类型为PROPENUMPROC的值是指向PropEnumProc函数的指针。
语法
参数
【HWND】处理列表属性列表的窗口。【lpszStringhu】指向空终止字符串的指针。此字符串是属性列表条目的字符串组件。当通过调用SetProp函数将属??性添加到窗口的属性列表时，这是


-------------------------------------------------------- KeyGTK3Win32PropEnumProcEx ----
PropEnumProcEx    一个PropEnumProcEx函数是一个应用程序定义的回调函数，它从窗口的属性列表接收属性条目。作为调用EnumPropsEx函数的结果，调用PropEnumProcEx函数。类型为PROPENUMPROCEX的值是指向PropEnumProcEx函数的指针。
语法
参数
【HWND】处理列表属性列表的窗口。【lpszStringhu】指向空终止字符串的指针。此字符串是属性列表条目的字符串组件。当通过调用SetProp函数将属??性添加到窗口的属性列表时，这是


-------------------------------------------------------- KeyGTK3Win32PropertySheet ----
PropertySheet    PropertySheet函数创建一个属性表，并添加在指定的属性表头结构中定义的页面。
语法
参数
【Returns a positive value if successful or - 1 otherwise.】指向定义属性表的框架和页面的PROPSHEETHEADER结构的指针。



-------------------------------------------------------- KeyGTK3Win32PropSheetPageProc ----
PropSheetPageProc    PropSheetPageProc函数指定了一个应用程序定义的回调函数，当创建一个页面时以及当它被破坏时，该属性表将调用该函数。应用程序可以使用此函数对页面进行初始化和清理操作。
语法
参数
【HWND】Reserved; must be NULL.【uMsg】动作标志此参数可以是以下值之一：值含义PSPCB_CREATE正在创建一个页面。返回非零，以允许创建页面或为零阻止它。P


-------------------------------------------------------- KeyGTK3Win32PropSheetProc ----
PropSheetProc    PropSheetProc函数是一个应用程序定义的回调函数，系统在创建和初始化属性表时调用该函数。
语法
参数
【hwndDlg】处理到属性表对话框。【uMsg】标识正在接收的消息。此参数是以下值之一：值含义PSCB_INITIALIZED表示正在初始化属性表。此消息的【lParam的】值为零。PSC


-------------------------------------------------------- KeyGTK3Win32PtInRect ----
PtInRect    PtInRect函数确定指定的点是否在指定的矩形内。如果一个点位于左侧或上侧，或者在四面内，则该点在矩形内。右侧或下侧的点被认为在矩形之外。
语法
参数
【LPRC】指向包含指定矩形的RECT结构。【pt】指定包含指定点的POINT结构。
返回值
如果指定的点位于矩形内，则返回值不为零。如果指定的点不在矩形内，返回值为零。要获取扩展错误信


-------------------------------------------------------- KeyGTK3Win32PtInRegion ----
PtInRegion    PtInRegion函数确定指定点是否在指定的区域内。
语法
参数
【HRGN】确定要检查的区域。【X】指定点的x坐标。【Y】指定点的y坐标。
返回值
如果指定的点在区域中，则返回值不为零。如果指定点不在区域中，返回值为零。



-------------------------------------------------------- KeyGTK3Win32PtVisible ----
PtVisible    PtVisible函数指示指定点是否在设备上下文的剪切区域内。
语法
参数
【HDC】标识设备上下文。【X】指定点的逻辑x坐标。【Y】指定点的逻辑y坐标。
返回值
如果指定的点在设备上下文的剪切区域内，返回值不为零。如果指定的点不在设备上下文的剪切区域内，返回值


-------------------------------------------------------- KeyGTK3Win32PulseEvent ----
PulseEvent    PulseEvent函数提供了一个单独的操作，用于设置（发出信号）指定事件对象的状态，然后在释放适当数量的等待线程后将其重置（无信号）。
语法
参数
【活动】标识事件对象。CreateEvent或OpenEvent函数返回此句柄。Windows NT：句柄必须有EVENT_MODIFY_STATE访问权限。有关详细信息，请参阅进程间同步对


-------------------------------------------------------- KeyGTK3Win32PurgeComm ----
PurgeComm    PurgeComm函数可以丢弃指定通信资源的输出或输入缓冲区中的所有字符。它还可以终止对资源的等待读取或写入操作。
语法
参数
【HFILE】标识通信资源。CreateFile函数返回此句柄。【dwFlags中】指定要执行的操作。此参数可以是以下值的组合：值含义PURGE_TXABORT终止所有未完成的写操作并立即返


-------------------------------------------------------- KeyGTK3Win32QueryDosDevice ----
QueryDosDevice    QueryDosDevice函数允许应用程序获取有关MS-DOS设备名称的信息。该函数可以获得特定MS-DOS设备名称的当前映射。该函数还可以获取所有现有MS-DOS设备名称的列表。MS-DOS设备名称作为符号链接存储在Windows NT对象名称空间中。将MS-DOS路径转换为相应的Windows NT路径的代码使用这些符号链接映射MS-DOS设备和驱动器号。QueryDosDevice函数提供了一种机制，基于Win32的应用程序可以查询用于实现MS-DOS设备命名空间的符号链接的名称以及每个特定符号链接的值。
语法
参数
【lpDeviceName】指向指定查询目标的MS-DOS设备名称字符串的指针。此参数可以为NULL。在这种情况下，QueryDosDevice函数将将所有现有的MS-DOS设备名称列表存储


-------------------------------------------------------- KeyGTK3Win32QueryPerformanceCounter ----
QueryPerformanceCounter    QueryPerformanceCounter函数检索高分辨率性能计数器的当前值（如果存在）。
语法
参数
【lpPerformanceCount】指向函数以计数方式设置为当前性能计数器值的变量。如果安装的硬件不支持高分辨率性能计数器，则此参数可以为零。
返回值
如果安装的硬件支持高分辨率性能


-------------------------------------------------------- KeyGTK3Win32QueryPerformanceFrequency ----
QueryPerformanceFrequency    QueryPerformanceFrequency函数检索高分辨率性能计数器的频率（如果存在）。
语法
参数
【lpFrequency】指向函数以每秒计数为当前性能计数器频率的变量。如果安装的硬件不支持高分辨率性能计数器，则此参数可以为零。
返回值
如果安装的硬件支持高分辨率性能计数器，则返回值


-------------------------------------------------------- KeyGTK3Win32QueryServiceConfig ----
QueryServiceConfig    QueryServiceConfig函数检索指定服务的配置参数。
语法
参数
【hService】标识服务。该句柄由OpenService或CreateService函数返回，并且必须具有SERVICE_QUERY_CONFIG访问权限。【lpServiceConfi


-------------------------------------------------------- KeyGTK3Win32QueryServiceLockStatus ----
QueryServiceLockStatus    QueryServiceLockStatus函数检索指定的服务控制管理器数据库的锁定状态。
语法
参数
【hSCManager】标识服务控制管理器数据库。OpenSCManager函数返回此句柄，该句柄必须具有SC_MANAGER_QUERY_LOCK_STATUS访问权限。【lpLockSt


-------------------------------------------------------- KeyGTK3Win32QueryServiceObjectSecurity ----
QueryServiceObjectSecurity    QueryServiceObjectSecurity函数检索保护服务对象的安全描述符的副本。
语法
参数
【hService】标识服务。该句柄由OpenService或CreateService函数返回，并且必须具有READ_CONTROL访问权限。【dwSecurityInformation】


-------------------------------------------------------- KeyGTK3Win32QueryServiceStatus ----
QueryServiceStatus    QueryServiceStatus函数检索指定服务的当前状态。
语法
参数
【hService】标识服务。该句柄由OpenService或CreateService函数返回，并且必须具有SERVICE_QUERY_STATUS访问权限。【lpServiceStatu


-------------------------------------------------------- KeyGTK3Win32QueueUserAPC ----
QueueUserAPC    [New - Windows NT]QueueUserAPC函数将用户模式异步过程调用（APC）对象添加到指定线程的APC队列中。
语法
参数
【pfnAPC】指向应用程序提供的APC函数，以便在指定的线程执行可警告的等待操作时调用。【hThread】指定线程的句柄。句柄必须具有THREAD_SET_CONTEXT访问权限。有关详细


-------------------------------------------------------- KeyGTK3Win32RaiseException ----
RaiseException    RaiseException函数在调用线程中引发异常。
语法
参数
【dwExceptionCode】指定引发异常的应用程序定义异常代码。异常处理程序的过滤器表达式和异常处理程序块可以使用GetExceptionCode函数来检索该值。请注意，系统将会清除【


-------------------------------------------------------- KeyGTK3Win32RASADFunc ----
RASADFunc    [New - Windows NT]RASADFunc函数是一个应用程序定义的回调函数，可用于为自动拨出提供自定义用户界面。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyGTK3Win32RasAdminAcceptNewConnection ----
RasAdminAcceptNewConnection    [New - Windows NT]RasAdminAcceptNewConnection函数是由第三方RAS服务器管理DLL导出的应用程序定义函数。当用户尝试建立与RAS服务器的远程连接时，RAS会调用此函数。该函数决定用户是否允许连接。RAS服务器在多链路连接中为每个端口调用一次RasAdminAcceptNewConnection.
语法
参数
【pRasPort1】指向包含关于挂起连接的RAS数据的RAS_PORT_1结构的指针。此结构包含您需要作出关于连接的决定的相关连接信息。【pRasStats】指向包含端口统计信息的RAS_


-------------------------------------------------------- KeyGTK3Win32RasAdminConnectionHangupNotification ----
RasAdminConnectionHangupNotification    [New - Windows NT]RasAdminConnectionHangupNotification函数是由第三方RAS服务器管理DLL导出的应用程序定义函数。当RAS断开现有连接时，它会调用此函数来通知您的DLL。RAS服务器在多链路连接中为每个端口调用一次RasAdminConnectionHangupNotification.
语法
参数
【pRasPort1】指向RAS_PORT_1结构的指针，其中包含关于结束的连接的RAS数据。此结构包含可用于确定端口连接多长时间的相关连接信息。【pRasStats】指向包含端口统计信息的


-------------------------------------------------------- KeyGTK3Win32RasAdminFreeBuffer ----
RasAdminFreeBuffer    [New - Windows NT]RasAdminFreeBuffer函数释放由RAS代表呼叫者分配的内存。
语法
参数
【指针】指向要释放的缓冲区。
返回值
如果函数成功，则返回值为ERROR_SUCCESS。如果函数失败，则返回值可以是以下错误代码。值含义ERROR_INVALID_PARAMETER【


-------------------------------------------------------- KeyGTK3Win32RasAdminGetErrorString ----
RasAdminGetErrorString    [New - Windows NT]RasAdminGetErrorString函数检索与RAS服务器管理（RasAdmin）函数之一返回的RAS错误代码相对应的消息字符串。这些消息字符串是作为RAS的一部分安装的RASMSG.DLL检索的。
语法
参数
【ResourceId】指定由其中一个RasAdmin函数返回的错误代码。该值必须在RASERROR.H中定义的RASBASE到RASBASEEND的错误代码范围内。【lpszStringh


-------------------------------------------------------- KeyGTK3Win32RasAdminGetIpAddressForUser ----
RasAdminGetIpAddressForUser    [New - Windows NT]RasAdminGetIpAddressForUser函数是由第三方RAS服务器管理DLL导出的应用程序定义函数。RAS调用此函数获取已拨入远程客户端的IP地址。
语法
参数
【lpszUserName】指向一个空值终止的Unicode字符串，其中包含需要IP地址的远程用户的名称。【lpszPortName】指向以null终止的Unicode字符串的指针，其中包含


-------------------------------------------------------- KeyGTK3Win32RasAdminGetUserAccountServer ----
RasAdminGetUserAccountServer    [New - Windows NT]RasAdminGetUserAccountServer函数检索具有用户帐户数据库的服务器的名称。您可以使用RasAdminUserGetInfo和RasAdminUserSetInfo函数中返回的服务器名称来获取或设置有关指定用户的信息。
语法
参数
【lpszDo mainhu】指向一个空值终止的Unicode字符串，其中包含RAS服务器所属的域的名称。如果您在没有参与Windows NT域的Windows NT工作站或服务器上运行RA


-------------------------------------------------------- KeyGTK3Win32RasAdminPortClearStatistics ----
RasAdminPortClearStatistics    [New - Windows NT]RasAdminPortClearStatistics函数重置表示RAS_PORT_STATISTICS结构中RasAdminPortGetInfo函数报告的各种统计信息的计数器。计数器将重置为零，并从此开始累加。
语法
参数
【lpszServer】指向包含Windows NT RAS服务器名称的以null终止的Unicode字符串。使用前导“\\\\”字符指定名称，格式为：\\\\ 【服务器名称】.【lpszP


-------------------------------------------------------- KeyGTK3Win32RasAdminPortDisconnect ----
RasAdminPortDisconnect    [New - Windows NT]RasAdminPortDisconnect函数会断开当前正在使用的端口。
语法



-------------------------------------------------------- KeyGTK3Win32RasAdminPortEnum ----
RasAdminPortEnum    [New - Windows NT]RasAdminPortEnum函数枚举指定RAS服务器上的所有端口。对于服务器上的每个端口，该函数返回一个包含端口信息的RAS_PORT_0结构。
语法
参数
【lpszServer】指向包含Windows NT RAS服务器名称的以null终止的Unicode字符串。用“\\\\”字符指定名称，格式为：\\\\ 【服务器名称】.【ppRasPor


-------------------------------------------------------- KeyGTK3Win32RasAdminPortGetInfo ----
RasAdminPortGetInfo    [New - Windows NT]RasAdminPortGetInfo函数检索指定服务器上指定端口的信息【.】
语法
参数
【lpszServer】指向包含Windows NT RAS服务器名称的以null终止的Unicode字符串。使用前导“\\\\”字符指定名称，格式为：\\\\ 【服务器名称】.【lpszP


-------------------------------------------------------- KeyGTK3Win32RasAdminReleaseIpAddress ----
RasAdminReleaseIpAddress    [New - Windows NT]RasAdminReleaseIpAddress函数是由第三方RAS服务器管理DLL导出的应用程序定义函数。RAS调用此函数通知您的DLL，远程客户端已断开连接，并且该IP地址应该被释放。
语法
参数
【lpszUserName】指向以null终止的Unicode字符串，其中包含使用RasAdminGetIpAddressForUser函数之前获取IP地址的远程用户的名称。【lpszPor


-------------------------------------------------------- KeyGTK3Win32RasAdminServerGetInfo ----
RasAdminServerGetInfo    [New - Windows NT]RasAdminServerGetInfo函数可获取RAS服务器的服务器配置。
语法
参数
【lpszServer】指向包含Windows NT RAS服务器名称的以null终止的Unicode字符串。如果此参数为NULL，则该函数返回有关本地计算机的信息。使用前导“\\\\”字符


-------------------------------------------------------- KeyGTK3Win32RasAdminUserGetInfo ----
RasAdminUserGetInfo    [New - Windows NT]RasAdminUserGetInfo函数获取指定用户的RAS权限和回调电话号码信息。
语法
参数
【lpszUserAccountServer】指向一个空值终止的Unicode字符串，其中包含具有用户帐户数据库的主域控制器或备份域控制器的名称。使用RasAdminGetUserAccou


-------------------------------------------------------- KeyGTK3Win32RasAdminUserSetInfo ----
RasAdminUserSetInfo    [New - Windows NT]RasAdminUserSetInfo函数设置指定用户的RAS权限和回拨电话号码。
语法
参数
【lpszUserAccountServer】指向一个空值终止的Unicode字符串，其中包含具有用户帐户数据库的主域控制器或备份域控制器的名称。使用RasAdminGetUserAccou


-------------------------------------------------------- KeyGTK3Win32RasConnectionNotification ----
RasConnectionNotification    [New - Windows NT]RasConnectionNotification函数指定在创建或终止RAS连接时系统设置为信号状态的事件对象。
语法
参数
【活动】指定事件对象的句柄。使用CreateEvent函数创建事件对象。【dwFlags中】指示导致系统发出【活动】参数指定的事件对象的RAS事件。此参数可以是以下值的组合。值含义RASCN


-------------------------------------------------------- KeyGTK3Win32RasCreatePhonebookEntry ----
RasCreatePhonebookEntry    RasCreatePhonebookEntry函数创建一个新的电话簿条目。该函数显示一个对话框，用户在其中键入有关电话簿条目的信息。
语法
参数
【HWND】处理到对话框的父窗口。【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的空终止字符串的指针。如果此参数为NULL，则该函数使用


-------------------------------------------------------- KeyGTK3Win32RasDeleteEntry ----
RasDeleteEntry    [New - Windows NT]RasDeleteEntry函数从电话簿中删除一个条目。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyGTK3Win32RasDial ----
RasDial    RasDial函数在RAS客户端和RAS服务器之间建立RAS连接。连接数据包括回拨和用户认证信息。
语法
参数
【lpRasDialExtensions】Windows NT：指向RASDIALEXTENSIONS结构，指定一组RasDial扩展函数启用。如果您不需要启用任何扩展，请将此参数设置为NU


-------------------------------------------------------- KeyGTK3Win32RasDialDlg ----
RasDialDlg    [New - Windows NT]RasDialDlg函数尝试使用指定的电话簿条目和已登录用户的凭据建立RAS连接。该函数显示指示连接操作状态的对话框流。
语法
参数
【lpszPhonebook】指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电话簿文件是用户在拨号网


-------------------------------------------------------- KeyGTK3Win32RasDialFunc ----
RasDialFunc    RasDialFunc函数是在RAS连接过程中发生状态更改时，RasDial函数调用的应用程序定义或库定义的回调函数。
语法
参数
【unMsg】指定发生的事件的类型。目前，唯一定义的事件是WM_RASDIALEVENT。【rasconnstate】指定RASCONNSTATE枚举器值，该值指示RasDial远程访问连接


-------------------------------------------------------- KeyGTK3Win32RasDialFunc1 ----
RasDialFunc1    RasDialFunc1函数是在远程访问连接过程中发生状态更改时，RasDial函数调用的应用程序定义或库定义的回调函数。RasDialFunc1函数与RasDialFunc函数相当，但通过添加两个参数来增强：RAS连接的句柄和扩展错误代码。
语法
参数
【hrasconn】提供RasDial返回的RAS连接的句柄。【unMsg】指定发生的事件的类型。目前，唯一定义的事件是WM_RASDIALEVENT。【刮】指定RASCONNSTATE枚举


-------------------------------------------------------- KeyGTK3Win32RasDialFunc2 ----
RasDialFunc2    [New - Windows NT]RasDialFunc2函数是在远程访问连接过程中发生状态更改时，RasDial函数调用的应用程序定义或库定义的回调函数。RasDialFunc2函数与RasDialFunc1回调函数类似，不同之处在于它提供了多链接连接的附加信息。
语法
参数
【dwCallbackId】提供在RASDIALPARAMS结构中RASDIALPARAMS结构中传递给RasDial的结构中指定的应用程序定义值。【dwSubEntry】指定与此连接相关联


-------------------------------------------------------- KeyGTK3Win32RasEditPhonebookEntry ----
RasEditPhonebookEntry    RasEditPhonebookEntry函数会编辑现有的电话簿条目。该函数显示一个对话框，用户可以在其中修改现有信息。
语法
参数
【HWND】处理到对话框的父窗口。【lpszPhonebook】指针，它指定电话簿（的.pbk）文件的完整路径和文件名的空终止字符串。如果此参数为NULL，则该函数使用当前的默认电话簿文件。


-------------------------------------------------------- KeyGTK3Win32RasEntryDlg ----
RasEntryDlg    [New - Windows NT]RasEntryDlg函数显示允许用户操作电话簿条目的模态属性表。如果编辑或复制现有的电话簿条目，该函数将显示电话簿条目属性表。当用户关闭属性表时，RasEntryDlg函数返回。
语法
参数
【lpszPhonebook】指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电话簿文件是用户在拨号网


-------------------------------------------------------- KeyGTK3Win32RasEnumAutodialAddresses ----
RasEnumAutodialAddresses    [New - Windows NT]RasEnumAutodialAddresses函数返回AutoDial映射数据库中所有地址的列表。
语法
参数
【// pointer to buffer that receives network address strings】指向字符串指针数组的指针，其余空间用于在缓冲区的末尾存储字符串本身。每


-------------------------------------------------------- KeyGTK3Win32RasEnumConnections ----
RasEnumConnections    RasEnumConnections函数列出所有活动的RAS连接。它返回每个连接的句柄和电话簿条目名称。
语法
参数
【// buffer to receive connections data】指向接收RASCONN结构数组的缓冲区，每个RAS连接一个。在调用该函数之前，应用程序必须将缓冲区中的第一个RA


-------------------------------------------------------- KeyGTK3Win32RasEnumDevices ----
RasEnumDevices    [New - Windows NT]RasEnumDevices函数返回所有可用RAS设备的名称和类型。
语法
参数
【lpRasDevInfo】指向接收RASDEVINFO结构数组的缓冲区的指针，每个支持RAS的设备一个。在调用该函数之前，将缓冲区中第一个RASDEVINFO结构的的dwSize成员设置为


-------------------------------------------------------- KeyGTK3Win32RasEnumEntries ----
RasEnumEntries    RasEnumEntries函数列出了远程访问电话簿中的所有条目名称。
语法
参数
【保留的】Reserved; must be NULL.【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此


-------------------------------------------------------- KeyGTK3Win32RasGetAutodialAddress ----
RasGetAutodialAddress    [New - Windows NT]RasGetAutodialAddress函数检索与自动拨号映射数据库中的网络地址相关联的所有AutoDial条目的信息。
语法
参数
【lpszAddresshu】指向指定要求哪个信息的地址的以空值终止的字符串的指针。这可以是IP地址（“127.95.1.4”），Internet主机名（“www.microsoft.com


-------------------------------------------------------- KeyGTK3Win32RasGetAutodialEnable ----
RasGetAutodialEnable    [New - Windows NT]RasGetAutodialEnable函数指示是否为指定的TAPI拨号位置启用了自动拨号函数。有关TAPI拨号位置的更多信息，请参阅Win32 Telephony（TAPI）程序员参考。
语法
参数
【dwDialingLocation】指定TAPI拨号位置的标识符。【// pointer to variable that receives AutoDial state for this


-------------------------------------------------------- KeyGTK3Win32RasGetAutodialParam ----
RasGetAutodialParam    [New - Windows NT]RasGetAutodialParam函数检索AutoDial参数的值。
语法
参数
【dwKey】表示要检索的AutoDial参数。此参数可以是以下值之一。值含义RASADP_DisableConnectionQuery【lpvValue】参数返回一个DWORD值。如果此值


-------------------------------------------------------- KeyGTK3Win32RasGetConnectStatus ----
RasGetConnectStatus    RasGetConnectStatus函数检索有关指定远程访问连接的当前状态的信息。应用程序可以使用此调用来确定异步RasDial呼叫何时完成。
语法
参数
【hrasconn】标识要检索状态的远程访问连接。此手柄必须已经从RasDial或RasEnumConnections获得。【lprasconnstatus】指向函数填充状态信息的RASCO


-------------------------------------------------------- KeyGTK3Win32RasGetCountryInfo ----
RasGetCountryInfo    [New - Windows NT]RasGetCountryInfo函数从Windows Telephony国家/地区列表中检索国家/地区的拨号信息。有关国家特定拨号信息和TAPI国家标识符的更多信息，请参阅Win32 Telephony（TAPI）程序员参考。
语法
参数
【lpRasCtryInfo】指向RASCTRYINFO结构的指针，可以接收国家/地区特定拨号信息，后跟国家/地区描述字符串的附加字节。在调用该函数之前，将结构的的dwSize成员设置为si


-------------------------------------------------------- KeyGTK3Win32RasGetCredentials ----
RasGetCredentials    [New - Windows NT]RasGetCredentials函数检索与指定的RAS电话簿条目关联的用户凭据。
语法
参数
【lpszPhonebook】指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电话簿文件是用户在拨号网


-------------------------------------------------------- KeyGTK3Win32RasGetEntryDialParams ----
RasGetEntryDialParams    RasGetEntryDialParams函数可以检索上次成功呼叫保存的连接信息到指定电话簿条目的RasDial或RasSetEntryDialParams函数。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyGTK3Win32RasGetEntryProperties ----
RasGetEntryProperties    [New - Windows NT]RasGetEntryProperties函数检索电话簿条目的属性。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyGTK3Win32RasGetErrorString ----
RasGetErrorString    RasGetErrorString函数获取指定RAS错误值的错误消息字符串。
语法
参数
【uErrorValue】指定感兴趣的错误值。这些是由RAS函数之一返回的值：RAS头文件中列出的值。【lpszErrorString】指向缓冲区，该函数将写入错误字符串。此参数不能为NUL


-------------------------------------------------------- KeyGTK3Win32RasGetProjectionInfo ----
RasGetProjectionInfo    RasGetProjectionInfo函数获取有关指定远程访问组件协议的远程访问投影操作的信息。
语法
参数
【hrasconn】处理感兴趣的远程访问连接。应用程序从RasDial或RasEnumConnections函数获取RAS连接句柄。【rasprojection】枚举类型值RASPROJEC


-------------------------------------------------------- KeyGTK3Win32RasGetSubEntryHandle ----
RasGetSubEntryHandle    [New - Windows NT]RasGetSubEntryHandle函数检索多链接连接的指定子条目的连接句柄。
语法
参数
【hrasconn】指定RasDial函数返回的多链路电话簿条目的HRASCONN连接句柄。【dwSubEntry】指定电话簿条目的有效子条目索引。【lphrasconn】指向HRASCON


-------------------------------------------------------- KeyGTK3Win32RasGetSubEntryProperties ----
RasGetSubEntryProperties    [New - Windows NT]RasGetSubEntryProperties函数检索有关指定电话簿条目的子条目的信息。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyGTK3Win32RasHangUp ----
RasHangUp    RasHangUp函数终止远程访问连接。连接由RAS连接句柄指定。该函数释放与句柄相关联的所有RASAPI32.DLL资源。
语法
参数
【hrasconn】标识要终止的远程访问连接。这是从以前调用RasDial或RasEnumConnections返回的句柄。
返回值
如果函数成功，返回值为零。如果函数失败，则返回值是R


-------------------------------------------------------- KeyGTK3Win32RasMonitorDlg ----
RasMonitorDlg    [New - Windows NT]RasMonitorDlg函数显示描述RAS连接状态的拨号网络监控属性表。
语法
参数
【lpszDeviceName】指向以空值终止的字符串，指定最初显示的设备的名称。如果此参数为NULL，或者指定的设备不??存在，属性表将显示第一个设备。【lpinfoit】指向RASMON


-------------------------------------------------------- KeyGTK3Win32RasPBDlgFunc ----
RasPBDlgFunc    [New - Windows NT]RasPBDlgFunc函数是一个应用程序定义的回调函数，在RasPhonebookDlg对话框打开时接收用户活动的通知。
语法
参数
【dwCallbackId】表示传递给RasPhonebookDlg函数的RASPBDLG结构RASPBDLG结构中指定的应用程序定义值。【// indicates the event th


-------------------------------------------------------- KeyGTK3Win32RasPhonebookDlg ----
RasPhonebookDlg    [New - Windows NT]RasPhonebookDlg函数显示主拨号网络对话框。从该模式对话框中，用户可以拨打，编辑或删除所选电话簿条目，创建新的电话簿条目或指定用户首选项。对话框关闭时，RasPhonebookDlg函数返回。
语法
参数
【lpszPhonebook】指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电话簿文件是用户在拨号网


-------------------------------------------------------- KeyGTK3Win32RasRenameEntry ----
RasRenameEntry    [New - Windows NT]RasRenameEntry函数可更改电话簿中条目的名称。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyGTK3Win32RasSecurityDialogBegin ----
RasSecurityDialogBegin    [New - Windows NT]RasSecurityDialogBegin函数是Windows NT RAS服务器在远程用户尝试连接时调用的第三方RAS安全性DLL入口点。这使安全性DLL能够开始对远程用户的身份验证。
语法
参数
【hPort】指定RAS端口句柄。安全性DLL在其他RAS安全函数（如RasSecurityDialogSend和RasSecurityDialogReceive）中使用此句柄来标识此身份验


-------------------------------------------------------- KeyGTK3Win32RasSecurityDialogComplete ----
RasSecurityDialogComplete    [New - Windows NT]RasSecurityDialogComplete函数通知RAS服务器第三方安全认证交易的结果。第三方RAS安全性DLL在完成对远程用户的身份验证后，会调用RasSecurityDialogComplete.当服务器调用安全DLL的RasSecurityDialogBegin入口点时，RAS服务器会传递一个指向RasSecurityDialogComplete函数的指针。
语法
参数
【pSecMsg】指向包含认证交易结果的SECURITY_MESSAGE结构。
返回值
没有。
描述
当安全性DLL完成对远程用户的身份验证后，它调用RasSecurityDialo


-------------------------------------------------------- KeyGTK3Win32RasSecurityDialogEnd ----
RasSecurityDialogEnd    [New - Windows NT]RasSecurityDialogEnd函数是Windows NT RAS服务器调用终止认证交易的第三方RAS安全性DLL入口点。
语法
参数
【hPort】指定RAS服务器在此验证事务的RasSecurityDialogBegin调用中传递给安全性DLL的端口句柄。
返回值
如果安全DLL返回NO_ERROR，则RAS服务器不


-------------------------------------------------------- KeyGTK3Win32RasSecurityDialogGetInfo ----
RasSecurityDialogGetInfo    [New - Windows NT]RAS安全性DLL调用RasSecurityDialogGetInfo函数来获取有关RAS服务器端口的信息。要调用此函数，必须先调用LoadLibrary函数来加载RASMAN.DLL。然后调用GetProcAddress函数来获取DLL的RasSecurityDialogGetInfo入口点。
语法
参数
【hPort】指定RAS服务器在此验证事务的RasSecurityDialogBegin调用中传递给安全性DLL的端口句柄。【p缓冲器】指向RAS_SECURITY_INFO结构的指针，可以


-------------------------------------------------------- KeyGTK3Win32RasSecurityDialogReceive ----
RasSecurityDialogReceive    [New - Windows NT]RasSecurityDialogReceive函数启动异步操作，从远程用户接收响应。响应是用户在远程计算机上的终端窗口中键入的输入。第三方RAS安全性DLL将此函数称为远程用户验证的一部分。要调用此函数，必须先调用LoadLibrary函数来加载RASMAN.DLL。然后调用GetProcAddress函数来获取DLL的RasSecurityDialogReceive入口点。
语法
参数
【hPort】指定在此验证事务的RasSecurityDialogBegin调用中RAS服务器传递到安全性DLL的端口句柄。【p缓冲器】指向在RasSecurityDialogBegin调用


-------------------------------------------------------- KeyGTK3Win32RasSecurityDialogSend ----
RasSecurityDialogSend    [New - Windows NT]RasSecurityDialogSend函数发送一条消息，显示在远程计算机的终端窗口中。第三方RAS安全性DLL作为远程用户验证的一部分发送此消息。要调用此函数，必须先调用LoadLibrary函数来加载RASMAN.DLL。然后调用GetProcAddress函数来获取DLL的RasSecurityDialogSend入口点。
语法
参数
【hPort】指定RAS服务器在此验证事务的RasSecurityDialogBegin调用中传递给安全性DLL的端口句柄。【p缓冲器】指向在RasSecurityDialogBegin调用


-------------------------------------------------------- KeyGTK3Win32RasSetAutodialAddress ----
RasSetAutodialAddress    [New - Windows NT]RasSetAutodialAddress函数可以向AutoDial映射数据库添加一个地址。或者，该函数可以删除或修改与数据库中现有地址相关联的数据。
语法
参数
【lpszAddresshu】指向指定要添加，删除或修改的地址的以空值终止的字符串。这可以是IP地址（“127.95.1.4”），Internet主机名（“www.microsoft.com


-------------------------------------------------------- KeyGTK3Win32RasSetAutodialEnable ----
RasSetAutodialEnable    [New - Windows NT]RasSetAutodialEnable函数设置是否为指定的TAPI拨号位置启用了自动拨号函数。有关TAPI拨号位置的更多信息，请参阅Win32 Telephony（TAPI）程序员参考。
语法
参数
【dwDialingLocation】指定TAPI拨号位置的标识符。【fEnabled】指定TRUE以为指定的拨号位置启用自动拨号，或选择FALSE禁用它。
返回值
如果函数成功，返回值


-------------------------------------------------------- KeyGTK3Win32RasSetAutodialParam ----
RasSetAutodialParam    [New - Windows NT]RasSetAutodialParam函数设置AutoDial参数的值。
语法
参数
【dwKey】表示要设置的AutoDial参数。此参数可以是以下值之一。值含义RASADP_DisableConnectionQuery【lpvValue】参数指向DWORD值。如果此值为零


-------------------------------------------------------- KeyGTK3Win32RasSetCredentials ----
RasSetCredentials    [New - Windows NT]RasSetCredentials函数设置与指定的RAS电话簿条目关联的用户凭据。
语法
参数
【lpszPhonebook】指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电话簿文件是用户在拨号网


-------------------------------------------------------- KeyGTK3Win32RasSetEntryDialParams ----
RasSetEntryDialParams    RasSetEntryDialParams函数将上次成功呼叫保存的连接信息更改为指定电话簿条目的RasDial或RasSetEntryDialParams函数。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的空终止字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电话簿文


-------------------------------------------------------- KeyGTK3Win32RasSetEntryProperties ----
RasSetEntryProperties    [New - Windows NT]RasSetEntryProperties函数更改电话簿中条目的连接信息或创建新的电话簿条目。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyGTK3Win32RasSetSubEntryProperties ----
RasSetSubEntryProperties    [New - Windows NT]RasSetSubEntryProperties函数创建新的子条目或修改指定电话簿条目的现有子条目。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyGTK3Win32RasValidateEntryName ----
RasValidateEntryName    [New - Windows NT]RasValidateEntryName函数验证连接条目名的格式。该名称必须至少包含一个非空白字母数字字符。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyGTK3Win32ReadConsole ----
ReadConsole    ReadConsole函数从控制台输入缓冲区读取字符输入，并将其从缓冲区中删除。
语法
参数
【hConsoleInput】标识控制台输入缓冲区。句柄必须具有GENERIC_READ权限。【lpBuffer】指向缓冲区，接收从控制台输入缓冲区读取的数据。【nNumberOfChars


-------------------------------------------------------- KeyGTK3Win32ReadConsoleInput ----
ReadConsoleInput    ReadConsoleInput函数从控制台输入缓冲区读取数据，并将其从缓冲区中删除。
语法
参数
【hConsoleInput】标识输入缓冲区。句柄必须具有GENERIC_READ权限。【lpBuffer】指向接收输入缓冲区数据的INPUT_RECORD缓冲区。【nLength】指定由【


-------------------------------------------------------- KeyGTK3Win32ReadConsoleOutput ----
ReadConsoleOutput    ReadConsoleOutput函数从控制台屏幕缓冲区中的矩形块字符单元读取字符和颜色属性数据，并将该数据写入目标缓冲区中指定位置的矩形块。
语法
参数
【hConsoleOutput】标识屏幕缓冲区。句柄必须具有GENERIC_READ权限。【lpBuffer】指向接收从屏幕缓冲区读取的数据的目标缓冲区。该指针被视为由【dwBufferSi


-------------------------------------------------------- KeyGTK3Win32ReadConsoleOutputAttribute ----
ReadConsoleOutputAttribute    ReadConsoleOutputAttribute函数从指定位置开始，从控制台屏幕缓冲区的连续单元格中复制指定数量的前景和背景颜色属性。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_READ权限。【lpAttribute】指向缓冲区，接收从屏幕缓冲区读取的属性。【nLength】指定要读取


-------------------------------------------------------- KeyGTK3Win32ReadConsoleOutputCharacter ----
ReadConsoleOutputCharacter    ReadConsoleOutputCharacter函数从指定位置开始，从控制台屏幕缓冲区的连续单元格中复制多个字符。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_READ权限。【lpCharacter】指向缓冲区，接收从屏幕缓冲区读取的字符。【nLength】指定要读取


-------------------------------------------------------- KeyGTK3Win32ReadDirectoryChangesW ----
ReadDirectoryChangesW    [New - Windows NT]ReadDirectoryChangesW函数返回描述在目录中发生的更改的信息。
语法
参数
【hDirectory】标识要观看的目录。必须使用FILE_LIST_DIRECTORY访问权限打开此目录。【lpBuffer】指定要在其中返回读取结果的格式化缓冲区的地址。该缓冲区的结构由


-------------------------------------------------------- KeyGTK3Win32ReadEventLog ----
ReadEventLog    ReadEventLog函数从指定的事件日志读取整个条目。该函数可用于以正向或反向时间顺序读取日志条目。
语法
参数
【hEventLog】标识要读取的事件日志。该句柄由OpenEventLog函数返回。【dwReadFlags】指定读取操作如何继续。此参数可以是以下值的任意组合：值含义EVENTLOG_F


-------------------------------------------------------- KeyGTK3Win32ReadFile ----
ReadFile    ReadFile函数从文件指针所指定的位置开始读取数据。读取操作完成后，文件指针将按实际读取的字节数进行调整，除非使用overlap属性创建文件句柄。如果为重叠的输入和输出（I / O）创建文件句柄，则应用程序必须在读取操作后调整文件指针的位置。
语法
参数
【HFILE】标识要读取的文件。必须使用GENERIC_READ访问该文件创建文件句柄。Windows NT对于异步读取操作，【HFILE】可以是使用CreateFile函数的FILE_FL


-------------------------------------------------------- KeyGTK3Win32ReadFileEx ----
ReadFileEx    ReadFileEx函数从异步读取文件中的数据。它专为异步操作而设计，不同于专为同步和异步操作而设计的ReadFile函数。ReadFileEx允许应用程序在文件读取操作期间执行其他处理。
语法
参数
【HFILE】指定要读取的文件实体的打开句柄。必须使用FILE_FLAG_OVERLAPPED标志创建此文件句柄，并且必须对该文件具有GENERIC_READ权限。Windows NT： 【


-------------------------------------------------------- KeyGTK3Win32ReadPrinter ----
ReadPrinter    ReadPrinter函数从指定的打印机检索数据。
语法
参数
【hPrinter】标识要检索数据的打印机。【PBUFlb】指向接收打印机数据的字节数组。【cbBuf】指定【PBUFlb】指向的缓冲区的大小（以字节为单位）。【pNoBytesRead】指


-------------------------------------------------------- KeyGTK3Win32ReadProcessMemory ----
ReadProcessMemory    ReadProcessMemory函数在指定的进程中读取内存。要读取的整个区域必须可访问，否则操作失败。
语法
参数
【hProcess】标识读取存储器的进程的打开句柄。该句柄必须具有进程的PROCESS_VM_READ访问权限。【lpBaseAddress】指向要读取的指定进程中的基地址。在发生任何数据传


-------------------------------------------------------- KeyGTK3Win32RealizePalette ----
RealizePalette    RealizePalette函数将调色板条目从当前逻辑调色板映射到系统调色板。
语法
参数
【HDC】标识已选择逻辑调色板的设备上下文（DC）。
返回值
如果函数成功，则返回值是映射到系统调色板的逻辑调色板中的条目数。如果函数失败，返回值为GDI_ERROR。要获取扩展错误信息


-------------------------------------------------------- KeyGTK3Win32Rectangle ----
矩形    长方形函数绘制一个矩形。使用当前笔并使用当前画笔填充矩形。BOOL Rectangle(HDC 【HDC】,//设备上下文的句柄INT 【nLeftRect】,// x-coord。边框的左上角INT 【nTopRect】,//的y坐标。边框的左上角INT 【nRightRect】,// x-coord。边框的右下角INT 【nBottomRect】//的y坐标。边框的右下角);
参数
【HDC】标识设备上下文。【nLeftRect】指定矩形左上角的逻辑x坐标。【nTopRect】指定矩形左上角的逻辑y坐标。【nRightRect】指定矩形右下角的逻辑x坐标。【nBotto


-------------------------------------------------------- KeyGTK3Win32RectInRegion ----
RectInRegion    RectInRegion函数确定指定矩形的任何部分是否在区域的边界内。
语法
参数
【HRGN】识别该地区。【LPRC】指向包含矩形坐标的RECT结构。不包括矩形的下边和右边。
返回值
如果指定矩形的任何部分位于该区域的边界内，则返回值不为零。如果指定矩形的任何部分都不


-------------------------------------------------------- KeyGTK3Win32RectVisible ----
RectVisible    RectVisible函数确定指定矩形的任何部分是否位于设备上下文的裁剪区域内。
语法
参数
【HDC】标识设备上下文。【LPRC】指向包含指定矩形的逻辑坐标的RECT结构。
返回值
如果指定矩形的某些部分位于裁剪区域内，则返回值不为零。如果指定矩形的任何部分都不在裁剪区域内，返


-------------------------------------------------------- KeyGTK3Win32RedrawWindow ----
RedrawWindow    RedrawWindow函数可更新窗口客户区中指定的矩形或区域。
语法
参数
【的hWnd】标识要重绘的窗口。如果此参数为NULL，则会更新桌面窗口。【lprcUpdate】指向包含更新矩形坐标的RECT结构。如果【hrgnUpdate】参数标识一个区域，则忽略该参数


-------------------------------------------------------- KeyGTK3Win32RegCloseKey ----
RegCloseKey    RegCloseKey函数释放指定键的句柄。
语法
参数
【的hKeyru-Latn】标识要关闭的打开键。
返回值
如果函数成功，则返回值为ERROR_SUCCESS。如果函数失败，返回值是在WINERROR.H中定义的非零错误代码。您可以使用


-------------------------------------------------------- KeyGTK3Win32RegConnectRegistry ----
RegConnectRegistry    RegConnectRegistry函数与其他计算机上的预定义注册表句柄建立连接。
语法
参数
【lpMachineName】指向一个以空字符结尾的字符串，其中包含远程计算机的名称。该字符串具有以下形式：\\【计算机名】如果【lpMachineName】为NULL，则使用本地计算机名称


-------------------------------------------------------- KeyGTK3Win32RegCreateKey ----
RegCreateKey    RegCreateKey函数创建指定的键。如果密钥已经存在于注册表中，则该函数将打开它。此函数用于与Windows 3.1版兼容。基于Win32的应用程序应使用RegCreateKeyEx函数。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegCreateKeyEx ----
RegCreateKeyEx    RegCreateKeyEx函数创建指定的键。如果密钥已经存在于注册表中，则该函数将打开它。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegDeleteKey ----
RegDeleteKey    Windows 95： RegDeleteKey函数删除一个键及其所有后代。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegDeleteValue ----
RegDeleteValue    RegDeleteValue函数从指定的注册表项中删除一个命名值。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegEnumKey ----
RegEnumKey    RegEnumKey函数枚举指定的打开注册表项的子项。该函数在每次调用时检索一个子项的名称。此函数用于与Windows 3.1版兼容。基于Win32的应用程序应使用RegEnumKeyEx函数。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegEnumKeyEx ----
RegEnumKeyEx    RegEnumKeyEx函数枚举指定的打开注册表项的子项。该函数在每次调用时检索有关一个子项的信息。与RegEnumKey函数不同，RegEnumKeyEx检索子项的类名和上次修改的时间。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegEnumValue ----
RegEnumValue    RegEnumValue函数枚举指定打开的注册表项的值。该函数在每次调用时复制一个索引值名称和数据块。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegFlushKey ----
RegFlushKey    RegFlushKey函数将指定的打开密钥的所有属性写入注册表。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegGetKeySecurity ----
RegGetKeySecurity    RegGetKeySecurity函数检索保护指定的打开注册表项的安全描述符的副本。
语法
参数
【的hKeyru-Latn】标识要检索安全描述符的打开密钥。【SecurityInformation】指定一个SECURITY_INFORMATION结构，指示所请求的安全性信息。【pSec


-------------------------------------------------------- KeyGTK3Win32RegisterClass ----
RegisterClass    RegisterClass函数注册一个窗口类，用于随后在CreateWindow或CreateWindowEx函数的调用中使用。
语法
参数
【lpWndClass】指向WNDCLASS结构。在将结构传递给函数之前，必须使用适当的类属性来填充结构。
返回值
如果函数成功，则返回值是唯一标识正在注册的类的原子。如果函数失败，返回


-------------------------------------------------------- KeyGTK3Win32RegisterClassEx ----
RegisterClassEx    [Now Supported on Windows NT]RegisterClassEx函数注册一个窗口类，用于在CreateWindow或CreateWindowEx函数的调用中进行后续使用。RegisterClass函数不允许您设置小图标。
语法
参数
【lpwcx】指向WNDCLASSEX结构。在将结构传递给函数之前，必须使用适当的类属性来填充结构。
返回值
如果函数成功，则返回值是唯一标识正在注册的类的原子。如果函数失败，返回值为零


-------------------------------------------------------- KeyGTK3Win32RegisterClipboardFormat ----
RegisterClipboardFormat    RegisterClipboardFormat函数注册新的剪贴板格式。然后可以将此格式用作有效的剪贴板格式。
语法
参数
【lpszFormat】指向以空字符结尾的字符串，命名新格式。
返回值
如果函数成功，则返回值标识已注册的剪贴板格式。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastE


-------------------------------------------------------- KeyGTK3Win32RegisterDialogClasses ----
RegisterDialogClasses    RegisterDialogClasses函数注册屏幕保护程序配置对话框所需的任何非标准窗口类。
语法
参数
【HINST】标识注册窗口类的模块的实例。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
Register


-------------------------------------------------------- KeyGTK3Win32RegisterEventSource ----
RegisterEventSource    RegisterEventSource函数返回一个可以与ReportEvent函数一起使用的句柄来记录一个事件。可以使用任何源名称;它将在事件日志记录中携带，以便事件查看器可以使用它进行过滤。
语法
参数
【lpUNCServerName】指向以空字符结尾的字符串，该字符串指定要执行此操作的服务器的通用命名约定（UNC）名称。如果此参数为NULL，则在本地计算机上执行该操作。【lpSource


-------------------------------------------------------- KeyGTK3Win32RegisterHotKey ----
RegisterHotKey    RegisterHotKey函数定义当前线程的热键。
语法
参数
【的hWnd】标识将接收热键生成的WM_HOTKEY消息的窗口。如果此参数为NULL，WM_HOTKEY消息将发送到调用线程的消息队列，并且必须在消息循环中处理。【id】指定热键的标识符。调


-------------------------------------------------------- KeyGTK3Win32RegisterServiceCtrlHandler ----
RegisterServiceCtrlHandler    RegisterServiceCtrlHandler函数注册一个函数来处理服务的服务控制请求。
语法
参数
【lpServiceName】指向以空字符结尾的字符串，命名由调用线程运行的服务。这是在创建服务时在CreateService函数中指定的服务名称。【lpHandlerProc】指向要注册的


-------------------------------------------------------- KeyGTK3Win32RegisterWindowMessage ----
RegisterWindowMessage    RegisterWindowMessage函数定义了一个新的窗口消息，保证在整个系统中是唯一的。当调用SendMessage或PostMessage函数时，可以使用返回的消息值。
语法
参数
【lpString】指向指定要注册的消息的以null结尾的字符串。
返回值
如果消息成功注册，则返回值是0xC000到0xFFFF范围内的消息标识符。如果函数失败，返回值为零。
描述



-------------------------------------------------------- KeyGTK3Win32RegLoadKey ----
RegLoadKey    RegLoadKey函数在HKEY_USER或HKEY_LOCAL_MACHINE下创建一个子项，并将指定文件的注册信息存储到该子项中。这种注册信息是蜂巢的形式。配置单元是一个独立的键，子项和值，它们以root注册表层次结构的顶部为根。配置单元由单个文件和.LOG文件支持。
语法
参数
【的hKeyru-Latn】指定子项将被创建的键。这可以是预定义的保留句柄值，或者是调用RegConnectRegistry返回的句柄。预定义的保留句柄值为：HKEY_LOCAL_MACHI


-------------------------------------------------------- KeyGTK3Win32RegNotifyChangeKeyValue ----
RegNotifyChangeKeyValue    RegNotifyChangeKeyValue函数通知调用者对指定注册表项的属性或内容的更改。请注意，如果指定的键被删除，该函数不通知调用者。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegOpenKey ----
RegOpenKey    RegOpenKey函数打开指定的键。此函数用于与Windows 3.1版兼容。基于Win32的应用程序应使用RegOpenKeyEx函数。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegOpenKeyEx ----
RegOpenKeyEx    RegOpenKeyEx函数打开指定的键。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegQueryInfoKey ----
RegQueryInfoKey    RegQueryInfoKey函数检索有关指定注册表项的信息。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegQueryMultipleValues ----
RegQueryMultipleValues    RegQueryMultipleValues函数检索与打开的注册表项相关联的值名称列表的类型和数据。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何预定义的保留句柄值：HKEY_CLASSES_ROOT
HEY_CURRENT_USER
HKEY_LOCAL_MACHINE
HKE


-------------------------------------------------------- KeyGTK3Win32RegQueryValue ----
RegQueryValue    RegQueryValue函数检索与注册表中指定键的未命名值相关联的值。注册表中的值具有名称，类型和数据组件。此函数检索具有NULL名称的键的第一个值的数据。此函数用于与Windows 3.1版兼容。基于Win32的应用程序应使用RegQueryValueEx函数。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegQueryValueEx ----
RegQueryValueEx    RegQueryValueEx函数检索与打开的注册表项相关联的指定值名称的类型和数据。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegReplaceKey ----
RegReplaceKey    RegReplaceKey函数用另一个文件替换支持一个密钥及其所有子密钥的文件，这样当系统下次启动时，密钥和子密钥将具有存储在新文件中的值。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegRestoreKey ----
RegRestoreKey    RegRestoreKey函数读取指定文件中的注册表信息，并将其复制到指定的键上。该注册表信息可以是密钥和多级子密钥的形式。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegSaveKey ----
RegSaveKey    RegSaveKey函数将指定的键及其所有子项和值保存到新文件中。
语法
参数
【的hKeyru-Latn】指定要开始保存操作的键的句柄或以下任何预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACH


-------------------------------------------------------- KeyGTK3Win32RegSetKeySecurity ----
RegSetKeySecurity    RegSetKeySecurity函数设置打开注册表项的安全性。
语法
参数
【的hKeyru-Latn】标识设置安全描述符的打开密钥。【SecurityInformation】指定一个SECURITY_INFORMATION结构，指示所提供的安全描述符的内容。因为子


-------------------------------------------------------- KeyGTK3Win32RegSetValue ----
RegSetValue    RegSetValue函数将值与指定的键相关联。此值必须是文本字符串，不能有名称。此函数用于与Windows 3.1版兼容。基于Win32的应用程序应使用RegSetValueEx函数，该函数允许应用程序设置任意数量的任何数据类型的命名值。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegSetValueEx ----
RegSetValueEx    RegSetValueEx函数将数据存储在打开的注册表项的值字段中。它还可以为指定的键设置附加值和类型信息。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyGTK3Win32RegUnLoadKey ----
RegUnLoadKey    RegUnLoadKey函数从注册表中卸载指定的键和子项。
语法
参数
【的hKeyru-Latn】指定要卸载的密钥。这可以是预定义的预留句柄值，或者是调用RegConnectRegistry返回的句柄。预定义的保留句柄值为：HKEY_LOCAL_MACHINE


-------------------------------------------------------- KeyGTK3Win32ReleaseCapture ----
ReleaseCapture    ReleaseCapture函数从当前线程中的窗口释放鼠标捕获，并恢复正常的鼠标输入处理。捕获鼠标的窗口接收所有鼠标输入，无论光标的位置如何，除非当光标热点位于另一个线程的窗口中时单击鼠标按钮。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
调用SetCapture函数后，应用程序调用此函数。Windows 95：调用此函数会导致失去鼠


-------------------------------------------------------- KeyGTK3Win32ReleaseDC ----
ReleaseDC    ReleaseDC函数释放设备上下文（DC），将其释放供其他应用程序使用。ReleaseDC函数的效果取决于设备上下文的类型。它只释放普通和窗口设备上下文。它对类或私有设备上下文没有影响。
语法
参数
【的hWnd】标识要释放设备上下文的窗口。【hDC】标识要释放的设备上下文。
返回值
返回值指定设备上下文是否被释放。如果设备上下文被释放，则返回值为1。如果设备上下文未释放，则返回值为


-------------------------------------------------------- KeyGTK3Win32ReleaseMutex ----
ReleaseMutex    ReleaseMutex函数释放指定的互斥对象的所有权。
语法
参数
【hMutex】标识互斥体对象。CreateMutex或OpenMutex函数返回此句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用Get


-------------------------------------------------------- KeyGTK3Win32ReleaseSemaphore ----
ReleaseSemaphore    ReleaseSemaphore函数将指定信号量对象的计数增加指定量。
语法
参数
【// handle of the semaphore object】标识信号量对象。CreateSemaphore或OpenSemaphore函数返回此句柄。Windows NT：此句柄必


-------------------------------------------------------- KeyGTK3Win32RemoveDirectory ----
RemoveDirectory    RemoveDirectory函数删除现有的空目录。
语法
参数
【lpPathName】指向一个以null结尾的字符串，指定要删除的目录的路径。该路径必须指定一个空目录，并且调用进程必须具有对目录的删除访问权限。
返回值
如果函数成功，返回值不为零。


-------------------------------------------------------- KeyGTK3Win32RemoveFontResource ----
RemoveFontResource    RemoveFontResource函数从Windows字体表中删除指定文件中的字体。
语法
参数
【lpFileName】指向以空字符结尾的字符串，命名字体资源文件。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32RemoveMenu ----
RemoveMenu    RemoveMenu函数从指定的菜单中删除菜单项。如果菜单项打开一个下拉菜单或子菜单，RemoveMenu不会破坏菜单或其句柄，允许菜单重复使用。在调用此函数之前，GetSubMenu函数应该检索下拉菜单或子菜单的句柄。
语法
参数
【HMENU】标识要更改的菜单。【uPositionbs】指定要删除的菜单项，由【uFlags】参数确定。【uFlags】指定如何解释【uPositionbs】参数。此参数必须是以下值之一：


-------------------------------------------------------- KeyGTK3Win32RemoveProp ----
RemoveProp    RemoveProp函数从指定窗口的属性列表中删除一个条目。指定的字符串标识要删除的条目。
语法
参数
【的hWnd】标识要更改属性列表的窗口。【lpString】指向以null结尾的字符串或包含标识字符串的原子。如果此参数是原子，则必须使用AddAtom函数创建。原子，16位值，必须放在【l


-------------------------------------------------------- KeyGTK3Win32ReplaceText ----
ReplaceText    ReplaceText函数创建一个系统定义的无模式对话框，允许用户指定要搜索的字符串和替换字符串，以及用于控制查找和替换操作的选项。
语法
参数
【LPFR】指向FINDREPLACE结构的指针，其中包含用于初始化对话框的信息。该对话框使用此结构将有关用户输入的信息发送到您的应用程序。有关详细信息，请参阅以下备注部分。
返回值
如


-------------------------------------------------------- KeyGTK3Win32ReplyMessage ----
ReplyMessage    ReplyMessage函数用于回复通过SendMessage函数发送的消息，而不返回对称为SendMessage的函数的控制。
语法
参数
【LRESULT】指定消息处理的结果。可能的值基于发送的消息。
返回值
如果调用线程正在处理从另一个线程或进程发送的消息，则返回值不为零。如果调用线程没有处理从另一个线程或进程发送的消息


-------------------------------------------------------- KeyGTK3Win32ReportEvent ----
ReportEvent    ReportEvent函数在指定事件日志的末尾写入一个条目。
语法
参数
【hEventLog】标识事件日志。该句柄由RegisterEventSource函数返回。【WTYPE】指定正在记录的事件的类型。此参数可以是以下值之一：值含义EVENTLOG_ERROR


-------------------------------------------------------- KeyGTK3Win32ResetDC ----
ResetDC    ResetDC函数根据指定结构中的信息更新给定的打印机或绘图仪设备上下文。
语法
参数
【HDC】标识要更新的设备上下文。【lpInitData】指向DEVMODE结构，其中包含有关新设备上下文的信息。
返回值
如果函数成功，则返回值是原始设备上下文的句柄。如果函数失败，返


-------------------------------------------------------- KeyGTK3Win32ResetEvent ----
ResetEvent    ResetEvent函数将指定的事件对象的状态设置为非信号。
语法
参数
【活动】标识事件对象。CreateEvent或OpenEvent函数返回此句柄。Windows NT：句柄必须有EVENT_MODIFY_STATE访问权限。有关详细信息，请参阅进程间同步对


-------------------------------------------------------- KeyGTK3Win32ResetPrinter ----
ResetPrinter    ResetPrinter函数允许应用程序指定用于打印由StartDocPrinter函数提交的文档的数据类型和设备模式值。一旦文档打印开始，可以使用SetJob函数覆盖这些值。
语法
参数
【hPrinter】识别打印机。【pDefault】指向PRINTER_DEFAULTS结构。ResetPrinter函数忽略PRINTER_DEFAULTS结构的DesiredAccess


-------------------------------------------------------- KeyGTK3Win32ResizePalette ----
ResizePalette    ResizePalette函数根据指定的值增加或减少逻辑调色板的大小。
语法
参数
【HPAL】标识要更改的调色板。【的nentries】指定调色板大小后的条目数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastE


-------------------------------------------------------- KeyGTK3Win32RestoreDC ----
RestoreDC    RestoreDC函数将设备上下文（DC）恢复到指定的状态。通过从先前调用SaveDC函数创建的堆栈弹出状态信息来恢复设备上下文。
语法
参数
【HDC】标识设备上下文。【nSavedDC】指定要恢复的设备上下文的实例。如果此参数为正，则【nSavedDC】表示要还原的设备上下文的特定实例。如果此参数为负，则【nSavedDC】表示


-------------------------------------------------------- KeyGTK3Win32ResumeThread ----
ResumeThread    ResumeThread函数减少线程的挂起计数。当暂停计数递减到零时，线程的执行被恢复。
语法
参数
【hThread】指定要重新启动的线程的句柄。Windows NT：句柄必须具有对线程的THREAD_SUSPEND_RESUME访问权限。有关详细信息，请参阅线程对象.
返回值
如果函


-------------------------------------------------------- KeyGTK3Win32ReuseDDElParam ----
ReuseDDElParam    ReuseDDElParam函数允许应用程序重新使用打包的DDE 【lParam的】参数，而不是分配新的打包【lParam的】.使用此函数可减少通过打包DDE消息的应用程序的重新分配。
语法
参数
【lParam的】指定正在重用的发布的DDE消息的【lParam的】参数。【的MsgIn】指定接收的DDE消息的标识符。【msgOut】指定要发布的DDE消息的标识符。DDE消息将重新使用打


-------------------------------------------------------- KeyGTK3Win32RevertToSelf ----
RevertToSelf    RevertToSelf函数终止客户端应用程序的模拟。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
在使用DdeImpersonateClien


-------------------------------------------------------- KeyGTK3Win32RoundRect ----
RoundRect    RoundRect函数绘制一个带圆角的矩形。使用当前笔并使用当前画笔填充矩形。
语法
参数
【HDC】标识设备上下文。【nLeftRect】指定矩形左上角的x坐标。【nTopRect】指定矩形左上角的y坐标。【nRightRect】指定矩形右下角的x坐标。【nBottomRect】


-------------------------------------------------------- KeyGTK3Win32SaveDC ----
SaveDC    通过将描述所选对象和图形模式（如位图，画笔，调色板，字体，笔，区域，绘图模式和映射模式）的数据复制到SaveDC函数来保存指定设备上下文（DC）的当前状态，上下文堆栈。
语法
参数
【HDC】标识要保存的设备上下文。
返回值
如果函数成功，则返回值标识已保存的设备上下文。如果函数失败，返回值为零。
描述
可以使用SaveDC函数任意次数来保存设备上下文状态的任何


-------------------------------------------------------- KeyGTK3Win32ScaleViewportExtEx ----
ScaleViewportExtEx    ScaleViewportExtEx函数通过使用指定的乘数和除数形成的比例来修改设备上下文（DC）的视口。
语法
参数
【HDC】标识设备上下文。【XNUM】指定用于乘以当前水平范围的量。【//水平除数】指定用于划分当前水平范围的量。【// vertical multiplicand】指定乘以当前垂直范围的量


-------------------------------------------------------- KeyGTK3Win32ScaleWindowExtEx ----
ScaleWindowExtEx    ScaleWindowExtEx函数使用指定的乘数和除数形成的比率修改设备上下文的窗口。
语法
参数
【HDC】标识设备上下文。【XNUM】指定用于乘以当前水平范围的量。【//水平除数】指定用于划分当前水平范围的量。【// vertical multiplicand】指定乘以当前垂直范围的量


-------------------------------------------------------- KeyGTK3Win32ScheduleJob ----
ScheduleJob    ScheduleJob函数请求打印后台处理程序安排指定的打印作业进行打印。
语法
参数
【hPrinter】手柄指定打印作业的打印机。这必须是配置为假脱机打印机的本地打印机。如果【hPrinter】是远程打印机连接的句柄，或者如果打印机配置为直接打印，则ScheduleJob函


-------------------------------------------------------- KeyGTK3Win32ScreenSaverConfigureDialog ----
ScreenSaverConfigureDialog    ScreenSaverConfigureDialog函数接收发送到屏幕保护程序配置对话框的消息。允许用户配置的屏幕保护程序必须支持此函数。
语法
参数
【hDlg】标识配置对话框。【信息】指定消息。【wParam中】指定附加的消息特定信息。【lParam的】指定附加的消息特定信息。
返回值
如果函数处理消息，返回值为TRUE;否则，它是


-------------------------------------------------------- KeyGTK3Win32ScreenSaverProc ----
ScreenSaverProc    ScreenSaverProc函数接收发送到指定屏幕保护程序窗口的消息。
语法
参数
【的hWnd】标识窗口。【信息】指定消息。【wParam中】指定附加的消息特定信息。【lParam的】指定附加的消息特定信息。
返回值
返回值是消息处理的结果，取决于发送的消息。
描述


-------------------------------------------------------- KeyGTK3Win32ScreenToClient ----
ScreenToClient    ScreenToClient函数将屏幕上指定点的屏幕坐标转换为客户端坐标。
语法
参数
【的hWnd】识别客户端区域将用于转换的窗口。【LPPOINT】指向包含要转换的屏幕坐标的POINT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
该函


-------------------------------------------------------- KeyGTK3Win32ScrollConsoleScreenBuffer ----
ScrollConsoleScreenBuffer    ScrollConsoleScreenBuffer函数在屏幕缓冲区中移动一组数据。可以通过指定剪切矩形来限制移动的效果，因此剪切矩形外的屏幕缓冲区的内容不变。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【lpScrollRectangle】指向SMALL_RECT结构，其成员指定要移动的屏幕缓


-------------------------------------------------------- KeyGTK3Win32ScrollDC ----
ScrollDC    ScrollDC函数水平和垂直滚动一个位矩形。
语法
参数
【hDC】标识包含要滚动的位的设备上下文。【dx】指定水平滚动的设备单位数量。该参数必须是负值才能向左滚动。【dy】指定垂直滚动的设备单位数量。该参数必须是负值才能向上滚动。【lprcScr


-------------------------------------------------------- KeyGTK3Win32ScrollWindow ----
ScrollWindow    ScrollWindow函数滚动指定窗口的客户区域的内容。此函数存在向后兼容性。对于新的应用程序，请使用ScrollWindowEx函数。
语法
参数
【的hWnd】标识要滚动客户端区域的窗口。【XAmount】指定水平滚动的设备单位数量。如果要滚动的窗口具有CS_OWNDC或CS_CLASSDC样式，则此参数使用逻辑单元而不是设备单位。该


-------------------------------------------------------- KeyGTK3Win32ScrollWindowEx ----
ScrollWindowEx    ScrollWindowEx函数滚动指定窗口的客户区域的内容。此函数与ScrollWindow函数类似，但具有其他函数。
语法
参数
【的hWnd】标识要滚动客户端区域的窗口。【dx】指定水平滚动的设备单位数量。该参数必须是负值才能向左滚动。【dy】指定垂直滚动的设备单位数量。该参数必须是负值才能向上滚动。【// addr


-------------------------------------------------------- KeyGTK3Win32SearchPath ----
SearchPath    SearchPath函数搜索指定的文件。
语法
参数
【lpPath】指向以空字符结尾的字符串，指定要搜索文件的路径。如果此参数为NULL，则该函数按以下顺序搜索以下目录中的匹配文件：1.应用程序加载的目录。2.当前目录。3.Windows 9


-------------------------------------------------------- KeyGTK3Win32SelectClipPath ----
SelectClipPath    SelectClipPath函数将当前路径选择为设备上下文的剪切区域，通过使用指定的模式将新区域与任何现有的剪切区域组合。
语法
参数
【HDC】标识路径的设备上下文。【iMode平台】指定使用路径的方式。允许以下值：值含义RGN_AND新的剪辑区域包括当前剪辑区域和当前路径的交点（重叠区域）。RGN_COPY新剪辑区域是当


-------------------------------------------------------- KeyGTK3Win32SelectClipRgn ----
SelectClipRgn    SelectClipRgn函数选择一个区域作为指定设备上下文的当前剪切区域。
语法
参数
【HDC】标识设备上下文。【HRGN】标识要选择的区域。
返回值
如果函数成功，则返回值指定区域的复杂度，可以是以下值之一：值含义NULLREGION区域是空的SIMPLEREGION区


-------------------------------------------------------- KeyGTK3Win32SelectObject ----
SelectObject    SelectObject函数在指定的设备上下文中选择一个对象。新对象将替换同一类型的上一个对象。
语法
参数
【HDC】标识设备上下文。【hgdiobj】标识要选择的对象。必须使用以下函数之一创建指定的对象：目的函数位图CreateBitmap, CreateBitmapIndirect, Crea


-------------------------------------------------------- KeyGTK3Win32SelectPalette ----
SelectPalette    SelectPalette函数将指定的逻辑调色板选择到设备上下文中。
语法
参数
【HDC】标识设备上下文。【HPAL】标识要选择的逻辑调色板。【bForceBackground】指定逻辑调色板是否被强制为背景调色板。如果此值为TRUE，则RealizePalette函数


-------------------------------------------------------- KeyGTK3Win32SendAsyncProc ----
SendAsyncProc    SendAsyncProc函数是一个应用程序定义的回调函数，当调用SendMessageCallback函数时，操作系统调用该函数。系统在将消息传递到目标窗口过程后，将消息传递给回调函数。类型为SENDASYNCPROC的值是指向此类函数的指针。
语法
参数
【HWND】标识窗口程序接收到消息的窗口。如果SendMessageCallback函数的【HWND】参数设置为HWND_BROADCAST，则操作系统会为每个顶级窗口调用一次SendAsy


-------------------------------------------------------- KeyGTK3Win32SendDlgItemMessage ----
SendDlgItemMessage    SendDlgItemMessage函数在对话框中向指定的控件发送消息。
语法
参数
【hDlg】标识包含控件的对话框。【nIDDlgItem】指定接收消息的控件的标识符。【消息】指定要发送的消息。【wParam中】指定附加的消息特定信息。【lParam的】指定附加的消息特定


-------------------------------------------------------- KeyGTK3Win32SendMessage ----
SendMessage    SendMessage函数将指定的消息发送到窗口或窗口。该函数调用指定窗口的窗口过程，并且在窗口过程处理该消息之前不返回。相反，PostMessage函数将消息发布到线程的消息队列，并立即返回。
语法
参数
【的hWnd】标识窗口程序将接收消息的窗口。如果此参数为HWND_BROADCAST，则会将消息发送到系统中的所有顶级窗口，包括禁用或不可见的未知窗口，重叠窗口和弹出窗口;但消息不会发送到子


-------------------------------------------------------- KeyGTK3Win32SendMessageCallback ----
SendMessageCallback    SendMessageCallback函数将指定的消息发送到窗口或窗口。该函数调用指定窗口的窗口过程并立即返回。窗口过程处理消息后，系统调用指定的回调函数，将消息处理的结果和应用程序定义的值传递给回调函数。
语法
参数
【的hWnd】标识窗口程序将接收消息的窗口。如果此参数为HWND_BROADCAST，则会将消息发送到系统中的所有顶级窗口，包括禁用或不可见的未知窗口，重叠窗口和弹出窗口;但消息不会发送到子


-------------------------------------------------------- KeyGTK3Win32SendMessageTimeout ----
SendMessageTimeout    SendMessageTimeout函数将指定的消息发送到窗口或窗口。该函数调用指定窗口的窗口过程，如果指定的窗口属于不同的线程，则在窗口过程已处理该消息或指定的超时期限过去之前不会返回。如果接收到该消息的窗口属于与当前线程相同的队列，则直接调用窗口过程__忽略超时值。
语法
参数
【的hWnd】标识窗口程序将接收消息的窗口。如果此参数为HWND_TOPMOST，则会将消息发送到系统中的所有顶级窗口，包括禁用或不可见的未知窗口。【消息】指定要发送的消息。【wParam中


-------------------------------------------------------- KeyGTK3Win32SendNotifyMessage ----
SendNotifyMessage    SendNotifyMessage函数将指定的消息发送到窗口。如果窗口是由调用线程创建的，SendNotifyMessage调用该窗口的窗口过程，直到窗口过程处理该消息才返回。如果窗口由不同的线程创建，SendNotifyMessage将消息传递到窗口过程并立即返回;它不等待窗口过程来完成处理消息。
语法
参数
【的hWnd】标识窗口程序将接收消息的窗口。如果此参数为HWND_BROADCAST，则会将消息发送到系统中的所有顶级窗口，包括禁用或不可见的未知窗口，重叠窗口和弹出窗口;但消息不会发送到子


-------------------------------------------------------- KeyGTK3Win32ServiceMain ----
ServiceMain    ServiceMain函数是服务进程指定为特定服务的入口点函数的函数。该函数可以有任何应用程序定义的名称。
语法
参数
【dwArgc】指定【lpszArgv】数组中的参数数。【lpszArgv】指向指向以null结尾的参数字符串的指针数组。数组中的第一个参数是服务的名称，后续参数是由调用StartServi


-------------------------------------------------------- KeyGTK3Win32SetAbortProc ----
SetAbortProc    SetAbortProc函数设置应用程序定义的中止函数，允许在假脱机期间取消打印作业。此函数替代SETABORTPROC打印机转义。
语法
参数
【HDC】标识打印作业的设备上下文。【lpAbortProc】指向应用程序定义的中止函数。有关回调函数的更多信息，请参阅AbortProc回调函数。
返回值
如果函数成功，返回值大于零。


-------------------------------------------------------- KeyGTK3Win32SetAclInformation ----
SetAclInformation    SetAclInformation函数设置有关访问控制列表（ACL）的信息。
语法
参数
【ACL】指向ACL结构。该函数设置此ACL中的信息。【pAclInformation】指向包含要设置的信息的缓冲区。对于当前版本的Windows NT，这必须是ACL_REVISION_I


-------------------------------------------------------- KeyGTK3Win32SetActiveWindow ----
SetActiveWindow    SetActiveWindow函数激活一个窗口。
语法
参数
【的hWnd】标识要激活的顶级窗口。
返回值
如果函数成功，则返回值是以前激活的窗口的句柄。
描述
SetActiveWindow函数激活一个窗口，但是如果应用程序在后台，则不会启用


-------------------------------------------------------- KeyGTK3Win32SetArcDirection ----
SetArcDirection    SetArcDirection设置用于圆弧和矩形函数的绘图方向。
语法



-------------------------------------------------------- KeyGTK3Win32SetBitmapBits ----
SetBitmapBits    SetBitmapBits函数将位图的颜色数据位设置为指定值。
语法
参数
【骨形态发生蛋白】标识要设置的位图。【cBytes】指定【LP位元ca】参数指向的字节数。【LP位元ca】指向包含指定位图的颜色数据的字节数组。
返回值
如果函数成功，则返回值是用于设置


-------------------------------------------------------- KeyGTK3Win32SetBitmapDimensionEx ----
SetBitmapDimensionEx    SetBitmapDimensionEx函数将优选的尺寸分配给位图。这些尺寸可以由应用程序使用;但是，它们不被Windows使用。
语法
参数
【HBITMAP】标识位图。位图不能是DIB部分位图。【nWidth】指定位图的宽度（以0.1毫米为单位）。【nHeight参数】指定位图的高度（以0.1毫米为单位）。【lpsiz到】指向S


-------------------------------------------------------- KeyGTK3Win32SetBkColor ----
SetBkColor    SetBkColor函数将当前背景颜色设置为指定的颜色值，如果设备无法表示指定的颜色值，则将其设置为最近的物理颜色。
语法
参数
【HDC】标识设备上下文。【crColor】指定新的背景颜色。
返回值
如果函数成功，则返回值将前一个背景颜色指定为COLORREF值。如果函数失败，返回值为CLR_INVALID。



-------------------------------------------------------- KeyGTK3Win32SetBkMode ----
SetBkMode    SetBkMode函数设置指定设备上下文的后台混合模式。背景混合模式与文本，阴影画笔和不是实线的笔式样一起使用。
语法
参数
【HDC】标识设备上下文。【iBkMode】指定背景模式。此参数可以是以下值之一：值描述OPAQUE在绘制文本，阴影画笔或钢笔之前，背景填充当前的背景颜色。TRANSPARENT背景保持不变


-------------------------------------------------------- KeyGTK3Win32SetBoundsRect ----
SetBoundsRect    SetBoundsRect函数控制指定设备上下文的边界矩形信息的累积。Windows可以维护所有绘图操作的边界矩形。应用程序可以检查并设置此矩形。绘图边界对于无效位图缓存非常有用。
语法
参数
【HDC】标识要累积边界矩形的设备上下文。【lprcBounds】指向RECT结构，用于设置边界矩形。矩形尺寸为逻辑坐标。此参数可以为NULL。【旗】指定新矩形如何与累积的矩形组合。此参数可


-------------------------------------------------------- KeyGTK3Win32SetBrushOrgEx ----
SetBrushOrgEx    SetBrushOrgEx函数将GDI指定给应用程序选择的【下一个】画笔的画笔原点设置到指定的设备上下文中。
语法
参数
【HDC】标识设备上下文。【nXOrg】指定新笔刷原点的设备单位的x坐标。如果该值大于画笔宽度，则使用模数运算符（【nXOrg】 mod画笔宽度）减小其值。【nYOrg】指定新笔刷原点的设备


-------------------------------------------------------- KeyGTK3Win32SetCapture ----
SetCapture    SetCapture函数将鼠标捕获设置为属于当前线程的指定窗口。一旦窗口捕获了鼠标，所有的鼠标输入都被定向到该窗口，无论光标是否在该窗口的边框内。一次只能有一个窗口可以捕获鼠标。如果鼠标光标位于由另一个线程创建的窗口上，系统将只有在鼠标按钮关闭时才将鼠标输入到指定的窗口。
语法
参数
【的hWnd】标识当前线程中捕获鼠标的窗口。
返回值
如果函数成功，则返回值是先前捕获鼠标的窗口的句柄。如果没有这样的窗口，则返回值为NULL。
描述
只有前景窗口才能捕获鼠标。当后


-------------------------------------------------------- KeyGTK3Win32SetCaretBlinkTime ----
SetCaretBlinkTime    SetCaretBlinkTime函数将插入符号闪烁时间设置为指定的毫秒数。闪烁时间是反转插入符号所需的经过时间（以毫秒为单位）。
语法
参数
【uMSeconds】指定新的闪烁时间（以毫秒为单位）。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
用


-------------------------------------------------------- KeyGTK3Win32SetCaretPos ----
SetCaretPos    SetCaretPos函数将插入符移动到指定的坐标。如果使用CS_OWNDC类样式创建拥有插入符号的窗口，则指定的坐标将受到与该窗口关联的设备上下文的映射模式的约束。
语法
参数
【X】指定插入符号的新x坐标。【Y】指定插入符的新y坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述



-------------------------------------------------------- KeyGTK3Win32SetClassLong ----
SetClassLong    SetClassLong函数将指定偏移处的指定的32位（长）值替换为指定窗口所属类的额外类存储器或WNDCLASS结构。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【参数nIndex】指定要替换的32位值。要在额外的类内存中设置一个32位值，请指定要设置的值的正零，基于零的字节偏移量。有效值范围为零，通过


-------------------------------------------------------- KeyGTK3Win32SetClassWord ----
SetClassWord    SetClassWord函数将指定偏移处的16位（字）值替换为指定窗口所属的窗口类的额外类内存。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【参数nIndex】指定要替换的值的基于零的字节偏移量。有效值范围为零，通过类内存的字节数减去2;例如，如果您指定了10个或更多字节的额外类内


-------------------------------------------------------- KeyGTK3Win32SetClipboardData ----
SetClipboardData    SetClipboardData函数将数据以指定的剪贴板格式放置在剪贴板上。该窗口必须是当前的剪贴板所有者，应用程序必须调用OpenClipboard函数。（当回复WM_RENDERFORMAT和WM_RENDERALLFORMATS消息时，剪贴板所有者在致电SetClipboardData之前不得致电OpenClipboard）。
语法
参数
【UFormat】指定剪贴板格式。此参数可以是注册格式或以下备注部分中列出的任何标准剪贴板格式。有关注册剪贴板格式的信息，请参阅RegisterClipboardFormat函数。【HMEM


-------------------------------------------------------- KeyGTK3Win32SetClipboardViewer ----
SetClipboardViewer    SetClipboardViewer函数将指定的窗口添加到剪贴板查看器链。每当剪贴板的内容发生变化时，剪贴板查看器窗口将收到WM_DRAWCLIPBOARD消息。
语法
参数
【hWndNewViewer】标识要添加到剪贴板链的窗口。
返回值
如果函数成功，则返回值标识剪贴板查看器链中的下一个窗口。如果发生错误或剪贴板查看器链中没有其他窗口，则返回值为NULL


-------------------------------------------------------- KeyGTK3Win32SetColorAdjustment ----
SetColorAdjustment    SetColorAdjustment函数使用指定的值设置设备上下文的颜色调整值。
语法
参数
【HDC】标识设备上下文。【LPCA】指向包含颜色调整值的COLORADJUSTMENT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用G


-------------------------------------------------------- KeyGTK3Win32SetColorSpace ----
SetColorSpace    SetColorSpace函数设置指定设备上下文的颜色空间，定义CIE XYZ空间中逻辑RGB空间的端点。
语法
参数
【HDC】处理设备上下文。【hColorSpace】处理逻辑色彩空间。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyGTK3Win32SetCommBreak ----
SetCommBreak    SetCommBreak函数暂停指定通信设备的字符传输，并将传输线路置于中断状态，直到调用ClearCommBreak函数为止。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描


-------------------------------------------------------- KeyGTK3Win32SetCommConfig ----
SetCommConfig    [Now Supported on Windows NT]SetCommConfig函数设置通信设备的当前配置。
语法
参数
【hCommDev】标识开放的通信设备。【lpCC】指向COMMCONFIG结构。【的dwSize】指定【lpCC】指向的结构的大小（以字节为单位）。
返回值
如果函数成功，返回值不为零


-------------------------------------------------------- KeyGTK3Win32SetCommMask ----
SetCommMask    SetCommMask函数指定要监视通信设备的一组事件。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【dwEvtMask】指定要启用的事件。值为零将禁用所有事件。此参数可以是以下值的组合：值含义EV_BREAK输入时检测到中断


-------------------------------------------------------- KeyGTK3Win32SetCommState ----
SetCommState    SetCommState函数根据设备控制块（DCB结构）中的规格配置通信设备。该函数重新初始化所有硬件和控制设置，但不会清空输出或输入队列。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【lpDCB】指向DCB结构，其中包含指定通信设备的配置信息。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为


-------------------------------------------------------- KeyGTK3Win32SetCommTimeouts ----
SetCommTimeouts    SetCommTimeouts函数设置指定通信设备上所有读取和写入操作的超时参数。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【lpCommTimeouts】指向包含新的超时值的COMMTIMEOUTS结构。
返回值
如果函数成功，返回值不为零。如


-------------------------------------------------------- KeyGTK3Win32SetComputerName ----
SetComputerName    SetComputerName函数设置下次重新启动系统时使用的计算机名称。
语法
参数
【lpComputerName】指向一个空值终止的字符串，指定下一次启动计算机时计算机名称的名称。该名称不得超过MAX_COMPUTERNAME_LENGTH个字符。Windows 95：如


-------------------------------------------------------- KeyGTK3Win32SetConsoleActiveScreenBuffer ----
SetConsoleActiveScreenBuffer    SetConsoleActiveScreenBuffer函数将指定的屏幕缓冲区设置为当前显示的控制台屏幕缓冲区。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
控制


-------------------------------------------------------- KeyGTK3Win32SetConsoleCP ----
SetConsoleCP    SetConsoleCP函数设置与调用进程相关联的控制台使用的输入代码页。控制台使用其输入代码页将键盘输入转换为相应的字符值。
语法
参数
【wCodePageID】指定要设置的代码页的标识符。本地计算机上可用的代码页的标识符将以以下密钥存储在注册表中。HKEY_LOCAL_MACHINE\SYSTEM\CurrentContr


-------------------------------------------------------- KeyGTK3Win32SetConsoleCtrlHandler ----
SetConsoleCtrlHandler    SetConsoleCtrlHandler函数从调用进程的处理函数列表中添加或删除应用程序定义的HandlerRoutine函数。如果没有指定处理程序函数，则该函数设置一个可继承属性，该属性确定调用进程是否忽略CTRL + C信号。
语法
参数
【HandlerRoutine】指向应用程序定义的HandlerRoutine函数添加或删除。此参数可以为NULL。【加】指定是否从处理程序列表中添加或删除【HandlerRoutine】参


-------------------------------------------------------- KeyGTK3Win32SetConsoleCursorInfo ----
SetConsoleCursorInfo    SetConsoleCursorInfo函数设置指定控制台屏幕缓冲区的游标的大小和可见性。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【lpConsoleCursorInfo】指向CONSOLE_CURSOR_INFO结构，其


-------------------------------------------------------- KeyGTK3Win32SetConsoleCursorPosition ----
SetConsoleCursorPosition    SetConsoleCursorPosition函数在指定的控制台屏幕缓冲区中设置光标位置。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【dwCursorPosition】指定包含新光标位置的COORD结构。坐标是屏幕缓冲区字符


-------------------------------------------------------- KeyGTK3Win32SetConsoleMode ----
SetConsoleMode    SetConsoleMode函数设置控制台输入缓冲区的输入模式或控制台屏幕缓冲区的输出模式。
语法
参数
【hConsoleHandle】标识控制台输入缓冲区或屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【dwMode】指定要设置的输入或输出模式。如果【hConsoleHandle】


-------------------------------------------------------- KeyGTK3Win32SetConsoleOutputCP ----
SetConsoleOutputCP    SetConsoleOutputCP函数设置与调用进程关联的控制台使用的输出代码页。控制台使用其输出代码页将由各种输出函数写入的字符值转换为控制台窗口中显示的图像。
语法
参数
【wCodePageID】指定要设置的代码页的标识符。本地计算机上可用的代码页的标识符将以以下密钥存储在注册表中。HKEY_LOCAL_MACHINE\SYSTEM\CurrentContr


-------------------------------------------------------- KeyGTK3Win32SetConsoleScreenBufferSize ----
SetConsoleScreenBufferSize    SetConsoleScreenBufferSize函数可以更改指定的控制台屏幕缓冲区的大小。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【的dwSize】指定包含屏幕缓冲区的行和列的新大小的COORD结构。指定的宽度和高度不能小


-------------------------------------------------------- KeyGTK3Win32SetConsoleTextAttribute ----
SetConsoleTextAttribute    SetConsoleTextAttribute函数设置由WriteFile或WriteConsole函数写入屏幕缓冲区的字符的前景（文本）和背景颜色属性，或由ReadFile或ReadConsole函数回显。此函数仅影响函数调用后写入的文本。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_READ权限。【wAttributes】指定前景色和背景颜色属性。可以指定以下值的任意组合：FOREGROU


-------------------------------------------------------- KeyGTK3Win32SetConsoleTitle ----
SetConsoleTitle    SetConsoleTitle函数设置当前控制台窗口的标题栏字符串。
语法
参数
【lpConsoleTitle】指向一个以null结尾的字符串，其中包含要显示在控制台窗口的标题栏中的字符串。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错


-------------------------------------------------------- KeyGTK3Win32SetConsoleWindowInfo ----
SetConsoleWindowInfo    SetConsoleWindowInfo函数设置控制台屏幕缓冲区窗口的当前大小和位置。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【bAbsolute】指定如何使用【lpConsoleWindow】参数指向的结构中的坐标。


-------------------------------------------------------- KeyGTK3Win32SetCurrentDirectory ----
SetCurrentDirectory    SetCurrentDirectory函数更改当前进程的当前目录。
语法
参数
【lpPathName】指向一个以null结尾的字符串，指定新的当前目录的路径。该参数可以是相对路径或完全限定路径。在任一情况下，计算指定目录的完全限定路径并将其存储为当前目录。
返回值



-------------------------------------------------------- KeyGTK3Win32SetCursor ----
SetCursor    SetCursor函数建立光标形状。
语法
参数
【HCURSORpt】标识光标。光标必须由CreateCursor创建或由LoadCursor或LoadImage函数加载。如果此参数为NULL，则将光标从屏幕中删除。Windows 95：


-------------------------------------------------------- KeyGTK3Win32SetCursorPos ----
SetCursorPos    SetCursorPos函数将光标移动到指定的屏幕坐标。如果新坐标不在最新的ClipCursor函数设置的屏幕矩形内，Windows会自动调整坐标，使光标停留在矩形内。
语法
参数
【X】指定光标的屏幕坐标中的新x坐标。【Y】指定光标的屏幕坐标中的新y坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastErr


-------------------------------------------------------- KeyGTK3Win32SetDebugErrorLevel ----
SetDebugErrorLevel    SetDebugErrorLevel函数设置Windows将生成调试事件的最小错误级别，并将其传递给调试器。
语法



-------------------------------------------------------- KeyGTK3Win32SetDefaultCommConfig ----
SetDefaultCommConfig    [Now Supported on Windows NT]SetDefaultCommConfig函数设置通信设备的默认配置。
语法
参数
【lpszName】指向指定设备名称的以null结尾的字符串。【lpCC】指向COMMCONFIG结构。如果此参数为NULL，则将默认配置设置为设备驱动程序的默认值。【的dwSize】指定【


-------------------------------------------------------- KeyGTK3Win32SetDeviceGammaRamp ----
SetDeviceGammaRamp    SetDeviceGammaRamp函数设置直接彩色显示板上的伽玛斜坡。
语法
参数
【HDC】处理设备上下文。【lpRamp】指向一组256字节元素的三个数组。这些数组是帧缓冲器和DAC值之间的颜色值之间的映射。第一个数组是红色，下一个是绿色，最后一个是蓝色。
返回值



-------------------------------------------------------- KeyGTK3Win32SetDIBColorTable ----
SetDIBColorTable    SetDIBColorTable函数在当前选定到指定设备上下文的与设备无关的位图（DIB）的颜色表中的条目范围内设置RGB（红，绿，蓝）颜色值。
语法
参数
【HDC】指定设备上下文。必须在设备上下文中选择与设备无关的位图。【uStartIndex】基于零的颜色表索引，指定要设置的第一个颜色表条目。【cEntries】指定要设置的颜色表条目数。【


-------------------------------------------------------- KeyGTK3Win32SetDIBits ----
SetDIBits    SetDIBits函数使用指定的与设备无关的位图（DIB）中找到的颜色数据设置位图中的像素。
语法
参数
【HDC】标识设备上下文。【骨形态发生蛋白】使用指定DIB的颜色数据标识要更改的位图。【uStartScan】指定由【lpvBits】参数指向的阵列中与设备无关的颜色数据的起始扫描行。【cS


-------------------------------------------------------- KeyGTK3Win32SetDIBitsToDevice ----
SetDIBitsToDevice    SetDIBitsToDevice函数使用来自设备无关位图（DIB）的颜色数据设置与目标设备上下文关联的设备上指定矩形中的像素。
语法
参数
【HDC】标识设备上下文。【XDest】指定目标矩形左上角的x坐标（以逻辑为单位）。【YDest】指定目标矩形左上角的y坐标（以逻辑为单位）。【dwWidthmt】指定DIB的逻辑单位宽度。


-------------------------------------------------------- KeyGTK3Win32SetDlgItemInt ----
SetDlgItemInt    SetDlgItemInt函数将对话框中的控件的文本设置为指定整数值的字符串表示形式。
语法
参数
【hDlg】标识包含控件的对话框。【nIDDlgItem】指定要更改的控件。【uValue】指定用于生成项目文本的整数值。【bSigned】指定【uValue】参数是否已签名或无符号。如果此


-------------------------------------------------------- KeyGTK3Win32SetDlgItemText ----
SetDlgItemText    SetDlgItemText函数在对话框中设置控件的标题或文本。
语法
参数
【hDlg】标识包含控件的对话框。【nIDDlgItem】标识要设置的标题或文本的控件。【lpString】指向包含要复制到控件的文本的以null结尾的字符串。
返回值
如果函数成功，返


-------------------------------------------------------- KeyGTK3Win32SetDoubleClickTime ----
SetDoubleClickTime    SetDoubleClickTime函数设置鼠标的双击时间。双击是一系列两次点击鼠标按钮，第二次发生在第一个指定的时间之后。双击时间是双击的第一次和第二次点击之间可能发生的最大毫秒数。
语法
参数
【// double-click interval】指定双击第一次和第二次点击之间可能发生的毫秒数。如果此参数设置为零，Windows将使用默认双击500毫秒的时间。
返回值
如果函数成


-------------------------------------------------------- KeyGTK3Win32SetEndOfFile ----
SetEndOfFile    SetEndOfFile函数将指定文件的文件末尾（EOF）位置移动到文件指针的当前位置。
语法
参数
【HFILE】标识文件以使其EOF位置移动。必须使用GENERIC_WRITE访问该文件创建文件句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，


-------------------------------------------------------- KeyGTK3Win32SetEnhMetaFileBits ----
SetEnhMetaFileBits    SetEnhMetaFileBits函数从提供的数据创建基于内存的增强格式的元文件。
语法
参数
【cbBuffer】指定所提供数据的大小（以字节为单位）。【的lpData】指向包含增强型图元文件数据的缓冲区。（假设通过调用GetEnhMetaFileBits函数获得缓冲区中的数据。）



-------------------------------------------------------- KeyGTK3Win32SetEntriesInAcl ----
SetEntriesInAcl    [New - Windows NT]SetEntriesInAcl函数通过将新的访问控制或审计控制信息合并到现有的ACL中来创建新的访问控制列表（ACL）。
语法
参数
【cCountOfExplicitEntries】在【pListOfExplicitEntries数组。】中指定EXPLICIT_ACCESS结构的数量【pListOfExplicitEnt


-------------------------------------------------------- KeyGTK3Win32SetEnvironmentVariable ----
SetEnvironmentVariable    SetEnvironmentVariable函数设置当前进程的环境变量的值。
语法
参数
【lpName】指向一个以null结尾的字符串，指定其值正在设置的环境变量。操作系统创建环境变量（如果不存在），并且【lpValue】不为空。【lpValue】指向包含指定环境变量的新值的以


-------------------------------------------------------- KeyGTK3Win32SetErrorMode ----
SetErrorMode    SetErrorMode函数控制操作系统处理多种严重错误的方式。您可以指定操作系统将处理这些错误或应用程序将接收和处理它们。
语法



-------------------------------------------------------- KeyGTK3Win32SetEvent ----
SetEvent    SetEvent函数将指定的事件对象的状态设置为发信号。
语法
参数
【活动】标识事件对象。CreateEvent或OpenEvent函数返回此句柄。Windows NT：句柄必须有EVENT_MODIFY_STATE访问权限。有关详细信息，请参阅进程间同步对


-------------------------------------------------------- KeyGTK3Win32SetFileApisToANSI ----
SetFileApisToANSI    SetFileApisToANSI函数导致一组Win32文件函数使用ANSI字符集代码页。此函数对于8位控制台输入和输出操作非常有用。
语法
参数
此函数无参数。
返回值
该函数没有返回值。
描述
SetFileApisToANSI函数补充了SetFileApisToOEM函数，这使得同一组Win32文件函数使用OEM字符集代码


-------------------------------------------------------- KeyGTK3Win32SetFileApisToOEM ----
SetFileApisToOEM    SetFileApisToOEM函数使一组Win32文件函数使用OEM字符集代码页。此函数对于8位控制台输入和输出操作非常有用。
语法
参数
此函数无参数。
返回值
该函数没有返回值。
描述
SetFileApisToOEM函数由SetFileApisToANSI函数补充，导致同一组Win32文件函数使用ANSI字符集代码


-------------------------------------------------------- KeyGTK3Win32SetFileAttributes ----
SetFileAttributes    SetFileAttributes函数设置文件的属性。
语法
参数
【lpFileName】指向一个字符串，指定要设置其属性的文件的名称。Windows 95：此字符串不得超过MAX_PATH个字符。Windows NT： MAX_PATH字符的路径的默认字


-------------------------------------------------------- KeyGTK3Win32SetFilePointer ----
SetFilePointer    SetFilePointer函数移动打开文件的文件指针。
语法
参数
【HFILE】标识文件指针要移动的文件。必须使用GENERIC_READ或GENERIC_WRITE访问该文件创建文件句柄。【lDistanceToMove】指定移动文件指针的字节数。正值将


-------------------------------------------------------- KeyGTK3Win32SetFileSecurity ----
SetFileSecurity    SetFileSecurity函数设置文件或目录对象的安全性。
语法
参数
【lpFileName】指向以空值终止的字符串，指定设置了安全性的文件或目录。【SecurityInformation】指定SECURITY_INFORMATION结构，标识由【pSecur


-------------------------------------------------------- KeyGTK3Win32SetFileTime ----
SetFileTime    SetFileTime函数设置文件创建，上次访问或上次修改的日期和时间。
语法
参数
【HFILE】标识要设置日期和时间的文件。必须使用GENERIC_WRITE访问该文件创建文件句柄。【lpCreationTime】指向包含创建文件的日期和时间的FILETIME结构。如果应


-------------------------------------------------------- KeyGTK3Win32SetFocus ----
SetFocus    SetFocus函数将键盘焦点设置为指定的窗口。窗口必须与调用线程的消息队列相关联。
语法
参数
【的hWnd】标识将接收键盘输入的窗口。如果此参数为NULL，则将忽略击键。
返回值
如果函数成功，则返回值是以前具有键盘焦点的窗口的句柄。如果【的hWnd】参数无效或窗口与调用线程的消


-------------------------------------------------------- KeyGTK3Win32SetForegroundWindow ----
SetForegroundWindow    SetForegroundWindow函数将创建指定窗口的线程放入前台并激活该窗口。键盘输入指向窗口，并为用户更改各种视觉提示。
语法
参数
【的hWnd】标识应该被激活并被带到前台的窗口。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
前台窗口是


-------------------------------------------------------- KeyGTK3Win32SetForm ----
SetForm    SetForm函数设置指定打印机的表单信息。
语法
参数
【hPrinter】标识设置表单信息的打印机。【pFormName】指向以空值终止的字符串，指定表单信息设置的表单名称。【水平】指定【P成型】指向的结构的版本。此值必须为1。【P成型】指向F


-------------------------------------------------------- KeyGTK3Win32SetGraphicsMode ----
SetGraphicsMode    SetGraphicsMode函数设置指定设备上下文的图形模式。
语法
参数
【HDC】标识设备上下文。【iMode平台】指定图形模式。此参数可以是以下值之一：值含义GM_COMPATIBLE设置与Windows 3.1版兼容的图形模式。这是默认模式。如果指定了此值，


-------------------------------------------------------- KeyGTK3Win32SetHandleCount ----
SetHandleCount    SetHandleCount函数设置可用于进程的文件句柄数。此函数在Windows NT和Windows 95下无效，因为这些平台上的应用程序没有明确的文件句柄限制。在Win32s下，默认情况下只有20个文件句柄可用于进程;但是您可以使用SetHandleCount来允许进程最多使用255个文件句柄。
语法



-------------------------------------------------------- KeyGTK3Win32SetHandleInformation ----
SetHandleInformation    SetHandleInformation函数设置对象句柄的某些属性。信息被指定为一组位标志。
语法
参数
【hObject】指定对象的句柄。SetHandleInformation函数设置与此对象句柄相关联的信息。【dwMask】指定要更改的位标志的掩码。使用与【dwFlags中】描述相同的标志


-------------------------------------------------------- KeyGTK3Win32SetICMMode ----
SetICMMode    SetICMMode函数启用或禁用指定设备上下文的图像颜色匹配。
语法



-------------------------------------------------------- KeyGTK3Win32SetICMProfile ----
SetICMProfile    SetICMProfile函数设置指定设备上下文的颜色配置文件。
语法
参数
【HDC】处理设备上下文。【lpFileName】指向以空字符结尾的字符串的指针，用于命名颜色配置文件。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyGTK3Win32SetJob ----
SetJob    SetJob函数在指定的打印机上暂停，恢复，取消或重新启动打印作业。您还可以使用SetJob函数来设置打印作业参数，例如打印作业优先级和文档名称。
语法
参数
【hPrinter】处理感兴趣的打印机对象。【JobId】指定打印作业的标识符。通过调用AddJob函数或StartDoc函数获取打印作业标识符。Windows NT：如果【水平】参数设置为


-------------------------------------------------------- KeyGTK3Win32SetKernelObjectSecurity ----
SetKernelObjectSecurity    SetKernelObjectSecurity函数设置内核对象的安全性。例如，这可以是进程，线程或事件。
语法
参数
【处理】标识设置了安全信息的内核对象。【SecurityInformation】指定SECURITY_INFORMATION结构，标识由【SecurityDescriptor】参数指向的安全


-------------------------------------------------------- KeyGTK3Win32SetKeyboardState ----
SetKeyboardState    SetKeyboardState函数将256字节的键盘键状态数组复制到调用线程的键盘输入状态表中。这与GetKeyboardState和GetKeyState函数访问的表格相同。对此表的更改不会影响到任何其他线程的键盘输入。
语法
参数
【lpKeyState】指向包含键盘键状态的256字节数组。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述



-------------------------------------------------------- KeyGTK3Win32SetLastError ----
SetLastError    SetLastError函数设置调用线程的最后一个错误代码。
语法
参数
【dwErrCode】指定线程的最后一个错误代码。
描述
错误代码是32位值（位31是最高有效位）。位29保留用于应用程序定义的错误代码;没有Win32 API错误代码已经设置了这一位。


-------------------------------------------------------- KeyGTK3Win32SetLastErrorEx ----
SetLastErrorEx    SetLastErrorEx函数设置最后一个错误代码。在Windows 95和Windows NT中，此函数与SetLastError函数相同。第二个参数未实现。
语法
参数
【dwErrCode】指定线程的最后一个错误代码。【dwType】指定错误类型。如果此过程由调试过程控制，调试器可能会根据错误类型执行操作。此参数可以具有以下值之一：值含义SLE_ERROR


-------------------------------------------------------- KeyGTK3Win32SetLocaleInfo ----
SetLocaleInfo    SetLocaleInfo函数设置一个区域设置信息项。它通过在语言环境表的过程部分中创建一个条目来实现。此设置仅影响用户覆盖区域设置的部分;它不设置系统默认值。此函数只能设置某些类型的区域设置信息，或LCTYPE值。有关LCTYPE值的列表，请参见以下注释部分。在Unicode（W）版本的函数中，区域设置信息始终以空值终止的Unicode字符串形式传递，并作为ANSI（A）版本中的以null结尾的ANSI字符串。此函数不允许使用整数;任何数值必须指定为Unicode或ANSI文本。每个LCTYPE都有一个特定的格式，如区域标识符所述。
语法
参数
【语言环境】指定函数将设置的信息的区域设置。【LCType】指定要由函数设置的区域设置信息的类型。请注意，每个呼叫只能指定一个LCTYPE.并非所有LCTYPE值都有效;请参阅以下备注部分中


-------------------------------------------------------- KeyGTK3Win32SetLocalTime ----
SetLocalTime    SetLocalTime函数设置当前的本地时间和日期。
语法
参数
【lpSystemTime】指向包含当前本地日期和时间的SYSTEMTIME结构。SYSTEMTIME结构的wDayOfWeek成员将被忽略。
返回值
如果函数成功，返回值不为零。如果函


-------------------------------------------------------- KeyGTK3Win32SetMailslotInfo ----
SetMailslotInfo    SetMailslotInfo函数设置指定邮槽使用的读取操作的超时值。
语法
参数
【hMailslot】标识一个邮槽。CreateMailslot函数必须创建此句柄。【lReadTimeout】指定在超时发生之前，读取操作可以等待消息写入邮槽的时间（以毫秒为单位）。以下值


-------------------------------------------------------- KeyGTK3Win32SetMapMode ----
SetMapMode    SetMapMode函数设置指定设备上下文的映射模式。映射模式定义了用于将页面空间单元转换为设备空间单元的度量单位，还定义了设备的x轴和y轴的方向。
语法
参数
【HDC】标识设备上下文。【fnMapMode】指定新的映射模式。它可以是以下值之一：值描述MM_ANISOTROPIC逻辑单位通过任意缩放的轴映射到任意单位。使用SetWindowExtE


-------------------------------------------------------- KeyGTK3Win32SetMapperFlags ----
SetMapperFlags    SetMapperFlags函数更改字体映射器将逻辑字体映射到物理字体时使用的算法。
语法
参数
【HDC】标识包含font-mapper标志的设备上下文。【dwFlag】指定字体映射器是否应尝试将字体的宽高比与当前设备的宽高比相匹配。如果设置了位零，则映射器仅选择匹配的字体。
返回值


-------------------------------------------------------- KeyGTK3Win32SetMenu ----
SetMenu    SetMenu函数将一个新菜单分配给指定的窗口。
语法
参数
【的hWnd】标识要分配菜单的窗口。【HMENU】标识新菜单。如果此参数为NULL，则会删除该窗口的当前菜单。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错


-------------------------------------------------------- KeyGTK3Win32SetMenuContextHelpId ----
SetMenuContextHelpId    SetMenuContextHelpId函数将帮助上下文标识符与菜单相关联。菜单中的所有项共享此标识符。无法将帮助上下文标识符附加到单个菜单项。
语法
参数
【HMENU】处理到与帮助上下文标识相关联的菜单。【dwContextHelpId】帮助上下文标识符。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyGTK3Win32SetMenuDefaultItem ----
SetMenuDefaultItem    [Now Supported on Windows NT]SetMenuDefaultItem函数设置指定菜单的默认菜单项。
语法
参数
【HMENU】处理菜单以设置默认项目。【藤】新的默认菜单项的标识符或位置，或 - 默认选项为 -  1。该参数的含义取决于【fByPos】的值。【fByPos】指定【藤】的含义的值。如果此参


-------------------------------------------------------- KeyGTK3Win32SetMenuItemBitmaps ----
SetMenuItemBitmaps    SetMenuItemBitmaps函数将指定的位图与菜单项相关联。无论菜单项是选中还是取消选中，Windows将在菜单项旁边显示相应的位图。
语法
参数
【HMENU】标识包含要接收新的复选标记位图的项目的菜单。【uPositionbs】指定要更改的菜单项，由【uFlags】参数确定。【uFlags】指定如何解释【uPositionbs】参数


-------------------------------------------------------- KeyGTK3Win32SetMenuItemInfo ----
SetMenuItemInfo    [Now Supported on Windows NT]SetMenuItemInfo函数可更改有关菜单项的信息。
语法
参数
【HMENU】处理包含菜单项的菜单。【藤】要更改的菜单项的标识符或位置。该参数的含义取决于【fByPosition】的值。【fByPosition】指定【藤】的含义的值。如果此参数为FALS


-------------------------------------------------------- KeyGTK3Win32SetMessageExtraInfo ----
SetMessageExtraInfo    SetMessageExtraInfo函数设置当前线程的额外消息信息。附加消息信息是与当前线程的消息队列相关联的应用程序或驱动程序定义的32位值。应用程序可以使用GetMessageExtraInfo函数来检索线程的额外消息信息。
语法
参数
【lParam的】指定与当前线程相关联的32位值。
返回值
返回值是先前的32位值。



-------------------------------------------------------- KeyGTK3Win32SetMessageQueue ----
SetMessageQueue  SetMessageQueue函数已过时。此函数仅适用于16位版本的Windows的兼容性。此函数在Win32平台上不起作用，因为根据需要动态展开消息队列。


-------------------------------------------------------- KeyGTK3Win32SetMetaFileBitsEx ----
SetMetaFileBitsEx    SetMetaFileBitsEx函数从提供的数据创建一个基于内存的Windows格式的元文件。提供此函数以兼容早期版本的Microsoft Windows。基于Win32的应用程序应使用SetEnhMetaFileBits函数。
语法
参数
【服务提供商】指定Windows格式图元文件的大小（以字节为单位）。【的lpData】指向包含Windows格式图元文件的缓冲区。（假设通过使用GetMetaFileBitsEx函数获得数据


-------------------------------------------------------- KeyGTK3Win32SetMetaRgn ----
SetMetaRgn    SetMetaRgn函数与指定设备上下文的当前剪切区域与当前的区域相交，并将组合区域保存为指定设备上下文的新区域。剪辑区域将重置为零区域。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值指定新的裁剪区域的复杂度，并且可以是以下值之一：值含义NULLREGION区域是空的SIMPLEREGION区域是单个矩形。CO


-------------------------------------------------------- KeyGTK3Win32SetMiterLimit ----
SetMiterLimit    SetMiterLimit函数设置指定设备上下文的斜接连接长度的限制。
语法
参数
【HDC】标识设备上下文。【eNewLimit】指定设备上下文的新斜角限制。【peOldLimit】指向接收上一个斜度限制的浮点值。如果此参数为NULL，则不会返回上一个斜度限制。
返回值


-------------------------------------------------------- KeyGTK3Win32SetNamedPipeHandleState ----
SetNamedPipeHandleState    SetNamedPipeHandleState函数设置指定命名管道的读取模式和阻塞模式。如果指定的句柄是指向命名管道的客户端，并且如果命名管道服务器进程在远程计算机上，则该函数也可用于控制本地缓冲。
语法
参数
【hNamedPipe】标识命名的管道实例。此参数可以由CreateNamedPipe函数返回的管道的服务器端的句柄，或CreateFile函数返回的管道的客户端。句柄必须具有对命名管道的G


-------------------------------------------------------- KeyGTK3Win32SetPaletteEntries ----
SetPaletteEntries    SetPaletteEntries函数在逻辑调色板的一系列条目中设置RGB（红，绿，蓝）颜色值和标志。
语法
参数
【HPAL】标识逻辑调色板。【ISTART】指定要设置的第一个逻辑调色板条目。【cEntries】指定要设置的逻辑调色板条目数。【LPPE】指向包含RGB值和标志的PALETTEENTRY结


-------------------------------------------------------- KeyGTK3Win32SetParent ----
SetParent    SetParent函数更改指定子窗口的父窗口。
语法
参数
【hWndChild】标识子窗口。【hWndNewParent】标识新的父窗口。如果此参数为NULL，则桌面窗口将变为新的父窗口。
返回值
如果函数成功，则返回值是上一个父窗口的句柄。如


-------------------------------------------------------- KeyGTK3Win32SetPixel ----
SetPixel    SetPixel函数将指定坐标处的像素设置为指定的颜色。
语法
参数
【HDC】标识设备上下文。【X】指定要设置的点的x坐标，以逻辑单位表示。【Y】指定要设置的点的y坐标，以逻辑单位表示。【crColor】指定用于绘制点的颜色。
返回值
如果函数成功，则返


-------------------------------------------------------- KeyGTK3Win32SetPixelV ----
SetPixelV    SetPixelV函数将指定坐标处的像素设置为指定颜色的最接近的近似值。该点必须在裁剪区域和设备表面的可见部分。
语法
参数
【HDC】标识设备上下文。【X】指定要设置的点的x坐标，以逻辑单位表示。【Y】指定要设置的点的y坐标，以逻辑单位表示。【crColor】指定用于绘制点的颜色。
返回值
如果函数成功，返回


-------------------------------------------------------- KeyGTK3Win32SetPolyFillMode ----
SetPolyFillMode    SetPolyFillMode函数设置填充多边形的函数的多边形填充模式。
语法
参数
【HDC】标识设备上下文。【iPolyFillMode】指定新的填充模式。此参数可以是以下值之一：值含义ALTERNATE选择交替模式（填充每个扫描线上奇数和偶数多边形边之间的区域）。WIN


-------------------------------------------------------- KeyGTK3Win32SetPort ----
SetPort    [New - Windows NT]SetPort函数设置与打印机端口相关联的状态。
语法
参数
【PNAME】指向零终止字符串的指针，该字符串指定端口连接到的打印机服务器的名称。如果端口在本地机器上，则将此参数设置为NULL。【pPortName】指向指定打印机端口名称的零终止字符串的


-------------------------------------------------------- KeyGTK3Win32SetPrinter ----
SetPrinter    SetPrinter函数通过暂停打印，恢复打印或清除所有打印作业来设置指定打印机的状态。该函数也可用于设置打印机数据。
语法
参数
【hPrinter】处理感兴趣的打印机【水平】Windows 95：指定【pPrinter】中包含的数据类型。该参数必须为0,2,3,4或5。如果【命令】不等于零，则此参数必须为零。Wind


-------------------------------------------------------- KeyGTK3Win32SetPrinterData ----
SetPrinterData    SetPrinterData函数设置打印机的配置数据。
语法
参数
【hPrinter】标识应设置配置数据的打印机。【pValueName】指向一个以null结尾的字符串，指定要设置的数据类型。【类型】指定要作为值的数据存储的信息的类型。此参数可以是以下值之


-------------------------------------------------------- KeyGTK3Win32SetPriorityClass ----
SetPriorityClass    SetPriorityClass函数设置指定进程的优先级。该值与进程的每个线程的优先级值一起确定每个线程的基本优先级。
语法
参数
【hProcess】标识过程。Windows NT：句柄必须具有PROCESS_SET_INFORMATION权限。有关详细信息，请参阅过程对象.【dwPriorityClass】指定进程的


-------------------------------------------------------- KeyGTK3Win32SetPrivateObjectSecurity ----
SetPrivateObjectSecurity    SetPrivateObjectSecurity函数修改私有对象的安全描述符。
语法
参数
【SecurityInformation】指定SECURITY_INFORMATION结构，标识由【ModificationDescriptor】参数指向的安全描述符的内容。【Modific


-------------------------------------------------------- KeyGTK3Win32SetProcessAffinityMask ----
SetProcessAffinityMask    [New - Windows NT]SetProcessAffinityMask函数为指定进程的线程设置处理器关联掩码。过程关联掩码是一个位向量，其中每个位表示允许进程的线程运行的处理器。过程相关性掩码的值必须是由GetProcessAffinityMask函数获取的掩码值的正确子集。
语法
参数
【hProcess】处理过程的句柄，其亲和力屏蔽函数集。该句柄必须具有PROCESS_SET_INFORMATION权限。有关详细信息，请参阅过程对象.【dwProcessAffinityM


-------------------------------------------------------- KeyGTK3Win32SetProcessPriorityBoost ----
SetProcessPriorityBoost    [New - Windows NT]SetProcessPriorityBoost函数禁用Windows NT临时提升指定进程的线程优先级的函数。
语法
参数
【hProcess】处理过程。该句柄必须具有PROCESS_SET_INFORMATION权限。有关详细信息，请参阅过程对象.【DisablePriorityBoost】一个用于设置优先级提


-------------------------------------------------------- KeyGTK3Win32SetProcessShutdownParameters ----
SetProcessShutdownParameters    SetProcessShutdownParameters函数设置当前调用进程的关闭参数。此函数为进程设置相对于系统中其他进程的关机顺序。
语法
参数
【//原子或字符串的地址】指定进程相对于系统中其他进程的关闭优先级。该系统关闭从高【//原子或字符串的地址】值到低的进程。最高和最低的关闭优先级保留给系统组件。此参数必须在以下值范围内：值含


-------------------------------------------------------- KeyGTK3Win32SetProcessWindowStation ----
SetProcessWindowStation    SetProcessWindowStation函数将一个窗口站分配给调用进程。这使得进程能够访问窗口站中的对象，如桌面，剪贴板和全局原子。窗口站上的所有后续操作都使用授予【hWinSta】的访问权限。
语法
参数
【hWinSta】标识要分配给呼叫进程的窗口站。该句柄由CreateWindowStation和OpenWindowStation函数返回。
返回值
如果函数成功，返回值不为零。如果函数


-------------------------------------------------------- KeyGTK3Win32SetProcessWorkingSetSize ----
SetProcessWorkingSetSize    SetProcessWorkingSetSize函数设置指定进程的最小和最大工作集大小。进程的工作集是物理RAM内存中进程可见的一组内存页。这些页面是驻留的，可供应用程序使用，而不会触发页面错误。进程的工作集的大小以字节为单位指定。最小和最大工作集大小影响进程的虚拟内存分页行为。
语法
参数
【hProcess】将设置其工作集大小的进程的打开句柄。Windows NT：句柄必须具有PROCESS_SET_QUOTA访问权限。有关详细信息，请参阅过程对象.【dwMinimumWor


-------------------------------------------------------- KeyGTK3Win32SetProp ----
SetProp    SetProp函数添加一个新条目或更改指定窗口的属性列表中的现有条目。如果列表中不存在指定的字符串，该函数将向列表中添加一个新条目。新条目包含字符串和句柄。否则，该函数将使用指定的句柄替换字符串的当前句柄。
语法
参数
【的hWnd】标识属性列表接收到新条目的窗口。【lpString】指向一个空值终止的字符串或包含一个标识字符串的原子。如果这个参数是一个原子，它必须是由前一次调用GlobalAddAtom函


-------------------------------------------------------- KeyGTK3Win32SetRect ----
SetRect    SetRect函数设置指定矩形的坐标。这相当于将左，上，右和底参数分配给RECT结构的相应成员。
语法
参数
【LPRC】指向包含要设置的矩形的RECT结构。【xLeft】指定矩形左上角的x坐标。【的y topsv】指定矩形左上角的y坐标。【Xright确定】指定矩形右下角的x坐标。【// 底部】指


-------------------------------------------------------- KeyGTK3Win32SetRectEmpty ----
SetRectEmpty    SetRectEmpty函数创建一个空矩形，其中所有坐标都设置为零。
语法
参数
【LPRC】指向包含矩形坐标的RECT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32SetRectRgn ----
SetRectRgn    SetRectRgn函数将区域更改为具有指定坐标的矩形区域。
语法
参数
【HRGN】识别该地区。【nLeftRect】指定矩形区域左上角的x坐标。【nTopRect】指定矩形区域左上角的y坐标。【nRightRect】指定矩形区域右下角的x坐标。【nBottom


-------------------------------------------------------- KeyGTK3Win32SetROP2 ----
SetROP2    SetROP2函数设置当前前台混合模式。GDI使用前景混合模式，将已填充对象的笔和内部结合到已经在屏幕上的颜色。前景混合模式定义如何组合来自画笔或笔的颜色和现有图像中的颜色。
语法
参数
【HDC】标识设备上下文。【fnDrawMode】指定新的混合模式。此参数可以是以下值之一：混合模式描述R2_BLACK像素始终为0。R2_COPYPEN像素是笔的颜色。R2_MASKNOT


-------------------------------------------------------- KeyGTK3Win32SetScrollInfo ----
SetScrollInfo    SetScrollInfo函数设置滚动条的参数，包括最小和最大滚动位置，页面大小和滚动框（拇指）的位置。如果需要，该函数也会重绘滚动条。
语法
参数
【HWND】根据【fnBar】参数的值，标识滚动条控件或具有标准滚动条的窗口。【fnBar】指定要设置参数的滚动条的类型。此参数可以是以下值之一：值含义SB_CTL设置滚动条控件的参数。【H


-------------------------------------------------------- KeyGTK3Win32SetScrollPos ----
SetScrollPos    SetScrollPos函数将滚动条（拇指）的位置设置在指定的滚动条中，如果需要，重新绘制滚动条以反映滚动条的新位置。提供SetScrollPos函数以与Windows 3兼容。【x】.基于Win32的应用程序应使用SetScrollInfo函数。
语法
参数
【的hWnd】根据【NBAR】参数的值，标识滚动条控件或具有标准滚动条的窗口。【NBAR】指定要设置的滚动条。此参数可以是以下值之一：值含义SB_CTL在滚动条控件中设置滚动框的位置。【的h


-------------------------------------------------------- KeyGTK3Win32SetScrollRange ----
SetScrollRange    SetScrollRange函数设置指定滚动条的最小和最大位置值。它也可用于隐藏或显示标准滚动条。SetScrollRange函数用于与Windows 3兼容。【x】.基于Win32的应用程序应使用SetScrollInfo函数。
语法
参数
【的hWnd】根据【NBAR】参数的值，标识滚动条控件或带有标准滚动条的窗口。【NBAR】指定要设置的滚动条。此参数可以是以下值之一：值含义SB_CTL设置滚动条控件的范围。【的hWnd】参


-------------------------------------------------------- KeyGTK3Win32SetSecurityDescriptorDacl ----
SetSecurityDescriptorDacl    SetSecurityDescriptorDacl函数在自由访问控制列表（ACL）中设置信息。如果安全描述符中已经存在自由ACL，则会被替换。
语法
参数
【pSecurityDescriptor】指向函数添加自由ACL的SECURITY_DESCRIPTOR结构。此安全描述符必须为绝对格式，这意味着其成员必须是指向其他结构的指针，而不是对连续


-------------------------------------------------------- KeyGTK3Win32SetSecurityDescriptorGroup ----
SetSecurityDescriptorGroup    SetSecurityDescriptorGroup函数设置绝对格式安全描述符的主组信息，替换已经存在于安全描述符中的任何主组信息。
语法
参数
【pSecurityDescriptor】指向由此函数设置其主组的SECURITY_DESCRIPTOR结构。该函数将使用新的主组替换任何现有的主组。【PGROUP】指向SID结构的函数集作


-------------------------------------------------------- KeyGTK3Win32SetSecurityDescriptorOwner ----
SetSecurityDescriptorOwner    SetSecurityDescriptorOwner函数设置绝对格式安全描述符的所有者信息。它替换已经存在于安全描述符中的所有者信息。
语法
参数
【pSecurityDescriptor】指向由此函数设置其所有者的SECURITY_DESCRIPTOR结构。该函数将替换任何现有的拥有者与新的所有者。【pOwner】指向SID结构的函数


-------------------------------------------------------- KeyGTK3Win32SetSecurityDescriptorSacl ----
SetSecurityDescriptorSacl    SetSecurityDescriptorSacl函数在系统访问控制列表（ACL）中设置信息。如果安全描述符中已经存在系统ACL，则会被替换。
语法
参数
【pSecurityDescriptor】指向函数添加系统ACL的SECURITY_DESCRIPTOR结构。此安全描述符必须为绝对格式，这意味着其成员必须是指向其他结构的指针，而不是对连续


-------------------------------------------------------- KeyGTK3Win32SetSecurityInfo ----
SetSecurityInfo    [New - Windows NT]SetSecurityInfo函数在指定对象的安全描述符中设置指定的安全信息。调用者通过句柄识别对象。
语法
参数
【处理】用于设置安全信息的对象的句柄。【ObjectType】指定SE_OBJECT_TYPE枚举中指示由【处理】参数标识的对象类型的值。【SecurityInfo】一组SECURITY_I


-------------------------------------------------------- KeyGTK3Win32SetServiceBits ----
SetServiceBits    SetServiceBits函数将服务的服务类型与服务控制管理器和服务器服务注册。然后，服务器服务可以将注册的服务类型公布为当前支持的类型。LAN Manager函数NetServerGetInfo和NetServerEnum获取指定的机器支持的服务类型。服务类型表示为一组位标志; SetServiceBits函数设置或清除这些位标志的组合。
语法
参数
【hServiceStatus】服务控制管理员的服务状态信息结构的句柄。服务通过调用RegisterServiceCtrlHandler函数获取SERVICE_STATUS_HANDLE值。


-------------------------------------------------------- KeyGTK3Win32SetServiceObjectSecurity ----
SetServiceObjectSecurity    SetServiceObjectSecurity函数设置服务对象的安全描述符。
语法
参数
【hService】标识服务。该句柄由OpenService或CreateService函数返回。此句柄所需的访问取决于【dwSecurityInformation】参数中指定的安全信息。【


-------------------------------------------------------- KeyGTK3Win32SetServiceStatus ----
SetServiceStatus    SetServiceStatus函数可更新主叫服务的服务控制管理员的状态信息。
语法
参数
【hServiceStatus~】指定当前服务的服务控制管理器状态信息结构的句柄。该句柄由RegisterServiceCtrlHandler函数返回。【lpServiceStatus】指向


-------------------------------------------------------- KeyGTK3Win32SetStdHandle ----
SetStdHandle    SetStdHandle函数用于设置标准输入，标准输出或标准错误设备的句柄。后续调用GetStdHandle函数可以使用指定的句柄来引用输入，输出或错误设备。
语法
参数
【nStdHandle】指定要设置的句柄。此参数可以具有以下值之一：值含义STD_INPUT_HANDLE标准输入手柄STD_OUTPUT_HANDLE标准输出手柄STD_ERROR_HAN


-------------------------------------------------------- KeyGTK3Win32SetStretchBltMode ----
SetStretchBltMode    SetStretchBltMode函数设置指定设备上下文中的位图拉伸模式。
语法
参数
【HDC】标识设备上下文。【iStretchMode】指定拉伸模式。它可以是以下值之一：值描述BLACKONWHITE使用已消除和现有像素的颜色值执行布尔AND运算。如果位图是单色位图，则此


-------------------------------------------------------- KeyGTK3Win32SetSwapAreaSize ----
SetSwapAreaSize  SetSwapAreaSize函数已过时。此函数仅用于与16位版本的Windows兼容。它在32位环境中没有任何意义。


-------------------------------------------------------- KeyGTK3Win32SetSysColors ----
SetSysColors    SetSysColors函数设置一个或多个显示元素的颜色。显示元素是窗口的各个部分和显示在系统显示屏幕上的Windows显示。
语法
参数
【//要更改的元素数量】指定【// address of array of elements】参数指向的数组中的显示元素数。【// address of array of elements】


-------------------------------------------------------- KeyGTK3Win32SetSysModalWindow ----
SetSysModalWindow  SetSysModalWindow函数已过时。此函数仅用于与16位版本的Windows兼容。新的输入模型不允许System Modal窗口。


-------------------------------------------------------- KeyGTK3Win32SetSystemCursor ----
SetSystemCursor    SetSystemCursor函数用【HCUR】指定的游标的内容替换【id】指定的系统游标的内容，然后销毁【HCUR】.此函数允许应用程序自定义系统光标。
语法
参数
【HCUR】处理光标。该函数将由【HCUR】处理的光标的内容替换【id】指定的系统光标的内容。然后该函数通过调用DestroyCursor（【HCURSORpt】）来销毁【HCUR】.【id


-------------------------------------------------------- KeyGTK3Win32SetSystemPaletteUse ----
SetSystemPaletteUse    SetSystemPaletteUse函数允许应用程序指定系统调色板是否包含2或20个静态颜色。默认系统调色板包含20个静态颜色。（当应用程序实现逻辑调色板时，无法更改静态颜色。）
语法
参数
【HDC】标识设备上下文。此设备上下文必须引用支持调色板的设备。【uUsage】指定系统调色板的新用法。此参数可以是以下值之一：值含义SYSPAL_NOSTATIC系统调色板包含两种静态颜色


-------------------------------------------------------- KeyGTK3Win32SetSystemPowerState ----
SetSystemPowerState    SetSystemPowerState函数通过关闭电源来暂停系统。根据【ForceFlag】参数，该函数可以在此之前立即暂停运行或请求所有应用程序和设备驱动程序的权限。
语法
参数
【Suspension technique.】悬挂技术en如果为TRUE，系统将暂停使用RAM存活技术。否则，暂停使用hibernate技术。【fForce】强制停牌。如果为TRUE，则该函


-------------------------------------------------------- KeyGTK3Win32SetSystemTime ----
SetSystemTime    SetSystemTime函数设置当前系统的时间和日期。系统时间以协调世界时（UTC）表示。
语法
参数
【lpSystemTime】指向包含当前系统日期和时间的SYSTEMTIME结构。SYSTEMTIME结构的wDayOfWeek成员将被忽略。
返回值
如果函数成功，返回值不为零。如果函


-------------------------------------------------------- KeyGTK3Win32SetSystemTimeAdjustment ----
SetSystemTimeAdjustment    SetSystemTimeAdjustment函数告诉系统启用或禁用对其时钟时钟的周期性时间调整。这种时间调整用于将时间与其他一些时间信息源进行同步。当启用周期性时间调整时，它们在每个时钟中断时被应用。
语法
参数
【dwTimeAdjustment】指定如果启用周期性时间调整，则在每个时钟中断时间添加到时钟时钟的100纳秒单位数。【bTimeAdjustmentDisabled】指定系统使用的时间调整


-------------------------------------------------------- KeyGTK3Win32SetTapeParameters ----
SetTapeParameters    SetTapeParameters函数指定磁带的块大小或配置磁带设备。
语法
参数
【hDevice】标识要设置配置信息的设备。该句柄是通过使用CreateFile函数创建的。【// preparation method】指定要设置的信息类型。此参数必须是以下值之一：值描述


-------------------------------------------------------- KeyGTK3Win32SetTapePosition ----
SetTapePosition    SetTapePosition设置指定设备上的磁带位置。
语法
参数
【hDevice】标识要设置磁带位置的设备。该句柄是通过使用CreateFile函数创建的。【dwPositionMethod】指定要执行的定位类型。此参数必须是以下值之一：值含义TAPE_


-------------------------------------------------------- KeyGTK3Win32SetTextAlign ----
SetTextAlign    SetTextAlign函数设置指定设备上下文的文本对齐标志。
语法
参数
【HDC】标识设备上下文。【FMODE】通过使用以下列表中的值的掩码来指定文本对齐。只有一个标志可以从影响水平和垂直对齐的那些标志中选出。另外，只能改变当前位置的两个标志之一。值含义TA_B


-------------------------------------------------------- KeyGTK3Win32SetTextCharacterExtra ----
SetTextCharacterExtra    SetTextCharacterExtra函数设置字符间距。当Windows写入一行文本时，会将字符间距添加到每个字符，包括中断字符。
语法
参数
【HDC】标识设备上下文。【nCharExtra】指定要添加到每个字符的逻辑单位的额外空间量。如果当前映射模式不是MM_TEXT，则【nCharExtra】参数将被转换并舍入为最近的像素。



-------------------------------------------------------- KeyGTK3Win32SetTextColor ----
SetTextColor    SetTextColor函数将指定设备上下文的文本颜色设置为指定的颜色。
语法
参数
【HDC】标识设备上下文。【crColor】指定文本的颜色。
返回值
如果函数成功，则返回值是上一个文本颜色的颜色引用。如果函数失败，返回值为CLR_INVALID。要获取扩展错误信息，


-------------------------------------------------------- KeyGTK3Win32SetTextJustification ----
SetTextJustification    SetTextJustification函数指定Windows应添加到文本字符串中的中断字符的空间量。当应用程序调用{??989796011}或ExtTextOut函数时，将添加空格。
语法
参数
【HDC】标识设备上下文。【nBreakExtra】指定要添加到文本行的逻辑单位的总额外空间。如果当前映射模式不是MM_TEXT，则【nBreakExtra】参数标识的值将被转换并舍入为最近


-------------------------------------------------------- KeyGTK3Win32SetThreadAffinityMask ----
SetThreadAffinityMask    SetThreadAffinityMask函数为指定线程设置处理器关联掩码。线程相关性掩码是一个位向量，其中每个位表示允许线程运行的处理器。线程关联掩码必须是线程的包含进程的进程关联掩码的正确子集。线程只允许在其进程允许运行的处理器上运行。
语法
参数
【hThread】线程的句柄，其亲和力掩码的函数集。Windows NT：此句柄必须具有与之相关联的THREAD_SET_INFORMATION访问权限。有关详细信息，请参阅线程对象.【dw


-------------------------------------------------------- KeyGTK3Win32SetThreadContext ----
SetThreadContext    SetThreadContext函数设置指定线程中的上下文。
语法
参数
【hThread】标识要写入上下文的线程的打开句柄。Windows NT：句柄必须对线程具有THREAD_SET_CONTEXT访问权限。有关详细信息，请参阅线程对象.【lpContext】


-------------------------------------------------------- KeyGTK3Win32SetThreadDesktop ----
SetThreadDesktop    SetThreadDesktop函数将一个桌面分配给调用线程。桌面上的所有后续操作都使用授予【//分配给该线程的桌面的句柄】的访问权限。
语法
参数
【//分配给该线程的桌面的句柄】标识要分配给调用线程的桌面。该句柄由CreateDesktop，GetThreadDesktop和OpenDesktop函数返回。如果调用线程在其当前桌面上有


-------------------------------------------------------- KeyGTK3Win32SetThreadIdealProcessor ----
SetThreadIdealProcessor    [New - Windows NT]SetThreadIdealProcessor函数用于为线程指定首选处理器。系统可能在其首选处理器上调度线程。
语法
参数
【hThread】处理要设置其优选处理器的线程。句柄必须具有与之相关联的THREAD_SET_INFORMATION访问权限。有关详细信息，请参阅线程对象.【dwIdealProcessor


-------------------------------------------------------- KeyGTK3Win32SetThreadLocale ----
SetThreadLocale    SetThreadLocale函数设置调用线程当前的区域设置。
语法
参数
【语言环境】指定调用线程的新区域设置。此参数可以是由MAKELCID宏或以下预定义值之一创建的区域设置标识符：LOCALE_SYSTEM_DEFAULT默认系统区域设置。LOCALE_USE


-------------------------------------------------------- KeyGTK3Win32SetThreadPriority ----
SetThreadPriority    SetThreadPriority函数设置指定线程的优先级值。该值与线程进程的优先级类一起确定线程的基本优先级。
语法
参数
【hThread】标识要设置优先级值的线程。Windows NT：句柄必须具有与之相关联的THREAD_SET_INFORMATION访问权限。有关详细信息，请参阅线程对象.【优先】指定线程


-------------------------------------------------------- KeyGTK3Win32SetThreadPriorityBoost ----
SetThreadPriorityBoost    [New - Windows NT]SetThreadPriorityBoost函数禁用Windows NT临时提升线程优先级的函数。
语法
参数
【hThread】处理优先级提升的线程。该线程必须具有与之相关联的THREAD_SET_INFORMATION访问权限。有关详细信息，请参阅线程对象.【DisablePriorityBoos


-------------------------------------------------------- KeyGTK3Win32SetThreadToken ----
SetThreadToken    SetThreadToken函数为线程分配假冒令牌。该函数还可能导致线程停止使用模拟令牌。
语法
参数
【线】指向函数分配模拟令牌的线程的句柄。如果【线】为NULL，则该函数会将模拟令牌分配给调用线程。【代币】模拟令牌的打开句柄分配给线程。必须使用TOKEN_IMPERSONATE访问权限打开


-------------------------------------------------------- KeyGTK3Win32SetTimer ----
SetTimer    SetTimer函数创建一个具有指定超时值的定时器。
语法
参数
【的hWnd】标识与定时器关联的窗口。该窗口必须由调用线程拥有。如果此参数为NULL，则不会与定时器关联窗口，并忽略【nIDEvent】参数。【nIDEvent】指定非零计时器标识符。如果【


-------------------------------------------------------- KeyGTK3Win32SetTimeZoneInformation ----
SetTimeZoneInformation    SetTimeZoneInformation函数设置当前时区参数。这些参数控制从协调世界时（UTC）到本地时间的转换。
语法
参数
【lpTimeZoneInformation】指向TIME_ZONE_INFORMATION结构，其中包含要设置的时区参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零


-------------------------------------------------------- KeyGTK3Win32SetTokenInformation ----
SetTokenInformation    SetTokenInformation函数设置指定访问令牌的各种类型的信息。其设置的信息将替换现有信息。调用进程必须具有设置信息的适当访问权限。
语法
参数
【TokenHandle】标识要设置信息的访问令牌。【TokenInformationClass】指定TOKEN_INFORMATION_CLASS枚举类型的变量，标识函数集的信息类型。来自


-------------------------------------------------------- KeyGTK3Win32SetUnhandledExceptionFilter ----
SetUnhandledExceptionFilter    SetUnhandledExceptionFilter函数允许应用程序取代Win32放置在每个线程和进程顶部的顶级异常处理程序。调用此函数后，如果在未调试的进程中发生异常，并且异常会使其返回到Win32未处理的异常过滤器，该过滤器将调用【lpTopLevelExceptionFilter】参数指定的异常过滤器函数。
语法
参数
【lpTopLevelExceptionFilter】提供顶级异常过滤器函数的地址，只要UnhandledExceptionFilter 函数获得控制，该进程将被调用，并且进程未被调试。此参


-------------------------------------------------------- KeyGTK3Win32SetupComm ----
SetupComm    SetupComm函数初始化指定通信设备的通信参数。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【dwInQueue】指定设备内部输入缓冲区的推荐大小（以字节为单位）。【dwOutQueue】指定设备内部输出缓冲区的推荐大


-------------------------------------------------------- KeyGTK3Win32SetupHookProc ----
SetupHookProc    一个SetupHookProc挂接过程是一个应用程序定义或库定义的回调过程，与打印设置公共对话框一起使用。挂钩过程接收默认对话框过程的消息或通知。
语法
参数
【hdlg】处理打印设置公共对话框窗口，消息的目的是。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息。具体含义取决于【uiMsg】参数的值。【lParam的】指


-------------------------------------------------------- KeyGTK3Win32SetUserObjectInformation ----
SetUserObjectInformation    SetUserObjectInformation函数设置有关窗口站或桌面对象的信息。
语法
参数
【hObjhr】标识要设置对象信息的窗口台或桌面对象。该值可以是HDESK或HWINSTA句柄（例如，CreateWindowStation OpenWindowStation，Create


-------------------------------------------------------- KeyGTK3Win32SetUserObjectSecurity ----
SetUserObjectSecurity    SetUserObjectSecurity函数设置用户对象的安全性。这可以是例如窗口或DDE对话。
语法
参数
【hObjhr】标识设置了安全信息的用户对象。【pSIRequested】指向SECURITY_INFORMATION结构，描述正在设置的安全信息。【pSID】指向包含新安全信息的SECUR


-------------------------------------------------------- KeyGTK3Win32SetViewportExtEx ----
SetViewportExtEx    SetViewportExtEx函数通过使用指定的值设置设备上下文的视口的水平和垂直范围。
语法
参数
【HDC】标识设备上下文。【nXExtent】指定视口的水平范围（以设备为单位）。【nYExtent】指定视口的垂直范围（以设备为单位）。【lpsiz到】指向SIZE结构。以前的视口范围（以


-------------------------------------------------------- KeyGTK3Win32SetViewportOrgEx ----
SetViewportOrgEx    SetViewportOrgEx函数通过使用指定的坐标设置设备上下文的视口原点。
语法
参数
【HDC】标识设备上下文。【X】指定新视口原点的设备单位的x坐标。【Y】指定新视口原点的以y为单位的y坐标。【LPPOINT】指向POINT结构。以前的视口原点（在设备坐标中）放置在此结构中


-------------------------------------------------------- KeyGTK3Win32SetVolumeLabel ----
SetVolumeLabel    SetVolumeLabel函数设置文件系统卷的标签。
语法
参数
【lpRootPathName】指向一个以null结尾的字符串，指定文件系统卷的根目录。这是函数标签的音量。如果此参数为NULL，则使用当前目录的根。【lpVolumeName】指向指定卷名


-------------------------------------------------------- KeyGTK3Win32SetWaitableTimer ----
SetWaitableTimer    [New - Windows NT]SetWaitableTimer函数激活指定的“等待”定时器。当到达时间到达时，定时器发出信号，设置定时器的线程调用可选的完成例程。
语法
参数
【hTimer】标识定时器对象。CreateWaitableTimer或OpenWaitableTimer函数返回此句柄。【pDueTime】指定何时将定时器的状态设置为发信号，以100纳秒


-------------------------------------------------------- KeyGTK3Win32SetWindowContextHelpId ----
SetWindowContextHelpId    SetWindowContextHelpId函数将帮助上下文标识符与指定的窗口相关联。
语法
参数
【HWND】处理到与其关联帮助上下文标识符的窗口。【dwContextHelpId】帮助上下文标识符。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
如果子窗


-------------------------------------------------------- KeyGTK3Win32SetWindowExtEx ----
SetWindowExtEx    SetWindowExtEx函数通过使用指定的值设置设备上下文的窗口的水平和垂直范围。
语法
参数
【HDC】标识设备上下文。【nXExtent】以逻辑单位指定窗口的水平范围。【nYExtent】以逻辑单位指定窗口的垂直范围。【lpsiz到】指向SIZE结构。以前的窗口范围（以逻辑单位）放


-------------------------------------------------------- KeyGTK3Win32SetWindowLong ----
SetWindowLong    SetWindowLong函数更改指定窗口的属性。该函数还将指定偏移量的32位（长）值设置为窗口的额外窗口存储器。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【参数nIndex】指定要设置的值的基于零的偏移量。有效值的范围为零，通过额外的窗口内存的字节数减去4;例如，如果指定了12个或更多字节的额外


-------------------------------------------------------- KeyGTK3Win32SetWindowOrgEx ----
SetWindowOrgEx    SetWindowOrgEx函数使用指定的坐标设置设备上下文的窗口原点。
语法
参数
【HDC】标识设备上下文。【X】指定新窗口原点的逻辑x坐标。【Y】指定新窗口原点的逻辑y坐标。【LPPOINT】指向POINT结构。窗口的以前的起源放在这个结构中。如果【LPPOINT】为N


-------------------------------------------------------- KeyGTK3Win32SetWindowPlacement ----
SetWindowPlacement    SetWindowPlacement函数设置指定窗口的显示状态和还原，最小化和最大化的位置。
语法
参数
【的hWnd】标识窗口。【lpwndplel，LATN】指向WINDOWPLACEMENT结构，指定新的显示状态和窗口位置。在致电SetWindowPlacement之前，将WINDOWPL


-------------------------------------------------------- KeyGTK3Win32SetWindowPos ----
SetWindowPos    SetWindowPos函数可以更改小孩，弹出式窗口或顶级窗口的大小，位置和Z顺序。孩子，弹出窗口和顶级窗口根据屏幕上的外观进行排序。最顶层的窗口接收到最高等级，是Z顺序中的第一个窗口。
语法
参数
【的hWnd】标识窗口。【hWndInsertAfter】标识Z定位窗口之前的窗口。此参数必须是窗口句柄或以下值之一：值含义HWND_BOTTOM将窗口放在Z顺序的底部。如果【的hWnd】参


-------------------------------------------------------- KeyGTK3Win32SetWindowRgn ----
SetWindowRgn    SetWindowRgn函数设置窗口的窗口区域。窗口区域确定操作系统允许绘制的窗口内的区域。操作系统不显示位于窗口区域之外的窗口的任何部分
语法
参数
【的hWnd】处理要设置窗口区域的窗口。【HRGN】处理一个地区。该函数将窗口的窗口区域设置为该区域。如果【HRGN】为NULL，则该函数将窗口区域设置为NULL。【bRedraw】布尔值，


-------------------------------------------------------- KeyGTK3Win32SetWindowsHook ----
SetWindowsHook  SetWindowsHook函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用SetWindowsHookEx函数。


-------------------------------------------------------- KeyGTK3Win32SetWindowsHookEx ----
SetWindowsHookEx    SetWindowsHookEx函数将一个应用程序定义的钩子过程安装到一个钩子链中。应用程序安装挂接过程来监视系统的某些类型的事件。挂钩过程可以监视与特定线程或系统中所有线程相关联的事件。此函数取代SetWindowsHook函数。
语法
参数
【idHook】指定要安装的挂钩过程的类型。此参数可以是以下值之一：值描述WH_CALLWNDPROC在系统将其发送到目标窗口过程之前，安装一个监视消息的挂接过程。有关详细信息，请参阅Cal


-------------------------------------------------------- KeyGTK3Win32SetWindowText ----
SetWindowText    SetWindowText函数可以更改指定窗口标题栏的文本（如果有）。如果指定的窗口是控件，控件的文本将被更改。
语法
参数
【的hWnd】标识要更改其文本的窗口或控件。【lpString】指向要用作新标题或控件文本的以null结尾的字符串。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取


-------------------------------------------------------- KeyGTK3Win32SetWindowWord ----
SetWindowWord    SetWindowWord函数将指定偏移量的16位（字）值替换为指定窗口的额外窗口内存。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【参数nIndex】指定要替换的值的基于零的字节偏移量。窗口存储器的字节数减去2，有效值范围为零;例如，如果您指定了10个或更多字节的额外的窗


-------------------------------------------------------- KeyGTK3Win32SetWinMetaFileBits ----
SetWinMetaFileBits    SetWinMetaFileBits函数将图元文件从较旧的Windows格式转换为新的增强格式，并将新的图元文件存储在内存中。
语法
参数
【cbBuffer】指定包含Windows格式元文件的缓冲区的大小（以字节为单位）。【lpbBuffer】指向包含Windows格式元文件数据的缓冲区。（假设使用GetMetaFileBit


-------------------------------------------------------- KeyGTK3Win32SetWorldTransform ----
SetWorldTransform    SetWorldTransform函数设置指定设备上下文的世界空间和页面空间之间的二维线性转换。此转换可用于缩放，旋转，剪切或翻译图形输出。
语法
参数
【HDC】标识设备上下文。【lpXform】指向包含转换数据的XFORM结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
对于世界空间中的任何坐标（x，y


-------------------------------------------------------- KeyGTK3Win32SHAddToRecentDocs ----
SHAddToRecentDocs    [Now Supported on Windows NT]将文档添加到shell的最近使用的文档列表中，或从列表中清除所有文档。用户通过Windows任务栏的“开始”菜单访问列表。WINSHELLAPI void WINAPI SHAddToRecentDocs（UINT【uFlags】, LPCVOID 【pv】 );



-------------------------------------------------------- KeyGTK3Win32SHAppBarMessage ----
SHAppBarMessage    [Now Supported on Windows NT]向系统发送应用程序栏消息。WINSHELLAPI UINT APIENTRY SHAppBarMessage（laDWORD 【//指向结构的指针】, PAPPBARDATA 【的pData】 );
参数
【//指向结构的指针】要发送的应用程序栏消息的标识符。此参数可以是以下值之一：ABM_ACTIVATE通知系统应用程序栏已被激活。ABM_GETAUTOHIDEBAR检索与屏幕特定边缘相关联


-------------------------------------------------------- KeyGTK3Win32SHBrowseForFolder ----
SHBrowseForFolder    [Now Supported on Windows NT]显示一个对话框，使用户可以选择一个shell文件夹。WINSHELLAPI LPITEMIDLIST WINAPI SHBrowseForFolder（LPBROWSEINFO 【LPBI】 );
参数
【LPBI】指向BROWSEINFO结构的指针，其中包含用于显示对话框的信息。
返回值
返回指向项目标识符列表的指针，该列表指定所选文件夹相对于名称空间根目录的位置。如果用户在对话框中选


-------------------------------------------------------- KeyGTK3Win32SHChangeNotify ----
SHChangeNotify    [Now Supported on Windows NT]通知应用程序执行的事件的系统。如果应用程序执行可能影响shell的操作，应该使用此函数。WINSHELLAPI void WINAPI SHChangeNotify（LONG 【wEventId】, UINT 【uFlags】, LPCVOID 【dwItem2】, LPCVOID 【Array of flags that specifies the events.】 );



-------------------------------------------------------- KeyGTK3Win32ShellAbout ----
ShellAbout    ShellAbout函数显示“Shell关于”对话框。
语法



-------------------------------------------------------- KeyGTK3Win32ShellExecute ----
ShellExecute    ShellExecute函数打开或打印指定的文件。该文件可以是可执行文件或文档文件。另见ShellExecuteEx.
语法
参数
【HWND】指定父窗口。此窗口接收应用程序生成的任何消息框。例如，应用程序可能通过生成消息框来报告错误。【lpOperation】指向指定要执行的操作的以空值结尾的字符串的指针。以下操作字符


-------------------------------------------------------- KeyGTK3Win32ShellExecuteEx ----
ShellExecuteEx    [Now Supported on Windows NT]ShellExecuteEx函数对文件执行操作。该文件可以是可执行文件或文档。
语法
参数
【lpExecInfo】指向SHELLEXECUTEINFO结构的指针，其中包含并接收有关启动应用程序的信息。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错


-------------------------------------------------------- KeyGTK3Win32ShellProc ----
ShellProc    ShellProc挂接过程是一个应用程序定义或库定义的回调函数，shell应用程序用于从系统接收有用的通知。
语法
参数
【NCODE】指定挂钩代码。此参数可以是以下值之一：值含义HSHELL_ACTIVATESHELLWINDOW外壳应激活其主窗口。HSHELL_GETMINRECT仅Windows 95：窗


-------------------------------------------------------- KeyGTK3Win32Shell_NotifyIcon ----
Shell_NotifyIcon    [Now Supported on Windows NT]向系统发送消息，以从任务栏状态区域添加，修改或删除图标。WINSHELLAPI BOOL WINAPI Shell_NotifyIcon（DWORD 【//指向结构的指针】,//消息标识符frPNOTIFYICONDATA 【PNID】//指向结构的指针);



-------------------------------------------------------- KeyGTK3Win32SHFileOperation ----
SHFileOperation    [Now Supported on Windows NT]对文件系统对象执行复制，移动，重命名或删除操作。WINSHELLAPI int WINAPI SHFileOperation（LPSHFILEOPSTRUCT 【lpFileOp】 );
参数
【lpFileOp】指向SHFILEOPSTRUCT结构的指针，其中包含函数执行操作的信息。
返回值
如果发生错误，返回零，否则返回0。



-------------------------------------------------------- KeyGTK3Win32SHFreeNameMappings ----
SHFreeNameMappings    [Now Supported on Windows NT]释放由SHFileOperation函数检索的文件名映射对象。WINSHELLAPI void WINAPI SHFreeNameMappings（;HANDLE 【hNameMappings】 );



-------------------------------------------------------- KeyGTK3Win32SHGetDataFromIDList ----
SHGetDataFromIDList    [Now Supported on Windows NT]ShGetDataFromIDList函数从相对IDList中检索扩展属性数据。
语法



-------------------------------------------------------- KeyGTK3Win32SHGetDesktopFolder ----
SHGetDesktopFolder    [Now Supported on Windows NT]检索桌面文件夹的IShellFolder界面，该文件夹是shell名称空间的根。WINSHELLAPI HRESULT WINAPI SHGetDesktopFolder（LPSHELLFOLDER *【ppshf】 );
参数
【ppshf】接收桌面文件夹的IShellFolder接口指针的地址。呼叫应用程序负责通过调用其发布方法来最终释放接口。
返回值
如果成功返回NOERROR，否则返回OLE定义的错误结果


-------------------------------------------------------- KeyGTK3Win32SHGetFileInfo ----
SHGetFileInfo    [Now Supported on Windows NT]检索有关文件系统中的对象的信息，例如文件，文件夹，目录或驱动器根目录。WINSHELLAPI DWORD WINAPI SHGetFileInfoLPCTSTR 【* PSFI】, DWORD 【dwFileAttributes】, SHFILEINFO FAR 【* PSFI】, UINT 【cbFileInfo】, UINT 【uFlags】 );



-------------------------------------------------------- KeyGTK3Win32SHGetInstanceExplorer ----
SHGetInstanceExplorer    [Now Supported on Windows NT]检索资源管理器的IUnknown界面的地址。WINSHELLAPI HRESULT WINAPI SHGetInstanceExplorer（IUnknown 【ppunk】 );



-------------------------------------------------------- KeyGTK3Win32SHGetMalloc ----
SHGetMalloc    [Now Supported on Windows NT]检索指向shell的IMalloc界面的指针。shell扩展必须使用此接口来分配稍后由shell释放的内存。HRESULT SHGetMallocLPMALLOC 【* ppMalloc】 );



-------------------------------------------------------- KeyGTK3Win32SHGetPathFromIDList ----
SHGetPathFromIDList    [Now Supported on Windows NT]将项目标识符列表转换为文件系统路径。WINSHELLAPI BOOL WINAPI SHGetPathFromIDList（LPCITEMIDLIST 【PIDL】, LPSTR 【* PSFI】 );



-------------------------------------------------------- KeyGTK3Win32SHGetSpecialFolderLocation ----
SHGetSpecialFolderLocation    [Now Supported on Windows NT]检索特殊文件夹的位置。WINSHELLAPI HRESULT WINAPI SHGetSpecialFolderLocation（;HWND 【hwndOwner】, INT 【n文件夹da】, LPITEMIDLIST *【ppidl】 );



-------------------------------------------------------- KeyGTK3Win32SHLoadInProc ----
SHLoadInProc    [Now Supported on Windows NT]从shell进程的上下文中创建指定对象类的实例。WINSHELLAPI HRESULT WINAPI SHLoadInProc（REFCLSID 【rclsid】 );



-------------------------------------------------------- KeyGTK3Win32ShowCaret ----
ShowCaret    ShowCaret函数使插入符在插入符当前位置的屏幕上可见。当插入符可见时，它会自动闪烁。
语法
参数
【的hWnd】标识拥有插入符号的窗口。如果此参数为NULL，则ShowCaret将搜索具有插入符号的窗口的当前任务。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取


-------------------------------------------------------- KeyGTK3Win32ShowCursor ----
ShowCursor    ShowCursor函数显示或隐藏光标。
语法
参数
【bShow】指定内部显示计数器是递增还是递减。如果【bShow】为TRUE，则显示计数增加1。如果【bShow】为FALSE，则显示计数减1。
返回值
返回值指定新的显示计数器。
描


-------------------------------------------------------- KeyGTK3Win32ShowHideMenuCtl ----
ShowHideMenuCtl    ShowHideMenuCtl函数设置或删除指定的菜单项的复选标记属性，并显示或隐藏相应的控件。该函数在指定的菜单项中没有一个复选标记，然后显示相应的控件。如果菜单项已经有复选标记，该函数将删除复选标记并隐藏相应的控件。
语法



-------------------------------------------------------- KeyGTK3Win32ShowOwnedPopups ----
ShowOwnedPopups    ShowOwnedPopups函数显示或隐藏指定窗口所有的所有弹出窗口。
语法
参数
【的hWnd】标识拥有要显示或隐藏的弹出窗口的窗口。【fShow】指定弹出窗口是否显示或隐藏。如果此参数为TRUE，则会显示所有隐藏的弹出窗口。如果此参数为FALSE，则所有可见的弹出窗口都


-------------------------------------------------------- KeyGTK3Win32ShowScrollBar ----
ShowScrollBar    ShowScrollBar函数显示或隐藏指定的滚动条。
语法
参数
【的hWnd】根据【wBar】参数的值标识滚动条控件或带有标准滚动条的窗口。【wBar】指定要显示或隐藏的滚动条。此参数可以是以下值之一：值含义SB_BOTH显示或隐藏窗口的标准水平和垂直滚


-------------------------------------------------------- KeyGTK3Win32ShowWindow ----
ShowWindow    ShowWindow函数设置指定窗口的显示状态。
语法
参数
【的hWnd】标识窗口。【nCmdShow】指定窗口的显示方式。如果启动应用程序的程序提供STARTUPINFO结构，则此应用程序第一次调用ShowWindow时将忽略此参数。否则，第一次调


-------------------------------------------------------- KeyGTK3Win32ShowWindowAsync ----
ShowWindowAsync    [Now Supported on Windows NT]ShowWindowAsync函数设置由不同线程创建的窗口的显示状态。
语法
参数
【的hWnd】标识窗口。【nCmdShow】指定窗口的显示方式。有关可能值的列表，请参阅ShowWindow函数的说明。
返回值
如果窗口以前可见，则返回值不为零。如果窗口以前被隐藏，返


-------------------------------------------------------- KeyGTK3Win32SignalObjectAndWait ----
SignalObjectAndWait    [New - Windows NT]SignalObjectAndWait函数允许调用者以原子方式发送一个对象并等待另一个对象。
语法
参数
【hObjectToSignal】指定要发送信号的对象的句柄。此对象可以是信号量，互斥体或事件。如果句柄是信号量，则需要SEMAPHORE_MODIFY_STATE访问。如果句柄是事件，则需


-------------------------------------------------------- KeyGTK3Win32SizeofResource ----
SizeofResource    SizeofResource函数返回指定资源的大小（以字节为单位）。
语法
参数
【HMODULE】标识可执行文件包含资源的模块。【hResInfo】标识资源。必须使用FindResource或FindResourceEx函数创建此句柄。
返回值
如果函数成功，则返回


-------------------------------------------------------- KeyGTK3Win32Sleep ----
睡眠    睡觉函数暂停执行当前线程指定的时间间隔。VOID睡眠（DWORD dwMilliseconds//以毫秒为单位的休眠时间);
参数
dwMilliseconds指定暂停执行的时间（以毫秒为单位）。值为零会使线程将剩余时间片段放弃准备运行的任何其他具有相同优先级的线程。如果没有其他具有相同优先级的线程准备运行，该函数将立即


-------------------------------------------------------- KeyGTK3Win32SleepEx ----
SleepEx    SleepEx函数使当前线程进入等待状态，直到出现以下情况之一：*调用I / O完成回调函数*异步过程调用（APC）排队等待线程。*经过了超时间隔
语法
参数
【dwMilliseconds】指定延迟发生的时间（以毫秒为单位）。值为零会使函数立即返回。INFINITE的值导致无限延迟。【bAlertable】指定函数是否由于I / O完成回调函数或


-------------------------------------------------------- KeyGTK3Win32SnmpExtensionInit ----
SnmpExtensionInit    可扩展代理调用扩展代理程序DLL中的SnmpExtensionInit函数来执行扩展和可扩展代理的双向初始化。
语法
参数
【dwTimeZeroReference】[in]指定扩展代理的时间零参考。【hPollForTrapEvent】[out]指向事件句柄，当可扩展代理轮询SnmpExtensionTrap函


-------------------------------------------------------- KeyGTK3Win32SnmpExtensionInitEx ----
SnmpExtensionInitEx  SnmpExtensionInitEx函数可识别扩展代理支持的任何其他管理信息库（MIB）子树。可扩展代理在可扩展代理的服务启动期间调用扩展代理DLL中的SnmpExtensionInitEx函数。
语法
参数
【supportedView】[out]指向AsnObjectIdentifier结构的指针，指定扩展代理支持的下一个MIB子树。
返回值
如果【supportedView】参数已使用附


-------------------------------------------------------- KeyGTK3Win32SnmpExtensionQuery ----
SnmpExtensionQuery    可扩展代理程序调用扩展代理程序DLL中的SnmpExtensionQuery函数来解析在一个或多个扩展代理的已注册MIB子树中包含变量的SNMP请求。
语法
参数
【请求类型】[in]指定SNMP请求类型。此参数可以是以下值之一：值含义ASN_RFC1157_GETREQUEST搜索并从指定的变量接收值。ASN_RFC1157_GETNEXTREQUE


-------------------------------------------------------- KeyGTK3Win32SnmpExtensionTrap ----
SnmpExtensionTrap    可扩展代理调用扩展代理DLL中的SnmpExtensionTrap函数来检索扩展代理生成的陷阱。
语法
参数
【企业】[out]指向生成陷阱的源对象的对象标识符。可扩展代理不会释放此变量的内存。【genericTrap】[out]指出通用陷阱的指示。此参数可以是以下值之一：值含义SNMP_GENER


-------------------------------------------------------- KeyGTK3Win32SnmpMgrClose ----
SnmpMgrClose    SnmpMgrClose函数关闭与指定会话关联的通信套接字和数据结构。
语法
参数
【会议】[in]指向内部结构，指定要关闭的会话。
返回值
如果函数成功，返回值为TRUE。如果函数失败，返回值为FALSE。此函数可能会返回Windows Sockets错误代码。



-------------------------------------------------------- KeyGTK3Win32SnmpMgrGetTrap ----
SnmpMgrGetTrap    如果启用了陷阱接收，SnmpMgrGetTrap函数返回未完成的陷阱数据，如果呼叫者未接收到该数据。
语法
参数
【企业】[out]指向生成SNMP陷阱的企业的对象标识符。【IPAddress】[out]指向生成SNMP陷阱的企业的IP地址。【genericTrap】[out]指向通用陷阱的指示器。此参


-------------------------------------------------------- KeyGTK3Win32SnmpMgrOidToStr ----
SnmpMgrOidToStr    SnmpMgrStrToOid函数将内部对象标识符转换为字符串对象标识符或对象描述符表示。BOOL SnmpMgrOidToStr(AsnObjectIdentifier *【有关uz】,//要转换的对象标识符LPSTR *【串】//字符串对象标识符表示);
参数
【有关uz】[in]指向要转换的对象标识符变量。【串】[out]指向将接收转换值的以null结尾的字符串。
返回值
如果函数成功，返回值为TRUE。如果函数失败，返回值为FALSE。此函


-------------------------------------------------------- KeyGTK3Win32SnmpMgrOpen ----
SnmpMgrOpen    SnmpMgrOpen函数初始化通信套接字和数据结构，允许与指定代理进行通信。
语法
参数
【lpAgentAddress】[in]指向一个空值终止的字符串，指定可以解析为IP地址，IPX地址（8.12表示法）或以太网地址的点分十进制IP地址或主机名。【lpAgentCommuni


-------------------------------------------------------- KeyGTK3Win32SnmpMgrRequest ----
SnmpMgrRequest    SnmpMgrRequest函数请求指定的代理执行指定的操作。
语法
参数
【会议】[in]指向内部结构，指定执行请求的会话。【请求类型】[in]指定SNMP请求类型。此参数可以是以下值之一：值含义ASN_RFC1157_GETREQUEST搜索并从指定的变量接收值


-------------------------------------------------------- KeyGTK3Win32SnmpMgrStrToOid ----
SnmpMgrStrToOid    SnmpMgrStrToOid函数将字符串对象标识符或对象描述符表示形式转换为内部对象标识符。
语法
参数
【串】[in]指向要转换的以null结尾的字符串。【有关uz】[out]指向将接收转换值的对象标识符变量。
返回值
如果函数成功，返回值为TRUE。如果函数失败，返回值为FALSE。此函


-------------------------------------------------------- KeyGTK3Win32SnmpMgrTrapListen ----
SnmpMgrTrapListen    SnmpMgrTrapListen函数注册管理应用程序接收SNMP陷阱的能力。
语法
参数
【phTrapAvailable】[out]指向将用于指示有陷阱可用的事件句柄，并且应用程序应调用SnmpMgrGetTrap函数。
返回值
如果函数成功，返回值为TRUE。如果函数失败


-------------------------------------------------------- KeyGTK3Win32SnmpUtilMemAlloc ----
SnmpUtilMemAlloc  SnmpUtilMemAlloc函数从进程堆分配动态内存。
语法
参数
【尺寸】[in]为内存对象分配的字节数。
返回值
如果函数成功，则返回值是指向新分配的内存对象的指针。如果函数失败，返回值为NULL。
描述
使用SnmpUtilMemFree函数释


-------------------------------------------------------- KeyGTK3Win32SnmpUtilMemFree ----
SnmpUtilMemFree  SnmpUtilMemFree函数释放指定的内存对象。
语法
参数
【地址】[in/out]指向要释放的内存对象的指针。
返回值
没有。
描述
使用SnmpUtilMemAlloc函数分配内存。



-------------------------------------------------------- KeyGTK3Win32SnmpUtilMemReAlloc ----
SnmpUtilMemReAlloc  SnmpUtilMemReAlloc函数更改指定内存对象的大小。
语法
参数
【地址】[in]指向要调整大小的内存对象的指针。【尺寸】[in]要为新内存对象分配的字节数。
返回值
如果函数成功，则返回值是指向新分配的内存对象的指针。如果函数失败，返回值为NULL。


-------------------------------------------------------- KeyGTK3Win32SnmpUtilOidAppend ----
SnmpUtilOidAppend    SnmpUtilOidAppend函数将源对象标识符附加到目标对象标识符。
语法
参数
【DestObjId】[in/out]指向AsnObjectIdentifier 结构以接收副本。【SrcObjId】[in]指向要附加的AsnObjectIdentifier结构。
返回


-------------------------------------------------------- KeyGTK3Win32SnmpUtilOidCmp ----
SnmpUtilOidCmp    SnmpUtilOidCmp函数比较两个对象标识符。
语法
参数
【ObjIdA】[in]指向AsnObjectIdentifier结构进行比较。【ObjIdB】[in]指向要比较的AsnObjectIdentifier结构。
返回值
如果【ObjId


-------------------------------------------------------- KeyGTK3Win32SnmpUtilOidCpy ----
SnmpUtilOidCpy    SnmpUtilOidCpy函数将【SrcObjId】参数指向的变量复制到【DestObjId】参数，为目标的副本分配必要的内存。
语法
参数
【DestObjId】[out]指向AsnObjectIdentifier结构以接收副本。【SrcObjId】[in]指向要复制的AsnObjectIdentifier结构。
返回值
如


-------------------------------------------------------- KeyGTK3Win32SnmpUtilOidFree ----
SnmpUtilOidFree    SnmpUtilOidFree函数释放与对象标识符相关联的任何已分配数据。
语法
参数
【OBJ】[in/out]指向应分配数据的AsnObjectIdentifier结构。
返回值
无返回值。



-------------------------------------------------------- KeyGTK3Win32SnmpUtilOidNCmp ----
SnmpUtilOidNCmp    SnmpUtilOidNCmp函数将两个对象标识符变量与【只】参数指定的长度进行比较。
语法
参数
【ObjIdA】[in]指向AsnObjectIdentifier结构进行比较。【ObjIdB】[in]指向AsnObjectIdentifier结构进行比较。【只】[in]表示要比较的子识


-------------------------------------------------------- KeyGTK3Win32SnmpUtilVarBindCpy ----
SnmpUtilVarBindCpy    SnmpUtilVarBindCpy函数复制RFC1157VarBind结构，并分配目标结构所需的任何内存。
语法
参数
【DSTen】[out]指向RFC1157VarBind结构以接收副本。【SRC】[in]指向要复制的RFC1157VarBind结构。
返回值
如果函数成功，返回值为TRUE。如果函数


-------------------------------------------------------- KeyGTK3Win32SnmpUtilVarBindFree ----
SnmpUtilVarBindFree    SnmpUtilVarBindFree函数释放与RFC1157VarBind结构相关联的任何已分配数据。
语法
参数
【VarBind】[in/out]指向应分配数据的RFC1157VarBind结构。
返回值
无返回值。



-------------------------------------------------------- KeyGTK3Win32SnmpUtilVarBindListCpy ----
SnmpUtilVarBindListCpy    SnmpUtilVarBindListCpy函数复制RFC1157VarBindList结构，并为目标的副本分配任何必要的内存。
语法
参数
【DSTen】[out]指向RFC1157VarBindList结构以接收副本。【SRC】[in]指向要复制的RFC1157VarBindList结构。
返回值
如果函数成功，返回值为T


-------------------------------------------------------- KeyGTK3Win32SnmpUtilVarBindListFree ----
SnmpUtilVarBindListFree    SnmpUtilVarBindListFree函数释放与RFC1157VarBindList结构相关联的任何已分配数据。
语法
参数
【VarBindList】[in/out]指向应分配数据的RFC1157VarBindList结构。
返回值
无返回值。



-------------------------------------------------------- KeyGTK3Win32SOBailOut ----
SOBailOut允许文件解析器返回错误条件。在调用此函数后，解析器应尽快从VwReadStreamFunc函数返回。虚空SOBailOut（WORD 【错误标志此参数可以是以下值之一：】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOBeginTable ----
SOBeginTable启动表定义，指示后续输出调用中的文本是表的一部分。必须在段落之间调用此函数，然后指定行和单元格格式。VOID SOBeginTable（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOEndColumnInfo ----
SOEndColumnInfo结束列信息的定义。在设置列信息后，文件解析器必须立即调用此函数。该函数只能从VwStreamSection函数调用。VOID SOEndColumnInfo（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOEndFieldInfo ----
SOEndFieldInfo结束字段信息的定义。文件解析器必须先前称为SOStartFieldInfo函数。文件解析器在设置字段信息后立即调用此函数。此函数只能从VwStreamSection函数调用。VOID SOEndFieldInfo（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOEndFontTable ----
SOEndFontTable结束字体表的定义。文件解析器必须在设置字体条目后立即调用此函数。该函数只能从VwStreamSection函数调用。VOID SOEndFontTable（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOEndPalette ----
SOEndPalette结束调色板的定义。文件解析器在指定最后一个调色板条目后立即调用此函数。VOID SOEndPalette（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOEndTable ----
SOEndTable结束表定义，指示后续输出调用中的文本不再是表的一部分。必须在分行后调用该函数。VOID SOEndTable（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOEndTabStops ----
SOEndTabStops结束段落的制表位置的定义。要设置制表位，请使用SOPutTabStop函数。文件解析器在设置段落的最后一个选项卡停止后立即调用此函数。VOID SOEndTabStops（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOGetInfo ----
SOGetInfo检索有关电子表格的信息。VOID SOGetInfo（WORD 【*pInfo】, 无效VWPTR 【* PINFO】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOGetScanLineBuffer ----
SOGetScanLineBuffer检索用于存储当前扫描线的缓冲区的地址。对于每个生成的扫描线，从VwStreamReadFunc函数调用此函数。此函数将指向的变量设置为应构建扫描行数据的地址。WORD SOGetScanLineBufferVOID VWPTR 【*ppScanLineData】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutBitmapHeader ----
SOPutBitmapHeader输出有关位图的信息。VOID SOPutBitmapHeader（PSOBITMAPHEADER 【pBitmapHeader】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutBreak ----
SOPutBreak设置段落，单元格，记录，页面，部分或其他类型的中断。在电子表格部分中，部分中的最后一个单元格必须在SO_SECTIONBREAK或SO_EOFBREAK中断前关联SO_CELLBREAK中断。在数据库部分中，部分中的最后一条记录必须在SO_SECTIONBREAK或SO_EOFBREAK中断前关联SO_RECORDBREAK中断。在文字处理部分，在SO_SECTIONBREAK或SO_EOFBREAK中断之前，最后一段不需要SO_PARABREAK中断。WORD SOPutBreak（WORD 【WTYPE】, DWORD 【dwInfo】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutChar ----
SOPutChar输出一个字符，应用当前的字体，高度和属性。该字符被假定属于由打开的函数选择的字符集，并且是可数和可见的。VOID SOPutChar（WORD 【WCH】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutCharAttr ----
SOPutCharAttr设置文本中字符的样式属性。VOID SOPutCharAttr（WORD 【wAttr】, WORD 【wState】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutCharFontById ----
SOPutCharFontById设置文本中字符的字体。VOID SOPutCharFontById（DWORD 【dwFontId】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutCharFontByName ----
SOPutCharFontByName设置文本中字符的字体。VOID SOPutCharFontByName（WORD 【wFontType】, WORD 【pFontName】, HPROC【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutCharHeight ----
SOPutCharHeight设置文本中一个字符的高度（以半分）。VOID SOPutCharHeight（WORD 【身高，半分，角色。】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutCharX ----
SOPutCharX输出一个字符，应用指定的字符类型。假设该字符属于由打开函数选择的字符集。VOID SOPutCharX（WORD 【WCH】, WORD 【WTYPE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutColumnInfo ----
SOPutColumnInfo设置列信息。调用此函数之前，文件解析器必须调用SOStartColumnInfo函数。此函数只能从VwStreamSection函数调用。VOID SOPutColumnInfo（PSOCOLUMN 【pColumn】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutDataCell ----
SOPutDataCell输出单元格的数据。VOID SOPutCell（PSODATACELL 【的pCell】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutEmbeddedObject ----
SOPutEmbeddedObject设置嵌入式图形对象。文件解析器必须使用适当的值设置SOEMBEDDEDOBJECT结构。VOID SOPutEmbeddedObject（PSOEMBEDDEDOBJECT 【pObjectbsbs】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutField ----
SOPutField输出字段的数据。除了SO_FIELDTEXTVAR值以外，所有wStorage类型都使用此函数。VOID SOPutField（无效VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutFieldInfo ----
SOPutFieldInfo设置字段信息。调用此函数之前，文件解析器必须调用SOStartFieldInfo函数。此函数只能从VwStreamSection函数调用。VOID SOPutFieldInfo（PSOFIELD 【pfield】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutFontTableEntry ----
SOPutFontTableEntry设置字体表条目。调用此函数之前，文件解析器必须调用SOStartFontTable函数。对于要添加到表的每个字体，必须调用一次SOPutFontTableEntry.字体标识符必须是唯一的，但可以按任何顺序给出。该函数只能从VwStreamSection函数调用。
语法



-------------------------------------------------------- KeyGTK3Win32SOPutHdrEntry ----
SOPutHdrEntry设置标题信息的字符串。该函数只能从VwStreamSection函数调用。VOID SOPutHdrEntry（char VWPTR 【* PLABEL】, char VWPTR 【* pData所】, WORD 【WID】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutMoreText ----
SOPutMoreText输出单元格的文本，并指示单元格是否有更多文本输出。此函数用于输出使用SOPutText函数初始启动的文本序列。如果要输出的文本多，则文件解析器必须使用后续调用或调用SOPutMoreText函数来输出文本。128字节限制是为了方便函数处理SOPutMoreText.
语法



-------------------------------------------------------- KeyGTK3Win32SOPutMoreVarField ----
SOPutMoreVarField输出变量字段的数据，并指示是否有更多的数据要输出的字段。此函数可以调用多次。如果要输出的数据更多，则文件解析器必须使用后续调用或调用SOPutMoreVarField来输出数据。128字节限制是为了方便函数处理SOPutMoreVarField.此函数用于输出使用SOPutVarField函数初始启动的数据序列。
语法



-------------------------------------------------------- KeyGTK3Win32SOPutPaletteEntry ----
SOPutPaletteEntry设置调色板条目的颜色。调用此函数之前，文件解析器必须调用SOStartPalette函数。调用此函数的顺序确定图像颜色表中条目的顺序。第一个调色板条目为彩色0，为值为0的像素显示颜色;第二个调色板条目是颜色1;等等。VOID SOPutPaletteEntry（无符号字符 【红】, 无符号字符 【绿色】, 无符号字符 【蓝色】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutParaAlign ----
SOPutParaAlign设置段落的对齐方式。VOID SOPutParAlign（WORD 【WTYPE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutParaIndents ----
SOPutParaIndents设置段落的缩进。缩进相对于相应的左边距或右边距。VOID SOPutParaIndents（LONG 【dwLeft】, LONG 【dwRight】, LONG 【Width, in twips, of the left indent.】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutParaMargins ----
SOPutParaMargins设置段落边距。边距相对于页面的左边缘或右边缘。VOID SOPutParaMargins（LONG 【dwLeft】, LONG 【dwRight】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutParaSpacing ----
SOPutParaSpacing设置段落的间距。VOID SOPutParaSpacing（WORD 【wLineHeightType】, DWORD 【dwLineHeight】, DWORD 【dwSpaceBefore】, DWORD 【dwSpaceAfter】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutScanLineData ----
SOPutScanLineData在位图的单个扫描行中设置位值。以前必须使用SOPutBitmapHeader函数定义位图格式。VOID SOPutScanLineData（U_BYTE VWPTR 【*pScanLineData】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutSectionName ----
SOPutSectionName设置部分的名称。VOID SOPutSectionName（char VWPTR 【* PNAME】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutSectionType ----
SOPutSectionType输出节类型。VOID SOPutSectionType（WORD 【WTYPE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutSpecialCharX ----
SOPutSpecialCharX输出特殊字符，应用指定的字符类型。VOID SOPutSpecialCharX（WORD 【WCH】, WORD【WTYPE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutSubdocInfo ----
SOPutSubdocInfo输出子文档数据。VOID SOPutSubdocInfo（WORD 【WTYPE】, WORD【wSubType】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutTableCellInfo ----
SOPutTableCellInfo设置单元格信息。VOID SOPutTableCellInfo（PSOTABLECELLINFO 【pCellInfo】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutTableRowFormat ----
SOPutTableRowFormat设置表格中一行的格式。VOID SOPutTableRowFormat（WORD 【wLeftEdge】, WORD 【wRowHeight】, WORD 【wRowHeightType】, WORD 【wCellMargin】, WORD 【wRowAlignment】, WORD 【wNumCells】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutTabStop ----
SOPutTabStop设置段落的制表位。调用此函数之前，文件解析器必须调用SOStartTabStops函数，并可以通过多次调用来为段落设置多个制表位。在设置制表符停止时，文件解析器不得调用任何其他输出函数，并且必须在设置最后一个制表符停止后调用SOEndTabStops函数。VOID SOPutTabStop（PSOTAB 【PTAB】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutTextCell ----
SOPutTextCell输出单元格的文本，并指示单元格是否有更多文本输出。如果有更多文本输出，则文件解析器必须使用后续调用或调用SOPutMoreText函数来输出文本。VOID SOPutTextCell（PSOTEXTCELL 【的pCell】, WORD 【wCount】, char VWPTR 【* pText】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutVarField ----
SOPutVarField输出变量字段的数据，并指示是否有更多的数据要输出的字段。如果有更多的数据要输出，则文件解析器必须使用后续调用或调用SOPutMoreVarField函数来输出数据。VOID SOPutVarField（无效VWPTR 【* pData所】, WORD 【wCount】, WORD 【Address of the data for the variable field.】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOPutVectorHeader ----
SOPutVectorHeader输出矢量标题，指定显示分辨率，x轴和y轴方向，背景颜色和颜色值类型（RGB或调色板）。VOID SOPutVectorHeader（PSOVECTORHEADER 【pVectorHeader】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOSetDateBase ----
SOSetDateBase设置基准日期。所有后续日期均计算为基准日期和给定日期值之和。该函数只能从VwStreamSection函数调用。VOID SOSetDataBase（DWORD 【dwBaseht】, WORD 【wFlags】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOStartColumnInfo ----
SOStartColumnInfo启动列信息的定义。在设置信息之前，文件解析器必须立即调用此函数。该函数只能从VwStreamSection函数调用。VOID SOStartColumnInfo（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOStartFieldInfo ----
SOStartFieldInfo开始字段信息的定义。文件解析器在设置字段信息之前立即调用此函数。该函数只能从VwStreamSection函数调用。VOID SOStartFieldInfo（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOStartFontTable ----
SOStartFontTable启动字体表的定义。在设置字体条目之前，文件解析器必须立即调用此函数。该函数只能从VwStreamSection函数调用。VOID SOStartFontTable（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOStartPalette ----
SOStartPalette启动调色板的定义。文件解析器在定义调色板条目之前立即调用此函数。VOID SOStartPalette（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOStartTabStops ----
SOStartTabStops开始段落的制表位置的定义。要设置制表位，请使用SOPutTabStop函数。文件解析器在设置段落的第一个选项卡停止之前立即调用此函数。VOID SOStartTabStops（HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SoundSentryProc ----
SoundSentryProc    SoundSentryProc函数是一个库定义的回调函数，当SoundSentry辅助函数打开时，会产生自定义的视觉信号，而基于Windows的应用程序（或在窗口中运行的非基于Windows的应用程序）通过电脑内置扬声器。
语法
参数
【dwMillisecel-Latn】指定当基于Windows的应用程序（或在窗口中运行的非基于Windows的应用程序）生成声音时显示的视觉信号的持续时间（以毫秒为单位）。【fdwEffe


-------------------------------------------------------- KeyGTK3Win32SOVectorAttr ----
SOVectorAttr设置与绘图矢量图形对象相关的属性。VOID SOVectorAttr（INT 【nItemId】, DWORD 【wDataSize】, VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SOVectorObject ----
SOVectorObject绘制或定义给定的矢量图形对象。VOID SOVectorObject（INT 【nItemId】, DWORD 【wDataSize】, VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32StartDoc ----
StartDoc    StartDoc函数启动打印作业。此函数替换STARTDOC打印机转义。
语法
参数
【HDC】标识打印作业的设备上下文。【LPdi】指向DOCINFO结构，其中包含文档文件的名称和输出文件的名称。
返回值
如果函数成功，返回值大于零。该值是文档的打印作业标识符。如果函数


-------------------------------------------------------- KeyGTK3Win32StartDocPrinter ----
StartDocPrinter    StartDocPrinter函数通知打印后台处理程序要将假脱机文档进行打印。
语法
参数
【hPrinter】标识打印机。【水平】指定【pDocInfo】指向的结构的版本。对于Windows NT，此值必须为1。对于Windows 95，还可以选择值2。（见DOC_INFO_2以


-------------------------------------------------------- KeyGTK3Win32StartPage ----
StartPage    StartPage函数准备打印机驱动程序接受数据。
语法
参数
【hDC】标识打印作业的设备上下文。
返回值
如果函数成功，返回值大于零。如果函数失败，返回值小于或等于零。要获取扩展错误信息，请调用GetLastError.
描述
系统在Star


-------------------------------------------------------- KeyGTK3Win32StartPagePrinter ----
StartPagePrinter    StartPagePrinter函数通知假脱机程序页面即将打印在指定的打印机上。
语法
参数
【hPrinter】识别打印机。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
通过调用OpenPrint


-------------------------------------------------------- KeyGTK3Win32StartService ----
StartService    StartService函数开始执行服务。
语法
参数
【hService】标识服务。该句柄由OpenService或CreateService函数返回，并且必须具有SERVICE_START访问权限。【dwNumServiceArgs】指定【l


-------------------------------------------------------- KeyGTK3Win32StartServiceCtrlDispatcher ----
StartServiceCtrlDispatcher    StartServiceCtrlDispatcher函数将服务进程的主线程连接到服务控制管理器，这将使线程成为调用进程的服务控制分派器线程。
语法
参数
【lpServiceStartTable】指向SERVICE_TABLE_ENTRY结构的数组，其中包含可在调用进程中执行的每个服务的一个条目。表中最后一个条目的成员必须具有NULL值来指定


-------------------------------------------------------- KeyGTK3Win32StretchBlt ----
StretchBlt    StretchBlt函数将位图从源矩形复制到目标矩形中，如有必要，可以拉伸或压缩位图以适应目标矩形的尺寸。Windows根据目标设备上下文中设置的拉伸模式，拉伸或压缩位图。
语法
参数
【hdcDest】标识目标设备上下文。【nXOriginDest】指定目标矩形左上角的x坐标（以逻辑为单位）。【nYOriginDest】指定目标矩形左上角的y坐标（以逻辑为单位）。【nWi


-------------------------------------------------------- KeyGTK3Win32StretchDIBits ----
StretchDIBits    StretchDIBits函数将设备无关位图（DIB）中的像素矩形的颜色数据复制到指定的目标矩形。如果目标矩形大于源矩形，则该函数会拉伸颜色数据的行和列以适合目标矩形。如果目标矩形小于源矩形，则此函数使用指定的栅格操作来压缩行和列。
语法
参数
【HDC】标识目标设备上下文。【XDest】指定目标矩形左上角的x坐标（以逻辑为单位）。【YDest】指定目标矩形左上角的y坐标（以逻辑为单位）。【nDestWidth】指定目标矩形的逻辑单


-------------------------------------------------------- KeyGTK3Win32StrokeAndFillPath ----
StrokeAndFillPath    StrokeAndFillPath函数可以关闭路径中的任何打开的图形，使用当前笔触发路径的轮廓，并使用当前画笔填充其内部。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.GetLastError可能会返回以下错误代


-------------------------------------------------------- KeyGTK3Win32StrokePath ----
StrokePath    StrokePath函数通过使用当前笔来呈现指定的路径。
语法
参数
【HDC】标识包含封闭路径的设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.GetLastError可能会


-------------------------------------------------------- KeyGTK3Win32SubtractRect ----
SubtractRect    SubtractRect函数获取通过从另一个减去一个矩形确定的矩形的坐标。
语法
参数
【lprcDst】指向RECT结构，通过从【lprcSrc1】指向的矩形中减去【lprcSrc2】指向的矩形确定的矩形坐标。【lprcSrc1】指向RECT结构，该函数从该结构中减去【lpr


-------------------------------------------------------- KeyGTK3Win32SuspendThread ----
SuspendThread    SuspendThread函数挂起指定的线程。
语法
参数
【hThread】标识线程。Windows NT：句柄必须具有THREAD_SUSPEND_RESUME访问权限。有关详细信息，请参阅线程对象.
返回值
如果函数成功，返回值是线程以前的


-------------------------------------------------------- KeyGTK3Win32SUUserPopData ----
SUUserPopData弹出用户数据。必须先使用SUUserPushData函数推送数据。VOID SUUserPopData（VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SUUserPushData ----
SUUserPushData推送用户数据。可以使用SUUserPopData函数检索数据。VOID SUUserPushData（VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SUUserRetrieveData ----
SUUserRetrieveData检索用户数据。以前必须使用SUUserSaveData函数保存数据。不应该使用此函数。应该使用SUUserPopData函数。VOID SUUserRetrieveData（WORD 【WINDEX】, VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SUUserSaveData ----
SUUserSaveData保存用户数据。不应该使用此函数。应该使用SUUserPushData函数。VOID SUUserSaveData（VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32SwapMouseButton ----
SwapMouseButton    SwapMouseButton函数可以反转或恢复鼠标左键和右键的含义。
语法
参数
【// reverse or restore buttons】指定鼠标按钮的含义是否相反或恢复。如果此参数为TRUE，左侧按钮将生成右键消息，右侧按钮会生成左键消息。如果此参数为FALSE，


-------------------------------------------------------- KeyGTK3Win32SwitchDesktop ----
SwitchDesktop    SwitchDesktop函数使桌面可见，并激活它。这使桌面能够接收用户的输入。调用进程必须具有DESKTOP_SWITCHDESKTOP访问桌面才能使SwitchDesktop函数成功。
语法
参数
【//分配给该线程的桌面的句柄】标识要显示和激活的桌面。该句柄由CreateDesktop和OpenDesktop函数返回。如果桌面属于不可见窗口台，SwitchDesktop函数将失败。



-------------------------------------------------------- KeyGTK3Win32SwitchToFiber ----
SwitchToFiber    SwitchToFiber函数调度光纤。
语法
参数
【//指向要删除的光纤的指针】指定要切换到的光纤的地址。
返回值
此函数不返回值。
描述
SwitchToFiber函数用于手动调度光纤。该函数保存当前光纤的状态信息，恢复指定光纤的


-------------------------------------------------------- KeyGTK3Win32SwitchToThread ----
SwitchToThread    [New - Windows NT]SwitchToThread函数导致调用线程对另一个准备在当前处理器上运行的线程执行执行。操作系统选择要产生的线程。
语法
参数
此函数无参数。
返回值
如果调用SwitchToThread函数导致操作系统将执行切换到另一个线程，则返回值不为零。如果没有其他线程准备好执行，则操作系统不会将执行切换到另一个线程，并且


-------------------------------------------------------- KeyGTK3Win32SysMsgProc ----
SysMsgProc    SysMsgProc挂接过程是系统在对话框，消息框，菜单或滚动条中发生输入事件之后但在处理输入事件生成的消息之前调用的库定义的回调函数。挂钩过程可以监视系统中任何对话框，消息框，菜单或滚动条的消息。
语法
参数
【NCODE】指定生成消息的输入事件的类型。此参数可以是以下值之一：值含义MSGF_DIALOGBOX输入事件发生在消息框或对话框中。MSGF_MENU输入事件发生在菜单中。MSGF_SCR


-------------------------------------------------------- KeyGTK3Win32SystemParametersInfo ----
SystemParametersInfo    SystemParametersInfo函数查询或设置系统范围的参数。此函数还可以在设置参数时更新用户配置文件。
语法
参数
【uiAction】指定要查询或设置的系统范围参数。此参数可以是以下值之一：值含义SPI_GETACCESSTIMEOUT检索与辅助函数相关联的超时期的信息。【pvParam】参数必须指向接


-------------------------------------------------------- KeyGTK3Win32SystemTimeToFileTime ----
SystemTimeToFileTime    SystemTimeToFileTime函数将系统时间转换为文件时间。
语法
参数
【lpSystemTime】指向包含要转换时间的SYSTEMTIME结构。SYSTEMTIME结构的wDayOfWeek成员将被忽略。【lpFileTime】指向FILETIME结构以接收转


-------------------------------------------------------- KeyGTK3Win32SystemTimeToTzSpecificLocalTime ----
SystemTimeToTzSpecificLocalTime    SystemTimeToTzSpecificLocalTime函数将协调世界时（UTC）转换为指定时区的相应本地时间。
语法
参数
【lpTimeZoneInformation】指向TIME_ZONE_INFORMATION结构的指针，指定感兴趣的时区。如果【lpTimeZoneInformation】为NULL，则该函


-------------------------------------------------------- KeyGTK3Win32TabbedTextOut ----
TabbedTextOut    TabbedTextOut函数在指定位置写入一个字符串，将制表符扩展为一个tab-stop位置数组中指定的值。文本以当前选定的字体编写。
语法
参数
【hDC】标识设备上下文。【X】以逻辑单位指定字符串起始点的x坐标。【Y】以逻辑单位指定字符串起始点的y坐标。【lpString】指向要绘制的字符串。字符串不需要为零终止，因为【NCOUNT


-------------------------------------------------------- KeyGTK3Win32TerminateProcess ----
TerminateProcess    TerminateProcess函数终止指定的进程及其所有线程。
语法
参数
【hProcess】标识要终止的过程。Windows NT：句柄必须具有PROCESS_TERMINATE访问权限。有关详细信息，请参阅过程对象.【uExitCode】指定进程的退出代码，以


-------------------------------------------------------- KeyGTK3Win32TerminateThread ----
TerminateThread    TerminateThread函数终止线程。
语法
参数
【hThread】标识要终止的线程。Windows NT：句柄必须具有THREAD_TERMINATE访问权限。有关详细信息，请参阅线程对象.【dwExitCode】指定线程的退出代码。使用


-------------------------------------------------------- KeyGTK3Win32TextOut ----
TextOut    TextOut函数使用当前选定的字体在指定的位置写入一个字符串。
语法
参数
【HDC】标识设备上下文。【nXStart】指定Windows用于对齐字符串的参考点的逻辑x坐标。【nYStart】指定Windows用于对齐字符串的参考点的逻辑y坐标。【lpString】


-------------------------------------------------------- KeyGTK3Win32TileWindows ----
TileWindows    [Now Supported on Windows NT]TileWindows函数将分配指定的窗口或指定父窗口的子窗口。
语法
参数
【hwndParent】标识父窗口。如果此参数为NULL，则假定桌面窗口。【wHow】指定不排列的窗口类型，以及是垂直还是水平平铺。该参数可以是与CascadeWindows函数列出的零个或


-------------------------------------------------------- KeyGTK3Win32TimerProc ----
TimerProc    TimerProc函数是一个应用程序定义的回调函数，用于处理WM_TIMER消息。
语法
参数
【HWND】标识与定时器相关联的窗口。【uMsg】指定WM_TIMER消息。【IdEvent】指定定时器的标识符。【dwTime】指定自Windows启动以来经过的毫秒数。这是GetTick


-------------------------------------------------------- KeyGTK3Win32TlsAlloc ----
TlsAlloc    TlsAlloc函数分配线程本地存储（TLS）索引。该进程的任何线程随后可以使用此索引来存储和检索线程本地的值。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值为TLS索引。如果函数失败，返回值为0xFFFFFFFF。要获取扩展错误信息，请调用GetLastError.
描述
进程的线程可以在后


-------------------------------------------------------- KeyGTK3Win32TlsFree ----
TlsFree    TlsFree函数释放线程本地存储（TLS）索引，使其可重用。
语法
参数
【dwTlsIndex】指定由TlsAlloc函数分配的TLS索引。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32TlsGetValue ----
TlsGetValue    TlsGetValue函数检索调用线程的线程本地存储（TLS）插槽中指定TLS索引的值。进程的每个线程都有自己的每个TLS索引的插槽。
语法
参数
【dwTlsIndex】指定由TlsAlloc函数分配的TLS索引。
返回值
如果函数成功，则返回值是存储在与指定索引关联的调用线程的TLS插槽中的值。如果函数失败，返回值为零。要获取扩


-------------------------------------------------------- KeyGTK3Win32TlsSetValue ----
TlsSetValue    TlsSetValue函数在调用线程的线程本地存储（TLS）插槽中存储指定TLS索引的值。进程的每个线程都有自己的每个TLS索引的插槽。
语法
参数
【dwTlsIndex】指定由TlsAlloc函数分配的TLS索引。【lpTlsValue】指定要存储在由【dwTlsIndex】指定的调用线程的TLS插槽中的值。
返回值
如果函数成功


-------------------------------------------------------- KeyGTK3Win32ToAscii ----
ToAscii    ToAscii函数将指定的虚拟键代码和键盘状态转换为相应的Windows字符或字符。该函数使用由给定的键盘布局句柄标识的输入语言和物理键盘布局来转换代码。
语法
参数
【uVirtKey】指定要翻译的虚拟键代码。【uScanCode】指定要翻译的键的硬件扫描代码。如果键已经起作用（未按下），则该值的高位被置位。【lpKeyState】指向包含当前键盘状态的


-------------------------------------------------------- KeyGTK3Win32ToAsciiEx ----
ToAsciiEx    [Now Supported on Windows NT]ToAsciiEx函数将指定的虚拟键代码和键盘状态转换为相应的Windows字符或字符。该函数使用由给定的键盘布局句柄标识的输入语言和物理键盘布局来转换代码。
语法
参数
【uVirtKey】指定要翻译的虚拟键代码。【uScanCode】指定要翻译的键的硬件扫描代码。如果键已经起作用（未按下），则该值的高位被置位。【lpKeyState】指向包含当前键盘状态的


-------------------------------------------------------- KeyGTK3Win32ToUnicode ----
ToUnicode    ToUnicode函数将指定的虚拟键代码和键盘状态转换为相应的Unicode字符或字符。
语法
参数
【wVirtKey】指定要翻译的虚拟键代码。【wScanCode】指定要翻译的键的硬件扫描代码。该键的高位被设置为键。【lpKeyState】指向包含当前键盘状态的256字节数组。数组中的每


-------------------------------------------------------- KeyGTK3Win32ToUnicodeEx ----
ToUnicodeExToUnicodeEx函数将指定的虚拟键代码和键盘状态转换为相应的Unicode字符或字符。
语法
参数
【wVirtKey】指定要翻译的虚拟键代码。【wScanCode】指定要翻译的键的硬件扫描代码。该键的高位被设置为键。【lpKeyState】指向包含当前键盘状态的256字节数组。数组中的每


-------------------------------------------------------- KeyGTK3Win32TrackMouseEvent ----
TrackMouseEvent    [New - Windows NT]当鼠标指针离开窗口或者在窗口上悬停指定的时间时，TrackMouseEvent函数会发布消息。
语法
参数
【lpEventTrack】指向TRACKMOUSEEVENT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.函


-------------------------------------------------------- KeyGTK3Win32TrackPopupMenu ----
TrackPopupMenu    TrackPopupMenu函数在指定位置显示快捷菜单，并跟踪菜单中项目的选择。快捷菜单可以出现在屏幕上的任何地方。
语法
参数
【HMENU】标识要显示的快捷菜单。可以通过调用CreatePopupMenu创建新的快捷菜单或通过调用GetSubMenu来检索与现有菜单项相关联的子菜单的句柄来获取句柄。【uFlags】


-------------------------------------------------------- KeyGTK3Win32TrackPopupMenuEx ----
TrackPopupMenuEx    [Now Supported on Windows NT]TrackPopupMenuEx函数在指定位置显示快捷菜单，并跟踪快捷菜单上项目的选择。快捷菜单可以出现在屏幕上的任何地方。
语法
参数
【HMENU】手柄到要显示的快捷菜单。可以通过调用CreatePopupMenu函数创建新的快捷菜单或通过调用GetSubMenu函数来检索与现有菜单项相关联的子菜单的句柄来获取该句柄。【f


-------------------------------------------------------- KeyGTK3Win32TransactNamedPipe ----
TransactNamedPipe    TransactNamedPipe函数将单个网络操作组合到从指定的命名管道写入消息并从其读取消息的函数。
语法
参数
【hNamedPipe】标识CreateNamedPipe或CreateFile函数返回的命名管道。【lpInBuffer】指向包含写入管道的数据的缓冲区。【nInBufferSize】指定


-------------------------------------------------------- KeyGTK3Win32TranslateAccelerator ----
TranslateAccelerator    TranslateAccelerator函数处理菜单命令的加速键。该函数将WM_KEYDOWN或WM_SYSKEYDOWN消息转换为WM_COMMAND或WM_SYSCOMMAND消息（如果在指定的加速器表中有密钥条目），然后将WM_COMMAND或WM_SYSCOMMAND消息直接发送到相应的窗口程序。TranslateAccelerator不会返回，直到窗口过程处理消息。
语法
参数
【的hWnd】标识要翻译其消息的窗口。【hAccTable】标识一个加速器表。加速表必须通过调用LoadAccelerators函数加载，或者通过调用CreateAcceleratorTab


-------------------------------------------------------- KeyGTK3Win32TranslateCharsetInfo ----
TranslateCharsetInfo    [Now Supported on Windows NT]TranslateCharsetInfo函数基于指定的字符集，代码页或字体签名值进行转换，将目标结构的所有成员设置为适当的值。
语法
参数
【lpSrc】由【dwFlags中】参数定义的地址或值。如果【dwFlags中】为TCI_SRCFONTSIG，则此参数为FONTSIGNATURE结构fsCsb成员的地址。否则，此参数是3


-------------------------------------------------------- KeyGTK3Win32TranslateMDISysAccel ----
TranslateMDISysAccel    TranslateMDISysAccel函数处理与指定的MDI客户机窗口相关联的多文档界面（MDI）子窗口的窗口菜单命令的加速键击。该函数将WM_KEYUP和WM_KEYDOWN消息转换为WM_SYSCOMMAND消息，并将其发送到相应的MDI子窗口。
语法
参数
【hWndClient】标识MDI客户端窗口。【LPMSG】指向使用GetMessage或PeekMessage函数检索到的邮件。消息必须是MSG结构，并包含应用程序消息队列中的消息信息。



-------------------------------------------------------- KeyGTK3Win32TranslateMessage ----
TranslateMessage    TranslateMessage函数将虚拟键消息转换为字符消息。字符消息被发布到调用线程的消息队列中，以便下次线程调用GetMessage或PeekMessage函数时被读取。
语法
参数
【LPMSG】指向MSG结构，其中包含使用GetMessage或PeekMessage函数从调用线程的消息队列中检索的消息信息。
返回值
如果消息被翻译（即，字符消息被发布到线程的消息队


-------------------------------------------------------- KeyGTK3Win32TransmitCommChar ----
TransmitCommChar    TransmitCommChar函数在指定通信设备的输出缓冲区中的任何待处理数据之前传送指定的字符。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【灰烬】指定要发送的字符。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用Get


-------------------------------------------------------- KeyGTK3Win32TryEnterCriticalSection ----
TryEnterCriticalSection    [New - Windows NT]TryEnterCriticalSection函数尝试在不阻止的情况下输入关键部分。如果呼叫成功，呼叫线程将获得关键部分的所有权。
语法
参数
【lpCriticalSection】指定临界区对象。
返回值
如果关键部分成功输入或当前线程已经拥有关键部分，则返回值不为零。如果另一个线程已经拥有关键部分，则返回值为零。
描述



-------------------------------------------------------- KeyGTK3Win32UInt32x32To64 ----
UInt32x32To64    UInt32x32To64函数将两个无符号32位整数相乘，返回一个无符号的64位整数结果。该函数在所有Win32平台上执行最佳。
语法
参数
【乘数】指定乘法的第一个无符号32位整数。【被乘数】指定乘法的第二个无符号32位整数。
返回值
返回值是乘法的无符号64位整数结果。
描述
该函数通过最佳内联代码在所有平台上实现：单


-------------------------------------------------------- KeyGTK3Win32UndeleteFile ----
UndeleteFile  UndeleteFile函数是一个应用程序定义的回调函数，当用户从“文件管理器文件”菜单中选择“取消删除”命令时，文件管理器将调用该函数。
语法



-------------------------------------------------------- KeyGTK3Win32UnhandledExceptionFilter ----
UnhandledExceptionFilter    如果进程被调试，UnhandledExceptionFilter函数将未处理的异常传递给调试器。否则，它可选地显示一个应用程序错误消息框，并导致异常处理程序被执行。只能从尝试  -  除异常处理程序的过滤器表达式中调用此函数。
语法
参数
【ExceptionInfo】指向EXCEPTION_POINTERS结构，其中包含异常描述和异常时的处理器上下文。该指针是调用GetExceptionInformation函数的返回值。



-------------------------------------------------------- KeyGTK3Win32UnhookWindowsHook ----
UnhookWindowsHook  UnhookWindowsHook函数已过时，但提供与16位版本Windows的兼容性。对于基于Win32的应用程序，请使用UnhookWindowsHookEx函数。


-------------------------------------------------------- KeyGTK3Win32UnhookWindowsHookEx ----
UnhookWindowsHookEx    UnhookWindowsHookEx函数通过SetWindowsHookEx函数删除挂钩链中安装的钩子过程。
语法
参数
【HHK】标识要删除的钩子。此参数是通过先前调用SetWindowsHookEx获得的钩子句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
即使在Unho


-------------------------------------------------------- KeyGTK3Win32UnionRect ----
UnionRect    UnionRect函数创建两个矩形的并集。联合是包含两个源矩形的最小矩形。
语法
参数
【lprcDst】指向RECT结构的接收包含【lprcSrc1】和【lprcSrc2】参数指向的矩形的矩形。【lprcSrc1】指向包含第一个源矩形的RECT结构。【lprcSrc2】指向包


-------------------------------------------------------- KeyGTK3Win32UnloadKeyboardLayout ----
UnloadKeyboardLayout    UnloadKeyboardLayout函数删除键盘布局。
语法
参数
【HKL】标识要卸载的键盘布局。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。该函数可能失败，原因如下：*传递了无效的键盘布局句柄。*布局预加载。*布局正在使用中。



-------------------------------------------------------- KeyGTK3Win32UnlockFile ----
UnlockFile    UnlockFile函数解锁打开文件中的区域。解锁区域使其他进程可以访问该区域。
语法
参数
【HFILE】标识包含用LockFile锁定的区域的文件。必须使用GENERIC_READ或GENERIC_WRITE访问该文件创建文件句柄。【dwFileOffsetLow】指定锁定区域开


-------------------------------------------------------- KeyGTK3Win32UnlockFileEx ----
UnlockFileEx    UnlockFileEx函数解锁了打开文件中之前锁定的字节范围。
语法
参数
【HFILE】标识要将现有锁定区域解锁的文件的打开句柄。必须使用GENERIC_READ或GENERIC_WRITE访问该文件创建句柄。【//保留，必须设置为零】Reserved param


-------------------------------------------------------- KeyGTK3Win32UnlockResource ----
UnlockResource  UnlockResource函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序不需要解锁资源。
另请参见
LoadResource, LockResource


-------------------------------------------------------- KeyGTK3Win32UnlockSegment ----
UnlockSegment  UnlockSegment函数已过时。此函数仅用于与16位版本的Windows兼容。段在32位环境中没有任何意义。


-------------------------------------------------------- KeyGTK3Win32UnlockServiceDatabase ----
UnlockServiceDatabase    UnlockServiceDatabase函数通过释放指定的锁来解锁服务控制管理器数据库。
语法
参数
【ScLock】指定从以前调用LockServiceDatabase函数获取的锁。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLast


-------------------------------------------------------- KeyGTK3Win32UnmapViewOfFile ----
UnmapViewOfFile    UnmapViewOfFile函数从调用进程的地址空间中解除映射的文件映射。
语法
参数
【lpBaseAddress】指向要解映射的文件的映射视图的基址。该值必须与先前调用MapViewOfFile或MapViewOfFileEx函数返回的值相同。
返回值
如果函数成功，则


-------------------------------------------------------- KeyGTK3Win32UnpackDDElParam ----
UnpackDDElParam    UnpackDDElParam函数将从发布的DDE消息中收到的DDE 【lParam的】值进行解包。
语法
参数
【味精】指定发布的DDE消息。【lParam的】指定已发送的DDE消息的【lParam的】参数。应用程序必须通过调用FreeDDElParam函数来释放【lParam的】参数指定的内存对象。


-------------------------------------------------------- KeyGTK3Win32UnrealizeObject ----
UnrealizeObject    UnrealizeObject函数重置逻辑调色板。它指示系统实现调色板，就好像它以前没有被实现一样。下一次应用程序调用指定调色板的RealizePalette函数时，系统会将逻辑调色板完全重新映射到系统调色板。如果【hgdiobj】是一个画笔，UnrealizeObject什么也不做，该函数返回TRUE。使用SetBrushOrgEx设置画笔的原点。
语法
参数
【hgdiobj】标识要重置的逻辑调色板。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
Unrealiz


-------------------------------------------------------- KeyGTK3Win32UnregisterClass ----
UnregisterClass    UnregisterClass函数删除一个窗口类，释放该类所需的内存。
语法
参数
【lpClassName】指向一个空值终止的字符串或是一个整数原子。如果此参数是整数原子，则它必须是由先前调用GlobalAddAtom函数创建的全局原子。原子，小于0xC000的16位值必


-------------------------------------------------------- KeyGTK3Win32UnregisterHotKey ----
UnregisterHotKey    UnregisterHotKey函数释放先前由调用线程注册的热键。
语法
参数
【的hWnd】标识与要释放的热键相关联的窗口。如果热键不与窗口相关联，则该参数应为NULL。【id】指定要释放的热键的标识符。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为


-------------------------------------------------------- KeyGTK3Win32UpdateColors ----
UpdateColors    UpdateColors函数通过将客户区中的当前颜色重新映射到当前实现的逻辑调色板来更新指定设备上下文的客户区。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
应用程序可以通过调用GetDev


-------------------------------------------------------- KeyGTK3Win32UpdateICMRegKey ----
UpdateICMRegKey    UpdateICMRegKey函数安装，删除或查询标识ICC颜色配置文件或颜色匹配DLL的注册表项。该函数执行【nCommand】参数指定的动作。
语法
参数
【//保留，必须设置为零】Reserved; must be zero.【CMID】要与配置文件一起使用的颜色匹配DLL的配置文件标识符。【lpszFileName】指向根据【nComman


-------------------------------------------------------- KeyGTK3Win32UpdateResource ----
UpdateResource    UpdateResource函数添加，删除或替换可执行文件中的资源。
语法
参数
【更新】指定一个更新文件句柄。该句柄由BeginUpdateResource函数返回。【//值类型缓冲区的地址】指向要终止的字符串，指定要更新的资源类型。此参数也可以是传递给MAKEINTR


-------------------------------------------------------- KeyGTK3Win32UpdateWindow ----
UpdateWindow    如果窗口的更新区域不为空，则UpdateWindow函数通过向窗口发送WM_PAINT消息来更新指定窗口的客户区。该函数将WM_PAINT消息直接发送到指定窗口的窗口过程，绕过应用程序队列。如果更新区域为空，则不会发送任何消息。
语法
参数
【的hWnd】标识要更新的窗口。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyGTK3Win32ValidateRect ----
ValidateRect    ValidateRect函数通过从指定窗口的更新区域中移除矩形来验证矩形内的客户区。
语法
参数
【的hWnd】标识要更新其更新区域的窗口。如果此参数为NULL，Windows将无效并重新绘制所有窗口，并在函数返回之前将WM_ERASEBKGND和WM_NCPAINT消息发送到窗口过程。


-------------------------------------------------------- KeyGTK3Win32ValidateRgn ----
ValidateRgn    ValidateRgn函数通过从指定窗口的当前更新区域中删除区域来验证区域内的客户区。
语法
参数
【的hWnd】标识要更新其更新区域的窗口。【HRGN】标识定义要从更新区域中删除的区域的区域。如果此参数为NULL，则将删除整个客户机区域。
返回值
如果函数成功，返回值不为零。如果函数


-------------------------------------------------------- KeyGTK3Win32VerFindFile ----
VerFindFile    根据是否在系统中找到文件的另一个版本，VerFindFile函数决定了在哪里安装文件。指定缓冲区中的值VerFindFile返回值将用于后续调用VerInstallFile.与其他文件安装函数一样，VerFindFile只能与Win32文件映像配合使用。不支持16位Windows文件映像。
语法
参数
【dwFlags中】包含一个标志的位掩码。该参数可以是以下值：旗描述VFFF_ISSHAREDFILE源文件可以由多个应用程序共享。应用程序可以使用此信息来确定文件应在哪里复制。
所有其他


-------------------------------------------------------- KeyGTK3Win32VerInstallFile ----
VerInstallFile    VerInstallFile函数根据VerFindFile函数返回的信息尝试安装指定的文件。VerInstallFile解压缩文件，如有必要，分配唯一的文件名，并检查错误，如过时的文件。与其他文件安装函数一样，VerInstallFile只能与Win32文件映像配合使用。不支持16位Windows文件映像。
语法
参数
【uFlags】包含一个标志的位掩码。此参数可以是以下值之一：旗描述VIFF_FORCEINSTALL安装文件，不管版本号不一致。该函数仅在安装过程中检查物理错误。VIFF_DONTDELE


-------------------------------------------------------- KeyGTK3Win32VerLanguageName ----
VerLanguageName    VerLanguageName函数检索与指定的二进制Microsoft语言标识符相关联的语言的描述字符串。
语法
参数
【wLang】指定二进制Microsoft语言标识符。有关Win32支持的语言标识符的完整列表，请参阅语言标识符.例如，与语言标识符0x040A相关联的描述字符串是“西班牙语（传统排序）”。


-------------------------------------------------------- KeyGTK3Win32VerQueryValue ----
VerQueryValue    VerQueryValue函数从指定的版本信息资源返回所选版本信息。要检索相应的资源，必须在VerQueryValue之前调用GetFileVersionInfo函数。与其他文件安装函数一样，VerQueryValue只能与Win32文件映像配合使用。不支持16位Windows文件映像。
语法
参数
【pBlock】指向包含GetFileVersionInfo返回的版本信息资源的缓冲区。【lpSubBlock】指向一个零终止的字符串，指定要检索的版本信息值。字符串由以反斜杠（\\）分隔的


-------------------------------------------------------- KeyGTK3Win32VirtualAlloc ----
VirtualAlloc    VirtualAlloc函数在调用进程的虚拟地址空间中保留或提交一个页面区域。由此函数分配的内存将自动初始化为零。
语法
参数
【lpAddress】指定要分配的区域的所需起始地址。如果正在保留内存，则指定的地址将舍入到下一个64千字节的边界。如果存储器已经被保留并被提交，地址被向下舍入到下一页边界。要确定主机上页面


-------------------------------------------------------- KeyGTK3Win32VirtualAllocEx ----
VirtualAllocEx    [New - Windows NT]VirtualAllocEx函数在指定进程的虚拟地址空间中保留，提交或同时存储内存区域。该函数初始化其分配给零的内存。
语法
参数
【hProcess】处理过程。该函数在该进程的虚拟地址空间内分配内存。您必须具有PROCESS_VM_OPERATION访问权限。如果没有，则该函数失败。【lpAddress】指针，指定要分


-------------------------------------------------------- KeyGTK3Win32VirtualFree ----
VirtualFree    VirtualFree函数在调用进程的虚拟地址空间中释放或分解（或两者）一个页面的区域。
语法
参数
【lpAddress】指向要释放的页面的基地址。如果【dwFreeType】参数包含MEM_RELEASE标志，则当该页面被保留时，此参数必须是VirtualAlloc函数返回的基址。【的d


-------------------------------------------------------- KeyGTK3Win32VirtualFreeEx ----
VirtualFreeEx    [New - Windows NT]VirtualFreeEx函数在指定进程的虚拟地址空间内释放，分解或同时释放内存区域。
语法
参数
【hProcess】处理过程。该函数释放此进程的虚拟地址空间内存。您必须具有此进程的PROCESS_VM_OPERATION权限。如果没有，则该函数失败。【lpAddress】指向要释放的内


-------------------------------------------------------- KeyGTK3Win32VirtualLock ----
VirtualLock    VirtualLock函数将进程的虚拟地址空间的指定区域锁定到内存中，确保对该区域的后续访问不会导致页面错误。
语法
参数
【lpAddress】指向要锁定的页面的基地址。【的dwSize】指定要锁定的区域的大小（以字节为单位）。受影响页面的所有页面包含从【lpAddress】参数到（【lpAddress】 + 


-------------------------------------------------------- KeyGTK3Win32VirtualProtect ----
VirtualProtect    VirtualProtect函数可以更改调用进程虚拟地址空间中已提交页面的访问保护。此函数不同于VirtualProtectEx ,，它会更改任何进程的访问保护。
语法
参数
【lpAddress】指向要更改其访问保护属性的页面区域的基址。必须在VirtualAlloc或VirtualAllocEx函数的一次调用中分配指定区域中的所有页面。这些页面不能跨越通过单独


-------------------------------------------------------- KeyGTK3Win32VirtualProtectEx ----
VirtualProtectEx    VirtualProtectEx函数可以更改指定进程的虚拟地址空间中已提交页面区域的访问保护。请注意，此函数与VirtualProtect不同，只会调用调用进程的访问保护。
语法
参数
【hProcess】标识要更改其内存保护的进程。句柄必须具有PROCESS_VM_OPERATION权限。有关PROCESS_VM_OPERATION的更多信息，请参阅OpenProcess


-------------------------------------------------------- KeyGTK3Win32VirtualQuery ----
VirtualQuery    VirtualQuery函数提供有关调用进程的虚拟地址空间中的一系列页面的信息。
语法
参数
【lpAddress】指向要查询的页面的基地址。该值向下舍入到下一页边界。要确定主机上的页面大小，请使用GetSystemInfo函数。【lpBuffer】指向MEMORY_BASIC_IN


-------------------------------------------------------- KeyGTK3Win32VirtualQueryEx ----
VirtualQueryEx    VirtualQueryEx函数提供有关指定进程的虚拟地址空间内的一系列页面的信息。
语法
参数
【hProcess】标识查询其内存信息的进程。句柄必须具有PROCESS_QUERY_INFORMATION权限。【lpAddress】指向要查询的页面的基地址。该值向下舍入到下一页边界。要


-------------------------------------------------------- KeyGTK3Win32VirtualUnlock ----
VirtualUnlock    VirtualUnlock函数解锁进程的虚拟地址空间中的指定范围的页面，如果需要，系统可以将页面切换到页面文件。
语法
参数
【lpAddress】指向要解锁的页面的基地址。【的dwSize】指定要解锁的区域的大小（以字节为单位）。受影响页面的区域包括从【lpAddress】参数到（【lpAddress】 + 【的


-------------------------------------------------------- KeyGTK3Win32VkKeyScan ----
VkKeyScan    VkKeyScan函数将字符转换为当前键盘的相应虚拟键代码和移位状态。
语法
参数
【ch】指定要转换为虚拟键代码的字符。
返回值
如果函数成功，返回值的低位字节包含虚拟键代码，高位字节包含移位状态，它可以是以下标志位的组合：位含义1按SHIFT键。2按住CTRL键。4


-------------------------------------------------------- KeyGTK3Win32VkKeyScanEx ----
VkKeyScanEx    [Now Supported on Windows NT]VkKeyScanEx函数将字符转换为相应的虚拟键代码和移位状态。该函数使用由给定的键盘布局句柄标识的输入语言和物理键盘布局来翻译字符。
语法
参数
【ch】指定要转换为虚拟键代码的字符。【dwhkl】标识用于翻译字符的键盘布局。此参数可以是以前由LoadKeyboardLayout函数返回的任何键盘布局句柄。
返回值
如果函数成功，


-------------------------------------------------------- KeyGTK3Win32VwStreamCloseFunc ----
VwStreamCloseFunc关闭文件。文件解析器必须执行任何必要的清理，例如关闭与给定文件相关的任何其他打开的文件。VOID VwStreamCloseFunc（SOFILE 【HFILE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32VwStreamOpenFunc ----
VwStreamOpenFunc检查指定文件的有效性并返回有关文件解析器的信息。INT VwStreamOpenFunc（SOFILE 【HFILE】, INT 【wFileId】, U_BYTE VWPTR 【*pFileName】, SOFILTERINFO VWPTR 【*pFilterInfo】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32VwStreamReadFunc ----
VwStreamReadFunc根据当前部分类型和文件内容输出字符，单元格或字段。INT VwStreamReadFunc（SOFILE 【HFILE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32VwStreamReadRecordFunc ----
VwStreamReadRecordFunc通过调用各种流输出函数输出单个记录。此函数应输出单个记录，然后在返回之前使用SO_RECORDBREAK值调用SOPutBreak函数。SO_EOFBREAK和SO_SECTIONBREAK条件不需要被此函数所困扰。VOID VwStreamReadRecordFunc（SOFILE 【HFILE】, DWORD 【dwDatacy】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32VwStreamSectionFunc ----
VwStreamSectionFunc设置部分的参数。至少这个函数应该调用SOPutSectionType和SOPutSectionName函数来设置段类型和名称。如果该部分是电子表格，则该函数还应设置单元格宽度，如果该部分是数据库，则也应该设置字段格式。显示引擎在调用VwStreamOpenFunc函数后调用VwStreamReadFunc函数之前调用该函数。在任何VwStreamReadFunc结束后，还会调用具有SO_SECTIONBREAK值的SOPutBreak函数。INT VwStreamSectionFunc（SOFILE 【HFILE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32VwStreamSeekFunc ----
VwStreamSeekFunc与线路滤波器相同的定义搜索函数。INT VwStreamSeekFunc（SOFILE 【HFILE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32VwStreamTellFunc ----
VwStreamTellFunc与线路滤波器相同的定义告诉函数。INT VwStreamTellFunc（SOFILE 【HFILE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyGTK3Win32WaitCommEvent ----
WaitCommEvent    WaitCommEvent函数等待指定通信设备发生事件。由该函数监视的事件集包含在与设备句柄相关联的事件掩码中。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【lpEvtMask】指向一个32位变量，接收一个指示发生的事件类型的掩码。如果发生错误，则该值为零;否则，它是以下值之一：值


-------------------------------------------------------- KeyGTK3Win32WaitForDebugEvent ----
WaitForDebugEvent    WaitForDebugEvent函数等待调试事件发生在被调试的进程中。
语法
参数
【lpDebugEvent】指向DEBUG_EVENT结构，其中填写有关调试事件的信息。【dwMilliseconds】指定等待调试事件的毫秒数。如果此参数为零，该函数将测试调试事件并立即返


-------------------------------------------------------- KeyGTK3Win32WaitForInputIdle ----
WaitForInputIdle    WaitForInputIdle函数等待直到给定进程正在等待用户输入，没有输入挂起，或直到超时间隔过去。
语法
参数
【hProcess】标识过程。【dwMilliseconds】指定超时间隔（以毫秒为单位）。如果【dwMilliseconds】为INFINITE，该函数在进程空闲之前不会返回。
返回值



-------------------------------------------------------- KeyGTK3Win32WaitForMultipleObjects ----
WaitForMultipleObjects    当发生以下其中一种情况时，WaitForMultipleObjects函数返回：*任何一个或所有指定的对象都处于信号状态。*经过了超时间隔。
语法
参数
【NCOUNT】指定【lpHandles】指向的数组中的对象句柄数。对象句柄的最大数量为MAXIMUM_WAIT_OBJECTS。【lpHandles】指向一组对象句柄。有关可以指定句柄的对


-------------------------------------------------------- KeyGTK3Win32WaitForMultipleObjectsEx ----
WaitForMultipleObjectsEx    当发生以下其中一种情况时，WaitForMultipleObjectsEx函数返回：*任何一个或所有指定的对象都处于信号状态。* I / O完成例程或异步过程调用（APC）排队等待线程。*经过了超时间隔。
语法
参数
【NCOUNT】指定在【lpHandles】指向的数组中等待的对象句柄数。对象句柄的最大数量为MAXIMUM_WAIT_OBJECTS。【lpHandles】指向一组对象句柄。有关可以指定句


-------------------------------------------------------- KeyGTK3Win32WaitForPrinterChange ----
WaitForPrinterChange  WaitForPrinterChange函数已过时。此函数仅用于与16位版本的Windows兼容。在打印机或打印服务器上发生一个或多个请求的更改时，基于Win32的应用程序应使用FindFirstPrinterChangeNotification，FindNextPrinterChangeNotification和FindClosePrinterChangeNotification函数来监视打印机或打印服务器上发生的请求的更改。


-------------------------------------------------------- KeyGTK3Win32WaitForSingleObject ----
WaitForSingleObject    当发生以下其中一种情况时，WaitForSingleObject函数返回：*指定的对象处于信号状态。*经过了超时间隔。
语法
参数
【hHandle】标识对象。有关可以指定句柄的对象类型的列表，请参阅以下备注部分。Windows NT：句柄必须具有SYNCHRONIZE访问权限。有关详细信息，请参阅访问掩码和访问权限.【


-------------------------------------------------------- KeyGTK3Win32WaitForSingleObjectEx ----
WaitForSingleObjectEx    当发生以下其中一种情况时，WaitForSingleObjectEx函数返回：*指定的对象处于信号状态。* I / O完成例程或异步过程调用（APC）排队等待线程。*经过了超时间隔。
语法
参数
【hHandle】标识对象。有关可以指定句柄的对象类型的列表，请参阅以下备注部分。Windows NT：句柄必须具有SYNCHRONIZE访问权限。有关详细信息，请参阅访问掩码和访问权限.【


-------------------------------------------------------- KeyGTK3Win32WaitMessage ----
WaitMessage    当线程在其消息队列中没有其他消息时，WaitMessage函数可以控制其他线程。WaitMessage函数暂停线程，直到新消息被放置在线程的消息队列中才会返回。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyGTK3Win32WaitNamedPipe ----
WaitNamedPipe    WaitNamedPipe函数等待直到超时间隔或指定的命名管道的实例可用于连接（即，管道的服务器进程在管道上具有待处理的ConnectNamedPipe操作）。
语法
参数
【lpNamedPipeName】指向一个以空字符结尾的字符串，指定命名管道的名称。字符串必须包含服务器进程正在执行的计算机的名称。如果管道是本地的，则可以使用【服务器名称】的时间段。使用以


-------------------------------------------------------- KeyGTK3Win32WideCharToMultiByte ----
WideCharToMultiByte    WideCharToMultiByte函数将宽字符字符串映射到新的字符串。新的字符串不一定来自多字节字符集。
语法
参数
【CodePage】指定用于执行转换的代码页。该参数可以被赋予在系统中安装或可用的任何代码页的值。以下值可用于指定系统默认代码页之一：值含义CP_ACPANSI代码页CP_MACCPMaci


-------------------------------------------------------- KeyGTK3Win32WidenPath ----
WidenPath    WidenPath函数将当前路径重新定义为要使用当前选定的笔在指定设备上下文中绘制路径时绘制的区域。
语法
参数
【HDC】标识包含封闭路径的设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.GetLastError可能会


-------------------------------------------------------- KeyGTK3Win32WindowFromDC ----
WindowFromDC    WindowFromDC函数返回与给定显示设备上下文（DC）关联的窗口的句柄。使用给定设备上下文的输出函数绘制到此窗口中。
语法
参数
【hDC】标识要检索关联窗口的句柄的设备上下文。
返回值
如果函数成功，则返回值是与给定显示设备上下文相关联的窗口的句柄。如果函数失败，返回值为NULL。



-------------------------------------------------------- KeyGTK3Win32WindowFromPoint ----
WindowFromPoint    WindowFromPoint函数检索包含指定点的窗口的句柄。
语法
参数
【点】指定一个定义要检查点的POINT结构。
返回值
如果函数成功，则返回值是包含该点的窗口的句柄。如果给定点没有窗口，则返回值为NULL。
描述
即使该点在窗口内，WindowFr


-------------------------------------------------------- KeyGTK3Win32WindowProc ----
WindowProc    WindowProc函数是一个应用程序定义的回调函数，用于处理发送到窗口的消息。
语法
参数
【HWND】标识窗口。【uMsg】指定消息。【wParam中】指定附加消息信息。该参数的内容取决于【uMsg】参数的值。【lParam的】指定附加消息信息。该参数的内容取决于【uMsg】参数


-------------------------------------------------------- KeyGTK3Win32WinExec ----
WinExec    WinExec函数运行指定的应用程序。提供此函数以兼容早期版本的Windows。对于基于Win32的应用程序，请使用CreateProcess函数。
语法
参数
【lpCmdLine】指向包含要执行的应用程序的命令行（filename加上可选参数）的以null结尾的字符串。如果【lpCmdLine】参数中的可执行文件的名称不包含目录路径，Window


-------------------------------------------------------- KeyGTK3Win32WinHelp ----
WinHelp    WinHelp函数启动Windows帮助（WINHELP.EXE），并传递指示应用程序请求的帮助性质的其他数据。应用程序指定要显示的帮助文件的名称以及需要的目录路径。
语法
参数
【hWndMain】标识请求帮助的窗口。WinHelp函数使用此句柄来跟踪哪些应用程序已请求帮助。【lpszHelp】指向包含路径的空终止字符串（如有必要）以及帮助应用程序要显示的帮助文件的


-------------------------------------------------------- KeyGTK3Win32WinLoadTrustProvider ----
WinLoadTrustProvider[New - Windows NT]WinLoadTrustProvider函数将信任提供者DLL加载到调用进程的地址空间中。该函数将已注册的信任提供程序加载为能够处理指定的操作标识符。您可以使用WinLoadTrustProvider来确定本地计算机是否具有支持指定操作标识符的信任提供程序。WinLoadTrustProvider不执行该操作。
语法
参数
【ActionID】指向标识信任提供者操作的GUID结构的指针。WinTrust服务旨在与由第三方实施的信任提供商合作。每个信任提供者都提供自己唯一的一组操作标识符。有关信任提供程序支持的操


-------------------------------------------------------- KeyGTK3Win32WinMain ----
WinMain    系统调用WinMain函数作为基于Win32的应用程序的初始入口点。
语法
参数
【的hInstance】标识应用程序的当前实例。【hPrevInstance】标识应用程序的上一个实例。对于基于Win32的应用程序，此参数始终为空。如果需要检测是否存在另一个实例，请使用C


-------------------------------------------------------- KeyGTK3Win32WinSubmitCertificate ----
WinSubmitCertificate[New - Windows NT]WinSubmitCertificate函数将WIN_CERTIFICATE结构传递给所有在WinTrust服务器上注册的信任提供者。
语法
参数
【lpCertificate】指向WIN_CERTIFICATE结构。
返回值
如果函数成功，则返回值为非零值。如果【lpCertificate】参数无效，返回值为零。要获取扩展错误信息


-------------------------------------------------------- KeyGTK3Win32WinTrustProviderClientInitialize ----
WinTrustProviderClientInitialize[New - Windows NT]WinTrustProviderClientInitialize函数是WinTrust在加载信任提供者DLL的客户端组件时调用的初始化函数。每个信任提供者必须导出WinTrustProviderClientInitialize函数。
语法
参数
【dwWinTrustRevision】表示调用此函数的WinTrust组件的修订级别。WinTrust将此值设置为WIN_TRUST_REVISION_1_0。【lpWinTrustInf


-------------------------------------------------------- KeyGTK3Win32WinTrustProviderClientUnload ----
WinTrustProviderClientUnload[New - Windows NT]WinTrustProviderClientUnload函数表示WinTrust准备从客户端应用程序卸载信任提供者DLL。但是，WinTrust不保证在客户端进程退出之前调用此函数。因此，如有必要，信任提供者应使用其他清理机制。
语法
参数
【lpTrustProviderInfo】指向信任提供者在初始化过程中分配的缓冲区。信任提供者在WinTrustProviderClientInitialize呼叫中将此指针传递给WinTr


-------------------------------------------------------- KeyGTK3Win32WinTrustProviderPing ----
WinTrustProviderPing[New - Windows NT]WinTrustProviderPing函数使信任提供商的客户端组件与其服务器对应方联系。WinTrust的当前版本不包括WinTrust服务器组件。因此，WinTrust不实现此函数，并且信任提供者DLL不需要实现它。
语法
参数
【lpProviderName】指向包含信任提供程序名称的以null结尾的Unicode字符串。系统管理员将此名称分配给用于存储信任提供程序的配置信息的注册表项。WinTrust将此名称传递


-------------------------------------------------------- KeyGTK3Win32WinTrustProviderServerInitialize ----
WinTrustProviderServerInitialize[New - Windows NT]WinTrustProviderServerInitialize函数是WinTrust在加载信任提供者DLL的服务器组件时调用的初始化函数。WinTrust的当前版本不包括WinTrust服务器组件。因此，WinTrust不会调用此函数，并且信任提供者DLL不需要导出它。
语法
参数
【dwWinTrustRevision】表示调用此函数的WinTrust组件的修订级别。WinTrust将此值设置为WIN_TRUST_REVISION_1_0。【lpWinTrustInf


-------------------------------------------------------- KeyGTK3Win32WinTrustProviderServerUnload ----
WinTrustProviderServerUnload[New - Windows NT]WinTrustProviderServerUnload函数表示WinTrust准备从WinTrust服务器进程卸载信任提供者DLL。WinTrust的当前版本不包括WinTrust服务器组件。因此，信任提供者DLL不需要实现此函数。
语法
参数
【lpTrustProviderInfo】指向信任提供者在初始化过程中分配的缓冲区。信任提供者在WinTrustProviderServerInitialize呼叫中将此指针传递给WinTr


-------------------------------------------------------- KeyGTK3Win32WinTrustProviderSubmitCertificate ----
WinTrustProviderSubmitCertificate[New - Windows NT]WinTrustProviderSubmitCertificate函数将WIN_CERTIFICATE结构传递给信任提供者。当应用程序调用{??989796014}函数时，WinTrust将加载并调用所有注册的信任提供者的WinTrustProviderSubmitCertificate函数。
语法
参数
【lpCertificate】指向可能包含信任提供者感兴趣的证书的WIN_CERTIFICATE结构。
返回值
没有。
描述
每个信任提供者可以保存证书供将来使用，也可以忽略它。Wi


-------------------------------------------------------- KeyGTK3Win32WinTrustProviderVerifyTrust ----
WinTrustProviderVerifyTrust[New - Windows NT]WinTrustProviderVerifyTrust函数对指定的主题执行指定的验证操作。当应用程序调用{??989796013}函数时，WinTrust调用支持指定操作标识符的信任提供者的WinTrustProviderVerifyTrust函数。
语法
参数
【HWND】处理来电者的窗口。信任提供者可以使用该值来确定它是否可以与用户交互以执行由动作标识符指示的验证操作。然而，信任提供者通常执行验证操作而不需要用户的输入。此参数可以是以下值之一。值


-------------------------------------------------------- KeyGTK3Win32WinTrustSipInitialize ----
WinTrustSipInitialize[New - Windows NT]WinTrustSipInitialize函数是WinTrust加载主题接口包（SIP）DLL时调用的初始化函数。每个SIP都必须导出一个WinTrustSipInitialize函数。
语法
参数
【dwWinTrustRevision】表示调用此函数的WinTrust组件的修订级别。WinTrust将此值设置为WIN_TRUST_REVISION_1_0。【lpSipInfo】指向接


-------------------------------------------------------- KeyGTK3Win32WinTrustSubjectCheckContentInfo ----
WinTrustSubjectCheckContentInfo[New - Windows NT]WinTrustSubjectCheckContentInfo函数验证指定的证书是否充分表示指定主题的内容。
语法
参数
【lpSubject】指向WIN_TRUST_SIP_SUBJECT结构的指针，描述要与证书进行比较的主题。【lpSignedData】指向WIN_CERT_TYPE_PKCS_SIGNED


-------------------------------------------------------- KeyGTK3Win32WinTrustSubjectEnumCertificates ----
WinTrustSubjectEnumCertificates[New - Windows NT]WinTrustSubjectEnumCertificates函数确定主题中捆绑的证书的类型。您可以检索主题包含的所有证书类型的列表，或者您可以确定主题是否包含指定的证书类型。
语法
参数
【lpSubject】指向WIN_TRUST_SIP_SUBJECT结构的指针，用于标识从中获取证书信息的主题。【dwTypeFilter】指定要列出的证书类型。此参数可以为零以列出所有类型


-------------------------------------------------------- KeyGTK3Win32WinTrustSubjectGetCertHeader ----
WinTrustSubjectGetCertHeader[New - Windows NT]WinTrustSubjectGetCertHeader函数从指定的主题中检索WIN_CERTIFICATE结构的标头部分。来电者指定要检索的证书的类型。返回的信息不包括WIN_CERTIFICATE结构的bCertificate成员中的数据。
语法
参数
【lpSubject】指向WIN_TRUST_SIP_SUBJECT结构的指针，用于标识从中获取证书头的主题。【dwCertificateIndex】指定要检索的证书的类型。您可以调用Win


-------------------------------------------------------- KeyGTK3Win32WinTrustSubjectGetCertificate ----
WinTrustSubjectGetCertificate[New - Windows NT]WinTrustSubjectGetCertificate函数从主题中检索指定的证书。
语法
参数
【lpSubject】指向WIN_TRUST_SIP_SUBJECT结构的指针，用于标识从中获取证书的主题。【dwCertificateIndex】指定要检索的证书的类型。您可以调用WinT


-------------------------------------------------------- KeyGTK3Win32WinTrustSubjectGetName ----
WinTrustSubjectGetName[New - Windows NT]WinTrustSubjectGetName函数从表示主题的PKCS＃7签名数据证书中检索主题的名称。信任提供者可以使用该名称来存储和检索与该主题相关联的证书。
语法
参数
【lpSubject】指向WIN_TRUST_SIP_SUBJECT结构的指针，用于标识主题的类型。请注意，该函数从【lpSignedData】结构中检索主题的名称，而不是主题。【lpSig


-------------------------------------------------------- KeyGTK3Win32WinVerifyTrust ----
WinVerifyTrust[New - Windows NT]WinVerifyTrust函数对指定的主题执行指定的验证操作。该函数将查询传递给支持操作标识符的信任提供者（如果有的话）。
语法
参数
【HWND】处理来电者的窗口。信任提供者可以使用此值来确定它是否可以与用户交互。然而，信任提供者通常使用来自用户的输入执行验证操作。此参数可以是以下值之一。值含义INVALID_HANDLE


-------------------------------------------------------- KeyGTK3Win32WNetAddConnection ----
WNetAddConnection    WNetAddConnection函数使呼叫应用程序能够将本地设备连接到网络资源。一个成功的连接是持久的，这意味着Windows会在后续的登录操作中自动恢复连接。提供此函数以兼容早期版本的Microsoft Windows。对于新的应用程序，请使用WNetAddConnection2函数。
语法
参数
【lpRemoteName】指向指定要连接到的网络资源的以空字符结尾的字符串。【//指向密码字符串的指针】指向以空字符结尾的字符串，指定用于进行连接的密码。此参数通常是与当前用户相关联的密码


-------------------------------------------------------- KeyGTK3Win32WNetAddConnection2 ----
WNetAddConnection2    WNetAddConnection2函数连接到网络资源。该函数可以将本地设备重定向到网络资源。
语法
参数
【lpNetResource】指向NETRESOURCE结构，指定建议连接的详细信息：有关网络资源，本地设备和网络资源提供程序的信息。您必须指定NETRESOURCE结构的以下成员：会员描述


-------------------------------------------------------- KeyGTK3Win32WNetAddConnection3 ----
WNetAddConnection3    WNetAddConnection3函数连接到网络资源。该函数可以将本地设备重定向到网络资源。
语法
参数
【hwndOwner】指定网络资源提供者可以用作对话框的所有者窗口的窗口。【hwndOwner】参数可能为NULL。如果是，则呼叫WNetAddConnection3相当于调用WNetAdd


-------------------------------------------------------- KeyGTK3Win32WNetCancelConnection ----
WNetCancelConnection    WNetCancelConnection函数打破了现有的网络连接。该函数是为兼容早期版本的Microsoft Windows而提供的。对于新的应用程序，请使用WNetCancelConnection2函数。
语法
参数
【lpName】指向一个以null结尾的字符串，指定重定向本地设备或要断开连接的远程网络资源的名称。当此参数指定重定向本地设备时，只有指定的设备重定向被破坏。如果参数指定了远程网络资源，则只


-------------------------------------------------------- KeyGTK3Win32WNetCancelConnection2 ----
WNetCancelConnection2    WNetCancelConnection2函数打破了现有的网络连接。它也可以用于删除当前未连接的记忆网络连接。此函数取代WNetCancelConnection.
语法
参数
【lpName】指向一个以null结尾的字符串，指定重定向本地设备或要断开连接的远程网络资源的名称。如果此参数指定重定向的本地资源，则只会指定重定向;否则，到远程网络资源的所有连接都将被破坏


-------------------------------------------------------- KeyGTK3Win32WNetCloseEnum ----
WNetCloseEnum    WNetCloseEnum函数将结束由WNetOpenEnum函数启动的网络资源枚举。
语法
参数
【henu】标识枚举实例。这个句柄必须由WNetOpenEnum函数返回。
返回值
如果函数成功，返回值为NO_ERROR。如果函数失败，则返回值是错误代码。要获取扩展错误信息，请调用G


-------------------------------------------------------- KeyGTK3Win32WNetConnectionDialog ----
WNetConnectionDialog    WNetConnectionDialog函数启动一个常规浏览对话框，用于连接到网络资源。
语法
参数
【HWND】标识所属窗口。【dwType】指定允许连接的资源类型。该参数可以是以下值：值含义RESOURCETYPE_DISK连接到磁盘资源。
返回值
如果函数成功，返回值为NO_ERR


-------------------------------------------------------- KeyGTK3Win32WNetDisconnectDialog ----
WNetDisconnectDialog    WNetDisconnectDialog函数启动一个常规浏览对话框，以断开与网络资源的连接。
语法
参数
【HWND】标识所属窗口。【dwType】指定要断开连接的资源类型。此参数可能是以下值之一：值含义RESOURCETYPE_DISK断开与磁盘资源的连接。RESOURCETYPE_PRINT


-------------------------------------------------------- KeyGTK3Win32WNetEnumResource ----
WNetEnumResource    WNetEnumResource函数继续由WNetOpenEnum函数启动的网络资源枚举。
语法
参数
【henu】标识枚举实例。此句柄必须由WNetOpenEnum返回。【lpcCount】指向指定所请求条目数的变量。如果请求的号码为0xFFFFFFFF，则该函数返回尽可能多的条目。当函数成


-------------------------------------------------------- KeyGTK3Win32WNetGetConnection ----
WNetGetConnection    WNetGetConnection函数检索与本地设备关联的网络资源的名称。
语法
参数
【lpLocalName】指向以null结尾的字符串，指定获取网络名称的本地设备的名称。【lpRemoteName】指向缓冲区，接收用于进行连接的以空值终止的远程名称。【lpnLength】


-------------------------------------------------------- KeyGTK3Win32WNetGetLastError ----
WNetGetLastError    WNetGetLastError函数检索由Windows网络函数设置的最新的扩展错误代码。
语法
参数
【// pointer to error code】指向接收网络提供商报告的错误代码的变量。错误代码特定于网络提供商。【lpErrorBuf】指向缓冲区，它接收描述错误的以null结尾的字符


-------------------------------------------------------- KeyGTK3Win32WNetGetUniversalName ----
WNetGetUniversalName    WNetGetUniversalName函数为网络资源采用基于驱动器的路径，并获取包含更通用形式的名称的数据结构。
语法
参数
【lpLocalPath】指向作为网络资源的基于驱动器的路径的以null结尾的字符串。例如，如果驱动器H已映射到网络驱动器共享，并且感兴趣的网络资源是该共享目录\\ WIN32 \\ EXA


-------------------------------------------------------- KeyGTK3Win32WNetGetUser ----
WNetGetUser    WNetGetUser函数检索用于建立网络连接的当前默认用户名或用户名。
语法
参数
【lpName】指向以空值终止的字符串，指定已重定向到网络资源的本地设备的名称，或指定已建立连接的网络资源的远程名称。如果此参数为NULL，Windows将返回该进程的当前用户的名称。【lp


-------------------------------------------------------- KeyGTK3Win32WNetOpenEnum ----
WNetOpenEnum    WNetOpenEnum函数启动网络资源或现有连接的枚举。
语法
参数
【dwScope】指定枚举的范围。此参数可以是以下值之一：值含义RESOURCE_CONNECTED所有当前连接的资源（【dwUsage】参数被忽略）。RESOURCE_GLOBALNET网


-------------------------------------------------------- KeyGTK3Win32WriteConsole ----
WriteConsole    WriteConsole函数将字符串写入从当前光标位置开始的控制台屏幕缓冲区。
语法
参数
【hConsoleOutput】标识要写入的控制台屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【lpBuffer】指向包含要写入屏幕缓冲区的字符的缓冲区。【nNumberOfCh


-------------------------------------------------------- KeyGTK3Win32WriteConsoleInput ----
WriteConsoleInput    WriteConsoleInput函数将数据直接写入控制台输入缓冲区。
语法
参数
【hConsoleInput】标识输入缓冲区。句柄必须具有GENERIC_WRITE权限。【lpBuffer】指向包含要写入输入缓冲区的数据的INPUT_RECORD缓冲区。【nLength


-------------------------------------------------------- KeyGTK3Win32WriteConsoleOutput ----
WriteConsoleOutput    WriteConsoleOutput函数将字符和颜色属性数据写入控制台屏幕缓冲区中指定的矩形块字符单元格。要写入的数据取自源缓冲器中指定位置的相应尺寸的矩形块。
语法
参数
【hConsoleOutput】标识屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【lpBuffer】指向包含要写入屏幕缓冲区的数据的源缓冲区。该指针被视为由【dwBufferSi


-------------------------------------------------------- KeyGTK3Win32WriteConsoleOutputAttribute ----
WriteConsoleOutputAttribute    WriteConsoleOutputAttribute函数将一些前景和背景颜色属性复制到控制台屏幕缓冲区的连续单元格，从指定位置开始。
语法
参数
【hConsoleOutput】标识屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【lpAttribute】指向包含要写入屏幕缓冲区的属性的缓冲区。【nLength】指定要写入的屏


-------------------------------------------------------- KeyGTK3Win32WriteConsoleOutputCharacter ----
WriteConsoleOutputCharacter    WriteConsoleOutputCharacter函数将从指定位置开始，将多个字符复制到控制台屏幕缓冲区的连续单元格。
语法
参数
【hConsoleOutput】标识屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【lpCharacter】指向包含要写入屏幕缓冲区的字符的缓冲区。【nLength】指定要写入的屏


-------------------------------------------------------- KeyGTK3Win32WriteFile ----
WriteFile    WriteFile函数将数据写入一个文件，并设计用于同步和异步操作。该函数开始在文件指针指示的位置将数据写入文件。写入操作完成后，文件指针将按实际写入的字节数进行调整，除非使用FILE_FLAG_OVERLAPPED打开文件。如果为重叠输入和输出（I / O）创建了文件句柄，则在写操作完成后，应用程序必须调整文件指针的位置。
语法
参数
【HFILE】标识要写入的文件。必须使用GENERIC_WRITE访问该文件创建文件句柄。Windows NT对于异步写入操作，【HFILE】可以是使用CreateFile函数的FILE_F


-------------------------------------------------------- KeyGTK3Win32WriteFileEx ----
WriteFileEx    WriteFileEx函数将数据写入文件。它专为异步操作而设计，不同于专为同步和异步操作而设计的WriteFile.
语法
参数
【HFILE】指定要写入的文件实体的打开句柄。必须使用FILE_FLAG_OVERLAPPED标志创建该文件句柄，并使用该文件对GENERIC_WRITE进行访问。Windows NT： 【


-------------------------------------------------------- KeyGTK3Win32WritePrinter ----
WritePrinter    WritePrinter函数通知打印后台处理程序数据应写入指定的打印机。
语法
参数
【hPrinter】标识打印机。【PBUFlb】指向包含应写入打印机的数据的字节数组。【cbBuf】指定数组的大小（以字节为单位）。【of variable with count of by


-------------------------------------------------------- KeyGTK3Win32WritePrivateProfileSection ----
WritePrivateProfileSectionWritePrivateProfileSection函数将替换初始化文件中指定部分下的键和值。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向一个以null结束的字符串，其中包含写入数据的部分的名称。此部分名称通常是呼叫应用程序的名称。【lpString】指向缓冲区，其中包含写入命名部分的新密钥名称和相关


-------------------------------------------------------- KeyGTK3Win32WritePrivateProfileString ----
WritePrivateProfileStringWritePrivateProfileString函数将字符串复制到指定的初始化文件的指定部分。此函数用于与16位基于Windows的应用程序兼容。基于WIn32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向一个以null结束的字符串，其中包含要复制字符串的部分的名称。如果该部分不存在，则创建它。该部分的名称与案例无关;字符串可以是大写和小写字母的任何组合。【lpKey


-------------------------------------------------------- KeyGTK3Win32WritePrivateProfileStruct ----
WritePrivateProfileStructWritePrivateProfileStruct函数将数据复制到初始化文件的给定部分中的指定键中。当它复制数据时，该函数计算校验和并将其附加到数据的末尾。GetPrivateProfileStruct函数使用校验和来确保数据的完整性。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpszSection】指向一个以null结束的字符串，其中包含要复制字符串的部分的名称。如果该部分不存在，则创建它。该部分的名称是不区分大小写的，字符串可以是大写和小写字母的任何组合。【


-------------------------------------------------------- KeyGTK3Win32WriteProcessMemory ----
WriteProcessMemory    WriteProcessMemory函数在指定的进程中写入内存。要写入的整个区域必须可访问，否则操作失败。
语法
参数
【hProcess】标识要写入内存的进程的打开句柄。该句柄必须具有PROCESS_VM_WRITE和PROCESS_VM_OPERATION访问进程。【lpBaseAddress】指向要写入


-------------------------------------------------------- KeyGTK3Win32WriteProfileSection ----
WriteProfileSectionWriteProfileSection函数用指定的键和值替换WIN.INI文件中指定部分的内容。此函数用于与16位Windows应用程序的兼容性。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向一个以null结束的字符串，其中包含写入数据的部分的名称。此部分名称通常是呼叫应用程序的名称。【lpString】指向缓冲区，其中包含写入命名部分的新密钥名称和相关


-------------------------------------------------------- KeyGTK3Win32WriteProfileString ----
WriteProfileStringWriteProfileString函数将一个字符串复制到WIN.INI文件的指定部分。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向一个以null结尾的字符串，指定要复制字符串的部分。如果该部分不存在，则创建它。该部分的名称不区分大小写;字符串可以是大写和小写字母的任何组合。【lpKeyName


-------------------------------------------------------- KeyGTK3Win32WriteTapemark ----
WriteTapemark    WriteTapemark函数将指定数量的文件标记，设置标记，短文件标记或长文件标记写入磁带设备。这些标记将磁带分区划分为较小的区域。
语法
参数
【hDevice】标识要写入标记的设备。该句柄是通过使用CreateFile函数创建的。【dwTapemarkType】指定要写入的标记的类型。此参数可以是以下值之一：值描述TAPE_FIL


-------------------------------------------------------- KeyGTK3Win32wsprintf ----
wsprintf    wsprintf函数格式化并将一系列字符和值存储在缓冲区中。根据格式字符串中的相应格式规范，将任何参数转换并复制到输出缓冲区。该函数向其写入的字符附加一个终止空字符，但返回值不包括字符计数中的终止空字符。
语法
参数
【LPOUT】指向缓冲区以接收格式化的输出。【lpFmt】指向包含格式控制规范的以null结尾的字符串。除了普通ASCII字符外，每个参数的格式说明都会出现在此字符串中。有关格式说明的详细信


-------------------------------------------------------- KeyGTK3Win32wvsprintf ----
wvsprintf     函数wvsprintf函数将一系列字符和值存储在缓冲区中。参数列表指向的项目根据格式控制字符串中的相应格式规范进行转换并复制到输出缓冲区。该函数向其写入的字符附加一个终止空字符，但返回值不包括字符计数中的终止空字符。
语法
参数
【POUTPUT】指向缓冲区以接收格式化的输出。【lpFormat】指向包含格式控制规范的以null结尾的字符串。除了普通ASCII字符外，每个参数的格式说明都会出现在此字符串中。有关格式规


-------------------------------------------------------- KeyGTK3Win32Yield ----
Yield  产量函数已过时。此函数仅用于与16位版本的Windows兼容。在基于Win32的应用程序编程接口（API）中，此函数不起作用。包含窗口的线程应使用DispatchMessage，PeekMessage或TranslateMessage函数。消息循环函数处理消息同步，并在适当的时间产生。不包含窗口的线程应使用休眠时间为零毫秒的睡觉函数放弃其当前时间片段的剩余部分。创建进程的线程可以使用WaitForInputIdle等待新进程完成初始化。
另请参见
DispatchMessage, PeekMessage, 睡觉, TranslateMessage, WaitForInputIdle


-------------------------------------------------------- KeyGTK3Win32ZeroMemory ----
ZeroMemory    ZeroMemory函数用零填充一个内存块。
语法
参数
【目的地】指向内存块的起始地址以填充零。【长度】指定要用零填充的内存块的大小（以字节为单位）。
返回值
该函数没有返回值。



-------------------------------------------------------- KeyGTK3Win32_hread ----
_hread     _hread函数从指定的文件读取数据。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用ReadFile函数。
语法
参数
【HFILE】标识指定的文件。【lpBuffer】指向包含从文件读取的数据的缓冲区。【lBytes】指定要从文件读取的字节数。
返回值
返回值表示从文件中实际读取的字节数。如果读取的字节


-------------------------------------------------------- KeyGTK3Win32_hwrite ----
_hwrite    _hwrite函数将数据写入指定的文件。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用WriteFile函数。
语法
参数
HFILE标识指定的文件。lpBuffer指向包含要写入文件的数据的缓冲区。lBytes指定要写入文件的字节数。
返回值
如果函数成功，则返回值表示实际写入文件的字节数。如果函数失败，返


-------------------------------------------------------- KeyGTK3Win32_lclose ----
_lclose    _lclose函数关闭指定的文件，使其不再可用于阅读或写入。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用CloseHandle函数。
语法
参数
【HFILE】标识要关闭的文件。该句柄由创建或最后打开文件的函数返回。
返回值
如果函数成功，返回值为零。如果函数失败，返回值为HFILE_ERROR。要获取扩展错误信息，请调用GetL


-------------------------------------------------------- KeyGTK3Win32_lcreat ----
_lcreat    _lcreat函数创建或打开指定的文件。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用CreateFile函数。
语法
参数
【lpPathName】指向以空字符结尾的字符串，指定要打开的文件。字符串必须由Windows ANSI字符集的字符组成。【//文件属性】指定文件属性。此参数必须是以下值之一：值含义0正常（


-------------------------------------------------------- KeyGTK3Win32_llseek ----
_llseek    _llseek函数重新定位以前打开的文件中的文件指针。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用SetFilePointer函数。
语法
参数
【HFILE】标识文件。【我偏移fy】指定文件指针要移动的字节数。【iOrigin】指定文件指针的起始位置和方向。此参数必须是以下值之一：值含义FILE_BEGIN从文件的开头移动文件指针【


-------------------------------------------------------- KeyGTK3Win32_lopen ----
_lopen     _lopen函数打开现有文件，并将文件指针设置为文件的开头。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用CreateFile函数。
语法
参数
【lpPathName】指向以空字符结尾的字符串，指定要打开的文件。字符串必须由Windows ANSI字符集的字符组成。【iReadWrite】指定打开文件的方式。该参数由一个访问模式和可


-------------------------------------------------------- KeyGTK3Win32_lread ----
_lread     _lread函数从指定的文件读取数据。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用ReadFile函数。
语法
参数
【HFILE】标识指定的文件。【lpBuffer】指向包含从文件读取的数据的缓冲区。【指向包含要写入文件的数据的缓冲区。】指定要从文件读取的字节数。
返回值
返回值表示从文件中实际读取的


-------------------------------------------------------- KeyGTK3Win32_lwrite ----
_lwrite    _lwrite函数将数据写入指定的文件。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用WriteFile函数。
语法
参数
【HFILE】标识指定的文件。【lpBuffer】指向包含要写入文件的数据的缓冲区。【指向包含要写入文件的数据的缓冲区。】指定要写入文件的字节数。
返回值
如果函数成功，则返回值表示实际
 

------------ KeyGTK3GtkAccelGroupFindFunc ----

GtkAccelGroupFindFunc
Syntax
Parameters
data  -  	. [closure]
Since 2.2
See Also
gtk3-Keyboard-Accelerators


------------ KeyGTK3GtkAccelMapForeach ----

GtkAccelMapForeach
语法
参数
data- 用户数据传递给gtk_accel_map_foreach（） orgtk_accel_map_foreach_unfiltered（）
accel_path- 当前加速器的加速路径
accel_key- 当前加速器的键
accel_mods- 当前加速器的修改器
changed- 更改了加速器的标志（如果为 TRUE，则加速器在运行时已更改，需要在加速器转储期间保存）
另请参见
gtk3-Accelerator-Maps


------------ KeyGTK3GtkAssistantPageFunc ----

GtkAssistantPageFunc
gtk_assistant_set_forward_page_func（） 使用的函数，用于知道给定当前页面的下一页是哪一页。它被称为两者，用于计算当用户按下？前进时的下一页？按钮和用于处理 “last？按钮。
语法
参数
current_page- 用于计算下一页的页码。
data- 用户数据。[关闭]
返回
下一页码。
另请参见
GtkAssistant


------------ KeyGTK3GtkBuilderConnectFunc ----

GtkBuilderConnectFunc
这是用于连接信号的函数的签名。它由gtk_builder_connect_signals（）和gtk_builder_connect_signals_full（）方法使用。它主要用于解释型语言绑定，但在程序员希望更好地控制信号连接过程时非常有用。请注意，此函数只能调用一次，后续调用将不执行任何操作。
语法
参数
builder- 一GtkBuilder
object- 要将信号连接到的对象
signal_name- 信号名称
handler_name- 处理程序的名称
connect_object- a ，如果非空，则使用 g_signal_connect_object（）GObject
flags  -  	GConnectFlags使用
user_data- 自2.12以来的用户数据
另请参见
GtkBuilder


------------ KeyGTK3GtkCalendarDetailFunc ----

GtkCalendarDetailFunc
这种函数为Pango标记提供了指定日期的详细信息。此类详细信息的示例包括假期或约会。该函数在没有可用信息时返回 NULL。
语法
参数
calendar- 一个.GtkCalendar
year- 需要详细说明的年份。
month- 需要详细信息的月份。
day- 需要详细信息的月份日期。
user_data- 与gtk_calendar_set_detail_func（）一起传递的数据。
返回
新分配的字符串，带有Pango标记，其中包含指定日期的详细信息，或 NULL。
自 2.14 起
另请参见
GtkCalendar


------------ KeyGTK3GtkCellAllocCallback ----

GtkCellAllocCallback
用于迭代单元格渲染器及其在 a 中分配的区域的回调函数的类型，请参见 gtk_cell_area_foreach_alloc（）。GtkCellArea
语法
参数
renderer- 要操作的单元格渲染器
cell_area- 分配给渲染器的区域位于矩形的gtk_cell_area_foreach_alloc（）
cell_background- 渲染器的背景区域位于gtk_cell_area_foreach_alloc（）的后台区域。
data- 用户提供的数据。[关闭]
返回
TRUE 可停止迭代单元格。
另请参见
GtkCellArea


------------ KeyGTK3GtkCellCallback ----

GtkCellCallback
用于迭代 的单元格呈现器的回调函数的类型，请参见 gtk_cell_area_foreach（）。GtkCellArea
语法
参数
renderer- 要操作的单元格渲染器
data- 用户提供的数据。[关闭]
返回
TRUE 可停止迭代单元格。
另请参见
GtkCellArea


------------ KeyGTK3GtkCellLayoutDataFunc ----

GtkCellLayoutDataFunc
一个函数，应根据需要设置cell_layout的单元格渲染器的值。
语法
参数
cell_layout- 一GtkCellLayout
cell- 要设置其值的单元格渲染器
tree_model- 模型
iter- a 指示要为其设置值的行GtkTreeIter
data- 传递给gtk_cell_layout_set_cell_data_func（）的用户数据
另请参见
GtkCellLayout


------------ KeyGTK3GtkClipboardClearFunc ----

GtkClipboardClearFunc
在更改或清除剪贴板的内容时将调用的函数。一旦调用，user_data_or_owner参数将不再使用。
语法
参数
clipboard- 的GtkClipboard
user_data_or_owner- 传递给gtk_clipboard_set_with_data（）user_dataargument，或传递给gtk_clipboard_set_with_owner（）的所有者论证
另请参见
gtk3-Clipboards


------------ KeyGTK3GtkClipboardGetFunc ----

GtkClipboardGetFunc
将调用该函数以提供所选内容。如果通告了多种类型的数据，则可以通过 info 参数或通过检查selection_data的目标字段来确定请求的类型。如果数据可以成功转换到其中，则应通过调用gtk_selection_data_set（）（或相关函数，如gtk_selection_data_set_text（）））将其存储到selection_data对象中。如果未设置任何数据，则将通知请求者获取数据的尝试失败。
语法
参数
clipboard- 的GtkClipboard
selection_data- 应存储所请求数据的参数。GtkSelectionData
info- 与从数组传递到gtk_clipboard_set_with_data（） orgtk_clipboard_set_with_owner（） 的请求目标对应的信息字段。GtkTargetEntry
user_data_or_owner- togtk_clipboard_set_with_data（）通过的user_dataargument，或togtk_clipboard_set_with_owner（）传递的所有者论证
另请参见
gtk3-Clipboards


------------ KeyGTK3GtkClipboardImageReceivedFunc ----

GtkClipboardImageReceivedFunc
在收到gtk_clipboard_request_image（） 的结果或请求失败时要调用的函数。
语法
参数
clipboard- 的GtkClipboard
pixbuf- 接收到的图像
data- gtk_clipboard_request_image（） 的user_datasupplied。
自 2.6 起
另请参见
gtk3-Clipboards


------------ KeyGTK3GtkClipboardReceivedFunc ----

GtkClipboardReceivedFunc
在收到gtk_clipboard_request_contents（） 的结果或请求失败时要调用的函数。
语法
参数
clipboard- 的GtkClipboard
selection_data- 已收到包含数据的 a。如果检索数据失败，则长度字段selection_datawill为负数。GtkSelectionData
data- gtk_clipboard_request_contents（） 的user_datasupplied。
另请参见
gtk3-Clipboards


------------ KeyGTK3GtkClipboardTargetsReceivedFunc ----

GtkClipboardTargetsReceivedFunc
在收到gtk_clipboard_request_targets（） 的结果或请求失败时要调用的函数。
语法
参数
clipboard- 的GtkClipboard
atoms- 支持的目标，如 数组 ，或 NULLif 检索数据失败。GdkAtom
n_atoms- 原子阵列的长度。
data- gtk_clipboard_request_targets（） 的user_datasupplied。
2.4 起
另请参见
gtk3-Clipboards


------------ KeyGTK3GtkClipboardTextReceivedFunc ----

GtkClipboardTextReceivedFunc
在收到gtk_clipboard_request_text（） 的结果或请求失败时要调用的函数。
语法
参数
clipboard- 的GtkClipboard
text- 以 UTF-8 编码字符串形式接收的文本，或 NULLif 检索数据失败。
data- user_datasupplied到gtk_clipboard_request_text（）。
另请参见
gtk3-Clipboards


------------ KeyGTK3GtkEntryCompletionMatchFunc ----

GtkEntryCompletionMatchFunc
一个函数，它决定 iter 指示的行是否与给定的键匹配，并且应显示为键的可能完成。请注意，键是规范化的，并且是大小写折叠的（请参见 g_utf8_normalize（） 和 g_utf8_casefold（））。如果这不合适，请匹配函数有权访问未修改的密钥viagtk_entry_get_text （GTK_ENTRY （gtk_entry_completion_get_entry（）））。
语法
参数
completion- 的GtkEntryCompletion
key- 字符串匹配，规范化和大小写折叠
iter- a 表示要匹配的行GtkTreeIter
user_data- 提供给gtk_entry_completion_set_match_func（）的用户数据
返回
如果它应该显示为键的可能完成，则为 TRUE
另请参见
GtkEntryCompletion


------------ KeyGTK3GtkFileFilterFunc ----

GtkFileFilterFunc
与自定义筛选器一起使用的函数类型，seegtk_file_filter_add_custom（）。
语法
参数
filter_info- 根据传递给gtk_file_filter_add_custom（）的所需旗帜填充GtkFileFilterInfo
data- 传递给gtk_file_filter_add_custom（）的用户数据。[关闭]
返回
如果应显示文件，则为 TRUE
另请参见
GtkFileFilter


------------ KeyGTK3GtkFlowBoxFilterFunc ----

GtkFlowBoxFilterFunc
每当添加子更改器时将调用的函数。它使您可以控制孩子是否应该可见。
语法
参数
child- 一个可以被过滤的GtkFlowBoxChild
user_data- 用户数据。[关闭]
返回
如果行应可见，则为 TRUE，否则为
FALSE 自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3GtkFlowBoxForeachFunc ----

GtkFlowBoxForeachFunc
gtk_flow_box_selected_foreach（） 使用的函数。它将在框的每个选定子项上调用。
语法
参数
box- 一GtkFlowBox
child- 一GtkFlowBoxChild
user_data- 用户数据。[关闭]
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3GtkFlowBoxSortFunc ----

GtkFlowBoxSortFunc
一个函数，用于比较两个子项，以确定哪个应先来。
语法
参数
child1- 第一个孩子
child2- 第二个孩子
user_data- 用户数据。[关闭]
返回
如果 child1 应该在 child2 之前，则< 0，如果它们相等，则> 0，否则为 0，因为
3.12
另请参见
GtkFlowBox


------------ KeyGTK3GtkFontFilterFunc ----

GtkFontFilterFunc
用于决定在 中显示哪些字体的函数类型。请参见 gtk_font_chooser_set_filter_func（）。GtkFontChooser
语法
参数
family- 一PangoFontFamily
face- 属于家庭PangoFontFace
data- 传递给gtk_font_chooser_set_filter_func（）的用户数据。[关闭]
返回
如果应显示字体，则为 TRUE
另请参见
GtkFontChooser


------------ KeyGTK3GtkIconViewForeachFunc ----

GtkIconViewForeachFunc
gtk_icon_view_selected_foreach（） 用于映射所有选定行的函数。它将在视图中的每一行上调用。
语法
参数
icon_view- 一GtkIconView
path- 所选行的GtkTreePath
data- 用户数据
另请参见
GtkIconView


------------ KeyGTK3GtkListBoxFilterFunc ----

GtkListBoxFilterFunc
每当行更改或添加时，将调用该行，并允许您控制该行是否应可见。
语法
参数
row- 可以过滤的行
user_data- 用户数据。[关闭]
返回
如果行应可见，则为 TRUE，否则为
FALSE 自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3GtkListBoxSortFunc ----

GtkListBoxSortFunc
比较两行以确定哪一行应该排在第一位。
语法
参数
row1- 第一行
row2- 第二行
user_data- 用户数据。[关闭]
返回
如果 row1 应该在 row2 之前，则< 0，如果它们相等，则> 0，否则为 0，否则
为 3.10
另请参见
GtkListBox


------------ KeyGTK3GtkListBoxUpdateHeaderFunc ----

GtkListBoxUpdateHeaderFunc
每当行更改或行更改之前哪一行时，都会调用 this，它允许您更新行上的标题。您可以通过gtk_list_box_row_set_header（）删除或设置一个新标题，或者只是更改当前标题小部件的状态。
语法
参数
row- 要更新的行
before- 行前行，如果是第一行，则为 NULL。[允许-无]
user_data- 用户数据。[关闭]
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3GtkMenuDetachFunc ----

GtkMenuDetachFunc
调用 gtk_menu_attach_to_widget（） 时提供的用户函数，稍后菜单与小部件分离时将调用该函数。
语法
参数
attach_widget- 菜单正在分离。GtkWidget
menu- 被分离。[br \=“”GtkMenu
另请参见
GtkMenu


------------ KeyGTK3GtkMenuPositionFunc ----

GtkMenuPositionFunc
调用gtk_menu_popup（） 时提供的用户函数，用于控制菜单在显示时的位置。该函数将 x 和 y 参数设置为要绘制 themenu 的坐标。要使菜单显示在与鼠标指针不同的监视器上，必须调用 gtk_menu_set_monitor（）。
语法
参数
menu- 一个.GtkMenu
x- 表示菜单应绘制的水平位置的地址。软。。。gint
y- 表示菜单应绘制的垂直位置的地址。这是一个输出参数。软。。。gint
push_in- 此参数控制如何处理放置在监视器外部的菜单。如果将其设置为 TRUE 并且菜单的一部分位于监视器外部，则 GTK+ 会将窗口推入可见区域，从而有效地修改弹出窗口。请注意，移动并可能调整菜单大小将改变滚动位置以将菜单项保持在原位，即在不调整大小的情况下处于相同的监视器位置。实际上，此行为仅用于组合框弹出窗口或选项菜单，不能用于简单地限制菜单以监视边界。在这种情况下，更改滚动偏移量是不可取的。软。。。
user_data- 用户在gtk_menu_popup（）数据参数中提供的数据。
另请参见
GtkMenu


------------ KeyGTK3GtkModuleDisplayInitFunc ----

GtkModuleDisplayInitFunc
多头感知 GTK+ 模块可能具有与此原型gtk_module_display_init（） 函数。GTK+ 为每个打开的显示器调用此函数。
语法
参数
display- 自2.2以来开放
GdkDisplay
另请参见
gtk3-General


------------ KeyGTK3GtkModuleInitFunc ----

GtkModuleInitFunc
每个 GTK+ 模块都必须有一个函数 gtk_module_init（） 与此原型。加载模块后调用此函数。
语法
参数
argc- GTK+ 始终为此参数传递 NULL。[允许-无]
argv- GTK+ 始终为此参数传递 NULL。[允许-无][数组长度 = argc]
另请参见
gtk3-General


------------ KeyGTK3GtkPageSetupDoneFunc ----

GtkPageSetupDoneFunc
togtk_print_run_page_setup_dialog_async（） 传递的函数的类型。当页面设置对话框关闭时，将调用此函数，并且还充当数据的销毁通知。
语法
参数
page_setup- 那已经GtkPageSetup
data- 已togtk_print_run_page_setup_dialog_async（） 传递的用户数据。[关闭]
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3GtkPrinterFunc ----

GtkPrinterFunc
传递给gtk_enumerate_printers（） 的函数类型。请注意，如果要在函数返回后保持对打印机的引用，则需要引用打印机。
语法
参数
printer- 一GtkPrinter
data- 传递给gtk_enumerate_printers（）的用户数据。[关闭]
返回
TRUE 停止枚举，FALSE 从 2.10 开始继续
另请参见
GtkPrinter


------------ KeyGTK3GtkPrintJobCompleteFunc ----

GtkPrintJobCompleteFunc
传递给 gtk_print_job_send（） 的回调类型。当打印作业已完全发送时，将调用它。
语法
参数
print_job- 的GtkPrintJob
user_data- 已传递给gtk_print_job_send（） 的用户数据
error- a 如果发送打印作业失败，则包含错误信息，否则为 NULLGError
另请参见
GtkPrintJob


------------ KeyGTK3GtkRcPropertyParser ----

GtkRcPropertyParser
[syntax]gboolean（*GtkRcPropertyParser） （const *pspec， const *rc_string， *property_value）;[/语法GParamSpecGStringGValue
另请参见
GtkStyle


------------ KeyGTK3GtkRecentFilterFunc ----

GtkRecentFilterFunc
与自定义筛选器一起使用的函数类型，请参见gtk_recent_filter_add_custom（）。
语法
参数
filter_info- 根据传递给gtk_recent_filter_add_custom（）的所需旗帜填充GtkRecentFilterInfo
user_data- 用户数据传递给gtk_recent_filter_add_custom（）
返回
如果应显示文件，则为 TRUE
另请参见
GtkRecentFilter


------------ KeyGTK3GtkSnoopFunc ----

GtkKeySnoopFunc
GtkKeySnoopFunc?()
关键窥探函数在正常事件传递之前调用。它们可用于实现自定义密钥事件处理。
语法
参数
grab_widget- 将事件传递到的小部件
event- 关键事件
func_data- 提供给gtk_key_snooper_install（）
返回
TRUE 表示停止对事件的进一步处理，FALSE 表示继续。
另请参见
gtk3-General


------------ KeyGTK3GtkTextBufferDeserializeFunc ----

GtkTextBufferDeserializeFunc
调用该函数以反序列化已使用 gtk_text_buffer_serialize（） 序列化的 RTF，并将其插入到迭代器中。
语法
参数
register_buffer- 格式注册为GtkTextBuffer
content_buffer- 反序列化为GtkTextBuffer
iter- 反序列化文本的插入点
data- 要反序列化的数据
length- 数据长度
create_tags- 如果反序列化可能会创建标记，则为 TRUE
user_data- 注册格式时指定的用户数据
error- 返回地点GError
返回
成功时为真，否则为假
另请参见
GtkTextBuffer


------------ KeyGTK3GtkTextBufferSerializeFunc ----

GtkTextBufferSerializeFunc
调用以序列化文本缓冲区内容的函数。它必须返回内容的序列化形式。
语法
参数
register_buffer- 为其注册格式GtkTextBuffer
content_buffer- 序列化GtkTextBuffer
start- 开始序列化的文本块
end- 要序列化的文本块的末尾
length- 序列化数据长度的返回位置
user_data- 注册格式时指定的用户数据
返回
新分配的 guint8 数组，其中包含序列化数据，如果发生错误，则为 NULL
另请参见
GtkTextBuffer


------------ KeyGTK3GtkTreeCellDataFunc ----

GtkTreeCellDataFunc
一个函数，用于设置单元格的属性，而不仅仅是使用单元格和模型之间的直角映射。这对于自定义单元格渲染器非常有用。例如，函数可能会从tree_model中获取 aninteger，并将其呈现为 ？text？属性？单元格？通过将其转换为其书面等价物。这是通过调用 gtk_tree_view_column_set_cell_data_func（） 设置的
语法
参数
tree_column- 一GtkTreeViewColumn
cell- tree_column正在渲染GtkCellRenderer
tree_model- 正在渲染GtkTreeModel
iter- 呈现的当前行的 AGtkTreeIter
data- 用户数据
另请参见
GtkTreeViewColumn


------------ KeyGTK3GtkTreeIterCompareFunc ----

GtkTreeIterCompareFunc
如果 a 在 b 之前排序，a 与 b 排序，或者 a 在 brespective 之后排序，则 GtkTreeIterCompareFunc 应返回负整数、零或正整数。如果两个迭代器的比较相等，则它们在排序模型中的顺序是未定义的。为了确保行为符合预期，GtkTreeIterCompareFunc必须在模型上定义一个偏序，即它必须是自反的，反对称的和传递的。例如，如果模型是产品目录，则 “price？列可以是returnsprice_of（@a） - price_of（@b） 的列。GtkTreeSortable
语法
参数
model- 比较在GtkTreeModel
a- A在模型中GtkTreeIter
b- 另一个在模型中GtkTreeIter
user_data- 分配比较功能时传递的数据，例如 bygtk_tree_sortable_set_sort_func（）
返回
负整数、零或正整数，具体取决于在 b 之前、带还是之后排序
另请参见
GtkTreeSortable


------------ KeyGTK3GtkTreeModelFilterModifyFunc ----

GtkTreeModelFilterModifyFunc
根据模型中的原始值计算显示值的函数。它必须使用 iter 指示的行中列的显示值填充值。由于每次数据访问都调用此函数，因此它不是单独的高效操作。
语法
参数
model- 的GtkTreeModelFilter
iter- 指向其显示值已确定的行GtkTreeIter
value- 已使用列的正确类型初始化的 A。[输出调用方分配]GValue
column- 显示值确定的列
data- 提供给gtk_tree_model_filter_set_modify_func（）的用户数据。[关闭]
另请参见
GtkTreeModelFilter


------------ KeyGTK3GtkTreeModelFilterVisibleFunc ----

GtkTreeModelFilterVisibleFunc
一个函数，用于确定 iter 指示的行是否可见。
语法
参数
model- 子模型的GtkTreeModelFilter
iter- 指向模型中可见性确定的行GtkTreeIter
data- 提供给gtk_tree_model_filter_set_visible_func（）的用户数据。[关闭]
返回
iteris 指示的行是否可见。
另请参见
GtkTreeModelFilter


------------ KeyGTK3GtkTreeModelForeachFunc ----

GtkTreeModelForeachFunc
传递给gtk_tree_model_foreach（） 的回调的类型，以在树模型中的行上驻留。
语法
参数
model- 正在迭代GtkTreeModel
path- 当前GtkTreePath
iter- 当前GtkTreeIter
data- 传递给gtk_tree_model_foreach（）的用户数据
返回
TRUE 表示停止迭代，FALSE 表示继续
另请参见
GtkTreeModel


------------ KeyGTK3GtkTreeSelectionForeachFunc ----

GtkTreeSelectionForeachFunc
gtk_tree_selection_selected_foreach（） 用于映射所有选定行的函数。它将在视图中的每一行上调用。
语法
参数
model- 被观看GtkTreeModel
path- 所选行的GtkTreePath
iter- 指向所选行GtkTreeIter
data- 用户数据。[关闭]
另请参见
GtkTreeSelection


------------ KeyGTK3GtkTreeSelectionFunc ----

GtkTreeSelectionFunc
gtk_tree_selection_set_select_function（） 用于筛选是否可以选择行的函数。每当行的状态可能更改时，就会调用它。返回值 TRUE 指示选择可以更改选择。
语法
参数
selection- 一GtkTreeSelection
model- 被观看GtkTreeModel
path- 有问题的行GtkTreePath
path_currently_selected- TRUE，如果路径当前处于选中状态
data- 用户数据。[关闭]
返回
TRUE，如果行的选择状态可以切换
另请参见
GtkTreeSelection


------------ KeyGTK3GtkTreeViewColumnDropFunc ----

GtkTreeViewColumnDropFunc
用于确定柱子是否可以放在分离点的函数类型（由prev_column和next_column确定）。从左到右区域设置，prev_column位于潜在放置点的左侧，next_column位于右侧。在从右到左模式下，这将被反转。如果点是有效的放置点，则此函数应返回 TRUE。请注意，返回 TRUE 实际上并不表示列删除已进行，而只是为了向用户指示可能的删除点。
语法
参数
tree_view- 一GtkTreeView
column- 被拖拽GtkTreeViewColumn
prev_column- 列一侧的 AGtkTreeViewColumn
next_column- 列另一侧的 AGtkTreeViewColumn
data- 用户数据。[关闭]
返回
TRUE，如果列可以放在此位置
另请参见
GtkTreeView


------------ KeyGTK3GtkTreeViewMappingFunc ----

GtkTreeViewMappingFunc
Function used for gtk_tree_view_map_expanded_rows().
Syntax
Parameters
tree_view  -  	A GtkTreeView
path  -  	The path that?s expanded
user_data  -  	user data
See Also
GtkTreeView


------------ KeyGTK3GtkTreeViewRowSeparatorFunc ----

GtkTreeViewRowSeparatorFunc
用于确定 iter 所指向的行是否应呈现为分隔符的函数类型。实现此目的的常用方法是在模型中具有布尔列，其值将返回。GtkTreeViewRowSeparatorFunc
语法
参数
model- 的GtkTreeModel
iter- 指向模型中的一行GtkTreeIter
data- 用户数据。[关闭]
返回
如果行是分隔符，则为 TRUE
另请参见
GtkTreeView


------------ KeyGTK3GtkTreeViewSearchEqualFunc ----

GtkTreeViewSearchEqualFunc
用于检查模型中的行是否与用户输入的搜索关键字字符串匹配的函数。请注意，返回值与通常期望的值相反，尽管它与 strcmp（） 在相等的字符串中返回 0 有一些相似之处。
语法
参数
model- 正在搜索GtkTreeModel
column- 由 gtk_tree_view_set_search_column（） 设置的搜索列
key- 要与之比较的键字符串
iter- 指向应与键进行比较的模型行。GtkTreeIter
search_data- 来自gtk_tree_view_set_search_equal_func（）的用户数据。[关闭]
返回
如果行匹配，则为 FALSE，否则为 TRUE。
另请参见
GtkTreeView


------------ KeyGTK3gtk_adjustment_changed ----

gtk_adjustment_changed
从 发出信号。这通常由 的所有者在更改值以外的任何属性后调用。?changed?GtkAdjustmentGtkAdjustmentGtkAdjustment
语法
参数
adjustment- 一GtkAdjustment
另请参见
GtkAdjustment


------------ KeyGTK3gtk_adjustment_clamp_page ----

gtk_adjustment_clamp_page
更新该属性以确保下限和上限之间的范围位于当前页中（即介于 和 + 之间）。如果范围大于页面大小，则只有它的开头将位于当前页面中。如果值更改，将发出信号。?value??value??value??page_size??changed?
语法
参数
adjustment- 一个.GtkAdjustment
lower- 较低的值。
upper- 上限值。
另请参见
GtkAdjustment


------------ KeyGTK3gtk_adjustment_configure ----

gtk_adjustment_configure
一次设置调整的所有属性。使用此功能可避免信号的多次发射。请参阅 gtk_adjustment_set_lower（） 了解将多个发射压缩为一个发射的替代方法。?changed??changed?
语法
参数
adjustment- 一GtkAdjustment
value- 新值
lower- 新的最小值
upper- 新的最大值
step_increment- 新的步骤增量
page_increment- 新页面增量
page_size- 新的页面大小
自 2.14 起
另请参见
GtkAdjustment


------------ KeyGTK3gtk_adjustment_get_lower ----

gtk_adjustment_get_lower
检索调整的最小值。
语法
参数
adjustment- 一GtkAdjustment
返回
调整的当前最小值。
自 2.14 起
另请参见
GtkAdjustment


------------ KeyGTK3gtk_adjustment_get_minimum_increment ----

gtk_adjustment_get_minimum_increment
获取步骤增量和页面增量中较小的一个。
语法
参数
adjustment- 一GtkAdjustment
返回
调整的最小增量
自 3.2 起
另请参见
GtkAdjustment


------------ KeyGTK3gtk_adjustment_get_page_increment ----

gtk_adjustment_get_page_increment
检索调整的页面增量。
语法
参数
adjustment- 一GtkAdjustment
返回
调整的当前页增量。
自 2.14 起
另请参见
GtkAdjustment


------------ KeyGTK3gtk_adjustment_get_page_size ----

gtk_adjustment_get_page_size
检索调整的页面大小。
语法
参数
adjustment- 一GtkAdjustment
返回
调整的当前页面大小。
自 2.14 起
另请参见
GtkAdjustment


------------ KeyGTK3gtk_adjustment_get_step_increment ----

gtk_adjustment_get_step_increment
检索调整的步长增量。
语法
参数
adjustment- 一GtkAdjustment
返回
调整的当前步长增量。
自 2.14 起
另请参见
GtkAdjustment


------------ KeyGTK3gtk_adjustment_get_upper ----

gtk_adjustment_get_upper
检索调整的最大值。
语法
参数
adjustment- 一GtkAdjustment
返回
调整的当前最大值。
自 2.14 起
另请参见
GtkAdjustment


------------ KeyGTK3gtk_adjustment_get_value ----

gtk_adjustment_get_value
获取调整的当前值。Seegtk_adjustment_set_value（）.
语法
参数
adjustment- 一GtkAdjustment
返回
调整的当前值。
另请参见
GtkAdjustment


------------ KeyGTK3gtk_adjustment_new ----

gtk_adjustment_new
创建新的 .GtkAdjustment
语法
参数
value- 初始值。
lower- 最小值。
upper- 最大值。
step_increment- 步长增量。
page_increment- 页面增量。
page_size- 页面大小。
返回
一个新的.GtkAdjustment
另请参见
GtkAdjustment


------------ KeyGTK3gtk_adjustment_set_lower ----

gtk_adjustment_set_lower
设置调整的最小值。当通过其个人定位器设置多个调整属性时，将发出多个信号。但是，由于信号的发射与属性改变的信号的发射有关，因此可以通过callingg_object_freeze_notify（）将信号压缩为一个，并在各个设置者的呼叫周围g_object_thaw_notify（）。或者，对所有要更改的属性使用单个g_object_set（）或使用gtk_adjustment_configure（）具有压缩发射的相同效果。?changed??changed??notify??changed??changed?
语法
参数
adjustment- 一GtkAdjustment
lower- 新的最小值
自 2.14 起
另请参见
GtkAdjustment


------------ KeyGTK3gtk_adjustment_set_page_increment ----

gtk_adjustment_set_page_increment
设置调整的页面增量。请参阅gtk_adjustment_set_lower（） 了解如何在设置多个调整属性时压缩信号的多次发射。?changed?
语法
参数
adjustment- 一GtkAdjustment
page_increment- 新页面增量
自 2.14 起
另请参见
GtkAdjustment


------------ KeyGTK3gtk_adjustment_set_page_size ----

gtk_adjustment_set_page_size
设置调整的页面大小。请参阅gtk_adjustment_set_lower（） 了解如何压缩 Gtk 调整的多个发射：：设置多个调整属性时更改信号。
语法
参数
adjustment- 一GtkAdjustment
page_size- 新的页面大小
自 2.14 起
另请参见
GtkAdjustment


------------ KeyGTK3gtk_adjustment_set_step_increment ----

gtk_adjustment_set_step_increment
设置调整的步长增量。请参阅gtk_adjustment_set_lower（） 了解如何在设置多个调整属性时压缩信号的多次发射。?changed?
语法
参数
adjustment- 一GtkAdjustment
step_increment- 新的步骤增量
自 2.14 起
另请参见
GtkAdjustment


------------ KeyGTK3gtk_adjustment_set_upper ----

gtk_adjustment_set_upper
设置调整的最大值。请注意，如果页面大小属性不为零，则值将受到 byupper - 页面大小的限制。请参阅gtk_adjustment_set_lower（） 了解如何在设置多个调整属性时压缩信号的多次发射。?changed?
语法
参数
adjustment- 一GtkAdjustment
upper- 新的最大值
自 2.1 起
另请参见
GtkAdjustment


------------ KeyGTK3gtk_adjustment_set_value ----

gtk_adjustment_set_value
设置值。该值被钳制为位于 和 之间。请注意，对于 在 中使用的调整，允许值的有效范围从 到 - 。GtkAdjustment?lower??upper?GtkScrollbar?lower??upper??page_size?
语法
参数
adjustment- 一个.GtkAdjustment
value- 新值。
另请参见
GtkAdjustment


------------ KeyGTK3gtk_adjustment_value_changed ----

gtk_adjustment_value_changed
从 发出信号。这通常由所有者在更改属性后调用。?value_changed?GtkAdjustmentGtkAdjustment?value?
语法
参数
adjustment- 一GtkAdjustment
另请参见
GtkAdjustment


------------ KeyGTK3gtk_alignment_get_padding ----

gtk_alignment_get_padding
获取小部件不同侧面的填充。请参见gtk_alignment_set_padding（）。
语法
参数
alignment- 一GtkAlignment
padding_top- 存储小部件顶部的填充的位置，或 NULL。[输出][允许-无]
padding_bottom- 存储小部件底部填充的位置，或 NULL。[输出][允许-无]
padding_left- 存储小部件左侧填充的位置，或 NULL。[输出][允许-无]
padding_right- 位置存储小部件右侧的填充，或 NULL。[输出][允许-无]
2.4 起
另请参见
GtkAlignment


------------ KeyGTK3gtk_alignment_new ----

gtk_alignment_new
创建新的 .GtkAlignment
语法
参数
xalign- 子构件的水平对齐方式，从 0（左）到 1（右）。
yalign- 子构件的垂直对齐方式，从 0（顶部）到 1（底部）。
xscale- 子小部件水平扩展以填充未使用空间的量，从 0 到 1。值为 0 表示子小部件永远不应扩展。值为 1 表示子构件将展开以填充为 分配的所有空间。GtkAlignment
yscale- 子小部件垂直扩展以填充未使用空间的量，从 0 到 1。这些值类似于 xscale。
返回
新的 .GtkAlignment
另请参见
GtkAlignment


------------ KeyGTK3gtk_alignment_set ----

gtk_alignment_set
设置值。GtkAlignment
语法
参数
alignment- 一个.GtkAlignment
xalign- 子构件的水平对齐方式，从 0（左）到 1（右）。
yalign- 子构件的垂直对齐方式，从 0（顶部）到 1（底部）。
xscale- 子小部件水平扩展以填充未使用空间的量，从 0 到 1。值为 0 表示子小部件永远不应扩展。值为 1 表示子构件将展开以填充为 分配的所有空间。GtkAlignment
yscale- 子小部件垂直扩展以填充未使用空间的量，从 0 到 1。这些值类似于 xscale。
另请参见
GtkAlignment


------------ KeyGTK3gtk_alignment_set_padding ----

gtk_alignment_set_padding
设置构件不同侧面的填充。填充会向构件的侧面添加空白区域。例如，这可以通过在左侧添加填充来用于向右缩进子小部件。
语法
参数
alignment- 一GtkAlignment
padding_top- 小部件顶部的填充
padding_bottom- 小部件底部的填充
padding_left- 小部件左侧的填充
padding_right- 小部件右侧的填充。
自 2.
另请参见
GtkAlignment


------------ KeyGTK3gtk_alternative_dialog_button_order ----

gtk_alternative_dialog_button_order
gtk_alternative_dialog_button_order自版本 3.10 起已弃用，不应在新编写的代码中使用。已弃用如果对话框需要在屏幕屏幕上使用备用按钮顺序，则返回 TRUE。Seegtk_dialog_set_alternative_button_order（） 了解有关替代按钮顺序的更多详细信息。如果需要使用此功能，则可能应连接到与屏幕关联的对象上的 ：：notify：gtk-alternative-button-order 信号，以便在按钮顺序设置更改时收到通知。GtkSettings
语法
参数
screen- a 或 NULL 以使用默认屏幕。[允许-无]GdkScreen
返回
是否应使用备用按钮顺序
自 2.6 起
另请参见
GtkDialog


------------ KeyGTK3gtk_application_add_accelerator ----

gtk_application_add_accelerator
安装一个加速器，当按下加速器所特有的键组合时，该加速器将导致命名操作被激活。加速器必须是一个字符串，可以通过gtk_accelerator_parse（）解析，例如”q“或 ？p?.action_name必须是操作的名称，因为它将在应用程序菜单中使用，即已添加到应用程序的操作使用？app引用。前缀和窗口特定的操作，带有 “win.？前缀。GtkApplication 还从 ？accel？属性在传递给gtk_application_set_app_menu（） andgtk_application_set_menubar（），这通常比为每个加速器调用此函数更方便。GMenuModels
语法
参数
application- 一GtkApplication
accelerator- 加速器字符串
action_name- 要激活的操作的名称
parameter- 激活操作时要传递的参数，如果操作不接受激活参数，则为 NULL。[允许-无]
自 3.4 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_add_window ----

gtk_application_add_window
向应用程序添加一个窗口。此调用等效于将窗口的属性设置为应用程序。通常，应用程序和窗口之间的连接将一直保持到窗口被破坏，但您可以使用gtk_application_remove_window（）显式删除它。GTK+将保持应用程序运行，只要它具有任何窗口。?application?
语法
参数
application- 一GtkApplication
window- 一GtkWindow
自 3.0 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_get_accels_for_action ----

gtk_application_get_accels_for_action
获取当前与给定操作关联的加速器。
语法
参数
application- 一GtkApplication
detailed_action_name- 详细的操作名称，指定操作和目标以获取加速器
返回
用于detailed_action_name的加速器，asa 空终止阵列。不再需要时，可使用 g_strfreev（） 免费。[转移完整]
自 3.12 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_get_active_window ----

gtk_application_get_active_window
获取 “活动？”窗口。活动窗口是最近获得焦点的窗口（在应用程序内）。如果另一个应用程序有焦点，则此窗口可能此窗口暂时没有焦点 - 这只是此应用程序中最近最集中的窗口。
语法
参数
application- 一GtkApplication
返回
活动窗口。[无转移]
3.6 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_get_app_menu ----

gtk_application_get_app_menu
返回已设置为 withgtk_application_set_app_menu（） 的菜单模型。
语法
参数
application- 一GtkApplication
返回
应用程序的应用程序菜单。[无转移]
自 3.4 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_get_menubar ----

gtk_application_get_menubar
返回已设置为 withgtk_application_set_menubar（） 的菜单模型。
语法
参数
application- 一GtkApplication
返回
应用程序窗口的菜单栏。[无转移]
自 3.4 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_get_windows ----

gtk_application_get_windows
获取与应用程序关联的列表。该列表按最近获得焦点的窗口进行排序，使得第一元素是当前获得焦点的窗口。（对于为瞬态窗口选择父级很有用。不应以任何方式修改返回的列表。它将仅在下一次焦点更改或窗口创建或删除之前保持有效。GtkWindows
语法
参数
application- 一GtkApplication
返回
的 a 的 。[元素型 GtkWindow][无转移]GListGtkWindow
自 3.0 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_get_window_by_id ----

gtk_application_get_window_by_id
返回具有给定 ID 的 。GtkApplicationWindow
语法
参数
application- 一GtkApplication
id- 标识符号
返回
ID 为 ID 的窗口，如果没有 ID 为 ID 的窗口，则为 NULL。
3.6 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_inhibit ----

gtk_application_inhibit
通知会话管理器应禁止某些类型的操作。这不能保证适用于所有平台和所有类型的操作。应用程序应在开始不应中断的操作（如创建 CD 或 DVD）时调用此方法。可能被阻止的操作的类型由 flags 参数指定。当应用程序完成操作时，它应该调用gtk_application_uninhibit（）以除去抑制剂。请注意，一个应用程序可以有多个抑制剂，并且所有必须单独去除。当应用程序退出时，抑制剂也会被清除。应用程序不应期望它们始终能够阻止该操作。在大多数情况下，用户可以选择强制执行操作。原因应该简短明了。如果给出了窗口，会话管理器可能会将用户指向此窗口，以了解有关禁止该操作的原因的详细信息。
语法
参数
application- 的GApplication
window- a 或 NULL。[允许-无]GtkWindow
flags- 应禁止哪些类型的行为
reason- 一个简短的，人类可读的字符串，解释了为什么这些操作被禁止。[允许-无]
返回
用于唯一标识此请求的非零 Cookie。它应该用作gtk_application_uninhibit（）的参数，以便删除请求。如果平台不支持禁止或请求由于某种原因而失败，则返回 0。
自 3.4 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_is_inhibited ----

gtk_application_is_inhibited
确定标志中指定的任何操作当前是否被禁止（可能被其他应用程序禁止）。
语法
参数
application- 的GApplication
flags- 应查询哪些类型的操作
返回
如果 flags 中指定的任何操作被禁止，则为 TRUE
自 3.4 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_list_action_descriptions ----

gtk_application_list_action_descriptions
列出具有关联加速器的详细操作名称。请参见gtk_application_set_accels_for_action（）。
语法
参数
application- 一GtkApplication
返回
一个以 NULL 结尾的字符串数组，完成时可用，g_strfreev（）。[转移完整]
自 3.12 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_new ----

gtk_application_new
创建新实例。使用 时，不必手动调用 gtk_init（）。一旦应用程序注册为主实例，就会立即调用它。具体来说，gtk_init（） 在信号的默认处理程序中调用。因此，在使用任何 GTK+ API 之前，子类应在其处理程序中链接起来。请注意，命令行参数不会传递给gtk_init（）。通过命令行参数提供的所有GTK+功能也可以通过设置合适的环境变量（如G_DEBUG）来实现，因此这应该不是一个大问题。如果绝对必须支持 GTK+ 命令行参数，则可以在创建应用程序实例之前显式调用 gtk_init（）。如果非 NULL，则应用程序 ID 必须有效。Seeg_application_id_is_valid（）.如果未提供应用程序 ID，则某些功能（最明显的是应用程序唯一性）将被禁用。只有 GTK+ 3.6 或更高版本才允许使用空应用程序 ID。GtkApplicationGtkApplication?startup?GtkApplication?startup?
语法
参数
application_id- 应用程序 ID。 [允许-无]
flags- 应用程序标志
返回
一个新实例GtkApplication
自 3.0 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_remove_accelerator ----

gtk_application_remove_accelerator
删除以前使用 gtk_application_add_accelerator（） 添加的加速器。
语法
参数
application- 一GtkApplication
action_name- 要激活的操作的名称
parameter- 激活操作时要传递的参数，如果操作不接受激活参数，则为 NULL。[允许-无]
自 3.4 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_remove_window ----

gtk_application_remove_window
从应用程序中删除窗口。如果窗口属于应用程序，则此调用等效于将窗口的属性设置为 NULL。由于调用此函数，应用程序可能会停止运行。?application?
语法
参数
application- 一GtkApplication
window- 一GtkWindow
自 3.0 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_set_accels_for_action ----

gtk_application_set_accels_for_action
设置零个或多个将触发给定操作的键盘快捷键。accels 中的第一项将是主加速器，它可能显示在 UI.To 删除操作的所有加速器，对 accels 使用空的零终止darray。
语法
参数
application- 一GtkApplication
detailed_action_name- 详细的操作名称，指定要与加速器关联的操作和目标
accels- bygtk_accelerator_parse（）理解的格式的加速器列表。[数组零终止 = 1]
自 3.1 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_set_app_menu ----

gtk_application_set_app_menu
设置或取消设置应用程序的应用程序菜单。这只能在应用程序的主实例中完成，之后它已被注册。 是一个好地方来称呼这个。应用程序菜单是一个菜单，其中包含通常将应用程序作为一个整体来影响的项，而不是作用于特定的窗口或文档。例如，您会期望看到吗？偏好？或？退出？在应用程序菜单中，但不是 ？救？阿奎打印？。如果支持，应用程序菜单将由桌面环境呈现。使用基本界面添加操作，以响应用户选择这些菜单项。?startup?GActionMap
语法
参数
application- 一GtkApplication
app_menu- a 或 NULL。[允许-无]GMenuModel
自 3.4 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_set_menubar ----

gtk_application_set_menubar
设置或取消设置应用程序窗口的菜单栏。这是传统意义上的菜单栏。这只能在应用程序的主实例中完成，之后它已被注册。 是一个好地方来称呼这个。根据桌面环境，这可能显示在每个窗口的顶部或屏幕的顶部。在某些环境中，如果设置了应用程序菜单和菜单栏，则应用程序菜单将显示为菜单栏的第一项。其他环境将两者视为完全独立的 - 例如，应用程序菜单可能由桌面shell呈现，而菜单栏（如果设置）保留在每个单独的窗口中。使用基本界面添加操作，以响应用户选择这些菜单项。?startup?GActionMap
语法
参数
application- 一GtkApplication
menubar- a 或 NULL。[允许-无]GMenuModel
自 3.4 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_uninhibit ----

gtk_application_uninhibit
去除已使用 gtk_application_inhibit（） 建立的抑制剂。当应用程序退出时，抑制剂也会被清除。
语法
参数
application- 的GApplication
cookie- 由gtk_application_inhibit（）返回的饼干
自 3.4 起
另请参见
GtkApplication


------------ KeyGTK3gtk_application_window_get_id ----

gtk_application_window_get_id
返回窗口的唯一 ID。如果尚未将窗口添加到 a ，则返回 0。GtkApplication
语法
参数
window- 一GtkApplicationWindow
返回
窗口的唯一 ID，如果窗口尚未添加到GtkApplication
自 3.
另请参见
GtkApplicationWindow


------------ KeyGTK3gtk_application_window_get_show_menubar ----

gtk_application_window_get_show_menubar
返回窗口是否将根据需要显示应用程序菜单和菜单栏的菜单栏。
语法
参数
window- 一GtkApplicationWindow
返回
TRUE 如果窗口在需要时将显示菜单栏，则为 TRUE
自 3.4 起
另请参见
GtkApplicationWindow


------------ KeyGTK3gtk_application_window_new ----

gtk_application_window_new
创建新的 .GtkApplicationWindow
语法
参数
application- 一GtkApplication
返回
新创建的GtkApplicationWindow
自 3.4 起
另请参见
GtkApplicationWindow


------------ KeyGTK3gtk_application_window_set_show_menubar ----

gtk_application_window_set_show_menubar
设置窗口是否根据需要显示应用程序菜单和菜单栏的菜单栏。
语法
参数
window- 一GtkApplicationWindow
show_menubar- 是否需要在需要时显示菜单栏
自 3.4 起
另请参见
GtkApplicationWindow


------------ KeyGTK3gtk_app_chooser_button_append_custom_item ----

gtk_app_chooser_button_append_custom_item
将自定义项附加到弹出窗口中显示的应用程序列表中;每个小组件的项目名称必须是唯一的。客户端可以使用提供的名称作为信号的详细信息，以添加对列表中特定自定义项的激活的响应。另请参见gtk_app_chooser_button_append_separator（）。?custom-item-activated?
语法
参数
self- 一GtkAppChooserButton
name- 自定义项目的名称
label- 自定义项目的标签
icon- 自定义项目的图标
自 3.0 起
另请参见
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_append_separator ----

gtk_app_chooser_button_append_separator
将分隔符追加到弹出窗口中显示的应用程序列表。
语法
参数
self- 一GtkAppChooserButton
自 3.0 起
另请参见
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_get_heading ----

gtk_app_chooser_button_get_heading
返回要显示在对话框顶部的文本。
语法
参数
self- 一GtkAppChooserButton
返回
要显示在对话框顶部的文本，或 NULL，在这种情况下，将显示默认文本
另请参见
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_get_show_default_item ----

gtk_app_chooser_button_get_show_default_item
返回属性的当前值。?show-default-item?
语法
参数
self- 一GtkAppChooserButton
返回
的价值?show-default-item?
自 3.2 起
另请参见
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_get_show_dialog_item ----

gtk_app_chooser_button_get_show_dialog_item
返回属性的当前值。?show-dialog-item?
语法
参数
self- 一GtkAppChooserButton
返回
的价值?show-dialog-item?
自 3.0 起
另请参见
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_new ----

gtk_app_chooser_button_new
为应用程序创建新的应用程序，可以处理给定类型的内容。GtkAppChooserButton
语法
参数
content_type- 要显示应用程序的内容类型
返回
新创建的GtkAppChooserButton
自 3.0 起
另请参见
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_set_active_custom_item ----

gtk_app_chooser_button_set_active_custom_item
选择以前添加withgtk_app_chooser_button_append_custom_item（） 的自定义项。使用 gtk_app_chooser_refresh（） 将所选内容置于其初始状态。
语法
参数
self- 一GtkAppChooserButton
name- 自定义项目的名称
自 3.0 起
另请参见
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_set_heading ----

gtk_app_chooser_button_set_heading
设置要在对话框顶部显示的文本。如果未设置标题，对话框将显示默认文本。
语法
参数
self- 一GtkAppChooserButton
heading- 包含 Pango 标记的字符串[br \=“”
另请参见
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_set_show_default_item ----

gtk_app_chooser_button_set_show_default_item
设置此按钮的下拉菜单是否应在顶部显示给定内容类型的默认应用程序。
语法
参数
self- 一GtkAppChooserButton
setting- 的新值?show-default-item?
自 3.2 起
另请参见
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_button_set_show_dialog_item ----

gtk_app_chooser_button_set_show_dialog_item
设置此按钮的下拉菜单是否应显示要触发 的条目。GtkAppChooserDialog
语法
参数
self- 一GtkAppChooserButton
setting- 的新值?show-dialog-item?
自 3.0 起
另请参见
GtkAppChooserButton


------------ KeyGTK3gtk_app_chooser_dialog_get_heading ----

gtk_app_chooser_dialog_get_heading
返回要显示在对话框顶部的文本。
语法
参数
self- 一GtkAppChooserDialog
返回
要在对话框顶部显示的文本，或 NULL，在这种情况下，将显示默认文本
另请参见
GtkAppChooserDialog


------------ KeyGTK3gtk_app_chooser_dialog_get_widget ----

gtk_app_chooser_dialog_get_widget
返回此对话框的 。GtkAppChooserWidget
语法
参数
self- 一GtkAppChooserDialog
返回
自我。[无转移]GtkAppChooserWidget
自 3.0 起
另请参见
GtkAppChooserDialog


------------ KeyGTK3gtk_app_chooser_dialog_new ----

gtk_app_chooser_dialog_new
为提供的 创建一个新的 ，以允许用户为其选择应用程序。GtkAppChooserDialogGFile
语法
参数
parent- a 或 NULL。[允许-无]GtkWindow
flags- 此对话框的标志
file- 一GFile
返回
新创建的GtkAppChooserDialog
自 3.0 起
另请参见
GtkAppChooserDialog


------------ KeyGTK3gtk_app_chooser_dialog_new_for_content_type ----

gtk_app_chooser_dialog_new_for_content_type
为提供的内容类型创建新的内容类型，以允许用户为其选择应用程序。GtkAppChooserDialog
语法
参数
parent- a 或 NULL。[允许-无]GtkWindow
flags- 此对话框的标志
content_type- 内容类型字符串
返回
新创建的GtkAppChooserDialog
自 3.0 起
另请参见
GtkAppChooserDialog


------------ KeyGTK3gtk_app_chooser_dialog_set_heading ----

gtk_app_chooser_dialog_set_heading
设置要在对话框顶部显示的文本。如果未设置标题，对话框将显示默认文本。
语法
参数
self- 一GtkAppChooserDialog
heading- 包含Pango标记的字符串
另请参见
GtkAppChooserDialog


------------ KeyGTK3gtk_app_chooser_get_app_info ----

gtk_app_chooser_get_app_info
返回当前选定的应用程序。
语法
参数
self- 一GtkAppChooser
返回
a 表示当前选定的应用程序，如果未选择任何应用程序，则为 NULL。使用 g_object_unref（） 免费。[转移完整]GAppInfo
自 3.0 起
另请参见
GtkAppChooser


------------ KeyGTK3gtk_app_chooser_get_content_type ----

gtk_app_chooser_get_content_type
返回属性的当前值。?content-type?
语法
参数
self- 一GtkAppChooser
返回
自我的内容类型。免费与g_free（）
自 3.0 起
另请参见
GtkAppChooser


------------ KeyGTK3gtk_app_chooser_refresh ----

gtk_app_chooser_refresh
重新加载应用程序列表。
语法
参数
self- 一GtkAppChooser
自 3.
另请参见
GtkAppChooser


------------ KeyGTK3gtk_app_chooser_widget_get_default_text ----

gtk_app_chooser_widget_get_default_text
返回在没有可以处理内容类型的应用程序时显示的文本。
语法
参数
self- 一GtkAppChooserWidget
返回
的价值?default-text?
自 3.
另请参见
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_get_show_all ----

gtk_app_chooser_widget_get_show_all
返回属性的当前值。?show-all?
语法
参数
self- 一GtkAppChooserWidget
返回
的价值?show-all?
自 3.0 起
另请参见
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_get_show_default ----

gtk_app_chooser_widget_get_show_default
返回属性的当前值。?show-default?
语法
参数
self- 一GtkAppChooserWidget
返回
的价值?show-default?
自 3.0 起
另请参见
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_get_show_fallback ----

gtk_app_chooser_widget_get_show_fallback
返回属性的当前值。?show-fallback?
语法
参数
self- 一GtkAppChooserWidget
返回
的价值?show-fallback?
自 3.0 起
另请参见
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_get_show_other ----

gtk_app_chooser_widget_get_show_other
返回属性的当前值。?show-other?
语法
参数
self- 一GtkAppChooserWidget
返回
的价值?show-other?
自 3.0 起
另请参见
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_get_show_recommended ----

gtk_app_chooser_widget_get_show_recommended
返回属性的当前值。?show-recommended?
语法
参数
self- 一GtkAppChooserWidget
返回
的价值?show-recommended?
自 3.0 起
另请参见
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_new ----

gtk_app_chooser_widget_new
为应用程序创建新的应用程序，可以处理给定类型的内容。GtkAppChooserWidget
语法
参数
content_type- 要显示应用程序的内容类型
返回
新创建的GtkAppChooserWidget
自 3.0 起
另请参见
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_set_default_text ----

gtk_app_chooser_widget_set_default_text
设置在没有可以处理内容类型的应用程序时显示的文本。
语法
参数
self- 一GtkAppChooserWidget
text- 的新值?default-text?
另请参见
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_set_show_all ----

gtk_app_chooser_widget_set_show_all
设置应用选择器是否应在简单列表中显示所有应用程序。
语法
参数
self- 一GtkAppChooserWidget
setting- 的新值?show-all?
自 3.0 起
另请参见
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_set_show_default ----

gtk_app_chooser_widget_set_show_default
设置应用选择器是否应在单独的部分中显示内容类型的默认处理程序。
语法
参数
self- 一GtkAppChooserWidget
setting- 的新值?show-default?
自 3.0 起
另请参见
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_set_show_fallback ----

gtk_app_chooser_widget_set_show_fallback
设置应用选择器是否应在单独的部分中显示内容类型的相关应用程序。
语法
参数
self- 一GtkAppChooserWidget
setting- 的新值?show-fallback?
自 3.0 起
另请参见
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_set_show_other ----

gtk_app_chooser_widget_set_show_other
设置应用选择器是否应显示与内容类型无关的应用程序。
语法
参数
self- 一GtkAppChooserWidget
setting- 的新值?show-other?
自 3.0 起
另请参见
GtkAppChooserWidget


------------ KeyGTK3gtk_app_chooser_widget_set_show_recommended ----

gtk_app_chooser_widget_set_show_recommended
设置应用选择器是否应在单独的部分中显示内容类型的推荐应用程序。
语法
参数
self- 一GtkAppChooserWidget
setting- 的新值?show-recommended?
自 3.0 起
另请参见
GtkAppChooserWidget


------------ KeyGTK3gtk_arrow_new ----

gtk_arrow_new
创建新的构件。GtkArrow
语法
参数
arrow_type- 一个有效的 .GtkArrowType
shadow_type- 一个有效的 .GtkShadowType
返回
新的小部件。GtkArrow
另请参见
GtkArrow


------------ KeyGTK3gtk_arrow_set ----

gtk_arrow_set
设置 、箭头的方向和样式。GtkArrow
语法
参数
arrow- 类型的小部件。GtkArrow
arrow_type- 一个有效的 .GtkArrowType
shadow_type- 一个有效的 .[br \=“”GtkShadowType
另请参见
GtkArrow


------------ KeyGTK3gtk_aspect_frame_new ----

gtk_aspect_frame_new
创建一个新的 .GtkAspectFrame
语法
参数
label- 标签文本。[允许-无]
xalign- 在 .范围从 0.0（左对齐）到 1.0（右对齐）GtkAspectFrame
yalign- 在 .范围从 0.0（顶部对齐）到 1.0（底部对齐）GtkAspectFrame
ratio- 所需的宽高比。
obey_child- 如果为 TRUE，则忽略比例，并且从孩子的要求中获取纵向。
返回
新的 .GtkAspectFrame
另请参见
GtkAspectFrame


------------ KeyGTK3gtk_aspect_frame_set ----

gtk_aspect_frame_set
为现有 设置参数。GtkAspectFrame
语法
参数
aspect_frame- 一GtkAspectFrame
xalign- 在 .范围从 0.0（左对齐）到 1.0（右对齐）GtkAspectFrame
yalign- 在 .范围从 0.0（顶部对齐）到 1.0（底部对齐）GtkAspectFrame
ratio- 所需的宽高比。
obey_child- 如果为 TRUE，则忽略比例，并且从孩子的要求中获取纵向。[br \=“”
另请参见
GtkAspectFrame


------------ KeyGTK3gtk_assistant_add_action_widget ----

gtk_assistant_add_action_widget
将小部件添加到 的操作区域。GtkAssistant
语法
参数
assistant- 一GtkAssistant
child- 一GtkWidget
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_append_page ----

gtk_assistant_append_page
将页面追加到助手。
语法
参数
assistant- 一GtkAssistant
page- 一GtkWidget
返回
插入页面的索引（从 0 开始）
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_commit ----

gtk_assistant_commit
擦除已访问的页面历史记录，以便不会在当前页面上关闭后退按钮，并从后续页面中删除取消按钮。当截至当前页面的信息在以后被视为永久信息且无法修改或撤消时，请使用此选项。例如，在用户在确认页面上单击“应用”后，向跟踪跟踪长时间运行的不可逆操作的进度页。
语法
参数
assistant- 一GtkAssistant
2.22 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_get_current_page ----

gtk_assistant_get_current_page
返回当前页的页码。
语法
参数
assistant- 一GtkAssistant
返回
助手中当前页面的索引（从 0 开始），如果助手没有页面或没有当前页面，则为 -1。
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_get_nth_page ----

gtk_assistant_get_nth_page
返回页码 page_num 中包含的子构件。
语法
参数
assistant- 一GtkAssistant
page_num- 助手中页面的索引，或 -1 获取最后一页
返回
子小部件或 NULLif page_numis超出界限。[无转移]
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_get_n_pages ----

gtk_assistant_get_n_pages
返回助手中的页数
语法
参数
assistant- 一GtkAssistant
返回
助手中的页数
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_get_page_complete ----

gtk_assistant_get_page_complete
获取页面是否完成。
语法
参数
assistant- 一GtkAssistant
page- 一页助手
返回
如果页面已完成，则为 TRUE。
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_get_page_header_image ----

gtk_assistant_get_page_header_image
gtk_assistant_get_page_header_image自版本 3.2 起已弃用，不应在新编写的代码中使用。自 GTK+ 3.2 起，不再显示标头;改为将页眉装饰添加到页面内容中。获取页的标头图像。
语法
参数
assistant- 一GtkAssistant
page- 一页助手
返回
页面的标题图像，如果页面没有标题图像，则为 NULL。[无转移]
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_get_page_side_image ----

gtk_assistant_get_page_side_image
gtk_assistant_get_page_side_image自版本 3.2 起已弃用，不应在新编写的代码中使用。从GTK+ 3.2开始，侧边栏图像不再显示。获取页面的侧面图像。
语法
参数
assistant- 一GtkAssistant
page- 一页助手
返回
页面的侧面图像，如果页面没有侧面图像，则为 NULL。[无转移]
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_get_page_title ----

gtk_assistant_get_page_title
获取页面的标题。
语法
参数
assistant- 一GtkAssistant
page- 一页助手
返回
页面标题
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_get_page_type ----

gtk_assistant_get_page_type
获取页面的页面类型。
语法
参数
assistant- 一GtkAssistant
page- 一页助手
返回
页面的页面类型
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_insert_page ----

gtk_assistant_insert_page
在助手中的给定位置插入页面。
语法
参数
assistant- 一GtkAssistant
page- 一GtkWidget
position- 要插入页面的索引（从 0 开始），或 -1 将页面附加到助手
返回
插入页面的索引（从 0 开始）
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_new ----

gtk_assistant_new
创建新的 .GtkAssistant
返回
新创建的GtkAssistant
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_next_page ----

gtk_assistant_next_page
导航到下一页。在没有下一页时调用此函数是一个编程错误。此函数用于创建该类型的页面。GTK_ASSISTANT_PAGE_CUSTOM
语法
参数
assistant- 一GtkAssistant
自 3.0 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_prepend_page ----

gtk_assistant_prepend_page
将页面预置到助手之前。
语法
参数
assistant- 一GtkAssistant
page- 一GtkWidget
返回
插入页面的索引（从 0 开始）
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_previous_page ----

gtk_assistant_previous_page
导航到上一个访问的页面。当没有上一页可用时调用此函数是一个编程错误。此函数用于创建该类型的页面。GTK_ASSISTANT_PAGE_CUSTOM
语法
参数
assistant- 一GtkAssistant
自 3.
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_remove_action_widget ----

gtk_assistant_remove_action_widget
从 的操作区域中删除小部件。GtkAssistant
语法
参数
assistant- 一GtkAssistant
child- 一GtkWidget
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_remove_page ----

gtk_assistant_remove_page
从助手中删除page_num的页面。
语法
参数
assistant- 一GtkAssistant
page_num- 助手中页面的索引，或 -1 删除最后一页
自 3.2 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_set_current_page ----

gtk_assistant_set_current_page
将页面切换到page_num。请注意，这仅在自定义按钮中是必需的，因为助手流可以设置为withgtk_assistant_set_forward_page_func（）。
语法
参数
assistant- 一GtkAssistant
page_num- 要切换到的页面的索引，从 0 开始。如果为负，则将使用最后一页。如果大于助手中的页数，则不会执行任何操作。
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_set_forward_page_func ----

gtk_assistant_set_forward_page_func
设置page_func的页面转发功能。此功能将用于确定当用户按下前进按钮时下一页的内容。将page_func设置为 NULL 将使助手使用默认的转发功能，该函数仅转到下一个可见页面。
语法
参数
assistant- 一GtkAssistant
page_func- 或 NULLto 使用默认的。[允许-无]GtkAssistantPageFunc
data- page_func用户数据
destroy- 销毁数据通知程序
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_set_page_complete ----

gtk_assistant_set_page_complete
设置页面内容是否完整。这将使助手更新按钮状态，以便能够继续任务。
语法
参数
assistant- 一GtkAssistant
page- 一页助手
complete- 页面的完整性状态
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_set_page_header_image ----

gtk_assistant_set_page_header_image
gtk_assistant_set_page_header_image自 3.2 版起已弃用，不应在新编写的代码中使用。自 GTK+ 3.2 起，不再显示标头;改为将页眉装饰添加到页面内容中。设置页面的页眉图像。
语法
参数
assistant- 一GtkAssistant
page- 一页助手
pixbuf- 新的标题图像页面。[允许-无]
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_set_page_side_image ----

gtk_assistant_set_page_side_image
gtk_assistant_set_page_side_image自版本 3.2 起已弃用，不应在新编写的代码中使用。从GTK+ 3.2开始，侧边栏图像不再显示。设置页面的侧面图像。当页面是当前页面时，此图像以前显示在助手的侧面区域中。
语法
参数
assistant- 一GtkAssistant
page- 一页助手
pixbuf- 新的侧面图像页面。[允许-无]
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_set_page_title ----

gtk_assistant_set_page_title
设置页面的标题。当页面是当前页面时，标题将显示在助手页眉区域中。
语法
参数
assistant- 一GtkAssistant
page- 一页助手
title- 页面的新标题
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_set_page_type ----

gtk_assistant_set_page_type
设置页面的页面类型。页面类型决定了助手中的页面行为。
语法
参数
assistant- 一GtkAssistant
page- 一页助手
type- 页面的新类型
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3gtk_assistant_update_buttons_state ----

gtk_assistant_update_buttons_state
强制助手重新计算按钮状态。GTK+在大多数情况下会自动处理这个问题，例如，当用户转到其他页面时，或者当页面的可见性或完整性发生变化时。可能需要调用此函数的一种情况是，当更改当前页面上的值会影响助手的未来页面流时。
语法
参数
assistant- 一GtkAssistant
自 2.10 起
另请参见
GtkAssistant


------------ KeyGTK3GTK_BINARY_AGE ----

GTK_BINARY_AGE
GTK_BINARY_AGE
与gtk_get_binary_age（）一样，但来自应用程序编译时使用的标头，而不是来自应用程序运行时的库链接。
另请参见
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_bindings_activate ----

gtk_bindings_activate
查找匹配键值和修饰符的键绑定，并在对象上激活绑定。
语法
参数
object- 找到绑定时要激活的对象
keyval- 绑定的键值
modifiers- 绑定的键修饰符
返回
如果找到并激活绑定，则为 TRUE
另请参见
gtk3-Bindings


------------ KeyGTK3gtk_bindings_activate_event ----

gtk_bindings_activate_event
查找对象的键绑定以查找一个匹配事件，如果找到一个，请将其激活。
语法
参数
object- a（通常必须是小部件）GObject
event- 一GdkEventKey
返回
如果找到匹配的键绑定，则为 TRUE
2.4 起
另请参见
gtk3-Bindings


------------ KeyGTK3gtk_binding_entry_add_signal ----

gtk_binding_entry_add_signal
使用修饰符覆盖或安装 keyval 的新键绑定，onbinding_set。激活绑定后，将在目标小部件上发出signal_name，并使用n_args Varargs 作为参数。
语法
参数
binding_set- a 安装条目GtkBindingSet
keyval- 绑定到安装的键值
modifiers- 要安装的绑定的键修饰符
signal_name- 激活时执行的信号
n_args- 要signal_name的参数数
...- signal_name参数
另请参见
gtk3-Bindings


------------ KeyGTK3gtk_binding_entry_add_signall ----

gtk_binding_entry_add_signall
使用修饰符覆盖或安装 keyval 的新键绑定，onbinding_set。
语法
参数
binding_set- a 添加信号GtkBindingSet
keyval- 键值
modifiers- 键修饰符
signal_name- 要绑定的信号名称
binding_args- 信号参数列表。[无转移][元素型 GtkBindingArg]GtkBindingArg
另请参见
gtk3-Bindings


------------ KeyGTK3gtk_binding_entry_add_signal_from_string ----

gtk_binding_entry_add_signal_from_string
解析来自signal_desc的信号描述，并将其合并到binding_set中。信号描述可以将一个组合键绑定到一个或多个信号：1234[/语法] [语法]绑定“键”{“信号名称”（param，...）...}[/语法]
或者它们也可以取消绑定组合键：1[/语法] [语法]解绑定“键”[/语法]
组合键必须采用可以解析bygtk_accelerator_parse（））的格式。
语法
参数
binding_set- 一GtkBindingSet
signal_desc- 信号描述
返回
G_TOKEN_NONE如果信号被成功解析和添加，否则为预期的令牌
自 3.0 起
另请参见
gtk3-Bindings


------------ KeyGTK3gtk_binding_entry_remove ----

gtk_binding_entry_remove
删除以前在 binding_set 上安装的 viagtk_binding_entry_add_signal（） 绑定。
语法
参数
binding_set- a 删除条目GtkBindingSet
keyval- 要删除的绑定的键值
modifiers- 要删除的绑定的键修饰符
另请参见
gtk3-Bindings


------------ KeyGTK3gtk_binding_entry_skip ----

gtk_binding_entry_skip
在 binding_set 上安装绑定会导致键查找中止，以防止激活较低优先级集的绑定。
语法
参数
binding_set- a 跳过条目GtkBindingSet
keyval- 要跳过的绑定的键值
modifiers- 键修饰符的绑定跳过
自 2.12 起
另请参见
gtk3-Bindings


------------ KeyGTK3gtk_binding_set_activate ----

gtk_binding_set_activate
withinbinding_set找到与键值和修饰符匹配的键绑定，并激活对象上的绑定。
语法
参数
binding_set- 一个设置激活GtkBindingSet
keyval- 绑定的键值
modifiers- 绑定的键修饰符
object- 找到绑定时要激活的对象
返回
如果找到并激活绑定，则为 TRUE
另请参见
gtk3-Bindings


------------ KeyGTK3gtk_binding_set_add_path ----

gtk_binding_set_add_path
gtk_binding_set_add_path自 3.0 版起已弃用，不应在新编写的代码中使用。此函数由 GtkRC 解析机制在内部使用，用于将匹配模式分配给结构。在 GTK+ 3 中，这些匹配模式未被使用。GtkBindingSet
语法
参数
binding_set- a 添加路径GtkBindingSet
path_type- 模式适用的路径类型
path_pattern- 实际匹配模式
priority- 绑定优先级[br \=“”
另请参见
gtk3-Bindings


------------ KeyGTK3gtk_binding_set_by_class ----

gtk_binding_set_by_class
此函数返回以传入的类结构的类型名称命名的绑定集。此函数按需创建新的绑定集。
语法
参数
object_class- 一个有效的类GObject
返回
toobject_class对应的绑定集。
另请参见
gtk3-Bindings


------------ KeyGTK3gtk_binding_set_find ----

gtk_binding_set_find
查找按其全局唯一名称设置的绑定。set_name可以是用于 gtk_binding_set_new（） 的名称，也可以是 gtk_binding_set_by_class（） 中使用的类的类型名称。
语法
参数
set_name- 唯一的绑定集名称
返回
NULL 或指定的绑定集。[无转移]
另请参见
gtk3-Bindings


------------ KeyGTK3gtk_binding_set_new ----

gtk_binding_set_new
GTK+ 维护绑定集的全局列表。每个绑定集都有一个唯一的名称，需要在创建时指定该名称。
语法
参数
set_name- 此绑定集的唯一名称
返回
新的绑定集。[转移完整]
另请参见
gtk3-Bindings


------------ KeyGTK3gtk_bin_get_child ----

gtk_bin_get_child
获取 的子项，如果 bin 不包含任何子构件，则获取 NULL。返回的构件没有添加引用，因此您无需取消引用它。GtkBin
语法
参数
bin- 一GtkBin
返回
指向 的子级的指针。[无转移][/代码GtkBin
另请参见
GtkBin


------------ KeyGTK3gtk_border_copy ----

gtk_border_copy
复制 .GtkBorder
语法
参数
border_- 一GtkBorder
返回
border_的副本。
另请参见
GtkStyleContext


------------ KeyGTK3gtk_border_free ----

gtk_border_free
閲婃斁 .GtkBorder
璇硶
鍙傛暟
border_- 涓€GtkBorder
鍙﹁鍙傝
GtkStyleContext


------------ KeyGTK3gtk_border_new ----

gtk_border_new
分配新的元素并将其元素初始化为零。GtkBorder
返回
新分配的 .带gtk_border_free（）GtkBorder
自 2.14 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_box_get_baseline_position ----

gtk_box_get_baseline_position
获取由 gtk_box_set_baseline_position（） 设置的值。
语法
参数
box- 一GtkBox
返回
基线位置
自 3.10 起
另请参见
GtkBox


------------ KeyGTK3gtk_box_get_center_widget ----

gtk_box_get_center_widget
检索框的中心构件。
语法
参数
box- 一GtkBox
返回
中心微件。[无转移]
自 3.12 起
另请参见
GtkBox


------------ KeyGTK3gtk_box_get_homogeneous ----

gtk_box_get_homogeneous
返回框是否均匀（所有子项的大小相同）。请参见gtk_box_set_homogeneous（）。
语法
参数
box- 一GtkBox
返回
如果框是同质的，则为 TRUE。
另请参见
GtkBox


------------ KeyGTK3gtk_box_get_spacing ----

gtk_box_get_spacing
获取由 gtk_box_set_spacing（） 设置的值。
语法
参数
box- 一GtkBox
返回
儿童之间的间距
另请参见
GtkBox


------------ KeyGTK3gtk_box_new ----

gtk_box_new
创建新的 .GtkBox
语法
参数
orientation- 盒子的方向。
spacing- 默认情况下要放置在子级之间的像素数。
返回
一个新的.GtkBox
自 3.0 起
另请参见
GtkBox


------------ KeyGTK3gtk_box_pack_end ----

gtk_box_pack_end
将子项添加到框中，参照框的末尾进行包装。孩子在参考盒的末端包装任何其他儿童之后（远离末端）被包装。
语法
参数
box- 一GtkBox
child- 要添加到框中GtkWidget
expand- TRUE 如果新子项要分配给 box 的额外空间。额外的空间将在使用此选项的盒子的所有子项之间平均分配
fill- 如果通过扩展选项实际分配给子项而不是只是填充它而给予子项的空间，则为 TRUE。如果展开设置为 FALSE，则此参数不起作用。子 isalways 分配了水平的全高和垂直的全宽。此选项会影响其他维度GtkBoxGtkBox
padding- 在此子项和 itsneighbors 之间放置的额外空间（以像素为单位），超出属性指定的全局量。如果 child 是框的其中一端的小部件，则填充像素也放在子和框的参考边缘之间?spacing?
另请参见
GtkBox


------------ KeyGTK3gtk_box_pack_start ----

gtk_box_pack_start
将子项添加到框中，参照框的开头进行包装。孩子在任何其他孩子包装后包装，参考盒子的开始。
语法
参数
box- 一GtkBox
child- 要添加到框中GtkWidget
expand- TRUE 如果新子项要分配给 box 的额外空间。额外的空间将在使用此选项的所有子项之间平均分配
fill- 如果通过扩展选项实际分配给子项而不是只是填充它而给予子项的空间，则为 TRUE。如果展开设置为 FALSE，则此参数不起作用。子 isalways 分配了水平的全高和垂直的全宽。此选项会影响其他维度GtkBoxGtkBox
padding- 在此子项和 itsneighbors 之间放置的额外空间（以像素为单位），超出属性指定的全局量。如果 child 是框的其中一端的小部件，则填充像素也放在子和框的参考边缘之间?spacing?
另请参见
GtkBox


------------ KeyGTK3gtk_box_query_child_packing ----

gtk_box_query_child_packing
获取有关如何将儿童包装到箱子中的信息。
语法
参数
box- 一GtkBox
child- 要查询的孩子GtkWidget
expand- 指向扩展子属性的返回位置的指针。[输出]
fill- 指向返回填充子属性位置的指针。[输出]
padding- 指向返回填充子属性位置的指针。[输出]
pack_type- 指向包类型子属性的返回位置的指针。[输出]
另请参见
GtkBox


------------ KeyGTK3gtk_box_reorder_child ----

gtk_box_reorder_child
将子项移动到框子项列表中的新位置。该列表包含打包的小部件以及打包的小部件，按照这些小部件被添加到框中的顺序排列。构件在框子列表中的位置决定了构件在箱子中的包装位置。列表中某个位置的子构件将紧随列表中前面显示的相同包装类型的所有其他构件之后进行包装。GTK_PACK_STARTGTK_PACK_END
语法
参数
box- 一GtkBox
child- 移动GtkWidget
position- 儿童框列表中儿童的新位置，从 0 开始。如果为负，则表示列表的末尾
另请参见
GtkBox


------------ KeyGTK3gtk_box_set_baseline_position ----

gtk_box_set_baseline_position
设置框的基线位置。这个令人敬畏的水平框至少有一个基线对齐子项。如果可用的垂直空间多于请求的空间，并且父级未分配基线，则使用位置来分配基线，以分配外部可用空间。
语法
参数
box- 一GtkBox
position- 一GtkBaselinePosition
自 3.10 起
另请参见
GtkBox


------------ KeyGTK3gtk_box_set_center_widget ----

gtk_box_set_center_widget
设置一个中心小部件;这是一个子小部件，它将相对于框的整个宽度居中，即使两侧的子小部件占用不同数量的空间。
语法
参数
box- 一GtkBox
widget- 小部件居中。[允许-无]
自 3.1 起
另请参见
GtkBox


------------ KeyGTK3gtk_box_set_child_packing ----

gtk_box_set_child_packing
设置将孩子装入盒子的方式。
语法
参数
box- 一GtkBox
child- 要设置的孩子GtkWidget
expand- 展开子属性的新值
fill- 填充子属性的新值
padding- 填充子属性的新值
pack_type- 包类型子属性的新值
另请参见
GtkBox


------------ KeyGTK3gtk_box_set_homogeneous ----

gtk_box_set_homogeneous
设置 box 的属性，控制 box 的所有子项在框中是否都给定相等的间距。?homogeneous?
语法
参数
box- 一GtkBox
homogeneous- 一个布尔值，TRUE 用于创建相等的分配，FALSE 用于变量分配
另请参见
GtkBox


------------ KeyGTK3gtk_box_set_spacing ----

gtk_box_set_spacing
设置 box 的属性，该属性是要放置在 box 的子级之间的像素数。?spacing?
语法
参数
box- 一GtkBox
spacing- 要放在子级之间的像素数
另请参见
GtkBox


------------ KeyGTK3gtk_buildable_add_child ----

gtk_buildable_add_child
将子项添加到可生成项。type 是一个可选字符串，用于描述应如何添加子级。
语法
参数
buildable- 一GtkBuildable
builder- 一GtkBuilder
child- 要添加的子项
type- 子级或 NULL 类型。[允许-无]
自 2.12 起
另请参见
GtkBuildable


------------ KeyGTK3gtk_buildable_construct_child ----

gtk_buildable_construct_child
使用名称名称构造可构建的子项。如果 ？构造函数？已在 UI 定义中指定。GtkBuilder
语法
参数
buildable- 一GtkBuildable
builder  -  	GtkBuilder用于构造此对象
name- 要构造的子项的名称
返回
构造的子项。[转移完整]
自 2.12 起
另请参见
GtkBuildable


------------ KeyGTK3gtk_buildable_custom_finished ----

gtk_buildable_custom_finished
这类似于gtk_buildable_parser_finished（），但对于可构建对象处理的每个自定义标记，调用一次。
语法
参数
buildable- 一GtkBuildable
builder- 一GtkBuilder
child- 子对象或 NULL 表示非子标记。[允许-无]
tagname- 标签的名称
data- 在custom_tag_start中创建的用户数据
自 2.12 起
另请参见
GtkBuildable


------------ KeyGTK3gtk_buildable_custom_tag_end ----

gtk_buildable_custom_tag_end
这是在可构建对象处理的每个自定义元素的末尾调用的。
语法
参数
buildable- 一GtkBuildable
builder  -  	GtkBuilder用于构造此对象
child- 子对象或 NULL 表示非子标记。[允许-无]
tagname- 标签名称
data- 将传递到解析器函数的用户数据。[类型指点仪]
自 2.12 起
另请参见
GtkBuildable


------------ KeyGTK3gtk_buildable_custom_tag_start ----

gtk_buildable_custom_tag_start
这是对下每个未知元素调用的.
语法
参数
buildable- 一GtkBuildable
builder- 用于构造此对象的 aGtkBuilder
child- 子对象或 NULL 表示非子标记。[允许-无]
tagname- 标签名称
parser- a 填写。GMarkupParser
data- 将传递到解析器函数中的用户数据的返回位置。[输出]
返回
如果对象具有自定义实现，则为 TRUE，如果没有，则 FALSE。
自 2.12 起
另请参见
GtkBuildable


------------ KeyGTK3gtk_buildable_get_internal_child ----

gtk_buildable_get_internal_child
获取名为可生成对象的子项的内部子项。
语法
参数
buildable- 一GtkBuildable
builder- 一GtkBuilder
childname- 孩子的名字
返回
可构建对象的内部子级。[无转移]
自 2.1 起
另请参见
GtkBuildable


------------ KeyGTK3gtk_buildable_get_name ----

gtk_buildable_get_name
获取可生成对象的名称。 根据用于构造可构建对象的GtkBuilder UI定义设置名称。GtkBuilder
语法
参数
buildable- 一GtkBuildable
返回
用 gtk_buildable_set_name（） 设置的名称
自 2.12 起
另请参见
GtkBuildable


------------ KeyGTK3gtk_buildable_parser_finished ----

gtk_buildable_parser_finished
在生成器完成对 GtkBuilder UI 定义的解析时调用。请注意，每次在生成器上调用gtk_builder_add_from_file（） 或 gtk_builder_add_from_string（） 时，都会调用一次。
语法
参数
buildable- 一GtkBuildable
builder- 一GtkBuilder
自 2.12 起
另请参见
GtkBuildable


------------ KeyGTK3gtk_buildable_set_buildable_property ----

gtk_buildable_set_buildable_property
将属性名称名称设置为可生成对象上的值。
语法
参数
buildable- 一GtkBuildable
builder- 一GtkBuilder
name- 房产名称
value- 财产价值
自 2.12 起
另请参见
GtkBuildable


------------ KeyGTK3gtk_buildable_set_name ----

gtk_buildable_set_name
设置可生成对象的名称。
语法
参数
buildable- 一GtkBuildable
name- 要设置的名称
自 2.12 起
另请参见
GtkBuildable


------------ KeyGTK3gtk_builder_add_callback_symbol ----

gtk_builder_add_callback_symbol
将callback_symbol添加到给定callback_name下的生成器范围。使用此函数将覆盖添加的任何回调符号的 gtk_builder_connect_signals（） 行为。使用此方法可以更好地封装，因为它不需要在全局命名空间中声明回调符号。
语法
参数
builder- 一GtkBuilder
callback_name- 回调的名称，如 XML 中预期的那样
callback_symbol- 回调指针。[范围异步]
自 3.10 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_add_callback_symbols ----

gtk_builder_add_callback_symbols
一个方便的函数，用于为每个符号添加许多回调而不是callinggtk_builder_add_callback_symbol（）。
语法
参数
builder- 一GtkBuilder
first_callback_name- 回调的名称，如 XML 中预期的那样
first_callback_symbol- 回调指针。[范围异步]
...- 以 NULL 结尾的回调名称和回调符号对的列表
自 3.10 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_add_from_file ----

gtk_builder_add_from_file
解析包含 GtkBuilder UI 定义的文件，并将其与生成器的当前内容合并。大多数用户可能希望使用gtk_builder_new_from_file（）。错误 0 将返回，错误将从 或 域中分配 a。尝试处理此调用的失败是不合理的。不应将此功能用于不受信任的文件（即：不属于应用程序的文件）。损坏的文件很容易使程序崩溃，并且内存可能泄漏导致报告的故障。当检测到错误时，唯一合理的做法是调用g_error（）。GErrorGTK_BUILDER_ERRORG_MARKUP_ERRORG_FILE_ERRORGtkBuilder
语法
参数
builder- 一GtkBuilder
filename- 要解析的文件的名称
error- 返回错误的位置，或 NULL。[允许-无]
返回
成功时为正值，发生错误时为 0
自 2.12 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_add_from_resource ----

gtk_builder_add_from_resource
解析包含 GtkBuilder UI 定义的资源文件，并将其与生成器的当前内容合并。大多数用户可能希望使用gtk_builder_new_from_resource（）。错误 0 将返回，错误将从 或 域中分配 a。尝试处理此调用的失败是不合理的。当检测到错误时，唯一合理的方法是调用g_error（）。GErrorGTK_BUILDER_ERRORG_MARKUP_ERRORG_RESOURCE_ERROR
语法
参数
builder- 一GtkBuilder
resource_path- 要解析的资源文件的路径
error- 返回错误的位置，或 NULL。[允许-无]
返回
成功时为正值，发生错误时为 0
自 3.4 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_add_from_string ----

gtk_builder_add_from_string
分析包含 GtkBuilder UI 定义的字符串，并将其与生成器的当前内容合并。大多数用户可能希望使用gtk_builder_new_from_string（）。错误 0 时，将返回错误，并且将从 或 域中分配错误。尝试处理此调用的失败是不合理的。当检测到错误时，唯一合理的方法是调用g_error（）。GErrorGTK_BUILDER_ERRORG_MARKUP_ERROR
语法
参数
builder- 一GtkBuilder
buffer- 要解析的字符串
length- 缓冲区的长度（如果缓冲区是 nul 终止的，则可能为 -1）
error- 返回错误的位置，或 NULL。[允许-无]
返回
成功时为正值，发生错误时为 0
自 2.12 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_add_objects_from_file ----

gtk_builder_add_objects_from_file
解析包含 GtkBuilder UI 定义的文件，仅生成请求的对象，并与生成器的当前内容合并。错误 0 将返回，错误将从 或 域中分配 a。如果要添加的对象依赖于不是其子对象的对象（例如，依赖于其子对象的 a），则必须在object_ids中显式列出所有这些对象。GErrorGTK_BUILDER_ERRORG_MARKUP_ERRORG_FILE_ERRORGtkTreeViewGtkTreeModel
语法
参数
builder- 一GtkBuilder
filename- 要解析的文件的名称
object_ids- 要构建的 nul 终止对象数组。[数组零终止 = 1][元素型 utf8]
error- 返回错误的位置，或 NULL。[允许-无]
返回
成功时为正值，发生错误时为 0
自 2.14 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_add_objects_from_resource ----

gtk_builder_add_objects_from_resource
解析包含 GtkBuilder UI 定义的资源文件，仅构建请求的对象并与构建器的当前内容合并。错误 0 将返回，错误将从 或 域中分配 a。如果要添加的对象依赖于 notits 子对象的对象（例如，依赖于其子对象的 a），则必须在object_ids中显式列出所有这些对象。GErrorGTK_BUILDER_ERRORG_MARKUP_ERRORG_RESOURCE_ERRORGtkTreeViewGtkTreeModel
语法
参数
builder- 一GtkBuilder
resource_path- 要解析的资源文件的路径
object_ids- 要构建的 nul 终止对象数组。[数组零终止 = 1][元素型 utf8]
error- 返回错误的位置，或 NULL。[允许-无]
返回
成功时为正值，发生错误时为 0
自 3.4 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_add_objects_from_string ----

gtk_builder_add_objects_from_string
解析包含 GtkBuilder UI 定义的字符串，仅生成请求的对象并与生成器的当前内容合并。错误 0 时，将返回错误，并且将从 或 域中分配错误。如果要添加的对象依赖于不是其子对象的对象（例如，依赖于其子对象的 a），则必须在object_ids中显式列出所有这些对象。GErrorGTK_BUILDER_ERRORG_MARKUP_ERRORGtkTreeViewGtkTreeModel
语法
参数
builder- 一GtkBuilder
buffer- 要解析的字符串
length- 缓冲区的长度（如果缓冲区是 nul 终止的，则可能为 -1）
object_ids- 要构建的 nul 终止对象数组。[数组零终止 = 1][元素型 utf8]
error- 返回错误的位置，或 NULL。[允许-无]
返回
成功时为正值，发生错误时为 0
自 2.14 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_connect_signals ----

gtk_builder_connect_signals
此方法是 gtk_builder_connect_signals_full（） 的更简单变体。它使用显式添加到构建器中的符号，并预先调用togtk_builder_add_callback_symbol（）。在符号被显着添加的情况下;它使用 的内省功能（通过打开模块 NULL）来查看应用程序的符号表。从这里开始，它尝试将接口描述中给出的信号处理程序名称与应用程序中的符号进行匹配，并连接信号。请注意，此函数只能调用一次，后续调用将不执行任何操作。请注意，除非调用gtk_builder_add_callback_symbol（） for 所有由加载的 XML 引用的信号回调，否则此函数将需要在平台上受支持。如果依赖符号表中查找回调的支持，应注意以下细节：在编译Windows应用程序时，必须声明信号回调，否则它们将不会放在符号表中。在Linux和Unices上，这不是必需的;相反，应用程序应该使用 -Wl,--export-dynamic CFLAGS 进行编译，并链接到反对gmodule-export-2.0。GModuleGModuleGModuleG_MODULE_EXPORT
语法
参数
builder- 一GtkBuilder
user_data- 用户数据与所有信号一起传回
自 2.12 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_connect_signals_full ----

gtk_builder_connect_signals_full
这个函数可以被认为是gtk_builder_connect_signals（）的解释性语言绑定版本，除了它不需要GModule才能正常工作。
语法
参数
builder- 一GtkBuilder
func- 用于连接信号的函数。[范围调用]
user_data- 将传递到连接函数的任意数据
自 2.12 起
另请参见
GtkBuilder


------------ KeyGTK3GTK_BUILDER_ERROR ----

GTK_BUILDER_ERROR
GTK_BUILDER_ERROR
[璇硶]#define GTK_BUILDER_ERROR锛坓tk_builder_error_quark 锛堬級锛塠/璇硶
鍙﹁鍙傝
GtkBuilder


------------ KeyGTK3gtk_builder_expose_object ----

gtk_builder_expose_object
将对象添加到生成器对象池，以便可以像生成器生成的任何其他对象一样引用它。
语法
参数
builder- 一GtkBuilder
name- 向构建器公开的对象的名称
object- 要公开的对象
3.8 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_get_application ----

gtk_builder_get_application
获取与生成器关联的 。用于根据请求从构建器正在加载的 XML 创建操作代理。默认情况下，构建器使用默认应用程序：fromg_application_get_default（） 的应用程序。如果要使用其他应用程序来构造代理，请使用 gtk_builder_set_application（）。GtkApplicationGtkApplication
语法
参数
builder- 一GtkBuilder
返回
构建器正在使用的应用程序，或 NULL。[无转移]
自 3.10 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_get_object ----

gtk_builder_get_object
获取名为 name 的对象。请注意，此函数不会增加返回对象的引用计数。
语法
参数
builder- 一GtkBuilder
name- 要获取的对象的名称
返回
名为 nameor NULL 的对象，如果在对象树中找不到它。[无转移]
自 2.12 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_get_objects ----

gtk_builder_get_objects
获取生成器已构造的所有对象。请注意，此函数不会递增返回对象的引用计数。
语法
参数
builder- 一GtkBuilder
返回
一个新分配的，包含实例构建的所有对象。它应该byg_slist_free（）释放。[元素类型 G 对象][转移容器]GSListGtkBuilder
自 2.12 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_get_translation_domain ----

gtk_builder_get_translation_domain
获取生成器的转换域。
语法
参数
builder- 一GtkBuilder
返回
翻译域。此字符串归生成器对象所有，不得修改或释放。
自 2.12 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_get_type_from_name ----

gtk_builder_get_type_from_name
使用具有该目的的虚函数按名称查找类型。这主要在类型上实现接口时使用。GtkBuilderGtkBuildable
语法
参数
builder- 一GtkBuilder
type_name- 键入名称查找
返回
如果未找到任何类型，则为 type_nameor 找到GTypeG_TYPE_INVALID
自 2.12 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_lookup_callback_symbol ----

gtk_builder_lookup_callback_symbol
获取先前添加到生成器的符号，gtk_builder_add_callback_symbols（）此函数旨在用于语言绑定或用于可能使用gtk_builder_connect_signals_full（） 的信号连接的任何情况
语法
参数
builder- 一GtkBuilder
callback_name- 回调的名称
返回
生成器中的回调符号callback_name，或 NULL
自 3.10 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_new ----

gtk_builder_new
创建新的空生成器对象。仅当您打算togtk_builder_add_from_file（），gtk_builder_add_from_resource（）orgtk_builder_add_from_string（））进行多次调用以便将多个UIdescriptions合并到单个构建器中时，此函数才有用。大多数用户可能希望使用gtk_builder_new_from_file（），gtk_builder_new_from_resource（）或gtk_builder_new_from_string（）。
返回
一个新的（空的）对象GtkBuilder
自 2.12 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_new_from_file ----

gtk_builder_new_from_file
在文件文件名中生成 GtkBuilder UI 定义。如果打开文件或解析描述时出错，则程序将被中止。您只应尝试解析作为程序的一部分提供的用户接口描述。
语法
参数
filename- 用户界面描述文件的文件名
返回
a 包含所描述的接口GtkBuilder
自 3.10 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_new_from_resource ----

gtk_builder_new_from_resource
在resource_path生成 GtkBuilder UI 定义。如果在查找复活或解析描述时出错，则程序将被中止。
语法
参数
resource_path- 资源路径GResource
返回
a 包含所描述的接口GtkBuilder
自 3.10 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_new_from_string ----

gtk_builder_new_from_string
生成由字符串（采用GtkBuilder UI定义格式）描述的用户界面。如果字符串以 NULL 结尾，则长度应为 -1。如果 length 不是 -1，则它是字符串的长度。如果解析字符串时出错，则程序将被中止。不应尝试从不受信任的源分析用户界面描述。
语法
参数
string- 用户界面 （XML） 描述
length- 字符串的长度，或 -1
返回
a 包含字符串描述的接口GtkBuilder
自 3.10 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_set_application ----

gtk_builder_set_application
设置与生成器关联的应用程序。仅当流程中有多个函数时，才需要此函数。应用程序不能为空。GApplication
语法
参数
builder- 一GtkBuilder
application- 一GtkApplication
自 3.10 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_set_translation_domain ----

gtk_builder_set_translation_domain
设置生成器的翻译域。看。?translation-domain?
语法
参数
builder- 一GtkBuilder
domain- 翻译域或空。[允许-无]
自 2.12 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_value_from_string ----

gtk_builder_value_from_string
此函数从字符串中取消元化值。此函数在值参数上调用g_value_init（），因此无需事先对其进行初始化。此函数可以处理 char、uchar、布尔值、int、uint、long、ulong、enum、flags、float、double、string 和 type 值。对类型值的支持仍然要来。出现错误时，将返回 FALSE，并从域中分配错误。GdkColorGdkRGBAGtkAdjustmentGtkWidgetGErrorGTK_BUILDER_ERROR
语法
参数
builder- 一GtkBuilder
pspec- 为财产GParamSpec
string- 值的字符串表示形式
value- 将结果存储进去。GValue
error- 返回错误的位置，或 NULL。[允许-无]
返回
成功时真
自 2.12 起
另请参见
GtkBuilder


------------ KeyGTK3gtk_builder_value_from_string_type ----

gtk_builder_value_from_string_type
与 gtk_builder_value_from_string（） 一样，此函数从字符串中分离出一个值，但采用 a 而不是 .此函数在值参数上调用 g_value_init（），因此无需事先对其进行初始化。出现错误时，将返回 FALSE，并从域中分配错误。GTypeGParamSpecGErrorGTK_BUILDER_ERROR
语法
参数
builder- 一GtkBuilder
type- 值的GType
string- 值的字符串表示形式
value- 将结果存储进去。GValue
error- 返回错误的位置，或 NULL。[允许-无]
返回
成功时真
自 2.12 起
另请参见
GtkBuilder


------------ KeyGTK3GTK_BUILDER_WARN_INVALID_CHILD_TYPE ----

GTK_BUILDER_WARN_INVALID_CHILD_TYPE
GTK_BUILDER_WARN_INVALID_CHILD_TYPE()
此宏应用于在add_child实现中发出有关意外类型值的警告。GtkBuildable
语法
参数
object- 警告发生时所在的GtkBuildable
type- 意外的类型值
另请参见
GtkBuilder


------------ KeyGTK3gtk_button_box_get_child_non_homogeneous ----

gtk_button_box_get_child_non_homogeneous
返回子项是否免于同质化。
语法
参数
widget- 一GtkButtonBox
child- 小部件的子项
返回
如果孩子不受均匀尺寸的影响，则为 TRUE
自 3.2 起
另请参见
GtkButtonBox


------------ KeyGTK3gtk_button_box_get_child_secondary ----

gtk_button_box_get_child_secondary
返回子项是否应出现在子项的辅助组中。
语法
参数
widget- 一GtkButtonBox
child- 小部件的子项
返回
孩子是否应该出现在次要的子群体中。
2.4 起
另请参见
GtkButtonBox


------------ KeyGTK3gtk_button_box_get_layout ----

gtk_button_box_get_layout
检索用于在按钮框中排列按钮的方法。
语法
参数
widget- 一GtkButtonBox
返回
用于在小部件中布置按钮的方法。
另请参见
GtkButtonBox


------------ KeyGTK3gtk_button_box_new ----

gtk_button_box_new
Creates a new .GtkButtonBox
Syntax
Parameters
orientation  -  	the box' orientation.
Returns
a new .GtkButtonBox
Since 3.0
See Also
GtkButtonBox


------------ KeyGTK3gtk_button_box_set_child_non_homogeneous ----

gtk_button_box_set_child_non_homogeneous
Sets whether the child is exempted from homogeous sizing.
Syntax
Parameters
widget  -  	a GtkButtonBox
child  -  	a child of widget
non_homogeneous  -  	the new value
Since 3.
See Also
GtkButtonBox


------------ KeyGTK3gtk_button_box_set_child_secondary ----

gtk_button_box_set_child_secondary
Sets whether child should appear in a secondary group of children.A typical use of a secondary child is the help button in a dialog.This group appears after the other children if the styleis GTK_BUTTONBOX_START, GTK_BUTTONBOX_SPREAD orGTK_BUTTONBOX_EDGE, and before the other children if the styleis GTK_BUTTONBOX_END. For horizontal button boxes, the definitionof before/after depends on direction of the widget (seegtk_widget_set_direction()). If the style is GTK_BUTTONBOX_STARTor GTK_BUTTONBOX_END, then the secondary children are aligned atthe other end of the button box from the main children. For theother styles, they appear immediately next to the main children.
Syntax
Parameters
widget  -  	a GtkButtonBox
child  -  	a child of widget
is_secondary  -  	if TRUE, the childappears in a secondary group of thebutton box.
See Also
GtkButtonBox


------------ KeyGTK3gtk_button_box_set_layout ----

gtk_button_box_set_layout
Changes the way buttons are arranged in their container.
Syntax
Parameters
widget  -  	a GtkButtonBox
layout_style  -  	the new layout style
See Also
GtkButtonBox


------------ KeyGTK3gtk_button_clicked ----

gtk_button_clicked
向给定 的 发出信号。?clicked?GtkButton
语法
参数
button- 您要将信号发送到。GtkButton
另请参见
GtkButton


------------ KeyGTK3gtk_button_enter ----

gtk_button_enter
gtk_button_enter自版本 2.20 起已弃用，不应在新编写的代码中使用。使用信号。向给定 的 发出信号。?enter-notify-event??enter?GtkButton
语法
参数
button- 您要将信号发送到。GtkButton
另请参见
GtkButton


------------ KeyGTK3gtk_button_get_alignment ----

gtk_button_get_alignment
获取按钮中子项的对齐方式。
语法
参数
button- 一GtkButton
xalign- 返回水平对齐的位置。[输出]
yalign- 返回垂直对齐的位置。[输出]
2.4 起
另请参见
GtkButton


------------ KeyGTK3gtk_button_get_always_show_image ----

gtk_button_get_always_show_image
返回按钮是否将忽略设置并始终显示图像（如果可用）。?gtk-button-images?
语法
参数
button- 一GtkButton
返回
如果按钮始终显示图像，则为 TRUE
3.6 起
另请参见
GtkButton


------------ KeyGTK3gtk_button_get_event_window ----

gtk_button_get_event_window
如果已实现，则返回按钮的事件窗口，否则返回 NULL。应该很少需要此功能。
语法
参数
button- 一GtkButton
返回
按钮的事件窗口。[无转移]
自 2.2 起
另请参见
GtkButton


------------ KeyGTK3gtk_button_get_focus_on_click ----

gtk_button_get_focus_on_click
返回按钮在用鼠标单击时是否抓住焦点。请参见gtk_button_set_focus_on_click（）。
语法
参数
button- 一GtkButton
返回
如果按钮在用鼠标单击时抓住焦点，则为 TRUE。
2.4 起
另请参见
GtkButton


------------ KeyGTK3gtk_button_get_image ----

gtk_button_get_image
获取当前设置为按钮图像的小部件。这可能由 gtk_button_set_image（） 显式设置，或由 gtk_button_new_from_stock（） 构造。
语法
参数
button- 一GtkButton
返回
a 或 NULL，以防没有图像。[无转移]GtkWidget
自 2.6 起
另请参见
GtkButton


------------ KeyGTK3gtk_button_get_image_position ----

gtk_button_get_image_position
获取图像相对于按钮内文本的位置。
语法
参数
button- 一GtkButton
返回
位置
自 2.10 起
另请参见
GtkButton


------------ KeyGTK3gtk_button_get_label ----

gtk_button_get_label
从按钮的标签中提取文本，如bygtk_button_set_label（） 设置的那样。如果尚未设置标签文本，则返回值将为 NULL。如果您创建一个带有gtk_button_new（）的空按钮以用作容器，则会出现这种情况。
语法
参数
button- 一GtkButton
返回
标签微件的文本。此字符串归小部件所有，不得修改或释放。
另请参见
GtkButton


------------ KeyGTK3gtk_button_get_relief ----

gtk_button_get_relief
返回给定 的当前浮雕样式。GtkButton
语法
参数
button- 你想要的从。GtkButtonGtkReliefStyle
返回
当前GtkReliefStyle
另请参见
GtkButton


------------ KeyGTK3gtk_button_get_use_stock ----

gtk_button_get_use_stock
gtk_button_get_use_stock自 3.10 版起已弃用，不应在新编写的代码中使用。返回按钮标签是否为库存物料。
语法
参数
button- 一GtkButton
返回
如果按钮标签用于选择库存项目，而不是直接用作标签文本，则为 TRUE。
另请参见
GtkButton


------------ KeyGTK3gtk_button_get_use_underline ----

gtk_button_get_use_underline
返回按钮标签中嵌入的下划线是否指示严重。请参见 gtk_button_set_use_underline（）。
语法
参数
button- 一GtkButton
返回
如果按钮标签中的嵌入式下划线指示助记符快捷键，则为 TRUE。
另请参见
GtkButton


------------ KeyGTK3gtk_button_leave ----

gtk_button_leave
gtk_button_leave自版本 2.20 起已弃用，不应在新编写的代码中使用。使用信号。向给定 的 发出信号。?leave-notify-event??leave?GtkButton
语法
参数
button- 您要将信号发送到。GtkButton
另请参见
GtkButton


------------ KeyGTK3gtk_button_new ----

gtk_button_new
创建新的构件。要将子构件添加到按钮，请使用 gtk_container_add（）。GtkButton
返回
新创建的小部件。GtkButton
另请参见
GtkButton


------------ KeyGTK3gtk_button_new_from_icon_name ----

gtk_button_new_from_icon_name
创建一个新按钮，其中包含当前图标主题中的图标。如果图标名称未知，则“损坏的图像？图标将被显示。如果当前图标主题发生更改，图标将相应地更新。此函数是围绕 gtk_button_new（） andgtk_button_set_image（） 的便利包装器。
语法
参数
icon_name- 图标名称
size- 图标大小。[键入整型]
返回
一个新的显示主题图标GtkButton
自 3.10 起
另请参见
GtkButton


------------ KeyGTK3gtk_button_new_from_stock ----

gtk_button_new_from_stock
gtk_button_new_from_stock自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用 gtk_button_new_with_label（）。创建一个包含库存项中的图像和文本的新项。一些股票 ID 具有预处理器宏，如 and。如果stock_id未知，则它将被视为助记符标签（如gtk_button_new_with_mnemonic（））。GtkButtonGTK_STOCK_OKGTK_STOCK_APPLY
语法
参数
stock_id- 库存项目的名称
返回
一个新的GtkButton
另请参见
GtkButton


------------ KeyGTK3gtk_button_new_with_label ----

gtk_button_new_with_label
创建一个包含给定文本的子项的小部件。GtkButtonGtkLabel
语法
参数
label- 您希望保留的文本。GtkLabel
返回
新创建的小部件。GtkButton
另请参见
GtkButton


------------ KeyGTK3gtk_button_new_with_mnemonic ----

gtk_button_new_with_mnemonic
创建包含标签的新标签。如果标签中的字符前面带有下划线，则带有下划线。如果需要在标签中使用文字下划线字符，请使用 ？__？（两个下分）。第一个带下划线的字符表示称为助记符的键盘增读器。按 Alt 和该键可激活按钮。GtkButton
语法
参数
label- 按钮的文本，在字母字符前面带有下划线
返回
一个新的GtkButton
另请参见
GtkButton


------------ KeyGTK3gtk_button_pressed ----

gtk_button_pressed
gtk_button_pressed自版本 2.20 起已弃用，不应在新编写的代码中使用。使用信号。向给定 的 发出信号。?button-press-event??pressed?GtkButton
语法
参数
button- 您要将信号发送到。GtkButton
另请参见
GtkButton


------------ KeyGTK3gtk_button_released ----

gtk_button_released
gtk_button_released自版本 2.20 起已弃用，不应在新编写的代码中使用。使用信号。向给定 的 发出信号。?button-release-event??released?GtkButton
语法
参数
button- 您要将信号发送到。GtkButton
另请参见
GtkButton


------------ KeyGTK3gtk_button_set_alignment ----

gtk_button_set_alignment
设置子项的对齐方式。除非子项是 或 .GtkMiscGtkAlignment
语法
参数
button- 一GtkButton
xalign- 子项的水平位置，0.0 为左对齐，1.0 为右对齐
yalign- 子项的垂直位置，0.0 表示顶部对齐，1.0 表示底部对齐
2.4 起
另请参见
GtkButton


------------ KeyGTK3gtk_button_set_always_show_image ----

gtk_button_set_always_show_image
如果为 TRUE，则该按钮将忽略该设置并始终显示图像（如果可用）。如果按钮在没有图像的情况下无用或难以使用，请使用此属性。?gtk-button-images?
语法
参数
button- 一GtkButton
always_show- 如果菜单项应始终显示图像，则为 TRUE
3.6 起
另请参见
GtkButton


------------ KeyGTK3gtk_button_set_focus_on_click ----

gtk_button_set_focus_on_click
设置按钮在用鼠标单击时是否将获取焦点。使鼠标单击不抓取焦点在您不希望将键盘焦点从应用程序的主要区域中删除的位置非常有用。
语法
参数
button- 一GtkButton
focus_on_click- 按钮在用鼠标点击时是否抓住焦点
2.4 起
另请参见
GtkButton


------------ KeyGTK3gtk_button_set_image ----

gtk_button_set_image
将按钮的图像设置为给定的小部件。如果标签文本为 NULL 或如果为 TRUE，则将显示图像。您不必自己在图像上callgtk_widget_show（）。?always-show-image?
语法
参数
button- 一GtkButton
image- 一个小部件设置为按钮的图像
自 2.6 起
另请参见
GtkButton


------------ KeyGTK3gtk_button_set_image_position ----

gtk_button_set_image_position
设置图像相对于按钮内文本的位置。
语法
参数
button- 一GtkButton
position- 位置
自 2.10 起
另请参见
GtkButton


------------ KeyGTK3gtk_button_set_label ----

gtk_button_set_label
将按钮标签的文本设置为 str。此文本也用于选择库存项目（如果使用gtk_button_set_use_stock（）。这还将清除以前设置的任何标签。
语法
参数
button- 一GtkButton
label- 一个字符串
另请参见
GtkButton


------------ KeyGTK3gtk_button_set_relief ----

gtk_button_set_relief
设置给定构件边缘的浮雕样式。存在三种风格，GTK_RELIEF_NORMAL，GTK_RELIEF_HALF，GTK_RELIEF_NONE。正如人们所猜测的那样，默认样式是GTK_RELIEF_NORMAL。GtkButton
语法
参数
button- 你想设置浮雕样式的。GtkButton
newstyle- 如上所述的GtkReliefStyle。
另请参见
GtkButton


------------ KeyGTK3gtk_button_set_use_stock ----

gtk_button_set_use_stock
gtk_button_set_use_stock自版本 3.10 起已弃用，不应在新编写的代码中使用。如果为 TRUE，则在按钮上设置的标签将用作股票 ID，以选择按钮的库存项目。
语法
参数
button- 一GtkButton
use_stock- 如果按钮应使用库存项目，则为 TRUE
另请参见
GtkButton


------------ KeyGTK3gtk_button_set_use_underline ----

gtk_button_set_use_underline
如果为 true，则按钮标签文本中的下划线指示应将下一个字符用于助记符快捷键。
语法
参数
button- 一GtkButton
use_underline- 如果文本中的下划线表示助记符，则为 TRUE
另请参见
GtkButton


------------ KeyGTK3gtk_calendar_clear_marks ----

gtk_calendar_clear_marks
删除所有视觉标记。
语法
参数
calendar- 一GtkCalendar
另请参见
GtkCalendar


------------ KeyGTK3gtk_calendar_get_date ----

gtk_calendar_get_date
从 中获取选定的日期。GtkCalendar
语法
参数
calendar- 一GtkCalendar
year- 将年份存储为小数（例如 2011）或 NULL 的位置。[输出][允许-无]
month- 存储月份编号（介于 0 和 11 之间）的位置，或 NULL。[输出][允许-无]
day- 存储日期编号（介于 1 和 31 之间）的位置，或 NULL。[输出][允许-无]
另请参见
GtkCalendar


------------ KeyGTK3gtk_calendar_get_day_is_marked ----

gtk_calendar_get_day_is_marked
如果日历的日期已被标记，则返回。
语法
参数
calendar- 一GtkCalendar
day- 日期编号介于 1 和 31 之间。
返回
日期是否被标记。
自 3.0 起
另请参见
GtkCalendar


------------ KeyGTK3gtk_calendar_get_detail_height_rows ----

gtk_calendar_get_detail_height_rows
查询详细信息单元格的高度（以行为单位）。看。?detail-width-chars?
语法
参数
calendar- 一个.GtkCalendar
返回
详细信息单元格的高度（以行为单位）。
自 2.14 起
另请参见
GtkCalendar


------------ KeyGTK3gtk_calendar_get_detail_width_chars ----

gtk_calendar_get_detail_width_chars
查询详细信息单元格的宽度（以字符为单位）。看。?detail-width-chars?
语法
参数
calendar- 一个.GtkCalendar
返回
详细信息单元格的宽度（以字符为单位）。
自 2.14 起
另请参见
GtkCalendar


------------ KeyGTK3gtk_calendar_get_display_options ----

gtk_calendar_get_display_options
返回日历的当前显示选项。
语法
参数
calendar- 一GtkCalendar
返回
显示选项。
2.4 起
另请参见
GtkCalendar


------------ KeyGTK3gtk_calendar_mark_day ----

gtk_calendar_mark_day
在特定日期放置视觉标记。
语法
参数
calendar- 一GtkCalendar
day- 在 1 和 31 之间标记的日期编号。
另请参见
GtkCalendar


------------ KeyGTK3gtk_calendar_new ----

gtk_calendar_new
创建一个新日历，并选择当前日期。
返回
一个新的小部件GtkCalendar
另请参见
GtkCalendar


------------ KeyGTK3gtk_calendar_select_day ----

gtk_calendar_select_day
从当前月份中选择一天。
语法
参数
calendar- 一个.GtkCalendar
day- 日期编号介于 1 和 31 之间，或 0 可取消选择当前选定的日期。
另请参见
GtkCalendar


------------ KeyGTK3gtk_calendar_select_month ----

gtk_calendar_select_month
将日历移动到其他月份。
语法
参数
calendar- 一GtkCalendar
month- 一个介于 0 和 11 之间的月份编号。
year- 月份所在的年份。
另请参见
GtkCalendar


------------ KeyGTK3gtk_calendar_set_detail_func ----

gtk_calendar_set_detail_func
安装一个功能，为Pango标记提供每天的详细信息。此类详细信息的示例包括假期或约会。该信息在设置后每天显示在下面。如果整个文本不适合详细信息区域，或者如果未设置，则会提供包含完整详细信息的工具提示。可以通过设置 和 属性来限制详细信息区域的大小。?show-details??show-details??detail-width-chars??detail-height-rows?
语法
参数
calendar- 一个.GtkCalendar
func- 提供每天详细信息的功能。
data- 要传递给函数的数据。
destroy- 用于发布数据的功能。
自 2.14 起
另请参见
GtkCalendar


------------ KeyGTK3gtk_calendar_set_detail_height_rows ----

gtk_calendar_set_detail_height_rows
更新细节单元格的高度。看。?detail-height-rows?
语法
参数
calendar- 一个.GtkCalendar
rows- 以行为单位的详细高度。
自 2.1 起
另请参见
GtkCalendar


------------ KeyGTK3gtk_calendar_set_detail_width_chars ----

gtk_calendar_set_detail_width_chars
更新细节单元格的宽度。看。?detail-width-chars?
语法
参数
calendar- 一个.GtkCalendar
chars- 字符中的细节宽度。
自 2.14 起
另请参见
GtkCalendar


------------ KeyGTK3gtk_calendar_set_display_options ----

gtk_calendar_set_display_options
设置显示选项（是否显示标题和月标题）。
语法
参数
calendar- 一GtkCalendar
flags- 要设置的显示选项
2.4 起
另请参见
GtkCalendar


------------ KeyGTK3gtk_calendar_unmark_day ----

gtk_calendar_unmark_day
删除特定日期的视觉对象标记。
语法
参数
calendar- 一个.GtkCalendar
day- 在 1 和 31 之间取消标记的日期编号。
另请参见
GtkCalendar


------------ KeyGTK3gtk_cell_area_activate ----

gtk_cell_area_activate
激活区域，通常是通过激活当前聚焦的单元格，但是一些在区域中嵌入小部件的子类也可以激活小部件（如果它当前具有焦点）。
语法
参数
area- 一GtkCellArea
context- 与当前行数据的上下文中GtkCellAreaContext
widget- 该区域正在渲染GtkWidget
cell_area- 与小部件分配相关的区域的大小和位置
flags- 此行数据的区域标志。GtkCellRendererState
edit_only- 如果为 TRUE，则仅激活GTK_CELL_RENDERER_MODE_EDITABLEwill的单元格渲染器。
返回
是否已成功激活 areawas。
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_activate_cell ----

gtk_cell_area_activate_cell
子类在处理事件以激活单元格时使用它，基类在其自己的GtkCellArea->activate（）实现中免费激活键盘事件的单元格。GtkCellAreaGtkCellArea
语法
参数
area- 一GtkCellArea
widget- 该区域正在渲染到GtkWidget
renderer- 激活区域GtkCellRenderer
event- 应该发生细胞活化GdkEvent
cell_area- 当前行的渲染器的在小部件相关坐标中。GdkRectangle
flags- 用于渲染器GtkCellRendererState
返回
细胞激活是否成功
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_add ----

gtk_cell_area_add
将渲染器添加到具有默认子单元格属性的区域。
语法
参数
area- 一GtkCellArea
renderer- 添加到区域GtkCellRenderer
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_add_focus_sibling ----

gtk_cell_area_add_focus_sibling
将同级添加到渲染器的可聚焦区域，如果渲染器可以聚焦给定行，则焦点将围绕渲染器及其所有同级进行绘制。由焦点同级处理的事件也可以激活给定的可聚焦渲染器。
语法
参数
area- 一GtkCellArea
renderer- 期望有焦点GtkCellRenderer
sibling- 添加到渲染器的焦点区域GtkCellRenderer
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_add_with_properties ----

gtk_cell_area_add_with_properties
将渲染器添加到区域，同时设置单元格属性。有关详细信息，请参阅 gtk_cell_area_add（） 和 gtk_cell_area_cell_set（）。
语法
参数
area- 一GtkCellArea
renderer- 放置在内部区域GtkCellRenderer
first_prop_name- 要设置的第一个单元格属性的名称
...- 以 NULL 结尾的属性名称和值列表，以first_prop_name
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_apply_attributes ----

gtk_cell_area_apply_attributes
通过从tree_model中提取值，将任何连接的属性应用于呈现器区域。
语法
参数
area- 一GtkCellArea
tree_model- 从中提取值GtkTreeModel
iter- in tree_modelto 应用值GtkTreeIter
is_expander- 是否患有儿童
is_expanded- iteris 是否在视图中展开，并且子级是否可见
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_attribute_connect ----

gtk_cell_area_attribute_connect
连接属性以应用列中的值以用于正在使用的。GtkTreeModel
语法
参数
area- 一GtkCellArea
renderer- 连接属性GtkCellRenderer
attribute- 属性名称
column- 从中获取属性值的列GtkTreeModel
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_attribute_disconnect ----

gtk_cell_area_attribute_disconnect
断开区域中渲染器的属性，以便不再使用模型中的值更新属性。
语法
参数
area- 一GtkCellArea
renderer- 断开 属性GtkCellRenderer
attribute- 属性名称
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_box_get_spacing ----

gtk_cell_area_box_get_spacing
获取单元格呈现器之间添加的间距。
语法
参数
box- 一GtkCellAreaBox
返回
框中单元格渲染器之间添加的空间。
自 3.0 起
另请参见
GtkCellAreaBox


------------ KeyGTK3gtk_cell_area_box_new ----

gtk_cell_area_box_new
创建新的 .GtkCellAreaBox
返回
新创建的GtkCellAreaBox
自 3.0 起
另请参见
GtkCellAreaBox


------------ KeyGTK3gtk_cell_area_box_pack_end ----

gtk_cell_area_box_pack_end
将渲染器添加到框中，参照框的末尾进行打包。渲染器在参考盒尾的任何其他包装后（远离末端）进行打包。GtkCellRenderer
语法
参数
box- 一GtkCellAreaBox
renderer- 要添加GtkCellRenderer
expand- 渲染器在区域接收超过其自然大小时是否应接收额外的空间
align- 渲染器是否应该在相邻的行中对齐
fixed- 渲染器是否在所有行中都具有相同的大小
自 3.0 起
另请参见
GtkCellAreaBox


------------ KeyGTK3gtk_cell_area_box_pack_start ----

gtk_cell_area_box_pack_start
将渲染器添加到框中，参照框的开头进行打包。渲染器在任何其他打包后打包，并引用框的开头。GtkCellRenderer
语法
参数
box- 一GtkCellAreaBox
renderer- 要添加GtkCellRenderer
expand- 渲染器在区域接收超过其自然大小时是否应接收额外的空间
align- 渲染器是否应该在相邻的行中对齐
fixed- 渲染器是否在所有行中都具有相同的大小
自 3.0 起
另请参见
GtkCellAreaBox


------------ KeyGTK3gtk_cell_area_box_set_spacing ----

gtk_cell_area_box_set_spacing
设置要在框中的单元格呈现器之间添加的间距。
语法
参数
box- 一GtkCellAreaBox
spacing- 要添加的空间GtkCellRenderers
自 3.
另请参见
GtkCellAreaBox


------------ KeyGTK3gtk_cell_area_cell_get ----

gtk_cell_area_cell_get
获取区域中呈现器的一个或多个单元格属性的值。
语法
参数
area- 一GtkCellArea
renderer- 一个在内部区域GtkCellRenderer
first_prop_name- 要获取的第一个单元格属性的名称
...- 返回第一个单元格属性的位置，后跟更多名称/返回位置对，后跟 NULL
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_cell_get_property ----

gtk_cell_area_cell_get_property
获取区域中呈现器的单元格属性的值。
语法
参数
area- 一GtkCellArea
renderer- 内部区域GtkCellRenderer
property_name- 要获取的属性的名称
value- 返回值的位置
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_cell_get_valist ----

gtk_cell_area_cell_get_valist
获取区域中呈现器的一个或多个单元格属性的值。
语法
参数
area- 一GtkCellArea
renderer- 内部区域GtkCellRenderer
first_property_name- 要获取的第一个属性的名称
var_args- 返回第一个属性的位置，后跟更多名称/返回位置对，后跟 NULL
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_cell_set ----

gtk_cell_area_cell_set
为区域中的单元格设置一个或多个单元格属性。
语法
参数
area- 一GtkCellArea
renderer- a 这是一个细胞内部区域GtkCellRenderer
first_prop_name- 要设置的第一个单元格属性的名称
...- 以 NULL 结尾的属性名称和值列表，以first_prop_name
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_cell_set_property ----

gtk_cell_area_cell_set_property
设置区域中渲染器的单元格属性。
语法
参数
area- 一GtkCellArea
renderer- 内部区域GtkCellRenderer
property_name- 要设置的单元格属性的名称
value- 要将单元格属性设置为的值
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_cell_set_valist ----

gtk_cell_area_cell_set_valist
为区域中的渲染器设置一个或多个单元格属性。
语法
参数
area- 一GtkCellArea
renderer- 一个内部区域GtkCellRenderer
first_property_name- 要设置的第一个单元格属性的名称
var_args- 以 NULL 结尾的属性名称和值列表，以first_prop_name
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_class_find_cell_property ----

gtk_cell_area_class_find_cell_property
按名称查找单元格区域类的单元格属性。
语法
参数
aclass- 一GtkCellAreaClass
property_name- 要查找的子属性的名称
返回
子属性的 NULL，如果 aclass 没有具有该名称的子属性。[无转移]GParamSpec
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_class_install_cell_property ----

gtk_cell_area_class_install_cell_property
在单元区域类上安装单元属性。
语法
参数
aclass- 一GtkCellAreaClass
property_id- 房产的id
pspec- 为财产GParamSpec
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_class_list_cell_properties ----

gtk_cell_area_class_list_cell_properties
返回单元格区域类的所有单元格属性。
语法
参数
aclass- 一GtkCellAreaClass
n_properties- 返回找到的单元格属性数的位置。[输出]
返回
新分配的以 NULL 结尾的 * 数组。数组必须使用 g_free（） 释放。[数组长度 = n_properties][转移容器]GParamSpec
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_context_allocate ----

gtk_cell_area_context_allocate
为所有要使用上下文划分的行分配宽度和/或高度。通常，分配仅水平或有时以垂直方式执行，因为一组行通常垂直或水平并排呈现，并且共享相同的宽度或相同的高度。有时，它们同时以水平和垂直方向分配，从而产生均匀的推力效应。启用时通常就是这种情况。自 3.0 起GtkTreeView?fixed-height-mode?
语法
参数
context- 一GtkCellAreaContext
width- 为使用上下文呈现的所有行分配的宽度，或 -1。GtkTreeModel
height- 为使用上下文呈现的所有行分配的高度，或 -1。GtkTreeModel
另请参见
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_get_allocation ----

gtk_cell_area_context_get_allocation
提取上下文的当前分配大小。如果未按宽度或高度分配上下文，或者最近使用gtk_cell_area_context_reset（） 重置了上下文，则返回值将为 -1。
语法
参数
context- 一GtkCellAreaContext
width- 存储分配的宽度的位置，或 NULL。[输出][允许-无]
height- 存储分配高度的位置，或 NULL。[输出][允许-无]
自 3.0 起
另请参见
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_get_area ----

gtk_cell_area_context_get_area
获取此上下文的创建者。布局小部件通常不需要这样做;但是，对于上下文实现本身来说，获取有关其所用区域的信息非常重要。例如，在GtkCellAreaContextClass.allocate（）time，重要的是要了解有关配置的任何单元间距的详细信息，以便计算正确的分配。GtkCellAreaGtkCellArea
语法
参数
context- 一GtkCellAreaContext
返回
这个上下文是由创建的。[无转移]GtkCellArea
自 3.0 起
另请参见
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_get_preferred_height ----

gtk_cell_area_context_get_preferred_height
获取已使用此上下文请求的所有行的累积首选高度。在调用 gtk_cell_area_context_reset（） 和/或请求 a 的大小之前，返回值为 0。GtkCellArea
语法
参数
context- 一GtkCellAreaContext
minimum_height- 存储最小高度的位置，或空。[输出][允许-无]
natural_height- 存储自然高度的位置，或空。[输出][允许-无]
自 3.0 起
另请参见
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_get_preferred_height_for_width ----

gtk_cell_area_context_get_preferred_height_for_width
获取所有行的累积首选宽度高度，这些行已在此上下文中为相同的所述宽度请求。在调用 gtk_cell_area_context_reset（） 和/或请求 a 的大小之前，返回值为 -1。GtkCellArea
语法
参数
context- 一GtkCellAreaContext
width- 建议的分配宽度
minimum_height- 存储最小高度的位置，或空。[输出][允许-无]
natural_height- 存储自然高度的位置，或空。[输出][允许-无]
自 3.0 起
另请参见
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_get_preferred_width ----

gtk_cell_area_context_get_preferred_width
获取已使用此上下文请求的所有行的累积首选宽度。在调用 gtk_cell_area_context_reset（） 和/或请求 a 的大小之前，返回值为 0。GtkCellArea
语法
参数
context- 一GtkCellAreaContext
minimum_width- 存储最小宽度的位置，或空。[输出][允许-无]
natural_width- 存储自然宽度的位置，或空。[输出][允许-无]
自 3.0 起
另请参见
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_get_preferred_width_for_height ----

gtk_cell_area_context_get_preferred_width_for_height
获取在此上下文中为同一所述高度请求的所有行的累积首选高度宽度。在调用 gtk_cell_area_context_reset（） 和/或请求 a 的大小之前，返回值为 -1。GtkCellArea
语法
参数
context- 一GtkCellAreaContext
height- 建议分配的高度
minimum_width- 存储最小宽度的位置，或空。[输出][允许-无]
natural_width- 存储自然宽度的位置，或空。[输出][允许-无]
自 3.0 起
另请参见
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_push_preferred_height ----

gtk_cell_area_context_push_preferred_height
如果新建议的尺寸超过当前最小和自然高度，则使最小和/或自然高度增长。在请求过程中，实现在一系列行上使用它，以将请求的高度逐步推送到一系列ofgtk_cell_area_get_preferred_height（）请求上。GtkCellAreaContextGtkTreeModel
语法
参数
context- 一GtkCellAreaContext
minimum_height- 建议的上下文新最小高度
natural_height- 为上下文提议的新自然高度
自 3.
另请参见
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_push_preferred_width ----

gtk_cell_area_context_push_preferred_width
如果新提议的大小超过当前的最小和自然宽度，则使最小和/或自然宽度增大。在请求过程中，实现对一系列行使用此方法，以将请求的宽度逐步推送到一系列ofgtk_cell_area_get_preferred_width（） 请求上。GtkCellAreaContextGtkTreeModel
语法
参数
context- 一GtkCellAreaContext
minimum_width- 建议的上下文的新最小宽度
natural_width- 为上下文提议的新自然宽度
自 3.0 起
另请参见
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_context_reset ----

gtk_cell_area_context_reset
重置任何以前缓存的请求和分配数据。当基础数据发生更改时，如果允许缩小内容大小，则重置上下文非常重要。如果仅允许内容大小增长（这通常是视图呈现大型数据存储以衡量优化的选项），则只需要（重新）请求插入更改器的行withgtk_cell_area_get_preferred_width（）。当上下文的新总体大小要求分配的大小发生变化时（或者每当此分配发生更改时），需要为每行重新请求变量 rows size。例如，如果行从上到下以相同的宽度显示，则分配的宽度的变化需要重新计算所有显示的行高度usinggtk_cell_area_get_preferred_height_for_width（）。自 3.0 起GtkTreeModel
语法
参数
context- 一GtkCellAreaContext
另请参见
GtkCellAreaContext


------------ KeyGTK3gtk_cell_area_copy_context ----

gtk_cell_area_copy_context
对于行需要在一个方向上共享对齐，但可能在相反的方向中单独分组的情况，有时需要这样做。例如，创建所有图标（行）具有相同的宽度，并且其单元格具有相同的地平线对齐方式。但是，每行图标可能具有单独的集体高度。 使用此上下文来请求每行的高度，该上下文已用于请求要显示的所有行宽。GtkIconViewGtkIconView
语法
参数
area- 一GtkCellArea
context- 要复制GtkCellAreaContext
返回
新创建的上下文副本。[转移完整]GtkCellAreaContext
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_create_context ----

gtk_cell_area_create_context
创建一个用于所有用途的区域。 存储几何信息对于操作它的行，始终对同一行数据使用相同的上下文非常重要（即，应该使用用于请求这些数据行大小的相同来呈现和处理事件）。GtkCellAreaContextGtkCellAreaContextGtkCellAreaContext
语法
参数
area- 一GtkCellArea
返回
一个新创建的，可以与区域一起使用。[转移完整]GtkCellAreaContext
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_event ----

gtk_cell_area_event
将事件处理委托给 。GtkCellArea
语法
参数
area- 一GtkCellArea
context- 对于这行数据。GtkCellAreaContext
widget- 该区域被渲染到GtkWidget
event- 要处理的GdkEvent
cell_area- 区域的小部件相关坐标
flags- 用于此行中的区域。GtkCellRendererState
返回
如果事件按区域处理，则为 TRUE。
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_focus ----

gtk_cell_area_focus
当焦点要传递到区域时，或者对于给定的方向和行数据，这应该由区域的拥有布局微件调用。实现类应该实现这种方法，以自己的方式接收和导航焦点，特别是它如何布局单元格。GtkCellArea
语法
参数
area- 一GtkCellArea
direction- 的GtkDirectionType
返回
如果焦点保留在此调用的区域内，则为 TRUE。
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_foreach ----

gtk_cell_area_foreach
每个区域的呼叫回调。GtkCellRenderer
语法
参数
area- 一GtkCellArea
callback- 要呼叫。[范围调用]GtkCellCallback
callback_data- 用户提供的数据指针
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_foreach_alloc ----

gtk_cell_area_foreach_alloc
调用每个区域的回调，其中cell_area内有已分配的矩形。GtkCellRenderer
语法
参数
area- 一GtkCellArea
context- 对于这行数据。GtkCellAreaContext
widget- 该区域被渲染到GtkWidget
cell_area- 小部件相关坐标和区域大小
background_area- 背景区域的小部件相关坐标
callback- 要呼叫。[范围调用]GtkCellAllocCallback
callback_data- 用户提供的数据指针
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_cell_allocation ----

gtk_cell_area_get_cell_allocation
如果区域要在cell_area中进行渲染，则派生区域内渲染器的分配。
语法
参数
area- 一GtkCellArea
context- 用于保持面积的大小。GtkCellAreaContext
widget- 该区域正在渲染GtkWidget
renderer- 获取分配GtkCellRenderer
cell_area- 为该区域分配的整个区域在此行的小部件中
allocation- 存储渲染器分配的位置。[输出]
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_cell_at_position ----

gtk_cell_area_get_cell_at_position
获取区域内的 x 和 y 坐标，并选择性地在 cell_area 中返回其的完整单元格分配。GtkCellRenderer
语法
参数
area- 一GtkCellArea
context- 用于保持面积的大小。GtkCellAreaContext
widget- 该区域正在渲染GtkWidget
cell_area- 为该区域分配的整个区域在此行的小部件中
x- x 位置
y- y 位置
alloc_area- 存储其翻转的单元格渲染器的内部分配区域的位置，或NULL。[输出][允许-无]
返回
在 xand y. [转移无]GtkCellRenderer
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_current_path_string ----

gtk_cell_area_get_current_path_string
获取当前应用的当前字符串，这是隐式更新whengtk_cell_area_apply_attributes（） 调用，并可用于与子类中的呈现器交互。GtkTreePathGtkTreeIterGtkCellArea
语法
参数
area- 一GtkCellArea
返回
应用于区域的当前属性的当前字符串。此字符串属于该区域，不应被释放。GtkTreePath
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_edited_cell ----

gtk_cell_area_get_edited_cell
获取当前正在编辑的区域。GtkCellRenderer
语法
参数
area- 一GtkCellArea
返回
当前编辑的 .[无转移]GtkCellRenderer
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_edit_widget ----

gtk_cell_area_get_edit_widget
获取当前用于编辑当前编辑的单元格的小部件。GtkCellEditable
语法
参数
area- 一GtkCellArea
返回
当前处于活动状态的小组件。[无转移]GtkCellEditable
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_focus_cell ----

gtk_cell_area_get_focus_cell
检索区域的当前焦点单元格
语法
参数
area- 一GtkCellArea
返回
区域中当前聚焦的单元格。[无转移]
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_focus_from_sibling ----

gtk_cell_area_get_focus_from_sibling
获取预期可聚焦的呈现器对于哪个呈现器是或可能是同级呈现器。这对于处理事件的子类来说很方便，在确定事件位置的渲染器后，它可以选择激活事件单元可能是同级的焦点单元。GtkCellRendererGtkCellArea
语法
参数
area- 一GtkCellArea
renderer- 的GtkCellRenderer
返回
其渲染为同级，或 NULL。[无转移]GtkCellRenderer
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_focus_siblings ----

gtk_cell_area_get_focus_siblings
获取呈现器的焦点同级单元格呈现器。
语法
参数
area- 一GtkCellArea
renderer- 期望有焦点GtkCellRenderer
返回
的 A 的 。返回的列表是内部列表，不应释放。[元素型 GtkCellRenderer][无转移]GListGtkCellRenderers
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_preferred_height ----

gtk_cell_area_get_preferred_height
区域将在此过程中在上下文中存储一些几何信息;当请求任意行数的大小时，检查此调用的minimum_height和natural_height并不重要，而是在一系列请求后咨询gtk_cell_area_context_get_preferred_height（）。
语法
参数
area- 一GtkCellArea
context- 执行此请求GtkCellAreaContext
widget- 区域将在哪里渲染GtkWidget
minimum_height- 存储最小高度的位置，或 NULL。[输出][允许-无]
natural_height- 存储自然高度的位置，或 NULL。[输出][允许-无]
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_preferred_height_for_width ----

gtk_cell_area_get_preferred_height_for_width
检索单元格区域的最小高度和自然高度（如果给定指定的宽度）。area 在调用gtk_cell_area_get_preferred_width（） 时在上下文中存储一些几何信息。重要的是，首先执行一系列带有context的gtk_cell_area_get_preferred_width（）请求，然后分别在每个单元格区域上调用gtk_cell_area_get_preferred_height_for_width（）以获取每个完全请求的行的高度宽度。如果在某些时候，单个行的宽度发生变化，则应再次使用gtk_cell_area_get_preferred_width（）请求它，然后再次检查所请求行的完整宽度withgtk_cell_area_context_get_preferred_width（）。
语法
参数
area- 一GtkCellArea
context- 已经请求的宽度。GtkCellAreaContext
widget- 区域将在哪里渲染GtkWidget
width- 检查此区域高度的宽度
minimum_height- 存储最小高度的位置，或 NULL。[输出][允许-无]
natural_height- 存储自然高度的位置，或 NULL。[输出][允许-无]
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_preferred_width ----

gtk_cell_area_get_preferred_width
检索单元格区域的初始最小值和自然宽度。area 将在此过程中在上下文中存储一些几何信息;当请求任意行数的大小时，检查此调用的minimum_width和natural_width并不重要，而是在一系列请求后协商gtk_cell_area_context_get_preferred_width（）。
语法
参数
area- 一GtkCellArea
context- 执行此请求GtkCellAreaContext
widget- 区域将在哪里渲染GtkWidget
minimum_width- 存储最小宽度的位置，或 NULL。[输出][允许-无]
natural_width- 存储自然宽度的位置，或 NULL。[输出][允许-无]
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_preferred_width_for_height ----

gtk_cell_area_get_preferred_width_for_height
检索单元格区域的最小宽度和自然宽度（如果给定指定的高度）。area 在调用gtk_cell_area_get_preferred_height（） 时在上下文中存储一些几何信息。重要的是首先执行一系列带有context的gtk_cell_area_get_preferred_height（）请求，然后分别在每个单元格区域上调用gtk_cell_area_get_preferred_width_for_height（）以获取每个完全请求的行的高度宽度。如果在某些时候，单个行的高度发生了变化，则应再次使用gtk_cell_area_get_preferred_height（）请求它，然后再次检查所请求行的完整高度withgtk_cell_area_context_get_preferred_height（）。
语法
参数
area- 一GtkCellArea
context- 已经请求的宽度。GtkCellAreaContext
widget- 区域将在哪里渲染GtkWidget
height- 检查此区域宽度的高度
minimum_width- 存储最小宽度的位置，或 NULL。[输出][允许-无]
natural_width- 存储自然宽度的位置，或 NULL。[输出][允许-无]
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_get_request_mode ----

gtk_cell_area_get_request_mode
获取区域是首选高与宽布局还是“宽与高”布局。
语法
参数
area- 一GtkCellArea
返回
按地区首选。GtkSizeRequestMode
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_has_renderer ----

gtk_cell_area_has_renderer
检查区域是否包含渲染器。
语法
参数
area- 一GtkCellArea
renderer- 检查GtkCellRenderer
返回
如果该区域中的渲染器为 TRUE。
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_inner_cell_area ----

gtk_cell_area_inner_cell_area
这是一个方便的实现函数，用于获取给定意志所在的内部区域。它删除了以前由gtk_cell_area_request_renderer（） 添加的任何填充。GtkCellAreaGtkCellRenderer
语法
参数
area- 一GtkCellArea
widget- 该区域正在渲染到GtkWidget
cell_area- 小部件相关坐标，其中一个区域的单元格被放置
inner_area- 内部单元格区域的返回位置。[输出]
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_is_activatable ----

gtk_cell_area_is_activatable
返回区域在将新属性应用于区域后激活时是否可以执行任何操作。
语法
参数
area- 一GtkCellArea
返回
区域在激活时是否可以执行任何操作。
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_is_focus_sibling ----

gtk_cell_area_is_focus_sibling
返回同级是否是呈现器的焦点同级之一（请参见gtk_cell_area_add_focus_sibling（））。
语法
参数
area- 一GtkCellArea
renderer- 期望有焦点GtkCellRenderer
sibling- 对照渲染器的同级列表进行检查GtkCellRenderer
返回
如果兄弟姐妹是渲染器的焦点兄弟姐妹，则为 TRUE
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_remove ----

gtk_cell_area_remove
从区域中删除渲染器。
语法
参数
area- 一GtkCellArea
renderer- 从区域中删除GtkCellRenderer
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_remove_focus_sibling ----

gtk_cell_area_remove_focus_sibling
从渲染器的焦点同级列表中删除同级（请参见gtk_cell_area_add_focus_sibling（））。
语法
参数
area- 一GtkCellArea
renderer- 期望有焦点GtkCellRenderer
sibling- 从渲染器的焦点区域中删除GtkCellRenderer
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_render ----

gtk_cell_area_render
根据区域布局将区域的单元格渲染到给定坐标处的小部件上。
语法
参数
area- 一GtkCellArea
context- 对于这行数据。GtkCellAreaContext
widget- 该区域被渲染到GtkWidget
cr- 渲染cairo_t
background_area- 区域背景的小部件相关坐标
cell_area- 区域的小部件相关坐标
flags- 用于此行中的区域。GtkCellRendererState
paint_focus- 区域是否应将重点放在聚焦行的聚焦单元格上。
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_request_renderer ----

gtk_cell_area_request_renderer
这是实现单元格呈现器请求大小的便利函数。使用此函数请求大小，然后在渲染和事件时使用gtk_cell_area_inner_cell_area（）非常重要，因为此函数将在单元格周围添加填充以进行焦点绘制。GtkCellArea
语法
参数
area- 一GtkCellArea
renderer- 请求大小GtkCellRenderer
orientation- 请求大小GtkOrientation
widget- 该区域正在渲染到GtkWidget
for_size- 要请求的分配上下文大小，如果要返回方向的基本请求，则为 -1。
minimum_size- 存储最小大小的位置，或 NULL。[输出][允许-无]
natural_size- 存储自然大小的位置，或 NULL。[输出][允许-无]
自 3.
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_set_focus_cell ----

gtk_cell_area_set_focus_cell
将当前获得焦点的单元格显式设置为呈现器。这通常由GtkCellAreaClass.focus（）或GtkCellAreaClass.event（）的实现调用，但它也可用于实现诸如gtk_tree_view_set_cursor_on_cell（）之类的函数。
语法
参数
area- 一GtkCellArea
renderer- 给予关注GtkCellRenderer
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_area_stop_editing ----

gtk_cell_area_stop_editing
显式停止编辑当前编辑的单元格。如果取消为 TRUE，则当前编辑的单元格渲染器将发出 ：：editing-cancel 的信号，否则 ：：editing-done 信号将在 currentedit 小部件上发出。请参见 gtk_cell_area_get_edited_cell（） 和 gtk_cell_area_get_edit_widget（）。
语法
参数
area- 一GtkCellArea
canceled- 编辑是否被取消。
自 3.0 起
另请参见
GtkCellArea


------------ KeyGTK3GTK_CELL_AREA_WARN_INVALID_CELL_PROPERTY_ID ----

GTK_CELL_AREA_WARN_INVALID_CELL_PROPERTY_ID
GTK_CELL_AREA_WARN_INVALID_CELL_PROPERTY_ID()
应使用此宏发出有关 set_cell_property（） 和 get_cell_property（） 实现中意外属性的标准警告。
语法
参数
object- 调用 set_cell_property（） 或 get_cell_property（）GObject
property_id- 属性的数字 id
pspec- 财产GParamSpec
另请参见
GtkCellArea


------------ KeyGTK3gtk_cell_editable_editing_done ----

gtk_cell_editable_editing_done
发出信号。?editing-done?
语法
参数
cell_editable- 一GtkCellEditable
另请参见
GtkCellEditable


------------ KeyGTK3gtk_cell_editable_remove_widget ----

gtk_cell_editable_remove_widget
发出信号。?remove-widget?
语法
参数
cell_editable- A [br \=“”GtkCellEditable
另请参见
GtkCellEditable


------------ KeyGTK3gtk_cell_editable_start_editing ----

gtk_cell_editable_start_editing
开始在cell_editable上进行编辑。事件是开始编辑过程的 事件。它可能是 NULL，在编辑是通过程序化方式启动的情况下。GdkEvent
语法
参数
cell_editable- 一GtkCellEditable
event- A 或空值。[允许-无]GdkEvent
另请参见
GtkCellEditable


------------ KeyGTK3gtk_cell_layout_add_attribute ----

gtk_cell_layout_add_attribute
将属性映射添加到cell_layout中的列表中。列是模型中要从中获取值的列，而 theattribute 是要从该值设置的单元格上的参数。例如，如果模型的第 2 列包含字符串，则可以拥有？text？的属性从列 2 获取其值。GtkCellRendererText
语法
参数
cell_layout- 一GtkCellLayout
cell- 一GtkCellRenderer
attribute- 渲染器上的属性
column- 模型上要从中获取属性的列位置
2.4 起
另请参见
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_clear ----

gtk_cell_layout_clear
取消设置cell_layout上所有渲染器上的所有映射，并从cell_layout中删除所有渲染器。
语法
参数
cell_layout- 一GtkCellLayout
2.4 起
另请参见
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_clear_attributes ----

gtk_cell_layout_clear_attributes
清除以前withgtk_cell_layout_set_attributes（） 设置的所有现有属性。
语法
参数
cell_layout- 一GtkCellLayout
cell- a 清除属性映射GtkCellRenderer
自 2.
另请参见
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_get_area ----

gtk_cell_layout_get_area
返回可能cell_layoutif在 上调用的基础，或者如果 cell_layout 使用 no，则返回 NULL 的基础。GtkCellAreaGtkCellAreaGtkCellArea
语法
参数
cell_layout- 一GtkCellLayout
返回
cell_layout使用的单元格区域。[无转移]
自 3.0 起
另请参见
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_get_cells ----

gtk_cell_layout_get_cells
返回已添加到cell_layout的单元格呈现器。
语法
参数
cell_layout- 一GtkCellLayout
返回
单元格渲染器的列表。列表（但不是呈现器）是新分配的，当不再需要时，应使用 g_list_free（） 释放。[元素型 GtkCellRenderer][转移容器]
自 2.12 起
另请参见
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_pack_end ----

gtk_cell_layout_pack_end
将单元格添加到cell_layout的末尾。如果 expand 为 FALSE，则为 cell 分配的空间不会超过其所需空间。任何未使用的空间在展开为 TRUE 的单元格之间平均分配。请注意，不支持重用相同的单元格渲染器。
语法
参数
cell_layout- 一GtkCellLayout
cell- 一GtkCellRenderer
expand- TRUE 如果 cellis 被分配到分配给cell_layout的额外空间
2.4 起
另请参见
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_pack_start ----

gtk_cell_layout_pack_start
将细胞包装到cell_layout的开头。如果 expand 为 FALSE，则为该单元分配的空间不超过其所需空间。任何未使用的空间在展开为 TRUE 的单元格之间均匀分布。请注意，不支持重用相同的单元格渲染器。
语法
参数
cell_layout- 一GtkCellLayout
cell- 一GtkCellRenderer
expand- TRUE 如果 cellis 被分配到分配给cell_layout的额外空间
2.4 起
另请参见
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_reorder ----

gtk_cell_layout_reorder
在位置重新插入单元格。请注意，单元格已经被打包到cell_layoutfor它才能正常工作。
语法
参数
cell_layout- 一GtkCellLayout
cell- a 重新排序GtkCellRenderer
position- 插入细胞的新位置
2.4 起
另请参见
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_set_attributes ----

gtk_cell_layout_set_attributes
将列表中的属性设置为cell_layout的属性。属性应按属性/列顺序排列，如 ingtk_cell_layout_add_attribute（）。将删除所有现有属性，并将其替换为新属性。
语法
参数
cell_layout- 一GtkCellLayout
cell- 一GtkCellRenderer
...- 以 NULL 结尾的属性列表
2.4 起
另请参见
GtkCellLayout


------------ KeyGTK3gtk_cell_layout_set_cell_data_func ----

gtk_cell_layout_set_cell_data_func
设置用于cell_layout。此函数用于设置列值，而不是标准属性映射，并且应根据需要设置 cell_layout'scell 渲染器的值。func 可能为 NULL 以删除先前设置的函数。GtkCellLayoutDataFunc
语法
参数
cell_layout- 一GtkCellLayout
cell- 一GtkCellRenderer
func- 要使用的，或 NULL。[允许-无]GtkCellLayoutDataFunc
func_data- 功能的用户数据
destroy- func_data销毁通知
2.4 起
另请参见
GtkCellLayout


------------ KeyGTK3gtk_cell_renderer_accel_new ----

gtk_cell_renderer_accel_new
创建新的 .GtkCellRendererAccel
返回
新的单元格渲染器
自 2.1 起
另请参见
GtkCellRendererAccel


------------ KeyGTK3gtk_cell_renderer_activate ----

gtk_cell_renderer_activate
将激活事件传递给单元格呈现器以进行可能的处理。某些单元格渲染器可能会使用事件;例如，在单击鼠标时切换。GtkCellRendererToggle
语法
参数
cell- 一GtkCellRenderer
event- 一GdkEvent
widget- 接收事件的小部件
path- 事件位置的 widget 相关字符串表示形式;例如 for ，字符串表示GtkTreeViewGtkTreePath
background_area- 传递给gtk_cell_renderer_render（）的背景区域
cell_area- 传递给gtk_cell_renderer_render（）的单元格区域
flags- 渲染标志
返回
如果事件已被使用/处理，则为 TRUE
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_class_set_accessible_type ----

gtk_cell_renderer_class_set_accessible_type
设置用于为由renderer_class的单元格呈现器呈现的单元格创建辅助工具的类型。请注意，将创建多个辅助工具。此函数只能从 cellrenderers 的类 init 函数中调用。
语法
参数
renderer_class- 用于设置辅助类型的类
type- 实现widget_class可访问的对象类型。类型必须是GtkRendererCellAccessible
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_combo_new ----

gtk_cell_renderer_combo_new
创建新的 .使用对象属性调整文本的绘制方式。对象属性可以全局设置（使用g_object_set（））。此外，使用 ，可以将属性绑定到 中的值。例如，您可以绑定 ？text？属性，则将 属性呈现为模型中的字符串值，从而在 的每一行中呈现不同的字符串。GtkCellRendererComboGtkTreeViewColumnGtkTreeModelGtkTreeView
返回
新的单元格渲染器
自 2.
另请参见
GtkCellRendererCombo


------------ KeyGTK3gtk_cell_renderer_get_aligned_area ----

gtk_cell_renderer_get_aligned_area
获取cell_area内单元格使用的对齐区域。用于查找适当的编辑和焦点矩形。
语法
参数
cell- 一个实例GtkCellRenderer
widget- 此单元格将呈现为GtkWidget
flags- 渲染标志
cell_area- 将传递给gtk_cell_renderer_render（）的单元格区域
aligned_area- cell_areathat内部空间的返回位置将用于渲染。[输出]
自 3.0 起
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_alignment ----

gtk_cell_renderer_get_alignment
用适当的单元格值填充 xalign 和 yalign。
语法
参数
cell- 一GtkCellRenderer
xalign- 使用单元格的 x 对齐方式填充的位置，或 NULL。[输出][允许-无]
yalign- 使用单元格的y对齐方式填充的位置，或NULL。[输出][允许-无]
自 2.18 起
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_fixed_size ----

gtk_cell_renderer_get_fixed_size
使用适当的单元格大小填充宽度和高度。
语法
参数
cell- 一GtkCellRenderer
width- 使用单元格的固定宽度填充的位置，或 NULL。[输出][允许-无]
height- 使用单元格的固定高度填充的位置，或 NULL。[输出][允许-无]
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_padding ----

gtk_cell_renderer_get_padding
在 xpad 和 ypad 中填充适当的单元格值。
语法
参数
cell- 一GtkCellRenderer
xpad- 使用单元格的 x 填充的位置，或 NULL。[输出][允许-无]
ypad- 使用单元格的 y 填充填充的位置，或 NULL。[输出][允许-无]
自 2.18 起
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_preferred_height ----

gtk_cell_renderer_get_preferred_height
在渲染到小部件时提取渲染器的自然大小。
语法
参数
cell- 一个实例GtkCellRenderer
widget- 此单元格将呈现为GtkWidget
minimum_size- 存储最小大小的位置，或 NULL。[输出][允许-无]
natural_size- 存储自然大小的位置，或 NULL。[输出][允许-无]
自 3.0 起
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_preferred_height_for_width ----

gtk_cell_renderer_get_preferred_height_for_width
如果单元格渲染器被渲染为具有指定宽度的微件，则提取该渲染器的最小高度和自然高度。
语法
参数
cell- 一个实例GtkCellRenderer
widget- 此单元格将呈现为GtkWidget
width- 可用于分配的大小
minimum_height- 用于存储最小大小的位置，或 NULL。[输出][允许-无]
natural_height- 用于存储首选大小的位置，或 NULL。[输出][允许-无]
自 3.0 起
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_preferred_size ----

gtk_cell_renderer_get_preferred_size
检索单元格的最小和自然大小，并考虑小部件对高度宽度管理的首选项。
语法
参数
cell- 一个实例GtkCellRenderer
widget- 此单元格将呈现为GtkWidget
minimum_size- 用于存储最小大小的位置，或 NULL。[输出][允许-无]
natural_size- 用于存储自然大小的位置，或 NULL。[输出][允许-无]
自 3.0 起
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_preferred_width ----

gtk_cell_renderer_get_preferred_width
在渲染到小部件时提取渲染器的自然大小。
语法
参数
cell- 一个实例GtkCellRenderer
widget- 此单元格将呈现为GtkWidget
minimum_size- 存储最小大小的位置，或 NULL。[输出][允许-无]
natural_size- 存储自然大小的位置，或 NULL。[输出][允许-无]
自 3.0 起
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_preferred_width_for_height ----

gtk_cell_renderer_get_preferred_width_for_height
如果单元格渲染器被渲染到具有指定高度的微件，则提取该单元格渲染器的最小宽度和自然宽度。
语法
参数
cell- 一个实例GtkCellRenderer
widget- 此单元格将呈现为GtkWidget
height- 可用于分配的大小
minimum_width- 用于存储最小大小的位置，或 NULL。[输出][允许-无]
natural_width- 用于存储首选大小的位置，或 NULL。[输出][允许-无]
自 3.0 起
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_request_mode ----

gtk_cell_renderer_get_request_mode
获取单元格呈现器是首选高与宽布局还是首选“逐高”布局。
语法
参数
cell- 一个实例GtkCellRenderer
返回
此渲染器的首选。GtkSizeRequestMode
自 3.
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_sensitive ----

gtk_cell_renderer_get_sensitive
返回单元格渲染器的灵敏度。
语法
参数
cell- 一GtkCellRenderer
返回
如果单元格渲染器敏感，则为 TRUE
自 2.18 起
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_size ----

gtk_cell_renderer_get_size
gtk_cell_renderer_get_size自 3.0 版起已弃用，不应在新编写的代码中使用。请改用 gtk_cell_renderer_get_preferred_size（）。获取渲染单元格所需的宽度和高度。视图微件用于确定传递togtk_cell_renderer_render（） cell_area的适当大小。如果 cell_area 不为 NULL，则填充单元格相对于此位置的 x 和 y 偏移量（如果已设置）。请注意，在宽度和高度中设置的值，以及x_offset和y_offset中设置的值包括 xpad 和 ypad 属性。
语法
参数
cell- 一GtkCellRenderer
widget- 渲染器正在渲染的小部件
cell_area- 将分配单元格的区域，或 NULL。[允许-无]
x_offset- 位置返回单元格相对于cell_area的 x 偏移量，或 NULL。[输出][允许-无]
y_offset- 位置返回单元格相对于cell_area的 y 偏移量，或 NULL。[输出][允许-无]
width- 位置返回渲染单元格所需的宽度，或 NULL。[输出][允许-无]
height- 位置返回渲染单元格所需的高度，或 NULL。[输出][允许-无]
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_state ----

gtk_cell_renderer_get_state
根据单元格渲染器和小部件的灵敏度，将单元格渲染器状态转换为 ，并给定的 .GtkStateFlagsGtkCellRendererState
语法
参数
cell- a 或空值GtkCellRenderer
widget- a 或空值GtkWidget
cell_state- 单元格渲染器状态
返回
应用于单元格的微件状态标志
自 3.0 起
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_get_visible ----

gtk_cell_renderer_get_visible
返回单元格呈现器的可见性。
语法
参数
cell- 一GtkCellRenderer
返回
如果单元格渲染器可见，则为 TRUE
自 2.18 起
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_is_activatable ----

gtk_cell_renderer_is_activatable
检查单元格渲染器在激活时是否可以执行某些操作。
语法
参数
cell- 一GtkCellRenderer
返回
如果单元格渲染器在激活时可以执行任何操作，则为 TRUE
自 3.0 起
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_pixbuf_new ----

gtk_cell_renderer_pixbuf_new
创建新的 .使用对象属性调整渲染参数。对象属性可以设置为全局（使用g_object_set（））。此外，使用 ，可以将属性绑定到 中的值。例如，您可以绑定 ？pixbuf？属性上的单元格渲染器在模型中以像素buf值，从而在每行中呈现不同的图像。GtkCellRendererPixbufGtkTreeViewColumnGtkTreeModelGtkTreeView
返回
新单元格渲染
另请参见
GtkCellRendererPixbuf


------------ KeyGTK3gtk_cell_renderer_progress_new ----

gtk_cell_renderer_progress_new
创建新的 .GtkCellRendererProgress
返回
新的单元格渲染器
自 2.
另请参见
GtkCellRendererProgress


------------ KeyGTK3gtk_cell_renderer_render ----

gtk_cell_renderer_render
调用 的虚拟渲染函数。三个传入矩形是 cr 中的区域。大多数渲染器将绘制withincell_area;对于cell_area，应尊重的 xalign、yalign、xpad 和 ypad 字段。background_area包括单元格周围的空白区域，以及包含树扩展器的区域;因此，所有单元格拼贴background_area矩形以覆盖整个窗口。GtkCellRendererGtkCellRenderer
语法
参数
cell- 一GtkCellRenderer
cr- 一个开罗语境来画
widget- 小部件拥有窗口
background_area- 整个细胞区域（包括树扩展器和侧面的可能填充物）
cell_area- 通常由单元格渲染器渲染的区域
flags- 影响渲染的标志
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_set_alignment ----

gtk_cell_renderer_set_alignment
在其可用空间内设置渲染器的对齐方式。
语法
参数
cell- 一GtkCellRenderer
xalign- 单元格渲染器的 x 对齐方式
yalign- 单元格渲染器的 y 对齐方式
自 2.18 起
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_set_fixed_size ----

gtk_cell_renderer_set_fixed_size
将呈现器大小设置为显式，独立于属性集。
语法
参数
cell- 一GtkCellRenderer
width- 单元格渲染器的宽度，或 -1
height- 单元格渲染器的高度，或 -1
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_set_padding ----

gtk_cell_renderer_set_padding
设置渲染器的填充。
语法
参数
cell- 一GtkCellRenderer
xpad- 单元格渲染器的 x 填充
ypad- 单元格渲染器的 y 填充
自 2.18 起
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_set_sensitive ----

gtk_cell_renderer_set_sensitive
Sets the cell renderer?s sensitivity.
Syntax
Parameters
cell  -  	A GtkCellRenderer
sensitive  -  	the sensitivity of the cell
Since 2.18
See Also
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_set_visible ----

gtk_cell_renderer_set_visible
Sets the cell renderer?s visibility.
Syntax
Parameters
cell  -  	A GtkCellRenderer
visible  -  	the visibility of the cell
Since 2.18
See Also
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_spinner_new ----

gtk_cell_renderer_spinner_new
Returns a new cell renderer which will show a spinner to indicateactivity.
Returns
a new GtkCellRenderer
Since 2.2
See Also
GtkCellRendererSpinner


------------ KeyGTK3gtk_cell_renderer_spin_new ----

gtk_cell_renderer_spin_new
创建新的 .GtkCellRendererSpin
返回
一个新的GtkCellRendererSpin
自 2.1 起
另请参见
GtkCellRendererSpin


------------ KeyGTK3gtk_cell_renderer_start_editing ----

gtk_cell_renderer_start_editing
将激活事件传递给单元格呈现器以进行可能的处理。
语法
参数
cell- 一GtkCellRenderer
event- 一GdkEvent
widget- 接收事件的小部件
path- 事件位置的 widget 相关字符串表示形式;例如 for ，字符串表示GtkTreeViewGtkTreePath
background_area- 传递给gtk_cell_renderer_render（）的背景区域
cell_area- 传递给gtk_cell_renderer_render（）的单元格区域
flags- 渲染标志
返回
新的 或空值。[无转移]GtkCellEditable
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_stop_editing ----

gtk_cell_renderer_stop_editing
通知单元格渲染器编辑已停止。如果取消为 TRUE，则单元格渲染器将发出信号。此函数应由单元呈现器实现调用，以响应 的信号。?editing-canceled??editing-done?GtkCellEditable
语法
参数
cell- 一GtkCellRenderer
canceled- 如果编辑已取消，则为 TRUE
自 2.6 起
另请参见
GtkCellRenderer


------------ KeyGTK3gtk_cell_renderer_text_new ----

gtk_cell_renderer_text_new
创建新的 .使用对象属性调整文本的绘制方式。对象属性可以全局设置（使用g_object_set（））。此外，使用 ，可以将属性绑定到 中的值。例如，您可以绑定 ？text？属性在单元格呈现器上转换为模型中的字符串值，从而在GtkCellRendererTextGtkTreeViewColumnGtkTreeModelGtkTreeView
返回
新的单元格渲染器
另请参见
GtkCellRendererText


------------ KeyGTK3gtk_cell_renderer_text_set_fixed_height_from_font ----

gtk_cell_renderer_text_set_fixed_height_from_font
将呈现器的高度设置为由 ？font？ 显式确定。和？y_pad？属性设置在其上。这些属性的进一步更改不会影响高度，因此必须伴随对此函数的后续调用。使用这个函数是不灵活的，只有在计算单元格的大小太慢（即，显示大量单元格）时才应该使用。如果number_of_rows为 -1，则不设置固定高度，并且再次由属性确定高度。
语法
参数
renderer- 一GtkCellRendererText
number_of_rows- 每个单元格呈现器分配的文本行数，或 -1[br \=“”
另请参见
GtkCellRendererText


------------ KeyGTK3gtk_cell_renderer_toggle_get_activatable ----

gtk_cell_renderer_toggle_get_activatable
返回单元格呈现器是否可激活。Seegtk_cell_renderer_toggle_set_activatable（）.
语法
参数
toggle- 一GtkCellRendererToggle
返回
如果单元格渲染器是可激活的，则为 TRUE。
自 2.18 起
另请参见
GtkCellRendererToggle


------------ KeyGTK3gtk_cell_renderer_toggle_get_active ----

gtk_cell_renderer_toggle_get_active
返回单元格呈现器是否处于活动状态。Seegtk_cell_renderer_toggle_set_active（）.
语法
参数
toggle- 一GtkCellRendererToggle
返回
如果单元格渲染器处于活动状态，则为 TRUE。
另请参见
GtkCellRendererToggle


------------ KeyGTK3gtk_cell_renderer_toggle_get_radio ----

gtk_cell_renderer_toggle_get_radio
返回我们是否正在呈现无线电开关而不是复选框。
语法
参数
toggle- 一GtkCellRendererToggle
返回
TRUE，如果我们正在渲染无线电开关而不是复选框
另请参见
GtkCellRendererToggle


------------ KeyGTK3gtk_cell_renderer_toggle_new ----

gtk_cell_renderer_toggle_new
创建新的 .使用对象属性调整渲染参数。对象属性可以设置为全局（使用g_object_set（））。此外，使用 ，可以将属性绑定到 中的值。例如，您可以绑定 “活动？”属性在单元格渲染器上转换为模型中的布尔值，从而导致检查按钮反映模型的状态。GtkCellRendererToggleGtkTreeViewColumnGtkTreeModel
返回
新的单元格渲染器
另请参见
GtkCellRendererToggle


------------ KeyGTK3gtk_cell_renderer_toggle_set_activatable ----

gtk_cell_renderer_toggle_set_activatable
使单元格渲染器可激活。
语法
参数
toggle- 一个.GtkCellRendererToggle
setting- 要设置的值。
自 2.1 起
另请参见
GtkCellRendererToggle


------------ KeyGTK3gtk_cell_renderer_toggle_set_active ----

gtk_cell_renderer_toggle_set_active
激活或停用单元格渲染器。
语法
参数
toggle- 一个.GtkCellRendererToggle
setting- 要设置的值。
另请参见
GtkCellRendererToggle


------------ KeyGTK3gtk_cell_renderer_toggle_set_radio ----

gtk_cell_renderer_toggle_set_radio
如果无线电为 TRUE，则单元格渲染器将呈现无线电切换（即一组互斥切换中的切换）。如果为 FALSE，则呈现检查切换（独立布尔选项）。这可以为单元格渲染器全局设置，也可以在渲染模型中的每个单元格之前进行更改（对于 ，您可以使用 将模型列与单元格渲染器属性相关联来设置每行设置）。GtkTreeViewGtkTreeViewColumn
语法
参数
toggle- 一GtkCellRendererToggle
radio- TRUE使切换看起来像一个单选按钮
另请参见
GtkCellRendererToggle


------------ KeyGTK3gtk_cell_view_get_displayed_row ----

gtk_cell_view_get_displayed_row
返回对当前显示的行的引用。如果当前未显示任何行，则返回 NULL。GtkTreePath
语法
参数
cell_view- 一GtkCellView
返回
当前显示的行或 NULL
自 2.6 起
另请参见
GtkCellView


------------ KeyGTK3gtk_cell_view_get_draw_sensitive ----

gtk_cell_view_get_draw_sensitive
获取是否cell_view配置为在敏感状态下绘制其单元格。
语法
参数
cell_view- 一GtkCellView
返回
cell_viewdraws所有处于敏感状态的电池
自 3.0 起
另请参见
GtkCellView


------------ KeyGTK3gtk_cell_view_get_fit_model ----

gtk_cell_view_get_fit_model
获取是否cell_view配置为请求空间以适合整个 .GtkTreeModel
语法
参数
cell_view- 一GtkCellView
返回
是否cell_viewrequests空间来适应整个.GtkTreeModel
自 3.
另请参见
GtkCellView


------------ KeyGTK3gtk_cell_view_get_model ----

gtk_cell_view_get_model
返回cell_view模型。如果未使用任何模型，则返回 NULL。
语法
参数
cell_view- 一GtkCellView
返回
已用或空。[无转移]GtkTreeModel
2.16 起
另请参见
GtkCellView


------------ KeyGTK3gtk_cell_view_get_size_of_row ----

gtk_cell_view_get_size_of_row
gtk_cell_view_get_size_of_row自 3.0 版起已弃用，不应在新编写的代码中使用。组合框以前使用它来计算单元格视图的大小，现在您可以通过使用该属性或使用gtk_widget_get_preferred_size（）设置当前显示的行来实现此目的。将申请设置为cell_view显示路径所指向的模型行所需的大小。?fit-model?GtkCellView
语法
参数
cell_view- 一GtkCellView
path- 一GtkTreePath
requisition- 返回大小的位置。[输出]
返回
真
自 2.6 起
另请参见
GtkCellView


------------ KeyGTK3gtk_cell_view_new ----

gtk_cell_view_new
创建新的构件。GtkCellView
返回
新创建的小部件。GtkCellView
自 2.6 起
另请参见
GtkCellView


------------ KeyGTK3gtk_cell_view_new_with_context ----

gtk_cell_view_new_with_context
创建一个新构件，其中包含特定于布局单元格和特定 .为少量单元格指定相同的上下文可以使底层区域同步这些单元格的几何图形，这样就可以与其他行的单元格视图对齐。GtkCellViewGtkCellAreaGtkCellAreaContext
语法
参数
area- 将单元格布局GtkCellArea
context- 计算细胞几何形状GtkCellAreaContext
返回
新创建的小部件。GtkCellView
自 2.6 起
另请参见
GtkCellView


------------ KeyGTK3gtk_cell_view_new_with_markup ----

gtk_cell_view_new_with_markup
创建一个新的小部件，向其添加 ，并使其显示标记。文本可以使用Pango文本标记语言进行标记。GtkCellViewGtkCellRendererText
语法
参数
markup- 要在单元格视图中显示的文本
返回
新创建的小部件。GtkCellView
自 2.6 起
另请参见
GtkCellView


------------ KeyGTK3gtk_cell_view_new_with_pixbuf ----

gtk_cell_view_new_with_pixbuf
创建一个新的小部件，向其添加一个，并使其显示 pixbuf。GtkCellViewGtkCellRendererPixbuf
语法
参数
pixbuf- 要在单元格视图中显示的图像
返回
新创建的小部件。GtkCellView
自 2.6 起
另请参见
GtkCellView


------------ KeyGTK3gtk_cell_view_new_with_text ----

gtk_cell_view_new_with_text
创建一个新的构件，向其添加 ，并使其显示文本。GtkCellViewGtkCellRendererText
语法
参数
text- 要在单元格视图中显示的文本
返回
新创建的小部件。GtkCellView
自 2.6 起
另请参见
GtkCellView


------------ KeyGTK3gtk_cell_view_set_background_color ----

gtk_cell_view_set_background_color
gtk_cell_view_set_background_color自版本 3.4 起已弃用，不应在新编写的代码中使用。请改用 gtk_cell_view_set_background_rgba（）。设置视图的背景色。
语法
参数
cell_view- 一GtkCellView
color- 新的背景颜色
自 2.6 起
另请参见
GtkCellView


------------ KeyGTK3gtk_cell_view_set_background_rgba ----

gtk_cell_view_set_background_rgba
设置cell_view的背景色。
语法
参数
cell_view- 一GtkCellView
rgba- 新的背景颜色
自 3.0 起
另请参见
GtkCellView


------------ KeyGTK3gtk_cell_view_set_displayed_row ----

gtk_cell_view_set_displayed_row
设置当前由 显示的模型的行。如果路径未设置，则单元格视图的内容？stick？在它们的最后一个值;这通常不是一个期望的结果，但可能是一个需要的中间状态，如果说，的模型暂时变成空。GtkCellViewGtkCellView
语法
参数
cell_view- 一GtkCellView
path- a 或 NULL 以取消设置。[允许-无]GtkTreePath
自 2.6 起
另请参见
GtkCellView


------------ KeyGTK3gtk_cell_view_set_draw_sensitive ----

gtk_cell_view_set_draw_sensitive
设置cell_view是否应以敏感状态绘制其单元格，menus 使用此选项来确保包含子项的不敏感单元格的行在父菜单项中显得敏感。GtkComboBox
语法
参数
cell_view- 一GtkCellView
draw_sensitive- 是否将所有单元格绘制为敏感状态。
自 3.0 起
另请参见
GtkCellView


------------ KeyGTK3gtk_cell_view_set_fit_model ----

gtk_cell_view_set_fit_model
设置cell_view是否应请求空间以适合整个 .此参数用于确保组合框按钮上显示的单元格视图始终获得足够的空间，并且在选择发生更改时不调整大小。GtkTreeModelGtkComboBox
语法
参数
cell_view- 一GtkCellView
fit_model- 是否cell_viewshould请求整个模型的空间。
自 3.0 起
另请参见
GtkCellView


------------ KeyGTK3gtk_cell_view_set_model ----

gtk_cell_view_set_model
设置cell_view的模型。如果cell_view已有模型集，则会在设置新模型之前将其删除。如果模型是NULL，那么它将取消设置旧模型。
语法
参数
cell_view- 一GtkCellView
model- 一个.[允许-无]GtkTreeModel
自 2.6 起
另请参见
GtkCellView


------------ KeyGTK3gtk_check_button_new ----

gtk_check_button_new
创建新的 .GtkCheckButton
返回
一个。GtkWidget
另请参见
GtkCheckButton


------------ KeyGTK3gtk_check_button_new_with_label ----

gtk_check_button_new_with_label
创建一个右侧带有 的 new。GtkCheckButtonGtkLabel
语法
参数
label- 检查按钮的文本。
返回
一个。GtkWidget
另请参见
GtkCheckButton


------------ KeyGTK3gtk_check_button_new_with_mnemonic ----

gtk_check_button_new_with_mnemonic
创建包含标签的新标签。标签将使用gtk_label_new_with_mnemonic（）创建，因此下划线标签指示检查按钮的助记符。GtkCheckButton
语法
参数
label- 按钮的文本，在字母字符前面带有下划线
返回
一个新的GtkCheckButton[/code
See Also
GtkCheckButton


------------ KeyGTK3gtk_check_menu_item_get_active ----

gtk_check_menu_item_get_active
返回检查菜单项是否处于活动状态。Seegtk_check_menu_item_set_active（）.
语法
参数
check_menu_item- 一GtkCheckMenuItem
返回
如果选中菜单项，则为 TRUE。
另请参见
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_get_draw_as_radio ----

gtk_check_menu_item_get_draw_as_radio
返回check_menu_item是否看起来像GtkRadioMenuItem
语法
参数
check_menu_item- 一GtkCheckMenuItem
返回
check_menu_itemlooks是否像GtkRadioMenuItem
自 2.
另请参见
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_get_inconsistent ----

gtk_check_menu_item_get_inconsistent
检索由 gtk_check_menu_item_set_inconsistent（） 设置的值。
语法
参数
check_menu_item- 一GtkCheckMenuItem
返回
如果不一致，则为 TRUE
另请参见
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_new ----

gtk_check_menu_item_new
创建新的 .GtkCheckMenuItem
返回
一个新的.GtkCheckMenuItem
另请参见
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_new_with_label ----

gtk_check_menu_item_new_with_label
创建带有标签的新产品。GtkCheckMenuItem
语法
参数
label- 用于标签的字符串。
返回
一个新的.GtkCheckMenuItem
另请参见
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_new_with_mnemonic ----

gtk_check_menu_item_new_with_mnemonic
创建包含标签的新标签。标签将使用gtk_label_new_with_mnemonic（）创建，因此下划线标签指示菜单项的助记符。GtkCheckMenuItem
语法
参数
label- 按钮的文本，字符前面有下划线
返回
一个新的GtkCheckMenuItem
另请参见
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_set_active ----

gtk_check_menu_item_set_active
设置菜单项复选框的活动状态。
语法
参数
check_menu_item- 一个.GtkCheckMenuItem
is_active- 指示复选框是否处于活动状态的布尔值。
另请参见
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_set_draw_as_radio ----

gtk_check_menu_item_set_draw_as_radio
设置是否 check_menu_item像GtkRadioMenuItem
语法
参数
check_menu_item- 一GtkCheckMenuItem
draw_as_radio- check_menu_itemis画得是否像一个GtkRadioMenuItem
2.4 起
另请参见
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_set_inconsistent ----

gtk_check_menu_item_set_inconsistent
如果用户选择了受布尔设置影响的一系列元素（如某些文本或分页单元格），并且该范围内的当前值不一致，则可能需要在“介于两者之间？”中显示检查。州。此功能在两者之间打开？显示。通常，如果用户显式选择设置，则会再次关闭不一致状态。这必须手动执行，gtk_check_menu_item_set_inconsistent（）仅影响视觉外观，而不会影响小部件的语义。
语法
参数
check_menu_item- 一GtkCheckMenuItem
setting- TRUE 可显示 ？不一致？第三次状态检查
另请参见
GtkCheckMenuItem


------------ KeyGTK3gtk_check_menu_item_toggled ----

gtk_check_menu_item_toggled
发出信号。?toggled?
语法
参数
check_menu_item- 一个.GtkCheckMenuItem
另请参见
GtkCheckMenuItem


------------ KeyGTK3GTK_CHECK_VERSION ----

GTK_CHECK_VERSION
GTK_CHECK_VERSION()
如果 GTK+ 头文件的版本与传入的版本相同或更新，则返回 TRUE。
语法
参数
major- 主要版本（例如，版本1.2.5为1）
minor- 次要版本（例如，版本1.2.5为2）
micro- 微型版本（例如 1.2.5 版本为 5）
返回
如果 GTK+ 标头是新的 enoug，则为 TRUE
另请参见
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_clipboard_clear ----

gtk_clipboard_clear
清除剪贴板的内容。通常，这应该只在您调用gtk_clipboard_set_with_owner（）或gtk_clipboard_set_with_data（）的时间之间调用，以及调用您提供的clear_func。否则，剪贴板可能归其他人所有。
语法
参数
clipboard- 一GtkClipboard
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_get ----

gtk_clipboard_get
返回给定所选内容的剪贴板对象。有关完整的详细信息，请参见 gtk_clipboard_get_for_display（）。
语法
参数
selection- 标识要使用的剪贴板GdkAtom
返回
相应的剪贴板对象。如果不存在剪贴板，则将创建一个新剪贴板。一旦创建了剪贴板对象，它就是持久的，并且由于它由GTK +拥有，因此不得释放或取消恢复。[无转移]
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_get_display ----

gtk_clipboard_get_display
获取与剪贴板关联的GdkDisplay
语法
参数
clipboard- 一GtkClipboard
返回
与剪贴板关联的。[无转移]GdkDisplay
自 2.2 起
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_get_for_display ----

gtk_clipboard_get_for_display
返回给定所选内容的剪贴板对象。剪切/复制/粘贴菜单项和键盘快捷键应使用默认剪贴板，通过传递GDK_SELECTION_CLIPBOARD进行选择来返回。（出于GDK_SELECTION_CLIPBOARDfor向后兼容性原因，支持将GDK_NONE作为同义词。当前选定的对象或文本应在剪贴板上提供，由 标识。剪切/复制/粘贴菜单项概念性地将剪贴板的内容复制到默认剪贴板，即它们将选择复制到用户视为剪贴板的内容。（传递与使用gdk_atom_intern相同（“剪贴板”，FALSE）。请参阅FreeDesktop剪贴板规范，详细了解 ？剪贴板？与。？主要？选择在 X 窗口系统下。在 Win32 上，剪贴板基本上被忽略。可以有任意命名的剪贴板;如果您发明了新的剪贴板，则应在选择名称前面加上 anunderscore 前缀（因为 ICCCM 要求非标准原子以内核为前缀），并为其命名命名空间。例如，如果您的应用程序调用 ？傅？有一个特殊用途的剪贴板，你可以称之为“_FOO_SPECIAL_CLIPBOARD”。GDK_SELECTION_PRIMARYGDK_SELECTION_PRIMARYGDK_NONEGDK_SELECTION_PRIMARY
语法
参数
display- 要检索或创建剪贴板的剪贴板。GdkDisplay
selection- a 标识要使用的剪贴板。GdkAtom
返回
相应的剪贴板对象。如果 noclipboard 已经存在，则将创建一个新的。创建剪贴板对象后，它是持久的，并且由于它由GTK +拥有，因此不得释放或取消引用。[无转移]
自 2.2 起
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_get_owner ----

gtk_clipboard_get_owner
如果剪贴板内容回调设置为 withgtk_clipboard_set_with_owner（），并且随后未调用 gtk_clipboard_set_with_data（） orgtk_clipboard_clear（）， 则返回所有者 setby gtk_clipboard_set_with_owner（）。
语法
参数
clipboard- 一GtkClipboard
返回
剪贴板的所有者（如果有）;否则为 NULL。[无转移]
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_request_contents ----

gtk_clipboard_request_contents
请求剪贴板的内容作为给定目标。稍后收到结果结果时，将调用提供的回调。
语法
参数
clipboard- 一GtkClipboard
target- 一个原子，表示剪贴板所有者应将所选内容转换为的形式。
callback- 接收结果（或检索失败）时要调用的函数。如果检索失败，则长度字段ofselection_datawill为负数。[范围异步]
user_data- 要传递到回调的用户数据
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_request_image ----

gtk_clipboard_request_image
请求将剪贴板的内容作为图像。当收到图像时，它将转换为 ，并调用回呼。如果请求成功，则回调的 pixbuf 参数将包含结果，如果请求失败，则包含 NULL。发生这种情况的原因有很多，特别是如果剪贴板是空的，或者剪贴板的内容无法转换为图像。GdkPixbufGdkPixbuf
语法
参数
clipboard- 一GtkClipboard
callback- 接收到图像或检索失败时调用的函数。（它将永远以一种或另一种方式调用。[范围异步]
user_data- 要传递给回调的用户数据。
自 2.6 起
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_request_rich_text ----

gtk_clipboard_request_rich_text
请求将剪贴板的内容作为格式文本。稍后收到富文本时，将调用回调。要回调的文本参数将包含生成的富文本（如果请求成功），如果请求失败，则包含 NULL。长度参数将包含文本的长度。此函数可能会因各种原因而失败，尤其是在剪贴板为空或剪贴板的内容无法转换为富文本格式时。
语法
参数
clipboard- 一GtkClipboard
buffer- 一GtkTextBuffer
callback- 接收到文本或检索失败时调用的函数。（它将永远以一种或另一种方式调用。[范围异步]
user_data- 要传递给回调的用户数据。
自 2.10 起
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_request_targets ----

gtk_clipboard_request_targets
请求将剪贴板的内容作为受支持目标的列表。稍后收到列表时，将调用回调。如果请求成功，则要回调的 targets 参数将包含生成的目标;如果请求失败，则包含 NULL。
语法
参数
clipboard- 一GtkClipboard
callback- 在收到目标或检索失败时要调用的函数。（它将永远以一种方式或另一种方式调用。[范围异步]
user_data- 要传递给回调的用户数据。
2.4 起
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_request_text ----

gtk_clipboard_request_text
请求将剪贴板的内容作为文本。当收到文本时，如有必要，它将转换为 UTF-8，并调用回拨。如果请求成功，则要回调的文本参数将包含生成的文本;如果请求失败，则包含 NULL。发生这种情况的原因多种多样，特别是如果剪贴板为空或剪贴板的内容无法转换为文本形式。
语法
参数
clipboard- 一GtkClipboard
callback- 接收到文本或检索失败时调用的函数。（它将永远以一种或另一种方式调用。[范围异步]
user_data- 要传递给回调的用户数据。
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_request_uris ----

gtk_clipboard_request_uris
请求将剪贴板的内容作为 URI。当收到 URI 时，将调用回调。如果请求成功，则回调的 uris 参数将包含生成的 URI 数组，如果请求失败，则包含 NULL。发生这种情况的原因有多种，特别是如果剪贴板为空或剪贴板的内容无法转换为 URI 形式。
语法
参数
clipboard- 一GtkClipboard
callback- 在收到URI或检索失败时调用的函数。（它将永远以一种或另一种方式调用。[范围异步]
user_data- 要传递给回调的用户数据。
自 2.14 起
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_set_can_store ----

gtk_clipboard_set_can_store
提示当应用程序退出或调用 gtk_clipboard_store（） 时，剪贴板数据应存储在某个位置。当剪贴板所有者更改时，将重置此值。剪贴板数据的存储位置取决于平台，有关详细信息，请参阅gdk_display_store_clipboard（）。
语法
参数
clipboard- 一GtkClipboard
targets- 包含有关应存储哪些表单的信息的数组或 NULLto 指示应存储所有表单。[允许-无][数组长度 = n_targets]
n_targets- 目标中的元素数量
自 2.6 起
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_set_image ----

gtk_clipboard_set_image
将剪贴板的内容设置为给定的 。GTK+将负责响应对图像的请求，并将图像转换为请求的格式。GdkPixbuf
语法
参数
clipboard- 一个对象GtkClipboard
pixbuf- 一GdkPixbuf
自 2.6 起
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_set_text ----

gtk_clipboard_set_text
将剪贴板的内容设置为给定的 UTF-8 字符串。GTK+将制作文本的副本，并负责响应文本请求，并将文本转换为请求的格式。
语法
参数
clipboard- 一个对象GtkClipboard
text- 一个 UTF-8 字符串。
len- 文本长度，以字节为单位，或 -1，在这种情况下，长度将使用 strlen（） 确定。
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_set_with_data ----

gtk_clipboard_set_with_data
通过提供剪贴板数据支持的格式列表和在请求实际数据时调用以获取实际数据的函数，以虚拟方式设置指定剪贴板的内容。
语法
参数
clipboard- 一GtkClipboard
targets- 包含有关剪贴板数据的可用表单的信息的数组。[数组长度 = n_targets]
n_targets- 目标中的元素数量
get_func- 调用函数以获取实际的剪贴板数据。[范围异步]
clear_func- 当剪贴板内容再次设置时，将调用此函数，并且get_funcwill不会随后调用。[范围异步]
user_data- 要传递给get_funcand clear_func的用户数据。
返回
如果成功设置剪贴板数据，则为 TRUE。如果设置剪贴板数据失败，则将忽略提供的回调函数。
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_set_with_owner ----

gtk_clipboard_set_with_owner
通过提供剪贴板数据支持的格式列表和在请求实际数据时调用以获取实际数据的函数，以虚拟方式设置指定剪贴板的内容。此函数与 gtk_clipboard_set_with_data（） 之间的区别在于，传入的不是泛型user_data指针。GObject
语法
参数
clipboard- 一GtkClipboard
targets- 包含有关剪贴板数据的可用表单的信息的数组。[数组长度 = n_targets]
n_targets- 目标中的元素数量
get_func- 调用函数以获取实际的剪贴板数据。[范围异步]
clear_func- 当剪贴板内容再次设置时，将调用此函数，并且get_funcwill不会随后调用。[范围异步]
owner- 一个“拥有”的对象数据。此对象将在调用时传递给回调
返回
如果成功设置剪贴板数据，则为 TRUE。如果设置剪贴板数据失败，则将忽略提供的回调函数。
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_store ----

gtk_clipboard_store
将当前剪贴板数据存储在某个位置，以便在应用程序退出后，该数据将保留。
语法
参数
clipboard- 一GtkClipboard
自 2.
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_for_contents ----

gtk_clipboard_wait_for_contents
使用给定目标请求剪贴板的内容。此函数等待使用主循环接收数据，因此在等待期间可以调度事件、超时等。
语法
参数
clipboard- 一GtkClipboard
target- 一个原子，表示剪贴板所有者应将所选内容转换为的形式。
返回
新分配的对象或 NULLif 检索给定目标失败。如果不是 NULL，则在完成此值时，必须使用 gtk_selection_data_free（） 释放它。GtkSelectionData
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_for_image ----

gtk_clipboard_wait_for_image
请求将剪贴板的内容作为图像，并将结果转换为 .此函数等待使用主循环接收数据，因此在等待期间可能会调度事件，超时等。GdkPixbuf
语法
参数
clipboard- 一GtkClipboard
返回
新分配的对象，如果检索选择数据失败，则必须使用 g_object_unref（） 或 NULL 进行释放。（这可能是由于各种原因，特别是如果剪贴板是空的，或者剪贴板的内容无法转换为图像。[转移完整]GdkPixbuf
自 2.6 起
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_for_rich_text ----

gtk_clipboard_wait_for_rich_text
请求将剪贴板的内容作为格式文本。此函数等待使用主循环接收数据，因此在等待期间可以调度事件、超时等。
语法
参数
clipboard- 一GtkClipboard
buffer- 一GtkTextBuffer
format- 返回数据格式的返回位置。[输出]
length- 返回数据长度的返回位置。[输出]
返回
新分配的二进制数据块，如果检索选择数据失败，则必须使用 g_free（） 或 NULL 进行freed。（这可能出于各种原因而发生，特别是如果剪贴板是空的，或者剪贴板的内容无法转换为文本形式。[数组长度 = 长度][转移完整]
自 2.10 起
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_for_targets ----

gtk_clipboard_wait_for_targets
返回剪贴板上存在的目标列表，或者返回没有任何可用目标的 NULLif。返回的列表必须使用g_free（） 进行freed。此函数等待使用主环路接收数据，因此在等待期间可能会调度事件、超时等。
语法
参数
clipboard- 一GtkClipboard
targets- 位置存储目标数组。此处存储的结果必须使用 g_free（） 进行释放。[输出][数组长度 = n_targets][转移容器]
n_targets- 位置存储目标中的项目数量。[输出]
返回
如果剪贴板上存在任何目标，则为 TRUE，否则为 FALSE。
2.4 起
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_for_text ----

gtk_clipboard_wait_for_text
请求将剪贴板的内容作为文本，并在必要时将结果转换为 UTF-8。此函数等待使用主循环接收数据，因此在等待期间可能会调度事件，超时等。
语法
参数
clipboard- 一GtkClipboard
返回
新分配的 UTF-8 字符串，必须使用 g_free（） 释放该字符串，如果检索选择数据失败，则为 NULL。（由于各种原因，可能会发生这种情况，特别是如果剪贴板是空的，或者剪贴板的内容无法转换为文本形式。
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_for_uris ----

gtk_clipboard_wait_for_uris
请求将剪贴板的内容作为 URI。此函数等待使用主循环接收数据，因此在等待期间可以调度事件，超时等。
语法
参数
clipboard- 一GtkClipboard
返回
新分配的 NULL 终止字符串数组，必须使用 g_strfreev（） 释放该数组，如果检索选择数据失败，则为 NULL。（发生这种情况的原因有很多，特别是如果剪贴板是空的，或者剪贴板的内容无法转换为URI形式。[数组零终止 = 1][元素型 utf8][转移完整]
自 2.14 起
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_is_image_available ----

gtk_clipboard_wait_is_image_available
测试以查看是否有可供粘贴的图像这是通过请求目标原子并检查它是否包含任何受支持的图像目标来完成的。此函数等待使用主循环接收数据，因此在等待期间可以调度事件、超时等。此函数比callinggtk_clipboard_wait_for_image（） 快一点，因为它不需要检索实际的图像数据。
语法
参数
clipboard- 一GtkClipboard
返回
TRUE 是有可用的图像，否则为 FALSE。
自 2.6 起
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_is_rich_text_available ----

gtk_clipboard_wait_is_rich_text_available
测试以查看是否有可供粘贴的富文本这是通过请求 TARGETS 原子并检查它是否包含任何受支持的富文本目标来完成的。此函数等待使用主循环接收数据，因此在等待期间可以调度事件、超时等。此函数比callinggtk_clipboard_wait_for_rich_text（） 快一点，因为它不需要检索实际文本。
语法
参数
clipboard- 一GtkClipboard
buffer- 一GtkTextBuffer
返回
TRUE 是有可用的富文本，否则为 FALSE。
自 2.10 起
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_is_target_available ----

gtk_clipboard_wait_is_target_available
检查剪贴板是否支持粘贴给定类型的数据。此函数可用于确定 ？糊？菜单项是否应不敏感。如果要查看剪贴板上是否有可用的文本，请改为usegtk_clipboard_wait_is_text_available（）。
语法
参数
clipboard- 一GtkClipboard
target- 指示要查找的目标。GdkAtom
返回
如果目标可用，则为 TRUE，否则为 FALSE。
自 2.6 起
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_is_text_available ----

gtk_clipboard_wait_is_text_available
测试以查看是否有可粘贴的文本这是通过请求 TARGETS 原子并检查它是否包含任何受支持的文本目标来完成的。此函数等待使用主循环接收数据，因此在等待期间可以调度事件、超时等。此函数比callinggtk_clipboard_wait_for_text（） 快一点，因为它不需要检索实际文本。
语法
参数
clipboard- 一GtkClipboard
返回
TRUE 是有可用的文本，否则为 FALSE。
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_clipboard_wait_is_uris_available ----

gtk_clipboard_wait_is_uris_available
测试以查看是否有可供粘贴的 URI 列表这是通过请求目标原子并检查它是否包含 URI 目标来完成的。此函数等待使用主循环接收数据，因此可以在等待期间调度事件、超时等。此函数比callinggtk_clipboard_wait_for_uris（） 快一点，因为它不需要检索实际的 URI 数据。
语法
参数
clipboard- 一GtkClipboard
返回
TRUE 是有一个可用的 URI 列表，否则为 FALSE。
自 2.14 起
另请参见
gtk3-Clipboards


------------ KeyGTK3gtk_color_button_get_alpha ----

gtk_color_button_get_alpha
gtk_color_button_get_alpha自版本 3.4 起已弃用，不应在新编写的代码中使用。请改用 gtk_color_chooser_get_rgba（）。返回当前 Alpha 值。
语法
参数
button- 一GtkColorButton
返回
介于 0 和 65535 之间的整数
2.4 起
另请参见
GtkColorButton


------------ KeyGTK3gtk_color_button_get_color ----

gtk_color_button_get_color
gtk_color_button_get_color自 3.4 版起已弃用，不应在新编写的代码中使用。请改用 gtk_color_chooser_get_rgba（）。将颜色设置为微件中的当前颜色。GtkColorButton
语法
参数
button- 一GtkColorButton
color- a 以填充当前颜色。[输出]GdkColor
2.4 起
另请参见
GtkColorButton


------------ KeyGTK3gtk_color_button_get_rgba ----

gtk_color_button_get_rgba
gtk_color_button_get_rgba自 3.4 版起已弃用，不应在新编写的代码中使用。请改用 gtk_color_chooser_get_rgba（）。将 rgba 设置为微件中的当前颜色。GtkColorButton
语法
参数
button- 一GtkColorButton
rgba- a 以填充当前颜色。[输出]GdkRGBA
自 3.0 起
另请参见
GtkColorButton


------------ KeyGTK3gtk_color_button_get_title ----

gtk_color_button_get_title
获取颜色选择对话框的标题。
语法
参数
button- 一GtkColorButton
返回
内部字符串，不释放返回值
自 2.
另请参见
GtkColorButton


------------ KeyGTK3gtk_color_button_get_use_alpha ----

gtk_color_button_get_use_alpha
gtk_color_button_get_use_alpha自版本 3.4 起已弃用，不应在新编写的代码中使用。请改用 gtk_color_chooser_get_use_alpha（）。颜色选择对话框是否使用 Alpha 通道？
语法
参数
button- 一GtkColorButton
返回
如果颜色样本使用 Alpha 通道，则为 TRUE;如果不使用，则为 FALSE
2.4 起
另请参见
GtkColorButton


------------ KeyGTK3gtk_color_button_new ----

gtk_color_button_new
创建新的颜色按钮。这将以小按钮的形式返回一个小部件，其中包含表示当前所选颜色的色板。单击按钮时，将打开一个颜色选择对话框，允许用户选择一种颜色。当用户完成时，色板将更新以反映新颜色。
返回
新的颜色按钮
2.4 起
另请参见
GtkColorButton


------------ KeyGTK3gtk_color_button_new_with_color ----

gtk_color_button_new_with_color
gtk_color_button_new_with_color自 3.4 版起已弃用，不应在新编写的代码中使用。请改用 gtk_color_button_new_with_rgba（）。创建新的颜色按钮。
语法
参数
color- A 用于设置当前颜色GdkColor
返回
新的颜色按钮
2.4 起
另请参见
GtkColorButton


------------ KeyGTK3gtk_color_button_new_with_rgba ----

gtk_color_button_new_with_rgba
创建新的颜色按钮。
语法
参数
rgba- A 用于设置当前颜色GdkRGBA
返回
新的颜色按钮
自 3.0 起
另请参见
GtkColorButton


------------ KeyGTK3gtk_color_button_set_alpha ----

gtk_color_button_set_alpha
gtk_color_button_set_alpha自 3.4 版起已弃用，不应在新编写的代码中使用。请改用 gtk_color_chooser_set_rgba（）。将当前不透明度设置为 alpha。
语法
参数
button- 一GtkColorButton
alpha- 介于 0 和 65535 之间的整数
2.4 起
另请参见
GtkColorButton


------------ KeyGTK3gtk_color_button_set_color ----

gtk_color_button_set_color
gtk_color_button_set_color已弃用，不应在新编写的代码中使用。请改用 gtk_color_chooser_set_rgba（）。将当前颜色设置为颜色。
语法
参数
button- 一GtkColorButton
color- A 用于设置当前颜色GdkColor
2.4 起
另请参见
GtkColorButton


------------ KeyGTK3gtk_color_button_set_rgba ----

gtk_color_button_set_rgba
gtk_color_button_set_rgba自 3.4 版起已弃用，不应在新编写的代码中使用。请改用 gtk_color_chooser_set_rgba（）。将当前颜色设置为 rgba。
语法
参数
button- 一GtkColorButton
rgba- a 用于设置当前颜色GdkRGBA
自 3.0 起
另请参见
GtkColorButton


------------ KeyGTK3gtk_color_button_set_title ----

gtk_color_button_set_title
设置颜色选择对话框的标题。
语法
参数
button- 一GtkColorButton
title- 包含新窗口标题的字符串
2.4 起
另请参见
GtkColorButton


------------ KeyGTK3gtk_color_button_set_use_alpha ----

gtk_color_button_set_use_alpha
gtk_color_button_set_use_alpha自 3.4 版起已弃用，不应在新编写的代码中使用。请改用 gtk_color_chooser_set_use_alpha（）。设置颜色按钮是否应使用 Alpha 通道。
语法
参数
button- 一GtkColorButton
use_alpha- TRUE 如果颜色按钮应使用 Alpha 通道，则为 FALSE（如果不是）
2.4 起
另请参见
GtkColorButton


------------ KeyGTK3gtk_color_chooser_add_palette ----

gtk_color_chooser_add_palette
将调色板添加到颜色选择器。如果方向是水平的，则颜色分组为行，每行colors_per_line颜色。如果水平为 FALSE，则颜色将分组到列中。has27 颜色的默认调色板，以 3 种颜色的列进行组织。默认的灰色轿子在一行中有 9 个灰色。颜色选择器小部件的布局在主题有 9-10 列时效果最佳。首次调用此函数具有从颜色选择器中删除默认颜色和灰色调色板的副作用。如果颜色为 NULL，则删除以前添加的所有调色板。GtkColorChooserWidget
语法
参数
chooser- 一GtkColorChooser
orientation- GTK_ORIENTATION_HORIZONTAL调色板是否应以行显示，GTK_ORIENTATION_VERTICAL列
colors_per_line- 每行/列中显示的颜色数量
n_colors- 颜色元素的总数
colors- 调色板的颜色，或 NULL。[允许-无][数组长度 = n_colors]
自 3.
另请参见
GtkColorChooser


------------ KeyGTK3gtk_color_chooser_dialog_new ----

gtk_color_chooser_dialog_new
创建新的 .GtkColorChooserDialog
语法
参数
title- 对话框的标题，或 NULL。[允许-无]
parent- 对话框的瞬态父级，或 NULL。[允许-无]
返回
一个新的GtkColorChooserDialog
自 3.
另请参见
GtkColorChooserDialog


------------ KeyGTK3gtk_color_chooser_get_rgba ----

gtk_color_chooser_get_rgba
获取当前选定的颜色。
语法
参数
chooser- 一GtkColorChooser
color- a 以填充当前颜色。[输出]GdkRGBA
自 3.4 起
另请参见
GtkColorChooser


------------ KeyGTK3gtk_color_chooser_get_use_alpha ----

gtk_color_chooser_get_use_alpha
返回颜色选择器是否显示 Alpha 通道。
语法
参数
chooser- 一GtkColorChooser
返回
如果颜色选择器使用 Alpha 通道，则为 TRUE，如果不是，则为 FALSE
自 3.4 起
另请参见
GtkColorChooser


------------ KeyGTK3gtk_color_chooser_set_rgba ----

gtk_color_chooser_set_rgba
设置颜色。
语法
参数
chooser- 一GtkColorChooser
color- 新颜色
自 3.4 起
另请参见
GtkColorChooser


------------ KeyGTK3gtk_color_chooser_set_use_alpha ----

gtk_color_chooser_set_use_alpha
设置颜色选择器是否应使用 Alpha 通道。
语法
参数
chooser- 一GtkColorChooser
use_alpha- 如果颜色选择器应使用 Alpha 通道，则为 TRUE，如果不是，则为 FALSE
自 3.4 起
另请参见
GtkColorChooser


------------ KeyGTK3gtk_color_chooser_widget_new ----

gtk_color_chooser_widget_new
创建新的 .GtkColorChooserWidget
返回
一个新的GtkColorChooserWidget
自 3.
另请参见
GtkColorChooserWidget


------------ KeyGTK3gtk_color_selection_dialog_get_color_selection ----

gtk_color_selection_dialog_get_color_selection
gtk_color_selection_dialog_get_color_selection已弃用，不应在新编写的代码中使用。检索嵌入在对话框中的小部件。GtkColorSelection
语法
参数
colorsel- 一GtkColorSelectionDialog
返回
嵌入式 .[无转移]GtkColorSelection
自 2.1 起
另请参见
GtkColorSelectionDialog


------------ KeyGTK3gtk_color_selection_dialog_new ----

gtk_color_selection_dialog_new
gtk_color_selection_dialog_new已弃用，不应在新编写的代码中使用。创建新的 .GtkColorSelectionDialog
语法
参数
title- 包含对话框标题文本的字符串。
返回
一个。GtkColorSelectionDialog
另请参见
GtkColorSelectionDialog


------------ KeyGTK3gtk_color_selection_get_current_alpha ----

gtk_color_selection_get_current_alpha
gtk_color_selection_get_current_alpha已弃用，不应在新编写的代码中使用。返回当前 Alpha 值。
语法
参数
colorsel- 一GtkColorSelection
返回
介于 0 和 65535 之间的整数
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_get_current_color ----

gtk_color_selection_get_current_color
gtk_color_selection_get_current_color自 3.4 版起已弃用，不应在新编写的代码中使用。请改用 gtk_color_selection_get_current_rgba（）。将颜色设置为 GtkColorSelection 构件中的当前颜色。
语法
参数
colorsel- 一GtkColorSelection
color- a 以填充当前颜色。[输出]GdkColor
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_get_current_rgba ----

gtk_color_selection_get_current_rgba
gtk_color_selection_get_current_rgba已弃用，不应在新编写的代码中使用。将 rgba 设置为 GtkColorSelection 构件中的当前颜色。
语法
参数
colorsel- 一GtkColorSelection
rgba- a 以填充当前颜色。[输出]GdkRGBA
自 3.0 起
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_get_has_opacity_control ----

gtk_color_selection_get_has_opacity_control
gtk_color_selection_get_has_opacity_control已弃用，不应在新编写的代码中使用。确定 colorel 是否具有不透明度控件。
语法
参数
colorsel- 一GtkColorSelection
返回
如果颜色具有不透明度控件，则为 TRUE，如果颜色不透明，则为 FALSE
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_get_has_palette ----

gtk_color_selection_get_has_palette
gtk_color_selection_get_has_palette已弃用，不应在新编写的代码中使用。确定颜色选择器是否具有调色板。
语法
参数
colorsel- 一GtkColorSelection
返回
如果选择器具有调色板，则为 TRUE;如果选择器没有调色板，则为 FALSE
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_get_previous_alpha ----

gtk_color_selection_get_previous_alpha
gtk_color_selection_get_previous_alpha已弃用，不应在新编写的代码中使用。返回上一个 Alpha 值。
语法
参数
colorsel- 一GtkColorSelection
返回
介于 0 和 65535 之间的整数
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_get_previous_color ----

gtk_color_selection_get_previous_color
gtk_color_selection_get_previous_color自 3.4 版起已弃用，不应在新编写的代码中使用。请改用 gtk_color_selection_get_previous_rgba（）。用原始颜色值填充颜色。
语法
参数
colorsel- 一GtkColorSelection
color- a 用原始颜色值填充。[输出]GdkColor
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_get_previous_rgba ----

gtk_color_selection_get_previous_rgba
gtk_color_selection_get_previous_rgba已弃用，不应在新编写的代码中使用。用原始颜色值填充 rgba。
语法
参数
colorsel- 一GtkColorSelection
rgba- a 用原始颜色值填充。[输出]GdkRGBA
自 3.0 起
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_is_adjusting ----

gtk_color_selection_is_adjusting
gtk_color_selection_is_adjusting已弃用，不应在新编写的代码中使用。获取颜色的当前状态。
语法
参数
colorsel- 一GtkColorSelection
返回
如果用户当前正在拖动颜色，则为 TRUE;如果选择已停止，则为 FALSE
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_new ----

gtk_color_selection_new
gtk_color_selection_new已弃用，不应在新编写的代码中使用。创建新的 GtkColorSelection。
返回
一个新的GtkColorSelection
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_palette_from_string ----

gtk_color_selection_palette_from_string
gtk_color_selection_palette_from_string已弃用，不应在新编写的代码中使用。解析调色板字符串;该字符串是gdk_color_parse（） 可读的颜色名称的冒号分隔列表。
语法
参数
str- 编码调色板的字符串
colors- 返回的已分配数组的位置。[输出][数组长度 = n_colors]GdkColor
n_colors- 数组长度的返回位置
返回
如果调色板已成功解析，则为 TRUE
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_palette_to_string ----

gtk_color_selection_palette_to_string
gtk_color_selection_palette_to_string已弃用，不应在新编写的代码中使用。将调色板编码为字符串，这对于持久性存储很有用。
语法
参数
colors- 一系列颜色。[数组长度 = n_colors]
n_colors- 数组的长度
返回
已分配的字符串对调色板进行编码
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_change_palette_with_screen_hook ----

gtk_color_selection_set_change_palette_with_screen_hook
gtk_color_selection_set_change_palette_with_screen_hook已弃用，不应在新编写的代码中使用。安装一个全局函数，每当用户修改颜色选择中的调色板时调用该函数。此函数应保存新的调色板内容，并更新 GtkSettings 属性，以便修改所有GtkColorSelection 构件。?gtk-color-palette?
语法
参数
func- 当自定义调色板需要保存时调用的函数
返回
以前的更改调色板挂钩（已替换）
自 2.2 起
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_current_alpha ----

gtk_color_selection_set_current_alpha
gtk_color_selection_set_current_alpha已弃用，不应在新编写的代码中使用。将当前不透明度设置为 alpha。第一次调用它时，它还会将原始不透明度设置为 alpha。
语法
参数
colorsel- 一GtkColorSelection
alpha- 介于 0 和 65535 之间的整数
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_current_color ----

gtk_color_selection_set_current_color
gtk_color_selection_set_current_color自版本 3.4 起已弃用，不应在新编写的代码中使用。请改用 gtk_color_selection_set_current_rgba（）。将当前颜色设置为颜色。第一次调用时，它还会将原始颜色设置为颜色。
语法
参数
colorsel- 一GtkColorSelection
color- a 用于设置当前颜色GdkColor
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_current_rgba ----

gtk_color_selection_set_current_rgba
gtk_color_selection_set_current_rgba已弃用，不应在新编写的代码中使用。将当前颜色设置为 rgba。第一次调用时，它还会将原始颜色设置为rgba。
语法
参数
colorsel- 一GtkColorSelection
rgba- A 用于设置当前颜色GdkRGBA
自 3.0 起
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_has_opacity_control ----

gtk_color_selection_set_has_opacity_control
gtk_color_selection_set_has_opacity_control已弃用，不应在新编写的代码中使用。将色带设置为使用或不使用不透明度。
语法
参数
colorsel- 一GtkColorSelection
has_opacity- TRUE 如果 colorelcan 设置不透明度，否则为 FALSE
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_has_palette ----

gtk_color_selection_set_has_palette
gtk_color_selection_set_has_palette已弃用，不应在新编写的代码中使用。根据has_palette的值显示和隐藏调色板。
语法
参数
colorsel- 一GtkColorSelection
has_palette- 如果调色板是可见的，则为 TRUE，否则为 FALSE
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_previous_alpha ----

gtk_color_selection_set_previous_alpha
gtk_color_selection_set_previous_alpha已弃用，不应在新编写的代码中使用。设置 ？上一个？阿尔法成为阿尔法。调用此函数时应有一些犹豫，因为进行 alpha 更改可能会令人困惑。
语法
参数
colorsel- 一GtkColorSelection
alpha- 介于 0 和 65535 之间的整数
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_previous_color ----

gtk_color_selection_set_previous_color
gtk_color_selection_set_previous_color自 3.4 版起已弃用，不应在新编写的代码中使用。请改用 gtk_color_selection_set_previous_rgba（）。设置 ？上一个？颜色是颜色。调用此函数时应有一些犹豫，因为更改颜色可能会令人困惑。调用 gtk_color_selection_set_current_color（） 也会在第一次调用时设置此颜色。
语法
参数
colorsel- 一GtkColorSelection
color- a 设置以前的颜色GdkColor
另请参见
GtkColorSelection


------------ KeyGTK3gtk_color_selection_set_previous_rgba ----

gtk_color_selection_set_previous_rgba
gtk_color_selection_set_previous_rgba已弃用，不应在新编写的代码中使用。设置 ？上一个？颜色是 rgba。调用此函数时应有一些犹豫，因为更改颜色可能会令人困惑。调用 gtk_color_selection_set_current_rgba（） 也会在第一次调用时设置此颜色。
语法
参数
colorsel- 一GtkColorSelection
rgba- a 设置以前的颜色GdkRGBA
自 3.0 起
另请参见
GtkColorSelection


------------ KeyGTK3gtk_combo_box_get_active ----

gtk_combo_box_get_active
返回当前活动项的索引，如果存在非活动项，则返回 -1。如果模型是非平面树模型，并且活动项不是树根的直接子项，则此函数returnsgtk_tree_path_get_indices（path）[0]，其中路径是活动项的。GtkTreePath
语法
参数
combo_box- 一GtkComboBox
返回
一个整数，它是当前活动项的索引，如果没有活动项，则为 -1。
2.4 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_active_id ----

gtk_combo_box_get_active_id
返回combo_box的活动行的 ID。此值取自活动行和 combo_box 的属性指定的列（请参见 gtk_combo_box_set_id_column（））。返回的值是一个暂存字符串，这意味着您可以按值将指针比作其他暂存字符串，并且您必须不释放它。如果未设置 combo_box 的属性，或者没有行处于活动状态，或者活动行具有 NULL ID 值，则返回 NULLis。?id-column??id-column?
语法
参数
combo_box- 一GtkComboBox
返回
活动行的 ID，或 NULL
自 3.0 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_active_iter ----

gtk_combo_box_get_active_iter
将 iter 设置为指向当前活动项（如果存在）。
语法
参数
combo_box- 一GtkComboBox
iter- 未初始化的.[输出]GtkTreeIter
返回
TRUE，如果 iterwas set
2.4 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_add_tearoffs ----

gtk_combo_box_get_add_tearoffs
gtk_combo_box_get_add_tearoffs自 3.10 版起已弃用，不应在新编写的代码中使用。获取 ：add-tearoffs 属性的当前值。
语法
参数
combo_box- 一GtkComboBox
返回
属性的当前值：
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_button_sensitivity ----

gtk_combo_box_get_button_sensitivity
返回组合框是否在模型中没有项时设置对下拉列表按钮敏感。
语法
参数
combo_box- 一GtkComboBox
返回
GTK_SENSITIVITY_ON如果下拉列表按钮在模型为空时敏感，GTK_SENSITIVITY_OFFif该按钮始终不敏感orGTK_SENSITIVITY_AUTO如果它仅在模型有一个要选择的项目时才敏感。
自 2.14 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_column_span_column ----

gtk_combo_box_get_column_span_column
返回包含combo_box列跨度信息的列。
语法
参数
combo_box- 一GtkComboBox
返回
列跨度列。
自 2.6 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_entry_text_column ----

gtk_combo_box_get_entry_text_column
返回combo_box用于获取字符串以在内部条目中显示的列。
语法
参数
combo_box- 一.GtkComboBox
返回
combo_box的数据源模型中的列。
自 2.24 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_focus_on_click ----

gtk_combo_box_get_focus_on_click
返回组合框在用鼠标单击时是否抓住焦点。请参见gtk_combo_box_set_focus_on_click（）。
语法
参数
combo- 一GtkComboBox
返回
如果组合框在用鼠标单击时抓住焦点，则为 TRUE。
自 2.6 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_has_entry ----

gtk_combo_box_get_has_entry
返回组合框是否具有条目。
语法
参数
combo_box- 一GtkComboBox
返回
combo_box中是否有条目。
自 2.24 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_id_column ----

gtk_combo_box_get_id_column
返回combo_box用于从中获取字符串 IDsfor 值的列。
语法
参数
combo_box- 一GtkComboBox
返回
combo_box的数据源模型中的列。
自 3.0 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_model ----

gtk_combo_box_get_model
返回充当combo_box数据源的 it。GtkTreeModel
语法
参数
combo_box- 一GtkComboBox
返回
A 在施工期间通过。[无转移]GtkTreeModel
2.4 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_popup_accessible ----

gtk_combo_box_get_popup_accessible
获取与组合框的弹出窗口对应的辅助对象。此功能主要用于辅助功能技术;应用程序应该很少使用它。
语法
参数
combo_box- 一GtkComboBox
返回
对应于组合框弹出窗口的可访问对象。[无转移]
自 2.6 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_popup_fixed_width ----

gtk_combo_box_get_popup_fixed_width
获取弹出窗口是否使用与组合框的已分配宽度匹配的固定宽度。
语法
参数
combo_box- 一GtkComboBox
返回
如果弹出窗口使用固定宽度，则为 TRUE
自 3.
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_row_separator_func ----

gtk_combo_box_get_row_separator_func
返回当前行分隔符函数。
语法
参数
combo_box- 一GtkComboBox
返回
当前行分隔符函数。
自 2.6 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_row_span_column ----

gtk_combo_box_get_row_span_column
返回包含combo_box行范围信息的列。
语法
参数
combo_box- 一GtkComboBox
返回
行跨度列。
自 2.6 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_title ----

gtk_combo_box_get_title
gtk_combo_box_get_title自 3.10 版起已弃用，不应在新编写的代码中使用。获取处于分离模式的菜单的当前标题。Seegtk_combo_box_set_add_tearoffs（）.
语法
参数
combo_box- 一GtkComboBox
返回
菜单的标题处于撕裂模式。这是一个不能被释放的字符串的内部副本。
自 2.10 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_get_wrap_width ----

gtk_combo_box_get_wrap_width
返回换行宽度，该宽度用于确定弹出菜单的列数。如果换行宽度大于 1，则组合框处于表模式。
语法
参数
combo_box- 一GtkComboBox
返回
换行宽度。
自 2.6 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_new ----

gtk_combo_box_new
创建新的空 .GtkComboBox
返回
一个新的.GtkComboBox
2.4 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_new_with_area ----

gtk_combo_box_new_with_area
创建一个新的空使用区域来布局单元格。GtkComboBox
语法
参数
area- 用于布局单元格渲染器GtkCellArea
返回
一个新的.GtkComboBox
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_new_with_area_and_entry ----

gtk_combo_box_new_with_area_and_entry
创建一个带有条目的新空。新的组合框将使用区域来布局单元格。GtkComboBox
语法
参数
area- 用于布局单元格渲染器GtkCellArea
返回
一个新的.GtkComboBox
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_new_with_entry ----

gtk_combo_box_new_with_entry
创建一个带有条目的新空。GtkComboBox
返回
一个新的.GtkComboBox
自 2.24 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_new_with_model ----

gtk_combo_box_new_with_model
创建一个将模型初始化为模型的新模型。GtkComboBox
语法
参数
model- 一.GtkTreeModel
返回
一个新的.GtkComboBox
2.4 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_new_with_model_and_entry ----

gtk_combo_box_new_with_model_and_entry
创建一个带有条目的新空，并将模型初始化为模型。GtkComboBox
语法
参数
model- 一GtkTreeModel
返回
一个新的GtkComboBox
自 2.24 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_popdown ----

gtk_combo_box_popdown
隐藏combo_box的菜单或下拉列表。此功能主要用于辅助功能技术;应用程序应该很少使用它。
语法
参数
combo_box- 一GtkComboBox
2.4 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_popup ----

gtk_combo_box_popup
弹出combo_box菜单或下拉列表。此功能主要用于辅助功能技术;应用程序应该很少使用它。
语法
参数
combo_box- 一GtkComboBox
2.4 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_popup_for_device ----

gtk_combo_box_popup_for_device
弹出combo_box菜单或下拉列表，弹出窗口将被抓取，因此只有设备及其关联的指针/键盘才能向其发送事件。GdkDevices
语法
参数
combo_box- 一GtkComboBox
device- 一GdkDevice
自 3.0 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_active ----

gtk_combo_box_set_active
将combo_box的活动项设置为索引处的项。
语法
参数
combo_box- 一GtkComboBox
index_- 模型中在构造期间传递的索引，或 -1 表示没有活动项
2.4 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_active_id ----

gtk_combo_box_set_active_id
将combo_box的活动行更改为 ID 等于 toactive_id行，如果active_id为 NULL，则取消设置活动行。具有 NULL ID 字符串的行不能由此函数激活。如果未设置 combo_box 的属性，或者 norow 具有给定的 ID，则该函数不执行任何操作并返回 FALSE。?id-column?
语法
参数
combo_box- 一GtkComboBox
active_id- 要选择的行的 ID，或 NULL。[允许-无]
返回
如果找到具有匹配 ID 的行，则为 TRUE。如果给定NULLactive_idwas来取消设置活动行，则函数式 way 将返回 TRUE。
自 3.0 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_active_iter ----

gtk_combo_box_set_active_iter
将当前活动项设置为 iter 引用的项，或者如果它为 NULL，则取消设置活动项。
语法
参数
combo_box- 一GtkComboBox
iter- 或空值。[允许-无]GtkTreeIter
2.4 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_add_tearoffs ----

gtk_combo_box_set_add_tearoffs
gtk_combo_box_set_add_tearoffs自版本 3.10 起已弃用，不应在新编写的代码中使用。设置弹出菜单是否应具有撕裂线项。
语法
参数
combo_box- 一GtkComboBox
add_tearoffs- TRUE 添加撕下菜单项
自 2.6 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_button_sensitivity ----

gtk_combo_box_set_button_sensitivity
设置组合框的下拉按钮是应始终敏感（GTK_SENSITIVITY_ON）、从不敏感（GTK_SENSITIVITY_OFF）还是仅在至少要显示一个项目时（GTK_SENSITIVITY_AUTO）。
语法
参数
combo_box- 一GtkComboBox
sensitivity- 指定下拉按钮的灵敏度
自 2.14 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_column_span_column ----

gtk_combo_box_set_column_span_column
将包含combo_box列跨度信息的列设置为becolumn_span。列跨度列包含整数，这些整数指示一个项目应跨越的列数。
语法
参数
combo_box- 一GtkComboBox
column_span- 模型中在施工期间通过的列
2.4 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_entry_text_column ----

gtk_combo_box_set_entry_text_column
设置combo_box应使用该列从中获取要text_column的字符串的模型列。combo_boxmust模型中text_column列的类型为 G_TYPE_STRING。仅当combo_box已创建为 TRUE 时，这才相关。?has-entry?
语法
参数
combo_box- 一GtkComboBox
text_column- 模型中的一列，用于从中获取内部条目的字符串
自 2.24 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_focus_on_click ----

gtk_combo_box_set_focus_on_click
设置组合框在用鼠标单击时是否将获取焦点。使鼠标单击不抓取焦点在工具栏等位置非常有用，在这些位置中，您不希望将键盘焦点从应用程序的主区域中删除。
语法
参数
combo- 一GtkComboBox
focus_on_click- 使用鼠标单击组合框时是否抓住焦点
自 2.6 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_id_column ----

gtk_combo_box_set_id_column
设置combo_box应用于从中获取值的字符串 ID 的模型列。combo_boxmust模型中id_column列的类型为 G_TYPE_STRING。
语法
参数
combo_box- 一GtkComboBox
id_column- 模型中的一列，用于获取来自
自 3.0 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_model ----

gtk_combo_box_set_model
将combo_box使用的模型设置为模型。将取消设置先前的设置模型（如果适用）。如果模型为 NULL，则它将取消设置模型。请注意，此函数不会清除单元格渲染器，如果需要为新模型设置 differentcell 渲染器，则必须自行调用 gtk_cell_layout_clear（）。
语法
参数
combo_box- 一GtkComboBox
model- 一.[允许-无]GtkTreeModel
2.4 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_popup_fixed_width ----

gtk_combo_box_set_popup_fixed_width
指定弹出窗口的宽度是否应为与组合框的已分配宽度匹配的固定宽度。
语法
参数
combo_box- 一GtkComboBox
fixed- 是否使用固定的弹出窗口宽度
自 3.0 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_row_separator_func ----

gtk_combo_box_set_row_separator_func
设置行分隔符函数，该函数用于确定是否应将一行绘制为分隔符。如果行分隔符函数为 NULL，则不绘制分隔符。这是默认值。
语法
参数
combo_box- 一GtkComboBox
func- 一GtkTreeViewRowSeparatorFunc
data- 要传递给 func 或 NULL 的用户数据。[允许-无]
destroy- 销毁数据的通知程序，或 NULL。[允许-无]
自 2.6 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_row_span_column ----

gtk_combo_box_set_row_span_column
设置包含要row_span combo_box行范围信息的列。行范围列包含指示应跨越多少行数项的整数。
语法
参数
combo_box- 一.GtkComboBox
row_span- 模型中在构造过程中通过的列。
2.4 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_title ----

gtk_combo_box_set_title
gtk_combo_box_set_title自 3.10 版起已弃用，不应在新编写的代码中使用。将菜单的标题设置为撕裂模式。
语法
参数
combo_box- 一GtkComboBox
title- 在撕裂模式下菜单的标题
自 2.10 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_set_wrap_width ----

gtk_combo_box_set_wrap_width
将combo_box的包装宽度设置为宽度。换行宽度基本上是您希望弹出窗口布置在表格中时的首选列数。
语法
参数
combo_box- 一GtkComboBox
width- 首选列数
2.4 起
另请参见
GtkComboBox


------------ KeyGTK3gtk_combo_box_text_append ----

gtk_combo_box_text_append
将文本追加到存储在combo_box中的字符串列表中。如果 id 为非 NULL，则将其用作行的 ID。这与调用gtk_combo_box_text_insert（） 的 aposition 为 -1 相同。
语法
参数
combo_box- 一GtkComboBoxText
id- 此值的字符串 ID 或 NULL。[允许-无]
text- 一个字符串
自 2.24 起
另请参见
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_append_text ----

gtk_combo_box_text_append_text
将文本追加到存储在combo_box中的字符串列表中。这与调用gtk_combo_box_text_insert_text（） 的置位为 -1 相同。
语法
参数
combo_box- 一GtkComboBoxText
text- 一个字符串
自 2.24 起
另请参见
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_get_active_text ----

gtk_combo_box_text_get_active_text
Returns the currently active string in combo_box, or NULLif none is selected. If combo_box contains an entry, thisfunction will return its contents (which will not necessarilybe an item from the list).
Syntax
Parameters
combo_box  -  	A GtkComboBoxText
Returns
a newly allocated string containing thecurrently active text. Must be freed with g_free(). [transfer full]
Since 2.2
See Also
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_insert ----

gtk_combo_box_text_insert
Inserts text at position in the list of strings stored in combo_box.If id is non-NULL then it is used as the ID of the row.  See.If position is negative then text is appended.?id-column?
Syntax
Parameters
combo_box  -  	A GtkComboBoxText
position  -  	An index to insert text
id  -  	 a string ID for this value, or NULL. [allow-none]
text  -  	A string to display
Since 3.0
See Also
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_insert_text ----

gtk_combo_box_text_insert_text
Inserts text at position in the list of strings stored in combo_box.If position is negative then text is appended.This is the same as calling gtk_combo_box_text_insert() with a NULLID string.
Syntax
Parameters
combo_box  -  	A GtkComboBoxText
position  -  	An index to insert text
text  -  	A string
Since 2.24
See Also
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_new ----

gtk_combo_box_text_new
Creates a new , which is a  just displayingstrings.GtkComboBoxTextGtkComboBox
Returns
A new GtkComboBoxText
Since 2.24
See Also
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_new_with_entry ----

gtk_combo_box_text_new_with_entry
创建一个新的 ，它只是一个显示字符串。此函数创建的组合框有一个条目。GtkComboBoxTextGtkComboBox
返回
一个新的GtkComboBoxText
自 2.24 起
另请参见
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_prepend ----

gtk_combo_box_text_prepend
将文本附加到存储在combo_box中的字符串列表。如果 id 为非 NULL，则将其用作行的 ID。这与调用gtk_combo_box_text_insert（） 的置位为 0 相同。
语法
参数
combo_box- 一GtkComboBox
id- 此值的字符串 ID 或 NULL。[允许-无]
text- 一个字符串
自 2.24 起
另请参见
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_prepend_text ----

gtk_combo_box_text_prepend_text
将文本附加到存储在combo_box中的字符串列表。这与调用gtk_combo_box_text_insert_text（） 的置位为 0 相同。
语法
参数
combo_box- 一GtkComboBox
text- 一个字符串
自 2.24 起
另请参见
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_remove ----

gtk_combo_box_text_remove
从combo_box中删除位置处的字符串。
语法
参数
combo_box- 一GtkComboBox
position- 要删除的项目的索引
自 2.24 起
另请参见
GtkComboBoxText


------------ KeyGTK3gtk_combo_box_text_remove_all ----

gtk_combo_box_text_remove_all
从组合框中删除所有文本条目。
语法
参数
combo_box- 一GtkComboBoxText
自 3.0 起
另请参见
GtkComboBoxText


------------ KeyGTK3gtk_container_add ----

gtk_container_add
将小部件添加到容器。通常用于简单容器，如 、 、 或 ;对于更复杂的布局容器，如 或 ，此函数将选择可能不正确的默认打包参数。Soconsider函数，如gtk_box_pack_start（） andgtk_grid_attach（）作为gtk_container_add（）在这种情况下的替代方法。一个小部件一次只能添加到一个容器中;您不能将同一个小部件放在两个不同的容器中。请注意，某些容器（如 or）可能会在添加的小部件和容器之间添加中间子级。GtkWindowGtkFrameGtkButtonGtkBoxGtkGridGtkScrolledWindowGtkListBox
语法
参数
container- 一GtkContainer
widget- 放置在容器内的小部件
另请参见
GtkContainer


------------ KeyGTK3gtk_container_add_with_properties ----

gtk_container_add_with_properties
将小部件添加到容器，同时设置子属性。有关详细信息，请参阅 gtk_container_add（） 和 gtk_container_child_set（）。
语法
参数
container- 一GtkContainer
widget- 放置在容器内的小部件
first_prop_name- 要设置的第一个子属性的名称
...- 以 NULL 结尾的属性名称和值列表，以first_prop_name
另请参见
GtkContainer


------------ KeyGTK3gtk_container_child_get ----

gtk_container_child_get
获取子属性和容器的一个或多个子属性的值。
语法
参数
container- 一GtkContainer
child- 一个小部件，它是容器的子项
first_prop_name- 要获取的第一个属性的名称
...- 返回第一个属性的位置，后跟更多名称/返回位置对，后跟 NULL
另请参见
GtkContainer


------------ KeyGTK3gtk_container_child_get_property ----

gtk_container_child_get_property
获取子属性和容器的子属性的值。
语法
参数
container- 一GtkContainer
child- 一个小部件，它是容器的子项
property_name- 要获取的属性的名称
value- 返回值的位置
另请参见
GtkContainer


------------ KeyGTK3gtk_container_child_get_valist ----

gtk_container_child_get_valist
获取子属性和容器的一个或多个子属性的值。
语法
参数
container- 一GtkContainer
child- 一个小部件，它是容器的子项
first_property_name- 要获取的第一个属性的名称
var_args- 返回第一个属性的位置，后跟更多名称/返回位置对，后跟 NULL
另请参见
GtkContainer


------------ KeyGTK3gtk_container_child_notify ----

gtk_container_child_notify
在小部件上为子propertychild_property发出信号。这是子属性的 g_object_notify（） 的类似物。另请参见 gtk_widget_child_notify（）。?child-notify?
语法
参数
container- 的GtkContainer
child- 子小部件
child_property- 安装在容器类上的子属性的名称
自 3.2 起
另请参见
GtkContainer


------------ KeyGTK3gtk_container_child_set ----

gtk_container_child_set
为子属性和容器设置一个或多个子属性。
语法
参数
container- 一GtkContainer
child- 一个小部件，它是容器的子项
first_prop_name- 要设置的第一个属性的名称
...- 以 NULL 结尾的属性名称和值列表，以first_prop_name
另请参见
GtkContainer


------------ KeyGTK3gtk_container_child_set_property ----

gtk_container_child_set_property
设置子属性和容器的子属性。
语法
参数
container- 一GtkContainer
child- 一个小部件，它是容器的子项
property_name- 要设置的属性的名称
value- 要将属性设置为的值
另请参见
GtkContainer


------------ KeyGTK3gtk_container_child_set_valist ----

gtk_container_child_set_valist
为子属性和容器设置一个或多个子属性。
语法
参数
container- 一GtkContainer
child- 一个小部件，它是容器的子项
first_property_name- 要设置的第一个属性的名称
var_args- 以 NULL 结尾的属性名称和值列表，以first_prop_name
另请参见
GtkContainer


------------ KeyGTK3gtk_container_child_type ----

gtk_container_child_type
返回容器支持的子级的类型。请注意，这可能会返回G_TYPE_NONE，以指示不能再添加子级，例如，对于已经有两个子级的论坛。GtkPaned
语法
参数
container- 一GtkContainer
返回
一个。GType
另请参见
GtkContainer


------------ KeyGTK3gtk_container_class_find_child_property ----

gtk_container_class_find_child_property
按名称查找容器类的子属性。
语法
参数
cclass- 一个.[类型 GtkContainerClass]GtkContainerClass
property_name- 要查找的子属性的名称
返回
子属性的 NULL，如果 class 没有具有该名称的子属性。[无转移]GParamSpec
另请参见
GtkContainer


------------ KeyGTK3gtk_container_class_handle_border_width ----

gtk_container_class_handle_border_width
修改 子类 以自动添加和删除 GtkContainer 上的边框宽度设置。这允许子类在其大小请求中忽略边框宽度并分配方法。其目的是让子类在其class_init function.gtk_container_class_handle_border_width（）中调用 this 是必要的，因为它会严重破坏 API，使此行为成为默认行为。Sosubclasses 必须选择加入？到父类处理border_widthfor它们。GtkContainerClass
语法
参数
klass- 子类的类结构[br \=“”GtkContainer
另请参见
GtkContainer


------------ KeyGTK3gtk_container_class_install_child_property ----

gtk_container_class_install_child_property
在容器类上安装子属性。
语法
参数
cclass- 一GtkContainerClass
property_id- 房产的id
pspec- 为财产GParamSpec
另请参见
GtkContainer


------------ KeyGTK3gtk_container_class_list_child_properties ----

gtk_container_class_list_child_properties
返回容器类的所有子属性。
语法
参数
cclass- 一个.[类型 GtkContainerClass]GtkContainerClass
n_properties- 返回找到的子属性数量的位置
返回
新分配的以 NULL 结尾的 * 数组。必须使用 g_free（） 释放数组。[数组长度 = n_properties][转移容器]GParamSpec
另请参见
GtkContainer


------------ KeyGTK3gtk_container_forall ----

gtk_container_forall
在容器的每个子级上调用回调，包括被视为 “内部” 的子级？（容器的实现细节）。?内部？子级通常不是由容器的用户添加的，而是由容器实现本身添加的。大多数应用程序应该使用gtk_container_foreach（），而不是gtk_container_forall（）。
语法
参数
container- 一GtkContainer
callback- 回调。[范围调用][结束callback_data]
callback_data- 回调用户数据
另请参见
GtkContainer


------------ KeyGTK3gtk_container_foreach ----

gtk_container_foreach
在容器的每个非内部子级上调用回调。Seegtk_container_forall（） 了解有关什么构成内部的详细信息？孩子。大多数应用程序应usegtk_container_foreach（），而不是gtk_container_forall（）。
语法
参数
container- 一GtkContainer
callback- 回调。[范围调用]
callback_data- 回调用户数据
另请参见
GtkContainer


------------ KeyGTK3gtk_container_get_border_width ----

gtk_container_get_border_width
妫€绱㈠鍣ㄧ殑杈规瀹藉害銆係eegtk_container_set_border_width锛堬級.
璇硶
鍙傛暟
container- 涓€GtkContainer
杩斿洖
褰撳墠杈规瀹藉害
鍙﹁鍙傝
GtkContainer


------------ KeyGTK3gtk_container_get_children ----

gtk_container_get_children
返回容器的非内部子项。Seegtk_container_forall（））了解有关“内部”子项构成的详细信息。
语法
参数
container- 一GtkContainer
返回
容器的非内部子项的新分配列表。[element-type GtkWidget][转移容器]
另请参见
GtkContainer


------------ KeyGTK3gtk_container_get_focus_chain ----

gtk_container_get_focus_chain
检索容器的焦点链（如果已显式设置）。如果没有显式设置焦点链，GTK+ 将根据子项的位置计算焦点链。在这种情况下，GTK+ 将 NULL 存储infocusable_widgets并返回 FALSE。
语法
参数
container- 一GtkContainer
focusable_widgets- 位置存储容器的焦点链，或 NULL。完成后，您应该使用g_list_free（）释放此列表，但是不会向焦点链中的单个小部件添加额外的引用计数。[element-type GtkWidget][输出][转移容器]
返回
如果容器的焦点链已显式设置，则为 TRUE。
另请参见
GtkContainer


------------ KeyGTK3gtk_container_get_focus_child ----

gtk_container_get_focus_child
返回容器内的当前焦点子构件。这不是当前集中的小部件。这可以通过callinggtk_window_get_focus（）获得。
语法
参数
container- 一GtkContainer
返回
当 conatineris 聚焦时，它将在容器内接收焦点的子小部件，如果未设置任何子集，则为 NULL。[无转移]
自 2.14 起
另请参见
GtkContainer


------------ KeyGTK3gtk_container_get_focus_hadjustment ----

gtk_container_get_focus_hadjustment
检索容器的水平焦点调整。Seegtk_container_set_focus_hadjustment（）.
语法
参数
container- 一GtkContainer
返回
水平焦点调整，或已设置 NULL ifnone。[无转移]
另请参见
GtkContainer


------------ KeyGTK3gtk_container_get_focus_vadjustment ----

gtk_container_get_focus_vadjustment
检索容器的垂直焦点调整。Seegtk_container_set_focus_vadjustment（）.
语法
参数
container- 一GtkContainer
返回
垂直焦点调整，或已设置 NULL ifnone。[无转移]
另请参见
GtkContainer


------------ KeyGTK3gtk_container_get_path_for_child ----

gtk_container_get_path_for_child
返回新创建的小组件路径，该路径表示从子节点到子项（包括子项）的所有小部件层次结构。
语法
参数
container- 一GtkContainer
child- 容器的子项
返回
新创建的GtkWidgetPath
另请参见
GtkContainer


------------ KeyGTK3gtk_container_get_resize_mode ----

gtk_container_get_resize_mode
gtk_container_get_resize_mode自版本 3.12 起已弃用，不应在新编写的代码中使用。已弃用调整大小模式。它们不再是必需的，因为帧时钟，如果使用，可能会引入晦涩的错误。返回容器的调整大小模式。Seegtk_container_set_resize_mode（）.
语法
参数
container- 一GtkContainer
返回
当前调整大小模式
另请参见
GtkContainer


------------ KeyGTK3gtk_container_propagate_draw ----

gtk_container_propagate_draw
当容器收到对 draw 函数的调用时，它必须向所有没有自己的子级发送合成调用。此函数提供了一种方便的方法来执行此操作。一个容器，当它收到对其函数的调用时，为每个子级调用gtk_container_propagate_draw（）一次，传入cr的容器received.gtk_container_propagate_draw（）负责转换cr的起源，并决定是否需要将绘制发送给子级。这是一种方便和优化的方式，可以直接在孩子身上获得与callinggtk_widget_draw（）相同的效果。在大多数情况下，容器可以简单地从 继承实现，或者进行一些绘制，然后链接到 ：:d raw 实现 from 。?draw?GdkWindows?draw??draw?GtkContainerGtkContainer
语法
参数
container- 一GtkContainer
child- 容器的子项
cr- 传递到容器的开罗上下文。如果要使用 crin 容器的 draw 函数，请考虑在调用此函数之前使用 cairo_save（） andcairo_restore（）。
另请参见
GtkContainer


------------ KeyGTK3gtk_container_remove ----

gtk_container_remove
从容器中删除小部件。小部件必须位于容器内。请注意，容器将拥有对小部件的引用，并且这可能是最后一个保留的引用;因此，从其容器中删除小部件可能会破坏该小部件。如果你想使用 widgetagain，你需要在它不是容器内部时，使用 g_object_ref（） 添加对它的引用。如果您不想使用 widgetagain，直接使用 gtk_widget_destroy（） 直接销毁它通常更有效，因为这会将其从容器中删除，并有助于打破任何循环引用计数循环。
语法
参数
container- 一GtkContainer
widget- 容器的当前子级
另请参见
GtkContainer


------------ KeyGTK3gtk_container_resize_children ----

gtk_container_resize_children
gtk_container_resize_children自 3.10 版起已弃用，不应在新编写的代码中使用。
语法
参数
container- 一GtkContainer
另请参见
GtkContainer


------------ KeyGTK3gtk_container_set_border_width ----

gtk_container_set_border_width
设置容器的边框宽度。容器的边框宽度是容器外部要留出的空间量。唯一的例外是;因为豪华的窗户不能在外面留下空间，所以它们把空间留在里面。边框将添加到容器的所有边上。要仅向一侧添加空间，一种方法是创建一个小部件，调用gtk_widget_set_size_request（）为其指定大小，并将其放置在容器的一侧作为间隔条。GtkWindowGtkAlignment
语法
参数
container- 一GtkContainer
border_width- 将空白空间留在容器外部。有效值在 0-65535 像素范围内。
另请参见
GtkContainer


------------ KeyGTK3gtk_container_set_focus_chain ----

gtk_container_set_focus_chain
设置焦点链，覆盖 GTK+ 自动计算的焦点链。原则上，链中的每个小部件都应该是容器的后代，但这不是由此方法强制执行的，因为它允许在打包小部件之前设置焦点链，或者在链中有一个并不总是打包的小部件。当焦点链实际遍历时，将进行必要的检查。
语法
参数
container- 一GtkContainer
focusable_widgets- 新的焦点链。[无转移][element-type GtkWidget]
另请参见
GtkContainer


------------ KeyGTK3gtk_container_set_focus_child ----

gtk_container_set_focus_child
设置，如果子项为 NULL，则取消设置，如果子项是容器的焦点子项。此函数发出 GtkContainer：：set_focus_child信号。的实现可以通过覆盖此信号的类闭包来覆盖默认行为。这个功能主要是为了小部件使用。应用程序可以usegtk_widget_grab_focus（）手动将焦点设置为特定的小部件。GtkContainer
语法
参数
container- 一GtkContainer
child- a 或 NULL。[允许-无]GtkWidget
另请参见
GtkContainer


------------ KeyGTK3gtk_container_set_focus_hadjustment ----

gtk_container_set_focus_hadjustment
将调整挂接到容器中的焦点处理，因此当容器的子项聚焦时，将滚动调整以显示该小角。此函数设置水平对齐方式。有关获取调整的典型方法，请参阅 gtk_scrolled_window_get_hadjustment（）;有关设置垂直调整的gtk_container_set_focus_vadjustment（）。调整必须采用像素单位，并且必须与容器的直接子项的分配采用相同的坐标系。
语法
参数
container- 一GtkContainer
adjustment- 当焦点在容器的后代之间移动时应进行调整的调整
另请参见
GtkContainer


------------ KeyGTK3gtk_container_set_focus_vadjustment ----

gtk_container_set_focus_vadjustment
将调整挂接到容器中的焦点处理，因此当容器的子项聚焦时，将滚动调整以显示该小部件。此函数设置垂直对齐方式。Seegtk_scrolled_window_get_vadjustment（） 表示获取调整的典型方法，gtk_container_set_focus_hadjustment（） 表示设置水平调整。调整必须采用像素单位，并且必须与容器的直接子项的分配采用相同的坐标系。
语法
参数
container- 一GtkContainer
adjustment- 当焦点在容器的后代之间移动时应进行调整的调整
另请参见
GtkContainer


------------ KeyGTK3gtk_container_set_reallocate_redraws ----

gtk_container_set_reallocate_redraws
将容器的 reallocate_redraws 标志设置为给定值。请求重新分配重绘的容器，如果其任何子项更改了分配，则会自动重新绘制。
语法
参数
container- 一GtkContainer
needs_redraws- 容器reallocate_redrawsflag的新值
另请参见
GtkContainer


------------ KeyGTK3gtk_container_set_resize_mode ----

gtk_container_set_resize_mode
gtk_container_set_resize_mode自版本 3.12 起已弃用，不应在新编写的代码中使用。已弃用调整大小模式。它们不再是必需的，因为帧时钟，如果使用，可能会引入晦涩的错误。设置容器的大小调整模式。容器的调整大小模式确定是否将调整大小请求传递给容器的父级，并排队等待以后立即执行的执行程序。
语法
参数
container- 一GtkContainer
resize_mode- 新的调整大小模式
另请参见
GtkContainer


------------ KeyGTK3gtk_container_unset_focus_chain ----

gtk_container_unset_focus_chain
删除使用 gtk_container_set_focus_chain（） 显式设置的焦点链。
语法
参数
container- 一GtkContainer
另请参见
GtkContainer


------------ KeyGTK3GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID ----

GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID
GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID()
应使用此宏发出有关 set_child_property（） 和 get_child_property（） 实现中意外属性的标准警告。
语法
参数
object- 调用 set_child_property（） 或 get_child_property（）GObject
property_id- 属性的数字 id
pspec- 财产GParamSpec
另请参见
GtkContainer


------------ KeyGTK3gtk_css_provider_get_default ----

gtk_css_provider_get_default
返回包含用作所有构件的回退的样式设置的提供程序。
返回
用于回退样式的提供程序。此内存归 GTK+ 所有，您不得释放它。[无转移]
另请参见
GtkCssProvider


------------ KeyGTK3gtk_css_provider_get_named ----

gtk_css_provider_get_named
从常用主题路径加载主题
语法
参数
name- 主题名称
variant- 加载的变体，例如，“dark”，或默认值的NULL。[允许-无]
返回
a，并加载主题。此内存归 GTK+ 所有，您不得释放它。[无转移]GtkCssProvider
另请参见
GtkCssProvider


------------ KeyGTK3gtk_css_provider_load_from_data ----

gtk_css_provider_load_from_data
将数据加载到css_provider，使其清除以前加载的任何信息。
语法
参数
css_provider- 一GtkCssProvider
data- CSS数据加载到内存中。[数组长度 = 长度][元素型胶体8]
length- 数据在字节中的长度，或 -1 表示 NUL 终止的字符串。如果lengthis不是-1，代码将假定它不是NUL终止的，并且会进行复制。
error- 返回 的位置，或 NULL。[输出][允许-无]GError
返回
真。返回值已弃用，并且仅当发生错误不是 NULL 并且发生加载错误时，才会出于向后兼容性原因返回 FALSE。要在加载CSS时跟踪错误，请连接到GtkCssProvider：:p arsing-error信号。
另请参见
GtkCssProvider


------------ KeyGTK3gtk_css_provider_load_from_file ----

gtk_css_provider_load_from_file
将文件中包含的数据加载到css_provider中，使其清晰地显示以前加载的任何信息。
语法
参数
css_provider- 一GtkCssProvider
file  -  	GFile指向要加载的文件
error- 返回 的位置，或 NULL。[输出][允许-无]GError
返回
真。返回值已弃用，并且仅当发生错误不是 NULL 并且发生加载错误时，才会出于向后兼容性原因返回 FALSE。要在加载CSS时跟踪错误，请连接到GtkCssProvider：:p arsing-error信号。
另请参见
GtkCssProvider


------------ KeyGTK3gtk_css_provider_load_from_path ----

gtk_css_provider_load_from_path
将 path 中包含的数据加载到css_provider中，使其清除以前加载的任何信息。
语法
参数
css_provider- 一GtkCssProvider
path- 要加载的文件名的路径，在GLib文件名编码中
error- 返回 的位置，或 NULL。[输出][允许-无]GError
返回
真。返回值已弃用，并且仅当发生错误不是 NULL 并且发生加载错误时，才会出于向后兼容性原因返回 FALSE。要在加载CSS时跟踪错误，请连接到GtkCssProvider：:p arsing-error信号。
另请参见
GtkCssProvider


------------ KeyGTK3gtk_css_provider_new ----

gtk_css_provider_new
返回新创建的 .GtkCssProvider
返回
一个新的GtkCssProvider
另请参见
GtkCssProvider


------------ KeyGTK3gtk_css_provider_to_string ----

gtk_css_provider_to_string
将提供程序转换为 CSSformat 中的字符串表示形式。在创建withgtk_css_provider_new（） 的新提供程序上使用具有此函数返回值的 gtk_css_provider_load_from_data（） 基本上将创建此提供程序的副本。
语法
参数
provider- 写入字符串的提供程序
返回
表示提供程序的新字符串。
自 3.2 起
另请参见
GtkCssProvider


------------ KeyGTK3gtk_css_section_get_end_line ----

gtk_css_section_get_end_line
返回 CSS 文档中本节结束的行。行号为 0 索引，因此文档的第一行将返回 0。如果尚未完全解析此函数，则在将来调用此函数时，此值可能会更改。例如，这将发生在GtkCssProvider：:p arsing-error信号中。对于未能成功解析任何内容的截面，结束位置和行可能与起始位置和行相同。
语法
参数
section- 部分
返回
行号
自 3.2 起
另请参见
GtkCssProvider


------------ KeyGTK3gtk_css_section_get_end_position ----

gtk_css_section_get_end_position
返回从当前行的开头开始的偏移量（以字节为单位），通过 gtk_css_section_get_end_line（） 返回。如果尚未完全解析此函数，则在将来调用此函数时，此值可能会更改。例如，这将在GtkCssProvider：:p arsing-error信号中出现。对于未能成功解析任何内容的截面，结束位置和行可能与起始位置和行相同。
语法
参数
section- 部分
返回
从行首开始的偏移量（以字节为单位）。
自 3.2 起
另请参见
GtkCssProvider


------------ KeyGTK3gtk_css_section_get_file ----

gtk_css_section_get_file
获取从中分析节的文件。如果不存在这样的文件，例如因为 CSS 是viagtk_css_provider_load_from_data（） 加载的，则返回 NULL。
语法
参数
section- 部分
返回
该部分从中解析，如果该部分从其他数据解析，则为 NULL。[无转移]GFile
自 3.2 起
另请参见
GtkCssProvider


------------ KeyGTK3gtk_css_section_get_parent ----

gtk_css_section_get_parent
获取给定节的父节。父部分是包含此部分的部分。特殊情况是 类型 。它们的父级要么是NULLif，要么是bygtk_css_provider_load_from_file（）加载的原始CSS文档，要么是类型部分，如果它使用来自不同文件的导入规则加载。GTK_CSS_SECTION_DOCUMENTGTK_CSS_SECTION_IMPORT
语法
参数
section- 部分
返回
父部分或 NULL（如果没有）
自 3.2 起
另请参见
GtkCssProvider


------------ KeyGTK3gtk_css_section_get_section_type ----

gtk_css_section_get_section_type
获取部分描述的信息类型。
语法
参数
section- 部分
返回
截面类型
自 3.2 起
另请参见
GtkCssProvider


------------ KeyGTK3gtk_css_section_get_start_line ----

gtk_css_section_get_start_line
返回 CSS 文档中此部分开始的行。行号为 0 索引，因此文档的第一行将返回 0。
语法
参数
section- 部分
返回
行号
自 3.2 起
另请参见
GtkCssProvider


------------ KeyGTK3gtk_css_section_get_start_position ----

gtk_css_section_get_start_position
返回从当前行的开头开始的偏移量（以字节为单位），通过 gtk_css_section_get_start_line（） 返回。
语法
参数
section- 部分
返回
从行首开始的偏移量（以字节为单位）。
自 3.2 起
另请参见
GtkCssProvider


------------ KeyGTK3gtk_css_section_ref ----

gtk_css_section_ref
递增节的引用计数。
语法
参数
section- 一GtkCssSection
返回
截取自己。
自 3.2 起
另请参见
GtkCssProvider


------------ KeyGTK3gtk_css_section_unref ----

gtk_css_section_unref
减少截面上的引用计数，如果引用计数达到 0，则释放结构。
语法
参数
section- 一GtkCssSection
自 3.
另请参见
GtkCssProvider


------------ KeyGTK3gtk_device_grab_add ----

gtk_device_grab_add
在设备上添加一个 GTK+ 抓取，以便设备上的所有事件及其关联的指针或键盘（如果有）都传递到小部件。如果block_others参数为 TRUE，则在抓取过程中，任何其他设备将无法与小部件进行交互。
语法
参数
widget- 一GtkWidget
device- 一个抓住。GdkDevice
block_others- TRUE可防止其他设备与小部件交互。
自 3.0 起
另请参见
gtk3-General


------------ KeyGTK3gtk_device_grab_remove ----

gtk_device_grab_remove
从给定的小部件中删除设备抓取。您必须将调用配对到 gtk_device_grab_add（） andgtk_device_grab_remove（）。
语法
参数
widget- 一GtkWidget
device- 一GdkDevice
自 3.0 起
另请参见
gtk3-General


------------ KeyGTK3gtk_dialog_add_action_widget ----

gtk_dialog_add_action_widget
将可激活的小部件添加到 的操作区域，连接一个信号处理程序，该处理程序将在激活小部件时在对话框中发出信号。该微件位于对话框操作区域的末尾。如果要添加非可激活的小部件，只需将其打包到结构的action_area字段中即可。GtkDialog?response?GtkDialog
语法
参数
dialog- 一GtkDialog
child- 一个可激活的小部件
response_id- 儿童的响应 ID
另请参见
GtkDialog


------------ KeyGTK3gtk_dialog_add_button ----

gtk_dialog_add_button
添加一个具有给定文本的按钮并进行设置，以便单击该按钮将发出具有给定response_id的信号。该按钮将附加到对话框的操作区域的末尾。按钮小部件被返回，但通常你不需要它。?response?
语法
参数
dialog- 一GtkDialog
button_text- 按钮文本
response_id- 按钮的响应 ID
返回
已添加的小部件。[无转移]GtkButton
另请参见
GtkDialog


------------ KeyGTK3gtk_dialog_add_buttons ----

gtk_dialog_add_buttons
添加更多按钮，与重复调用gtk_dialog_add_button（）相同。变量参数列表应为 NULL 终止，gtk_dialog_new_with_buttons（）。每个按钮必须同时具有文本和响应 ID。
语法
参数
dialog- 一GtkDialog
first_button_text- 按钮文本
...- 第一个按钮的响应ID，然后是更多文本response_id对
另请参见
GtkDialog


------------ KeyGTK3gtk_dialog_get_action_area ----

gtk_dialog_get_action_area
gtk_dialog_get_action_area自版本 3.12 起已弃用，不应在新编写的代码中使用。不鼓励直接进入行动区;使用 gtk_dialog_add_button（） 等。返回对话框的操作区域。
语法
参数
dialog- 一GtkDialog
返回
操作区域。[无转移]
自 2.14 起
另请参见
GtkDialog


------------ KeyGTK3gtk_dialog_get_content_area ----

gtk_dialog_get_content_area
返回对话框的内容区域。
语法
参数
dialog- 一GtkDialog
返回
内容区域 。[无转移]GtkBox
自 2.14 起
另请参见
GtkDialog


------------ KeyGTK3gtk_dialog_get_header_bar ----

gtk_dialog_get_header_bar
返回对话框的标题栏。请注意，仅当属性为 TRUE 时，对话框才会使用标题栏。?use-header-bar?
语法
参数
dialog- 一GtkDialog
返回
标题栏。[无转移]
自 3.12 起
另请参见
GtkDialog


------------ KeyGTK3gtk_dialog_get_response_for_widget ----

gtk_dialog_get_response_for_widget
获取对话框操作区域中小部件的响应 ID。
语法
参数
dialog- 一GtkDialog
widget- 对话框操作区域中的小部件
返回
小部件的响应 ID，或GTK_RESPONSE_NONEif小部件没有设置响应 ID。
自 2.8 起
另请参见
GtkDialog


------------ KeyGTK3gtk_dialog_get_widget_for_response ----

gtk_dialog_get_widget_for_response
获取在对话框的操作区域中使用给定响应 ID 的小部件按钮。
语法
参数
dialog- 一GtkDialog
response_id- 对话框小道使用的响应 ID
返回
使用givenresponse_id的小部件按钮，或 NULL。[无转移]
自 2.20 起
另请参见
GtkDialog


------------ KeyGTK3gtk_dialog_new ----

gtk_dialog_new
创建一个新对话框。小部件不应直接打包到此内容中，而应打包到 vbox 和action_area中，如上所述。GtkWindow
返回
将新对话框作为GtkWidget
另请参见
GtkDialog


------------ KeyGTK3gtk_dialog_new_with_buttons ----

gtk_dialog_new_with_buttons
创建一个带有标题（默认标题为 NULL;请参阅gtk_window_set_title（））和临时父级（或无标题为 NULL;请参阅gtk_window_set_transient_for（）））的新标题。flagsargument 可用于使对话框成为模式 （） 和/或将其与其瞬态父节点 （） 一起销毁。在标志之后，应列出按钮文本/响应 ID 对，并在列表末尾使用 NULL 指针。按钮文本可以是任意文本。响应 ID 可以是正数，也可以是枚举中的值之一。如果用户单击其中一个对话框按钮， 将发出具有相应响应 ID 的信号。如果 a 收到信号，它将发出响应 ID 为 的 ：：response。但是，销毁对话框不会发出 ：：response 信号;因此在使用该标志时要小心依赖 ：：response。按钮是从左到右，因此列表中的第一个按钮将是对话框中最左侧的按钮。这里有一个简单的例子：12345678910[/语法] [语法]GtkWidget *对话框;GtkDialogFlags 标志 = GTK_DIALOG_MODAL |GTK_DIALOG_DESTROY_WITH_PARENT;dialog = gtk_dialog_new_with_buttons （“My dialog”， main_app_window， flags， _（“_OK”）， GTK_RESPONSE_ACCEPT， _（“_Cancel”）， GTK_RESPONSE_REJECT， NULL）;[/语法]GtkDialogGTK_DIALOG_MODALGTK_DIALOG_DESTROY_WITH_PARENTGtkResponseTypeGtkDialog?response?GtkDialog?delete-event?GTK_RESPONSE_DELETE_EVENTGTK_DIALOG_DESTROY_WITH_PARENT
语法
参数
title- 对话框的标题，或 NULL。[允许-无]
parent- 对话框的瞬态父级，或 NULL。[允许-无]
flags- 从GtkDialogFlags
first_button_text- 文本进入第一个按钮，或空。[允许-无]
...- 第一个按钮的响应 ID，然后是其他按钮，以 NULL 结尾
返回
一个新的GtkDialog
另请参见
GtkDialog


------------ KeyGTK3gtk_dialog_response ----

gtk_dialog_response
发出具有给定响应 ID 的信号。用于指示用户已以某种方式响应对话框;通常，您或gtk_dialog_run（） 将监视：：响应信号并采取适当的操作。?response?
语法
参数
dialog- 一GtkDialog
response_id- 响应 ID
另请参见
GtkDialog


------------ KeyGTK3gtk_dialog_run ----

gtk_dialog_run
在递归主循环中阻塞，直到对话发出信号或被破坏。如果在调用 gtk_dialog_run（） 期间对话框被破坏，则返回 gtk_dialog_run（）。否则，它将从：：响应信号发射返回响应 ID。在进入递归主循环之前，gtk_dialog_run（） callsgtk_widget_show（） 在对话框中为您准备。请注意，您仍然需要自己显示对话框的任何子级。在 gtk_dialog_run（） 期间，的默认行为被禁用;如果对话框收到 ：:d elete_event，它不会像通常的窗口那样被破坏，并且gtk_dialog_run（） 将返回。此外，在gtk_dialog_run（）期间，对话框将是模态的。您可以随时通过调用 gtk_dialog_response（） 发出 ：：response 信号来强制 gtk_dialog_run（） 返回。在gtk_dialog_run（）期间销毁对话框是一个非常糟糕的主意，因为您的post-run代码将不知道对话框是否被销毁。gtk_dialog_run（） 返回后，如果您愿意，则负责隐藏或破坏对话框。此函数的典型用法可能是：1234567891011[/语法] [语法]gint result = gtk_dialog_run （GTK_DIALOG （dialog））;switch （result） { case GTK_RESPONSE_ACCEPT： do_application_specific_something （）; break; default： do_nothing_since_dialog_was_cancelled （）; break; }gtk_widget_destroy（对话框）;[/语法]
请注意，即使递归主循环具有非模式对话框的效果（它阻止用户在对话框运行时与同一窗口组中的其他窗口进行交互），也会在gtk_dialog_run（）调用期间触发回调，例如超时，IO 通道监视，DND 丢弃等。?response?GTK_RESPONSE_NONE?delete-event?GTK_RESPONSE_DELETE_EVENT
语法
参数
dialog- 一GtkDialog
返回
响应 ID
另请参见
GtkDialog


------------ KeyGTK3gtk_dialog_set_alternative_button_order ----

gtk_dialog_set_alternative_button_order
gtk_dialog_set_alternative_button_order自 3.10 版起已弃用，不应在新编写的代码中使用。已弃用设置备用按钮顺序。如果将设置设置为 TRUE，则对话按钮将根据传递给此函数的响应 ID 的顺序重新排序。默认情况下，GTK+ 对话框使用“GNOME 人机界面指南”所倡导的按钮顺序，最右边是肯定按钮，左边是取消按钮。但是内置的GTK +对话框确实提供了一个替代按钮顺序，这在某些平台上更合适，例如Windows.将所有按钮添加到对话框后使用此功能，如下面的示例所示：12345678910111213141516171819[/语法] [语法]cancel_button = gtk_dialog_add_button（GTK_DIALOG（对话框），_（“_Cancel”），GTK_RESPONSE_CANCEL）;ok_button = gtk_dialog_add_button（GTK_DIALOG（对话框）， _（“_OK”）， GTK_RESPONSE_OK）;gtk_widget_grab_default （ok_button）;help_button = gtk_dialog_add_button （GTK_DIALOG （dialog）， _（“_Help”）， GTK_RESPONSE_HELP）;gtk_dialog_set_alternative_button_order （GTK_DIALOG （dialog）， GTK_RESPONSE_OK， GTK_RESPONSE_CANCEL， GTK_RESPONSE_HELP， -1）;[/语法]?gtk-alternative-button-order?GtkMessageDialogs
语法
参数
dialog- 一GtkDialog
first_response_id- 一个对话框的按钮使用的响应 id
...- 对话框按钮的更多响应id列表，以-1结尾
自 2.6 起
另请参见
GtkDialog


------------ KeyGTK3gtk_dialog_set_alternative_button_order_from_array ----

gtk_dialog_set_alternative_button_order_from_array
gtk_dialog_set_alternative_button_order_from_array自版本 3.10 起已弃用，不应在新编写的代码中使用。已弃用设置备用按钮顺序。如果该设置设置为 TRUE，则对话按钮将根据 new_order 中响应 id 的顺序重新排序。有关详细信息，请参阅 gtk_dialog_set_alternative_button_order（）。此函数供语言绑定使用。?gtk-alternative-button-order?
语法
参数
dialog- 一GtkDialog
n_params- new_order中的响应 id 数
new_order- 一个响应 id 的数组的对话框的按钮。[数组长度 = n_params]
自 2.
另请参见
GtkDialog


------------ KeyGTK3gtk_dialog_set_default_response ----

gtk_dialog_set_default_response
使用给定的response_idas对话框的给定窗口小部件设置对话框操作区域中的最后一个微件。紧迫？进入？通常激活默认小部件。
语法
参数
dialog- 一GtkDialog
response_id- 响应 ID
另请参见
GtkDialog


------------ KeyGTK3gtk_dialog_set_response_sensitive ----

gtk_dialog_set_response_sensitive
使用给定response_id为对话框操作区域中的每个小部件调用gtk_widget_set_sensitive（小部件，@setting）。一种使对话框按钮敏感化/脱敏的便捷方法。
语法
参数
dialog- 一GtkDialog
response_id- 响应 ID
setting- 对于敏感
另请参见
GtkDialog


------------ KeyGTK3gtk_disable_setlocale ----

gtk_disable_setlocale
防止gtk_init（）、gtk_init_check（）、gtk_init_with_args（） andgtk_parse_args（） 自动调用 setlocale （LC_ALL， “”）。如果要将程序的区域设置设置为用户区域设置以外的其他值，或者要为不同的区域设置类别设置不同的值，则可以使用此函数。大多数程序不需要调用此函数。
另请参见
gtk3-General


------------ KeyGTK3gtk_drag_begin ----

gtk_drag_begin
gtk_drag_begin自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_drag_begin_with_coordinates（）。
语法
参数
widget- 源小部件。
targets- 来源可以提供数据的目标（数据格式）。
actions- 此拖动允许的拖动操作的位掩码。
button- 用户单击以开始拖动的按钮。
event- 触发拖动开始的事件。
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_begin_with_coordinates ----

gtk_drag_begin_with_coordinates
在源端启动拖动。该函数仅在应用程序启动拖动自身时才需要使用，而whengtk_drag_source_set（） 则不需要。该事件用于检索将在内部用于抓取指针的时间戳。如果事件为 NULL，则将使用GDK_CURRENT_TIME。但是，您应该尝试在所有情况下传递真实事件，因为可以使用该事件来获取有关拖动的信息。通常有三种情况，当您想要通过调用此功能来手动启动拖动时：在处理程序期间，如果要在用户按下鼠标按钮时立即启动拖动。传递处理程序中的事件。在处理程序期间，如果要在按下按钮后鼠标移动超过特定阈值距离时启动拖动。传递处理程序中的事件。在超时处理程序期间，如果要在按住鼠标按钮一段时间后开始拖动。尝试使用gdk_event_copy（）保存从鼠标中获取的最后一个事件，并将其传递给此函数（完成后请记住使用gdk_event_free（）释放事件）。如果您真的无法通过真实事件，请改用。?button-press-event??button-press-event??motion-notify-event??motion-notify-event?NULL
语法
参数
widget- 源小部件。
targets- 来源可以提供数据的目标（数据格式）。
actions- 此拖动允许的拖动操作的位掩码。
button- 用户单击以开始拖动的按钮。
event- 触发拖动开始的事件。
x- 从小部件的坐标空间中开始拖动的初始 x 坐标。如果传递 -1，则从事件或当前指针位置检索坐标。
y- 从小部件的坐标空间中开始拖动的初始 y 坐标。如果传递 -1，则从事件或当前指针位置检索坐标。
返回
此拖动的上下文。[无转移]
自 3.10 起
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_check_threshold ----

gtk_drag_check_threshold
语法
参数
widget- 一GtkWidget
start_x- X坐标的开始拖动
start_y- 拖动开始的Y坐标
current_x- 当前 X 坐标
current_y- 当前Y坐标
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_add_image_targets ----

gtk_drag_dest_add_image_targets
语法
参数
widget- 一个拖曳的目的地GtkWidget
自 2.6 起
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_add_text_targets ----

gtk_drag_dest_add_text_targets
语法
参数
widget- 一个拖曳的目的地GtkWidget
自 2.6 起
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_add_uri_targets ----

gtk_drag_dest_add_uri_targets
语法
参数
widget- 一个拖曳的目的地GtkWidget
自 2.6 起
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_find_target ----

gtk_drag_dest_find_target
语法
参数
widget- 拖动目标小部件
context- 拖动上下文
target_list- 可放置目标列表，或 NULL 以usegtk_drag_dest_get_target_list（小部件）。[允许-无]
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_get_target_list ----

gtk_drag_dest_get_target_list
璇硶
鍙傛暟
widget- 涓€GtkWidget
鍙﹁鍙傝
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_get_track_motion ----

gtk_drag_dest_get_track_motion
语法
参数
widget- 一个拖曳的目的地GtkWidget
自 2.10 起
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_set ----

gtk_drag_dest_set
Syntax
Parameters
widget  -  	a GtkWidget
flags  -  	which types of default drag behavior to use
targets  -  	 a pointer to an array of indicating the drop types that this widgetwill accept, or NULL.Later you can access the list with gtk_drag_dest_get_target_list()and gtk_drag_dest_find_target(). [allow-none][array length=n_targets]GtkTargetEntrys
n_targets  -  	the number of entries in targets
actions  -  	a bitmask of possible actions for a drop onto this widget.
See Also
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_set_proxy ----

gtk_drag_dest_set_proxy
语法
参数
widget- 一GtkWidget
proxy_window- 将事件向前拖动到的窗口
protocol- proxy_windowaccepts拖动协议（您可以使用gdk_drag_get_protocol（）来确定这一点）
use_coordinates- 如果为 TRUE，则将相同的坐标发送到目的地，因为它是嵌入式子窗口。
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_set_target_list ----

gtk_drag_dest_set_target_list
语法
参数
widget- 一个拖曳的目的地GtkWidget
target_list- 可丢弃目标的列表，或 NULL 表示无。[允许-无]
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_set_track_motion ----

gtk_drag_dest_set_track_motion
语法
参数
widget- 一个拖曳的目的地GtkWidget
track_motion- 是否接受所有目标
自 2.10 起
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_dest_unset ----

gtk_drag_dest_unset
璇硶
鍙傛暟
widget- 涓€GtkWidget
鍙﹁鍙傝
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_finish ----

gtk_drag_finish
语法
参数
context- 拖动上下文。
success- 指示放置是否成功的标志
del- 指示源是否应删除原始数据的标志。（对于移动，这应该是正确的）
time_- 信号的时间戳。?drag-drop?
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_get_data ----

gtk_drag_get_data
语法
参数
widget- 将接收信号的小部件。?drag-data-received?
context- 拖动上下文
target- 要检索的目标（数据的形式）。
time_- 用于检索数据的时间戳。这通常是在“或”信号中接收的时间。?drag-motion??drag-drop?
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_get_source_widget ----

gtk_drag_get_source_widget
语法
参数
context- 一个（目标侧）拖动上下文
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_highlight ----

gtk_drag_highlight
璇硶
鍙傛暟
widget- 涓€涓皬閮ㄤ欢绐佸嚭鏄剧ず
鍙﹁鍙傝
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_set_icon_default ----

gtk_drag_set_icon_default
将特定拖动的图标设置为默认图标。
语法
参数
context- 拖动的上下文。（这必须与拖动的源端的上下文一起调用）
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_set_icon_gicon ----

gtk_drag_set_icon_gicon
设置给定图标中给定拖动的图标。有关在拖放中使用图标的更多详细信息，请参阅gtk_drag_set_icon_name（） 的文档。
语法
参数
context- 拖动的上下文。（这必须与拖动的源端的上下文一起调用）
icon- 一GIcon
hot_x- 图标内热点的 X 偏移量
hot_y- 图标内热点的 Y 偏移量
自 3.2 起
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_set_icon_name ----

gtk_drag_set_icon_name
设置从命名主题图标进行给定拖动的图标。有关更多详细信息，请参阅文档。请注意，图标的大小取决于图标主题（图标以符号大小加载），因此hot_x，并且必须谨慎使用hot_y。GtkIconThemeGTK_ICON_SIZE_DND
语法
参数
context- 拖动的上下文。（这必须与拖动的源端的上下文一起调用）
icon_name- 要使用的图标名称
hot_x- 图标内热点的 X 偏移量
hot_y- 图标内热点的 Y 偏移量
自 2.8 起
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_set_icon_pixbuf ----

gtk_drag_set_icon_pixbuf
将 pixbuf 设置为给定拖动的图标。
语法
参数
context- 拖动的上下文。（这必须与拖动的源端的上下文一起调用）
pixbuf- 用作拖动图标。GdkPixbuf
hot_x- 热点小部件内的 X 偏移量。
hot_y- 热点小部件内的 Y 偏移。
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_set_icon_stock ----

gtk_drag_set_icon_stock
gtk_drag_set_icon_stock自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_drag_set_icon_name（）。设置从股票 ID 进行给定拖动的图标。
语法
参数
context- 拖动的上下文。（这必须与拖动的源端的上下文一起调用）
stock_id- 用于拖动的库存图标的 ID。
hot_x- 热点图标内的 X 偏移量。
hot_y- 热点图标内的 Y 偏移量。
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_set_icon_surface ----

gtk_drag_set_icon_surface
将表面设置为给定拖动的图标。GTK+ 保留参数的引用，并在不再需要它们时释放它们。要相对于鼠标定位曲面，请在曲面上usecairo_surface_set_device_offset（）。鼠标游标将位于表面的 （0，0） 坐标处。
语法
参数
context- 拖动的上下文。（这必须与拖动的源端的上下文一起调用）
surface- 用作图标的表面
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_set_icon_widget ----

gtk_drag_set_icon_widget
将微件的图标更改为给定的构件。GTK+不会破坏图标，所以如果你不想坚持下去，你应该连接到？drag-end？发出信号并自己销毁它。
语法
参数
context- 拖动的上下文。（这必须与拖动的源端的上下文一起调用）
widget- 一个可用作图标的超豪华窗口。
hot_x- 热点小部件内的 X 偏移量。
hot_y- 热点小部件内的 Y 偏移。
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_add_image_targets ----

gtk_drag_source_add_image_targets
语法
参数
widget- a that？s 是一个拖动源GtkWidget
自 2.6 起
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_add_text_targets ----

gtk_drag_source_add_text_targets
将 支持的文本目标添加到拖动源的目标列表中。目标的添加信息 = 0。如果需要其他值，请使用 gtk_target_list_add_text_targets（） andgtk_drag_source_set_target_list（）。GtkSelection
语法
参数
widget- a that？s 是一个拖动源GtkWidget
自 2.6 起
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_add_uri_targets ----

gtk_drag_source_add_uri_targets
语法
参数
widget- a that？s 是一个拖动源GtkWidget
自 2.
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_get_target_list ----

gtk_drag_source_get_target_list
语法
参数
widget- 一GtkWidget
2.4 起
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_set ----

gtk_drag_source_set
语法
参数
widget- 一GtkWidget
start_button_mask- 可以开始拖动的按钮的位掩码
targets- 拖动将支持的目标表，可能为 NULL。[允许-无][数组长度 = n_targets]
n_targets- 目标中的项目数
actions- 从此小部件拖动的可能操作的位掩码
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_set_icon_gicon ----

gtk_drag_source_set_icon_gicon
设置将用于从特定源到图标拖动的图标。有关更多详细信息，请参阅文档。GtkIconTheme
语法
参数
widget- 一GtkWidget
icon- 一GIcon
自 3.2 起
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_set_icon_name ----

gtk_drag_source_set_icon_name
设置将用于从特定源拖动到主题图标的图标。有关更多详细信息，请参阅文档。GtkIconTheme
语法
参数
widget- 一GtkWidget
icon_name- 要使用的图标名称
自 2.8 起
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_set_icon_pixbuf ----

gtk_drag_source_set_icon_pixbuf
璇硶
鍙傛暟
widget- 涓€GtkWidget
pixbuf- 鐢ㄤ簬鎷栧姩鍥炬爣GdkPixbuf
鍙﹁鍙傝
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_set_icon_stock ----

gtk_drag_source_set_icon_stock
gtk_drag_source_set_icon_stock自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_drag_source_set_icon_name（）。设置将用于从特定源拖动到常用图标的图标。
语法
参数
widget- 一GtkWidget
stock_id- 要使用的股票图标的ID
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_set_target_list ----

gtk_drag_source_set_target_list
语法
参数
widget- 一个拖拽源GtkWidget
target_list- 可拖动目标的列表，或 NULL 表示无。[允许-无]
2.4 起
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_source_unset ----

gtk_drag_source_unset
璇硶
鍙傛暟
widget- 涓€GtkWidget
鍙﹁鍙傝
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drag_unhighlight ----

gtk_drag_unhighlight
语法
参数
widget- 一个小部件，从中删除高亮。
另请参见
gtk3-Drag-and-Drop


------------ KeyGTK3gtk_drawing_area_new ----

gtk_drawing_area_new
创建新的绘图区域。
返回
一个新的GtkDrawingArea[/code
See Also
GtkDrawingArea


------------ KeyGTK3gtk_draw_insertion_cursor ----

gtk_draw_insertion_cursor
gtk_draw_insertion_cursor自 3.4 版起已弃用，不应在新编写的代码中使用。请改用 gtk_render_insertion_cursor（）。在位置的 cr 上绘制文本插入符号。这不是一个样式函数，而只是绘制标准光标形状的便利函数。
语法
参数
widget- 一GtkWidget
cr- 开罗语境来画
location- 绘制光标的位置（位置>忽略的宽度）
is_primary- 如果光标应该是主光标颜色。
direction- 光标是从左到右还是从右到左。永远不应该GTK_TEXT_DIR_NONE
draw_arrow- TRUE 在游标上绘制方向箭头。应为 FALSE，除非游标已拆分。
自 3.0 起
另请参见
GtkStyle


------------ KeyGTK3gtk_editable_copy_clipboard ----

gtk_editable_copy_clipboard
复制可编辑中当前选定内容的内容，并将其放在剪贴板上。
语法
参数
editable- 一GtkEditable
另请参见
GtkEditable


------------ KeyGTK3gtk_editable_cut_clipboard ----

gtk_editable_cut_clipboard
删除可编辑中当前所选内容的内容，并将其放在剪贴板上。
语法
参数
editable- 一GtkEditable
另请参见
GtkEditable


------------ KeyGTK3gtk_editable_delete_selection ----

gtk_editable_delete_selection
删除可编辑的当前选定文本。如果没有选定的文本，则此调用不会执行任何操作。
语法
参数
editable- 一GtkEditable
另请参见
GtkEditable


------------ KeyGTK3gtk_editable_delete_text ----

gtk_editable_delete_text
删除一系列字符。删除的字符是介于start_pos到（但不包括end_pos）的位置的字符。如果end_pos为负数，则删除的字符是从start_pos到文本末尾的字符。请注意，位置以字符而不是字节为单位指定。
语法
参数
editable- 一GtkEditable
start_pos- 起始位置
end_pos- 结束位置
另请参见
GtkEditable


------------ KeyGTK3gtk_editable_get_chars ----

gtk_editable_get_chars
检索字符序列。检索到的字符是位于从start_pos到（但不包括end_pos）的位置的字符。如果end_pos为负数，则删除的字符是从start_pos到文本末尾的字符。请注意，位置以字符而不是字节为单位指定。
语法
参数
editable- 一GtkEditable
start_pos- 文本开头
end_pos- 文本结尾
返回
指向小部件内容的指针作为字符串。此字符串由实现分配，应由调用方释放。GtkEditable
另请参见
GtkEditable


------------ KeyGTK3gtk_editable_get_editable ----

gtk_editable_get_editable
妫€绱㈠彲缂栬緫鏄惁鍙紪杈戙€係eegtk_editable_set_editable锛堬級.
璇硶
鍙傛暟
editable- 涓€GtkEditable
杩斿洖
濡傛灉鍙紪杈戜负鐪熷彲缂栬緫
鍙﹁鍙傝
GtkEditable


------------ KeyGTK3gtk_editable_get_position ----

gtk_editable_get_position
检索游标相对于可编辑内容的起始位置的当前位置。请注意，此位置以字符为单位，而不是以字节为单位。
语法
参数
editable- 一GtkEditable
返回
光标位置
另请参见
GtkEditable


------------ KeyGTK3gtk_editable_get_selection_bounds ----

gtk_editable_get_selection_bounds
检索可编辑的选区边界。start_pos将填充选择的开始，并以结束end_pos。如果未选择任何文本，则两者将相同，并且将返回 FALSE。请注意，位置以字符而不是字节为单位指定。
语法
参数
editable- 一GtkEditable
start_pos- 存储起始位置的位置，或 NULL。[输出][允许-无]
end_pos- 存储结束位置的位置，或 NULL。[输出][允许-无]
返回
如果选择了某个区域，则为 TRUE，否则为 FALSE
另请参见
GtkEditable


------------ KeyGTK3gtk_editable_insert_text ----

gtk_editable_insert_text
Inserts new_text_length bytes of new_text into the contents of thewidget, at position position.Note that the position is in characters, not in bytes. The function updates position to point after the newly inserted text.
Syntax
Parameters
editable  -  	a GtkEditable
new_text  -  	the text to append
new_text_length  -  	the length of the text in bytes, or -1
position  -  	 location of the position text will be inserted at. [inout]
See Also
GtkEditable


------------ KeyGTK3gtk_editable_paste_clipboard ----

gtk_editable_paste_clipboard
将剪贴板的内容粘贴到可编辑中游标的当前位置。
语法
参数
editable- 一GtkEditable
另请参见
GtkEditable


------------ KeyGTK3gtk_editable_select_region ----

gtk_editable_select_region
选择文本区域。选择的字符是位于从start_pos到（但不包括end_pos）的位置的字符。如果end_pos为负数，则选择的字符是从start_pos到文本末尾的字符。请注意，位置以字符而不是字节为单位指定。
语法
参数
editable- 一GtkEditable
start_pos- 区域开始
end_pos- 区域末期
另请参见
GtkEditable


------------ KeyGTK3gtk_editable_set_editable ----

gtk_editable_set_editable
确定用户是否可以编辑可编辑小道中的文本。
语法
参数
editable- 一GtkEditable
is_editable- TRUE，如果允许用户编辑小部件中的文本
另请参见
GtkEditable


------------ KeyGTK3gtk_editable_set_position ----

gtk_editable_set_position
将可编辑的光标位置设置为给定值。光标显示在可编辑内容中具有给定（基数为 0）索引的字符之前。该值必须小于或等于可编辑中的字符数。值 -1 表示位置应设置在可编辑的最后一个字符之后。请注意，位置以字符为单位，而不是以字节为单位。
语法
参数
editable- 一GtkEditable
position- 光标的位置
另请参见
GtkEditable


------------ KeyGTK3gtk_entry_buffer_delete_text ----

gtk_entry_buffer_delete_text
从缓冲区中删除一系列字符。n_chars字符从位置开始删除。如果n_chars为负数，则删除文本末尾的所有字符。如果位置或n_chars超出界限，那么他们就会被迫进行评估。请注意，位置以字符而不是字节为单位指定。
语法
参数
buffer- 一GtkEntryBuffer
position- 删除文本的位置
n_chars- 要删除的字符数
返回
删除的字符数。
自 2.18 起
另请参见
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_emit_deleted_text ----

gtk_entry_buffer_emit_deleted_text
在子类化时使用GtkEntryBuffer
语法
参数
buffer- 一GtkEntryBuffer
position- 删除文本的位置
n_chars- 删除的字符数
自 2.18 起
另请参见
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_emit_inserted_text ----

gtk_entry_buffer_emit_inserted_text
在子类化时使用GtkEntryBuffer
语法
参数
buffer- 一GtkEntryBuffer
position- 插入文本的位置
chars- 插入的文本
n_chars- 插入的字符数
自 2.1 起
另请参见
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_get_bytes ----

gtk_entry_buffer_get_bytes
检索缓冲区的长度（以字节为单位）。请参见gtk_entry_buffer_get_length（）。
语法
参数
buffer- 一GtkEntryBuffer
返回
缓冲区的字节长度。
自 2.18 起
另请参见
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_get_length ----

gtk_entry_buffer_get_length
检索缓冲区的长度（以字符为单位）。
语法
参数
buffer- 一GtkEntryBuffer
返回
缓冲区中的字符数。
自 2.18 起
另请参见
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_get_max_length ----

gtk_entry_buffer_get_max_length
检索文本缓冲区的最大允许长度。请参见gtk_entry_buffer_set_max_length（）。
语法
参数
buffer- 一GtkEntryBuffer
返回
允许的最大字符数in，如果没有最大值，则为 0。GtkEntryBuffer
自 2.18 起
另请参见
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_get_text ----

gtk_entry_buffer_get_text
检索缓冲区的内容。此调用返回的内存指针不会更改此对象发出信号或完成。
语法
参数
buffer- 一GtkEntryBuffer
返回
指向小部件内容的指针作为字符串。此字符串指向缓冲区中内部分配的存储，不得释放、修改或存储。
自 2.18 起
另请参见
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_insert_text ----

gtk_entry_buffer_insert_text
将字符的n_chars字符插入到缓冲区的内容中，位于位置位置。如果n_chars为负数，则在找到空终止符之前，将插入字符中的字符。如果位置或n_chars出站，或者超出了最大缓冲区文本长度，则它们将遵循合理的值。请注意，位置和长度以字符为单位，而不是以字节为单位。
语法
参数
buffer- 一GtkEntryBuffer
position- 插入文本的位置。
chars- 要插入到缓冲区中的文本。
n_chars- 以字符为单位的文本长度，或 -1
返回
实际插入的字符数。
自 2.18 起
另请参见
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_new ----

gtk_entry_buffer_new
创建一个新的 GtkEntryBuffer 对象。（可选）指定要在缓冲区中设置的初始文本。
语法
参数
initial_chars- 初始缓冲区文本，或 NULL。[允许-无]
n_initial_chars- initial_chars中的字符数，或 -1
返回
一个新的 GtkEntryBuffer 对象。
自 2.18 起
另请参见
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_set_max_length ----

gtk_entry_buffer_set_max_length
Sets the maximum allowed length of the contents of the buffer. Ifthe current contents are longer than the given length, then theywill be truncated to fit.
Syntax
Parameters
buffer  -  	a GtkEntryBuffer
max_length  -  	the maximum length of the entry buffer, or 0 for no maximum.(other than the maximum length of entries.) The value passed in willbe clamped to the range 0-65536.
Since 2.18
See Also
GtkEntryBuffer


------------ KeyGTK3gtk_entry_buffer_set_text ----

gtk_entry_buffer_set_text
设置缓冲区中的文本。这大致相当于调用 gtk_entry_buffer_delete_text（） 和 gtk_entry_buffer_insert_text（）。请注意，n_chars以字符为单位，而不是以字节为单位。
语法
参数
buffer- 一GtkEntryBuffer
chars- 新文本
n_chars- 文本中的字符数，或 -1
自 2.18 起
另请参见
GtkEntryBuffer


------------ KeyGTK3gtk_entry_completion_complete ----

gtk_entry_completion_complete
请求完成操作，或者换句话说，使用当前键使用完成来重新映射当前列表。完成列表视图将相应地更新。
语法
参数
completion- 一GtkEntryCompletion
2.4 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_compute_prefix ----

gtk_entry_completion_compute_prefix
计算由完成中以 key 开头的所有行共享的公共前缀。如果没有与键匹配的行，则返回 NULL。请注意，必须设置文本列才能使此函数正常工作，有关详细信息，请参阅gtk_entry_completion_set_text_column（）。
语法
参数
completion- 输入完成
key- 要完成的文本
返回
通用前缀 all 行都以键或 NULL 开头，如果没有与键匹配的行。[转移完整]
自 3.4 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_delete_action ----

gtk_entry_completion_delete_action
从完成的操作列表中删除index_处的操作。
语法
参数
completion- 一GtkEntryCompletion
index_- 要删除的项目的索引
2.4 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_completion_prefix ----

gtk_entry_completion_get_completion_prefix
Get the original text entered by the user that triggeredthe completion or NULL if there?s no completion ongoing.
Syntax
Parameters
completion  -  	a GtkEntryCompletion
Returns
the prefix for the current completion
Since 2.12
See Also
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_entry ----

gtk_entry_completion_get_entry
获取已附加到的条目完成。
语法
参数
completion- 一GtkEntryCompletion
返回
条目完成已附加到。[无转移]
2.4 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_inline_completion ----

gtk_entry_completion_get_inline_completion
返回是否应自动在条目中插入可能的完成项的公共前缀。
语法
参数
completion- 一GtkEntryCompletion
返回
如果串联完成已打开，则为 TRUE
自 2.6 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_inline_selection ----

gtk_entry_completion_get_inline_selection
如果内联选择模式处于打开状态，则返回 TRUE。
语法
参数
completion- 一GtkEntryCompletion
返回
如果内联选择模式处于打开状态，则为 TRUE
自 2.12 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_minimum__length ----

gtk_entry_completion_get_minimum_key_length
gtk_entry_completion_get_minimum_key_length?()
Returns the minimum key length as set for completion.
Syntax
Parameters
completion  -  	a GtkEntryCompletion
Returns
The currently used minimum key length
Since 2.4
See Also
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_model ----

gtk_entry_completion_get_model
Returns NULL if the model is unset.
Syntax
Parameters
completion  -  	a GtkEntryCompletion
Returns
A , or NULL if noneis currently being used. [transfer none]GtkTreeModel
Since 2.4
See Also
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_popup_completion ----

gtk_entry_completion_get_popup_completion
返回是否应在弹出窗口中显示完成。
语法
参数
completion- 一GtkEntryCompletion
返回
如果弹出窗口完成功能已打开，则为 TRUE
自 2.6 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_popup_set_width ----

gtk_entry_completion_get_popup_set_width
返回是否将完成弹出窗口的大小调整为条目的宽度。
语法
参数
completion- 一GtkEntryCompletion
返回
如果弹出窗口的大小将调整为条目的宽度，则为 TRUE
自 2.8 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_popup_single_match ----

gtk_entry_completion_get_popup_single_match
返回即使只有一个匹配项，是否也会显示完成弹出窗口。
语法
参数
completion- 一GtkEntryCompletion
返回
如果弹出窗口将出现而不考虑匹配项的数量，则为 TRUE
自 2.
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_get_text_column ----

gtk_entry_completion_get_text_column
返回完成模型中要从中获取字符串的列。
语法
参数
completion- 一GtkEntryCompletion
返回
包含字符串的列
自 2.6 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_insert_action_markup ----

gtk_entry_completion_insert_action_markup
在完成的措施项列表中的标记标记标记位置index_with插入动作。
语法
参数
completion- 一GtkEntryCompletion
index_- 要插入的项目的索引
markup- 要插入的项目的标记
2.4 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_insert_action_text ----

gtk_entry_completion_insert_action_text
在完成措施项列表中的文本文本位置插入index_with动作。如果希望措施项具有标记，usegtk_entry_completion_insert_action_markup（）。
语法
参数
completion- 一GtkEntryCompletion
index_- 要插入的项目的索引
text- 要插入的项目的文本
2.4 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_insert_prefix ----

gtk_entry_completion_insert_prefix
请求前缀插入。
语法
参数
completion- 一GtkEntryCompletion
自 2.6 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_new ----

gtk_entry_completion_new
创建新对象。GtkEntryCompletion
返回
新创建的对象GtkEntryCompletion
2.4 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_new_with_area ----

gtk_entry_completion_new_with_area
使用指定的区域创建新对象，以在下拉菜单的基础中布局单元格。GtkEntryCompletionGtkTreeViewColumn
语法
参数
area- 用于布局单元格GtkCellArea
返回
新创建的对象GtkEntryCompletion
自 3.0 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_inline_completion ----

gtk_entry_completion_set_inline_completion
设置是否应自动在条目中插入可能的完成项的公共前缀。
语法
参数
completion- 一GtkEntryCompletion
inline_completion- TRUE 执行内联完成
自 2.6 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_inline_selection ----

gtk_entry_completion_set_inline_selection
设置是否可以在条目内循环完成可能的完成。
语法
参数
completion- 一GtkEntryCompletion
inline_selection- TRUE做内联选择
自 2.12 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_match_func ----

gtk_entry_completion_set_match_func
将完成匹配函数设置为 func。匹配函数用于确定某一行是否应在完成列表中。
语法
参数
completion- 一GtkEntryCompletion
func- 使用GtkEntryCompletionMatchFunc
func_data- 功能的用户数据
func_notify- func_data销毁通知。
2.4 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_minimum__length ----

gtk_entry_completion_set_minimum_key_length
gtk_entry_completion_set_minimum_key_length?()
要求完成搜索键的长度至少为长度。这对于长列表很有用，其中使用小键完成需要花费大量时间，并且无论如何都会得出无意义的结果（即，数据集太大）。
语法
参数
completion- 一GtkEntryCompletion
length- 密钥的最小长度，以便开始完成
2.4 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_model ----

gtk_entry_completion_set_model
设置 的模型。如果已完成已设置模型，则会在设置新模型之前将其删除。如果模型为 NULL，则它将取消设置模型。GtkEntryCompletion
语法
参数
completion- 一GtkEntryCompletion
model- .[允许-无]GtkTreeModel
2.4 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_popup_completion ----

gtk_entry_completion_set_popup_completion
设置是否应在弹出窗口中显示完成。
语法
参数
completion- 一GtkEntryCompletion
popup_completion- 真做弹出完成
自 2.6 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_popup_set_width ----

gtk_entry_completion_set_popup_set_width
设置是否将完成弹出窗口的大小调整为与条目相同的宽度。
语法
参数
completion- 一GtkEntryCompletion
popup_set_width- TRUE 使弹出窗口的宽度与条目相同
自 2.8 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_popup_single_match ----

gtk_entry_completion_set_popup_single_match
设置即使只有一个匹配项，是否也会显示完成弹出窗口。如果您使用的是内联完成，则可能需要将其设置为 FALSE。
语法
参数
completion- 一GtkEntryCompletion
popup_single_match- 如果弹出窗口即使对于单个匹配项也应该显示，则为 TRUE
自 2.8 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_completion_set_text_column ----

gtk_entry_completion_set_text_column
用于设置此代码最常用情况的便利函数：仅包含字符串的完整列表。此函数将设置完成，以具有一个显示完成列表中所有（和仅）字符串的列表，并从完成模型中的列中获取这些字符串。此函数为所选列创建并添加 。如果需要设置文本列，但不需要 cellrenderer，请使用 g_object_set（） 直接设置属性。GtkCellRendererText?text-column?
语法
参数
completion- 一GtkEntryCompletion
column- 完成模型中的列，用于从中获取字符串
2.4 起
另请参见
GtkEntryCompletion


------------ KeyGTK3gtk_entry_get_activates_default ----

gtk_entry_get_activates_default
检索由 gtk_entry_set_activates_default（） 设置的值。
语法
参数
entry- 一GtkEntry
返回
如果条目将激活默认小部件，则为 TRUE
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_alignment ----

gtk_entry_get_alignment
获取由 gtk_entry_set_alignment（） 设置的值。
语法
参数
entry- 一GtkEntry
返回
对齐方式
2.4 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_attributes ----

gtk_entry_get_attributes
获取在条目usinggtk_entry_set_attributes（） 上设置的属性列表（如果有）。
语法
参数
entry- 一GtkEntry
返回
属性列表，或 NULLif 未设置。[无转移]
3.6 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_buffer ----

gtk_entry_get_buffer
获取保存文本的对象是小部件。GtkEntryBuffer
语法
参数
entry- 一GtkEntry
返回
对象。[无转移]GtkEntryBuffer
自 2.18 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_completion ----

gtk_entry_get_completion
Returns the auxiliary completion object currently in use by entry.
Syntax
Parameters
entry  -  	A GtkEntry
Returns
The auxiliary completion object currentlyin use by entry. [transfer none]
Since 2.4
See Also
GtkEntry


------------ KeyGTK3gtk_entry_get_current_icon_drag_source ----

gtk_entry_get_current_icon_drag_source
Returns the index of the icon which is the source of the currentDND operation, or -1.This function is meant to be used in a callback.?drag-data-get?
Syntax
Parameters
entry  -  	a GtkEntry
Returns
index of the icon which is the source of the currentDND operation, or -1.
Since 2.16
See Also
GtkEntry


------------ KeyGTK3gtk_entry_get_cursor_hadjustment ----

gtk_entry_get_cursor_hadjustment
检索条目的水平光标调整。请参见gtk_entry_set_cursor_hadjustment（）。
语法
参数
entry- 一GtkEntry
返回
水平光标调整，或 NULLif 未设置任何设置。[无转移]
自 2.12 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_has_frame ----

gtk_entry_get_has_frame
获取由 gtk_entry_set_has_frame（） 设置的值。
语法
参数
entry- 一GtkEntry
返回
条目是否具有斜角框架
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_activatable ----

gtk_entry_get_icon_activatable
返回图标是否可激活。
语法
参数
entry- 一GtkEntry
icon_pos- 图标位置
返回
如果图标是可激活的，则为 TRUE。
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_area ----

gtk_entry_get_icon_area
获取在icon_pos处绘制条目图标的区域。当在绘制回调中将某些内容绘制到条目时，此函数很有用。如果条目未实现或在给定位置没有图标，则icon_area用零填充。另请参见 gtk_entry_get_text_area（）
语法
参数
entry- 一GtkEntry
icon_pos- 图标位置
icon_area- 返回图标区域的位置。[输出]
自 3.0 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_at_pos ----

gtk_entry_get_icon_at_pos
查找给定位置处的图标并返回其索引。位置的坐标相对于条目的左上角。如果 x， y 不在图标内，则返回 -1。此函数旨在用于信号处理程序。?query-tooltip?
语法
参数
entry- 一GtkEntry
x- 要查找的位置的 x 坐标
y- 要查找的位置的 y 坐标
返回
给定位置处图标的索引，或 -1
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_gicon ----

gtk_entry_get_icon_gicon
Retrieves the  used for the icon, or NULL if there isno icon or if the icon was set by some other method (e.g., bystock, pixbuf, or icon name).GIcon
Syntax
Parameters
entry  -  	A GtkEntry
icon_pos  -  	Icon position
Returns
A , or NULL if no icon is setor if the icon is not a . [transfer none]GIconGIcon
Since 2.16
See Also
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_name ----

gtk_entry_get_icon_name
检索用于图标的图标名称，如果没有图标，或者如果图标是由其他方法（例如，bypixbuf、stock 或 gicon）设置的，则检索 NULL。
语法
参数
entry- 一GtkEntry
icon_pos- 图标位置
返回
图标名称，如果未设置图标，或者如果图标不是从图标名称设置的，则为 NULL
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_pixbuf ----

gtk_entry_get_icon_pixbuf
检索用于图标的图像。与设置和获取图标数据的其他方法不同，无论图标是使用、、股票项目还是图标名称设置的，此方法都可以使用。GdkPixbufGIcon
语法
参数
entry- 一GtkEntry
icon_pos- 图标位置
返回
如果没有为此位置设置图标，则为 NULL。[无转移]GdkPixbuf
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_sensitive ----

gtk_entry_get_icon_sensitive
返回图标是显示为敏感还是不敏感。
语法
参数
entry- 一GtkEntry
icon_pos- 图标位置
返回
如果图标敏感，则为 TRUE。
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_stock ----

gtk_entry_get_icon_stock
gtk_entry_get_icon_stock自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_entry_get_icon_name（）。检索用于图标的库存 ID，如果没有图标，或者如果图标是由其他方法（例如，bypixbuf、图标名称或 gicon）设置的，则检索 NULL。
语法
参数
entry- 一GtkEntry
icon_pos- 图标位置
返回
股票 ID，如果未设置图标，或者如果图标不是从股票 ID 设置的，则为 NULL
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_storage_type ----

gtk_entry_get_icon_storage_type
获取 icon 用于存储图像数据的表示形式类型。如果图标没有图像数据，则返回值将GTK_IMAGE_EMPTY。
语法
参数
entry- 一GtkEntry
icon_pos- 图标位置
返回
正在使用的图像表示
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_tooltip_markup ----

gtk_entry_get_icon_tooltip_markup
获取入口中指定位置的图标上工具提示的内容。
语法
参数
entry- 一GtkEntry
icon_pos- 图标位置
返回
工具提示文本，或 NULL。完成后，使用g_free（） 释放返回的字符串。
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_icon_tooltip_text ----

gtk_entry_get_icon_tooltip_text
获取入口中指定位置的图标上工具提示的内容。
语法
参数
entry- 一GtkEntry
icon_pos- 图标位置
返回
工具提示文本，或 NULL。完成后，使用g_free（） 释放返回的字符串。
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_inner_border ----

gtk_entry_get_inner_border
gtk_entry_get_inner_border自 3.4 版起已弃用，不应在新编写的代码中使用。使用标准边框和填充 CSS 属性（通过和 ）等对象此函数返回的值将被 忽略。此函数返回条目的属性。Seegtk_entry_set_inner_border（） 了解更多信息。GtkStyleContextGtkCssProviderGtkEntry?inner-border?
语法
参数
entry- 一GtkEntry
返回
该条目 ，如果未设置任何条目，则为 NULL。[无转移]GtkBorder
自 2.10 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_input_hints ----

gtk_entry_get_input_hints
获取属性的值。?input-hints?
语法
参数
entry- 一GtkEntry
自 3.
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_input_purpose ----

gtk_entry_get_input_purpose
获取属性的值。?input-purpose?
语法
参数
entry- 一GtkEntry
3.6 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_invisible_char ----

gtk_entry_get_invisible_char
检索显示的字符，以代替可见性设置为 false 的条目的真实字符。请参见gtk_entry_set_invisible_char（）。
语法
参数
entry- 一GtkEntry
返回
当前不可见字符，或 0（如果条目根本不显示不可见文本）。
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_layout ----

gtk_entry_get_layout
获取用于显示条目的 。该布局可用于例如将文本位置转换为像素位置，并结合gtk_entry_get_layout_offsets（）。返回的布局归条目所有，调用方不得修改或释放该布局。请记住，布局文本可能包含 preedit 字符串，sogtk_entry_layout_index_to_text_index（） andgtk_entry_text_index_to_layout_index（） 需要将布局中的字节索引转换为条目内容中的字节索引。PangoLayout
语法
参数
entry- 一GtkEntry
返回
对于此条目。[无转移]PangoLayout
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_layout_offsets ----

gtk_entry_get_layout_offsets
获取用于在条目中呈现文本的 窗口小部件坐标中的位置。如果要将条目中的文本与其他文本对齐，例如，当使用theentry在工作表小部件中实现可编辑单元格时，非常有用。将鼠标事件转换为内部坐标也很有用，例如，如果单击了输入文本的某些部分，则采取某些操作。请注意，当用户在条目中滚动时，偏移量将发生变化;您需要连接到 “notify：：scroll-offset” 信号来跟踪此情况。请记住，在使用需要与像素（usingPANGO_PIXELS（） 或 usingPANGO_PIXELS） 进行转换的函数时。请记住，布局文本可能包含 preedit 字符串，sogtk_entry_layout_index_to_text_index（） andgtk_entry_text_index_to_layout_index（） 需要将布局中的字节索引转换为条目内容中的字节索引。PangoLayoutPangoLayoutPangoLayoutPANGO_SCALE
语法
参数
entry- 一GtkEntry
x- 存储布局的 X 偏移量的位置，或 NULL。[输出][允许-无]
y- 存储布局的 Y 偏移量或 NULL 的位置。[输出][允许-无]
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_max_length ----

gtk_entry_get_max_length
检索文本输入的最大允许长度。请参见gtk_entry_set_max_length（）。这相当于： 123[/语法] [语法]GtkEntryBuffer *buffer;buffer = gtk_entry_get_buffer （entry）;gtk_entry_buffer_get_max_length （buffer）;[/语法]
语法
参数
entry- 一GtkEntry
返回
允许的最大字符数in，如果没有最大值，则为 0。GtkEntry
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_max_width_chars ----

gtk_entry_get_max_width_chars
检索所需的最大条目宽度（以字符为单位）。请参见gtk_entry_set_max_width_chars（）。
语法
参数
entry- 一GtkEntry
返回
条目的最大宽度，以字符为单位
自 3.12 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_overwrite_mode ----

gtk_entry_get_overwrite_mode
获取由 gtk_entry_set_overwrite_mode（） 设置的值。
语法
参数
entry- 一GtkEntry
返回
键入时文本是否被覆盖。
自 2.14 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_placeholder_text ----

gtk_entry_get_placeholder_text
检索当条目为空且未聚焦时将显示的文本
语法
参数
entry- 一GtkEntry
返回
指向以字符串形式存在的占位符文本的指针。此字符串指向小部件中内部分配的存储，不得释放、修改或存储。
自 3.2 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_progress_fraction ----

gtk_entry_get_progress_fraction
返回已完成任务的当前部分。请参见gtk_entry_set_progress_fraction（）。
语法
参数
entry- 一GtkEntry
返回
从 0.0 到 1.0 的分数
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_progress_pulse_step ----

gtk_entry_get_progress_pulse_step
Retrieves the pulse step set with gtk_entry_set_progress_pulse_step().
Syntax
Parameters
entry  -  	a GtkEntry
Returns
a fraction from 0.0 to 1.0
Since 2.16
See Also
GtkEntry


------------ KeyGTK3gtk_entry_get_tabs ----

gtk_entry_get_tabs
获取使用 gtk_entry_set_tabs（）， ifany 在条目上设置的制表位。
语法
参数
entry- 一GtkEntry
返回
制表位，如果未设置任何制表符，则为 NULL。[无转移]
自 3.10 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_text ----

gtk_entry_get_text
检索条目构件的内容。另请参见 gtk_editable_get_chars（）。这相当于： 123[/语法] [语法]GtkEntryBuffer *buffer;buffer = gtk_entry_get_buffer （entry）;gtk_entry_buffer_get_text （buffer）;[/语法]
语法
参数
entry- 一GtkEntry
返回
指向小部件内容的指针作为字符串。此字符串指向小部件中的内部分配存储，不得释放、修改或存储。
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_text_area ----

gtk_entry_get_text_area
获取绘制条目文本的区域。在绘制回调中的条目中绘制某些内容时，此函数很有用。如果未实现该条目，text_area将用零填充。另请参见 gtk_entry_get_icon_area（）。
语法
参数
entry- 一GtkEntry
text_area- 返回文本区域的位置。[输出]
自 3.0 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_text_length ----

gtk_entry_get_text_length
检索文本输入的当前长度。这相当于： 123[/语法] [语法]GtkEntryBuffer *buffer;buffer = gtk_entry_get_buffer （entry）;gtk_entry_buffer_get_length （buffer）;[/语法]
语法
参数
entry- 一GtkEntry
返回
当前字符数，如果没有，则为 0。GtkEntry
自 2.14 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_visibility ----

gtk_entry_get_visibility
检索条目中的文本是否可见。Seegtk_entry_set_visibility（）.
语法
参数
entry- 一GtkEntry
返回
如果文本当前可见，则为 TRUE
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_get_width_chars ----

gtk_entry_get_width_chars
Gets the value set by gtk_entry_set_width_chars().
Syntax
Parameters
entry  -  	a GtkEntry
Returns
number of chars to request space for, or negative if unset
See Also
GtkEntry


------------ KeyGTK3gtk_entry_im_context_filter_press ----

gtk_entry_im_context_filter_keypress
gtk_entry_im_context_filter_keypress?()
允许输入法在内部处理按键和释放事件。如果此函数返回 TRUE，则不应对此关键事件执行进一步处理。Seegtk_im_context_filter_keypress（）.请注意，在重写密钥事件处理时，您需要从处理程序调用此函数。当您需要在 输入法和 的默认键事件处理之间插入自己的键处理时，需要这样做。有关使用示例，请参见 gtk_text_view_reset_im_context（）。GtkEntryGtkEntry
语法
参数
entry- 一GtkEntry
event- 关键事件。[类型 Gdk.EventKey]
返回
如果输入法处理键事件，则为 TRUE。
2.22 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_layout_index_to_text_index ----

gtk_entry_layout_index_to_text_index
从条目内容中的位置（由 gtk_entry_get_text（）返回）转换为条目中的位置（由 gtk_entry_get_layout（） 返回），文本通过 pango_layout_get_text（）） 检索）。PangoLayout
语法
参数
entry- 一GtkEntry
layout_index- 将字节索引放入条目布局文本
返回
输入内容的字节索引
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_new ----

gtk_entry_new
创建新条目。
返回
一个新的.GtkEntry
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_new_with_buffer ----

gtk_entry_new_with_buffer
使用指定的文本缓冲区创建新条目。
语法
参数
buffer- 用于新 .GtkEntry
返回
一个新的GtkEntry
自 2.18 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_progress_pulse ----

gtk_entry_progress_pulse
表示取得了一些进展，但您不知道取得了多少进展。使条目的进度指示器进入“活动模式”，其中块来回反弹。每次调用togtk_entry_progress_pulse（）都会导致块移动一点点（每个脉冲的移动量bygtk_entry_set_progress_pulse_step（））确定）。
语法
参数
entry- 一GtkEntry
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_reset_im_context ----

gtk_entry_reset_im_context
如果需要，重置条目的输入法上下文。在修改缓冲区会混淆正在进行的输入法行为的情况下，这可能是必要的。
语法
参数
entry- 一GtkEntry
2.22 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_activates_default ----

gtk_entry_set_activates_default
如果设置为 TRUE，则在条目中按 Enter 键将激活包含该条目的窗口的默认小路。这通常意味着包含该条目的对话框将关闭，因为默认小道通常是对话框按钮之一。（对于专家：如果设置为 TRUE，则条目在包含该条目的窗口上callsgtk_window_activate_default（） 在信号的默认处理程序中。?activate?
语法
参数
entry- 一GtkEntry
setting- TRUE 在 Enter 按键时激活窗口的默认小部件
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_alignment ----

gtk_entry_set_alignment
设置条目内容的对齐方式。当显示的文本短于条目的宽度时，这将控制内容的水平定位。
语法
参数
entry- 一GtkEntry
xalign- 水平对齐，从 0（左）到 1（右）。针对 RTL 布局反转
2.4 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_attributes ----

gtk_entry_set_attributes
设置 ;列表中的属性将应用于条目文本。PangoAttrList
语法
参数
entry- 一GtkEntry
attrs- 一PangoAttrList
3.6 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_buffer ----

gtk_entry_set_buffer
设置保存文本的对象是小部件。GtkEntryBuffer
语法
参数
entry- 一GtkEntry
buffer- 一GtkEntryBuffer
自 2.18 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_completion ----

gtk_entry_set_completion
Sets completion to be the auxiliary completion object to use with entry.All further configuration of the completion mechanism is done oncompletion using the  API. Completion is disabled ifcompletion is set to NULL.GtkEntryCompletion
Syntax
Parameters
entry  -  	A GtkEntry
completion  -  	 The  or NULL. [allow-none]GtkEntryCompletion
Since 2.4
See Also
GtkEntry


------------ KeyGTK3gtk_entry_set_cursor_hadjustment ----

gtk_entry_set_cursor_hadjustment
将调整与条目中的光标位置挂钩，以便在移动光标时滚动调整以显示该位置。有关获取调整的典型方法，请参阅 gtk_scrolled_window_get_hadjustment（）。调整必须以像素单位为单位，并且与条目处于同一坐标系中。
语法
参数
entry- 一GtkEntry
adjustment- 当光标移动时应进行调整的调整，或 NULL
自 2.12 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_has_frame ----

gtk_entry_set_has_frame
设置条目周围是否有斜角框架。
语法
参数
entry- 一GtkEntry
setting- 新值
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_activatable ----

gtk_entry_set_icon_activatable
设置图标是否可激活。
语法
参数
entry- 一GtkEntry
icon_pos- 图标位置
activatable- 如果图标应该是可激活的，则为 TRUE
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_drag_source ----

gtk_entry_set_icon_drag_source
在给定位置设置图标，以便 GTK+ 在用户单击并拖动图标时启动拖动操作。要处理拖动操作，您需要连接到通常（或可能）的信号，并使用gtk_entry_get_current_icon_drag_source（）inyy您的信号处理程序来查明拖动是否从图标开始。默认情况下，GTK+ 使用图标作为拖动图标。您可以使用信号设置其他图标。请注意，您必须使用 g_signal_connect_after（） 来确保信号处理程序在默认处理程序之后执行。?drag-data-get??drag-data-delete??drag-begin?
语法
参数
entry- 一GtkEntry
icon_pos- 图标位置
target_list- 可以提供数据的目标（数据格式）
actions- 允许的拖动操作的位掩码
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_from_gicon ----

gtk_entry_set_icon_from_gicon
设置条目中显示的图标位于当前图标主题的指定位置。如果图标未知，则“损坏的图像？图标将显示为不规则。如果 icon 为 NULL，则指定位置不会显示任何图标。
语法
参数
entry- 一GtkEntry
icon_pos- 设置图标的位置
icon- 要设置的图标，或 NULL。[允许-无]
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_from_icon_name ----

gtk_entry_set_icon_from_icon_name
设置条目中显示的图标位于当前图标主题的指定位置。如果图标名称未知，则“损坏的图像？图标将显示为不规则。如果icon_name为 NULL，则指定位置不会显示任何图标。
语法
参数
entry- 一GtkEntry
icon_pos- 设置图标的位置
icon_name- 图标名称，或 NULL。[允许-无]
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_from_pixbuf ----

gtk_entry_set_icon_from_pixbuf
使用像素插页设置在指定位置显示的图标。如果 pixbuf 为 NULL，则指定位置不会显示任何图标。
语法
参数
entry- 一GtkEntry
icon_pos- 图标位置
pixbuf- A 或空值。[允许-无]GdkPixbuf
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_from_stock ----

gtk_entry_set_icon_from_stock
gtk_entry_set_icon_from_stock自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_entry_set_icon_from_icon_name（）。设置条目中显示的图标，该图标位于库存图像的指定位置。如果stock_id为 NULL，则指定位置不会显示任何图标。
语法
参数
entry- 一GtkEntry
icon_pos- 图标位置
stock_id- 库存物料的名称，或 NULL。[允许-无]
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_sensitive ----

gtk_entry_set_icon_sensitive
设置指定图标的敏感度。
语法
参数
entry- 一GtkEntry
icon_pos- 图标位置
sensitive- 指定图标是应显示为敏感还是不敏感
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_tooltip_markup ----

gtk_entry_set_icon_tooltip_markup
将工具提示设置为指定位置处图标的工具提示的内容。工具提示假定使用 Pango 文本标记语言进行标记。对工具提示使用 NULL 可删除现有工具提示。另请参见 gtk_widget_set_tooltip_markup（） 和 gtk_entry_set_icon_tooltip_text（）。
语法
参数
entry- 一GtkEntry
icon_pos- 图标位置
tooltip- 图标的工具提示的内容，或 NULL。[允许-无]
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_icon_tooltip_text ----

gtk_entry_set_icon_tooltip_text
将工具提示设置为指定位置处的图标的工具提示的内容。对工具提示使用 NULL 可删除现有工具提示。另请参见 gtk_widget_set_tooltip_text（） 和 gtk_entry_set_icon_tooltip_markup（）。
语法
参数
entry- 一GtkEntry
icon_pos- 图标位置
tooltip- 图标的工具提示的内容，或 NULL。[允许-无]
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_inner_border ----

gtk_entry_set_inner_border
gtk_entry_set_inner_border自 3.4 版起已弃用，不应在新编写的代码中使用。使用标准边框和填充 CSS 属性（通过和 ）等对象使用此函数设置的值将被 忽略。将 entry 的内部边界属性设置为 border，或者在 NULLis 通过时清除它。内边框是条目文本周围的区域，但位于其框架的旁边。如果设置，此属性将覆盖内部边框样式属性。当您想要在画布或列表构件中对某些文本进行位置编辑时，覆盖样式提供的边框非常有用，其中条目的像素精确定位很重要。GtkStyleContextGtkCssProviderGtkEntry
语法
参数
entry- 一GtkEntry
border- a 或 NULL。[允许-无]GtkBorder
自 2.10 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_input_hints ----

gtk_entry_set_input_hints
设置属性，该属性允许输入方法微调其行为。?input-hints?
语法
参数
entry- 一GtkEntry
hints- 提示
3.6 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_input_purpose ----

gtk_entry_set_input_purpose
设置屏幕键盘和其他输入方法可用于调整其行为的属性。?input-purpose?
语法
参数
entry- 一GtkEntry
purpose- 目的
3.6 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_invisible_char ----

gtk_entry_set_invisible_char
设置要用来代替实际文本的字符 whengtk_entry_set_visibility（） 已调用，以将文本可见性设置为 FALSE。即，这是在密码模式下使用的字符？向用户显示已键入的字符数。默认情况下，GTK+ 会选取当前字体中可用的最佳不可见字符。如果将不可见字符设置为0，则用户将完全不会得到任何反馈;当他们键入时，屏幕上不会有文本。
语法
参数
entry- 一GtkEntry
ch- 一个统一码字符
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_max_length ----

gtk_entry_set_max_length
设置构件内容允许的最大长度。如果当前内容的长度超过给定的长度，则它们将被截断以适合。这相当于： 123[/语法] [语法]GtkEntryBuffer *buffer;buffer = gtk_entry_get_buffer （entry）;gtk_entry_buffer_set_max_length （buffer， max）;[/语法]
语法
参数
entry- 一GtkEntry
max- 条目的最大长度，或 0 表示无最大值。（条目的最大长度除外。传入的值将被钳制到 0-65536 范围内。
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_max_width_chars ----

gtk_entry_set_max_width_chars
设置所需的最大宽度（以条目字符为单位）。
语法
参数
entry- 一GtkEntry
n_chars- 新所需的最大宽度，以字符为单位
自 3.12 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_overwrite_mode ----

gtk_entry_set_overwrite_mode
设置在 中键入 时是否覆盖文本。GtkEntry
语法
参数
entry- 一GtkEntry
overwrite- 新值
自 2.14 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_placeholder_text ----

gtk_entry_set_placeholder_text
设置文本在空且未聚焦时在条目中显示。这可用于提供 预期内容的视觉提示。请注意，由于占位符文本在条目获得焦点时会被删除，因此，如果条目在窗口中给定初始焦点，则使用此功能会有点问题。有时，可以通过延迟初始焦点设置直到第一个关键事件到达来解决此问题。GtkEntry
语法
参数
entry- 一GtkEntry
text- 当条目清空未聚焦或 NULL 时要显示的字符串
自 3.2 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_progress_fraction ----

gtk_entry_set_progress_fraction
导致条目的进度指示器“填写”条形图的给定分割。分数应介于 0.0 和 1.0 之间（包括 0.0 和 1.0）。
语法
参数
entry- 一GtkEntry
fraction- 已完成任务的一小部分
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_progress_pulse_step ----

gtk_entry_set_progress_pulse_step
设置总入口宽度的分数，以将每次调用的进度切换块移动到 gtk_entry_progress_pulse（）。
语法
参数
entry- 一GtkEntry
fraction- 介于 0.0 和 1.0 之间的分数
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_tabs ----

gtk_entry_set_tabs
设置 ;数组中的制表位将应用于条目文本。PangoTabArray
语法
参数
entry- 一GtkEntry
tabs- 一PangoTabArray
自 3.10 起
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_set_text ----

gtk_entry_set_text
Sets the text in the widget to the givenvalue, replacing the current contents.See gtk_entry_buffer_set_text().
Syntax
Parameters
entry  -  	a GtkEntry
text  -  	the new text
See Also
GtkEntry


------------ KeyGTK3gtk_entry_set_visibility ----

gtk_entry_set_visibility
Sets whether the contents of the entry are visible or not.When visibility is set to FALSE, characters are displayedas the invisible char, and will also appear that way whenthe text in the entry widget is copied elsewhere.By default, GTK+ picks the best invisible character availablein the current font, but it can be changed withgtk_entry_set_invisible_char().Note that you probably want to set to GTK_INPUT_PURPOSE_PASSWORD or GTK_INPUT_PURPOSE_PIN toinform input methods about the purpose of this entry,in addition to setting visibility to FALSE.?input-purpose?
Syntax
Parameters
entry  -  	a GtkEntry
visible  -  	TRUE if the contents of the entry are displayedas plaintext
See Also
GtkEntry


------------ KeyGTK3gtk_entry_set_width_chars ----

gtk_entry_set_width_chars
将条目的大小请求更改为n_chars个字符的正确大小。请注意，它改变了大小请求，大小仍然会受到您将小部件打包到容器中的方式的影响。如果 n_chars 为 -1，则 thesize 将恢复为默认条目大小。
语法
参数
entry- 一GtkEntry
n_chars- 以字符为单位的宽度
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_text_index_to_layout_index ----

gtk_entry_text_index_to_layout_index
从条目中的位置（bygtk_entry_get_layout（））返回）转换为条目内容中的位置（由 gtk_entry_get_text（）） 返回）。PangoLayout
语法
参数
entry- 一GtkEntry
text_index- 输入内容的字节索引
返回
输入布局文本的字节索引
另请参见
GtkEntry


------------ KeyGTK3gtk_entry_unset_invisible_char ----

gtk_entry_unset_invisible_char
取消设置先前设置为 withgtk_entry_set_invisible_char（） 的不可见字符。以便再次使用默认的不可见字符。
语法
参数
entry- 一GtkEntry
2.16 起
另请参见
GtkEntry


------------ KeyGTK3gtk_enumerate_printers ----

gtk_enumerate_printers
调用所有 的函数。如果 func 返回 TRUE，则停止枚举。GtkPrinters
语法
参数
func- 为每个打印机调用一个函数
data- 用户数据传递给函数
destroy- 不再需要 data 时调用的函数
wait- 如果为 TRUE，则在递归主循环中等待，直到枚举出所有打印机;否则提前返回
自 2.1 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_events_pending ----

gtk_events_pending
检查是否有任何事件处于挂起状态。这可用于更新UI并调用超时等，同时执行一些时间密集型计算。
在长时间计算
期间更新 UI 123456[/语法] [语法]// 计算正在进行中...而 （gtk_events_pending （）） gtk_main_iteration （）;// ...计算继续[/语法]
返回
如果有任何事件处于挂起状态，则为 TRUE，否则为 FALSE
另请参见
gtk3-General


------------ KeyGTK3gtk_event_box_get_above_child ----

gtk_event_box_get_above_child
返回事件框窗口是位于其子窗口的上方还是下方。有关详细信息，请参见 gtk_event_box_set_above_child（）。
语法
参数
event_box- 一GtkEventBox
返回
如果事件框窗口位于其子窗口的窗口上方，则为 TRUE
2.4 起
另请参见
GtkEventBox


------------ KeyGTK3gtk_event_box_get_visible_window ----

gtk_event_box_get_visible_window
返回事件框是否具有可见窗口。有关详细信息，请参见 gtk_event_box_set_visible_window（）。
语法
参数
event_box- 一GtkEventBox
返回
如果事件框窗口可见，则为 TRUE
自 2.
另请参见
GtkEventBox


------------ KeyGTK3gtk_event_box_new ----

gtk_event_box_new
创建新的 .GtkEventBox
返回
一个新的GtkEventBox
另请参见
GtkEventBox


------------ KeyGTK3gtk_event_box_set_above_child ----

gtk_event_box_set_above_child
设置事件框窗口是否位于其子窗口的上方，而不是位于其下方。如果窗口位于上方，则事件框中的所有事件将转到事件框。如果窗口位于下方，则子小部件窗口中的事件将首先到达该小部件，然后到达其父级。默认设置是将窗口保留在子项下方。
语法
参数
event_box- 一GtkEventBox
above_child- 如果事件框窗口位于其子窗口上方，则为 TRUE
2.4 起
另请参见
GtkEventBox


------------ KeyGTK3gtk_event_box_set_visible_window ----

gtk_event_box_set_visible_window
设置事件框是使用可见还是不可见子窗口。默认设置是使用可见窗口。在不可见的窗口事件框中，事件框创建的窗口是GDK_INPUT_ONLY窗口，这意味着它是不可见的，仅用于接收事件。可见窗口事件框创建一个可见（GDK_INPUT_OUTPUT）窗口，该窗口充当事件框中包含的所有构件的父窗口。如果您只想捕获事件，通常应该使事件框不可见。创建可见窗口可能会导致对用户可见的伪影，特别是如果用户使用具有渐变或像素贴图的主题。创建非仅输入事件框的主要原因是，如果要将背景设置为其他颜色或在其上绘制。对于在子事件下方显示其窗口的不可见事件框，存在一个意外问题。（请参阅gtk_event_box_set_above_child（）。）由于仅输入窗口不是事件框的后代小部件创建的任何窗口的祖先窗口，因此这些窗口上的事件不会由窗口系统传播，而仅由 GTK+ 传播。这样做的实际效果是，如果事件不在后代窗口的事件掩码中（请参阅gtk_widget_add_events（）），则事件框不会接收该事件。对于可见事件框不会出现此问题，因为在这种情况下，事件框窗口实际上是上级窗口的祖先，而不仅仅是在屏幕上的同一位置。
语法
参数
event_box- 一GtkEventBox
visible_window- TRUE使事件框具有可见窗口
2.4 起
另请参见
GtkEventBox


------------ KeyGTK3gtk_expander_get_expanded ----

gtk_expander_get_expanded
查询 a 并返回其当前状态。返回 TRUE 如果子构件显示。请参见gtk_expander_set_expanded（）。GtkExpander
语法
参数
expander- 一GtkExpander
返回
扩展器的当前状态
2.4 起
另请参见
GtkExpander


------------ KeyGTK3gtk_expander_get_label ----

gtk_expander_get_label
从标签构件中提取文本，包括指示助记符和 Pango 标记的任何嵌入式下划线，如 bygtk_expander_set_label（） 设置的那样。如果尚未设置标签文本，则返回值将为 NULL。如果您使用gtk_button_new（） 创建用作容器的无穷按钮，则会出现这种情况。请注意，此函数在 2.14 之前的版本中的行为有所不同，用于返回去掉指示助记符和 Pango 标记的嵌入下划线的标签文本。通过直接从标签小角获取标签文本，可以避免此问题。
语法
参数
expander- 一GtkExpander
返回
标签微件的文本。此字符串归小部件所有，不得修改或释放。
2.4 起
另请参见
GtkExpander


------------ KeyGTK3gtk_expander_get_label_fill ----

gtk_expander_get_label_fill
返回标签微件是否将填充分配给扩展器的所有可用队列空间。
语法
参数
expander- 一GtkExpander
返回
如果标签微件将填充所有可用的水平空间，则为 TRUE
2.22 起
另请参见
GtkExpander


------------ KeyGTK3gtk_expander_get_label_widget ----

gtk_expander_get_label_widget
检索框架的标签构件。Seegtk_expander_set_label_widget（）.
语法
参数
expander- 一GtkExpander
返回
标签小部件，如果没有，则为 NULL。[无转移]
2.4 起
另请参见
GtkExpander


------------ KeyGTK3gtk_expander_get_resize_toplevel ----

gtk_expander_get_resize_toplevel
返回扩展器是否将调整包含扩展器的顶级构件的大小，以便在调整大小和折叠时包含扩展器。
语法
参数
expander- 一GtkExpander
返回
“调整大小”到“高级”？设置。
自 3.
另请参见
GtkExpander


------------ KeyGTK3gtk_expander_get_spacing ----

gtk_expander_get_spacing
获取由 gtk_expander_set_spacing（） 设置的值。
语法
参数
expander- 一GtkExpander
返回
扩展器和子项之间的间距
2.4 起
另请参见
GtkExpander


------------ KeyGTK3gtk_expander_get_use_markup ----

gtk_expander_get_use_markup
返回标签的文本是否被解释为使用 Pango 文本标记语言进行标记。请参见gtk_expander_set_use_markup（）。
语法
参数
expander- 一GtkExpander
返回
如果将解析标签的文本以进行标记，则为 TRUE
2.4 起
另请参见
GtkExpander


------------ KeyGTK3gtk_expander_get_use_underline ----

gtk_expander_get_use_underline
返回扩展器标签中的嵌入式下划线是否指示助记符。请参见gtk_expander_set_use_underline（）。
语法
参数
expander- 一GtkExpander
返回
如果扩展标签中嵌入的下划线指示助记符快捷键，则为 TRUE
2.4 起
另请参见
GtkExpander


------------ KeyGTK3gtk_expander_new ----

gtk_expander_new
使用标签作为标签文本创建新的扩展器。
语法
参数
label- 标签文本
返回
一个新的小部件。GtkExpander
2.4 起
另请参见
GtkExpander


------------ KeyGTK3gtk_expander_new_with_mnemonic ----

gtk_expander_new_with_mnemonic
使用标签作为标签文本创建新的扩展器。如果标签中的字符前面带有下划线，则带有下划线。如果需要在标签中使用文字下划线字符，请使用 ？__？（两个下分）。第一个带下划线的字符表示称为助记符的键盘增读器。按 Alt 和该键可激活按钮。
语法
参数
label- 标签文本，在助记符前面带有下划线。[允许-无]
返回
一个新的小部件。GtkExpander
2.4 起
另请参见
GtkExpander


------------ KeyGTK3gtk_expander_set_expanded ----

gtk_expander_set_expanded
设置扩展器的状态。如果希望显示子构件，则设置为 TRUE;如果希望隐藏子构件，则设置为 FALSE。
语法
参数
expander- 一GtkExpander
expanded- 子小部件是否显示
2.4 起
另请参见
GtkExpander


------------ KeyGTK3gtk_expander_set_label ----

gtk_expander_set_label
设置要添加标签的扩展器的标签文本。这还将清除以前设置的任何标签。
语法
参数
expander- 一GtkExpander
label- 一个字符串。[允许-无]
2.4 起
另请参见
GtkExpander


------------ KeyGTK3gtk_expander_set_label_fill ----

gtk_expander_set_label_fill
设置标签微件是否应填充分配给扩展器的所有可用队列空间。
语法
参数
expander- 一GtkExpander
label_fill- TRUE，如果标签应填充所有可用的水平空间
2.22 起
另请参见
GtkExpander


------------ KeyGTK3gtk_expander_set_label_widget ----

gtk_expander_set_label_widget
设置扩展器的标签微件。这是将嵌入在扩展器箭头旁边的小部件。
语法
参数
expander- 一GtkExpander
label_widget- 新的标签小部件。[允许-无]
2.4 起
另请参见
GtkExpander


------------ KeyGTK3gtk_expander_set_resize_toplevel ----

gtk_expander_set_resize_toplevel
设置扩展器是否将调整顶级构件的大小，以便在调整扩展器大小和折叠时包含扩展器。
语法
参数
expander- 一GtkExpander
resize_toplevel- 是否调整房间大小
自 3.2 起
另请参见
GtkExpander


------------ KeyGTK3gtk_expander_set_spacing ----

gtk_expander_set_spacing
设置扩展器的间距字段，该字段是要放置在扩展器和子项之间的像素数。
语法
参数
expander- 一GtkExpander
spacing- 扩展器和子项之间的距离（以像素为单位）
2.4 起
另请参见
GtkExpander


------------ KeyGTK3gtk_expander_set_use_markup ----

gtk_expander_set_use_markup
设置标签的文本是否包含 Pango 的文本标记语言中的标记。请参见gtk_label_set_markup（）。
语法
参数
expander- 一GtkExpander
use_markup- TRUE，如果标签的文本应该被解析为标记
2.4 起
另请参见
GtkExpander


------------ KeyGTK3gtk_expander_set_use_underline ----

gtk_expander_set_use_underline
如果为 true，则扩展器标签文本中的下划线指示应将下一个字符用于助记符快捷键。
语法
参数
expander- 一GtkExpander
use_underline- 如果文本中的下划线表示助记符，则为 TRUE
2.4 起
另请参见
GtkExpander


------------ KeyGTK3gtk_false ----

gtk_false
Analogical to gtk_true(), this function does nothingbut always returns FALSE.
Returns
FALSE
See Also
gtk3-General


------------ KeyGTK3gtk_file_chooser_add_filter ----

gtk_file_chooser_add_filter
将筛选器添加到用户可以在其之间进行选择的筛选器列表中。选择筛选器后，仅显示由该筛选器传递的文件。请注意，选择器拥有筛选器的所有权，因此，如果要保留引用，则必须引用并接收器它。
语法
参数
chooser- 一GtkFileChooser
filter- 一GtkFileFilter
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_add_shortcut_folder ----

gtk_file_chooser_add_shortcut_folder
添加要在文件选取器中与快捷方式文件夹一起显示的文件夹。请注意，快捷方式文件夹不会被保存，因为它们是由应用程序提供的。例如，您可以使用它来添加一个？/usr/share/mydrawprogram/Clipart？文件夹到卷列表。
语法
参数
chooser- 一GtkFileChooser
folder- 要添加的文件夹的文件名。
error- 存储错误的位置，或空。[允许-无]
返回
如果可以成功添加文件夹，则为 TRUE，否则为 FALSEotherwise。在后一种情况下，将根据需要设置错误。
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_add_shortcut_folder_uri ----

gtk_file_chooser_add_shortcut_folder_uri
添加要与文件选择器中的快捷方式文件夹一起显示的文件夹 URI。请注意，快捷方式文件夹不会被保存，因为它们是由应用程序提供的。例如，您可以使用它来添加一个？file：///usr/share/mydrawprogram/Clipart？文件夹到卷列表。
语法
参数
chooser- 一GtkFileChooser
uri- 要添加的文件夹的URI
error- 存储错误的位置，或空。[允许-无]
返回
如果可以成功添加文件夹，则为 TRUE，否则为 FALSEotherwise。在后一种情况下，将根据需要设置错误。
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_button_get_focus_on_click ----

gtk_file_chooser_button_get_focus_on_click
返回按钮在用鼠标单击时是否抓住焦点。请参见gtk_file_chooser_button_set_focus_on_click（）。
语法
参数
button- 一GtkFileChooserButton
返回
如果按钮在用鼠标单击时抓住焦点，则为 TRUE。
自 2.10 起
另请参见
GtkFileChooserButton


------------ KeyGTK3gtk_file_chooser_button_get_title ----

gtk_file_chooser_button_get_title
检索按钮使用的浏览对话框的标题。返回的值不应被修改或释放。
语法
参数
button- 要检查的按钮小部件。
返回
指向浏览对话框标题的指针。
自 2.6 起
另请参见
GtkFileChooserButton


------------ KeyGTK3gtk_file_chooser_button_get_width_chars ----

gtk_file_chooser_button_get_width_chars
检索按钮构件的条目和/或标签的宽度（以字符为单位）。
语法
参数
button- 要检查的按钮小部件。
返回
按钮将用于调整自身大小的整数宽度（以字符为单位）。
自 2.6 起
另请参见
GtkFileChooserButton


------------ KeyGTK3gtk_file_chooser_button_new ----

gtk_file_chooser_button_new
创建新的文件选择按钮构件。
语法
参数
title- 浏览对话框的标题。
action- 小部件的打开模式。
返回
一个新的按钮小部件。
自 2.6 起
另请参见
GtkFileChooserButton


------------ KeyGTK3gtk_file_chooser_button_new_with_dialog ----

gtk_file_chooser_button_new_with_dialog
创建一个使用对话框作为其文件选取窗口的小部件。请注意，对话框必须是实现接口的（或子类），并且不得haveGTK_DIALOG_DESTROY_WITH_PARENT集。另请注意，对话框需要添加其确认按钮，并添加响应GTK_RESPONSE_ACCEPT或GTK_RESPONSE_OK，以便按钮接管对话框中选择的文件。GtkFileChooserButtonGtkDialogGtkFileChooser
语法
参数
dialog- 用作对话框的小部件
返回
一个新的按钮小部件。
自 2.6 起
另请参见
GtkFileChooserButton


------------ KeyGTK3gtk_file_chooser_button_set_focus_on_click ----

gtk_file_chooser_button_set_focus_on_click
设置按钮在用鼠标单击时是否将获取焦点。使鼠标单击不抓取焦点在您不希望将键盘焦点从应用程序的主要区域中删除的位置非常有用。
语法
参数
button- 一GtkFileChooserButton
focus_on_click- 按钮在用鼠标点击时是否抓住焦点
自 2.1 起
另请参见
GtkFileChooserButton


------------ KeyGTK3gtk_file_chooser_button_set_title ----

gtk_file_chooser_button_set_title
修改按钮使用的浏览对话框的标题。
语法
参数
button- 按钮小部件修改。
title- 新的浏览对话框标题。
自 2.6 起
另请参见
GtkFileChooserButton


------------ KeyGTK3gtk_file_chooser_button_set_width_chars ----

gtk_file_chooser_button_set_width_chars
设置按钮将用于n_chars的宽度（以字符为单位）。
语法
参数
button- 要检查的按钮小部件。
n_chars- 新的宽度，以字符为单位。
自 2.6 起
另请参见
GtkFileChooserButton


------------ KeyGTK3gtk_file_chooser_dialog_new ----

gtk_file_chooser_dialog_new
创建新的 .此函数类似于 togtk_dialog_new_with_buttons（）。GtkFileChooserDialog
语法
参数
title- 对话框的标题，或 NULL。[允许-无]
parent- 对话框的瞬态父级，或 NULL。[允许-无]
action- 打开或保存对话框的模式
first_button_text- 股票ID或文本去在第一个按钮，或NULL。[允许-无]
...- 第一个按钮的响应 ID，然后是其他（按钮、id）对，以 NULL 结尾
返回
一个新的GtkFileChooserDialog
自 2.
另请参见
GtkFileChooserDialog


------------ KeyGTK3GTK_FILE_CHOOSER_ERROR ----

GTK_FILE_CHOOSER_ERROR
GTK_FILE_CHOOSER_ERROR
用于获取错误的夸克。GErrorGtkFileChooser
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_action ----

gtk_file_chooser_get_action
获取文件选择器正在执行的操作的类型;seegtk_file_chooser_set_action（）.
语法
参数
chooser- 一GtkFileChooser
返回
文件选择器正在执行的操作
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_create_folders ----

gtk_file_chooser_get_create_folders
获取文件选择器是否提供创建新文件夹。请参见gtk_file_chooser_set_create_folders（）。
语法
参数
chooser- 一GtkFileChooser
返回
如果应显示“新建文件夹”按钮，则为 TRUE。
自 2.18 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_current_folder ----

gtk_file_chooser_get_current_folder
获取选择器的当前文件夹作为本地文件名。请参见gtk_file_chooser_set_current_folder（）。请注意，这是文件选择器当前显示的文件夹（例如“/home/username/Documents”），如果选择器inGTK_FILE_CHOOSER_ACTION_SELECT_FOLDER模式（例如“/home/username/Documents/selected-folder/”），则与当前选择的文件夹不同。要在该模式下获取当前选定的文件夹，请使用 gtk_file_chooser_get_uri（） 作为获取所选内容的常用方法。
语法
参数
chooser- 一GtkFileChooser
返回
当前文件夹的完整路径，如果当前路径无法表示为本地文件名，则为 NULL。使用g_free（） 免费。如果文件选择器无法加载从中请求的最后一个文件夹，则此函数也将返回NULL;例如，对于不存在的文件夹上的callinggtk_file_chooser_set_current_folder（）也是如此。[类型文件名]
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_current_folder_file ----

gtk_file_chooser_get_current_folder_file
获取选择器的当前文件夹为 。请参见gtk_file_chooser_get_current_folder_uri（）。GFile
语法
参数
chooser- 一GtkFileChooser
返回
当前文件夹的 。[转移完整]GFile
自 2.14 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_current_folder_uri ----

gtk_file_chooser_get_current_folder_uri
获取选择器的当前文件夹作为 URI。请参见gtk_file_chooser_set_current_folder_uri（）。请注意，这是文件选择器当前显示的文件夹（例如“file:///home/username/Documents”），如果选择器inGTK_FILE_CHOOSER_ACTION_SELECT_FOLDER模式（例如“file:///home/username/Documents/selected-folder/”），则与当前选择的文件夹不同。要在该模式下获取当前选定的文件夹，请使用 gtk_file_chooser_get_uri（） 作为获取所选内容的常用方法。
语法
参数
chooser- 一GtkFileChooser
返回
当前文件夹的 URI。使用g_free（） 免费。如果文件选择器无法加载从中请求的最后一个文件夹，则此函数也将返回NULL;例如，对于不存在的文件夹上的callinggtk_file_chooser_set_current_folder_uri（）也是如此。
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_current_name ----

gtk_file_chooser_get_current_name
获取文件选择器中的当前名称，如用户在 的文本条目中输入的名称一样？名字？。这用于保存对话框，以便在文件本身尚不存在时获取当前键入的文件名。例如，一个应用程序将自定义的额外小部件添加到文件选择器中，以用于 ？文件格式？可能想要根据所选格式更改键入文件名的扩展名，例如，从？。jpg？自？。png？.
语法
参数
chooser- 一GtkFileChooser
返回
来自文件选择器的原始文本 ？名字？进入。释放此withg_free（）。请注意，此字符串不是完整的路径名或 URI;它是条目的内容是什么。另请注意，此字符串是 inUTF-8 编码，不一定是系统对文件名的编码。
自 3.10 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_do_overwrite_confirmation ----

gtk_file_chooser_get_do_overwrite_confirmation
查询文件选择器是否设置为在用户键入已存在的文件名时确认覆盖。
语法
参数
chooser- 一GtkFileChooser
返回
如果文件选择器将显示确认对话框，则为 TRUE;否则为假。
自 2.8 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_extra_widget ----

gtk_file_chooser_get_extra_widget
获取当前预览小部件;seegtk_file_chooser_set_extra_widget（）.
语法
参数
chooser- 一GtkFileChooser
返回
当前的额外小部件，或 NULL。[无转移]
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_file ----

gtk_file_chooser_get_file
Gets the  for the currently selected file inthe file selector. If multiple files are selected,one of the files will be returned at random.If the file chooser is in folder mode, this function returns the selectedfolder.GFile
Syntax
Parameters
chooser  -  	a GtkFileChooser
Returns
a selected . You own the returned file;use g_object_unref() to release it. [transfer full]GFile
Since 2.14
See Also
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_filename ----

gtk_file_chooser_get_filename
Gets the filename for the currently selected file inthe file selector. The filename is returned as an absolute path. Ifmultiple files are selected, one of the filenames will be returned atrandom.If the file chooser is in folder mode, this function returns the selectedfolder.
Syntax
Parameters
chooser  -  	a GtkFileChooser
Returns
The currently selected filename, or NULLif no file is selected, or the selected file can'tbe represented with a local filename. Free with g_free(). [type filename]
Since 2.4
See Also
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_filenames ----

gtk_file_chooser_get_filenames
Lists all the selected files and subfolders in the current folder ofchooser. The returned names are full absolute paths. If files in the currentfolder cannot be represented as local filenames they will be ignored. (Seegtk_file_chooser_get_uris())
Syntax
Parameters
chooser  -  	a GtkFileChooser
Returns
a containing the filenames of all selected files and subfolders inthe current folder. Free the returned list with g_slist_free(),and the filenames with g_free(). [element-type filename][transfer full]GSList
Since 2.4
See Also
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_files ----

gtk_file_chooser_get_files
列出 chooseras 的当前文件夹中所有选定的文件和子文件夹。内部函数，请参见gtk_file_chooser_get_uris（）。GFile
语法
参数
chooser- 一GtkFileChooser
返回
a 包含当前文件夹中每个选定文件和子文件夹的 a。释放带有 g_slist_free（） 的返回列表，并使用 g_object_unref（） 释放文件。[元素类型 GFile][转移完整]GSListGFile
自 2.14 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_filter ----

gtk_file_chooser_get_filter
Gets the current filter; see gtk_file_chooser_set_filter().
Syntax
Parameters
chooser  -  	a GtkFileChooser
Returns
the current filter, or NULL. [transfer none]
Since 2.4
See Also
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_local_only ----

gtk_file_chooser_get_local_only
获取是否只能在文件选择器中选择本地文件。请参见gtk_file_chooser_set_local_only（）
语法
参数
chooser- 一GtkFileChooser
返回
如果只能选择本地文件，则为 TRUE。
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_preview_file ----

gtk_file_chooser_get_preview_file
获取应在自定义预览中预览的内部函数，请参见gtk_file_chooser_get_preview_uri（）。GFile
语法
参数
chooser- 一GtkFileChooser
返回
，用于预览文件，如果未选择任何文件，则为 NULL。使用 g_object_unref（） 免费。[转移完整]GFile
自 2.14 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_preview_filename ----

gtk_file_chooser_get_preview_filename
获取应在自定义预览小道中预览的文件名。请参见 gtk_file_chooser_set_preview_widget（）。
语法
参数
chooser- 一GtkFileChooser
返回
要预览的文件名，如果未选择任何文件，或者如果所选文件无法表示为本地文件名，则为 NULL。使用g_free（） 免费。[类型文件名]
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_preview_uri ----

gtk_file_chooser_get_preview_uri
获取应在自定义预览小样中预览的 URI。请参见 gtk_file_chooser_set_preview_widget（）。
语法
参数
chooser- 一GtkFileChooser
返回
要预览的文件的 URI，如果未选择任何文件，则为 NULL。使用g_free（） 免费。
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_preview_widget ----

gtk_file_chooser_get_preview_widget
获取当前预览小部件;seegtk_file_chooser_set_preview_widget（）.
语法
参数
chooser- 一GtkFileChooser
返回
当前预览微件，或 NULL。[无转移]
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_preview_widget_active ----

gtk_file_chooser_get_preview_widget_active
获取是否应为当前文件名显示由 gtk_file_chooser_set_preview_widget（） 设置的预览构件。Seegtk_file_chooser_set_preview_widget_active（）.
语法
参数
chooser- 一GtkFileChooser
返回
如果预览微件对于当前文件名处于活动状态，则为 TRUE。
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_select_multiple ----

gtk_file_chooser_get_select_multiple
获取是否可以在文件选择器中选择多个文件。请参见gtk_file_chooser_set_select_multiple（）。
语法
参数
chooser- 一GtkFileChooser
返回
如果可以选择多个文件，则为 TRUE。
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_show_hidden ----

gtk_file_chooser_get_show_hidden
获取隐藏文件和文件夹是否显示在文件选择器中。请参见 gtk_file_chooser_set_show_hidden（）。
语法
参数
chooser- 一GtkFileChooser
返回
如果显示隐藏的文件和文件夹，则为 TRUE。
自 2.6 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_uri ----

gtk_file_chooser_get_uri
获取文件选择器中当前选定文件的 URI。如果选择了多个文件，则将随机返回其中一个文件名。如果文件选择器处于文件夹模式，则此函数返回所选文件夹。
语法
参数
chooser- 一GtkFileChooser
返回
当前选定的 URI 或 NULLif 无文件处于选中状态。如果gtk_file_chooser_set_local_only（） 设置为 TRUE（默认值），则将为任何 FUSE 位置返回本地 URI。免费与g_free（）
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_uris ----

gtk_file_chooser_get_uris
列出当前文件夹中的所有选定文件和子文件夹。返回的名称是完全绝对 URI。
语法
参数
chooser- 一GtkFileChooser
返回
a 包含当前文件夹中所有选定文件和子文件夹的 URI。释放返回的 list，其中包含 g_slist_free（），文件名带有 g_free（）。[元素型 utf8][转移完整]GSList
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_get_use_preview_label ----

gtk_file_chooser_get_use_preview_label
获取是否应使用预览文件的名称绘制库存标签。请参见 gtk_file_chooser_set_use_preview_label（）。
语法
参数
chooser- 一GtkFileChooser
返回
如果文件选择器设置为显示带有预览文件名称的标签，则为 TRUE，否则为 FALSE。
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_list_filters ----

gtk_file_chooser_list_filters
列出当前用户可选择的过滤器集;seegtk_file_chooser_add_filter（）， gtk_file_chooser_remove_filter（）.
语法
参数
chooser- 一GtkFileChooser
返回
a 包含当前用户可选择的过滤器集。列表的内容归 GTK+ 所有，但当你完成它时，你必须用 g_slist_free（） 释放 listitself。[元素类型 GtkFileFilter][转移容器]GSList
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_list_shortcut_folders ----

gtk_file_chooser_list_shortcut_folders
查询文件选取器中的快捷键文件夹列表，如设置bygtk_file_chooser_add_shortcut_folder（）。
语法
参数
chooser- 一GtkFileChooser
返回
文件夹文件名列表，如果没有快捷方式文件夹，则为 NULL。释放返回的g_slist_free（） 列表，文件名withg_free（）。[元素类型文件名][转移完整]
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_list_shortcut_folder_uris ----

gtk_file_chooser_list_shortcut_folder_uris
查询文件选取器中的快捷键文件夹列表，如设置bygtk_file_chooser_add_shortcut_folder_uri（）。
语法
参数
chooser- 一GtkFileChooser
返回
文件夹 URI 的列表，如果没有快捷方式文件夹，则为 NULL。使用 g_slist_free（） 释放返回的列表，并使用 g_free（） 释放 URI。[元素型 utf8][转移完整]
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_remove_filter ----

gtk_file_chooser_remove_filter
从用户可以在其之间进行选择的筛选器列表中删除筛选器。
语法
参数
chooser- 一GtkFileChooser
filter- 一GtkFileFilter
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_remove_shortcut_folder ----

gtk_file_chooser_remove_shortcut_folder
从文件选择器的快捷方式文件夹列表中删除文件夹。
语法
参数
chooser- 一GtkFileChooser
folder- 要删除的文件夹的文件名。[类型文件名]
error- 存储错误的位置，或空。[允许-无]
返回
如果操作成功，则为 TRUE，否则为 FALSE。在后一种情况下，将根据需要设置错误。另请参见：gtk_file_chooser_add_shortcut_folder（）
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_remove_shortcut_folder_uri ----

gtk_file_chooser_remove_shortcut_folder_uri
从文件选择器的快捷方式文件夹列表中删除文件夹 URI。
语法
参数
chooser- 一GtkFileChooser
uri- 要删除的文件夹的URI
error- 存储错误的位置，或空。[允许-无]
返回
如果操作成功，则为 TRUE，否则为 FALSE。在后一种情况下，将根据需要设置错误。另请参见：gtk_file_chooser_add_shortcut_folder_uri（）
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_select_all ----

gtk_file_chooser_select_all
选择文件选取器的当前文件夹中的所有文件。
语法
参数
chooser- 一GtkFileChooser
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_select_file ----

gtk_file_chooser_select_file
选择文件引用的文件。内部函数。See_gtk_file_chooser_select_uri（）.
语法
参数
chooser- 一GtkFileChooser
file- 要选择的文件
error- 存储错误的位置，或空。[允许-无]
返回
没有用。
自 2.14 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_select_filename ----

gtk_file_chooser_select_filename
选择文件名。如果文件名不在选择器的当前文件夹中，则选择器的当前文件夹将更改为包含文件名的文件夹。
语法
参数
chooser- 一GtkFileChooser
filename- 要选择的文件名。[类型文件名]
返回
没有用。另请参见：gtk_file_chooser_set_filename（）
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_select_uri ----

gtk_file_chooser_select_uri
按 uri 选择文件。如果 URI 未引用选择器的当前文件夹中的 afile，则选择器的当前文件夹将更改为包含文件名的文件夹。
语法
参数
chooser- 一GtkFileChooser
uri- 要选择的 URI
返回
没有用。
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_action ----

gtk_file_chooser_set_action
设置选择器正在执行的操作的类型;用户界面已进行调整以适应所选操作。例如，如果操作isGTK_FILE_CHOOSER_ACTION_SAVE，则可能会显示创建新文件夹的选项，但如果操作isGTK_FILE_CHOOSER_ACTION_OPEN，则不会显示。
语法
参数
chooser- 一GtkFileChooser
action- 文件选择器正在执行的操作
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_create_folders ----

gtk_file_chooser_set_create_folders
设置文件选择器是否提供创建新文件夹。仅当操作未设置为GTK_FILE_CHOOSER_ACTION_OPEN时，这才相关。
语法
参数
chooser- 一GtkFileChooser
create_folders- 如果应显示“新建文件夹”按钮，则为 TRUE
自 2.18 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_current_folder ----

gtk_file_chooser_set_current_folder
从本地文件名设置选择器的当前文件夹。用户将显示当前文件夹的完整内容，以及用于导航到其他文件夹的用户界面元素。通常，不应使用此功能。请参阅有关设置文件选择器对话框的相关内容，了解其背后的基本原理。
语法
参数
chooser- 一GtkFileChooser
filename- 新的当前文件夹的完整路径。[类型文件名]
返回
没有用。
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_current_folder_file ----

gtk_file_chooser_set_current_folder_file
从 中设置选择器的当前文件夹。内部函数，请参见gtk_file_chooser_set_current_folder_uri（）。GFile
语法
参数
chooser- 一GtkFileChooser
file- 用于新文件夹GFile
error- 存储错误的位置，或空。[允许-无]
返回
如果文件夹可以成功更改，则为 TRUE，否则为 FALSEotherwise。
自 2.14 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_current_folder_uri ----

gtk_file_chooser_set_current_folder_uri
从 URI 设置选择器的当前文件夹。用户将显示当前文件夹的完整内容，以及用于导航到其他文件夹的用户界面元素。通常，不应使用此功能。请参阅有关设置文件选择器对话框的相关内容，了解其背后的基本原理。
语法
参数
chooser- 一GtkFileChooser
uri- 新当前文件夹的 URI
返回
如果文件夹可以成功更改，则为 TRUE，否则为 FALSEotherwise。
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_current_name ----

gtk_file_chooser_set_current_name
在文件选择器中设置当前名称，就像用户输入的名称一样。请注意，此处传入的名称是 UTF-8 字符串，而不是文件名。此函数旨在将此类用作 ？另存为...？对话。你可以通过 ？无题.doc？或对名称的类似合适建议。如果要预先选择特定的现有文件，则应改为usegtk_file_chooser_set_filename（） 或 gtk_file_chooser_set_uri（）。有关usinggtk_file_chooser_set_current_name（） 的示例，请参阅这些函数的文档。
语法
参数
chooser- 一GtkFileChooser
name- 要使用的文件名，作为 UTF-8 字符串。[类型文件名]
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_do_overwrite_confirmation ----

gtk_file_chooser_set_do_overwrite_confirmation
Sets whether a file chooser in GTK_FILE_CHOOSER_ACTION_SAVE mode will presenta confirmation dialog if the user types a file name that already exists.  Thisis FALSE by default.If set to TRUE, the chooser will emit the signal when appropriate.If all you need is the stock confirmation dialog, set this property to TRUE.You can override the way confirmation is done by actually handling the signal; please refer to its documentationfor the details.?confirm-overwrite??confirm-overwrite?
Syntax
Parameters
chooser  -  	a GtkFileChooser
do_overwrite_confirmation  -  	whether to confirm overwriting in save mode
Since 2.8
See Also
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_extra_widget ----

gtk_file_chooser_set_extra_widget
Sets an application-supplied widget to provide extra options to the user.
Syntax
Parameters
chooser  -  	a GtkFileChooser
extra_widget  -  	widget for extra options
Since 2.4
See Also
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_file ----

gtk_file_chooser_set_file
Sets file as the current filename for the file chooser, by changingto the file?s parent folder and actually selecting the file in list.  Ifthe chooser is in GTK_FILE_CHOOSER_ACTION_SAVE mode, the file?s base namewill also appear in the dialog?s file name entry.If the file name isn?t in the current folder of chooser, then the currentfolder of chooser will be changed to the folder containing filename. Thisis equivalent to a sequence of gtk_file_chooser_unselect_all() followed bygtk_file_chooser_select_filename().Note that the file must exist, or nothing will be done exceptfor the directory change.If you are implementing a save dialog,you should use this function if you already have a file name to which theuser may save; for example, when the user opens an existing file and thendoes Save As...  If you don?t havea file name already ? for example, if the user just created a newfile and is saving it for the first time, do not call this function.Instead, use something similar to this:                    1234567891011[/syntax]        [syntax]if (document_is_new)  {    // the user just created a new document    gtk_file_chooser_set_current_folder_file (chooser, default_file_for_saving);    gtk_file_chooser_set_current_name (chooser, "Untitled document");  }else  {    // the user edited an existing document    gtk_file_chooser_set_file (chooser, existing_file);  }[/syntax]
Syntax
Parameters
chooser  -  	a GtkFileChooser
file  -  	the  to set as currentGFile
error  -  	 location to store the error, or NULL to ignore errors. [allow-none]
Returns
Not useful.
Since 2.14
See Also
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_filename ----

gtk_file_chooser_set_filename
将文件名设置为文件选择器的当前文件名，方法是更改为文件的父文件夹并实际选择列表中的文件;所有其他文件都将被取消选中。如果选择器inGTK_FILE_CHOOSER_ACTION_SAVE模式，则文件的基本名称也将出现在对话框的文件名条目中。请注意，该文件必须存在，否则除了目录更改之外，不会执行任何操作。仅当实现已具有用户可以保存的文件名的 savedialog 时，才应使用此函数。例如，当用户打开现有文件并执行“另存为...”时...以保存副本或修改后的版本。如果您还没有文件名？例如，如果用户刚刚创建了一个新文件并首次保存它，请不要调用此函数。相反，请使用类似于以下内容的内容：12345678910[/语法] [语法]if （document_is_new） { // 用户刚刚gtk_file_chooser_set_current_name创建了一个新文档（选择器，“无标题文档”）; }else { // 用户编辑了现有文档gtk_file_chooser_set_filename（选择器，existing_filename）;}[/语法]
在第一种情况下，文件选择器将向用户提供有用的建议，例如保存新文件的位置。在第二种情况下，文件的现有位置是已知的，因此文件选择器将使用它。
语法
参数
chooser- 一GtkFileChooser
filename- 要设置为当前文件名的文件名。[类型文件名]
返回
没有用。
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_filter ----

gtk_file_chooser_set_filter
设置当前滤波器;仅显示通过过滤器的文件。如果用户可选择的筛选器列表不为空，则该筛选器应为该列表中的筛选器之一。如果要限制显示的文件集而不让用户更改文件集，则在列表为空时设置当前筛选器非常有用。
语法
参数
chooser- 一GtkFileChooser
filter- 一GtkFileFilter
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_local_only ----

gtk_file_chooser_set_local_only
设置是否只能在文件选择器中选择本地文件。如果local_only为 TRUE（默认值），则所选文件是保证可通过操作系统本机文件系统访问的文件，因此应用程序只需要担心文件名功能，如 gtk_file_chooser_get_filename（），而不是 URI 函数 likegtk_file_chooser_get_uri（），在某些系统上，非本机文件可能仍然可以通过用户空间文件系统 （FUSE） 使用本机文件系统。GtkFileChooser
语法
参数
chooser- 一GtkFileChooser
local_only- 如果只能选择本地文件，则为 TRUE
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_preview_widget ----

gtk_file_chooser_set_preview_widget
设置应用程序提供的小组件，以用于显示当前选定文件的自定义预览。要实现预览，请在设置预览小部件后连接到信号，并在每次更改时调用gtk_file_chooser_get_preview_filename（） orgtk_file_chooser_get_preview_uri（）。如果可以显示新文件的预览，请更新微件并使用 gtk_file_chooser_set_preview_widget_active（） 将预览设置为活动状态。否则，请将预览设置为非活动状态。如果没有应用程序提供的预览构件，或者应用程序提供的预览微件未处于活动状态，则文件选择器将根本不显示预览。?update-preview?
语法
参数
chooser- 一GtkFileChooser
preview_widget- 用于显示预览的小部件。
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_preview_widget_active ----

gtk_file_chooser_set_preview_widget_active
设置是否应为当前文件名显示预览微件集 bygtk_file_chooser_set_preview_widget（）。当活动设置为 false 时，文件选择项将显示当前文件的内部生成预览，或者它可能根本不显示预览。Seegtk_file_chooser_set_preview_widget（） 了解更多详情。
语法
参数
chooser- 一GtkFileChooser
active- 是否显示用户指定的预览小部件
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_select_multiple ----

gtk_file_chooser_set_select_multiple
设置是否可以在文件选择器中选择多个文件。如果操作设置为GTK_FILE_CHOOSER_ACTION_OPEN orGTK_FILE_CHOOSER_ACTION_SELECT_FOLDER，则这仅相关。
语法
参数
chooser- 一GtkFileChooser
select_multiple- 如果可以选择多个文件，则为 TRUE。
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_show_hidden ----

gtk_file_chooser_set_show_hidden
设置是否在文件选择器中显示隐藏的文件和文件夹。
语法
参数
chooser- 一GtkFileChooser
show_hidden- 如果应显示隐藏的文件和文件夹，则为 TRUE。
自 2.6 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_uri ----

gtk_file_chooser_set_uri
通过更改为 URI 的父文件夹并实际选择列表中的 URI，将 uri 引用的文件设置为文件选择器的当前文件。如果选择器GTK_FILE_CHOOSER_ACTION_SAVE模式，则 URI 的基名也将显示在对话框的文件名条目中。请注意，URI 必须存在，否则除了目录更改之外，不会执行任何操作。仅当实现已具有用户可以保存的文件名的 savedialog 时，才应使用此函数。例如，当用户打开现有文件，然后执行“另存为...”以保存副本或修改后的版本。如果您还没有文件名？例如，如果用户刚刚创建了一个新文件并首次保存它，请不要调用此函数。相反，请使用类似于以下内容的内容：12345678910[/语法] [语法]if （document_is_new） { // 用户刚刚gtk_file_chooser_set_current_name创建了一个新文档（选择器，“无标题文档”）; }else { // 用户编辑了现有文档gtk_file_chooser_set_uri（选择器，existing_uri）;}[/语法]
在第一种情况下，文件选择器将向用户提供有用的建议，例如保存新文件的位置。在第二种情况下，文件的现有位置是已知的，因此文件选择器将使用它。
语法
参数
chooser- 一GtkFileChooser
uri- 要设置为当前 URI 的 URI
返回
没有用。
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_set_use_preview_label ----

gtk_file_chooser_set_use_preview_label
设置文件选择器是否应显示带有正在预览的文件名称的常用标签;默认值为 TRUE。希望自己绘制整个预览区域的应用程序应将其设置为 FALSE，并在预览小部件中显示名称。另请参见：gtk_file_chooser_set_preview_widget（）
语法
参数
chooser- 一GtkFileChooser
use_label- 是否显示带有预览文件名称的库存标签
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_unselect_all ----

gtk_file_chooser_unselect_all
取消选择文件选取器的当前文件夹中的所有文件。
语法
参数
chooser- 一GtkFileChooser
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_unselect_file ----

gtk_file_chooser_unselect_file
取消选择文件引用的文件。如果文件不在当前目录中、不存在或当前未被选中，则不执行任何操作。
语法
参数
chooser- 一GtkFileChooser
file- 一GFile
自 2.1 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_unselect_filename ----

gtk_file_chooser_unselect_filename
取消选择当前选定的文件名。如果文件名不在当前目录中，则不存在，或者当前未选中，则不执行任何操作。
语法
参数
chooser- 一GtkFileChooser
filename- 要取消选择的文件名。[类型文件名]
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_unselect_uri ----

gtk_file_chooser_unselect_uri
取消选择 uri 引用的文件。如果文件不在当前目录中，则不存在，或者当前未被选中，则不执行任何操作。
语法
参数
chooser- 一GtkFileChooser
uri- 要取消选择的 URI
2.4 起
另请参见
GtkFileChooser


------------ KeyGTK3gtk_file_chooser_widget_new ----

gtk_file_chooser_widget_new
创建新的 .这是一个可以嵌入到自定义窗口中的文件选择器小部件，它与所使用的小部件相同。GtkFileChooserWidgetGtkFileChooserDialog
语法
参数
action- 打开或保存小部件的模式
返回
一个新的GtkFileChooserWidget
自 2.
另请参见
GtkFileChooserWidget


------------ KeyGTK3gtk_file_filter_add_custom ----

gtk_file_filter_add_custom
将规则添加到允许基于自定义回调函数的文件的筛选器。传入的所需位字段提供有关过滤器函数需要哪种信息的信息;这允许GTK+避免在过滤器不需要它时检索昂贵的信息。
语法
参数
filter- 一GtkFileFilter
needed- 标志的位字段，指示自定义过滤器函数需要的信息。
func- 回调函数;如果函数返回 TRUE，则将显示该文件。
data- 数据传递到函数
notify- 函数调用免费数据何时不再需要。
2.4 起
另请参见
GtkFileFilter


------------ KeyGTK3gtk_file_filter_add_mime_type ----

gtk_file_filter_add_mime_type
添加允许筛选给定 mime 类型的规则。
语法
参数
filter- 一GtkFileFilter
mime_type- MIME 类型的名称
2.4 起
另请参见
GtkFileFilter


------------ KeyGTK3gtk_file_filter_add_pattern ----

gtk_file_filter_add_pattern
添加一个规则，允许将 shell 样式 glob 添加到过滤器。
语法
参数
filter- 一GtkFileFilter
pattern- 贝壳样式球
2.4 起
另请参见
GtkFileFilter


------------ KeyGTK3gtk_file_filter_add_pixbuf_formats ----

gtk_file_filter_add_pixbuf_formats
添加一个规则，允许采用 GdkPixbuf 支持的格式的图像文件。
语法
参数
filter- 一GtkFileFilter
自 2.6 起
另请参见
GtkFileFilter


------------ KeyGTK3gtk_file_filter_filter ----

gtk_file_filter_filter
测试是否应根据筛选器显示文件。filter_info应包括从 gtk_file_filter_get_needed（） 返回的字段。应用程序通常不会使用此功能。它主要用于实施。GtkFileFilterInfoGtkFileChooser
语法
参数
filter- 一GtkFileFilter
filter_info- 包含有关文件的信息。GtkFileFilterInfo
返回
如果应显示文件，则为 TRUE
自 2.
另请参见
GtkFileFilter


------------ KeyGTK3gtk_file_filter_get_name ----

gtk_file_filter_get_name
获取筛选器的用户可读名称。请参见 gtk_file_filter_set_name（）。
语法
参数
filter- 一GtkFileFilter
返回
过滤器的人类可读名称，或 NULL。此值归 GTK+ 所有，不得修改或释放。
2.4 起
另请参见
GtkFileFilter


------------ KeyGTK3gtk_file_filter_get_needed ----

gtk_file_filter_get_needed
获取传递给gtk_file_filter_filter（）此函数通常不会被应用程序使用而需要填写的字段;它主要用于实施。GtkFileFilterInfoGtkFileChooser
语法
参数
filter- 一GtkFileFilter
返回
标记的位字段，指示调用 gtk_file_filter_filter（） 时所需的字段
2.4 起
另请参见
GtkFileFilter


------------ KeyGTK3gtk_file_filter_new ----

gtk_file_filter_new
创建一个不添加任何规则的新项目。这样的过滤器不接受任何文件，因此在添加规则withgtk_file_filter_add_mime_type（），gtk_file_filter_add_pattern（）或gtk_file_filter_add_custom（）之前，它不是特别有用。要创建接受任何文件的过滤器，请使用： 12[/语法] [语法]GtkFileFilter *filter = gtk_file_filter_new （）;gtk_file_filter_add_pattern （filter， “*”）;[/语法]GtkFileFilter
返回
一个新的GtkFileFilter
2.4 起
另请参见
GtkFileFilter


------------ KeyGTK3gtk_file_filter_set_name ----

gtk_file_filter_set_name
设置过滤器的人类可读名称;这是字符串，如果有可选的过滤器列表，则该字符串将显示在文件选择器用户界面中。
语法
参数
filter- 一GtkFileFilter
name- 过滤器的人类可读名称，或NULL删除任何现有名称。[允许-无]
2.4 起
另请参见
GtkFileFilter


------------ KeyGTK3gtk_fixed_move ----

gtk_fixed_move
将容器的子级移动到给定位置。GtkFixed
语法
参数
fixed- 一个.GtkFixed
widget- 子小部件。
x- 将小部件移动到的水平位置。
y- 将小部件移动到的垂直位置。[br \=“”
另请参见
GtkFixed


------------ KeyGTK3gtk_fixed_new ----

gtk_fixed_new
创建新的 .GtkFixed
返回
一个新的.GtkFixed
另请参见
GtkFixed


------------ KeyGTK3gtk_fixed_put ----

gtk_fixed_put
将小部件添加到给定位置的容器中。GtkFixed
语法
参数
fixed- 一个.GtkFixed
widget- 要添加的小部件。
x- 放置小部件的水平位置。
y- 放置小部件的垂直位置。
另请参见
GtkFixed


------------ KeyGTK3gtk_flow_box_child_changed ----

gtk_flow_box_child_changed
将子项标记为已更改，从而导致更新依赖于此项的任何状态。这会影响排序和筛选。请注意，对此方法的调用必须与用于排序和筛选函数的数据同步。例如，如果列表镜像了一些外部数据集，并且当您在第一个子节点上callgtk_flow_box_child_changed（）时，*两个*子项在外部数据集中发生了变化，则排序函数必须仅读取两个已更改子项中的第一个子项的新数据，否则子项的诉诸将是错误的。这通常意味着，如果您不完全控制数据模型，则必须将影响排序和过滤功能的数据复制到小部件本身中。另一个替代方法是在任何模型更改上调用gtk_flow_box_invalidate_sort（），但这更昂贵。
语法
参数
child- 一GtkFlowBoxChild
自 3.1 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_child_get_index ----

gtk_flow_box_child_get_index
获取子项在其容器中的当前索引。GtkFlowBox
语法
参数
child- 一GtkFlowBoxChild
返回
子项的索引，如果子项位于流框中，则为 -1。
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_child_is_selected ----

gtk_flow_box_child_is_selected
返回当前是否在其容器中选择了子项。GtkFlowBox
语法
参数
child- 一GtkFlowBoxChild
返回
如果选择了子项，则为 TRUE
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_child_new ----

gtk_flow_box_child_new
创建一个新的 ，用作 的子项。GtkFlowBoxChildGtkFlowBox
返回
一个新的GtkFlowBoxChild
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_activate_on_single_click ----

gtk_flow_box_get_activate_on_single_click
返回子项是否在单击时激活。
语法
参数
box- 一GtkFlowBox
返回
如果孩子在单击时被激活，则为 TRUE，否则为 FALSE
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_child_at_index ----

gtk_flow_box_get_child_at_index
获取框中的第 n 个子项。
语法
参数
box- 一GtkFlowBox
idx- 孩子的位置
返回
子小部件，它将始终是 .[无转移]GtkFlowBoxChild
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_column_spacing ----

gtk_flow_box_get_column_spacing
获取水平间距。
语法
参数
box- 一GtkFlowBox
返回
水平间距
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_homogeneous ----

gtk_flow_box_get_homogeneous
返回框是否均匀（所有子项的大小相同）。请参见gtk_box_set_homogeneous（）。
语法
参数
box- 一GtkFlowBox
返回
如果框是同质的，则为 TRUE。
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_max_children_per_line ----

gtk_flow_box_get_max_children_per_line
获取每行的最大子项数。
语法
参数
box- 一GtkFlowBox
返回
每行的最大子项数
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_min_children_per_line ----

gtk_flow_box_get_min_children_per_line
获取每行的最小子项数。
语法
参数
box- 一GtkFlowBox
返回
每行的最小子项数
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_row_spacing ----

gtk_flow_box_get_row_spacing
获取垂直间距。
语法
参数
box- 一GtkFlowBox
返回
垂直间距
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_selected_children ----

gtk_flow_box_get_selected_children
创建所有选定子项的列表。
语法
参数
box- 一GtkFlowBox
返回
A，包含每个选定子项的 。完成后使用g_list_free（） 免费。[element-type GtkFlowBoxChild][转移容器]GListGtkWidget
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_get_selection_mode ----

gtk_flow_box_get_selection_mode
获取框的选择模式。
语法
参数
box- 一GtkFlowBox
返回
这GtkSelectionMode
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_insert ----

gtk_flow_box_insert
将构件插入到框中的位置。如果设置了排序函数，则小部件实际上将插入到计算的位置，并且此函数具有与gtk_container_add（）相同的效果。如果位置为 -1，或大于框中子项的总数，则小部件将附加到末尾。
语法
参数
box- 一GtkFlowBox
widget- 要添加GtkWidget
position- 插入子项的位置
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_invalidate_filter ----

gtk_flow_box_invalidate_filter
更新所有子级的筛选。当盒子上的滤波器函数的结果由于外部因素而改变时，调用此函数。例如，如果过滤器函数只是查找特定的搜索词，并且带有该字符串的条目已更改，则将使用此选项。
语法
参数
box- 一GtkFlowBox
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_invalidate_sort ----

gtk_flow_box_invalidate_sort
Updates the sorting for all children.Call this when the result of the sort function onbox is changed due to an external factor.
Syntax
Parameters
box  -  	a GtkFlowBox
Since 3.12
See Also
GtkFlowBox


------------ KeyGTK3gtk_flow_box_new ----

gtk_flow_box_new
Creates a GtkFlowBox.
Returns
a new  containerGtkFlowBox
Since 3.12
See Also
GtkFlowBox


------------ KeyGTK3gtk_flow_box_selected_foreach ----

gtk_flow_box_selected_foreach
Calls a function for each selected child.Note that the selection cannot be modified from withinthis function.
Syntax
Parameters
box  -  	a GtkFlowBox
func  -  	 the function to call for each selected child. [scope call]
data  -  	user data to pass to the function
Since 3.12
See Also
GtkFlowBox


------------ KeyGTK3gtk_flow_box_select_all ----

gtk_flow_box_select_all
选择 box 的所有子项（如果选择模式允许）。
语法
参数
box- 一GtkFlowBox
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_select_child ----

gtk_flow_box_select_child
选择框的单个子项（如果选择模式允许）。
语法
参数
box- 一GtkFlowBox
child- 盒子的孩子
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_activate_on_single_click ----

gtk_flow_box_set_activate_on_single_click
如果 single 为 TRUE，则当您单击子项时，它们将被激活，否则您需要双击。
语法
参数
box- 一GtkFlowBox
single- TRUE，只需单击一下即可发出儿童激活
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_column_spacing ----

gtk_flow_box_set_column_spacing
设置要在子项之间添加的水平空间。查看酒店。?column-spacing?
语法
参数
box- 一GtkFlowBox
spacing- 要使用的间距
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_filter_func ----

gtk_flow_box_set_filter_func
通过在盒子上设置过滤功能，人们可以动态决定要显示哪些孩子。例如，实现仅显示与搜索词匹配的子项的搜索函数。在调用后，将为每个子级调用filter_func，并且每次子项更改（viagtk_flow_box_child_changed（））或调用gtk_flow_box_invalidate_filter（）时，都会继续调用该filter_func。
语法
参数
box- 一GtkFlowBox
filter_func- 回调，您可以过滤要显示的子级。[结束user_data][允许-无]
user_data- 传递给filter_func的用户数据
destroy- 销毁user_data通知程序
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_hadjustment ----

gtk_flow_box_set_hadjustment
将调整连接到盒子中的焦点处理。该调整还用于在宽带选择期间进行自动滚动。有关获取调整的典型方法，请参阅 gtk_scrolled_window_get_hadjustment（）;有关设置垂直调整的andgtk_flow_box_set_vadjustment（）。调整必须以像素单位为单位，并且与盒子的直接子项的分配在同一坐标系统中。
语法
参数
box- 一GtkFlowBox
adjustment- 当焦点在容器的后代之间移动时应进行调整
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_homogeneous ----

gtk_flow_box_set_homogeneous
设置 box 的属性，控制 box 的所有子项在框中是否都给定相等的间距。?homogeneous?
语法
参数
box- 一GtkFlowBox
homogeneous- TRUE 用于创建相等的分配，FALSE 用于可变分配
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_max_children_per_line ----

gtk_flow_box_set_max_children_per_line
设置要请求的最大子项数，并为 box' 的方向分配空间。设置每个行的最大子项数会使总体自然大小请求在给定方向上不再超过n_children个子项。
语法
参数
box- 一GtkFlowBox
n_children- 每行的最大子项数
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_min_children_per_line ----

gtk_flow_box_set_min_children_per_line
设置在流动之前在盒子的方向上排列的最小子项数。
语法
参数
box- 一GtkFlowBox
n_children- 每行最小儿童数
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_row_spacing ----

gtk_flow_box_set_row_spacing
设置要在子项之间添加的垂直间距。查看酒店。?row-spacing?
语法
参数
box- 一GtkFlowBox
spacing- 要使用的间距
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_selection_mode ----

gtk_flow_box_set_selection_mode
设置所选内容在框中的工作方式。有关详细信息，请参阅。GtkSelectionMode
语法
参数
box- 一GtkFlowBox
mode- 新的选择模式
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_sort_func ----

gtk_flow_box_set_sort_func
通过在框上设置排序函数，可以根据子项的内容动态地对框的子项进行排序。在调用后，将为每个子级调用sort_func，并且每次子项更改（viagtk_flow_box_child_changed（））和调用gtk_flow_box_invalidate_sort（）时，都会继续调用该sort_func。
语法
参数
box- 一GtkFlowBox
sort_func- 排序功能。[结束user_data][允许-无]
user_data- 传递给sort_func的用户数据
destroy- 销毁user_data通知程序
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_set_vadjustment ----

gtk_flow_box_set_vadjustment
将调整连接到盒子中的焦点处理。该调整还用于在宽带选择期间进行自动滚动。有关获取调整的典型方法，请参见 gtk_scrolled_window_get_vadjustment（），有关设置水平调整的andgtk_flow_box_set_hadjustment（）。调整必须以像素单位为单位，并且与盒子的直接子项的分配在同一坐标系统中。
语法
参数
box- 一GtkFlowBox
adjustment- 当焦点在容器的后代之间移动时应进行调整
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_unselect_all ----

gtk_flow_box_unselect_all
取消选择 box 的所有子项（如果选择模式允许）。
语法
参数
box- 一GtkFlowBox
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_flow_box_unselect_child ----

gtk_flow_box_unselect_child
取消选择框的单个子项（如果选择模式允许）。
语法
参数
box- 一GtkFlowBox
child- 盒子的孩子
自 3.12 起
另请参见
GtkFlowBox


------------ KeyGTK3gtk_font_button_get_font_name ----

gtk_font_button_get_font_name
检索当前所选字体的名称。此名称还包括样式和大小信息。如果要使用该字体呈现某些内容，请将此字符串与 pango_font_description_from_string（） 一起使用。如果您有兴趣查看某些值（系列名称，样式，大小，重量），只需从对象中查询这些属性即可。PangoFontDescription
语法
参数
font_button- 一GtkFontButton
返回
不得释放的字体名称的内部副本。
2.4 起
另请参见
GtkFontButton


------------ KeyGTK3gtk_font_button_get_show_size ----

gtk_font_button_get_show_size
返回字体大小是否显示在标签中。
语法
参数
font_button- 一GtkFontButton
返回
字体大小是否将显示在标签中。
2.4 起
另请参见
GtkFontButton


------------ KeyGTK3gtk_font_button_get_show_style ----

gtk_font_button_get_show_style
返回字体样式的名称是否将显示在标签中。
语法
参数
font_button- 一GtkFontButton
返回
字体样式是否将显示在标签中。
2.4 起
另请参见
GtkFontButton


------------ KeyGTK3gtk_font_button_get_title ----

gtk_font_button_get_title
检索字体选择器对话框的标题。
语法
参数
font_button- 一GtkFontButton
返回
不得释放的标题字符串的内部副本。
自 2.
另请参见
GtkFontButton


------------ KeyGTK3gtk_font_button_get_use_font ----

gtk_font_button_get_use_font
返回是否在标签中使用所选字体。
语法
参数
font_button- 一GtkFontButton
返回
是否在标签中使用所选字体。
2.4 起
另请参见
GtkFontButton


------------ KeyGTK3gtk_font_button_get_use_size ----

gtk_font_button_get_use_size
返回是否在标签中使用所选大小。
语法
参数
font_button- 一GtkFontButton
返回
是否在标签中使用所选大小。
2.4 起
另请参见
GtkFontButton


------------ KeyGTK3gtk_font_button_new ----

gtk_font_button_new
创建新的字体选取器构件。
返回
一个新的字体选取器小部件。
2.4 起
另请参见
GtkFontButton


------------ KeyGTK3gtk_font_button_new_with_font ----

gtk_font_button_new_with_font
创建新的字体选取器构件。
语法
参数
fontname- 字体选择器对话框中显示的字体名称
返回
一个新的字体选取器小部件。
2.4 起
另请参见
GtkFontButton


------------ KeyGTK3gtk_font_button_set_font_name ----

gtk_font_button_set_font_name
在字体选取器对话框中设置或更新当前显示的字体。
语法
参数
font_button- 一GtkFontButton
fontname- 字体选择器对话框中显示的字体名称
返回
真
2.4 起
另请参见
GtkFontButton


------------ KeyGTK3gtk_font_button_set_show_size ----

gtk_font_button_set_show_size
如果show_size为 TRUE，则字体大小将与所选字体的名称一起显示。
语法
参数
font_button- 一GtkFontButton
show_size- 如果字体大小应在对话框中显示，则为 TRUE。
2.4 起
另请参见
GtkFontButton


------------ KeyGTK3gtk_font_button_set_show_style ----

gtk_font_button_set_show_style
如果show_style为 TRUE，则字体样式将与所选字体的名称一起显示。
语法
参数
font_button- 一GtkFontButton
show_style- 如果字体样式应显示在标签中，则为 TRUE。
2.4 起
另请参见
GtkFontButton


------------ KeyGTK3gtk_font_button_set_title ----

gtk_font_button_set_title
设置字体选择器对话框的标题。
语法
参数
font_button- 一GtkFontButton
title- 包含字体选择器对话框标题的字符串
2.4 起
另请参见
GtkFontButton


------------ KeyGTK3gtk_font_button_set_use_font ----

gtk_font_button_set_use_font
如果use_font为 TRUE，则字体名称将使用所选字体书写。
语法
参数
font_button- 一GtkFontButton
use_font- 如果为 TRUE，字体名称将使用所选字体书写。
2.4 起
另请参见
GtkFontButton


------------ KeyGTK3gtk_font_button_set_use_size ----

gtk_font_button_set_use_size
如果use_size为 TRUE，则字体名称将使用所选大小写入。
语法
参数
font_button- 一GtkFontButton
use_size- 如果为 TRUE，字体名称将使用所选大小书写。
2.4 起
另请参见
GtkFontButton


------------ KeyGTK3gtk_font_chooser_dialog_new ----

gtk_font_chooser_dialog_new
创建新的 .GtkFontChooserDialog
语法
参数
title- 对话框的标题，或 NULL。[允许-无]
parent- 对话框的瞬态父级，或 NULL。[允许-无]
返回
一个新的GtkFontChooserDialog
自 3.
另请参见
GtkFontChooserDialog


------------ KeyGTK3gtk_font_chooser_get_font ----

gtk_font_chooser_get_font
获取当前选定的字体名称。请注意，这可能与您withgtk_font_chooser_set_font（） 设置的字符串不同，因为字体选择器小部件可能会规范字体名称，从而返回具有不同结构的字符串。例如？Helvetica Italic Bold 12？可以规范化为 ？Helvetica Bold Italic 12？.如果要比较双字体描述，请使用 pango_font_description_equal（）。
语法
参数
fontchooser- 一GtkFontChooser
返回
具有当前字体名称的字符串，如果未选择任何字体，则为 NULL。您必须使用g_free（） 释放此字符串。[转移完整][允许-无]
自 3.2 起
另请参见
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_get_font_desc ----

gtk_font_chooser_get_font_desc
获取当前选定的字体。请注意，这可能与您withgtk_font_chooser_set_font（） 设置的字符串不同，因为字体选择器小部件可能会规范字体名称，从而返回具有不同结构的字符串。例如？Helvetica Italic Bold 12？可以规范化为 ？Helvetica Bold Italic 12？.如果要比较双字体描述，请使用 pango_font_description_equal（）。
语法
参数
fontchooser- 一GtkFontChooser
返回
A 表示当前字体，如果未选择任何字体，则为 NULL。[转移完整][允许-无]PangoFontDescription
自 3.2 起
另请参见
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_get_font_face ----

gtk_font_chooser_get_font_face
获取表示所选字体组的详细信息（即系列、倾斜、粗细、宽度等）。如果未安装所选字体，则返回 NULL。PangoFontFace
语法
参数
fontchooser- 一GtkFontChooser
返回
表示所选字体组详细信息的 A，或 NULL。返回的对象归字体选择者所有，不得修改或释放。[无转移]PangoFontFace
自 3.2 起
另请参见
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_get_font_family ----

gtk_font_chooser_get_font_family
获取表示所选字体系列的 。字体系列是字体的集合。如果未安装所选字体，则返回 NULL。PangoFontFamily
语法
参数
fontchooser- 一GtkFontChooser
返回
表示所选字体系列的字体，或 NULL。返回的对象归 fontcooserand 所有，不得修改或释放。[无转移]PangoFontFamily
自 3.2 起
另请参见
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_get_font_size ----

gtk_font_chooser_get_font_size
The selected font size.
Syntax
Parameters
fontchooser  -  	a GtkFontChooser
Returns
A n integer representing the selected font size,or -1 if no font size is selected.
Since 3.2
See Also
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_get_preview_text ----

gtk_font_chooser_get_preview_text
获取预览区域中显示的文本。
语法
参数
fontchooser- 一GtkFontChooser
返回
预览区域中显示的文本。[转移完整]
自 3.2 起
另请参见
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_get_show_preview_entry ----

gtk_font_chooser_get_show_preview_entry
返回是否显示预览条目。
语法
参数
fontchooser- 一GtkFontChooser
返回
如果预览条目显示为 TRUE;如果显示预览条目，则为 FALSE。如果预览条目处于隐藏状态，则为 FALSE。
自 3.2 起
另请参见
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_set_filter_func ----

gtk_font_chooser_set_filter_func
添加一个筛选函数，该函数决定要在字体选择器中显示的字体。
语法
参数
fontchooser- 一GtkFontChooser
filter- a 或 NULL。[允许-无]GtkFontFilterFunc
user_data- 要传递到过滤器的数据
destroy- 函数调用免费数据何时不再需要
自 3.
另请参见
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_set_font ----

gtk_font_chooser_set_font
Sets the currently-selected font.
Syntax
Parameters
fontchooser  -  	a GtkFontChooser
fontname  -  	a font name like ?Helvetica 12? or ?Times Bold 18?
Since 3.2
See Also
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_set_font_desc ----

gtk_font_chooser_set_font_desc
设置当前从font_desc中选择的字体。
语法
参数
fontchooser- 一GtkFontChooser
font_desc- 一PangoFontDescription
自 3.2 起
另请参见
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_set_preview_text ----

gtk_font_chooser_set_preview_text
设置预览区域中显示的文本。该文本用于显示所选字体的外观。
语法
参数
fontchooser- 一GtkFontChooser
text- 要在预览区域中显示的文本。[无转移]
自 3.2 起
另请参见
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_set_show_preview_entry ----

gtk_font_chooser_set_show_preview_entry
显示或隐藏可编辑的预览条目。
语法
参数
fontchooser- 一GtkFontChooser
show_preview_entry- 是否显示可编辑的预览条目
自 3.2 起
另请参见
GtkFontChooser


------------ KeyGTK3gtk_font_chooser_widget_new ----

gtk_font_chooser_widget_new
创建新的 .GtkFontChooserWidget
返回
一个新的GtkFontChooserWidget
自 3.
另请参见
GtkFontChooserWidget


------------ KeyGTK3gtk_font_selection_dialog_get_cancel_button ----

gtk_font_selection_dialog_get_cancel_button
gtk_font_selection_dialog_get_cancel_button自版本 3.2 起已弃用，不应在新编写的代码中使用。使用 获取 ？取消？按钮。GtkFontChooserDialog
语法
参数
fsd- 一GtkFontSelectionDialog
返回
对话框中使用的 ？取消？按钮。[无转移]GtkWidget
自 2.14 起
另请参见
GtkFontSelectionDialog


------------ KeyGTK3gtk_font_selection_dialog_get_font_name ----

gtk_font_selection_dialog_get_font_name
gtk_font_selection_dialog_get_font_name自 3.2 版起已弃用，不应在新编写的代码中使用。使用 获取当前选定的字体名称。请注意，这可能与您使用gtk_font_selection_dialog_set_font_name（）设置的字符串不同，因为字体选择构件可能会规范化字体名称，从而返回具有不同结构的字符串。例如？Helvetica Italic Bold 12？可以归一化为 ？Helvetica Bold Italic 12？.如果要比较两个字体描述，请使用 pango_font_description_equal（）。。GtkFontChooserDialog
语法
参数
fsd- 一GtkFontSelectionDialog
返回
具有当前字体名称的字符串，如果选择了 nofont，则为 NULL。必须使用 g_free（） 释放此字符串。
另请参见
GtkFontSelectionDialog


------------ KeyGTK3gtk_font_selection_dialog_get_font_selection ----

gtk_font_selection_dialog_get_font_selection
gtk_font_selection_dialog_get_font_selection自版本 3.2 起已弃用，不应在新编写的代码中使用。使用 检索嵌入在对话框中的小部件。GtkFontChooserDialogGtkFontSelection
语法
参数
fsd- 一GtkFontSelectionDialog
返回
嵌入式 .[无转移]GtkFontSelection
自 2.2 起
另请参见
GtkFontSelectionDialog


------------ KeyGTK3gtk_font_selection_dialog_get_ok_button ----

gtk_font_selection_dialog_get_ok_button
gtk_font_selection_dialog_get_ok_button自 3.2 版起已弃用，不应在新编写的代码中使用。使用 获取 ？还行？按钮。GtkFontChooserDialog
语法
参数
fsd- 一GtkFontSelectionDialog
返回
对话框中使用的 ？还行？按钮。[无转移]GtkWidget
自 2.14 起
另请参见
GtkFontSelectionDialog


------------ KeyGTK3gtk_font_selection_dialog_get_preview_text ----

gtk_font_selection_dialog_get_preview_text
gtk_font_selection_dialog_get_preview_text自 3.2 版起已弃用，不应在新编写的代码中使用。使用 获取预览区域中显示的文本。GtkFontChooserDialog
语法
参数
fsd- 一GtkFontSelectionDialog
返回
预览区域中显示的文本。此字符串归小部件所有，不应修改或释放
另请参见
GtkFontSelectionDialog


------------ KeyGTK3gtk_font_selection_dialog_new ----

gtk_font_selection_dialog_new
gtk_font_selection_dialog_new自 3.2 版起已弃用，不应在新编写的代码中使用。使用 创建新 .GtkFontChooserDialogGtkFontSelectionDialog
语法
参数
title- 对话框窗口的标题
返回
一个新的GtkFontSelectionDialog
另请参见
GtkFontSelectionDialog


------------ KeyGTK3gtk_font_selection_dialog_set_font_name ----

gtk_font_selection_dialog_set_font_name
gtk_font_selection_dialog_set_font_name自版本 3.2 起已弃用，不应在新编写的代码中使用。使用 设置当前选定的字体。GtkFontChooserDialog
语法
参数
fsd- 一GtkFontSelectionDialog
fontname- 字体名称像 ？Helvetica 12？或？时代大胆 18？
返回
如果在 fsdis 中选择的字体现在指定了字体名称，则为 TRUE，否则为 FALSE。
另请参见
GtkFontSelectionDialog


------------ KeyGTK3gtk_font_selection_dialog_set_preview_text ----

gtk_font_selection_dialog_set_preview_text
gtk_font_selection_dialog_set_preview_text自版本 3.2 起已弃用，不应在新编写的代码中使用。使用 设置预览区域中显示的文本。GtkFontChooserDialog
语法
参数
fsd- 一GtkFontSelectionDialog
text- 要在预览区域中显示的文本
另请参见
GtkFontSelectionDialog


------------ KeyGTK3gtk_font_selection_get_face ----

gtk_font_selection_get_face
gtk_font_selection_get_face自 3.2 版起已弃用，不应在新编写的代码中使用。Use 获取表示所选字体组的详细信息（即系列、倾斜、粗细、宽度等）。GtkFontChooserPangoFontFace
语法
参数
fontsel- 一GtkFontSelection
返回
表示所选字体组详细信息的 A。返回的对象归方块所有，不得修改或释放。[无转移]PangoFontFace
自 2.14 起
另请参见
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_face_list ----

gtk_font_selection_get_face_list
gtk_font_selection_get_face_list自 3.2 版起已弃用，不应在新编写的代码中使用。Use This 返回列出所选字体的所有可用样式的。例如？定期？？粗体？等。GtkFontChooserGtkTreeView
语法
参数
fontsel- 一GtkFontSelection
返回
A 是字体的一部分。[无转移]GtkWidget
自 2.14 起
另请参见
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_family ----

gtk_font_selection_get_family
gtk_font_selection_get_family自版本 3.2 起已弃用，不应在新编写的代码中使用。使用 获取表示所选字体系列的 。GtkFontChooserPangoFontFamily
语法
参数
fontsel- 一GtkFontSelection
返回
表示所选字体系列的字体。字体系列是字体的集合。返回的对象归 fontseland 所有，不得修改或释放。[无转移]PangoFontFamily
自 2.14 起
另请参见
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_family_list ----

gtk_font_selection_get_family_list
gtk_font_selection_get_family_list自 3.2 版起已弃用，不应在新编写的代码中使用。使用 This 返回列出字体系列的 ， 例如 ， ？无？？衬线？等GtkFontChooserGtkTreeView
语法
参数
fontsel- 一GtkFontSelection
返回
A 是字体的一部分。[无转移]GtkWidget
自 2.14 起
另请参见
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_font_name ----

gtk_font_selection_get_font_name
gtk_font_selection_get_font_name自 3.2 版起已弃用，不应在新编写的代码中使用。使用 获取当前选定的字体名称。请注意，这可能与您使用gtk_font_selection_set_font_name（）设置的字符串不同，因为字体选择构件可能会规范化字体名称，从而返回具有不同结构的字符串。例如？Helvetica Italic Bold 12？可以归一化为 ？Helvetica Bold Italic 12？.如果要比较两个字体描述，请使用 pango_font_description_equal（）。。GtkFontChooser
语法
参数
fontsel- 一GtkFontSelection
返回
具有当前字体名称的字符串，如果未选择任何字体，则为 NULL。必须使用 g_free（） 释放此字符串。
另请参见
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_preview_entry ----

gtk_font_selection_get_preview_entry
gtk_font_selection_get_preview_entry自 3.2 版起已弃用，不应在新编写的代码中使用。Use This 返回用于将字体显示为预览的 。GtkFontChooserGtkEntry
语法
参数
fontsel- 一GtkFontSelection
返回
A 是字体的一部分。[无转移]GtkWidget
自 2.14 起
另请参见
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_preview_text ----

gtk_font_selection_get_preview_text
gtk_font_selection_get_preview_text自版本 3.2 起已弃用，不应在新编写的代码中使用。使用 获取预览区域中显示的文本。GtkFontChooser
语法
参数
fontsel- 一GtkFontSelection
返回
预览区域中显示的文本。此字符串归小部件所有，不应修改或释放
另请参见
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_size ----

gtk_font_selection_get_size
gtk_font_selection_get_size自版本 3.2 起已弃用，不应在新编写的代码中使用。使用所选字体大小。GtkFontChooser
语法
参数
fontsel- 一GtkFontSelection
返回
表示所选字体大小的 n 整数，如果未选择字体大小，则为 -1。
自 2.14 起
另请参见
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_size_entry ----

gtk_font_selection_get_size_entry
gtk_font_selection_get_size_entry自版本 3.2 起已弃用，不应在新编写的代码中使用。Use This 返回 used，以允许用户手动编辑字体编号，而不是从字体大小列表中选择它。GtkFontChooserGtkEntry
语法
参数
fontsel- 一GtkFontSelection
返回
A 是字体的一部分。[无转移]GtkWidget
自 2.14 起
另请参见
GtkFontSelection


------------ KeyGTK3gtk_font_selection_get_size_list ----

gtk_font_selection_get_size_list
gtk_font_selection_get_size_list自版本 3.2 起已弃用，不应在新编写的代码中使用。Use This 返回用于列出字体大小的 。GtkFontChooserGtkTreeView
语法
参数
fontsel- 一GtkFontSelection
返回
A 是字体的一部分。[无转移]GtkWidget
自 2.1 起
另请参见
GtkFontSelection


------------ KeyGTK3gtk_font_selection_new ----

gtk_font_selection_new
gtk_font_selection_new自 3.2 版起已弃用，不应在新编写的代码中使用。使用改为创建一个新的 .GtkFontChooserWidgetGtkFontSelection
返回
一个新的GtkFontSelection
另请参见
GtkFontSelection


------------ KeyGTK3gtk_font_selection_set_font_name ----

gtk_font_selection_set_font_name
gtk_font_selection_set_font_name自 3.2 版起已弃用，不应在新编写的代码中使用。使用“设置当前选定的字体”。请注意，字体需要知道它将在其中出现的屏幕才能正常工作;这可以通过在调用此函数之前简单地确保将fontsel插入到顶级窗口中来保证。GtkFontChooser
语法
参数
fontsel- 一GtkFontSelection
fontname- 字体名称像 ？Helvetica 12？或？时代大胆 18？
返回
如果字体可以成功设置，则为 TRUE;如果不存在此类字体，或者如果 fontseldoesn？ t 属于特定屏幕，则为 FALSE。
另请参见
GtkFontSelection


------------ KeyGTK3gtk_font_selection_set_preview_text ----

gtk_font_selection_set_preview_text
gtk_font_selection_set_preview_text自 3.2 版起已弃用，不应在新编写的代码中使用。使用 设置预览区域中显示的文本。该文本用于显示所选字体的外观。GtkFontChooser
语法
参数
fontsel- 一GtkFontSelection
text- 要在预览区域中显示的文本
另请参见
GtkFontSelection


------------ KeyGTK3gtk_frame_get_label ----

gtk_frame_get_label
如果框架的标签构件是 ，则返回标签构件中的文本。（如果将非 NULL 参数传递给 gtk_frame_new（）），则该帧将具有用于标签构件的参数。GtkLabelGtkLabel
语法
参数
frame- 一GtkFrame
返回
标签中的文本，如果没有标签小部件或可标记的小部件是 nota，则为 NULL。此字符串归 GTK+ 所有，不得修改或释放。GtkLabel
另请参见
GtkFrame


------------ KeyGTK3gtk_frame_get_label_align ----

gtk_frame_get_label_align
检索框架标签的 X 和 Y 对齐方式。Seegtk_frame_set_label_align（）.
语法
参数
frame- 一GtkFrame
xalign- 存储 X 对齐帧标签的位置，或 NULL。[输出][允许-无]
yalign- 存储 X 对齐帧标签的位置，或 NULL。[输出][允许-无]
另请参见
GtkFrame


------------ KeyGTK3gtk_frame_get_label_widget ----

gtk_frame_get_label_widget
妫€绱㈡鏋剁殑鏍囩鏋勪欢銆係eegtk_frame_set_label_widget锛堬級.
璇硶
鍙傛暟
frame- 涓€GtkFrame
杩斿洖
鏍囩寰欢锛屽鏋滄病鏈夛紝鍒欎负 NULL銆俒鏃犺浆绉籡
鍙﹁鍙傝
GtkFrame


------------ KeyGTK3gtk_frame_get_shadow_type ----

gtk_frame_get_shadow_type
妫€绱㈠抚鐨勯槾褰辩被鍨嬨€係eegtk_frame_set_shadow_type锛堬級.
璇硶
鍙傛暟
frame- 涓€GtkFrame
杩斿洖
甯х殑褰撳墠闃村奖绫诲瀷
鍙﹁鍙傝
GtkFrame


------------ KeyGTK3gtk_frame_new ----

gtk_frame_new
创建一个带有可选标签的新 ，该标签标签。如果标签为 NULL，则省略该标签。GtkFrame
语法
参数
label- 要用作框架标签的文本。[允许-无]
返回
一个新的小部件GtkFrame
另请参见
GtkFrame


------------ KeyGTK3gtk_frame_set_label ----

gtk_frame_set_label
设置标签的文本。如果标签为 NULL，则删除当前标签。
语法
参数
frame- 一GtkFrame
label- 要用作框架标签的文本。[允许-无]
另请参见
GtkFrame


------------ KeyGTK3gtk_frame_set_label_align ----

gtk_frame_set_label_align
设置框架构件标签的对齐方式。新创建的帧的默认值为 0.0 和 0.5。
语法
参数
frame- 一GtkFrame
xalign- 标签沿微件顶部边缘的位置。值 0.0 表示左对齐;1.0 表示右对齐。
yalign- 标签的 y 对齐方式。值 0.0 在框架下方对齐;1.0 在框架上方对齐。如果值正好为 0.0 或 1.0，则不会绘制框架中的间隙，因为标签将完全位于框架的上方或下方。
另请参见
GtkFrame


------------ KeyGTK3gtk_frame_set_label_widget ----

gtk_frame_set_label_widget
设置框架的标签构件。这是嵌入在框架上边缘作为 atitle 的小部件。
语法
参数
frame- 一GtkFrame
label_widget- 新的标签小部件
另请参见
GtkFrame


------------ KeyGTK3gtk_frame_set_shadow_type ----

gtk_frame_set_shadow_type
设置帧的阴影类型。
语法
参数
frame- 一GtkFrame
type- 新GtkShadowType
另请参见
GtkFrame


------------ KeyGTK3gtk_get_binary_age ----

gtk_get_binary_age
返回在构建运行进程所针对的 GTK+ 库时传递给 libtool 的二进制年龄。如果libtool对你来说毫无意义，那就不要再谈了。
返回
GTK+ 库的二进制时代
自 3.0 起
另请参见
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_get_current_event ----

gtk_get_current_event
获取 GTK+ 当前正在处理的事件的副本。例如，如果您正在处理一个信号，则当前事件将是触发 ：：clicked 信号的事件。?clicked?GdkEventButton
返回
当前事件的副本，如果没有当前事件，则为 NULL。返回的事件必须使用gdk_event_free（） 进行freed。[转移完整]
另请参见
gtk3-General


------------ KeyGTK3gtk_get_current_event_device ----

gtk_get_current_event_device
如果存在当前事件并且它有设备，请返回该设备，否则返回 NULL。
返回
a 或空。[无转移]GdkDevice
另请参见
gtk3-General


------------ KeyGTK3gtk_get_current_event_state ----

gtk_get_current_event_state
如果存在当前事件并且它具有状态字段，则将该状态字段放在状态中并返回 TRUE，否则返回FALSE。
语法
参数
state- 存储当前事件状态的位置。[输出]
返回
如果存在当前事件并且具有状态字段，则为 TRUE
另请参见
gtk3-General


------------ KeyGTK3gtk_get_current_event_time ----

gtk_get_current_event_time
如果存在当前事件并且具有时间戳，则返回该时间戳，否则返回GDK_CURRENT_TIME。
返回
当前事件的时间戳，或GDK_CURRENT_TIME。
另请参见
gtk3-General


------------ KeyGTK3gtk_get_default_language ----

gtk_get_default_language
返回当前无效的默认语言的 。（请注意，这可能会在应用程序的整个生命周期内发生变化。默认语言派生自当前本地语言。例如，它确定 GTK+ 是使用从右到左还是从左到右的文本方向。此函数等效于 pango_language_get_default（）。有关详细信息，请参阅该函数。PangoLanguage
返回
默认语言为 ，不得释放PangoLanguage
另请参见
gtk3-General


------------ KeyGTK3gtk_get_event_widget ----

gtk_get_event_widget
如果事件为 NULL 或事件未与任何小部件关联，则返回 NULL，否则返回最初接收该小部件的小部件。
语法
参数
event- 一GdkEvent
返回
最初接收事件的小部件，或 NULL。[无转移]
另请参见
gtk3-General


------------ KeyGTK3gtk_get_interface_age ----

gtk_get_interface_age
返回传递给 libtool 的接口年龄在构建运行进程所针对的 GTK+ 库时。如果libtool对你来说毫无意义，那就不要再谈了。
返回
GTK+ 库的接口时代
自 3.0 起
另请参见
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_get_locale_direction ----

gtk_get_locale_direction
获取当前区域设置的方向。这是文本和 UI 的预期读取方向。此函数依赖于使用setlocale（）设置的当前区域设置，否则将默认为设置GTK_TEXT_DIR_LTRdirection。GTK_TEXT_DIR_NONE将永远不会被退回。GTK+ 根据本地化gtk_init（） 设置默认文本方向，通常应usegtk_widget_get_direction（） 或 gtk_widget_get_default_direction（） 来获取当前 direcion。只有在 GTK+ 初始化后更改了语言环境时，才需要此函数。在这种情况下，您可以使用它来更新默认文本方向，如下所示： 123[/语法] [语法]setlocale （LC_ALL， new_locale）;d权限 = gtk_get_locale_direction （）;gtk_widget_set_default_direction （方向）;[/语法]
返回
当前区域设置的GtkTextDirection
自 3.12 起
另请参见
gtk3-General


------------ KeyGTK3gtk_get_major_version ----

gtk_get_major_version
返回 GTK+ 库的主版本号。（例如，在 GTK+ 版本 3.1.5 中，这是 3。此函数位于库中，因此它表示您的代码正在运行的 GTK+ 库。与宏形成对比，宏表示您在编译代码时包含的 GTK+ 标头的主要版本。GTK_MAJOR_VERSION
返回
GTK+ 库的主要版本号
自 3.0 起
另请参见
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_get_micro_version ----

gtk_get_micro_version
返回 GTK+ 库的微型版本号。（例如，在 GTK+ 版本 3.1.5 中，这是 5。此函数位于库中，因此它表示您的代码正在运行的 GTK+ 库。与宏形成对比，宏表示您在编译代码时包含的 GTK+ 标头的微版本。GTK_MICRO_VERSION
返回
GTK+ 库的微型版本号
自 3.0 起
另请参见
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_get_minor_version ----

gtk_get_minor_version
返回 GTK+ 库的次要版本号。（例如，在 GTK+ 版本 3.1.5 中，这是 1。此函数位于库中，因此它表示您的代码正在运行的 GTK+ 库。与宏形成对比，宏表示编译代码时包含的 GTK+ 标头的次要版本。GTK_MINOR_VERSION
返回
GTK+ 库的次要版本号
自 3.0 起
另请参见
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_get_option_group ----

gtk_get_option_group
为 GTK+ 和 GDK 识别的命令行参数返回 a。如果您usingg_option_context_parse（）来解析命令行参数，则应将此组添加到您的 g_option_context_add_group（） 中。GOptionGroupGOptionContext
语法
参数
open_default_display- 是否在解析命令行参数时打开默认显示
返回
a 用于 GTK+ 识别的命令行参数GOptionGroup
自 2.6 起
另请参见
gtk3-General


------------ KeyGTK3gtk_grab_add ----

gtk_grab_add
使小部件成为当前抓取的小部件。这意味着与同一应用程序中的其他小部件的交互被阻止，鼠标和键盘事件被传递到此小部件。如果 widget 不敏感，则它不会设置为当前抓取的小部件，并且此函数不执行任何操作。
语法
参数
widget- 抓取键盘和指针事件的小部件
另请参见
gtk3-General


------------ KeyGTK3gtk_grab_get_current ----

gtk_grab_get_current
查询默认窗口组的当前抓取。
返回
当前具有抓取的小部件，如果没有抓取处于活动状态，则为 NULL。[无转移]
另请参见
gtk3-General


------------ KeyGTK3gtk_grab_remove ----

gtk_grab_remove
从给定的小部件中删除抓取。您必须将调用配对到 gtk_grab_add（） 和 gtk_grab_remove（）。如果小部件没有抓取，则此函数不执行任何操作。
语法
参数
widget- 放弃抓取的小部件
另请参见
gtk3-General


------------ KeyGTK3gtk_gradient_add_color_stop ----

gtk_gradient_add_color_stop
gtk_gradient_add_color_stop自版本 3.8 起已弃用，不应在新编写的代码中使用。已弃用。向渐变添加停止点颜色。GtkGradient
语法
参数
gradient- 一GtkGradient
offset- 色标的偏移量
color- 使用的颜色
自 3.0 起
另请参见
gtk3-GtkGradient


------------ KeyGTK3gtk_gradient_new_linear ----

gtk_gradient_new_linear
gtk_gradient_new_linear自 3.8 版起已弃用，不应在新编写的代码中使用。已弃用。沿 （x0， y0） 和 （x1， y1） 定义的线创建新的线性渐变。在使用渐变之前，必须通过gtk_gradient_add_color_stop（） 添加一些停止颜色。GtkGradient
语法
参数
x0- 起点的X坐标
y0- 起点的Y坐标
x1- 终点的X坐标
y1- 终点的Y坐标
返回
新创建的GtkGradient
自 3.0 起
另请参见
gtk3-GtkGradient


------------ KeyGTK3gtk_gradient_new_radial ----

gtk_gradient_new_radial
gtk_gradient_new_radial自 3.8 版起已弃用，不应在新编写的代码中使用。已弃用。沿由 （x0， y0， radius0） 和 （x1， y1， radius1） 定义的两个圆创建新的径向渐变。在使用渐变之前，必须通过gtk_gradient_add_color_stop（） 添加许多停止颜色。GtkGradient
语法
参数
x0- 开始圆的X坐标
y0- 起始圆的Y坐标
radius0- 起始圆的半径
x1- 结束圆的X坐标
y1- 结束圆的Y坐标
radius1- 末端圆的半径
返回
新创建的GtkGradient
自 3.0 起
另请参见
gtk3-GtkGradient


------------ KeyGTK3gtk_gradient_ref ----

gtk_gradient_ref
gtk_gradient_ref自 3.8 版起已弃用，不应在新编写的代码中使用。已弃用。增加渐变的参考计数。GtkGradient
语法
参数
gradient- 一GtkGradient
返回
相同的渐变
自 3.0 起
另请参见
gtk3-GtkGradient


------------ KeyGTK3gtk_gradient_resolve ----

gtk_gradient_resolve
gtk_gradient_resolve自版本 3.8 起已弃用，不应在新编写的代码中使用。已弃用。如果渐变是可解析的，则将使用解析的梯度作为cairo_pattern_t填充resolved_gradient，并返回 TRUE。通常，如果无法解析渐变，则由于它被定义为在道具中不具有特征的命名颜色之上。GtkGradient
语法
参数
gradient- 一GtkGradient
props  -  	GtkStyleProperties在解析命名颜色时使用
resolved_gradient- 已解析模式的返回位置。[输出]
返回
如果梯度已解析，则为 TRUE
自 3.0 起
另请参见
gtk3-GtkGradient


------------ KeyGTK3gtk_gradient_resolve_for_context ----

gtk_gradient_resolve_for_context
gtk_gradient_resolve_for_context已弃用，不应在新编写的代码中使用。
另请参见
gtk3-GtkGradient


------------ KeyGTK3gtk_gradient_to_string ----

gtk_gradient_to_string
gtk_gradient_to_string自版本 3.8 起已弃用，不应在新编写的代码中使用。已弃用。为渐变创建适合在 GTK CSS 文件中使用的字符串表示形式。GtkGradient
语法
参数
gradient- 要打印的渐变
返回
gradien 的字符串表示形式
另请参见
gtk3-GtkGradient


------------ KeyGTK3gtk_gradient_unref ----

gtk_gradient_unref
gtk_gradient_unref自 3.8 版起已弃用，不应在新编写的代码中使用。已弃用。减少梯度的参考计数，如果引用计数达到 0，则释放其内存。GtkGradient
语法
参数
gradient- 一GtkGradient
自 3.0 起
另请参见
gtk3-GtkGradient


------------ KeyGTK3gtk_grid_attach ----

gtk_grid_attach
将微件添加到网格。孩子的位置由左和上决定。细胞的数量？孩子将占据由宽度和身高决定。
语法
参数
grid- 一GtkGrid
child- 要添加的小部件
left- 要将子项左侧附加到的列号
top- 要将子项的顶部附加到的行号
width- 子项将跨越的列数
height- 子项将跨越的行数
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_attach_next_to ----

gtk_grid_attach_next_to
将微件添加到网格。该构件放置在同级旁边，位于旁边确定的一侧。当同级为 NULL 时，构件将放置在行（forleft 或 right placement）或列 0（对于顶部或底部放置）中，位于以并排指示的末尾。附加标记为 [1]、[2]、[3] 且同级 == NULL 和 side == GTK_POS_LEFT的小部件将生成 3[1] 的布局。
语法
参数
grid- 一GtkGrid
child- 要添加的小部件
sibling- 网格的子项，该子项将被放置在子项的旁边，或 NULL 将子项放在开头或结尾处。[允许-无]
side- 兄弟姐妹的一侧，孩子位于旁边
width- 子项将跨越的列数
height- 子项将跨越的行数
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_get_baseline_row ----

gtk_grid_get_baseline_row
返回定义网格的全局基线的行。
语法
参数
grid- 一GtkGrid
返回
定义全局基线的行索引
自 3.10 起
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_get_child_at ----

gtk_grid_get_child_at
获取网格的子级，其区域覆盖其左上角位于左上角的网格单元。
语法
参数
grid- 一GtkGrid
left- 单元格的左边缘
top- 细胞的上边缘
返回
给定位置的子项，或 NULL。[无转移]
自 3.2 起
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_get_column_homogeneous ----

gtk_grid_get_column_homogeneous
返回网格的所有列是否具有相同的宽度。
语法
参数
grid- 一GtkGrid
返回
网格的所有列是否具有相同的宽度。
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_get_column_spacing ----

gtk_grid_get_column_spacing
返回网格列之间的间距量。
语法
参数
grid- 一GtkGrid
返回
网格的列间距
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_get_row_baseline_position ----

gtk_grid_get_row_baseline_position
返回按 gtk_grid_set_row_baseline_position（） 或默认valueGTK_BASELINE_POSITION_CENTER设置的行的基线位置。
语法
参数
grid- 一GtkGrid
row- 行索引
返回
行的基线位置
自 3.10 起
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_get_row_homogeneous ----

gtk_grid_get_row_homogeneous
返回网格的所有行是否具有相同的高度。
语法
参数
grid- 一GtkGrid
返回
网格的所有行是否具有相同的高度。
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_get_row_spacing ----

gtk_grid_get_row_spacing
返回网格行之间的间距量。
语法
参数
grid- 一GtkGrid
返回
网格的行距
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_insert_column ----

gtk_grid_insert_column
在指定位置插入列。附着在此位置或右侧的子项将向右移动一列。跨越这个位置的子项被生长到跨越新柱子。
语法
参数
grid- 一GtkGrid
position- 插入列的位置
自 3.2 起
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_insert_next_to ----

gtk_grid_insert_next_to
在指定位置插入行或列。新行或新列位于同级行旁边，由并排确定的侧向。如果 side 是 GTK_POS_TOP 或 GTK_POS_BOTTOM，则插入一行。如果边GTK_POS_LEFT GTK_POS_RIGHT，则插入一列。
语法
参数
grid- 一GtkGrid
sibling- 网格的子项，新行或新列将放置在
side- 兄弟姐妹的一侧，孩子位于旁边
自 3.2 起
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_insert_row ----

gtk_grid_insert_row
在指定位置插入一行。附着在此位置或下方的儿童向下移动一行。跨越这个位置的孩子长大到跨越新的行。
语法
参数
grid- 一GtkGrid
position- 插入行的位置
自 3.2 起
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_new ----

gtk_grid_new
创建新的网格构件。
返回
新的GtkGrid
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_remove_column ----

gtk_grid_remove_column
从网格中删除列。放置在此列中的子项将被删除，跨越与此列重叠的子项的子项的宽度将减小 1，并且列后的子项将向左移动。
语法
参数
grid- 一GtkGrid
position- 要删除的列的位置
自 3.10 起
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_remove_row ----

gtk_grid_remove_row
从网格中删除一行。放置在此行中的子项将被移除，跨度与此行重叠的子项的其高度减小 1，并且 roware 下方的子项向上移动。
语法
参数
grid- 一GtkGrid
position- 要删除的行的位置
自 3.10 起
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_set_baseline_row ----

gtk_grid_set_baseline_row
设置定义整个网格的全局基线的行。网格中的每一行都可以有自己的本地基线，但其中只有一行是全局的，这意味着它将是网格父级中的基线。
语法
参数
grid- 一GtkGrid
row- 行索引
返回
定义全局基线的行索引
自 3.10 起
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_set_column_homogeneous ----

gtk_grid_set_column_homogeneous
设置网格的所有列是否具有相同的宽度。
语法
参数
grid- 一GtkGrid
homogeneous- TRUE 使列均匀
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_set_column_spacing ----

gtk_grid_set_column_spacing
设置网格列之间的间距量。
语法
参数
grid- 一GtkGrid
spacing- 列之间要插入的空间量
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_set_row_baseline_position ----

gtk_grid_set_row_baseline_position
设置基线在网格行上的定位方式，以防为该行分配的空间超过请求的空间。
语法
参数
grid- 一GtkGrid
row- 行索引
pos- 一GtkBaselinePosition
自 3.1 起
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_set_row_homogeneous ----

gtk_grid_set_row_homogeneous
设置网格的所有行是否具有相同的高度。
语法
参数
grid- 一GtkGrid
homogeneous- TRUE 使行均匀
另请参见
GtkGrid


------------ KeyGTK3gtk_grid_set_row_spacing ----

gtk_grid_set_row_spacing
设置网格行之间的间距量。
语法
参数
grid- 一GtkGrid
spacing- 在行之间插入的空间量
另请参见
GtkGrid


------------ KeyGTK3gtk_handle_box_get_child_detached ----

gtk_handle_box_get_child_detached
gtk_handle_box_get_child_detached自 3.4 版起已弃用，不应在新编写的代码中使用。已被弃用。句柄框的子项当前是否已分离。GtkHandleBox
语法
参数
handle_box- 一GtkHandleBox
返回
如果子项当前已分离，则为 TRUE，否则为 FALSE
自 2.1 起
另请参见
GtkHandleBox


------------ KeyGTK3gtk_handle_box_get_handle_position ----

gtk_handle_box_get_handle_position
gtk_handle_box_get_handle_position自版本 3.4 起已弃用，不应在新编写的代码中使用。已被弃用。获取句柄框的句柄位置。Seegtk_handle_box_set_handle_position（）.GtkHandleBox
语法
参数
handle_box- 一GtkHandleBox
返回
当前句柄位置。
另请参见
GtkHandleBox


------------ KeyGTK3gtk_handle_box_get_shadow_type ----

gtk_handle_box_get_shadow_type
gtk_handle_box_get_shadow_type自版本 3.4 起已弃用，不应在新编写的代码中使用。已被弃用。获取在控制滑块框周围绘制的阴影的类型。Seegtk_handle_box_set_shadow_type（）.GtkHandleBox
语法
参数
handle_box- 一GtkHandleBox
返回
当前在控制滑块框周围绘制的阴影类型。
另请参见
GtkHandleBox


------------ KeyGTK3gtk_handle_box_get_snap_edge ----

gtk_handle_box_get_snap_edge
gtk_handle_box_get_snap_edge自 3.4 版起已弃用，不应在新编写的代码中使用。已被弃用。获取用于确定手柄框重新连接的边缘。请参见 gtk_handle_box_set_snap_edge（）。GtkHandleBox
语法
参数
handle_box- 一GtkHandleBox
返回
用于确定重新附着的边缘，或者（GtkPositionType）-1（如果这是从手柄位置确定的（根据默认值）。
另请参见
GtkHandleBox


------------ KeyGTK3gtk_handle_box_new ----

gtk_handle_box_new
gtk_handle_box_new自 3.4 版起已弃用，不应在新编写的代码中使用。已被弃用。创建一个新的句柄框。GtkHandleBox
返回
一个新的.GtkHandleBox
另请参见
GtkHandleBox


------------ KeyGTK3gtk_handle_box_set_handle_position ----

gtk_handle_box_set_handle_position
gtk_handle_box_set_handle_position自 3.4 版起已弃用，不应在新编写的代码中使用。已被弃用。设置绘制控点的手柄框的一侧。GtkHandleBox
语法
参数
handle_box- 一GtkHandleBox
position- 手柄箱的一侧，应绘制手柄。
另请参见
GtkHandleBox


------------ KeyGTK3gtk_handle_box_set_shadow_type ----

gtk_handle_box_set_shadow_type
gtk_handle_box_set_shadow_type自版本 3.4 起已弃用，不应在新编写的代码中使用。已被弃用。设置要在控点框边框周围绘制的阴影类型。GtkHandleBox
语法
参数
handle_box- 一GtkHandleBox
type- 阴影类型。
另请参见
GtkHandleBox


------------ KeyGTK3gtk_handle_box_set_snap_edge ----

gtk_handle_box_set_snap_edge
gtk_handle_box_set_snap_edge自 3.4 版起已弃用，不应在新编写的代码中使用。已被弃用。设置控制框的捕捉边缘。捕捉边缘是分离的子项的边缘，必须与 “ghost？当孩子被拆下以重新连接撕裂的窗户时，左后方。通常，应选择捕捉边缘，以便在撕掉手柄盒时将其保持在屏幕上的同一位置。如果未设置捕捉边，则将从控制滑块位置猜测适当的值。如果手柄位置GTK_POS_RIGHT或GTK_POS_LEFT，则GTK_POS_TOP捕捉边缘，否则将GTK_POS_LEFT。GtkHandleBox
语法
参数
handle_box- 一GtkHandleBox
edge- 捕捉边缘，或 -1 取消设置值;在这种情况下，GTK+将尝试在将来猜测适当的值。
另请参见
GtkHandleBox


------------ KeyGTK3gtk_hbox_new ----

gtk_hbox_new
gtk_hbox_new自版本 3.2 起已弃用，不应在新编写的代码中使用。您可以将 gtk_box_new（） 与 GTK_ORIENTATION_HORIZONTAL 一起使用，这是一个快速简便的更改。但建议是切换到 ，因为 最终会消失。请参 阅从其他容器迁移到 GtkGrid。创建新的 容器。GtkGridGtkBoxGtkHBox
语法
参数
homogeneous- 如果所有子项都获得相等的空间分配，则为 true。
spacing- 默认情况下要放置在子级之间的像素数。
返回
一个新的GtkHBox
另请参见
GtkHBox


------------ KeyGTK3gtk_hbutton_box_new ----

gtk_hbutton_box_new
gtk_hbutton_box_new自 3.2 版起已弃用，不应在新编写的代码中使用。将 gtk_button_box_new（） 与 GTK_ORIENTATION_HORIZONTAL 改为创建新的水平按钮框。
返回
一个新的按钮框GtkWidget
另请参见
GtkHButtonBox


------------ KeyGTK3gtk_header_bar_get_custom_title ----

gtk_header_bar_get_custom_title
检索标题的自定义标题构件。Seegtk_header_bar_set_custom_title（）.
语法
参数
bar- 一GtkHeaderBar
返回
标题的自定义标题构件，如果未显式设置任何内容，则为 NULL。[无转移]
自 3.10 起
另请参见
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_get_decoration_layout ----

gtk_header_bar_get_decoration_layout
获取withgtk_header_bar_set_decoration_layout（） 设置的装饰布局。
语法
参数
bar- 一GtkHeaderBar
返回
装修布局
自 3.1 起
另请参见
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_get_has_subtitle ----

gtk_header_bar_get_has_subtitle
检索标题栏是否为副标题保留空间，而不考虑当前是否设置了副标题。
语法
参数
bar- 一GtkHeaderBar
返回
如果标题栏为字幕保留空间，则为 TRUE
自 3.12 起
另请参见
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_get_show_close_button ----

gtk_header_bar_get_show_close_button
返回此标题栏是否显示标准窗口装饰。
语法
参数
bar- 一GtkHeaderBar
返回
如果显示装饰，则为 TRUE
自 3.10 起
另请参见
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_get_subtitle ----

gtk_header_bar_get_subtitle
检索标头的副标题。请参见 gtk_header_bar_set_subtitle（）。
语法
参数
bar- 一GtkHeaderBar
返回
标头的副标题，如果未显式设置任何内容，则为 NULL。返回的字符串归小部件所有，不得修改或释放。
自 3.10 起
另请参见
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_get_title ----

gtk_header_bar_get_title
检索标头的标题。请参见gtk_header_bar_set_title（）。
语法
参数
bar- 一GtkHeaderBar
返回
标头的标题，如果未显式设置任何内容，则为 NULL。返回的字符串归小部件所有，不得修改或释放。
自 3.10 起
另请参见
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_new ----

gtk_header_bar_new
创建新的构件。GtkHeaderBar
返回
一个新的GtkHeaderBar
自 3.10 起
另请参见
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_pack_end ----

gtk_header_bar_pack_end
将子项添加到条形，参照条形图的末尾进行包装。
语法
参数
bar- 一GtkHeaderBar
child- 要添加到栏GtkWidget
自 3.10 起
另请参见
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_pack_start ----

gtk_header_bar_pack_start
将子项添加到 bar，参照 bar 的开始进行打包。
语法
参数
bar- 一GtkHeaderBar
child- 要添加到栏GtkWidget
自 3.10 起
另请参见
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_set_custom_title ----

gtk_header_bar_set_custom_title
设置 的自定义标题。标题应帮助用户识别当前视图。这超过由gtk_header_bar_set_title（） orgtk_header_bar_set_subtitle（） 设置的任何标题。要获得与内置标题和副标题相同的样式，请使用 ？title？和“字幕”样式的类。应将自定义标题设置为 NULL，以使标题标签再次可见。GtkHeaderBar
语法
参数
bar- 一GtkHeaderBar
title_widget- 用于标题的自定义小部件。[允许-无]
自 3.10 起
另请参见
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_set_decoration_layout ----

gtk_header_bar_set_decoration_layout
设置此标题栏的装饰布局，覆盖该设置。覆盖设置可能有正当理由，例如标题栏设计不允许按钮占用右侧的空间，或者只为单个关闭按钮提供空间。拆分标题栏是重写设置的另一个示例。字符串的格式是按钮名称，以逗号分隔。冒号将应显示在左侧的按钮与右侧的按钮分隔开来。识别的按钮名称包括最小化、最大化、关闭、图标（窗口图标）和菜单（用于后备应用菜单的菜单按钮）。例如，？menu：minimize，maximize，close？指定左侧的菜单，以及右侧的最小化、最大化和关闭按钮。?gtk-decoration-layout?
语法
参数
bar- 一GtkHeaderBar
layout- 一个装饰布局，或 NULL 取消设置布局。[允许-无]
自 3.12 起
另请参见
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_set_has_subtitle ----

gtk_header_bar_set_has_subtitle
设置标题栏是否应为副标题保留空间，即使当前未设置任何空间。
语法
参数
bar- 一GtkHeaderBar
setting- TRUE 为字幕保留空间
自 3.12 起
另请参见
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_set_show_close_button ----

gtk_header_bar_set_show_close_button
设置此标题栏是否显示标准窗口装饰，包括关闭、最大化和最小化。
语法
参数
bar- 一GtkHeaderBar
setting- 真实显示标准寡妇装饰
自 3.10 起
另请参见
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_set_subtitle ----

gtk_header_bar_set_subtitle
设置 的副标题。标题应为用户提供其他详细信息，以帮助他识别当前视图。请注意，默认情况下，GtkHeaderBar会为字幕保留空间，即使当前未设置任何内容也是如此。如果不需要这样做，请将该属性设置为 FALSE。GtkHeaderBar?has-subtitle?
语法
参数
bar- 一GtkHeaderBar
subtitle- 副标题，或空。[允许-无]
自 3.10 起
另请参见
GtkHeaderBar


------------ KeyGTK3gtk_header_bar_set_title ----

gtk_header_bar_set_title
设置 的标题。标题应有助于用户识别当前视图。一个好的标题不应该包含应用程序名称。GtkHeaderBar
语法
参数
bar- 一GtkHeaderBar
title- 标题，或空。[允许-无]
自 3.10 起
另请参见
GtkHeaderBar


------------ KeyGTK3gtk_hpaned_new ----

gtk_hpaned_new
gtk_hpaned_new自 3.2 版起已被弃用，不应在新编写的代码中使用。将 gtk_paned_new（） 与 GTK_ORIENTATION_HORIZONTAL 改为创建一个新的GtkHPaned
返回
新的GtkHPaned[/code
See Also
GtkHPaned


------------ KeyGTK3gtk_hscale_new ----

gtk_hscale_new
gtk_hscale_new自版本 3.2 起已弃用，不应在新编写的代码中使用。将 gtk_scale_new（） 与 GTK_ORIENTATION_HORIZONTAL 一起使用可改为创建新的 .GtkHScale
语法
参数
adjustment- 设置刻度范围。GtkAdjustment
返回
一个新的.GtkHScale
另请参见
GtkHScale


------------ KeyGTK3gtk_hscale_new_with_range ----

gtk_hscale_new_with_range
gtk_hscale_new_with_range自版本 3.2 起已弃用，不应在新编写的代码中使用。将 gtk_scale_new_with_range（） 与 GTK_ORIENTATION_HORIZONTAL改为创建一个新的水平比例小部件，该小部件允许用户使用增量步骤输入介于最小值和最大值（包括最小值和最大值）之间的数字。步骤必须为非零;它是使用箭头键调整刻度值时滑块移动的距离。请注意，如果阶跃为 10 的幂，则推导精度的方式效果最佳。如果生成的精度不适合您需要的精度，请使用 gtk_scale_set_digits（） 进行更正。
语法
参数
min- 最小值
max- 最大值
step- 步长增量（刻度大小）与键盘快捷键一起使用
返回
一个新的GtkHScale[/code
See Also
GtkHScale


------------ KeyGTK3gtk_hscrollbar_new ----

gtk_hscrollbar_new
gtk_hscrollbar_new自版本 3.2 起已弃用，不应在新编写的代码中使用。将 gtk_scrollbar_new（） 与 GTK_ORIENTATION_HORIZONTAL 改为创建新的水平滚动条。
语法
参数
adjustment- 要使用的，或 NULL 创建新的调整。[允许-无]GtkAdjustment
返回
新的GtkHScrollbar[/code
See Also
GtkHScrollbar


------------ KeyGTK3gtk_hseparator_new ----

gtk_hseparator_new
gtk_hseparator_new自 3.2 版起已弃用，不应在新编写的代码中使用。将 gtk_separator_new（） 与 GTK_ORIENTATION_HORIZONTAL 一起使用可改为创建新的 .GtkHSeparator
返回
一个新的GtkHSeparator
另请参见
GtkHSeparator


------------ KeyGTK3gtk_hsv_get_color ----

gtk_hsv_get_color
gtk_hsv_get_color已弃用，不应在新编写的代码中使用。在 HSV 颜色选择器中查询当前颜色。返回值将在 [0.0， 1.0] 范围内。
语法
参数
hsv- 单纯疱疹病毒颜色选择器
h- 返回色调的值。[输出]
s- 饱和度的返回值。[输出]
v- 返回值的值。[输出]
自 2.14 起
另请参见
GtkHSV


------------ KeyGTK3gtk_hsv_get_metrics ----

gtk_hsv_get_metrics
gtk_hsv_get_metrics已弃用，不应在新编写的代码中使用。查询 HSV 颜色选择器的大小和环宽度。
语法
参数
hsv- 单纯疱疹病毒颜色选择器
size- 返回色相环直径的值。[输出]
ring_width- 返回色调环宽度的值。[输出]
自 2.14 起
另请参见
GtkHSV


------------ KeyGTK3gtk_hsv_is_adjusting ----

gtk_hsv_is_adjusting
gtk_hsv_is_adjusting已弃用，不应在新编写的代码中使用。如果对其值进行多次快速更改，例如，当用户使用鼠标调整值时，HSV 颜色选择器可以说是在调整。此函数查询是否正在调整 HSV 颜色选择器。
语法
参数
hsv- 一GtkHSV
返回
如果客户端可以忽略对颜色值的更改，因为它们可能是暂时的，则为 TRUE，或者如果客户端应该将颜色值状态视为最终状态，则为 FALSE。
自 2.14 起
另请参见
GtkHSV


------------ KeyGTK3gtk_hsv_new ----

gtk_hsv_new
gtk_hsv_new已弃用，不应在新编写的代码中使用。创建新的 HSV 颜色选择器。
返回
新创建的 HSV 颜色选择器。
自 2.14 起
另请参见
GtkHSV


------------ KeyGTK3gtk_hsv_set_color ----

gtk_hsv_set_color
gtk_hsv_set_color已弃用，不应在新编写的代码中使用。在 HSV 颜色选择器中设置当前颜色。颜色分量值必须在 [0.0， 1.0] 范围内。
语法
参数
hsv- 单纯疱疹病毒颜色选择器
h- 顺化
s- 饱和度
v- 价值
自 2.14 起
另请参见
GtkHSV


------------ KeyGTK3gtk_hsv_set_metrics ----

gtk_hsv_set_metrics
gtk_hsv_set_metrics已弃用，不应在新编写的代码中使用。设置 HSV 颜色选择器的大小和环宽度。
语法
参数
hsv- 单纯疱疹病毒颜色选择器
size- 色调环的直径
ring_width- 色调环的宽度
自 2.14 起
另请参见
GtkHSV


------------ KeyGTK3gtk_hsv_to_rgb ----

gtk_hsv_to_rgb
将颜色从 HSV 空间转换为 RGB。输入值必须在 [0.0， 1.0] 范围内;输出值将在同一范围内。
语法
参数
h- 顺化
s- 饱和度
v- 价值
r- 返回红色组件的值。[输出]
g- 返回绿色组件的值。[输出]
b- 返回蓝色分量的值。[输出]
自 2.14 起
另请参见
GtkHSV


------------ KeyGTK3gtk_icon_factory_add ----

gtk_icon_factory_add
gtk_icon_factory_add自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。将给定的icon_set添加到图标工厂，在namestock_id下。stock_id应该为您的应用程序指定命名空间，例如？myapp-whatever-icon？。通常，应用程序创建一个，然后将其添加到默认工厂列表中withgtk_icon_factory_add_default（）。然后，他们将stock_id转接，例如显示图标。主题可以提供具有相同名称的图标（例如“myapp-whatever-icon”）来覆盖应用程序的默认图标。如果某个图标已在工厂中存在了 stock_id，则不引用该图标，并将其替换为新icon_set。GtkIconThemeGtkIconFactoryGtkImage
语法
参数
factory- 一GtkIconFactory
stock_id- 图标名称
icon_set- 图标集
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_factory_add_default ----

gtk_icon_factory_add_default
gtk_icon_factory_add_default自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用。将图标工厂添加到bygtk_style_lookup_icon_set（） 搜索的图标工厂列表中。这意味着，例如，gtk_image_new_from_stock（）将能够在工厂中找到图标。通常会为每个带有图标的库或应用程序添加一个图标工厂。默认图标工厂可以被主题覆盖。GtkIconTheme
语法
参数
factory- 一GtkIconFactory
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_factory_lookup ----

gtk_icon_factory_lookup
gtk_icon_factory_lookup自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。在图标工厂中查找stock_id，如果找到，则返回图标设置，否则为 NULL。为了向用户显示，您应该在将显示图标的 for thewidget 上使用 gtk_style_lookup_icon_set（），而不是直接使用此函数，以便考虑主题。GtkIconThemeGtkStyle
语法
参数
factory- 一GtkIconFactory
stock_id- 图标名称
返回
stock_id的图标集。 [无转移]
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_factory_lookup_default ----

gtk_icon_factory_lookup_default
gtk_icon_factory_lookup_default自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。在默认图标工厂列表中查找图标。为了向用户显示，您应该在将显示图标的小部件上使用gtk_style_lookup_icon_set（），而不是直接使用此功能，以便将主题带入帐户。GtkIconThemeGtkStyle
语法
参数
stock_id- 图标名称
返回
a 或空。[无转移]GtkIconSet
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_factory_new ----

gtk_icon_factory_new
gtk_icon_factory_new自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。创建新的 .图标工厂管理一个集合 ;a 管理一组分离图标的变体（即 a 包含不同大小和小部件状态的变体）。图标工厂中的图标由 astock ID 命名，astock ID 是标识图标的简单字符串。每个都有一个从当前主题派生出来的列表;在搜索图标时，首先会咨询这些图标工厂。如果主题未设置特定图标，GTK+ 将在默认图标工厂列表中查找该图标，维护bygtk_icon_factory_add_default（） andgtk_icon_factory_remove_default（）。带有图标的应用程序应使用其图标添加默认图标工厂，这将允许主题覆盖应用程序的图标。GtkIconThemeGtkIconFactoryGtkIconSetsGtkIconSetGtkIconSetGtkStyleGtkIconFactorys
返回
一个新的GtkIconFactory
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_factory_remove_default ----

gtk_icon_factory_remove_default
gtk_icon_factory_remove_default自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。从默认图标工厂列表中删除图标工厂。通常不使用;您可以将它用于可以卸载或关闭的库。GtkIconTheme
语法
参数
factory- 以前添加的gtk_icon_factory_add_default（）GtkIconFactory
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_info_copy ----

gtk_icon_info_copy
gtk_icon_info_copy自 3.8 版起已弃用，不应在新编写的代码中使用。使用 g_object_ref（）制作 .GtkIconInfo
语法
参数
icon_info- 一GtkIconInfo
返回
新的GtkIconInfo
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_free ----

gtk_icon_info_free
gtk_icon_info_free自 3.8 版起已弃用，不应在新编写的代码中使用。使用g_object_unref（）免费和相关信息GtkIconInfo
语法
参数
icon_info- 一GtkIconInfo
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_get_attach_points ----

gtk_icon_info_get_attach_points
获取图标的附加点集。附加点是图标中的一个位置，可用作锚点，用于将组合或叠加附加到图标。
语法
参数
icon_info- 一GtkIconInfo
points- 位置存储指向点数组的指针，或 NULLfree g_free（） 的点数组。[允许-无][数组长度 = n_points][输出]
n_points- 存储点数的位置（以点为单位），或 NULL。[允许-无]
返回
如果图标有任何附加点，则为 TRUE。
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_get_base_scale ----

gtk_icon_info_get_base_scale
获取图标的基本比例。基本比例是由图标主题创建者指定的图标比例。例如，为窗口比例为 2 的高 dpi 屏幕绘制的 anicon，基数为 32，其高度为 64 像素，base_scale为 2。
语法
参数
icon_info- 一GtkIconInfo
返回
基本比例。
自 3.10 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_get_base_size ----

gtk_icon_info_get_base_size
获取图标的基本大小。基本大小是由图标主题创建者指定的图标的大小。这可能与图像的实际大小不同;这方面的一个例子是小徽章图标，可以附加到较大的图标上。这些图标将被赋予与它们所附加到的较大图标相同的基本大小。请注意，对于缩放图标，基本大小不包括基本比例。
语法
参数
icon_info- 一GtkIconInfo
返回
基本大小，或 0（如果图标没有已知的基大小）。
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_get_builtin_pixbuf ----

gtk_icon_info_get_builtin_pixbuf
获取此图标的内置图像（如果有）。要允许GTK+使用内置图标图像，您必须传递theGTK_ICON_LOOKUP_USE_BUILTIN togtk_icon_theme_lookup_icon（）。
语法
参数
icon_info- 一GtkIconInfo
返回
内置图像像素，或 NULL。Noextra 引用被添加到返回的 pixbuf 中，因此，如果要保留它，则必须使用 g_object_ref（）。不得修改返回的映像。[无转移]
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_get_display_name ----

gtk_icon_info_get_display_name
获取图标的显示名称。显示名称是用于在用户可见的上下文中代替图标名称（如图标列表）的字符串。
语法
参数
icon_info- 一GtkIconInfo
返回
图标的显示名称或 NULL（如果图标没有指定的显示名称）。此值归icon_infoand不得修改或免费。
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_get_embedded_rect ----

gtk_icon_info_get_embedded_rect
获取图标内矩形的坐标，该图标可用于显示信息，例如预览文本文件的内容。有关坐标系的进一步信息，请参见 gtk_icon_info_set_raw_coordinates（）。
语法
参数
icon_info- 一GtkIconInfo
rectangle  -  	 GdkRectangle在其中存储嵌入式矩形坐标;仅当此函数返回 TRUE 时，才会存储坐标。[输出]
返回
如果图标具有嵌入式矩形，则为 TRUE
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_get_filename ----

gtk_icon_info_get_filename
获取图标的文件名。如果theGTK_ICON_LOOKUP_USE_BUILTIN标志被传递给gtk_icon_theme_lookup_icon（），如果返回内置图标，则可能没有文件名;在这种情况下，您应该使用gtk_icon_info_get_builtin_pixbuf（）。
语法
参数
icon_info- 一GtkIconInfo
返回
应改用图标的文件名或 NULLif gtk_icon_info_get_builtin_pixbuf（）。此处的值为 GTK+ 所有，不应修改或释放。[类型文件名]
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_is_symbolic ----

gtk_icon_info_is_symbolic
检查图标是否具有象征意义。这当前仅使用文件名而不是文件内容来确定这一点。这种行为将来可能会改变。
语法
参数
icon_info- 一GtkIconInfo
返回
如果图标是符号性的，则为 TRUE，否则为 FALSE。
自 3.1 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_icon ----

gtk_icon_info_load_icon
呈现以前在图标主题中查找的图标 usinggtk_icon_theme_lookup_icon（）;大小将基于传递到gtk_icon_theme_lookup_icon（） 的大小。请注意，生成的pixbuf可能不完全是这个大小;图标主题可能具有与其标称大小略有不同的图标，此外，GTK+将避免缩放它认为足够接近其请求大小的图标，或者源图像必须放大得太远的图标。（这可以保持清晰度。可以通过在获取 时传递 GTK_ICON_LOOKUP_FORCE_SIZE 标志来更改此行为。如果已指定此标志，则此函数的 pixbufreturn 将缩放到确切的大小。GtkIconInfo
语法
参数
icon_info- a from gtk_icon_theme_lookup_icon（）GtkIconInfo
error- 存储故障错误信息的位置，或空。[允许-无]
返回
渲染的图标;这可能是新创建的图标或对内部图标的新引用，因此不得修改该图标。使用 g_object_unref（） 释放对图标的引用。[转移完整]
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_icon_async ----

gtk_icon_info_load_icon_async
使用gtk_icon_theme_lookup_icon（） 异步加载、渲染和缩放以前从图标主题中查找的图标。有关更多详细信息，请参阅 gtk_icon_info_load_icon（） 它是此调用的同步版本。
语法
参数
icon_info- a from gtk_icon_theme_lookup_icon（）GtkIconInfo
cancellable- 可选对象，空忽略。[允许-无]GCancellable
callback- 当有任务满意时打电话。[范围异步]GAsyncReadyCallback
user_data- 要传递给回调函数的数据。[关闭]
3.8 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_icon_finish ----

gtk_icon_info_load_icon_finish
完成异步图标加载，请参见gtk_icon_info_load_icon_async（）。
语法
参数
icon_info- a from gtk_icon_theme_lookup_icon（）GtkIconInfo
res- 一GAsyncResult
error- 存储故障错误信息的位置，或空。[允许-无]
返回
渲染的图标;这可能是新创建的图标或对内部图标的新引用，因此不得修改该图标。使用 g_object_unref（） 释放对图标的引用。[转移完整]
3.8 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_surface ----

gtk_icon_info_load_surface
呈现以前在图标主题中查找的图标 usinggtk_icon_theme_lookup_icon（）;大小将基于传递到gtk_icon_theme_lookup_icon（） 的大小。请注意，生成的表面可能不完全是此大小;图标主题可能具有与其标称大小略有不同的图标，此外，GTK+将避免缩放它认为足够接近其请求大小的图标，或者源图像必须放大得太远的图标。（这可以保持清晰度。可以通过在获取 时传递 GTK_ICON_LOOKUP_FORCE_SIZE 标志来更改此行为。如果已指定此标志，则此函数的 pixbufreturn 将缩放到确切的大小。GtkIconInfo
语法
参数
icon_info- a from gtk_icon_theme_lookup_icon（）GtkIconInfo
for_window  -  	 GdkWindow以优化绘图，或 NULL。[允许-无]
error- 存储故障错误信息的位置，或空。[允许-无]
返回
渲染的图标;这可能是新创建的图标或对内部图标的新引用，因此不得修改该图标。使用 cairo_surface_destroy（） 释放对图标的引用。[转移完整]
自 3.10 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_symbolic ----

gtk_icon_info_load_symbolic
加载一个图标，对其进行修改以匹配所提供的前景，成功，警告和错误颜色的系统颜色。如果图标不是符号，则函数将从gtk_icon_info_load_icon（）返回结果。这允许加载与系统主题匹配的符号图标。除非您正在实现小部件，否则您需要useg_themed_icon_new_with_default_fallbacks（）来加载图标。作为实现细节，加载的图标需要是SVG类型，包含？符号？term 作为图标名称的最后一个组件，并使用 ？fg?, ?success?, ?警告？和 ？错误？SVG 文件本身中的 CSS 样式。有关符号图标的详细信息，请参阅符号图标规范。
语法
参数
icon_info- 一GtkIconInfo
fg- 表示图标的前景色GdkRGBA
success_color- a 表示图标的警告颜色或 NULL 以使用默认颜色。[允许-无]GdkRGBA
warning_color- a 表示图标的警告颜色或 NULL 以使用默认颜色。[允许-无]GdkRGBA
error_color- a 表示图标的错误颜色或 NULL 以使用默认颜色（allow-none）。[允许-无]GdkRGBA
was_symbolic- a ，返回加载的图标是否为符号图标，以及 fgcolor 是否应用于它。[输出][允许-无]gboolean
error- 存储故障错误信息的位置，或空。[允许-无]
返回
a 表示加载的图标。[转移完整]GdkPixbuf
自 3.0 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_symbolic_async ----

gtk_icon_info_load_symbolic_async
异步加载、渲染和缩放先前使用 gtk_icon_theme_lookup_icon（） 从图标主题中查找的符号图标。有关更多详细信息，请参阅 gtk_icon_info_load_symbolic（）），这是此调用的同步版本。
语法
参数
icon_info- a from gtk_icon_theme_lookup_icon（）GtkIconInfo
fg- 表示图标的前景色GdkRGBA
success_color- a 表示图标的警告颜色或 NULL 以使用默认颜色。[允许-无]GdkRGBA
warning_color- a 表示图标的警告颜色或 NULL 以使用默认颜色。[允许-无]GdkRGBA
error_color- a 表示图标的错误颜色或 NULL 以使用默认颜色（allow-none）。[允许-无]GdkRGBA
cancellable- 可选对象，空忽略。[允许-无]GCancellable
callback- 当有任务满意时打电话。[范围异步]GAsyncReadyCallback
user_data- 要传递给回调函数的数据。[关闭]
3.8 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_symbolic_finish ----

gtk_icon_info_load_symbolic_finish
完成异步图标加载，请参见gtk_icon_info_load_symbolic_async（）。
语法
参数
icon_info- a from gtk_icon_theme_lookup_icon（）GtkIconInfo
res- 一GAsyncResult
was_symbolic- a ，返回加载的图标是否为符号图标，以及 fgcolor 是否应用于它。[输出][允许-无]gboolean
error- 存储故障错误信息的位置，或空。[允许-无]
返回
渲染的图标;这可能是新创建的图标或对内部图标的新引用，因此不得修改该图标。使用 g_object_unref（） 释放对图标的引用。[转移完整]
3.8 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_symbolic_for_context ----

gtk_icon_info_load_symbolic_for_context
加载一个图标，对其进行修改以匹配所提供的前景，成功，警告和错误颜色的系统颜色。如果图标不是符号，则函数将从gtk_icon_info_load_icon（）返回结果。此函数使用常规前景色和符号颜色以及名称 ？success_color?, ?warning_color？和？error_color？从上下文中。这允许加载与系统主题匹配的符号图标。有关详细信息，请参阅 gtk_icon_info_load_symbolic（）。
语法
参数
icon_info- 一GtkIconInfo
context- 一GtkStyleContext
was_symbolic- a ，返回加载的图标是否为符号图标，以及 fgcolor 是否应用于它。[输出][允许-无]gboolean
error- 存储故障错误信息的位置，或空。[允许-无]
返回
a 表示加载的图标。[转移完整]GdkPixbuf
自 3.0 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_symbolic_for_context_async ----

gtk_icon_info_load_symbolic_for_context_async
异步加载、渲染和缩放先前使用 gtk_icon_theme_lookup_icon（） 从图标主题中查找的符号图标。有关更多详细信息，请参阅 gtk_icon_info_load_symbolic_for_context（） 它是此调用的同步版本。
语法
参数
icon_info- a from gtk_icon_theme_lookup_icon（）GtkIconInfo
context- 一GtkStyleContext
cancellable- 可选对象，空忽略。[允许-无]GCancellable
callback- 当有任务满意时打电话。[范围异步]GAsyncReadyCallback
user_data- 要传递给回调函数的数据。[关闭]
3.8 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_symbolic_for_context_finish ----

gtk_icon_info_load_symbolic_for_context_finish
完成异步图标加载，请参见gtk_icon_info_load_symbolic_for_context_async（）。
语法
参数
icon_info- a from gtk_icon_theme_lookup_icon（）GtkIconInfo
res- 一GAsyncResult
was_symbolic- a ，返回加载的图标是否为符号图标，以及 fgcolor 是否应用于它。[输出][允许-无]gboolean
error- 存储故障错误信息的位置，或空。[允许-无]
返回
渲染的图标;这可能是新创建的图标或对内部图标的新引用，因此不得修改该图标。使用 g_object_unref（） 释放对图标的引用。[转移完整]
3.8 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_load_symbolic_for_style ----

gtk_icon_info_load_symbolic_for_style
gtk_icon_info_load_symbolic_for_style自 3.0 版起已弃用，不应在新编写的代码中使用。使用gtk_icon_info_load_symbolic_for_context（） 代替加载图标，对其进行修改以匹配所提供的前景、成功、警告和错误颜色的系统颜色。如果图标不是符号，则函数将从gtk_icon_info_load_icon（）返回结果。这允许加载与系统主题匹配的符号图标。有关详细信息，请参阅 gtk_icon_info_load_symbolic（）。
语法
参数
icon_info- 一GtkIconInfo
style- a 从中获取颜色GtkStyle
state- 用于颜色的小部件状态
was_symbolic- a ，返回加载的图标是否为符号图标，以及 fgcolor 是否应用于它。[输出][允许-无]gboolean
error- 存储故障错误信息的位置，或空。[允许-无]
返回
a 表示加载的图标。[转移完整]GdkPixbuf
自 3.0 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_new_for_pixbuf ----

gtk_icon_info_new_for_pixbuf
为 .GtkIconInfoGdkPixbuf
语法
参数
icon_theme- 一GtkIconTheme
pixbuf- 要包装在GtkIconInfo
返回
一个。[转移完整]GtkIconInfo
自 2.14 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_info_set_raw_coordinates ----

gtk_icon_info_set_raw_coordinates
设置gtk_icon_info_get_embedded_rect（） 和 gtk_icon_info_get_attach_points（） 返回的坐标是否应按图标主题中指定的原始形式返回，而不是对 gtk_icon_info_load_icon（） 返回的 pixbuf 进行适当缩放。原始坐标有点奇怪;它们被指定为与 PNG 和 XPM 图标的未缩放像素图一起表示尊重，但对于 SVGicons，它们位于 1000x1000 坐标空间中，该坐标空间按比例缩放到图标的最终大小。您可以使用gtk_icon_info_get_filename（））来确定图标是否为SVGicon，并查看它是否是非NULLand，以？结尾。svg？.提供此功能主要是为了允许旧版 API 的兼容性包装器，并且预计不会对应用程序有用。
语法
参数
icon_info- 一GtkIconInfo
raw_coordinates- 嵌入的矩形和附加点的坐标是否应以其原始（未缩放）形式返回。
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_set_add_source ----

gtk_icon_set_add_source
gtk_icon_set_add_source自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。图标集有一个 列表，它们将其用作基本图标，用于呈现不同状态和大小的图标。图标是按比例缩放的，使看起来不敏感等ingtk_icon_set_render_icon（），但需要基本图像才能使用。基本图像以及何时使用它们由a 描述。此函数复制源，因此您可以立即重用相同的源，而不会影响图标集。当您使用此功能时，例如：Web浏览器的“Backto上一页”图标可能指向Hebrew和英语中的不同方向;当不敏感时，它可能看起来不同;它可能会根据工具栏模式（小/大图标）而改变大小。因此，单个图标集将包含图标的所有这些变体，您可以为每个变体添加单独的源。您几乎总是应该添加一个“默认？具有通配符的所有字段的图标源，如果没有更具体的源匹配，它将用作回退。 总是更喜欢更具体的图标源而不是更通用的图标源。将源添加到图标集的顺序不会matter.gtk_icon_set_new_from_pixbuf（） 会根据给定的 pixbuf 创建具有 adefault 图标源的新图标集。GtkIconThemeGtkIconSourceGtkIconSetGtkIconSourceGtkIconSet
语法
参数
icon_set- 一GtkIconSet
source- 一GtkIconSource
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_copy ----

gtk_icon_set_copy
gtk_icon_set_copy自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。按值复制icon_set。GtkIconTheme
语法
参数
icon_set- 一GtkIconSet
返回
与第一个相同的新。GtkIconSet
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_get_sizes ----

gtk_icon_set_get_sizes
gtk_icon_set_get_sizes自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。获取此图标集可以呈现的图标大小的列表。返回的数组必须使用 g_free（） 进行释放。GtkIconTheme
语法
参数
icon_set- 一GtkIconSet
sizes- 返回大小数组的位置。[数组长度 = n_sizes][输出][键入整型]
n_sizes- 位置存储返回数组中的元素数量
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_new ----

gtk_icon_set_new
gtk_icon_set_new自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用。创建新的 .A 表示各种大小和小部件状态的单个图标。它可以根据请求提供给定大小和状态的，并自动缓存一些渲染的对象。通常你会使用gtk_widget_render_icon_pixbuf（）而不是直接使用。您使用的一种情况是创建特定于应用程序的图标集来放置ina 。GtkIconThemeGtkIconSetGtkIconSetGdkPixbufGdkPixbufGtkIconSetGtkIconSetGtkIconFactory
返回
一个新的GtkIconSet
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_new_from_pixbuf ----

gtk_icon_set_new_from_pixbuf
gtk_icon_set_new_from_pixbuf自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用。创建一个以 pixbuf 作为默认/回退源映像的新映像。如果您不向图标集添加任何其他内容，则图标的所有变体都将从pixbuf创建，根据需要使用缩放，像素化等来调整图标大小或使图标看起来不敏感/预亮。GtkIconThemeGtkIconSetGtkIconSource
语法
参数
pixbuf- 一GdkPixbuf
返回
一个新的GtkIconSet
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_ref ----

gtk_icon_set_ref
gtk_icon_set_ref自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。递增icon_set上的引用计数。GtkIconTheme
语法
参数
icon_set- 一个.GtkIconSet
返回
icon_set。
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_render_icon ----

gtk_icon_set_render_icon
gtk_icon_set_render_icon自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_icon_set_render_icon_pixbuf（） 代替使用 gtk_style_render_icon（） 呈现图标。在大多数情况下，gtk_widget_render_icon（） 更好，因为它会自动提供当前小部件设置中的大部分参数。此函数从不返回 NULL;如果图标无法呈现（可能是因为图像文件无法加载），则将返回默认的“missingimage”图标。
语法
参数
icon_set- 一GtkIconSet
style- 与小部件关联的小部件，或 NULL。[允许-无]GtkStyle
direction- 文本方向
state- 小部件状态
size- 图标大小。大小 （GtkIconSize）-1 表示以源的大小呈现，并且不缩放。[键入整型]
widget- 小部件，将显示图标，或空。通常使用的唯一用途是确定适当的 。[允许-无]GdkScreen
detail- 要传递到主题引擎的详细信息，或 NULL。请注意，传递除 NULL 之外的任何内容的详细信息都将禁用缓存。[允许-无]
返回
a 要显示。[转移完整]GdkPixbuf
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_render_icon_pixbuf ----

gtk_icon_set_render_icon_pixbuf
gtk_icon_set_render_icon_pixbuf自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。使用 gtk_render_icon_pixbuf（） 呈现图标。在大多数情况下，gtk_widget_render_icon_pixbuf（） 更好，因为它会自动提供当前小部件设置中的大部分参数。此函数从不返回 NULL;如果图标无法呈现（可能是因为图像文件无法加载），则将返回默认的“missingimage”图标。GtkIconTheme
语法
参数
icon_set- 一GtkIconSet
context- 一GtkStyleContext
size- 图标大小。大小 （GtkIconSize）-1 表示以源的大小呈现，并且不缩放。[键入整型]
返回
a 要显示。[转移完整]GdkPixbuf
自 3.0 起
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_render_icon_surface ----

gtk_icon_set_render_icon_surface
gtk_icon_set_render_icon_surface自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。使用 gtk_render_icon_pixbuf（） 渲染图标，并将其转换为 acairo 曲面。此函数从不返回 NULL;如果图标无法呈现（可能是因为图像文件无法加载），则将返回默认的“missingimage”图标。GtkIconTheme
语法
参数
icon_set- 一GtkIconSet
context- 一GtkStyleContext
size- 图标大小。大小 （GtkIconSize）-1 表示以源的大小呈现，并且不缩放。[键入整型]
scale- 要渲染的窗口比例
for_window  -  	 GdkWindow以优化绘图，或 NULL。[允许-无]
返回
a 要显示。[转移完整]cairo_surface_t
自 3.10 起
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_set_unref ----

gtk_icon_set_unref
gtk_icon_set_unref自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。递减icon_set上的引用计数，如果引用计数达到 0，则释放内存。GtkIconTheme
语法
参数
icon_set- 一GtkIconSet
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_size_from_name ----

gtk_icon_size_from_name
gtk_icon_size_from_name自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用。查找与名称关联的图标大小。GtkIconTheme
语法
参数
name- 要查找的名称。
返回
图标大小。[键入整型]
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_size_get_name ----

gtk_icon_size_get_name
gtk_icon_size_get_name自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。获取给定图标大小的规范名称。返回的字符串是静态分配的，不应释放。GtkIconTheme
语法
参数
size- 一个.[键入整型]GtkIconSize
返回
给定图标大小的名称。
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_size_lookup ----

gtk_icon_size_lookup
获取语义图标大小大小大小：、等的像素大小。这个功能通常不需要，gtk_icon_theme_load_icon（）是获取图标进行渲染的常用方法，那么只需查看渲染的pixbuf的大小即可。渲染的pixbuf甚至可能不对应于gtk_icon_size_lookup（）返回的宽度/高度，因为主题可以自由地渲染pixbuf，包括更改通常的大小。GTK_ICON_SIZE_MENUGTK_ICON_SIZE_BUTTON
语法
参数
size- 图标大小。[键入整型]
width- 存储图标宽度的位置。[输出][允许-无]
height- 存储图标高度的位置。[输出][允许-无]
返回
如果大小是有效大小，则为 TRUE
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_size_lookup_for_settings ----

gtk_icon_size_lookup_for_settings
gtk_icon_size_lookup_for_settings自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_icon_size_lookup（）。获取语义图标大小的像素大小，可能由特定图标的用户首选项进行修改。通常大小为，等。这个功能通常不需要，gtk_widget_render_icon_pixbuf（）是获取用于渲染的图标的常用方法，那么只需查看渲染的pixbuf的大小即可。渲染的pixbuf甚至可能不对应于gtk_icon_size_lookup（）返回的宽度/高度，因为主题可以自由地渲染pixbuf，包括更改通常的大小。GtkSettingsGTK_ICON_SIZE_MENUGTK_ICON_SIZE_BUTTON
语法
参数
settings- 一个对象，用于确定要使用的用户首选项集。GtkSettings
size- 图标大小。[键入整型]
width- 存储图标宽度的位置。[输出][允许-无]
height- 存储图标高度的位置。[输出][允许-无]
返回
如果大小是有效大小，则为 TRUE
自 2.2 起
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_size_register ----

gtk_icon_size_register
gtk_icon_size_register自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。注册一个新的图标大小，与 ，等相同。返回大小的整数值。GtkIconThemeGTK_ICON_SIZE_MENU
语法
参数
name- 图标大小的名称
width- 图标宽度
height- 图标高度
返回
表示大小的整数值。[键入整型]
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_size_register_alias ----

gtk_icon_size_register_alias
gtk_icon_size_register_alias自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用。将别名注册为目标的另一个名称。因此，调用gtk_icon_size_from_name（） 并将别名作为参数调用将返回目标。GtkIconTheme
语法
参数
alias- 目标的别名
target- 现有的图标大小。[键入整型]
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_copy ----

gtk_icon_source_copy
gtk_icon_source_copy自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用。创建源的副本;主要用于语言绑定。GtkIconTheme
语法
参数
source- 一GtkIconSource
返回
一个新的GtkIconSource
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_free ----

gtk_icon_source_free
gtk_icon_source_free自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。释放动态分配的图标源及其文件名、大小和像素浮动字段（如果这些字段不为 NULL）。GtkIconTheme
语法
参数
source- 一GtkIconSource
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_direction ----

gtk_icon_source_get_direction
gtk_icon_source_get_direction自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。获取此图标源适用的文本方向。仅当文本方向未通配时，返回值才有用/有意义。GtkIconTheme
语法
参数
source- 一GtkIconSource
返回
此源匹配的文本方向
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_direction_wildcarded ----

gtk_icon_source_get_direction_wildcarded
gtk_icon_source_get_direction_wildcarded自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。获取由 gtk_icon_source_set_direction_wildcarded（） 设置的值。GtkIconTheme
语法
参数
source- 一GtkIconSource
返回
如果此图标源是任何文本方向变体的基础，则为 TRUE
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_filename ----

gtk_icon_source_get_filename
gtk_icon_source_get_filename自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。检索源文件名，如果未设置任何文件名，则检索 NULL。文件名不是副本，不应在图标源的生存期之后进行修改或预期 topersist。GtkIconTheme
语法
参数
source- 一GtkIconSource
返回
图像文件名。不得修改或释放此字符串。[类型文件名]
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_icon_name ----

gtk_icon_source_get_icon_name
gtk_icon_source_get_icon_name自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用。检索源图标名称，如果未设置任何名称，则检索 NULL。Theicon_name不是副本，不应在图标源的生存期之后进行修改或预期拓扑。GtkIconTheme
语法
参数
source- 一GtkIconSource
返回
图标名称。不得修改或释放此字符串。
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_pixbuf ----

gtk_icon_source_get_pixbuf
gtk_icon_source_get_pixbuf自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用。检索源像素虫，如果未设置任何代码，则检索 NULL。此外，如果正在使用文件名源，则在某些情况下，此函数将从文件名加载返回 pixbuf。例如，对于传递给render_icon（）虚函数的GtkIconSource，这是true。像素上的引用计数不会递增。GtkIconThemeGtkStyle
语法
参数
source- 一GtkIconSource
返回
源像素。[无转移]
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_size ----

gtk_icon_source_get_size
gtk_icon_source_get_size自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用。获取此源适用的图标大小。仅当图标大小未通配符时，返回值才有用/有意义。GtkIconTheme
语法
参数
source- 一GtkIconSource
返回
图标大小与此源匹配。[键入整型]
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_size_wildcarded ----

gtk_icon_source_get_size_wildcarded
gtk_icon_source_get_size_wildcarded自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。获取由 gtk_icon_source_set_size_wildcarded（） 设置的值。GtkIconTheme
语法
参数
source- 一GtkIconSource
返回
如果此图标源是任何图标大小变体的基础，则为 TRUE
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_state ----

gtk_icon_source_get_state
gtk_icon_source_get_state自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。获取此图标源应用于的小组件状态。仅当小部件状态未被置换时，返回值才有用/有意义。GtkIconTheme
语法
参数
source- 一GtkIconSource
返回
此源匹配的小部件状态
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_get_state_wildcarded ----

gtk_icon_source_get_state_wildcarded
gtk_icon_source_get_state_wildcarded自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用。获取由 gtk_icon_source_set_state_wildcarded（） 设置的值。GtkIconTheme
语法
参数
source- 一GtkIconSource
返回
如果此图标源是任何小部件状态变体的基础，则为 TRUE
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_new ----

gtk_icon_source_new
gtk_icon_source_new自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。创建新的 .A 包含一个（或图像文件名），用作 中一个或多个同义词的基本图像，以及图标集中的图标将基于该像素或图像文件的规范。图标集包含一组表示“相同”的图标不同状态、不同全局文本方向、不同大小的逻辑概念。例如，网络浏览器？返回上一页？图标可能指向希伯来语和英语的不同方向;当麻木不仁时，它可能会有所不同;并且它可能会根据工具栏模式（小/大图标）而改变大小。因此，单个图标集将包含图标的所有这些变体。 包含一个列表，从中可以派生出集合中的特定图标变体。在最简单的情况下，包含一个源 pixbuf，它从中派生出所有变体。方便functiongtk_icon_set_new_from_pixbuf（）处理这种情况;如果您只有一个源像素，只需使用该函数即可。如果要对不同的图标变体使用不同的基本像素buf，请创建多个图标源，标记将用于创建的变体，并将它们添加到图标集withgtk_icon_set_add_source（）中。默认情况下，图标源的所有参数都通配符。也就是说，图标源将用作任何所需文本方向，小部件状态或图标大小的基本图标。GtkIconThemeGtkIconSourceGtkIconSourceGdkPixbufGtkIconSetGtkIconSetGtkIconSourceGtkIconSet
返回
一个新的GtkIconSource
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_direction ----

gtk_icon_source_set_direction
gtk_icon_source_set_direction自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用。设置此图标源要使用的文本方向。如果文本方向是通配符，则在图标源上设置文本方向不会有任何区别。因此，除了调用此函数之外，您通常还应该调用 gtk_icon_source_set_direction_wildcarded（） 来取消通配符 it。GtkIconTheme
语法
参数
source- 一GtkIconSource
direction- 此源应用于的文本方向
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_direction_wildcarded ----

gtk_icon_source_set_direction_wildcarded
gtk_icon_source_set_direction_wildcarded自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。如果文本方向是通配符，则可以将此源用作任何 中图标的基本图像。如果文本方向未通配符，则应使用gtk_icon_source_set_direction（） 设置图标源应用到的文本方向，并且图标源将仅与该文本方向一起使用。首选非通配符源（完全匹配）过度通配的源，并尽可能使用完全匹配。GtkIconThemeGtkTextDirectionGtkIconSet
语法
参数
source- 一GtkIconSource
setting- TRUE 通配符文本方向
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_filename ----

gtk_icon_source_set_filename
gtk_icon_source_set_filename自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用。设置要在为 创建图标变体时用作基础图像的图像文件的名称。文件名必须是绝对的。GtkIconThemeGtkIconSet
语法
参数
source- 一GtkIconSource
filename- 要使用的图像文件。[类型文件名]
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_icon_name ----

gtk_icon_source_set_icon_name
gtk_icon_source_set_icon_name自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。设置要在当前图标主题中查找的图标的名称，以便在 为 创建图标变体时用作基本图像。GtkIconThemeGtkIconSet
语法
参数
source- 一GtkIconSource
icon_name- 要使用的图标的名称。[允许-无]
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_pixbuf ----

gtk_icon_source_set_pixbuf
gtk_icon_source_set_pixbuf自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用。将像素符号设置为在创建图标变体时用作基本图像。GtkIconThemeGtkIconSet
语法
参数
source- 一GtkIconSource
pixbuf- 像素buf用作源
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_size ----

gtk_icon_source_set_size
gtk_icon_source_set_size自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。设置此图标源要使用的图标大小。如果大小是通配符，则在图标源上设置图标大小不会有任何区别。因此，除了调用此函数之外，您通常还应该调用gtk_icon_source_set_size_wildcarded（） 来取消通配符 it。GtkIconTheme
语法
参数
source- 一GtkIconSource
size- 此源适用的图标大小。[键入整型]
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_size_wildcarded ----

gtk_icon_source_set_size_wildcarded
gtk_icon_source_set_size_wildcarded自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。如果图标大小是通配符，则此源可用作任何大小图标的基本图像。如果大小不是通配符，则应将源应用到的大小设置为 withgtk_icon_source_set_size（），并且图标源将仅与该特定大小一起使用。首选非通配符源（完全匹配）过度通配的源，并尽可能使用完全匹配。通常会缩放通配符源图像以在给定大小下生成适当的图标，但不会更改完全匹配的源图像的大小。GtkIconThemeGtkIconSetGtkIconSet
语法
参数
source- 一GtkIconSource
setting- TRUE 通配符小部件状态
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_state ----

gtk_icon_source_set_state
gtk_icon_source_set_state自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用。设置此图标源要使用的小部件状态。如果状态为通配符，则在图标源上设置构件状态不会有任何区别。因此，除了调用此函数之外，您通常还应该调用 gtk_icon_source_set_state_wildcarded（） 来取消通配符 it。GtkIconTheme
语法
参数
source- 一GtkIconSource
state- 小部件状态此源适用于
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_source_set_state_wildcarded ----

gtk_icon_source_set_state_wildcarded
gtk_icon_source_set_state_wildcarded自 3.10 版起已弃用，不应在新编写的代码中使用。请改用。如果构件状态为通配符，则此源可用作任何 .如果小部件状态不是通配符，则源应用到的状态应使用 gtk_icon_source_set_state（） 设置，并且图标源将仅与该特定状态一起使用。首选非通配符源（完全匹配）过度通配的源，并尽可能使用完全匹配。通常会转换通配符源图像，例如在预照上对图像进行透视，但不会修改完全匹配的源图像。GtkIconThemeGtkStateTypeGtkIconSetGtkIconSet
语法
参数
source- 一GtkIconSource
setting- TRUE 用于通配符小部件状态[br \=“”
另请参见
gtk3-Themeable-Stock-Images


------------ KeyGTK3gtk_icon_theme_add_builtin_icon ----

gtk_icon_theme_add_builtin_icon
注册用于图标主题查找的内置图标。内置图标的想法是允许使用主题图标的应用程序或库来运行，要求文件存在于文件系统中。例如，所有GTK+的库存图标的默认图像都是注册为内置图标。通常，如果使用gtk_icon_theme_add_builtin_icon（），则还应在图标主题中安装图标，以便图标正式发布。此函数通常与 pixbufs 一起使用，通过 gdk_pixbuf_new_from_inline（） 加载。
语法
参数
icon_name- 要注册的图标的名称
size- 注册图标的大小（以像素为单位）（可以为不同大小的同一图标名称注册不同的图像。
pixbuf  -  	GdkPixbuf包含用于icon_name的图像。
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_append_search_path ----

gtk_icon_theme_append_search_path
将目录追加到搜索路径。请参见 gtk_icon_theme_set_search_path（）。
语法
参数
icon_theme- 一GtkIconTheme
path- 要附加到图标路径的目录名称。[类型文件名]
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_choose_icon ----

gtk_icon_theme_choose_icon
查找命名图标并返回包含信息，如图标的文件名。然后，图标可以渲染成像素usinggtk_icon_info_load_icon（）。（gtk_icon_theme_load_icon（）结合了这两个步骤，如果你所需要的只是pixbuf。如果icon_names包含多个名称，则此函数将按给定的顺序尝试所有名称，然后再回退到继承的图标主题。GtkIconInfo
语法
参数
icon_theme- 一GtkIconTheme
icon_names- 以 NULL 结尾的图标名称数组进行查找。[数组零终止 = 1]
size- 所需的图标大小
flags- 标记修改图标查找的行为
返回
包含有关图标信息的对象，如果未找到图标，则为 NULL。[转移完整]GtkIconInfo
自 2.12 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_choose_icon_for_scale ----

gtk_icon_theme_choose_icon_for_scale
查找特定窗口比例的命名图标，并返回包含信息，如图标的文件名。然后，可以将图标呈现为像素usinggtk_icon_info_load_icon（）。（gtk_icon_theme_load_icon（） 结合了这两个步骤，如果你所需要的只是 pixbuf。如果icon_names包含多个名称，则此函数将按给定的顺序尝试所有名称，然后再回退到继承的图标主题。GtkIconInfo
语法
参数
icon_theme- 一GtkIconTheme
icon_names- 以 NULL 结尾的图标名称数组进行查找。[数组零终止 = 1]
size- 所需的图标大小
scale- 所需的规模
flags- 标记修改图标查找的行为
返回
包含有关图标信息的对象，如果未找到图标，则为 NULL。[转移完整]GtkIconInfo
自 3.10 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_get_default ----

gtk_icon_theme_get_default
获取默认屏幕的图标主题。Seegtk_icon_theme_get_for_screen（）.
返回
与默认屏幕关联的唯一项。此图标主题与屏幕相关联，只要屏幕打开即可使用。不要引用或取消引用它。[无转移]GtkIconTheme
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_get_example_icon_name ----

gtk_icon_theme_get_example_icon_name
获取代表当前主题的图标的名称（例如，在向用户显示主题列表时使用）。
语法
参数
icon_theme- 一GtkIconTheme
返回
示例图标的名称或 NULL。使用g_free（） 免费。
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_get_for_screen ----

gtk_icon_theme_get_for_screen
获取与屏幕关联的图标主题对象;如果以前未为给定屏幕调用此函数，则将创建一个新的图标主题对象并与屏幕关联。图标主题对象的创建成本非常高昂，因此使用此函数通常比调用比gtk_icon_theme_new（）和自己设置屏幕更好的选择;通过使用此功能，用户之间将共享单个图标主题对象。
语法
参数
screen- 一GdkScreen
返回
与给定屏幕关联的唯一项。此图标主题与屏幕相关联，只要屏幕打开即可使用。不要引用或取消引用它。[无转移]GtkIconTheme
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_get_icon_sizes ----

gtk_icon_theme_get_icon_sizes
返回一个整数数组，该数组描述图标在不缩放的情况下可用时的大小。大小为 -1 表示图标以可缩放的格式提供。数组以零终止。
语法
参数
icon_theme- 一GtkIconTheme
icon_name- 图标的名称
返回
新分配的数组描述图标可用的大小。当不再需要数组时，应使用 g_free（） 释放它。[数组零终止 = 1]
自 2.6 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_get_search_path ----

gtk_icon_theme_get_search_path
获取当前搜索路径。请参见 gtk_icon_theme_set_search_path（）。
语法
参数
icon_theme- 一GtkIconTheme
path- 存储图标主题路径目录列表的位置或 NULL。存储的值应使用 g_strfreev（） 释放。[允许-无][数组长度 = n_elements][元素类型文件名][输出]
n_elements- 位置存储路径中的元素数量，或 NULL
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_has_icon ----

gtk_icon_theme_has_icon
检查图标主题是否包含特定名称的图标。
语法
参数
icon_theme- 一GtkIconTheme
icon_name- 图标的名称
返回
如果icon_themeincludes icon_name的动画图标，则为 true。
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_list_contexts ----

gtk_icon_theme_list_contexts
获取当前图标主题层次结构中可用的上下文列表
语法
参数
icon_theme- 一GtkIconTheme
返回
一个列表，其中包含主题中所有上下文的名称。您必须首先使用g_free（）释放列表中的每个元素，然后使用g_list_free（）释放listitself。[元素型 utf8][转移完整]GList
自 2.12 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_list_icons ----

gtk_icon_theme_list_icons
列出当前图标主题中的图标。通过提供上下文字符串，只能列出图标的子集。上下文字符串的值集与系统相关，但通常包括诸如 ？应用？和？哑剧类型？.
语法
参数
icon_theme- 一GtkIconTheme
context- 标识特定类型的图标的字符串，或 NULL 列出所有图标。[允许-无]
返回
一个列表，其中包含主题中所有图标的名称。您必须首先使用g_free（）释放列表中的每个元素，然后使用g_list_free（）释放listitself。[元素型 utf8][转移完整]GList
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_load_icon ----

gtk_icon_theme_load_icon
在图标主题中查找图标，将其缩放到给定大小，然后将其呈现为像素泡。这是一个方便的功能;如果需要有关图标的更多详细信息，usegtk_icon_theme_lookup_icon（） 后跟 gtk_icon_info_load_icon（）。请注意，您可能希望侦听图标主题更改并更新图标。这通常是通过连接到GtkWidget：：style-set信号来完成的。如果由于某种原因您不想在图标主题更改时更新图标，则应考虑使用gdk_pixbuf_copy（）来制作此函数的pixbufreturn的私有副本。否则，GTK+可能需要加载旧图标主题，这将是浪费内存。
语法
参数
icon_theme- 一GtkIconTheme
icon_name- 要查找的图标的名称
size- 所需的图标大小。生成的图标可能不是这个大小;参见 gtk_icon_info_load_icon（）。
flags- 标记修改图标查找的行为
error- 存储故障错误信息的位置，或 NULL。[允许-无]
返回
渲染的图标;这可能是新创建的图标或对内部图标的新引用，因此您不得修改图标。使用 g_object_unref（） 释放您对图标的引用。如果找不到该图标，则为 NULL。[转移完整]
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_load_icon_for_scale ----

gtk_icon_theme_load_icon_for_scale
在图标主题中查找特定窗口比例的图标，将其缩放到给定大小并将其渲染为像素。这是便利功能;如果需要有关图标的更多详细信息，请使用gtk_icon_theme_lookup_icon（） 跟bygtk_icon_info_load_icon（）。请注意，您可能希望侦听图标主题更改并更新图标。这通常是通过连接到GtkWidget：：style-set信号来完成的。如果由于某种原因您不想在图标主题更改时更新图标，则应考虑使用gdk_pixbuf_copy（）来制作此函数的pixbufreturn的私有副本。否则，GTK+可能需要加载旧图标主题，这将是浪费内存。
语法
参数
icon_theme- 一GtkIconTheme
icon_name- 要查找的图标的名称
size- 所需的图标大小。生成的图标可能不是这个大小;参见 gtk_icon_info_load_icon（）。
scale- 所需的规模
flags- 标记修改图标查找的行为
error- 存储故障错误信息的位置，或 NULL。[允许-无]
返回
渲染的图标;这可能是新创建的图标或对内部图标的新引用，因此您不得修改图标。使用 g_object_unref（） 释放您对图标的引用。如果找不到该图标，则为 NULL。[转移完整]
自 3.10 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_load_surface ----

gtk_icon_theme_load_surface
在图标主题中查找特定窗口比例的图标，将其缩放到给定大小并将其渲染为开罗表面。这是便利功能;如果需要有关图标的更多详细信息，请使用gtk_icon_theme_lookup_icon（） 后跟bygtk_icon_info_load_surface（）。请注意，您可能希望侦听图标主题更改并更新图标。这通常是通过连接到GtkWidget：：style-set信号来完成的。
语法
参数
icon_theme- 一GtkIconTheme
icon_name- 要查找的图标的名称
size- 所需的图标大小。生成的图标可能不是这个大小;参见 gtk_icon_info_load_icon（）。
scale- 所需的规模
for_window  -  	 GdkWindow以优化绘图，或 NULL。[允许-无]
flags- 标记修改图标查找的行为
error- 存储故障错误信息的位置，或 NULL。[允许-无]
返回
渲染的图标;这可能是新创建的图标或对内部图标的新引用，因此您不得修改图标。使用 cairo_surface_destroy（） 释放您对图标的引用。如果找不到该图标，则为 NULL。[转移完整]
自 3.10 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_lookup_by_gicon ----

gtk_icon_theme_lookup_by_gicon
查找图标并返回包含信息，如图标的文件名。然后，可以将图标呈现为像素usinggtk_icon_info_load_icon（）。GtkIconInfo
语法
参数
icon_theme- 一GtkIconTheme
icon- 查找GIcon
size- 所需的图标大小
flags- 标记修改图标查找的行为
返回
包含有关图标的信息，如果找不到图标，则为 NULL。使用 g_object_unref（） 取消引用。[转移完整]GtkIconInfo
自 2.14 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_lookup_by_gicon_for_scale ----

gtk_icon_theme_lookup_by_gicon_for_scale
查找图标并返回包含信息，如图标的文件名。然后，可以将图标呈现为像素usinggtk_icon_info_load_icon（）。GtkIconInfo
语法
参数
icon_theme- 一GtkIconTheme
icon- 查找GIcon
size- 所需的图标大小
scale- 所需的比例
flags- 标记修改图标查找的行为
返回
包含有关图标的信息，如果找不到图标，则为 NULL。使用 g_object_unref（） 取消引用。[转移完整]GtkIconInfo
自 3.10 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_lookup_icon ----

gtk_icon_theme_lookup_icon
查找命名图标并返回包含信息，如图标的文件名。然后，图标可以渲染成像素usinggtk_icon_info_load_icon（）。（gtk_icon_theme_load_icon（）结合了这两个步骤，如果你所需要的只是pixbuf。GtkIconInfo
语法
参数
icon_theme- 一GtkIconTheme
icon_name- 要查找的图标的名称
size- 所需的图标大小
flags- 标记修改图标查找的行为
返回
包含有关图标信息的对象，如果未找到图标，则为 NULL。[转移完整]GtkIconInfo
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_lookup_icon_for_scale ----

gtk_icon_theme_lookup_icon_for_scale
查找特定窗口比例的命名图标，并返回包含信息，如图标的文件名。然后，可以将图标呈现为像素usinggtk_icon_info_load_icon（）。（gtk_icon_theme_load_icon（） 结合了这两个步骤，如果你所需要的只是 pixbuf。GtkIconInfo
语法
参数
icon_theme- 一GtkIconTheme
icon_name- 要查找的图标的名称
size- 所需的图标大小
scale- 所需的比例
flags- 标记修改图标查找的行为
返回
包含有关图标的信息的对象，如果未找到图标，则为 NULL。[转移完整]GtkIconInfo
自 3.10 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_new ----

gtk_icon_theme_new
创建新的图标主题对象。图标主题对象用于在特定图标主题中按名称查找图标。通常，您需要使用gtk_icon_theme_get_default（）或gtk_icon_theme_get_for_screen（），而不是从头开始创建新的图标主题对象。
返回
新创建的对象。GtkIconTheme
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_prepend_search_path ----

gtk_icon_theme_prepend_search_path
将目录预置到搜索路径。请参见 gtk_icon_theme_set_search_path（）。
语法
参数
icon_theme- 一GtkIconTheme
path- 目录名称以附加到图标路径之前。[类型文件名]
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_rescan_if_needed ----

gtk_icon_theme_rescan_if_needed
检查图标主题是否已更改;如果有，则将丢弃任何当前缓存的信息，并将在访问icon_theme下一次重新加载。
语法
参数
icon_theme- 一GtkIconTheme
返回
如果图标主题已更改并需要重新加载，则为 TRUE。
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_set_custom_theme ----

gtk_icon_theme_set_custom_theme
设置对象使用的图标主题的名称覆盖系统配置。不能在从 gtk_icon_theme_get_default（） 和 gtk_icon_theme_get_for_screen（） 返回的图标主题对象上调用此函数。GtkIconTheme
语法
参数
icon_theme- 一GtkIconTheme
theme_name- 图标主题的名称，用于代替配置的主题，或 NULL 取消设置以前设置的自定义主题。[允许-无]
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_set_screen ----

gtk_icon_theme_set_screen
设置图标主题的屏幕;该屏幕用于跟踪用户当前配置的图标主题，对于不同的屏幕，该主题可能有所不同。
语法
参数
icon_theme- 一GtkIconTheme
screen- 一GdkScreen
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_theme_set_search_path ----

gtk_icon_theme_set_search_path
设置图标主题对象的搜索路径。当查找图标主题时，GTK+将在路径中搜索与图标主题同名的一个或多个目录的子目录。（来自多个路径元素的主题组合在一起，以允许通过在用户的主目录中添加图标来扩展主题。此外，如果在当前图标主题或默认图标主题中都找不到找到的图标，并且直接在其中一个路径元素中找到具有正确名称的图像文件，则该图像将用于图标名称。（这是旧版功能，新图标应该是默认图标主题，称为hicolor，而不是直接在图标路径上。
语法
参数
icon_theme- 一GtkIconTheme
path- 搜索图标主题的目录数组。[数组长度 = n_elements][元素类型文件名]
n_elements- 路径中的元素数。
2.4 起
另请参见
GtkIconTheme


------------ KeyGTK3gtk_icon_view_convert_widget_to_bin_window_coords ----

gtk_icon_view_convert_widget_to_bin_window_coords
将微件坐标转换为bin_window的坐标，例如 gtk_icon_view_get_path_at_pos（）。
语法
参数
icon_view- 一GtkIconView
wx- X坐标相对于小部件
wy- 相对于小部件的 Y 坐标
bx- 返回bin_window X 坐标的位置。[输出]
by- 返回bin_window Y 坐标的位置。[输出]
自 2.12 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_create_drag_icon ----

gtk_icon_view_create_drag_icon
在路径处创建项的表示形式。此图像用于拖动图标。cairo_surface_t
语法
参数
icon_view- 一GtkIconView
path- icon_viewGtkTreePath
返回
拖动图标的新分配曲面。[转移完整]
自 2.
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_enable_model_drag_dest ----

gtk_icon_view_enable_model_drag_dest
Turns icon_view into a drop destination for automatic DND. Calling thismethod sets  to FALSE.?reorderable?
Syntax
Parameters
icon_view  -  	a GtkIconView
targets  -  	 the table of targets that the drag willsupport. [array length=n_targets]
n_targets  -  	the number of items in targets
actions  -  	the bitmask of possible actions for a drag to thiswidget
Since 2.8
See Also
GtkIconView


------------ KeyGTK3gtk_icon_view_enable_model_drag_source ----

gtk_icon_view_enable_model_drag_source
Turns icon_view into a drag source for automatic DND. Calling thismethod sets  to FALSE.?reorderable?
Syntax
Parameters
icon_view  -  	a GtkIconView
start_button_mask  -  	Mask of allowed buttons to start drag
targets  -  	 the table of targets that the drag willsupport. [array length=n_targets]
n_targets  -  	the number of items in targets
actions  -  	the bitmask of possible actions for a drag from thiswidget
Since 2.8
See Also
GtkIconView


------------ KeyGTK3gtk_icon_view_get_activate_on_single_click ----

gtk_icon_view_get_activate_on_single_click
Gets the setting set by gtk_icon_view_set_activate_on_single_click().
Syntax
Parameters
icon_view  -  	a GtkIconView
Returns
TRUE if item-activated will be emitted on a single click
Since 3.8
See Also
GtkIconView


------------ KeyGTK3gtk_icon_view_get_cell_rect ----

gtk_icon_view_get_cell_rect
Fills the bounding rectangle in widget coordinates for the cell specified bypath and cell. If cell is NULL the main cell area is used.This function is only valid if icon_view is realized.
Syntax
Parameters
icon_view  -  	a GtkIconView
path  -  	a GtkTreePath
cell  -  	 a  or NULL. [allow-none]GtkCellRenderer
rect  -  	 rectangle to fill with cell rect. [out]
Returns
FALSE if there is no such item, TRUE otherwise
Since 3.6
See Also
GtkIconView


------------ KeyGTK3gtk_icon_view_get_columns ----

gtk_icon_view_get_columns
Returns the value of the ::columns property.
Syntax
Parameters
icon_view  -  	a GtkIconView
Returns
the number of columns, or -1
Since 2.6
See Also
GtkIconView


------------ KeyGTK3gtk_icon_view_get_column_spacing ----

gtk_icon_view_get_column_spacing
返回 ：：列间距属性的值。
语法
参数
icon_view- 一GtkIconView
返回
列之间的间距
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_cursor ----

gtk_icon_view_get_cursor
使用当前光标路径和单元格填充路径和单元格。如果当前未设置游标，则 *path 将为 NULL。如果当前没有单元格具有焦点，则 *单元格将为 NULL。返回的必须使用gtk_tree_path_free（） 释放。GtkTreePath
语法
参数
icon_view- 一GtkIconView
path- 返回当前游标路径的位置，或 NULL。[输出][允许-无][转移完整]
cell- 返回当前焦点单元格的位置，或 NULL。[输出][允许-无][无转移]
返回
如果光标已设置，则为 TRUE。
自 2.8 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_dest_item_at_pos ----

gtk_icon_view_get_dest_item_at_pos
确定给定位置的目标项。
语法
参数
icon_view- 一GtkIconView
drag_x- 确定目标项目的位置
drag_y- 确定目标项目的位置
path- 返回项目路径的位置，或 NULL。[输出][允许-无]
pos- 返回放置位置的位置，或 NULL。[输出][允许-无]
返回
给定位置是否有项目。
自 2.8 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_drag_dest_item ----

gtk_icon_view_get_drag_dest_item
获取有关为反馈突出显示的项的信息。
语法
参数
icon_view- 一GtkIconView
path- 返回突出显示项的路径的位置，或 NULL。[输出][允许-无]
pos- 返回放置位置的位置，或 NULL。[输出][允许-无]
自 2.8 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_item_at_pos ----

gtk_icon_view_get_item_at_pos
查找点 （x， y） 处相对于bin_window坐标的路径。与gtk_icon_view_get_path_at_pos（）相反，此函数还获取指定位置的单元格。返回的路径应使用 gtk_tree_path_free（） 释放。请参阅 gtk_icon_view_convert_widget_to_bin_window_coords（） 将小坐标转换为bin_window坐标。
语法
参数
icon_view- 一.GtkIconView
x- 要识别的 x 位置
y- 要识别的 y 位置
path- 返回路径的位置，或 NULL。[输出][允许-无]
cell- 返回对 （x， y） 处的单元格负责的渲染器的位置，或 NULL。[输出][允许-无]
返回
如果项目存在于指定位置，则为 TRUE
自 2.8 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_item_column ----

gtk_icon_view_get_item_column
获取当前显示项路径的列。列号从 0 开始。
语法
参数
icon_view- 一GtkIconView
path- 项目的GtkTreePath
返回
显示项目的列
2.22 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_item_orientation ----

gtk_icon_view_get_item_orientation
返回 ：：item-orientation 属性的值，该属性确定标签是绘制在图标旁边还是下面。
语法
参数
icon_view- 一GtkIconView
返回
文本和图标的相对位置
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_item_padding ----

gtk_icon_view_get_item_padding
返回 ：：项填充属性的值。
语法
参数
icon_view- 一GtkIconView
返回
项目周围的填充
自 2.18 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_item_row ----

gtk_icon_view_get_item_row
获取当前显示项路径的行。行号从 0 开始。
语法
参数
icon_view- 一GtkIconView
path- 项目的GtkTreePath
返回
显示项目的行
2.22 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_item_width ----

gtk_icon_view_get_item_width
返回 ：：item-width 属性的值。
语法
参数
icon_view- 一GtkIconView
返回
单个项目的宽度，或 -1
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_margin ----

gtk_icon_view_get_margin
返回 ：：margin 属性的值。
语法
参数
icon_view- 一GtkIconView
返回
边界处的空间
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_markup_column ----

gtk_icon_view_get_markup_column
返回包含icon_view标记文本的列。
语法
参数
icon_view- 一.GtkIconView
返回
标记列，如果未设置，则为 -1。
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_model ----

gtk_icon_view_get_model
返回 所基于的模型。如果未设置模型，则返回 NULL。GtkIconView
语法
参数
icon_view- 一GtkIconView
返回
A ，如果当前没有当前正在使用，则为 NULL。[无转移]GtkTreeModel
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_path_at_pos ----

gtk_icon_view_get_path_at_pos
查找点 （x， y） 处相对于bin_window坐标的路径。请参阅gtk_icon_view_get_item_at_pos（），如果您也对指定位置的单元格感兴趣。请参阅 gtk_icon_view_convert_widget_to_bin_window_coords（） 将小坐标转换为bin_window坐标。
语法
参数
icon_view- 一.GtkIconView
x- 要识别的 x 位置
y- 要识别的 y 位置
返回
与图标或 NULLif 对应的该位置不存在图标。GtkTreePath
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_pixbuf_column ----

gtk_icon_view_get_pixbuf_column
返回包含icon_view像素的列。
语法
参数
icon_view- 一.GtkIconView
返回
pixbuf 列，如果未设置，则为 -1。
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_reorderable ----

gtk_icon_view_get_reorderable
检索用户是否可以通过拖放对列表重新排序。请参见 gtk_icon_view_set_reorderable（）。
语法
参数
icon_view- 一GtkIconView
返回
如果列表可以重新排序，则为 TRUE。
自 2.8 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_row_spacing ----

gtk_icon_view_get_row_spacing
返回 ：：行间距属性的值。
语法
参数
icon_view- 一GtkIconView
返回
行之间的间距
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_selected_items ----

gtk_icon_view_get_selected_items
创建所有选定项的路径列表。此外，如果计划在调用此函数后修改模型，则可能需要将返回的列表转换为 .为此，您可以使用 gtk_tree_row_reference_new（）。要释放返回值，请使用：1[/语法] [语法]g_list_free_full（列表，（GDestroyNotify）gtk_tree_path_free）;[/语法]GtkTreeRowReferences
语法
参数
icon_view- 一.GtkIconView
返回
A，其中包含每个选定行的 。[元素型 GtkTreePath][转移完整]GListGtkTreePath
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_selection_mode ----

gtk_icon_view_get_selection_mode
获取icon_view的选择模式。
语法
参数
icon_view- 一.GtkIconView
返回
当前选择模式
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_spacing ----

gtk_icon_view_get_spacing
返回 ：：间距属性的值。
语法
参数
icon_view- 一GtkIconView
返回
单元格之间的空间
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_text_column ----

gtk_icon_view_get_text_column
返回包含icon_view文本的列。
语法
参数
icon_view- 一.GtkIconView
返回
文本列，如果未设置，则为 -1。
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_tooltip_column ----

gtk_icon_view_get_tooltip_column
返回icon_view模型的列，该列用于在icon_view行上显示工具提示。
语法
参数
icon_view- 一GtkIconView
返回
当前正在使用的工具提示列的索引，如果禁用了，则为 -1。
自 2.12 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_tooltip_context ----

gtk_icon_view_get_tooltip_context
此函数应该在 的信号处理程序中使用。在信号处理程序中接收的 x、y 和 keyboard_tip 值应不经修改即可传递给此函数。返回值指示鼠标工具提示的给定坐标 （TRUE） 处是否存在图标视图项 （FALSE）。对于键盘工具提示，返回的项目将是光标项目。当为TRUE时，则已提供的任何模型，路径和迭代器将被设置为指向该行和相应的模型。如果 x 和 y 是 FALSE，则 x 和 y 将始终转换为相对于 keyboard_tooltip icon_view bin_window。?query-tooltip?GtkIconView
语法
参数
icon_view- 一个GtkIconView
x- x 坐标（相对于小部件坐标）。[输入]
y- y坐标（相对于小部件坐标）。[输入]
keyboard_tip- 这是否是键盘工具提示
model- 用于接收或 NULL 的指针。[输出][允许-无][无转移]GtkTreeModel
path- 用于接收或 NULL 的指针。[输出][允许-无]GtkTreePath
iter- 用于接收或 NULL 的指针。[输出][允许-无]GtkTreeIter
返回
给定的工具提示上下文是否指向项
自 2.12 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_get_visible_range ----

gtk_icon_view_get_visible_range
将start_path和end_path设置为第一个和最后一个可见路径。请注意，中间可能存在不可见的路径。使用后，两条路径都应使用gtk_tree_path_free（） 释放。
语法
参数
icon_view- 一GtkIconView
start_path- 返回区域开始的位置，或空。[输出][允许-无]
end_path- 返回区域末尾的位置，或 NULL。[输出][允许-无]
返回
TRUE，如果有效路径已放置在start_pathand end_path
自 2.8 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_item_activated ----

gtk_icon_view_item_activated
激活由路径确定的项。
语法
参数
icon_view- 一GtkIconView
path- 待激活GtkTreePath
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_new ----

gtk_icon_view_new
创建新的微件GtkIconView
返回
新创建的小部件GtkIconView
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_new_with_area ----

gtk_icon_view_new_with_area
使用指定的区域创建新构件以布局图标内的单元格。GtkIconView
语法
参数
area- 用于布局单元格GtkCellArea
返回
新创建的小部件GtkIconView
自 3.0 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_new_with_model ----

gtk_icon_view_new_with_model
使用模型模型创建新微件。GtkIconView
语法
参数
model- 模型。
返回
新创建的小部件。GtkIconView
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_path_is_selected ----

gtk_icon_view_path_is_selected
如果当前选择了路径所指向的图标，则返回 TRUE。如果 path 未指向有效位置，则返回 FALSE。
语法
参数
icon_view- 一.GtkIconView
path- A 检查选择。GtkTreePath
返回
如果选择了路径，则为 TRUE。
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_scroll_to_path ----

gtk_icon_view_scroll_to_path
将icon_view的对齐方式移动到路径指定的位置。row_align确定行的放置位置，col_align确定列的放置位置。预计两者都在 0.0 和 1.0 之间。0.0 表示左/上对齐，1.0 表示右/下对齐，0.5 表示居中。如果use_align为 FALSE，则将忽略对齐参数，并且树将执行最少的工作量以将项目滚动到屏幕上。这意味着项目将滚动到最接近其当前位置的边缘。如果项目当前在屏幕上可见，则不执行任何操作。仅当设置了模型，并且 path 是模型上的有效行时，此函数才有效。如果模型在实现icon_view之前发生更改，则将修改居中路径以反映此更改。
语法
参数
icon_view- 一.GtkIconView
path- 要移动到的项目的路径。
use_align- 是使用对齐参数，还是 FALSE。
row_align- 由路径指定的项目的垂直对齐方式。
col_align- 由路径指定的项目的水平对齐方式。
自 2.8 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_selected_foreach ----

gtk_icon_view_selected_foreach
为每个选定的图标调用一个函数。请注意，无法从此函数中修改模型或选择。
语法
参数
icon_view- 一.GtkIconView
func- 要为每个选定图标调用的函数。[范围调用]
data- 要传递给函数的用户数据。
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_select_all ----

gtk_icon_view_select_all
选择所有图标。icon_view必须将其选择模式设置为 。GTK_SELECTION_MULTIPLE
语法
参数
icon_view- 一.GtkIconView
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_select_path ----

gtk_icon_view_select_path
选择路径处的行。
语法
参数
icon_view- 一.GtkIconView
path- 要选择的。GtkTreePath
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_activate_on_single_click ----

gtk_icon_view_set_activate_on_single_click
使信号在单击时发出，而不是双击。?item-activated?
语法
参数
icon_view- 一GtkIconView
single- TRUE，只需单击一下即可发出激活的项目
3.8 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_columns ----

gtk_icon_view_set_columns
设置 ：：columns 属性，该属性确定图标在多列中的排列方式。如果列为-1，则将自动选择列数以填充可用区域。
语法
参数
icon_view- 一GtkIconView
columns- 列数
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_column_spacing ----

gtk_icon_view_set_column_spacing
设置 ：：列间距属性，该属性指定在图标视图的列之间插入的空间。
语法
参数
icon_view- 一GtkIconView
column_spacing- 列间距
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_cursor ----

gtk_icon_view_set_cursor
将当前键盘焦点设置为路径，然后选择它。当您希望将用户的注意力集中在特定项目上时，这是有用的。如果单元格不为 NULL，则焦点将分配给它指定的单元格。此外，如果start_editing为 TRUE，则应在指定的单元格中开始编辑。此功能后面通常跟有gtk_widget_grab_focus（icon_view），以便为小部件提供键盘焦点。请注意，只有在实现小部件时才能进行编辑。
语法
参数
icon_view- 一GtkIconView
path- 一GtkTreePath
cell- icon_view的单元格渲染器之一，或 NULL。[允许-无]
start_editing- 如果指定的单元格应开始编辑，则为 TRUE。
自 2.8 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_drag_dest_item ----

gtk_icon_view_set_drag_dest_item
设置为反馈突出显示的项。
语法
参数
icon_view- 一GtkIconView
path- 要突出显示的项的路径，或 NULL。[允许-无]
pos- 指定相对于项目放置的位置
自 2.8 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_item_orientation ----

gtk_icon_view_set_item_orientation
设置 ：：item-orientation 属性，该属性确定标签是绘制在图标旁边还是下面。
语法
参数
icon_view- 一GtkIconView
orientation- 文本和图标的相对位置
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_item_padding ----

gtk_icon_view_set_item_padding
设置指定每个图标视图项的填充的属性。?item-padding?
语法
参数
icon_view- 一GtkIconView
item_padding- 项目填充
自 2.18 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_item_width ----

gtk_icon_view_set_item_width
设置 ：：item-width 属性，该属性指定要用于每个项的宽度。如果设置为 -1，图标视图将自动确定合适的项目大小。
语法
参数
icon_view- 一GtkIconView
item_width- 每个项目的宽度
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_margin ----

gtk_icon_view_set_margin
设置 ：：margin 属性，该属性指定在图标视图的顶部、底部、左侧和右侧插入的空间。
语法
参数
icon_view- 一GtkIconView
margin- 保证金
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_markup_column ----

gtk_icon_view_set_markup_column
将包含icon_view标记信息的列设置为列。标记列的类型必须为 。如果标记列设置为某些内容，它将覆盖 gtk_icon_view_set_text_column（） 设置的文本列。G_TYPE_STRING
语法
参数
icon_view- 一.GtkIconView
column- 当前使用的模型中的列，或 -1 表示不显示任何文本
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_model ----

gtk_icon_view_set_model
设置 的模型。如果icon_view已经设置了模型，它将在设置新模型之前将其删除。如果模型为 NULL，则将取消设置旧模型。GtkIconView
语法
参数
icon_view- 一.GtkIconView
model- 模型。[允许-无]
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_pixbuf_column ----

gtk_icon_view_set_pixbuf_column
将带有像素的列设置为列，icon_view。像素布列的类型必须为GDK_TYPE_PIXBUF
语法
参数
icon_view- 一.GtkIconView
column- 当前使用的模型中的列，或 -1 以禁用
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_reorderable ----

gtk_icon_view_set_reorderable
此函数是一个方便的函数，允许您对支持 和 的模型重新排序。两者都支持这些。如果可重新排序为 TRUE，则用户可以通过拖放行来重新排序模型。开发人员可以通过连接到模型srow_inserted并row_deleted信号来侦听这些变化。通过将图标视图设置为拖动源和目标来实现重新排序。因此，拖动和拖放不能用于任何其他目的的可重新排序视图中。此功能不会让您对订单进行任何程度的控制 - 允许任何重新排序。如果需要更多控制，则可能应手动处理拖放操作。GtkTreeDragSourceIfaceGtkTreeDragDestIfaceGtkTreeStoreGtkListStore
语法
参数
icon_view- 一.GtkIconView
reorderable- TRUE，如果项目列表可以重新排序。
自 2.8 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_row_spacing ----

gtk_icon_view_set_row_spacing
设置 ：：row-间距属性，该属性指定在图标视图的行之间插入的空间。
语法
参数
icon_view- 一GtkIconView
row_spacing- 行间距
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_selection_mode ----

gtk_icon_view_set_selection_mode
设置icon_view的选择模式。
语法
参数
icon_view- 一.GtkIconView
mode- 选择模式
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_spacing ----

gtk_icon_view_set_spacing
设置 ：：spacing 属性，该属性指定在项的单元格（即图标和文本）之间插入的空间。
语法
参数
icon_view- 一GtkIconView
spacing- 间距
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_text_column ----

gtk_icon_view_set_text_column
将包含文本的列设置为icon_view列。文本列的类型必须为 。G_TYPE_STRING
语法
参数
icon_view- 一.GtkIconView
column- 当前使用的模型中的列，或 -1 表示不显示任何文本
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_tooltip_cell ----

gtk_icon_view_set_tooltip_cell
将工具提示的提示区域设置为单元格在路径所指向的项中所占据的区域。另请参见gtk_tooltip_set_tip_area（）。另请参阅 gtk_icon_view_set_tooltip_column（） 以获取更简单的替代方法。
语法
参数
icon_view- 一GtkIconView
tooltip- 一GtkTooltip
path- 一GtkTreePath
cell- a 或 NULL。[允许-无]GtkCellRenderer
自 2.12 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_tooltip_column ----

gtk_icon_view_set_tooltip_column
如果您只计划在完整项目上使用简单（纯文本）工具提示，则可以使用此功能自动为您处理这些工具提示。列应设置为包含工具提示文本icon_view模型中的列，或设置为 -1 以禁用此功能。启用后，将设置为 TRUE，andicon_view将连接信号处理程序。请注意，信号处理程序使用gtk_tooltip_set_markup（），因此 &，<等设置文本必须在文本中转义。GtkIconView?has-tooltip??query-tooltip?
语法
参数
icon_view- 一GtkIconView
column- 一个整数，它是icon_view模型的有效列号
自 2.12 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_set_tooltip_item ----

gtk_icon_view_set_tooltip_item
将工具提示的提示区域设置为路径处的项所覆盖的区域。另请参阅 gtk_icon_view_set_tooltip_column（） 以获取更简单的替代方法。另请参见gtk_tooltip_set_tip_area（）。
语法
参数
icon_view- 一GtkIconView
tooltip- 一GtkTooltip
path- 一GtkTreePath
自 2.12 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_unselect_all ----

gtk_icon_view_unselect_all
取消选择所有图标。
语法
参数
icon_view- 一.GtkIconView
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_unselect_path ----

gtk_icon_view_unselect_path
取消选择路径处的行。
语法
参数
icon_view- 一.GtkIconView
path- 要取消选择的。GtkTreePath
自 2.6 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_unset_model_drag_dest ----

gtk_icon_view_unset_model_drag_dest
撤消gtk_icon_view_enable_model_drag_dest（） 的效果。调用此方法设置为 FALSE。?reorderable?
语法
参数
icon_view- 一GtkIconView
自 2.8 起
另请参见
GtkIconView


------------ KeyGTK3gtk_icon_view_unset_model_drag_source ----

gtk_icon_view_unset_model_drag_source
撤消 gtk_icon_view_enable_model_drag_source（） 的效果。调用此方法设置为 FALSE。?reorderable?
语法
参数
icon_view- 一GtkIconView
自 2.8 起
另请参见
GtkIconView


------------ KeyGTK3gtk_image_clear ----

gtk_image_clear
将映像重置为空。
语法
参数
image- 一GtkImage
自 2.8 起
另请参见
GtkImage


------------ KeyGTK3gtk_image_get_animation ----

gtk_image_get_animation
获取 由 显示的。映像的存储类型必须GTK_IMAGE_EMPTY orGTK_IMAGE_ANIMATION（请参见 gtk_image_get_storage_type（））。此函数的调用方不拥有对其动画的引用。GdkPixbufAnimationGtkImage
语法
参数
image- 一GtkImage
返回
显示的动画，如果图像为空，则为 NULL。[无转移]
另请参见
GtkImage


------------ KeyGTK3gtk_image_get_gicon ----

gtk_image_get_gicon
获取 和 正在显示的大小。映像的存储类型必须GTK_IMAGE_EMPTY orGTK_IMAGE_GICON（请参见gtk_image_get_storage_type（））。此函数的调用方不拥有对 thereturned 的引用。GIconGtkImageGIcon
语法
参数
image- 一GtkImage
gicon- 存储 a 或 NULL 的位置。[输出][无转移][允许-无]GIcon
size- 存储图标大小或空的位置。[输出][允许-无][键入整型]
自 2.14 起
另请参见
GtkImage


------------ KeyGTK3gtk_image_get_icon_name ----

gtk_image_get_icon_name
获取 由 显示的图标名称和大小。映像的存储类型必须GTK_IMAGE_EMPTY orGTK_IMAGE_ICON_NAME（请参见gtk_image_get_storage_type（））。返回的字符串归 归 ，不应被释放。GtkImageGtkImage
语法
参数
image- 一GtkImage
icon_name- 存储动画名称的地方，或空。[输出][无转移][允许-无]
size- 存储图标大小或空的位置。[输出][允许-无][键入整型]
自 2.6 起
另请参见
GtkImage


------------ KeyGTK3gtk_image_get_icon_set ----

gtk_image_get_icon_set
gtk_image_get_icon_set自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_image_get_icon_name（）。获取 由 显示的图标集和大小。映像的存储类型必须GTK_IMAGE_EMPTY orGTK_IMAGE_ICON_SET（请参见gtk_image_get_storage_type（））。GtkImage
语法
参数
image- 一GtkImage
icon_set- 存储位置，或空。[输出][无转移][允许-无]GtkIconSet
size- 存储库存图标大小的位置，或空。[输出][允许-无][键入整型]
另请参见
GtkImage


------------ KeyGTK3gtk_image_get_pixbuf ----

gtk_image_get_pixbuf
获取 由 显示的。映像的存储类型必须GTK_IMAGE_EMPTY orGTK_IMAGE_PIXBUF（请参见 gtk_image_get_storage_type（））。此函数的调用方不拥有对 pixbuf 的引用。GdkPixbufGtkImage
语法
参数
image- 一GtkImage
返回
显示的像素，如果图像为空，则为 NULL。[无转移]
另请参见
GtkImage


------------ KeyGTK3gtk_image_get_pixel_size ----

gtk_image_get_pixel_size
获取用于命名图标的像素大小。
语法
参数
image- 一GtkImage
返回
用于命名图标的像素大小。
自 2.
另请参见
GtkImage


------------ KeyGTK3gtk_image_get_stock ----

gtk_image_get_stock
gtk_image_get_stock自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_image_get_icon_name（）。获取 由 显示的股票图标名称和大小。映像的存储类型必须GTK_IMAGE_EMPTY orGTK_IMAGE_STOCK（请参见gtk_image_get_storage_type（））。返回的字符串归 归 ，不应被释放。GtkImageGtkImage
语法
参数
image- 一GtkImage
stock_id- 存储股票图标名称的地方，或空。[输出][无转移][允许-无]
size- 存储股票图标的地方，或NULL。[输出][允许-无][键入整型]
另请参见
GtkImage


------------ KeyGTK3gtk_image_get_storage_type ----

gtk_image_get_storage_type
获取 用于存储图像数据的表示类型。如果没有图像数据，则返回值将GTK_IMAGE_EMPTY。GtkImageGtkImage
语法
参数
image- 一GtkImage
返回
正在使用的图像表示
另请参见
GtkImage


------------ KeyGTK3gtk_image_menu_item_get_always_show_image ----

gtk_image_menu_item_get_always_show_image
gtk_image_menu_item_get_always_show_image自 3.10 版起已弃用，不应在新编写的代码中使用。返回菜单项是否将忽略设置并始终显示图像（如果可用）。?gtk-menu-images?
语法
参数
image_menu_item- 一GtkImageMenuItem
返回
如果菜单项将始终显示图像，则为 TRUE
2.16 起
另请参见
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_get_image ----

gtk_image_menu_item_get_image
gtk_image_menu_item_get_image自 3.10 版起已弃用，不应在新编写的代码中使用。获取当前设置为image_menu_item图像的小部件。请参见gtk_image_menu_item_set_image（）。
语法
参数
image_menu_item- 一GtkImageMenuItem
返回
设置为image_menu_item图像的小部件。[无转移]
另请参见
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_get_use_stock ----

gtk_image_menu_item_get_use_stock
gtk_image_menu_item_get_use_stock自 3.10 版起已弃用，不应在新编写的代码中使用。检查菜单项中设置的标签是否用作库存 ID 以选择物料的库存物料。
语法
参数
image_menu_item- 一GtkImageMenuItem
返回
如果菜单项中设置的标签用作库存 ID 以选择物料的库存物料，则为 TRUE
2.16 起
另请参见
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_new ----

gtk_image_menu_item_new
gtk_image_menu_item_new自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用 gtk_menu_item_new（）。创建一个带有空标签的新标签。GtkImageMenuItem
返回
一个新的GtkImageMenuItem
另请参见
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_new_from_stock ----

gtk_image_menu_item_new_from_stock
gtk_image_menu_item_new_from_stock自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_menu_item_new（）。创建一个包含 astock 项中的图像和文本的新项。某些股票 ID 具有预处理器宏，如 和 。如果希望此菜单项具有可更改的加速器，请传递 inNULL 以获取accel_group。下次调用gtk_menu_item_set_accel_path（） 以及菜单项的适当路径，使用 gtk_stock_lookup（） 查找库存项的标准加速器，如果找到，callgtk_accel_map_add_entry（） 进行注册。GtkImageMenuItemGTK_STOCK_OKGTK_STOCK_APPLY
语法
参数
stock_id- 库存项目的名称。
accel_group- 将菜单项添加到或 NULL。[允许-无]GtkAccelGroup
返回
一个新的.GtkImageMenuItem
另请参见
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_new_with_label ----

gtk_image_menu_item_new_with_label
gtk_image_menu_item_new_with_label自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_menu_item_new_with_label（）。创建包含标签的新标签。GtkImageMenuItem
语法
参数
label- 菜单项的文本。
返回
一个新的.GtkImageMenuItem
另请参见
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_new_with_mnemonic ----

gtk_image_menu_item_new_with_mnemonic
gtk_image_menu_item_new_with_mnemonic自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_menu_item_new_with_mnemonic（）。创建包含标签的新标签。标签将使用gtk_label_new_with_mnemonic（）创建，因此下划线标签指示菜单项的助记符。GtkImageMenuItem
语法
参数
label- 菜单项的文本，在中间字符前面有下划线
返回
一个新的GtkImageMenuItem
另请参见
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_set_accel_group ----

gtk_image_menu_item_set_accel_group
gtk_image_menu_item_set_accel_group自 3.10 版起已弃用，不应在新编写的代码中使用。指定要向其添加菜单项加速器的accel_group（这仅适用于库存项，因此必须已设置库存项，请确保首先调用gtk_image_menu_item_set_use_stock（）和gtk_menu_item_set_label（） 并指定有效的库存项）。如果您希望此菜单项具有可更改的加速器，则不需要此按钮（请参阅gtk_image_menu_item_new_from_stock（））。
语法
参数
image_menu_item- 一GtkImageMenuItem
accel_group- 的GtkAccelGroup
自 2.1 起
另请参见
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_set_always_show_image ----

gtk_image_menu_item_set_always_show_image
gtk_image_menu_item_set_always_show_image自 3.10 版起已弃用，不应在新编写的代码中使用。如果为 TRUE，则菜单项将忽略该设置并始终显示图像（如果可用）。如果没有图像，menuitem 将无用或难以使用，请使用此属性。?gtk-menu-images?
语法
参数
image_menu_item- 一GtkImageMenuItem
always_show- 如果菜单项应始终显示图像，则为 TRUE
2.16 起
另请参见
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_set_image ----

gtk_image_menu_item_set_image
gtk_image_menu_item_set_image自 3.10 版起已弃用，不应在新编写的代码中使用。将image_menu_item的图像设置为给定的小部件。请注意，是否显示图像取决于显示菜单图像设置。
语法
参数
image_menu_item- 一个.GtkImageMenuItem
image- 要设置为菜单项图像的小部件。[允许-无]
另请参见
GtkImageMenuItem


------------ KeyGTK3gtk_image_menu_item_set_use_stock ----

gtk_image_menu_item_set_use_stock
gtk_image_menu_item_set_use_stock自 3.10 版起已弃用，不应在新编写的代码中使用。如果为 TRUE，则在菜单项中设置的标签将用作物料的库存 ID，以选择物料的库存物料。
语法
参数
image_menu_item- 一GtkImageMenuItem
use_stock- 如果菜单项应使用库存项，则为 TRUE
2.16 起
另请参见
GtkImageMenuItem


------------ KeyGTK3gtk_image_new ----

gtk_image_new
创建新的空构件。GtkImage
返回
新创建的小部件。GtkImage
另请参见
GtkImage


------------ KeyGTK3gtk_image_new_from_animation ----

gtk_image_new_from_animation
创建显示给定动画的动画。不假定引用动画;如果您拥有引用，您仍然需要取消引用它。将添加自己的参考，而不是采用您的参考。请注意，动画帧使用超时显示。使用动画来表示忙碌时，请记住，仅当主循环不忙于具有更高优先级的内容时，才会显示动画。GtkImageGtkImageGtkImageG_PRIORITY_DEFAULT
语法
参数
animation- 动画
返回
一个新的小部件GtkImage
另请参见
GtkImage


------------ KeyGTK3gtk_image_new_from_file ----

gtk_image_new_from_file
创建一个显示文件文件名的新文件名。如果文件找不到或无法加载，则结果将显示“损坏的图像？图标。此函数从不返回 NULL，它始终返回有效的小部件。如果文件包含动画，则图像将包含动画。如果需要检测加载文件的失败，usegdk_pixbuf_new_from_file（） 自行加载文件，然后从 pixbuf 创建。（或者对于动画，usegdk_pixbuf_animation_new_from_file（））。返回图像的存储类型（gtk_image_get_storage_type（））未定义，它将是适合于显示文件的任何类型。GtkImageGtkImageGtkImageGtkImage
语法
参数
filename- 文件名。[类型文件名]
返回
一个新的GtkImage
另请参见
GtkImage


------------ KeyGTK3gtk_image_new_from_gicon ----

gtk_image_new_from_gicon
从当前图标主题创建一个显示图标。如果图标名称未知，则“损坏的图像？图标将被显示。如果当前图标主题发生更改，图标将相应地更新。GtkImage
语法
参数
icon- 一个图标
size- 股票图标大小。[键入整型]
返回
一个新的显示主题图标GtkImage
自 2.14 起
另请参见
GtkImage


------------ KeyGTK3gtk_image_new_from_icon_name ----

gtk_image_new_from_icon_name
从当前图标主题创建一个显示图标。如果图标名称未知，则“损坏的图像？图标将被显示。如果当前图标主题发生更改，图标将相应地更新。GtkImage
语法
参数
icon_name- 图标名称
size- 股票图标大小。[键入整型]
返回
一个新的显示主题图标GtkImage
自 2.6 起
另请参见
GtkImage


------------ KeyGTK3gtk_image_new_from_icon_set ----

gtk_image_new_from_icon_set
gtk_image_new_from_icon_set自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_image_new_from_icon_name（）。创建显示图标集。样本库存大小为 ， 。通常最好在图标工厂中创建一个，放置您的图标集，将图标工厂添加到具有gtk_icon_factory_add_default（）的默认工厂列表中，然后使用gtk_image_new_from_stock（）。而不是使用此函数。这将允许主题覆盖随应用程序附带的图标。不假定引用 theicon 集;如果您拥有引用，您仍然需要取消引用它。将添加自己的参考，而不是采用您的参考。GtkImageGTK_ICON_SIZE_MENUGTK_ICON_SIZE_SMALL_TOOLBARGtkIconFactoryGtkImageGtkImage
语法
参数
icon_set- 一GtkIconSet
size- 股票图标大小。[键入整型]
返回
一个新的GtkImage
另请参见
GtkImage


------------ KeyGTK3gtk_image_new_from_pixbuf ----

gtk_image_new_from_pixbuf
创建新的显示像素插页。不假定引用 thepixbuf;如果您拥有引用，您仍然需要取消引用它。将添加自己的参考，而不是采用您的参考。请注意，此函数仅从 pixbuf 创建一个。创建者不会对状态更改做出反应。如果你想要这样，你应该使用gtk_image_new_from_icon_name（）。GtkImageGtkImageGtkImageGtkImageGtkImage
语法
参数
pixbuf- a 或 NULL。[允许-无]GdkPixbuf
返回
一个新的GtkImage
另请参见
GtkImage


------------ KeyGTK3gtk_image_new_from_resource ----

gtk_image_new_from_resource
创建一个新的显示资源文件resource_path。如果文件找不到或无法加载，则结果将显示“损坏的图像？图标。此函数从不返回 NULL，它始终返回有效的小部件。如果文件包含动画，则图像将包含动画。如果需要检测加载文件的失败，usegdk_pixbuf_new_from_file（） 自行加载文件，然后从 pixbuf 创建。（或者对于动画，usegdk_pixbuf_animation_new_from_file（））。返回图像的存储类型（gtk_image_get_storage_type（））未定义，它将是适合于显示文件的任何类型。GtkImageGtkImageGtkImageGtkImage
语法
参数
resource_path- 资源路径
返回
一个新的GtkImage
自 3.4 起
另请参见
GtkImage


------------ KeyGTK3gtk_image_new_from_stock ----

gtk_image_new_from_stock
gtk_image_new_from_stock自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用 gtk_image_new_from_icon_name（）。创建显示股票图标。示例股票图标名称为 、 。样本库存大小为 ， .如果 stockicon 名称未知，则图像将为空。您可以注册自己的股票图标名称，seegtk_icon_factory_add_default（）和gtk_icon_factory_add（）。GtkImageGTK_STOCK_OPENGTK_STOCK_QUITGTK_ICON_SIZE_MENUGTK_ICON_SIZE_SMALL_TOOLBAR
语法
参数
stock_id- 股票图标名称
size- 股票图标大小。[键入整型]
返回
一个新的显示股票图标GtkImage
另请参见
GtkImage


------------ KeyGTK3gtk_image_set_from_animation ----

gtk_image_set_from_animation
使 显示给定的动画（如果将动画设置为 NULL，则不显示任何动画）。GtkImage
语法
参数
image- 一GtkImage
animation- 的GdkPixbufAnimation
另请参见
GtkImage


------------ KeyGTK3gtk_image_set_from_file ----

gtk_image_set_from_file
有关详细信息，请参见 gtk_image_new_from_file（）。
语法
参数
image- 一GtkImage
filename- 文件名或空值。[类型文件名][允许-无]
另请参见
GtkImage


------------ KeyGTK3gtk_image_set_from_gicon ----

gtk_image_set_from_gicon
有关详细信息，请参见 gtk_image_new_from_gicon（）。
语法
参数
image- 一GtkImage
icon- 一个图标
size- 图标大小。[键入整型]
自 2.14 起
另请参见
GtkImage


------------ KeyGTK3gtk_image_set_from_icon_name ----

gtk_image_set_from_icon_name
有关详细信息，请参见 gtk_image_new_from_icon_name（）。
语法
参数
image- 一GtkImage
icon_name- 图标名称
size- 图标大小。[键入整型]
自 2.6 起
另请参见
GtkImage


------------ KeyGTK3gtk_image_set_from_icon_set ----

gtk_image_set_from_icon_set
gtk_image_set_from_icon_set自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_image_set_from_icon_name（）。有关详细信息，请参见 gtk_image_new_from_icon_set（）。
语法
参数
image- 一GtkImage
icon_set- 一GtkIconSet
size- 股票图标大小。[键入整型]
另请参见
GtkImage


------------ KeyGTK3gtk_image_set_from_pixbuf ----

gtk_image_set_from_pixbuf
有关详细信息，请参见 gtk_image_new_from_pixbuf（）。
语法
参数
image- 一GtkImage
pixbuf- a 或 NULL。[允许-无]GdkPixbuf
另请参见
GtkImage


------------ KeyGTK3gtk_image_set_from_resource ----

gtk_image_set_from_resource
有关详细信息，请参见 gtk_image_new_from_resource（）。
语法
参数
image- 一GtkImage
resource_path- 资源路径或 NULL。[允许-无]
另请参见
GtkImage


------------ KeyGTK3gtk_image_set_from_stock ----

gtk_image_set_from_stock
gtk_image_set_from_stock自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用 gtk_image_set_from_icon_name（）。有关详细信息，请参见 gtk_image_new_from_stock（）。
语法
参数
image- 一GtkImage
stock_id- 股票图标名称
size- 股票图标大小。[键入整型]
另请参见
GtkImage


------------ KeyGTK3gtk_image_set_pixel_size ----

gtk_image_set_pixel_size
设置用于命名图标的像素大小。如果像素大小设置为值 ！= -1，则使用它而不是设置的图标大小 bygtk_image_set_from_icon_name（）。
语法
参数
image- 一GtkImage
pixel_size- 新的像素大小
自 2.6 起
另请参见
GtkImage


------------ KeyGTK3gtk_im_context_delete_surrounding ----

gtk_im_context_delete_surrounding
通过发出GtkIMContext：:d elete_around信号，要求将输入上下文附加到的小部件添加到光标位置周围的删除字符。请注意，偏移量和n_charsare字符中，而不是以字节为单位，这与 中的其他地方的用法不同。为了使用这个函数，你应该首先callgtk_im_context_get_surrounding（）来获取当前上下文，然后立即调用这个函数，以确保你知道要删除的内容。您还应该考虑这样一个事实，即即使处理了信号，输入上下文也可能不会删除所有请求删除的字符。此函数由输入法使用，该输入法希望在现有文本中进行补充以响应新输入。它对应用程序没有用处。GtkIMContext
语法
参数
context- 一GtkIMContext
offset- 从光标位置偏移（以字符为单位）;负值表示在游标之前开始。
n_chars- 要删除的字符数。
返回
如果信号已处理，则为 TRUE
另请参见
GtkIMContext


------------ KeyGTK3gtk_im_context_filter_press ----

gtk_im_context_filter_keypress
gtk_im_context_filter_keypress?()
允许输入法在内部处理按键和释放事件。如果此函数返回 TRUE，则无需对此关键事件执行进一步的处理。
语法
参数
context- 一GtkIMContext
event- 关键事件
返回
如果输入法处理键事件，则为 TRUE。
另请参见
GtkIMContext


------------ KeyGTK3gtk_im_context_focus_in ----

gtk_im_context_focus_in
通知输入法此输入上下文所对应的小部件已获得焦点。例如，输入法可能更改显示的反馈以反映此更改。
语法
参数
context- 一GtkIMContext
另请参见
GtkIMContext


------------ KeyGTK3gtk_im_context_focus_out ----

gtk_im_context_focus_out
通知输入法此输入上下文所对应的小部件已失去焦点。例如，输入法可能更改显示的反馈或重置上下文状态以反映此更改。
语法
参数
context- 一GtkIMContext
另请参见
GtkIMContext


------------ KeyGTK3gtk_im_context_get_preedit_string ----

gtk_im_context_get_preedit_string
检索输入上下文的当前预编辑字符串，以及要应用于该字符串的属性列表。此字符串应显示在插入点处。
语法
参数
context- 一GtkIMContext
str- 存储检索到的字符串的位置。检索到的字符串必须使用 g_free（） 释放。[输出][转移完整]
attrs- 存储检索到的归因列表的位置。完成此列表后，必须使用pango_attr_list_unref（）取消引用它。[输出][转移完整]
cursor_pos- 在预编辑字符串中存储光标位置（以字符为单位）的位置。[输出]
另请参见
GtkIMContext


------------ KeyGTK3gtk_im_context_get_surrounding ----

gtk_im_context_get_surrounding
检索插入点周围的上下文。输入方法通常需要上下文，以便基于一个轴对文本来约束输入文本;这对于泰语等语言很重要，只有某些字符序列是允许的。此函数通过在输入法上发射GtkIMContext：：retrieve_surrounding信号来实现;对于此信号，小部件应提供与可用上下文尽可能多的上下文，最多通过callinggtk_im_context_set_surrounding（）的整个段落。请注意，小部件没有义务响应 ：：retrieve_surrounding 信号，因此输入方法必须准备好在没有上下文的情况下运行。
语法
参数
context- 一GtkIMContext
text- 位置，用于在插入点周围存储文本保存上下文的 UTF-8 编码字符串。如果函数返回 TRUE，则必须使用 g_free（） 释放此位置中的结果。[输出][转移完整]
cursor_index- 在文本中存储插入游标的字节索引的位置。[输出]
返回
如果提供了周围的文本，则为 TRUE;在这种情况下，您必须释放存储在*文本中的结果。
另请参见
GtkIMContext


------------ KeyGTK3gtk_im_context_reset ----

gtk_im_context_reset
通知输入法已进行更改，如光标位置的更改。这通常会导致输入方法清除预编辑状态。
语法
参数
context- 一GtkIMContext
另请参见
GtkIMContext


------------ KeyGTK3gtk_im_context_set_client_window ----

gtk_im_context_set_client_window
为输入上下文设置客户端窗口;这是输入显示的位置。使用此窗口是为了正确定位状态窗口，也可以用于输入法内部的目的。GdkWindow
语法
参数
context- 一GtkIMContext
window- 客户端窗口。这可能是 NULL，表示以前的客户端窗口不再存在。[允许-无]
另请参见
GtkIMContext


------------ KeyGTK3gtk_im_context_set_cursor_location ----

gtk_im_context_set_cursor_location
通知输入法光标位置已更改。该位置相对于客户端窗口。
语法
参数
context- 一GtkIMContext
area- 新位置
另请参见
GtkIMContext


------------ KeyGTK3gtk_im_context_set_surrounding ----

gtk_im_context_set_surrounding
设置围绕插入点和预编辑字符串的周围上下文。此函数应被调用以响应 GtkIMContext：：retrieve_surrounding 信号，如果在其他时间调用，则可能会产生效果。
语法
参数
context- 一GtkIMContext
text- 插入点周围的文本，如 UTF-8.preedit 字符串不应包含在文本中。
len- 文本的长度，如果文本是 nul 终止的，则为 -1
cursor_index- 文本中插入光标的字节索引。
另请参见
GtkIMContext


------------ KeyGTK3gtk_im_context_set_use_preedit ----

gtk_im_context_set_use_preedit
设置 IM 上下文是否应使用预编辑字符串来显示反馈。如果use_preedit为 FALSE（默认值为 TRUE），则 IM 上下文可能会使用其他方法显示反馈，例如在根窗口的子窗口中显示反馈。
语法
参数
context- 一GtkIMContext
use_preedit- IM 上下文是否应使用预编辑字符串。
另请参见
GtkIMContext


------------ KeyGTK3gtk_im_context_simple_add_table ----

gtk_im_context_simple_add_table
将要搜索的附加表添加到输入上下文中。表的每一行都由max_seq_len个关键符号组成，后面跟着两个被解释为值的高字和低字。从上次添加的表开始搜索表。该表必须按键符号字段的数值按字典顺序排序。（超出序列长度的值应为零。guint16gunicode
语法
参数
context_simple- 一GtkIMContextSimple
data- 桌子
max_seq_len- 表中序列的最大长度（不能大于GTK_MAX_COMPOSE_LEN)
n_seqs- 表中的序列数[br \=“”
另请参见
GtkIMContextSimple


------------ KeyGTK3gtk_im_context_simple_new ----

gtk_im_context_simple_new
创建新的 .GtkIMContextSimple
返回
一个新的.GtkIMContextSimple
另请参见
GtkIMContextSimple


------------ KeyGTK3gtk_im_multicontext_append_menuitems ----

gtk_im_multicontext_append_menuitems
gtk_im_multicontext_append_menuitems自 3.10 版起已弃用，不应在新编写的代码中使用。最好使用系统范围的输入法框架来更改输入法。现代桌面 shell 为此提供了屏幕显示，可以使用键盘快捷键触发，例如 Super-Space.将各种可用输入法的菜单项添加到菜单中;选择菜单项后，将切换上下文的输入法和全局默认输入法。
语法
参数
context- 一GtkIMMulticontext
menushell- 一GtkMenuShell
另请参见
GtkIMMulticontext


------------ KeyGTK3gtk_im_multicontext_get_context_id ----

gtk_im_multicontext_get_context_id
获取上下文的当前活动从属服务器的 ID。
语法
参数
context- 一GtkIMMulticontext
返回
当前活动从站的 id
2.16 起
另请参见
GtkIMMulticontext


------------ KeyGTK3gtk_im_multicontext_new ----

gtk_im_multicontext_new
创建新的 .GtkIMMulticontext
返回
一个新的.GtkIMMulticontext
另请参见
GtkIMMulticontext


------------ KeyGTK3gtk_im_multicontext_set_context_id ----

gtk_im_multicontext_set_context_id
设置上下文的上下文 ID。这会导致上下文的当前活动从站被对应于新上下文 ID 的从属服务器替换。
语法
参数
context- 一GtkIMMulticontext
context_id- 要使用的 id
自 2.1 起
另请参见
GtkIMMulticontext


------------ KeyGTK3gtk_info_bar_add_action_widget ----

gtk_info_bar_add_action_widget
将可激活的小部件添加到 的操作区域，连接一个信号处理程序，该处理程序将在激活小部件时在消息区域上发出信号。小部件附加到消息区域操作区域的末尾。GtkInfoBar?response?
语法
参数
info_bar- 一GtkInfoBar
child- 一个可激活的小部件
response_id- 儿童的响应 ID
自 2.18 起
另请参见
GtkInfoBar


------------ KeyGTK3gtk_info_bar_add_button ----

gtk_info_bar_add_button
添加一个具有给定文本的按钮并进行设置，以便单击该按钮将发出 ？response？信号与givenresponse_id。该按钮将附加到信息栏的末尾。按钮小部件被返回，但通常你不需要它。
语法
参数
info_bar- 一GtkInfoBar
button_text- 按钮文本
response_id- 按钮的响应 ID
返回
已添加的小部件。[无转移]GtkButton
自 2.18 起
另请参见
GtkInfoBar


------------ KeyGTK3gtk_info_bar_add_buttons ----

gtk_info_bar_add_buttons
添加更多按钮，与重复调用 gtk_info_bar_add_button（） 相同。变量参数列表应为 NULL-terminatedas，并带有 gtk_info_bar_new_with_buttons（）。每个按钮必须同时具有文本和响应 ID。
语法
参数
info_bar- 一GtkInfoBar
first_button_text- 按钮文本或股票ID
...- 第一个按钮的响应ID，然后是更多文本response_id对，以NULL结尾
自 2.18 起
另请参见
GtkInfoBar


------------ KeyGTK3gtk_info_bar_get_action_area ----

gtk_info_bar_get_action_area
返回info_bar的操作区域。
语法
参数
info_bar- 一GtkInfoBar
返回
操作区域。[无转移]
自 2.18 起
另请参见
GtkInfoBar


------------ KeyGTK3gtk_info_bar_get_content_area ----

gtk_info_bar_get_content_area
返回info_bar的内容区域。
语法
参数
info_bar- 一GtkInfoBar
返回
内容区域。[无转移]
自 2.18 起
另请参见
GtkInfoBar


------------ KeyGTK3gtk_info_bar_get_message_type ----

gtk_info_bar_get_message_type
返回消息区域的消息类型。
语法
参数
info_bar- 一GtkInfoBar
返回
消息区域的消息类型。
自 2.18 起
另请参见
GtkInfoBar


------------ KeyGTK3gtk_info_bar_get_show_close_button ----

gtk_info_bar_get_show_close_button
Returns whether the widget will display a standard close button.
Syntax
Parameters
info_bar  -  	a GtkInfoBar
Returns
TRUE if the widget displays standard close button
Since 3.10
See Also
GtkInfoBar


------------ KeyGTK3gtk_info_bar_new ----

gtk_info_bar_new
创建新对象。GtkInfoBar
返回
新对象GtkInfoBar
自 2.18 起
另请参见
GtkInfoBar


------------ KeyGTK3gtk_info_bar_new_with_buttons ----

gtk_info_bar_new_with_buttons
创建新的按钮。应列出按钮文本/响应 ID，并在列表末尾使用 NULL 指针。按钮文本可以是股票 ID（如GTK_STOCK_OK），也可以是任意文本。响应 ID 可以是任何正数，也可以是枚举中的某个值。如果用户单击这些对话框按钮之一，GtkInfoBar 将发出 ？response？具有相应响应 ID 的信号。GtkInfoBarGtkResponseType
语法
参数
first_button_text- 股票ID或文本进入第一个按钮，或NULL。[允许-无]
...- 第一个按钮的响应 ID，然后是其他按钮，以 NULL 结尾
返回
一个新的GtkInfoBar
另请参见
GtkInfoBar


------------ KeyGTK3gtk_info_bar_response ----

gtk_info_bar_response
发出 “响应？给定response_id信号。
语法
参数
info_bar- 一GtkInfoBar
response_id- 响应 ID
自 2.18 起
另请参见
GtkInfoBar


------------ KeyGTK3gtk_info_bar_set_default_response ----

gtk_info_bar_set_default_response
设置信息栏操作区域中的最后一个构件，并将给定response_id作为对话框的默认构件。紧迫？进入？通常激活默认小部件。请注意，此函数当前需要将info_bar添加到小部件层次结构中。
语法
参数
info_bar- 一GtkInfoBar
response_id- 响应 ID
自 2.18 起
另请参见
GtkInfoBar


------------ KeyGTK3gtk_info_bar_set_message_type ----

gtk_info_bar_set_message_type
设置消息区域的消息类型。GTK+ 使用此类型来确定在绘制消息区域时要使用的颜色。
语法
参数
info_bar- 一GtkInfoBar
message_type- 一GtkMessageType
自 2.18 起
另请参见
GtkInfoBar


------------ KeyGTK3gtk_info_bar_set_response_sensitive ----

gtk_info_bar_set_response_sensitive
调用gtk_widget_set_sensitive（小部件，设置）在信息栏的操作区域中的每个小伙伴与给定response_id。一种使对话框按钮敏感/脱敏的便捷方法。
语法
参数
info_bar- 一GtkInfoBar
response_id- 响应 ID
setting- 对于敏感
自 2.18 起
另请参见
GtkInfoBar


------------ KeyGTK3gtk_info_bar_set_show_close_button ----

gtk_info_bar_set_show_close_button
If true, a standard close button is shown. When clicked it emitsthe response GTK_RESPONSE_CLOSE.
Syntax
Parameters
info_bar  -  	a GtkInfoBar
setting  -  	TRUE to include a close button
Since 3.1
See Also
GtkInfoBar


------------ KeyGTK3gtk_init ----

gtk_init
Call this function before using any other GTK+ functions in your GUIapplications.  It will initialize everything needed to operate thetoolkit and parses some standard command line options.Although you are expected to pass the argc, argv parameters from main() to this function, it is possible to pass NULL if argv is not available or commandline handling is not required.argc and argv are adjusted accordingly so your own code willnever see those standard arguments.Note that there are some alternative ways to initialize GTK+:if you are calling gtk_parse_args(), gtk_init_check(),gtk_init_with_args() or g_option_context_parse() withthe option group returned by gtk_get_option_group(),you don?t have to call gtk_init().This function will terminate your program if it was unable toinitialize the windowing system for some reason. If you wantyour program to fall back to a textual interface you want tocall gtk_init_check() instead.Since 2.18, GTK+ calls signal (SIGPIPE, SIG_IGN)during initialization, to ignore SIGPIPE signals, since these arealmost never wanted in graphical applications. If you do need tohandle SIGPIPE for some reason, reset the handler after gtk_init(),but notice that other libraries (e.g. libdbus or gvfs) might dosimilar things.
Syntax
Parameters
argc  -  	 Address of the argc parameter ofyour main() function (or 0 if argvis NULL). This will be changed ifany arguments were handled. [inout]
argv  -  	 Address of theargv parameter of main(), or NULL. Any optionsunderstood by GTK+ are stripped before return. [array length=argc][inout][allow-none]
See Also
gtk3-General


------------ KeyGTK3gtk_init_check ----

gtk_init_check
This function does the same work as gtk_init() with only a singlechange: It does not terminate the program if the windowing systemcan?t be initialized. Instead it returns FALSE on failure.This way the application can fall back to some other means ofcommunication with the user - for example a curses or command lineinterface.
Syntax
Parameters
argc  -  	 Address of the argc parameter ofyour main() function (or 0 if argvis NULL). This will be changed ifany arguments were handled. [inout]
argv  -  	 Address of theargv parameter of main(), or NULL. Any optionsunderstood by GTK+ are stripped before return. [array length=argc][inout][allow-none]
Returns
TRUE if the windowing system has been successfullyinitialized, FALSE otherwise
See Also
gtk3-General


------------ KeyGTK3gtk_init_with_args ----

gtk_init_with_args
此函数执行与 gtk_init_check（） 相同的工作。此外，它允许您添加自己的命令行选项，并自动生成格式良好的帮助输出。请注意，您的程序将在写出帮助输出后终止。
语法
参数
argc- 你的主（）函数的 argc 参数的地址（如果 argvis NULL 则为 0）。如果处理了任何参数，这将被更改。[输入]
argv- main（） 的 theargv 参数的地址，或 NULL。GTK+理解的任何选项在返回之前都会被剥离。[数组长度 = argc][输入][允许-无]
parameter_string- 一个字符串，显示在 --help 输出的第一行，在程序名称 [OPTION...] 之后。[允许-无]
entries- 一个以 NULL 结尾的数组，用于描述程序的选项。[数组零终止 = 1]GOptionEntrys
translation_domain- 用于翻译条目中选项的 --help 输出以及 gettext（） 或 NULL parameter_stringwith
error- 错误的返回位置
返回
如果窗口系统已成功初始化，则为 TRUE，否则为 FALSE
自 2.6 起
另请参见
gtk3-General


------------ KeyGTK3GTK_INTERFACE_AGE ----

GTK_INTERFACE_AGE
GTK_INTERFACE_AGE
与gtk_get_interface_age（）一样，但来自应用程序编译时使用的标头，而不是来自应用程序运行时的库链接。
另请参见
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_invisible_get_screen ----

gtk_invisible_get_screen
返回与不可见关联的对象GdkScreen
语法
参数
invisible- 一个.GtkInvisible
返回
关联的 .[无转移]GdkScreen
自 2.
另请参见
GtkInvisible


------------ KeyGTK3gtk_invisible_new ----

gtk_invisible_new
创建新的 .GtkInvisible
返回
一个新的.GtkInvisible
另请参见
GtkInvisible


------------ KeyGTK3gtk_invisible_new_for_screen ----

gtk_invisible_new_for_screen
为指定屏幕创建新对象GtkInvisible
语法
参数
screen- a 它标识将在其上创建新内容。GdkScreenGtkInvisible
返回
新创建的对象GtkInvisible
自 2.2 起
另请参见
GtkInvisible


------------ KeyGTK3gtk_invisible_set_screen ----

gtk_invisible_set_screen
设置对象的显示位置。GdkScreenGtkInvisible
语法
参数
invisible- 一个.GtkInvisible
screen- 一个.GdkScreen
自 2.2 起
另请参见
GtkInvisible


------------ KeyGTK3gtk_label_get_angle ----

gtk_label_get_angle
获取标签的旋转角度。Seegtk_label_set_angle（）.
语法
参数
label- 一GtkLabel
返回
标签的旋转角度
自 2.6 起
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_attributes ----

gtk_label_get_attributes
获取在标签 usinggtk_label_set_attributes（） 上设置的属性列表（如果有）。此函数不反映来自标签标记的属性（请参见gtk_label_set_markup（））。如果要获取标签的有效属性，usepango_layout_get_attribute（gtk_label_get_layout（标签））。
语法
参数
label- 一GtkLabel
返回
属性列表，或 NULLif 未设置。[无转移]
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_current_uri ----

gtk_label_get_current_uri
返回标签中当前活动链接的 URI。活动链接是鼠标指针下方的链接，或者在可选标签中，是当前放置文本光标的链接。此函数旨在用于处理程序中的处理程序。?activate-link??query-tooltip?
语法
参数
label- 一GtkLabel
返回
当前活动的 URI。该字符串归 GTK+ 所有，不得释放或修改。
自 2.18 起
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_ellipsize ----

gtk_label_get_ellipsize
返回标签的椭圆位置。请参见gtk_label_set_ellipsize（）。
语法
参数
label- 一GtkLabel
返回
PangoEllipsizeMode
自 2.6 起
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_justify ----

gtk_label_get_justify
返回标签的对齐方式。请参见 gtk_label_set_justify（）。
语法
参数
label- 一GtkLabel
返回
GtkJustification
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_label ----

gtk_label_get_label
从标签小部件中提取文本，包括指示助记符和 Pango 标记的任何嵌入式下划线。（Seegtk_label_get_text（））。
语法
参数
label- 一GtkLabel
返回
标签微件的文本。此字符串由小部件拥有，不得修改或释放。
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_layout ----

gtk_label_get_layout
获取用于显示标签的 。该布局可用于例如将文本位置转换为像素位置，并结合gtk_label_get_layout_offsets（）。返回的布局归标签所有，因此不需要调用方使用。标签可以在任何时间自由地重新创建其布局，因此应将其视为只读。PangoLayout
语法
参数
label- 一GtkLabel
返回
为此标签。[无转移]PangoLayout
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_layout_offsets ----

gtk_label_get_layout_offsets
获取标签将绘制表示标签中文本的位置的坐标;用于将鼠标事件转换为内部的坐标，例如，如果单击标签的某些部分，则采取某些操作。当然，您需要创建一个来接收事件，并将标签打包在它里面，因为标签是一个小部件。请记住，当使用函数时，您需要使用 PANGO_PIXELS（） 或 从像素转换。PangoLayoutPangoLayoutGtkEventBoxGTK_NO_WINDOWPangoLayoutPANGO_SCALE
语法
参数
label- 一GtkLabel
x- 存储布局的 X 偏移量的位置，或 NULL。[输出][允许-无]
y- 存储布局的 Y 偏移量或 NULL 的位置。[输出][允许-无]
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_lines ----

gtk_label_get_lines
获取应将椭圆包装标签限制为的行数。请参见 gtk_label_set_lines（）。
语法
参数
label- 一GtkLabel
返回
行数
自 3.10 起
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_line_wrap ----

gtk_label_get_line_wrap
返回标签中的行是否自动换行。请参见gtk_label_set_line_wrap（）。
语法
参数
label- 一GtkLabel
返回
如果标签的行自动换行，则为 TRUE。
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_line_wrap_mode ----

gtk_label_get_line_wrap_mode
返回标签使用的换行模式。请参见gtk_label_set_line_wrap_mode（）。
语法
参数
label- 一GtkLabel
返回
如果标签的行自动换行，则为 TRUE。
自 2.10 起
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_max_width_chars ----

gtk_label_get_max_width_chars
检索所需的标签最大宽度（以字符为单位）。Seegtk_label_set_width_chars（）.
语法
参数
label- 一GtkLabel
返回
标签的最大宽度（以字符为单位）。
自 2.6 起
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_mnemonic_val ----

gtk_label_get_mnemonic_keyval
gtk_label_get_mnemonic_keyval?()
如果标签已设置为具有助记键，则此函数将返回用于助记符加速器的键值。如果有 nomnemonic 设置，它将返回 。GDK_KEY_VoidSymbol
语法
参数
label- 一GtkLabel
返回
GDK keyval 可用于加速器，或GDK_KEY_VoidSymbol
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_mnemonic_widget ----

gtk_label_get_mnemonic_widget
检索此标签的助记符（键盘快捷键）的目标。请参见gtk_label_set_mnemonic_widget（）。
语法
参数
label- 一GtkLabel
返回
标签助记符的目标，如果未设置任何助记符，则为 NULL，并且将使用默认算法。[无转移]
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_selectable ----

gtk_label_get_selectable
获取由 gtk_label_set_selectable（） 设置的值。
语法
参数
label- 一GtkLabel
返回
如果用户可以从标签中复制文本，则为 TRUE
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_selection_bounds ----

gtk_label_get_selection_bounds
获取标签中选定的字符范围，如果存在选择，则返回 TRUEif。
语法
参数
label- 一GtkLabel
start- 返回开始选择的位置，作为字符偏移量。[输出]
end- 返回选择结束的位置，作为字符偏移量。[输出]
返回
如果选择不为空，则为 TRUE
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_single_line_mode ----

gtk_label_get_single_line_mode
返回标签是否处于单行模式。
语法
参数
label- 一GtkLabel
返回
当标签处于单行模式时为 TRUE。
自 2.6 起
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_text ----

gtk_label_get_text
从标签构件中提取文本，如屏幕上显示的那样。这不包括任何嵌入的下划线指示助记符或Pango标记。（参见 gtk_label_get_label（））
语法
参数
label- 一GtkLabel
返回
标签微件中的文本。这是标签使用的内部字符串，不得修改。
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_track_visited_links ----

gtk_label_get_track_visited_links
返回标签当前是否跟踪单击的链接。
语法
参数
label- 一GtkLabel
返回
如果记住单击的链接，则为 TRUE
自 2.1 起
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_use_markup ----

gtk_label_get_use_markup
返回标签的文本是否被解释为使用 Pango 文本标记语言进行标记。请参见 gtk_label_set_use_markup（）。
语法
参数
label- 一GtkLabel
返回
如果将解析标签的文本以进行标记，则为 TRUE。
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_use_underline ----

gtk_label_get_use_underline
返回标签中嵌入的下划线是否指示严重。请参见 gtk_label_set_use_underline（）。
语法
参数
label- 一GtkLabel
返回
如果标签中嵌入的下划线指示助记符快捷键，则为 TRUE。
另请参见
GtkLabel


------------ KeyGTK3gtk_label_get_width_chars ----

gtk_label_get_width_chars
检索所需的标签宽度（以字符为单位）。Seegtk_label_set_width_chars（）.
语法
参数
label- 一GtkLabel
返回
标签的宽度（以字符为单位）。
自 2.6 起
另请参见
GtkLabel


------------ KeyGTK3gtk_label_new ----

gtk_label_new
创建一个新标签，其中包含给定的文本。您可以传递 NULL 以获取空标签微件。
语法
参数
str- 标签的文本。[允许-无]
返回
新的GtkLabel
另请参见
GtkLabel


------------ KeyGTK3gtk_label_new_with_mnemonic ----

gtk_label_new_with_mnemonic
创建一个新的 ，其中包含 str 中的文本。如果 str 中的字符前面带有下划线，则它们将带有下划线。如果需要在标签中使用文字下划线字符，请使用“__”（两个下划线）。第一个带下划线的字符表示称为助记符的键盘快捷键。助记键可用于激活另一个自动选择的小部件，或显式usinggtk_label_set_mnemonic_widget（）。如果未调用 gtk_label_set_mnemonic_widget（），则 将选择 的第一个可激活祖先作为助记符小部件。例如，如果标签位于按钮或菜单项内，则按钮或菜单项将自动成为助记符小部件，并由助记符激活。GtkLabelGtkLabel
语法
参数
str- 标签的文本，在字符前面带有下划线。[允许-无]
返回
新的GtkLabel
另请参见
GtkLabel


------------ KeyGTK3gtk_label_select_region ----

gtk_label_select_region
如果标签可选，则在标签中选择字符范围。请参见 gtk_label_set_selectable（）。如果标签不可选择，则此功能不起作用。如果start_offset orend_offset为 -1，则将替换标签的末尾。
语法
参数
label- 一GtkLabel
start_offset- 开始偏移量（以字符为单位，而不是以字节为单位）
end_offset- 结束偏移量（以字符为单位，而不是以字节为单位）
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_angle ----

gtk_label_set_angle
设置标签的旋转角度。角度 90 从下到上读取，角度 270 从上到下读取。如果标签是可选的、包裹的或椭圆的，则忽略标签的角度设置。
语法
参数
label- 一GtkLabel
angle- 标签基线与水平（以度为单位）逆时针测量的角度
自 2.6 起
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_attributes ----

gtk_label_set_attributes
设置 ;列表中的属性将应用于标签文本。使用此函数设置的属性将被应用，并与以前由 or 属性的方式影响的任何其他属性合并。虽然不建议将标记字符串与手动setattributes混合，但如果必须的话;知道在解析标记字符串后，属性将应用于标签。PangoAttrList?use-underline??use-markup?
语法
参数
label- 一GtkLabel
attrs- 一PangoAttrList
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_ellipsize ----

gtk_label_set_ellipsize
设置用于在没有足够的空间来呈现整个字符串时对文本进行椭圆化（添加省略号：“...”）的模式。
语法
参数
label- 一GtkLabel
mode- 一PangoEllipsizeMode
自 2.6 起
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_justify ----

gtk_label_set_justify
设置标签文本中各行相对于其他行的对齐方式。GTK_JUSTIFY_LEFT 是首次使用 gtk_label_new（） 创建小参数时的默认值。如果要将标签的对齐方式设置为一个整体，请改usegtk_misc_set_alignment（）。gtk_label_set_justify（） 对仅包含一行的标签无效。
语法
参数
label- 一GtkLabel
jtype- 一GtkJustification
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_label ----

gtk_label_set_label
设置标签的文本。标签被解释为包括嵌入的下划线和/或Pango标记，具体取决于“ 和属性的值。?use-underline??use-markup?
语法
参数
label- 一GtkLabel
str- 要为标签设置的新文本
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_lines ----

gtk_label_set_lines
设置椭圆环绕标签应限制的行数。如果标签未进行包装或椭圆化，则此操作不起作用。如果不想限制行数，请将此值设置为 -1。
语法
参数
label- 一GtkLabel
lines- 所需的行数，或 -1
自 3.10 起
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_line_wrap ----

gtk_label_set_line_wrap
切换小部件内的换行。TRUE 会在文本超过构件大小时使其成为隔断线。FALSE 允许文本在超过窗口小部件大小时被小部件的边缘截断。请注意，将换行设置为 TRUE 不会使标签包装在其父容器的宽度处生效，因为 GTK+ 小部件在概念上不能使其请求依赖于父容器的大小。对于在特定位置换行的标签，请使用 gtk_widget_set_size_request（） 设置标签的宽度。GtkLabel
语法
参数
label- 一GtkLabel
wrap- 设置
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_line_wrap_mode ----

gtk_label_set_line_wrap_mode
如果换行处于打开状态（请参见gtk_label_set_line_wrap（）），这将控制换行的完成方式。默认值为 PANGO_WRAP_WORD 这意味着单词边界上的换行。
语法
参数
label- 一GtkLabel
wrap_mode- 换行模式
自 2.10 起
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_markup ----

gtk_label_set_markup
解析用Pango文本标记语言标记的str，根据解析结果设置标签的文本和属性列表。如果 str 是外星数据，则可能需要使用 g_markup_escape_text（） org_markup_printf_escaped（）： 123456[/syntax] [syntax]const *format = “\”italic\“>\%s”;*markup;markup = g_markup_printf_escaped （format， str）;gtk_label_set_markup （GTK_LABEL （label）， markup）;g_free （markup）;[/语法]charchar
语法
参数
label- 一GtkLabel
str- 标记字符串（请参阅 Pango 标记格式）
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_markup_with_mnemonic ----

gtk_label_set_markup_with_mnemonic
解析用Pango文本标记语言标记的str，根据解析结果设置标签的文本和属性列表。如果 str 中的字符前面有下划线，则它们表示它们表示称为助记符的键盘快捷键。助记键可用于激活另一个小部件，自动选择或使用gtk_label_set_mnemonic_widget（） 显式选择。
语法
参数
label- 一GtkLabel
str- 标记字符串（请参阅Pango标记格式）
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_max_width_chars ----

gtk_label_set_max_width_chars
将所需的最大宽度（以标签字符为单位）设置为n_chars。
语法
参数
label- 一GtkLabel
n_chars- 新的所需最大宽度，以字符为单位。
自 2.6 起
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_mnemonic_widget ----

gtk_label_set_mnemonic_widget
如果已将标签设置为具有助记符键（使用即 gtk_label_set_markup_with_mnemonic（）、gtk_label_set_text_with_mnemonic（）、gtk_label_new_with_mnemonic（） 或 ？use_underline？ 属性），则该标签可以与作为助记符目标的 awidget 相关联。当标签位于小部件内部（如一个或一个选项卡）时，它会自动与正确的小部件相关联，但有时（即当目标是标签旁边的小部件时），您需要使用此功能显式设置它。目标小部件将通过在其上发射GtkWidget：：助记符激活信号来加速。如果没有助记符冲突，则此信号的默认处理程序将激活小部件，否则将在碰撞小部件之间切换焦点。GtkButtonGtkNotebookGtkEntry
语法
参数
label- 一GtkLabel
widget- 目标 。[允许-无]GtkWidget
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_pattern ----

gtk_label_set_pattern
在构件内的现有文本下所需的下划线模式。例如，如果标签的当前文本显示？FooBarBaz？传递 ？___ ___ 的模式？会下划线吗？傅？和？巴兹？但不是？酒吧？。GtkLabel
语法
参数
label- 要将模式设置为。GtkLabel
pattern- 如上所述的模式。
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_selectable ----

gtk_label_set_selectable
可选标签允许用户从标签中选择文本，进行复制和粘贴。
语法
参数
label- 一GtkLabel
setting- TRUE 允许选择标签中的文本
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_single_line_mode ----

gtk_label_set_single_line_mode
设置标签是否处于单行模式。
语法
参数
label- 一GtkLabel
single_line_mode- 如果标签应处于单行模式，则为 TRUE
自 2.6 起
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_text ----

gtk_label_set_text
设置构件中的文本。它会覆盖之前存在的任何文本。这还将清除任何以前设置的助记符加速器。GtkLabel
语法
参数
label- 一GtkLabel
str- 要设置的文本
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_text_with_mnemonic ----

gtk_label_set_text_with_mnemonic
设置字符串 str 中的标签文本。如果 str 中的字符前面有下划线，则它们表示它们表示称为助记符的键盘快捷键。助记键可用于激活另一个自动选择的小部件，或使用gtk_label_set_mnemonic_widget（）显式激活。
语法
参数
label- 一GtkLabel
str- 一个字符串
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_track_visited_links ----

gtk_label_set_track_visited_links
设置标签是否应跟踪单击的链接（并为其使用不同的颜色）。
语法
参数
label- 一GtkLabel
track_links- TRUE跟踪访问过的链接
自 2.18 起
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_use_markup ----

gtk_label_set_use_markup
设置标签的文本是否包含 Pango 的文本标记语言中的标记。请参见gtk_label_set_markup（）。
语法
参数
label- 一GtkLabel
setting- 如果应解析标签的文本以进行标记，则为 TRUE。
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_use_underline ----

gtk_label_set_use_underline
如果为 true，则文本中的下划线指示应将下一个字符用作助记符快捷键。
语法
参数
label- 一GtkLabel
setting- 如果文本中的下划线表示助记符，则为 TRUE
另请参见
GtkLabel


------------ KeyGTK3gtk_label_set_width_chars ----

gtk_label_set_width_chars
将所需的宽度（以标签字符为单位）设置为n_chars。
语法
参数
label- 一GtkLabel
n_chars- 新的所需宽度，以字符为单位。
自 2.6 起
另请参见
GtkLabel


------------ KeyGTK3gtk_layout_get_bin_window ----

gtk_layout_get_bin_window
检索用于绘图操作的布局的条柱窗口。
语法
参数
layout- 一GtkLayout
返回
一个。[无转移]GdkWindow
自 2.1 起
另请参见
GtkLayout


------------ KeyGTK3gtk_layout_get_hadjustment ----

gtk_layout_get_hadjustment
gtk_layout_get_hadjustment自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_scrollable_get_hadjustment（）只有在将布局放置在中或以其他方式配置了 forscrolling 之后，才应调用此函数。它返回水平滚动条和布局之间用于通信的。有关详细信息，请参见 、。GtkScrolledWindowGtkAdjustmentGtkScrolledWindowGtkScrollbarGtkAdjustment
语法
参数
layout- 一GtkLayout
返回
水平滚动调整。[无转移]
另请参见
GtkLayout


------------ KeyGTK3gtk_layout_get_size ----

gtk_layout_get_size
获取已在布局上设置的大小，该大小确定布局的滚动条区域的总范围。Seegtk_layout_set_size（）.
语法
参数
layout- 一GtkLayout
width- 存储布局上的宽度集的位置，或 NULL。[输出][允许-无]
height- 用于存储布局上设置的高度的位置，或 NULL。[输出][允许-无]
另请参见
GtkLayout


------------ KeyGTK3gtk_layout_get_vadjustment ----

gtk_layout_get_vadjustment
gtk_layout_get_vadjustment自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_scrollable_get_vadjustment（）只有在将布局放置在中或以其他方式配置的 forscrolling 之后，才应调用此函数。它返回垂直滚动条和布局之间用于通信的。有关详细信息，请参见 、。GtkScrolledWindowGtkAdjustmentGtkScrolledWindowGtkScrollbarGtkAdjustment
语法
参数
layout- 一GtkLayout
返回
垂直滚动调整。[无转移]
另请参见
GtkLayout


------------ KeyGTK3gtk_layout_move ----

gtk_layout_move
将布局的当前子级移动到新位置。
语法
参数
layout- 一GtkLayout
child_widget- 布局的当前子级
x- 要移动到的 X 位置
y- 要移动到的 Y 位置
另请参见
GtkLayout


------------ KeyGTK3gtk_layout_new ----

gtk_layout_new
创建新的 .除非您有特定的调整，否则您希望布局用于滚动，否则请传递 NULL forhadjustment 和 vadjustment。GtkLayout
语法
参数
hadjustment- 水平滚动调整，或空。[允许-无]
vadjustment- 垂直滚动调整，或空。[允许-无]
返回
一个新的GtkLayout
另请参见
GtkLayout


------------ KeyGTK3gtk_layout_put ----

gtk_layout_put
将child_widget添加到布局，位于位置 （x，y）.layout 成为child_widget的新父容器。
语法
参数
layout- 一GtkLayout
child_widget- 子小部件
x- 子小部件的X位置
y- 子小部件的Y位置
另请参见
GtkLayout


------------ KeyGTK3gtk_layout_set_hadjustment ----

gtk_layout_set_hadjustment
gtk_layout_set_hadjustment自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_scrollable_set_hadjustment（）设置布局的水平滚动调整。有关详细信息，请参见 、。GtkScrolledWindowGtkScrollbarGtkAdjustment
语法
参数
layout- 一GtkLayout
adjustment- 新的滚动调整。[允许-无]
另请参见
GtkLayout


------------ KeyGTK3gtk_layout_set_size ----

gtk_layout_set_size
设置布局的可滚动区域的大小。
语法
参数
layout- 一GtkLayout
width- 整个可滚动区域的宽度
height- 整个可滚动区域的高度
另请参见
GtkLayout


------------ KeyGTK3gtk_layout_set_vadjustment ----

gtk_layout_set_vadjustment
gtk_layout_set_vadjustment自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_scrollable_set_vadjustment（）设置布局的垂直滚动调整。有关详细信息，请参见 、。GtkScrolledWindowGtkScrollbarGtkAdjustment
语法
参数
layout- 一GtkLayout
adjustment- 新的滚动调整。[允许-无]
另请参见
GtkLayout


------------ KeyGTK3gtk_level_bar_add_offset_value ----

gtk_level_bar_add_offset_value
在值指定的位置处的自身上添加新的偏移标记。当条形图值处于被值顶的间隔内（或在值之间，如果偏移量是条形图上的最后一个），则在呈现级别条形填充时，将应用名为 level-name 的样式类。如果存在另一个名为 name 的偏移标记，则其值将按值替换。?max-value?
语法
参数
self- 一GtkLevelBar
name- 新偏移量的名称
value- 新偏移量的值
3.6 起
另请参见
GtkLevelBar


------------ KeyGTK3gtk_level_bar_get_inverted ----

gtk_level_bar_get_inverted
返回属性的值。?inverted?
语法
参数
self- 一GtkLevelBar
返回
如果电平条反转，则为 TRUE
3.8 起
另请参见
GtkLevelBar


------------ KeyGTK3gtk_level_bar_get_max_value ----

gtk_level_bar_get_max_value
返回属性的值。?max-value?
语法
参数
self- 一GtkLevelBar
返回
正值
3.6 起
另请参见
GtkLevelBar


------------ KeyGTK3gtk_level_bar_get_min_value ----

gtk_level_bar_get_min_value
返回属性的值。?min-value?
语法
参数
self- 一GtkLevelBar
返回
正值
3.6 起
另请参见
GtkLevelBar


------------ KeyGTK3gtk_level_bar_get_mode ----

gtk_level_bar_get_mode
返回属性的值。?mode?
语法
参数
self- 一GtkLevelBar
返回
一个GtkLevelBarMode
3.6 起
另请参见
GtkLevelBar


------------ KeyGTK3gtk_level_bar_get_offset_value ----

gtk_level_bar_get_offset_value
提取在 self 中为偏移标记名称指定的值，如果找到名为 name 的偏移量，则返回 TRUE。
语法
参数
self- 一GtkLevelBar
name- 栏中偏移量的名称。[允许-无]
value- 存储价值的位置。[输出]
返回
如果找到指定的偏移量，则为 TRUE
自 3.
另请参见
GtkLevelBar


------------ KeyGTK3gtk_level_bar_get_value ----

gtk_level_bar_get_value
返回属性的值。?value?
语法
参数
self- 一GtkLevelBar
返回
介于 和 之间的时间间隔中的值?min-value??max-value?
3.6 起
另请参见
GtkLevelBar


------------ KeyGTK3gtk_level_bar_new ----

gtk_level_bar_new
创建新的 .GtkLevelBar
返回
一个。GtkLevelBar
3.6 起
另请参见
GtkLevelBar


------------ KeyGTK3gtk_level_bar_new_for_interval ----

gtk_level_bar_new_for_interval
为指定区间创建新的实用程序构造函数。GtkLevelBar
语法
参数
min_value- 正值
max_value- 正值
返回
一个GtkLevelBar
3.6 起
另请参见
GtkLevelBar


------------ KeyGTK3gtk_level_bar_remove_offset_value ----

gtk_level_bar_remove_offset_value
删除以前添加withgtk_level_bar_add_offset_value（） 的偏移标记。
语法
参数
self- 一GtkLevelBar
name- 栏中偏移量的名称。[允许-无]
3.6 起
另请参见
GtkLevelBar


------------ KeyGTK3gtk_level_bar_set_inverted ----

gtk_level_bar_set_inverted
设置属性的值。?inverted?
语法
参数
self- 一GtkLevelBar
inverted- TRUE 可反转水平条
3.8 起
另请参见
GtkLevelBar


------------ KeyGTK3gtk_level_bar_set_max_value ----

gtk_level_bar_set_max_value
设置属性的值。?max-value?
语法
参数
self- 一GtkLevelBar
value- 正值
3.6 起
另请参见
GtkLevelBar


------------ KeyGTK3gtk_level_bar_set_min_value ----

gtk_level_bar_set_min_value
设置属性的值。?min-value?
语法
参数
self- 一GtkLevelBar
value- 正值
3.6 起
另请参见
GtkLevelBar


------------ KeyGTK3gtk_level_bar_set_mode ----

gtk_level_bar_set_mode
设置属性的值。?mode?
语法
参数
self- 一GtkLevelBar
mode- 一GtkLevelBarMode
3.6 起
另请参见
GtkLevelBar


------------ KeyGTK3gtk_level_bar_set_value ----

gtk_level_bar_set_value
设置属性的值。?value?
语法
参数
self- 一GtkLevelBar
value- 和 之间的间隔值?min-value??max-value?
3.6 起
另请参见
GtkLevelBar


------------ KeyGTK3gtk_link_button_get_uri ----

gtk_link_button_get_uri
使用 gtk_link_button_set_uri（） 检索 URI 集。
语法
参数
link_button- 一GtkLinkButton
返回
有效的 URI。返回的字符串归链接按钮所有，不应修改或释放。
自 2.10 起
另请参见
GtkLinkButton


------------ KeyGTK3gtk_link_button_get_visited ----

gtk_link_button_get_visited
检索 “已访问过”指向的 URI 的状态。单击该按钮时，将访问该按钮。如果按钮上的 URIis 发生了变化，则 ？已访问？状态再次取消设置。也可以使用gtk_link_button_set_visited（）更改状态。GtkLinkButton
语法
参数
link_button- 一GtkLinkButton
返回
如果链接已被访问，则为 TRUE，否则为 FALSE
自 2.14 起
另请参见
GtkLinkButton


------------ KeyGTK3gtk_link_button_new ----

gtk_link_button_new
创建一个以 URI 作为其文本的 new。GtkLinkButton
语法
参数
uri- 一个有效的 URI
返回
一个新的链接按钮小部件。
自 2.10 起
另请参见
GtkLinkButton


------------ KeyGTK3gtk_link_button_new_with_label ----

gtk_link_button_new_with_label
创建包含标签的新标签。GtkLinkButton
语法
参数
uri- 一个有效的 URI
label- 按钮的文本。[允许-无]
返回
一个新的链接按钮小部件。[无转移]
自 2.10 起
另请参见
GtkLinkButton


------------ KeyGTK3gtk_link_button_set_uri ----

gtk_link_button_set_uri
将 uri 设置为指向的 URI。作为副作用，这扰乱了“访问过”？按钮的状态。GtkLinkButton
语法
参数
link_button- 一GtkLinkButton
uri- 一个有效的 URI
自 2.10 起
另请参见
GtkLinkButton


------------ KeyGTK3gtk_link_button_set_visited ----

gtk_link_button_set_visited
设置“已访问？指向的 URI 的状态。有关详细信息，请参阅 gtk_link_button_get_visited（）。GtkLinkButton
语法
参数
link_button- 一GtkLinkButton
visited- 新的？访问过？州
自 2.1 起
另请参见
GtkLinkButton


------------ KeyGTK3gtk_list_box_drag_highlight_row ----

gtk_list_box_drag_highlight_row
这是一个帮助程序函数，用于在 上实现 DnD。传递的行将通过gtk_drag_highlight（）突出显示，并且任何先前突出显示的行都将取消突出显示。当小部件获取拖动离开事件时，该行也将取消亮起。GtkListBox
语法
参数
list_box- 一个.GtkListBox
row- 一GtkListBoxRow
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_drag_unhighlight_row ----

gtk_list_box_drag_unhighlight_row
如果某一行之前已通过 gtk_list_box_drag_highlight_row（） 突出显示，则该行将被删除。
语法
参数
list_box- 一个.GtkListBox
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_get_activate_on_single_click ----

gtk_list_box_get_activate_on_single_click
返回行是否在单击时激活。
语法
参数
list_box- 一GtkListBox
返回
如果行在单击时激活，则为 TRUE，否则为 FALSE
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_get_adjustment ----

gtk_list_box_get_adjustment
获取小组件用于垂直滚动的调整（如果有）。
语法
参数
list_box- 一GtkListBox
返回
调整。[无转移]
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_get_row_at_index ----

gtk_list_box_get_row_at_index
获取列表中的第 n：th 个子项（不计算标头）。如果_index为负数或大于列表中的项目数，则返回 NULL。
语法
参数
list_box- 一GtkListBox
index_- 行的索引
返回
子项或 NULL。[无转移]GtkWidget
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_get_row_at_y ----

gtk_list_box_get_row_at_y
获取 y 位置处的行。
语法
参数
list_box- 一GtkListBox
y- 位置
返回
该行。[无转移]
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_get_selected_row ----

gtk_list_box_get_selected_row
获取选定的行。
语法
参数
list_box- 一GtkListBox
返回
选定的 .[无转移]GtkWidget
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_get_selection_mode ----

gtk_list_box_get_selection_mode
获取列表框的选择模式。
语法
参数
list_box- 一GtkListBox
返回
一个GtkSelectionMode
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_insert ----

gtk_list_box_insert
将子项插入list_box位置。如果设置了排序函数，则小部件实际上将插入到计算位置，并且该函数具有与gtk_container_add（） 相同的效果。如果 position 为 -1，或大于 thelist_box 中的项目总数，则子项将追加到末尾。
语法
参数
list_box- 一个.GtkListBox
child- 要添加GtkWidget
position- 插入子项的位置
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_invalidate_filter ----

gtk_list_box_invalidate_filter
更新所有行的筛选。当list_box上的滤波器函数的结果由于外部因素而改变时，调用此函数。例如，如果 filter 函数刚刚查找了特定的搜索字符串，并且包含搜索字符串的条目已更改，则将使用此选项。
语法
参数
list_box- 一GtkListBox
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_invalidate_headers ----

gtk_list_box_invalidate_headers
更新所有行的分隔符。当list_box上的标头函数的结果由于外部因素而更改时，调用此函数。
语法
参数
list_box- 一GtkListBox
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_invalidate_sort ----

gtk_list_box_invalidate_sort
更新所有行的排序。当list_box上的排序函数的结果由于外部因素而更改时，调用此函数。
语法
参数
list_box- 一GtkListBox
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_new ----

gtk_list_box_new
创建新容器。GtkListBox
返回
一个新的GtkListBox
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_prepend ----

gtk_list_box_prepend
在列表前附加一个小部件。如果设置了排序函数，则微件将实际上插入到计算位置，并且此函数具有与gtk_container_add（）相同的效果。
语法
参数
list_box- 一个.GtkListBox
child- 要添加GtkWidget
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_row_changed ----

gtk_list_box_row_changed
将行标记为已更改，从而导致更新依赖于此的任何状态。这会影响排序、筛选和标头。请注意，对此方法的调用必须与用于行函数的数据同步。例如，如果列表镜像了一些外部数据集，并且*两个*行在外部数据集中更改，那么当您在第一行上调用gtk_list_box_row_changed（）时，排序函数必须仅读取两个更改行中的第一个行的新数据，否则行的排序将是错误的。这通常意味着，如果您不完全控制数据模型，则必须将影响 listboxrow 函数的数据复制到行小部件本身。另一种选择是在任何模型更改时调用gtk_list_box_invalidate_sort（），但这更昂贵。
语法
参数
row- 一GtkListBoxRow
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_row_get_header ----

gtk_list_box_row_get_header
返回行的当前标题。这可以用于查看是否已经存在标头集，如果是，则更新其状态。GtkListBoxUpdateHeaderFunc
语法
参数
row- 一GtkListBoxRow
返回
当前标头，如果没有，则为 NULL。[无转移]
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_row_get_index ----

gtk_list_box_row_get_index
获取其容器中行的当前索引。GtkListBox
语法
参数
row- 一GtkListBoxRow
返回
行的索引，如果行不在列表框中，则为 -1
自 3.1 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_row_new ----

gtk_list_box_row_new
创建一个新的 ，用作 的子项。GtkListBoxRowGtkListBox
返回
一个新的GtkListBoxRow
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_row_set_header ----

gtk_list_box_row_set_header
设置行的当前标题。只允许从 调用 。它将替换行中的任何现有标题，并显示在列表框中该行的前面。GtkListBoxUpdateHeaderFunc
语法
参数
row- 一GtkListBoxRow
header- 标头，或 NULL。[允许-无]
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_select_row ----

gtk_list_box_select_row
使行成为当前选定的行。
语法
参数
list_box- 一GtkListBox
row- 要选择的行或 NULL。[允许-无]
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_set_activate_on_single_click ----

gtk_list_box_set_activate_on_single_click
如果 single 为 TRUE，则当您单击行时，它们将被激活，否则您需要双击。
语法
参数
list_box- 一GtkListBox
single- 一个布尔值
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_set_adjustment ----

gtk_list_box_set_adjustment
设置微件用于垂直滚动的调整（如果有）。例如，这用于获取PageUp/Down键处理的页面大小。在正常情况下，当list_box被包装在内部时，调整将自动拾取，因此无需手动执行此操作。GtkScrolledWindow
语法
参数
list_box- 一GtkListBox
adjustment- 调整，或空。[允许-无]
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_set_filter_func ----

gtk_list_box_set_filter_func
通过在list_box设置筛选器函数，可以动态决定要显示哪些行。例如，在列表上实现搜索功能，该功能将原始列表过滤为仅显示匹配的行。调用后将为每行调用filter_func，并且每次行更改（通过gtk_list_box_row_changed（））或调用gtk_list_box_invalidate_filter（）时，它将继续被调用。
语法
参数
list_box- 一GtkListBox
filter_func- 回调，允许您过滤要显示的行。[结束user_data][允许-无]
user_data- 传递给filter_func的用户数据
destroy- 销毁user_data通知程序
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_set_header_func ----

gtk_list_box_set_header_func
通过在list_box上设置标题函数，可以根据行的内容及其在列表中的位置，在行的前面动态添加标题。例如，可以使用它在按类型排序的列表中，在第一个新类型的项目前面添加标题。update_header可以使用gtk_list_box_row_get_header（）查看当前标题小部件，并根据需要更新小部件的状态，或者usinggtk_list_box_row_set_header（）设置一个新标题小部件。如果不需要标头，请将标头设置为 NULL。请注意，您可能会收到许多调用，update_header特定行，例如更改不影响标头的内容。在这种情况下，对于性能而言，重要的是不要盲目地替换具有相同标头的现有标头。update_header函数将在调用后为每一行调用，并且每次行更改（通过gtk_list_box_row_changed（）））和之前的行更改时（通过前一行上的gtk_list_box_row_changed（）或前一行成为不同行时，它将继续被调用。它也被调用whengtk_list_box_invalidate_headers（）的所有行。
语法
参数
list_box- 一GtkListBox
update_header- 允许您添加行标题的回调。[结束user_data][允许-无]
user_data- 传递给update_header的用户数据
destroy- 销毁user_data通知程序
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_set_placeholder ----

gtk_list_box_set_placeholder
设置在列表中显示的占位符构件，当它不显示任何可见的子项时。
语法
参数
list_box- 一GtkListBox
placeholder- a 或 NULL。[允许-无]GtkWidget
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_set_selection_mode ----

gtk_list_box_set_selection_mode
设置所选内容在列表框中的工作方式。有关详细信息，请参阅。注意：不支持GTK_SELECTION_MULTIPLE。GtkSelectionModeGtkListBox
语法
参数
list_box- 一GtkListBox
mode- 的GtkSelectionMode
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_box_set_sort_func ----

gtk_list_box_set_sort_func
通过在list_box设置排序函数，可以根据行的内容动态地对列表中的行进行重新排序。调用后将为每行调用sort_func，并且每次行更改（通过gtk_list_box_row_changed（））和调用whengtk_list_box_invalidate_sort（））时，将继续调用该sort_func。
语法
参数
list_box- 一GtkListBox
sort_func- 排序功能。[结束user_data][允许-无]
user_data- 传递给sort_func的用户数据
destroy- 销毁user_data通知程序
自 3.10 起
另请参见
GtkListBox


------------ KeyGTK3gtk_list_store_append ----

gtk_list_store_append
将新行追加到list_store。它将被更改为指向此新行。调用此函数后，该行将为空。要填写值，您需要调用gtk_list_store_set（） 或 gtk_list_store_set_value（）。
语法
参数
list_store- 一GtkListStore
iter- 要设置为追加行的未设置。[输出]GtkTreeIter
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_clear ----

gtk_list_store_clear
从列表存储区中删除所有行。
语法
参数
list_store- 一个.GtkListStore
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_insert ----

gtk_list_store_insert
在位置处创建新行。它将被更改为指向此新行。如果 position 为 -1 或大于列表中的行数，则新行将追加到列表中。调用此函数后，该行将为空。要填写值，您需要callgtk_list_store_set（） 或 gtk_list_store_set_value（）。
语法
参数
list_store- 一GtkListStore
iter- 要设置为新行的未设置。[输出]GtkTreeIter
position- 位置插入新行，或 -1 作为最后一行
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_insert_after ----

gtk_list_store_insert_after
在同级之后插入一个新行。如果同级为 NULL，则该行将优先于列表的开头。iter 将被更改为指向此新行。调用此函数后，该行将为空。要填充值，您需要调用gtk_list_store_set（） 或 gtk_list_store_set_value（）。
语法
参数
list_store- 一GtkListStore
iter- 要设置为新行的未设置。[输出]GtkTreeIter
sibling- 有效的 或空值。[允许-无]GtkTreeIter
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_insert_before ----

gtk_list_store_insert_before
在同级之前插入新行。如果同级为 NULL，则该行将追加到列表的末尾。iter 将更改为指向此新行。调用此函数后，该行将为空。要填写值，您需要调用 gtk_list_store_set（） 或 gtk_list_store_set_value（）。
语法
参数
list_store- 一GtkListStore
iter- 要设置为新行的未设置。[输出]GtkTreeIter
sibling- 有效的 或空值。[允许-无]GtkTreeIter
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_insert_with_values ----

gtk_list_store_insert_with_values
在位置处创建新行。它将被更改为指向此新行。如果 position 为 -1，或大于列表中的行数，则新行将追加到列表中。该行将填充给定给此函数的值。Callinggtk_list_store_insert_with_values（list_store、迭代、位置...）与调用 12[/语法] [语法] [语法]gtk_list_store_insert（list_store、迭代器、位置）;gtk_list_store_set（list_store、迭代器、...）具有相同的效果;[/语法]
不同之处在于，前者只会发出row_inserted信号，而后者会发出row_inserted，row_changed，如果列表存储排序，rows_reordered。由于重复发射rows_reordered信号会影响程序的性能，因此在排序列表存储中插入行时通常应首选gtk_list_store_insert_with_values（）。
语法
参数
list_store- 一GtkListStore
iter- 要设置为新行的未设置，或 NULL。[输出][允许-无]GtkTreeIter
position- 位置插入新行，或 -1 追加在现有行之后
...- 列号和值对，以 -1 结尾
自 2.6 起
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_insert_with_valuesv ----

gtk_list_store_insert_with_valuesv
gtk_list_store_insert_with_values（） 的变体，它将列和值作为两个数组，而不是varargs。此函数主要用于语言绑定。
语法
参数
list_store- 一GtkListStore
iter- 要设置为新行的未设置，或 NULL。[输出][允许-无]GtkTreeIter
position- 位置插入新行，或 -1 作为最后一行
columns- 列号数组。[数组长度 = n_values]
values- 一个 GValues 数组。[数组长度 = n_values]
n_values- 列的长度和值数组
自 2.6 起
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_iter_is_valid ----

gtk_list_store_iter_is_valid
此功能很慢。仅将其用于调试和/或测试目的。检查给定的迭代器是否是此 的有效迭代器。GtkListStore
语法
参数
list_store- 一.GtkListStore
iter- 一.GtkTreeIter
返回
如果迭代器有效，则为 TRUE;如果迭代器无效，则为 FALSE。
自 2.2 起
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_move_after ----

gtk_list_store_move_after
将存储中的迭代器移动到一个又一个位置。请注意，此函数仅适用于未排序的商店。如果位置为 NULL，则将 iter 移动到列表的开头。
语法
参数
store- 一.GtkListStore
iter- 一.GtkTreeIter
position- A 或空。[允许-无]GtkTreeIter
自 2.
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_move_before ----

gtk_list_store_move_before
将存储中的 iter 移动到位置之前的位置。请注意，此函数仅适用于未排序的商店。如果位置为 NULL，则将 iter 移动到列表的末尾。
语法
参数
store- 一.GtkListStore
iter- 一.GtkTreeIter
position- A 或空值。[允许-无]GtkTreeIter
自 2.2 起
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_new ----

gtk_list_store_new
创建一个新的列表存储，就像n_columns每个传入类型的列一样。请注意，仅支持从标准 GObject 基本类型派生的类型。例如，gtk_list_store_new（3，G_TYPE_INT，G_TYPE_STRING，GDK_TYPE_PIXBUF）;将创建一个包含三列的新列，分别为类型，字符串和。GtkListStoreGdkPixbuf
语法
参数
n_columns- 列表存储中的列数
...- 列的所有类型，从第一个到最后一个GType
返回
一个新的GtkListStore
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_newv ----

gtk_list_store_newv
非变量创建函数。主要由语言绑定使用。
语法
参数
n_columns- 列表存储中的列数
types- 列的类型数组，从第一个到最后一个。[数组长度 = n_columns]GType
返回
一个新的.[转移完整]GtkListStore
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_prepend ----

gtk_list_store_prepend
在要list_store的新行前面附加一行。它将被更改为指向此新行。调用此函数后，该行将为空。要填写值，您需要调用gtk_list_store_set（） 或 gtk_list_store_set_value（）。
语法
参数
list_store- 一GtkListStore
iter- 要设置为前置行的未设置。[输出]GtkTreeIter
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_remove ----

gtk_list_store_remove
从列表存储区中删除给定行。删除后，iter 设置为下一个有效行，如果它指向list_store中的最后一行，则无效。
语法
参数
list_store- 一GtkListStore
iter- 有效GtkTreeIter
返回
如果 iteris 有效，则为 TRUE，如果不是，则为 FALSE。
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_reorder ----

gtk_list_store_reorder
重新排序商店以遵循new_order指示的顺序。请注意，此函数仅适用于未排序的存储。
语法
参数
store- 一.GtkListStore
new_order- 一个整数数组，将每个子节点的新位置映射到重新排序之前的旧位置，即new_order[newpos] = oldpos。它必须具有与列表存储区的长度完全相同的项数。[数组零终止 = 1]
自 2.2 起
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_set ----

gtk_list_store_set
设置迭代器引用的行中一个或多个单元格的值。变量参数列表应包含整数列号，每个列号后跟要设置的值。该列表以 -1 结尾。例如，将带有 typeG_TYPE_STRING 的列 0 设置为 ？Foo？，你会写gtk_list_store_set（store，iter，0，“Foo”，-1）。如果该值是G_TYPE_OBJECT，则由存储区引用，如果该值是G_TYPE_STRING或G_TYPE_BOXED，则由存储区复制该值。
语法
参数
list_store- 一GtkListStore
iter- 行迭代器
...- 列号和值对，以 -1 结尾
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_set_column_types ----

gtk_list_store_set_column_types
此函数主要用于继承自 ，并且只应在构造新的 .在添加行或调用接口上的方法后，它将不起作用。GObjectsGtkListStoreGtkListStoreGtkTreeModel
语法
参数
list_store- 一GtkListStore
n_columns- 列表存储的列数
types- 数组长度 n 为 。[数组长度 = n_columns]GTypes
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_set_valist ----

gtk_list_store_set_valist
参见 gtk_list_store_set（）;此版本需要va_list以供语言绑定使用。
语法
参数
list_store- 一GtkListStore
iter- 对正在修改的行有效的GtkTreeIter
var_args- 列/值对的va_list
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_set_value ----

gtk_list_store_set_value
设置由迭代器和列指定的单元格中的数据。值的类型必须可转换为列的类型。
语法
参数
list_store- 一GtkListStore
iter- 对正在修改的行有效的GtkTreeIter
column- 要修改的列号
value- 单元格的新值
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_set_valuesv ----

gtk_list_store_set_valuesv
gtk_list_store_set_valist（） 的变体，它将列和值作为两个数组，而不是varargs。此函数主要用于语言绑定，以防要更改的列数直到运行时才知道。
语法
参数
list_store- 一GtkListStore
iter- 对正在修改的行有效的GtkTreeIter
columns- 列号数组。[数组长度 = n_values]
values- 一个 GValues 数组。[数组长度 = n_values]
n_values- 列的长度和值数组
自 2.12 起
另请参见
GtkListStore


------------ KeyGTK3gtk_list_store_swap ----

gtk_list_store_swap
交换存储中的 a 和 b。请注意，此函数仅适用于未排序的存储。
语法
参数
store- 一.GtkListStore
a- 一.GtkTreeIter
b- 另一个.GtkTreeIter
自 2.2 起
另请参见
GtkListStore


------------ KeyGTK3gtk_lock_button_get_permission ----

gtk_lock_button_get_permission
获取控制按钮的对象。GPermission
语法
参数
button- 一GtkLockButton
返回
的按钮。[无转移]GPermission
自 3.2 起
另请参见
GtkLockButton


------------ KeyGTK3gtk_lock_button_new ----

gtk_lock_button_new
创建一个反映权限的新锁定按钮。
语法
参数
permission- 一个.[允许-无]GPermission
返回
一个新的GtkLockButton
自 3.2 起
另请参见
GtkLockButton


------------ KeyGTK3gtk_lock_button_set_permission ----

gtk_lock_button_set_permission
设置控制按钮的对象。GPermission
语法
参数
button- 一GtkLockButton
permission- 一个对象，或 NULL。[允许-无]GPermission
自 3.
另请参见
GtkLockButton


------------ KeyGTK3gtk_main ----

gtk_main
运行主循环，直到调用 gtk_main_quit（）。您可以嵌套对 gtk_main（） 的调用。在这种情况下，gtk_main_quit（） 将使主循环的最内层调用返回。
另请参见
gtk3-General


------------ KeyGTK3gtk_main_do_event ----

gtk_main_do_event
处理单个 GDK 事件。这是公开的，只是为了允许过滤GDK和GTK+之间的事件。您通常不需要直接调用此函数。虽然不应直接调用此函数，但您可能希望知道事件的确切处理方式。所以这是这个函数对事件执行的操作：压缩进入/离开通知事件。如果传递的事件与下一个事件（从 GDK 偷看）一起构建 anenter/leave 对，则两个事件都将被丢弃。这是为了避免指针交叉的（取消）突出显示小角的积压。找到获取事件的小部件。如果无法确定小部件，则事件将被丢弃，除非它属于 INCR 事务。然后将事件推送到堆栈上，以便您可以使用gtk_get_current_event（）查询当前处理的事件。事件将发送到小部件。如果抓取处于活动状态，则所有不在抓取小部件中包含的小部件的事件都将发送到后者，但有一些例外情况：由于明显的原因，删除和销毁事件仍会发送到事件小部件。与事件小道的可视表示直接相关的事件。如果之前有一个企业在没有配对休假事件的情况下交付给事件小部件，则离开事件将传递到事件小部件。拖动事件不会重定向，因为不清楚其语义是什么。另一个有趣的点可能是，所有关键事件都首先通过关键窥探器函数传递（如果有的话）。如果需要此功能，请阅读 gtk_key_snooper_install（） 的说明。完成传递后，将从事件堆栈中弹出事件。
语法
参数
event- 要处理的事件（通常由 GDK 传递）
另请参见
gtk3-General


------------ KeyGTK3gtk_main_iteration ----

gtk_main_iteration
运行主循环的单次迭代。如果没有事件等待处理，GTK+将阻止直到下一个事件被注意到。如果您不想阻止查看gtk_main_iteration_do（）或检查是否有任何事件正在与gtk_events_pending（）一起挂起。
返回
true 如果 gtk_main_quit（） 已调用最紧张的主环，则为 true
另请参见
gtk3-General


------------ KeyGTK3gtk_main_iteration_do ----

gtk_main_iteration_do
运行主循环的单次迭代。如果没有可用的事件，则返回或阻止，具体取决于阻止的值。
语法
参数
blocking- TRUE，如果您希望 GTK+ 在没有待处理事件时阻止
返回
true 如果 gtk_main_quit（） 已调用最紧张的主环，则为 true
另请参见
gtk3-General


------------ KeyGTK3gtk_main_level ----

gtk_main_level
要求提供主循环的当前嵌套级别。
返回
主循环的当前调用的嵌套级别
另请参见
gtk3-General


------------ KeyGTK3gtk_main_quit ----

gtk_main_quit
使主循环的最内层调用在重新获得控制时返回。
另请参见
gtk3-General


------------ KeyGTK3GTK_MAJOR_VERSION ----

GTK_MAJOR_VERSION
GTK_MAJOR_VERSION
与gtk_get_major_version（）一样，但来自应用程序编译时使用的标头，而不是来自应用程序运行时的库链接。
另请参见
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_menu_attach ----

gtk_menu_attach
向（表）菜单中添加新菜单。“细胞”的数量？该项目将占用由left_attach，right_attach，top_attach和bottom_attach指定。它们分别表示表的最左边、最右边、最上面和下部的列和行号。（列和行从零开始编制索引）。请注意，此函数与 gtk_menu_detach（） 无关。GtkMenuItem
语法
参数
menu- 一GtkMenu
child- 一GtkMenuItem
left_attach- 要将项目左侧附加到的列号
right_attach- 要将项目右侧附加到的列号
top_attach- 要将项目顶部附加到的行号
bottom_attach- 要将项目底部附加到的行号
2.4 起
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_attach_to_widget ----

gtk_menu_attach_to_widget
将菜单附加到小部件并提供一个回调函数，当菜单调用gtk_menu_detach（） 在销毁期间调用该函数时，将调用该函数。如果菜单附加到小部件，则当小部件被销毁时，它将被销毁，就好像它是子小部件一样。如果widgets在屏幕之间移动，则附加的菜单也将在屏幕之间正确移动。
语法
参数
menu- 一GtkMenu
attach_widget- 菜单将附加到GtkWidget
detacher- 用户提供的回调函数，当菜单调用gtk_menu_detach（） 时将调用该函数。[范围异步][允许-无]
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_bar_get_child_pack_direction ----

gtk_menu_bar_get_child_pack_direction
检索菜单栏的当前子包方向。请参见gtk_menu_bar_set_child_pack_direction（）。
语法
参数
menubar- 一GtkMenuBar
返回
儿童包装方向
自 2.
另请参见
GtkMenuBar


------------ KeyGTK3gtk_menu_bar_get_pack_direction ----

gtk_menu_bar_get_pack_direction
检索菜单栏的当前包方向。请参见 gtk_menu_bar_set_pack_direction（）。
语法
参数
menubar- 一GtkMenuBar
返回
包装方向
自 2.8 起
另请参见
GtkMenuBar


------------ KeyGTK3gtk_menu_bar_new ----

gtk_menu_bar_new
鍒涘缓鏂扮殑GtkMenuBar
杩斿洖
鏂扮殑鑿滃崟鏍忥紝浣滀负GtkWidget
鍙﹁鍙傝
GtkMenuBar


------------ KeyGTK3gtk_menu_bar_new_from_model ----

gtk_menu_bar_new_from_model
创建一个新的，并根据模型用菜单项和子菜单填充它。创建的菜单项连接到菜单栏所属的操作 - 通常通过包含在小部件层次结构中的方式。GtkMenuBarGtkApplicationWindowGtkApplicationWindows
语法
参数
model- 一GMenuModel
返回
一个新的GtkMenuBar
自 3.4 起
另请参见
GtkMenuBar


------------ KeyGTK3gtk_menu_bar_set_child_pack_direction ----

gtk_menu_bar_set_child_pack_direction
设置小部件应如何打包在菜单栏的子项中。
语法
参数
menubar- 一GtkMenuBar
child_pack_dir- 一个新的GtkPackDirection
自 2.8 起
另请参见
GtkMenuBar


------------ KeyGTK3gtk_menu_bar_set_pack_direction ----

gtk_menu_bar_set_pack_direction
设置项目在菜单栏中的打包方式。
语法
参数
menubar- 一GtkMenuBar
pack_dir- 一个新的GtkPackDirection
自 2.8 起
另请参见
GtkMenuBar


------------ KeyGTK3gtk_menu_button_get_align_widget ----

gtk_menu_button_get_align_widget
返回用于与菜单对齐的父级。GtkWidget
语法
参数
menu_button- 一GtkMenuButton
返回
一个值或 NULL。[无转移]GtkWidget
自 3.
另请参见
GtkMenuButton


------------ KeyGTK3gtk_menu_button_get_direction ----

gtk_menu_button_get_direction
返回弹出窗口弹出时将指向的方向。
语法
参数
menu_button- 一GtkMenuButton
返回
一个值GtkArrowType
3.6 起
另请参见
GtkMenuButton


------------ KeyGTK3gtk_menu_button_get_menu_model ----

gtk_menu_button_get_menu_model
返回用于生成弹出窗口的 。GMenuModel
语法
参数
menu_button- 一GtkMenuButton
返回
a 或空。[无转移]GMenuModel
3.6 起
另请参见
GtkMenuButton


------------ KeyGTK3gtk_menu_button_get_popover ----

gtk_menu_button_get_popover
返回空值。
语法
参数
menu_button- 一GtkMenuButton
返回
a 或空。[无转移]GtkPopover
自 3.12 起
另请参见
GtkMenuButton


------------ KeyGTK3gtk_menu_button_get_popup ----

gtk_menu_button_get_popup
返回空值。
语法
参数
menu_button- 一GtkMenuButton
返回
a 或空。[无转移]GtkMenu
3.6 起
另请参见
GtkMenuButton


------------ KeyGTK3gtk_menu_button_get_use_popover ----

gtk_menu_button_get_use_popover
返回是否将从菜单模型构造 a 或 a。GtkPopoverGtkMenu
语法
参数
menu_button- 一GtkMenuButton
返回
如果使用GtkPopover
自 3.12 起
另请参见
GtkMenuButton


------------ KeyGTK3gtk_menu_button_new ----

gtk_menu_button_new
创建一个新的构件，将向下指向的箭头作为唯一的子项。如果您愿意，可以将子小部件替换为另一个子小部件。GtkMenuButtonGtkWidget
返回
新创建的小部件GtkMenuButton
3.6 起
另请参见
GtkMenuButton


------------ KeyGTK3gtk_menu_button_set_align_widget ----

gtk_menu_button_set_align_widget
将 用于 在弹出时将菜单与 行。请注意，align_widget必须包含自身。将其设置为 NULL 意味着菜单将与按钮本身对齐。请注意，此属性当前仅用于菜单，而不用于弹出框。GtkWidgetGtkMenuButton
语法
参数
menu_button- 一GtkMenuButton
align_widget- 一个.[允许-无]GtkWidget
3.6 起
另请参见
GtkMenuButton


------------ KeyGTK3gtk_menu_button_set_direction ----

gtk_menu_button_set_direction
设置弹出窗口的弹出方向，以及更改箭头的方向。如果子项已自定义，则不会将其更改为箭头。如果 不适合给定方向的可用空间，GTK+将最好将其保持在屏幕内并完全可见。如果您通过某个方向的GTK_ARROW_NONE，则弹出窗口的行为与您通过GTK_ARROW_DOWN时一样（尽管您不会看到任何箭头）。
语法
参数
menu_button- 一GtkMenuButton
direction- 一GtkArrowType
3.6 起
另请参见
GtkMenuButton


------------ KeyGTK3gtk_menu_button_set_menu_model ----

gtk_menu_button_set_menu_model
设置从中构造弹出窗口的 ，或设置为 NULL 以禁用按钮。根据 的值，将使用 gtk_menu_new_from_model（） 创建 a，或者使用 gtk_popover_new_from_model（） 创建 a。在任何一种情况下，操作都将按照这些函数的文档进行连接。如果或已经设置，其内容将丢失并被新创建的弹出窗口替换。GMenuModel?use-popover?GtkMenuGtkPopover?popup??popover?
语法
参数
menu_button- 一GtkMenuButton
menu_model- 一个.[允许-无]GMenuModel
3.6 起
另请参见
GtkMenuButton


------------ KeyGTK3gtk_menu_button_set_popover ----

gtk_menu_button_set_popover
设置单击按钮时将弹出的 ，或设置为 NULL 以禁用按钮。如果设置了 或，它们将设置为 NULL。GtkPopover?menu-model??popup?
语法
参数
menu_button- 一GtkMenuButton
popover- 一个.[允许-无]GtkPopover
自 3.12 起
另请参见
GtkMenuButton


------------ KeyGTK3gtk_menu_button_set_popup ----

gtk_menu_button_set_popup
设置单击按钮时将弹出的，或设置为 NULL 以禁用按钮。如果设置了 或，它们将设置为 NULL。GtkMenu?menu-model??popover?
语法
参数
menu_button- 一GtkMenuButton
menu- 一个.[允许-无]GtkMenu
3.6 起
另请参见
GtkMenuButton


------------ KeyGTK3gtk_menu_button_set_use_popover ----

gtk_menu_button_set_use_popover
设置是否在调用 gtk_menu_button_set_menu_model（） 时构造 a 而不是。请注意，仅当设置了新菜单模型时，才会参考此属性。GtkPopoverGtkMenu
语法
参数
menu_button- 一GtkMenuButton
use_popover- TRUE 从菜单模型构造弹出框
自 3.12 起
另请参见
GtkMenuButton


------------ KeyGTK3gtk_menu_detach ----

gtk_menu_detach
将菜单从它所附加到的构件中分离出来。此函数将调用回调函数 detacher，前提是在调用 gtk_menu_attach_to_widget（） 函数时提供。
语法
参数
menu- 一GtkMenu
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_get_accel_group ----

gtk_menu_get_accel_group
获取 它为 themenu 保存全局加速器。请参见gtk_menu_set_accel_group（）。GtkAccelGroup
语法
参数
menu- 一GtkMenu
返回
与菜单相关联。[无转移]GtkAccelGroup
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_get_accel_path ----

gtk_menu_get_accel_path
检索菜单上设置的加速器路径。
语法
参数
menu- 有效GtkMenu
返回
菜单上设置的加速器路径。
自 2.14 起
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_get_active ----

gtk_menu_get_active
从菜单中返回选定的菜单项。这是由 使用的。GtkComboBox
语法
参数
menu- 一GtkMenu
返回
上次在菜单中选择的。如果尚未进行选择，则选择第一个菜单项。[无转移]GtkMenuItem
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_get_attach_widget ----

gtk_menu_get_attach_widget
返回菜单附加到的 。GtkWidget
语法
参数
menu- 一GtkMenu
返回
菜单附加到的。[无转移]GtkWidget
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_get_for_attach_widget ----

gtk_menu_get_for_attach_widget
返回附加到此小组件的菜单的列表。此列表归 GTK+ 所有，不得修改。
语法
参数
widget- 一GtkWidget
返回
附加到他的小部件的菜单列表。[element-type GtkWidget][无转移]
自 2.6 起
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_get_monitor ----

gtk_menu_get_monitor
检索要在其上显示菜单的监视器的编号。
语法
参数
menu- 一GtkMenu
返回
应在其上弹出菜单的显示器数量，如果未设置显示器，则为 -1
自 2.14 起
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_get_reserve_toggle_size ----

gtk_menu_get_reserve_toggle_size
返回菜单是否为切换和图标保留空间，而不考虑它们的实际存在。
语法
参数
menu- 一GtkMenu
返回
菜单是否预留切换空间
自 2.18 起
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_get_tearoff_state ----

gtk_menu_get_tearoff_state
gtk_menu_get_tearoff_state自版本 3.10 起已弃用，不应在新编写的代码中使用。返回菜单是否被撕掉。请参见gtk_menu_set_tearoff_state（）。
语法
参数
menu- 一GtkMenu
返回
如果菜单当前已撕下，则为 TRUE。
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_get_title ----

gtk_menu_get_title
gtk_menu_get_title自 3.10 版起已弃用，不应在新编写的代码中使用。返回菜单的标题。请参见 gtk_menu_set_title（）。
语法
参数
menu- 一GtkMenu
返回
菜单的标题，如果菜单未设置标题，则为 NULL。此字符串归 GTK+ 所有，不应修改或释放。
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_item_activate ----

gtk_menu_item_activate
在给定项目上发出信号?activate?
语法
参数
menu_item- 菜单项
另请参见
GtkMenuItem


------------ KeyGTK3gtk_menu_item_deselect ----

gtk_menu_item_deselect
在给定项目上发出信号。?deselect?
语法
参数
menu_item- 菜单项
另请参见
GtkMenuItem


------------ KeyGTK3gtk_menu_item_get_accel_path ----

gtk_menu_item_get_accel_path
检索以前在 menu_item 上设置的加速器路径。有关详细信息，请参见 gtk_menu_item_set_accel_path（）。
语法
参数
menu_item- 有效GtkMenuItem
返回
与此菜单项的功能相对应的加速器路径，如果未设置，则为 NULL
自 2.14 起
另请参见
GtkMenuItem


------------ KeyGTK3gtk_menu_item_get_label ----

gtk_menu_item_get_label
设置menu_item标签上的文本
语法
参数
menu_item- 一GtkMenuItem
返回
menu_itemlabel中的文本。这是标签使用的内部字符串，不得修改。
2.16 起
另请参见
GtkMenuItem


------------ KeyGTK3gtk_menu_item_get_reserve_indicator ----

gtk_menu_item_get_reserve_indicator
返回menu_item是否为子菜单指示器保留空间，而不管它是否具有子菜单。
语法
参数
menu_item- 一GtkMenuItem
返回
如果menu_itemalways为小菜单指标保留空间，则为 true
自 3.0 起
另请参见
GtkMenuItem


------------ KeyGTK3gtk_menu_item_get_right_justified ----

gtk_menu_item_get_right_justified
gtk_menu_item_get_right_justified自版本 3.2 起已弃用，不应在新编写的代码中使用。请参见 gtk_menu_item_set_right_justified（）获取菜单项是否在菜单栏的右侧显示两端。
语法
参数
menu_item- 一GtkMenuItem
返回
如果菜单项在添加到菜单栏后将显示在最右侧，则为 TRUE。
另请参见
GtkMenuItem


------------ KeyGTK3gtk_menu_item_get_submenu ----

gtk_menu_item_get_submenu
获取此菜单项下的子菜单（如果有）。请参见 gtk_menu_item_set_submenu（）。
语法
参数
menu_item- 一GtkMenuItem
返回
此菜单项的子菜单，如果没有，则为 NULL。[无转移]
另请参见
GtkMenuItem


------------ KeyGTK3gtk_menu_item_get_use_underline ----

gtk_menu_item_get_use_underline
检查文本中的下划线是否指示接下来的字符应该用于助记符快捷键。
语法
参数
menu_item- 一GtkMenuItem
返回
如果标签中嵌入的下划线指示助记符快捷键，则为 TRUE。
2.16 起
另请参见
GtkMenuItem


------------ KeyGTK3gtk_menu_item_new ----

gtk_menu_item_new
鍒涘缓鏂扮殑 .GtkMenuItem
杩斿洖
鏂板垱寤虹殑GtkMenuItem
鍙﹁鍙傝
GtkMenuItem


------------ KeyGTK3gtk_menu_item_new_with_label ----

gtk_menu_item_new_with_label
Creates a new  whose child is a .GtkMenuItemGtkLabel
Syntax
Parameters
label  -  	the text for the label
Returns
the newly created GtkMenuItem
See Also
GtkMenuItem


------------ KeyGTK3gtk_menu_item_new_with_mnemonic ----

gtk_menu_item_new_with_mnemonic
Creates a new  containing a label.The label will be created using gtk_label_new_with_mnemonic(),so underscores in label indicate the mnemonic for the menu item.GtkMenuItem
Syntax
Parameters
label  -  	The text of the button, with an underscore in front of themnemonic character
Returns
a new GtkMenuItem
See Also
GtkMenuItem


------------ KeyGTK3gtk_menu_item_select ----

gtk_menu_item_select
在给定项目上发出信号。?select?
语法
参数
menu_item- 菜单项
另请参见
GtkMenuItem


------------ KeyGTK3gtk_menu_item_set_accel_path ----

gtk_menu_item_set_accel_path
将加速器路径设置为menu_item，通过该路径，可以识别由用户引起的菜单项加速器的运行时更改并将其保存到持久性存储中（请参阅此处的 gtk_accel_map_save（））。若要为此菜单项设置默认快捷键，请使用相同的accel_path callgtk_accel_map_add_entry（）。有关加速器路径的详细信息，请参阅 alsogtk_accel_map_add_entry（），有关此函数的更方便的变体，请参阅 gtk_menu_set_accel_path（）。此函数基本上是一个方便的包装器，它使用菜单项的相应加速器组处理调用gtk_widget_set_accel_path（）。请注意，您需要在父菜单上设置一个加速器 withgtk_menu_set_accel_group（） 才能使其正常工作。请注意，accel_path字符串将存储在 .因此，如果传递静态字符串，则可以通过先使用g_intern_static_string（）将其间接来节省一些内存。GQuark
语法
参数
menu_item- 有效GtkMenuItem
accel_path- 加速器路径，对应于此菜单项的功能，或 NULL 取消设置当前路径。[允许-无]
另请参见
GtkMenuItem


------------ KeyGTK3gtk_menu_item_set_label ----

gtk_menu_item_set_label
设置menu_item标签上的文本
语法
参数
menu_item- 一GtkMenuItem
label- 要设置的文本
2.16 起
另请参见
GtkMenuItem


------------ KeyGTK3gtk_menu_item_set_reserve_indicator ----

gtk_menu_item_set_reserve_indicator
设置menu_item是否应为子菜单指示器保留空间，而不管它是否实际具有子菜单。应用程序应该几乎不需要调用此函数。
语法
参数
menu_item- 一GtkMenuItem
reserve- 新值
自 3.
另请参见
GtkMenuItem


------------ KeyGTK3gtk_menu_item_set_right_justified ----

gtk_menu_item_set_right_justified
gtk_menu_item_set_right_justified自 3.2 版起已弃用，不应在新编写的代码中使用。如果您坚持使用它，请使用gtk_widget_set_hexpand（）和gtk_widget_set_halign（）。设置菜单项是否在菜单栏的右侧显示两端。传统上这样做是为了 ？帮助菜单项，但现在被认为是一个坏主意。（如果从右向左的语言（如希伯来语或阿拉伯语）的小部件布局相反，则右对齐的菜单项将显示在左侧。
语法
参数
menu_item- 一个.GtkMenuItem
right_justified- 如果为 TRUE，则菜单项将出现在最右侧，如果添加到菜单栏中
另请参见
GtkMenuItem


------------ KeyGTK3gtk_menu_item_set_submenu ----

gtk_menu_item_set_submenu
设置或替换菜单项的子菜单，或在传递 NULLsubmenu 时将其删除。
语法
参数
menu_item- 一GtkMenuItem
submenu- 子菜单，或 NULL。[允许-无]
另请参见
GtkMenuItem


------------ KeyGTK3gtk_menu_item_set_use_underline ----

gtk_menu_item_set_use_underline
如果为 true，则文本中的下划线指示接下来的字符应用于助记符快捷键。
语法
参数
menu_item- 一GtkMenuItem
setting- 如果文本中的下划线表示助记符，则为 TRUE
2.16 起
另请参见
GtkMenuItem


------------ KeyGTK3gtk_menu_item_toggle_size_allocate ----

gtk_menu_item_toggle_size_allocate
在给定项目上发出信号。?toggle-size-allocate?
语法
参数
menu_item- 菜单项。
allocation- 用作信号数据的分配。
另请参见
GtkMenuItem


------------ KeyGTK3gtk_menu_item_toggle_size_request ----

gtk_menu_item_toggle_size_request
在给定项目上发出信号。?toggle-size-request?
语法
参数
menu_item- 菜单项
requisition- 用作信号数据的申请。[输入]
另请参见
GtkMenuItem


------------ KeyGTK3gtk_menu_new ----

gtk_menu_new
创建新的GtkMenu
返回
一个新的GtkMenu
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_new_from_model ----

gtk_menu_new_from_model
创建 a 并根据模型用菜单项和子菜单填充它。创建的菜单项连接到在菜单所属的 操作 - 通常通过附加到小部件层次结构中包含的小部件（请参见gtk_menu_attach_to_widget（））。）。还可以使用菜单附件小部件或其任何父小部件上的 gtk_widget_insert_action_group（） 添加操作。GtkMenuGtkApplicationWindowGtkApplicationWindows
语法
参数
model- 一GMenuModel
返回
一个新的GtkMenu
自 3.4 起
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_popdown ----

gtk_menu_popdown
从屏幕中删除菜单。
语法
参数
menu- 一GtkMenu
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_popup ----

gtk_menu_popup
显示菜单并使其可供选择。应用程序可以使用此函数来显示上下文相关菜单，并且通常会为parent_menu_shell、parent_menu_item、func 和数据参数提供 NULL。默认菜单定位功能会将菜单定位在当前鼠标引导器位置。按钮参数应该是按下鼠标按钮以启动菜单弹出窗口。如果菜单弹出窗口是由鼠标按钮按下以外的其他内容（如鼠标按钮释放或按键）发起的，则按钮应为 0。activate_time参数用于解决冲突对鼠标/键盘抓取请求的并发请求的启动。要正常运行，这需要是导致启动弹出窗口的用户事件的时间戳（如鼠标单击或按键）。仅当没有此类事件可用时，才能改用 gtk_get_current_event_time（）。
语法
参数
menu- 一GtkMenu
parent_menu_shell- 包含触发菜单项的菜单外壳，或 NULL。[允许-无]
parent_menu_item- 激活弹出窗口的菜单项，或 NULL。[允许-无]
func- 用户提供的用于定位菜单的函数，或 NULL。[范围异步][允许-无]
data- 用户提供的数据要传递给 func。
button- 按下鼠标按钮以启动事件。
activate_time- 激活事件发生的时间。
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_popup_for_device ----

gtk_menu_popup_for_device
显示菜单并使其可供选择。应用程序可以使用此功能来显示上下文相关的菜单，并且通常会为parent_menu_shell，parent_menu_item，func，data和销毁参数提供NULL。默认菜单定位功能会将菜单定位在设备的当前位置（或其对应的指针）。按钮参数应该是按下鼠标按钮以启动菜单弹出窗口。如果菜单弹出窗口是由鼠标按钮按下以外的其他方式（如鼠标按钮释放或按键）启动的，则按钮应为 0。activate_time参数用于解决冲突对鼠标/键盘抓取请求的当前请求的启动。要正常运行，这需要是导致弹出窗口启动的用户事件的时间戳（如鼠标单击或按键）。仅当没有此类事件可用时，才能改用 gtk_get_current_event_time（）。
语法
参数
menu- 一GtkMenu
device- 一个.[允许-无]GdkDevice
parent_menu_shell- 包含触发菜单项的菜单外壳，或 NULL。[允许-无]
parent_menu_item- 激活触发弹出窗口的菜单项，或 NULL。[允许-无]
func- 用户提供的用于定位菜单的函数，或 NULL。[允许-无]
data- 用户提供的数据要传递给 func。[允许-无]
destroy- 销毁通知数据。[允许-无]
button- 按下鼠标按钮以启动事件
activate_time- 激活事件发生的时间
自 3.0 起
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_reorder_child ----

gtk_menu_reorder_child
将子级移动到菜单子级列表中的新位置。
语法
参数
menu- 一GtkMenu
child- 移动GtkMenuItem
position- 放置孩子的新位置。位置编号从 0 到 n - 1
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_reposition ----

gtk_menu_reposition
根据其位置函数重新定位菜单。
语法
参数
menu- 一GtkMenu
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_set_accel_group ----

gtk_menu_set_accel_group
设置哪个保持主题的全球加速器nu。此加速器组还需要添加到此菜单与 gtk_window_add_accel_group（） 一起使用的所有窗口中，以便这些窗口支持此组中包含的所有加速器。GtkAccelGroup
语法
参数
menu- 一GtkMenu
accel_group- 与菜单相关联。[允许-无]GtkAccelGroup
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_set_accel_path ----

gtk_menu_set_accel_path
为此菜单设置加速器路径，从中可以构造其直接子项（菜单项）的加速器路径。此函数的主要目的是使程序员不必调用gtk_menu_item_set_accel_path（） oneach 菜单项，该菜单项应支持运行时用户可更改的加速器。相反，只需在其父菜单上调用gtk_menu_set_accel_path（），此菜单的每个菜单项（包含描述其用途的标签）都会自动获得分配的加速路径。例如，包含菜单项的菜单 ？新增功能？和？退出？，将，aftergtk_menu_set_accel_path（菜单，”/文件“）;已调用，为其项目分配加速路径：”/文件/新建“和”/文件/退出”。然后，将加速路径分配给菜单项，使用户能够在运行时更改它们的加速器。有关加速器路径及其默认设置的更多详细信息，请参阅gtk_accel_map_add_entry（）。请注意，accel_path字符串将存储在 .因此，如果你传递一个静态字符串，你可以通过先用g_intern_static_string（）来代替它来节省一些内存。GQuark
语法
参数
menu- 有效GtkMenu
accel_path- 有效的加速器路径。[允许-无]
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_set_active ----

gtk_menu_set_active
选择菜单中指定的菜单项。这是由其他人使用的，不应该被其他人使用。GtkComboBox
语法
参数
menu- 一GtkMenu
index- 要选择的菜单项的索引。索引值从 0 到 n-1
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_set_monitor ----

gtk_menu_set_monitor
通知 GTK+ 应在哪个显示器上弹出菜单。请参见 gdk_screen_get_monitor_geometry（）。如果菜单不应出现在与指针相同的监视器上，则应从 中调用此函数。此信息无法从 由 返回的坐标可靠地推断出来，因为对于很长的菜单，这些坐标可能会超出监视器边界甚至屏幕边界。GtkMenuPositionFuncGtkMenuPositionFunc
语法
参数
menu- 一GtkMenu
monitor_num- 应弹出菜单的显示器编号
2.4 起
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_set_reserve_toggle_size ----

gtk_menu_set_reserve_toggle_size
设置菜单是否应为绘制切换开关图标保留空间，而不考虑它们的实际存在。
语法
参数
menu- 一GtkMenu
reserve_toggle_size- 是否为切换保留大小
自 2.18 起
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_set_screen ----

gtk_menu_set_screen
设置菜单的显示位置。GdkScreen
语法
参数
menu- 一GtkMenu
screen- a ，如果屏幕应由菜单附加到的小部件确定，则为 NULL。[允许-无]GdkScreen
自 2.2 起
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_set_tearoff_state ----

gtk_menu_set_tearoff_state
gtk_menu_set_tearoff_state自 3.10 版起已弃用，不应在新编写的代码中使用。更改菜单的撕裂状态。菜单通常显示为下拉菜单，只要菜单处于活动状态，该菜单就会一直存在。它也可以显示为一个撕下菜单，直到它被关闭或重新连接为止。
语法
参数
menu- 一GtkMenu
torn_off- 如果为 TRUE，则菜单显示为撕下菜单。
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_set_title ----

gtk_menu_set_title
gtk_menu_set_title自版本 3.10 起已弃用，不应在新编写的代码中使用。设置菜单的标题字符串。当菜单显示为撕裂线时，将显示标题。如果 title 为 NULL，则菜单将查看它是否附加到父菜单项，如果是，它将尝试使用与该菜单项的标签相同的文本。
语法
参数
menu- 一GtkMenu
title- 包含菜单标题的字符串
另请参见
GtkMenu


------------ KeyGTK3gtk_menu_shell_activate_item ----

gtk_menu_shell_activate_item
激活菜单外壳中的菜单项。
语法
参数
menu_shell- 一GtkMenuShell
menu_item- 激活GtkMenuItem
force_deactivate- 如果为 TRUE，则在激活菜单项后强制停用 themenu shell
另请参见
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_append ----

gtk_menu_shell_append
将新添加到菜单 shell 的站点列表的末尾。GtkMenuItem
语法
参数
menu_shell- 一GtkMenuShell
child- 要添加GtkMenuItem
另请参见
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_bind_model ----

gtk_menu_shell_bind_model
在 和 之间建立绑定。删除 shell 的内容，然后使用与模型相关的菜单项重新填充。当模型更改时，外壳会更新。在具有不同模型的 shell 上调用此函数两次，因为第一个绑定将替换为与 newmodel 的绑定。如果模型为 NULL，则撤消任何先前的绑定，并removed.with_separators所有子项确定在它们之间是否插入了分离器。这通常是需要的菜单，但对于菜单栏没有意义。如果action_namespace是非 NULL，则效果是模型中提到的 allactions 的名称以命名空间为前缀，外加一个点。例如，如果操作 “退出”是提到，action_namespace是 ？app？则有效的操作名称是 “app.quit？”。此函数用于在创建的菜单项上定义操作名称和目标值。如果要使用 ？app 以外的 anaction 组？和 “win？”，或者如果要使用 外部 ，则需要将自己的操作组附加到小组件层次结构usinggtk_widget_insert_action_group（）。例如，如果您创建了一个带有 “quit？action 并将其与名称 “mygroup” 插入，那么您将使用操作名称 ？mygroup.quit？在你的。在大多数情况下，您可能最好usinggtk_menu_new_from_model（）或gtk_menu_bar_new_from_model（）或直接将gtk_application_set_app_menu（）orgtk_application_set_menubar（）传递到。GtkMenuShellGMenuModelGtkActionableGtkMenuShellGtkApplicationWindowGMenuModelGMenuModel
语法
参数
menu_shell- 一GtkMenuShell
model- 要绑定到或 NULL 要删除绑定。[允许-无]GMenuModel
action_namespace- 模型中操作的命名空间。[允许-无]
with_separators- true 如果 shell 中的顶级物品应该在它们之间有分离器
自 3.
另请参见
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_cancel ----

gtk_menu_shell_cancel
取消菜单外壳中的选择。
语法
参数
menu_shell- 一GtkMenuShell
2.4 起
另请参见
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_deactivate ----

gtk_menu_shell_deactivate
停用菜单外壳。通常，这会导致菜单外壳从屏幕上擦除。
语法
参数
menu_shell- 一GtkMenuShell
另请参见
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_deselect ----

gtk_menu_shell_deselect
从菜单 shell 中取消选择当前选定的项（如果有）。
语法
参数
menu_shell- 一GtkMenuShell
另请参见
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_get_parent_shell ----

gtk_menu_shell_get_parent_shell
获取父菜单外壳。子菜单的父菜单 shell 是从中打开它的 或。GtkMenuGtkMenuBar
语法
参数
menu_shell- 一GtkMenuShell
返回
父项 。[无转移]GtkMenuShell
自 3.0 起
另请参见
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_get_selected_item ----

gtk_menu_shell_get_selected_item
获取当前选定的项。
语法
参数
menu_shell- 一GtkMenuShell
返回
当前所选项目。[无转移]
自 3.0 起
另请参见
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_get_take_focus ----

gtk_menu_shell_get_take_focus
如果菜单 shell 将键盘焦点置于弹出窗口上，则返回 TRUE。
语法
参数
menu_shell- 一GtkMenuShell
返回
如果菜单外壳将键盘焦点放在弹出窗口上，则为 TRUE。
自 2.8 起
另请参见
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_insert ----

gtk_menu_shell_insert
将新添加到菜单 shell 的项列表中，该列表位于位置指示的位置。GtkMenuItem
语法
参数
menu_shell- 一GtkMenuShell
child- 要添加GtkMenuItem
position- 项目列表中添加子项的位置。位置编号从 0 到 n-1
另请参见
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_prepend ----

gtk_menu_shell_prepend
将新添加到菜单 shell 的站点列表的开头。GtkMenuItem
语法
参数
menu_shell- 一GtkMenuShell
child- 要添加GtkMenuItem
另请参见
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_select_first ----

gtk_menu_shell_select_first
选择菜单 shell 的第一个可见或可选子项;除非唯一项是撕裂项，否则不要选择撕裂项。
语法
参数
menu_shell- 一GtkMenuShell
search_sensitive- 如果为 TRUE，则搜索第一个可选菜单项，否则如果第一个项目不敏感，则不选择任何内容。如果菜单最初是弹出的，这应该是 FALSE。
自 2.2 起
另请参见
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_select_item ----

gtk_menu_shell_select_item
从菜单外壳中选择菜单项。
语法
参数
menu_shell- 一GtkMenuShell
menu_item- 要选择的GtkMenuItem
另请参见
GtkMenuShell


------------ KeyGTK3gtk_menu_shell_set_take_focus ----

gtk_menu_shell_set_take_focus
如果take_focus为 TRUE（默认值），则菜单 shell 将采用键盘焦点，以便接收在菜单中启用键盘导航所需的所有键盘事件。将take_focus设置为 FALSE 仅适用于特殊应用程序（如虚拟键盘实现），这些应用程序不应采用键盘焦点。每当弹出子菜单时，菜单或菜单栏的take_focus状态都会自动更新为子菜单，因此您不必担心为整个菜单层次结构递归设置它。仅当以编程方式选取子菜单并手动将其置顶时，才能显式设置子菜单的 take_focus 属性。请注意，将其设置为 FALSE 会产生副作用：如果焦点位于其他应用中，则会保留焦点，并且菜单中的密钥导航不起作用。因此，只有当焦点位于屏幕键盘拥有的某些踏板上时，菜单上的键导航才会起作用。为了避免混淆用户，take_focus设置为 FALSEs 的菜单不应显示助记符或加速器，因为它不能保证它们是否有效。另请参见 gdk_keyboard_grab（）
语法
参数
menu_shell- 一GtkMenuShell
take_focus- TRUE，如果菜单外壳应该采取键盘焦点在弹出窗口
自 2.8 起
另请参见
GtkMenuShell


------------ KeyGTK3gtk_menu_tool_button_get_menu ----

gtk_menu_tool_button_get_menu
获取 与 关联的。GtkMenuGtkMenuToolButton
语法
参数
button- 一GtkMenuToolButton
返回
与 相关联。[无转移]GtkMenuGtkMenuToolButton
自 2.6 起
另请参见
GtkMenuToolButton


------------ KeyGTK3gtk_menu_tool_button_new ----

gtk_menu_tool_button_new
使用icon_widget作为图标并标记作为标签来创建新的。GtkMenuToolButton
语法
参数
icon_widget- 将用作图标小部件的小部件，或 NULL。[允许-无]
label- 将用作标签的字符串，或 NULL。[允许-无]
返回
新的GtkMenuToolButton
自 2.6 起
另请参见
GtkMenuToolButton


------------ KeyGTK3gtk_menu_tool_button_new_from_stock ----

gtk_menu_tool_button_new_from_stock
gtk_menu_tool_button_new_from_stock自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_menu_tool_button_new（）。创建新的 .新品将包含stock_id指示的库存商品中的图标和标签。GtkMenuToolButtonGtkMenuToolButton
语法
参数
stock_id- 库存项目的名称
返回
新的GtkMenuToolButton
自 2.6 起
另请参见
GtkMenuToolButton


------------ KeyGTK3gtk_menu_tool_button_set_arrow_tooltip_markup ----

gtk_menu_tool_button_set_arrow_tooltip_markup
将工具提示标记文本设置为用作弹出菜单的箭头按钮的工具提示。请参阅 gtk_tool_item_set_tooltip_text（） 以获取有关整体工具提示的设置。GtkMenuToolButton
语法
参数
button- 一GtkMenuToolButton
markup- 标记文本将用作按钮箭头按钮的工具提示文本
自 2.1 起
另请参见
GtkMenuToolButton


------------ KeyGTK3gtk_menu_tool_button_set_arrow_tooltip_text ----

gtk_menu_tool_button_set_arrow_tooltip_text
将工具提示文本设置为用作弹出菜单的箭头按钮的工具提示。请参阅 gtk_tool_item_set_tooltip_text（） 以设置整个工具。GtkMenuToolButton
语法
参数
button- 一GtkMenuToolButton
text- 文本将用作按钮箭头按钮的工具提示文本
自 2.12 起
另请参见
GtkMenuToolButton


------------ KeyGTK3gtk_menu_tool_button_set_menu ----

gtk_menu_tool_button_set_menu
设置当用户单击箭头时弹出的 。如果菜单为 NULL，则箭头按钮将变得不敏感。GtkMenu
语法
参数
button- 一GtkMenuToolButton
menu- 相关GtkMenuGtkMenuToolButton
自 2.6 起
另请参见
GtkMenuToolButton


------------ KeyGTK3gtk_message_dialog_format_secondary_markup ----

gtk_message_dialog_format_secondary_markup
将消息对话框的辅助文本设置为message_format（withprintf（）样式），该文本使用 Pango 文本标记语言进行标记。由于疏忽，此函数不会像gtk_message_dialog_new_with_markup（） 那样转义特殊的 XML 字符。因此，如果参数可能包含特殊的 XML 字符，则应使用 g_markup_printf_escaped（） 对其进行转义。123456[/syntax] [syntax]gchar *msg;msg = g_markup_printf_escaped （message_format， ...）;gtk_message_dialog_format_secondary_markup（message_dialog，“%s”，消息）;g_free（消息）;[/语法]
语法
参数
message_dialog- 一GtkMessageDialog
message_format- printf（）样式的标记字符串（请参阅Pango标记格式）或 NULL
...- message_format的参数
自 2.6 起
另请参见
GtkMessageDialog


------------ KeyGTK3gtk_message_dialog_format_secondary_text ----

gtk_message_dialog_format_secondary_text
将消息对话框的辅助文本设置为message_format（使用 printf（）样式）。
语法
参数
message_dialog- 一GtkMessageDialog
message_format- printf（）样式的格式字符串，或 NULL。[允许-无]
...- message_format的参数
自 2.6 起
另请参见
GtkMessageDialog


------------ KeyGTK3gtk_message_dialog_get_image ----

gtk_message_dialog_get_image
gtk_message_dialog_get_image自版本 3.12 起已弃用，不应在新编写的代码中使用。用于带有图像的对话框获取对话框的图像。GtkDialog
语法
参数
dialog- 一GtkMessageDialog
返回
对话框的图像。[无转移]
自 2.14 起
另请参见
GtkMessageDialog


------------ KeyGTK3gtk_message_dialog_get_message_area ----

gtk_message_dialog_get_message_area
返回对话框的消息区域。这是包装钻石的主要和次要标签的盒子。您可以将自己的额外内容添加到该框中，它将显示在这些标签下方。请参阅 gtk_dialog_get_content_area（） 以了解父级 中的相应功能。GtkDialog
语法
参数
message_dialog- 一GtkMessageDialog
返回
对应于消息区域？在message_dialog。[无转移]GtkVBox
自 2.2 起
另请参见
GtkMessageDialog


------------ KeyGTK3gtk_message_dialog_new ----

gtk_message_dialog_new
创建一个新的消息对话框，这是一个简单的对话框，带有指示对话框类型（错误、警告等）的图标以及用户可能想要查看的一些文本。当用户单击按钮时，将使用 来自 的响应 ID 发出“响应”信号。有关更多详细信息，请参阅。GtkResponseTypeGtkDialog
语法
参数
parent- 暂时性父级，或 NULL 表示无。[允许-无]
flags- 旗帜
type- 消息类型
buttons- 要使用的按钮集
message_format- printf（）样式的格式字符串，或 NULL。[允许-无]
...- message_format的参数
返回
一个新的.[无转移]GtkMessageDialog
另请参见
GtkMessageDialog


------------ KeyGTK3gtk_message_dialog_new_with_markup ----

gtk_message_dialog_new_with_markup
创建一个新的消息对话框，这是一个简单的对话框，带有指示对话框类型（错误，警告等）的图标和一些用Pango文本标记语言标记的文本。当用户单击按钮时，“响应？”发出信号时带有来自 的响应 ID。有关更多详细信息，请参阅。传递给此函数的 printf（） 参数中的特殊 XML 字符将根据需要自动转义。（请参阅 g_markup_printf_escaped（） 了解如何实现此功能。通常这是你想要的，但是如果你有一个现有的Pango标记字符串，你想从字面上用作标签，那么你需要使用gtk_message_dialog_set_markup（）代替，因为你不能传递标记字符串作为格式（它可能包含？%？字符）或作为字符串参数。123456789[/语法] [语法]GtkWidget *对话框;GtkDialogFlags 标志 = GTK_DIALOG_DESTROY_WITH_PARENT;对话框 = gtk_message_dialog_new（parent_window、标志、GTK_MESSAGE_ERROR、GTK_BUTTONS_CLOSE、NULL）;gtk_message_dialog_set_markup（GTK_MESSAGE_DIALOG（对话框）、标记）;[/语法]GtkResponseTypeGtkDialog
语法
参数
parent- 暂时性父级，或 NULL 表示无。[允许-无]
flags- 旗帜
type- 消息类型
buttons- 要使用的按钮集
message_format- printf（）样式的格式字符串，或 NULL。[允许-无]
...- message_format的参数
返回
一个新的GtkMessageDialog
2.4 起
另请参见
GtkMessageDialog


------------ KeyGTK3gtk_message_dialog_set_image ----

gtk_message_dialog_set_image
gtk_message_dialog_set_image自版本 3.12 起已弃用，不应在新编写的代码中使用。用于创建带有图像的对话框设置对话框的图像到图像。GtkDialog
语法
参数
dialog- 一GtkMessageDialog
image- 图像
自 2.10 起
另请参见
GtkMessageDialog


------------ KeyGTK3gtk_message_dialog_set_markup ----

gtk_message_dialog_set_markup
将消息对话框的文本设置为 str，它使用 Pango 文本标记语言进行标记。
语法
参数
message_dialog- 一GtkMessageDialog
str- 标记字符串（请参阅 Pango 标记格式）
2.4 起
另请参见
GtkMessageDialog


------------ KeyGTK3GTK_MICRO_VERSION ----

GTK_MICRO_VERSION
GTK_MICRO_VERSION
与gtk_get_micro_version（）一样，但来自应用程序编译时使用的标头，而不是来自应用程序运行时的库linkedagainst。
另请参见
gtk3-Feature-Test-Macros


------------ KeyGTK3GTK_MINOR_VERSION ----

GTK_MINOR_VERSION
GTK_MINOR_VERSION
与gtk_get_minor_version（）一样，但来自应用程序编译时使用的标头，而不是来自应用程序运行时的库链接。
另请参见
gtk3-Feature-Test-Macros


------------ KeyGTK3gtk_misc_get_alignment ----

gtk_misc_get_alignment
获取小部件在其分配范围内的 X 和 Y 对齐方式。请参见 gtk_misc_set_alignment（）。
语法
参数
misc- 一GtkMisc
xalign- 存储杂项的 X 对齐方式的位置，或 NULL。[输出][允许-无]
yalign- 存储杂项的Y对齐位置，或NULL。[输出][允许-无]
另请参见
GtkMisc


------------ KeyGTK3gtk_misc_get_padding ----

gtk_misc_get_padding
获取小组件的 X 和 Y 方向中的填充。请参见gtk_misc_set_padding（）。
语法
参数
misc- 一GtkMisc
xpad- 在 Xdirection 中存储填充的位置，或 NULL。[输出][允许-无]
ypad- 在 Y 方向中存储填充的位置，或 NULL。[输出][允许-无][br \=“”
另请参见
GtkMisc


------------ KeyGTK3gtk_misc_set_alignment ----

gtk_misc_set_alignment
设置微件的对齐方式。
语法
参数
misc- 一个.GtkMisc
xalign- 水平对齐，从0（左）到1（右）。
yalign- 垂直对齐，从 0（顶部）到 1（底部）。
另请参见
GtkMisc


------------ KeyGTK3gtk_misc_set_padding ----

gtk_misc_set_padding
设置要在微件周围添加的空间量。
语法
参数
misc- 一个.GtkMisc
xpad- 在小部件的左侧和右侧添加的空间量，以像素为单位。
ypad- 在小部件的顶部和底部添加的空间量，以像素为单位。
另请参见
GtkMisc


------------ KeyGTK3gtk_mount_operation_get_parent ----

gtk_mount_operation_get_parent
获取GtkMountOperation
语法
参数
op- 一GtkMountOperation
返回
op 所示窗口的瞬态父级。
自 2.14 起
另请参见
gtk3-Filesystem-utilities


------------ KeyGTK3gtk_mount_operation_get_screen ----

gtk_mount_operation_get_screen
获取将在其上显示 的窗口的屏幕。GtkMountOperation
语法
参数
op- 一GtkMountOperation
返回
显示欧帕雷窗口的屏幕。[无转移]
自 2.14 起
另请参见
gtk3-Filesystem-utilities


------------ KeyGTK3gtk_mount_operation_is_showing ----

gtk_mount_operation_is_showing
返回 当前是否正在显示一个窗口。GtkMountOperation
语法
参数
op- 一GtkMountOperation
返回
如果 opis 当前显示窗口，则为 TRUE
自 2.14 起
另请参见
gtk3-Filesystem-utilities


------------ KeyGTK3gtk_mount_operation_new ----

gtk_mount_operation_new
创建新的GtkMountOperation
语法
参数
parent- 窗口的瞬态父级，或 NULL。[允许-无]
返回
一个新的GtkMountOperation
自 2.14 起
另请参见
gtk3-Filesystem-utilities


------------ KeyGTK3gtk_mount_operation_set_parent ----

gtk_mount_operation_set_parent
设置 由 显示的窗口的瞬态父级。GtkMountOperation
语法
参数
op- 一GtkMountOperation
parent- 窗口的瞬态父级，或 NULL。[允许-无]
自 2.14 起
另请参见
gtk3-Filesystem-utilities


------------ KeyGTK3gtk_mount_operation_set_screen ----

gtk_mount_operation_set_screen
将屏幕设置为显示开的窗口。GtkMountOperation
语法
参数
op- 一GtkMountOperation
screen- 一GdkScreen
自 2.14 起
另请参见
gtk3-Filesystem-utilities


------------ KeyGTK3gtk_notebook_append_page ----

gtk_notebook_append_page
将页面追加到笔记本。
语法
参数
notebook- 一GtkNotebook
child- 用作页面内容GtkWidget
tab_label- 将用作页面的标签，或 NULL 使用默认标签 ？page N。）。[允许-无]GtkWidget
返回
笔记本中追加页面的索引（从 0 开始），如果函数失败，则为 -1
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_append_page_menu ----

gtk_notebook_append_page_menu
将页面追加到笔记本，指定要用作弹出菜单中的标签的小组件。
语法
参数
notebook- 一GtkNotebook
child- 用作页面内容GtkWidget
tab_label- 将用作页面的标签，或 NULL 使用默认标签 ？page N。）。[允许-无]GtkWidget
menu_label- 用作页面切换菜单标签的小部件（如果已启用）。如果 NULL，并且tab_labelis或 NULL，则菜单标签将是新创建的标签，其文本与tab_label相同;如果 tab_labelis 不是 ，menu_labelmust使用页面切换菜单时指定。[允许-无]GtkLabelGtkLabel
返回
笔记本中追加页面的索引（从 0 开始），如果函数失败，则为 -1
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_get_action_widget ----

gtk_notebook_get_action_widget
获取其中一个操作构件。请参见 gtk_notebook_set_action_widget（）。
语法
参数
notebook- 一GtkNotebook
pack_type- 要接收的动作小部件的包类型
返回
当尚未设置此操作构件时，具有给定pack_typeor的动作构件为 NULL。[无转移]
自 2.2 起
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_get_current_page ----

gtk_notebook_get_current_page
返回当前页的页码。
语法
参数
notebook- 一GtkNotebook
返回
笔记本中当前页的索引（从 0 开始）。如果笔记本没有页面，则将返回 -1。
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_get_group_name ----

gtk_notebook_get_group_name
获取笔记本的当前组名。
语法
参数
notebook- 一GtkNotebook
返回
组名，如果未设置，则为 NULL。[无转移]
自 2.24 起
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_get_menu_label ----

gtk_notebook_get_menu_label
检索包含子项的页面的菜单标签构件。
语法
参数
notebook- 一GtkNotebook
child- 笔记本页面中包含的小部件
返回
菜单标签，如果 thenotebook 页面没有除默认（选项卡标签）以外的菜单标签，则为 NULL。[无转移]
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_get_menu_label_text ----

gtk_notebook_get_menu_label_text
检索包含子项的页面的菜单标签文本。
语法
参数
notebook- 一GtkNotebook
child- 笔记本页面的子小部件。
返回
选项卡标签的文本，如果小关节没有默认菜单标签以外的菜单标签，或者菜单标签微件不是 .该字符串归小部件所有，不得释放。GtkLabel
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_get_nth_page ----

gtk_notebook_get_nth_page
返回页码 page_num 中包含的子构件。
语法
参数
notebook- 一GtkNotebook
page_num- 笔记本中页面的索引，或 -1 获取最后一页
返回
子小部件或 NULLif page_numis超出界限。[无转移]
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_get_n_pages ----

gtk_notebook_get_n_pages
获取笔记本中的页数。
语法
参数
notebook- 一GtkNotebook
返回
笔记本中的页数
自 2.2 起
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_get_scrollable ----

gtk_notebook_get_scrollable
返回选项卡标签区域是否具有用于滚动的箭头。请参见gtk_notebook_set_scrollable（）。
语法
参数
notebook- 一GtkNotebook
返回
如果存在用于滚动的箭头，则为 TRUE
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_get_show_border ----

gtk_notebook_get_show_border
返回是否在笔记本页面周围绘制斜角。请参见gtk_notebook_set_show_border（）。
语法
参数
notebook- 一GtkNotebook
返回
如果绘制斜角，则为 TRUE
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_get_show_tabs ----

gtk_notebook_get_show_tabs
返回是否显示笔记本的选项卡。请参见 gtk_notebook_set_show_tabs（）。
语法
参数
notebook- 一GtkNotebook
返回
如果显示选项卡，则为 TRUE
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_get_tab_detachable ----

gtk_notebook_get_tab_detachable
返回选项卡内容是否可以从笔记本中分离。
语法
参数
notebook- 一GtkNotebook
child- 一个孩子GtkWidget
返回
如果选项卡是可拆卸的，则为 TRUE。
自 2.10 起
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_get_tab_hborder ----

gtk_notebook_get_tab_hborder
gtk_notebook_get_tab_hborder自 3.4 版起已弃用，不应在新编写的代码中使用。此函数返回零返回制表符边框的水平宽度。
语法
参数
notebook- 一GtkNotebook
返回
制表符边框的水平宽度
2.22 起
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_get_tab_label ----

gtk_notebook_get_tab_label
返回页面子项的选项卡标签构件。如果子项不在笔记本中，或者如果没有专门为子项设置选项卡标签，则返回 NULL。
语法
参数
notebook- 一GtkNotebook
child- 页面
返回
选项卡标签。[无转移]
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_get_tab_label_text ----

gtk_notebook_get_tab_label_text
检索包含子项的页面的选项卡标签的文本。
语法
参数
notebook- 一GtkNotebook
child- 笔记本页面中包含的小部件
返回
选项卡标签的文本，如果选项卡标签微件不是 ，则为 NULL。该字符串归小部件所有，不得释放。GtkLabel
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_get_tab_pos ----

gtk_notebook_get_tab_pos
获取在 thenotebook 中用于切换页面的选项卡绘制的边缘。
语法
参数
notebook- 一GtkNotebook
返回
绘制选项卡的边缘
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_get_tab_reorderable ----

gtk_notebook_get_tab_reorderable
获取是否可以通过拖放对选项卡进行重新排序。
语法
参数
notebook- 一GtkNotebook
child- 一个孩子GtkWidget
返回
如果选项卡可重新排序，则为 TRUE。
自 2.10 起
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_get_tab_vborder ----

gtk_notebook_get_tab_vborder
gtk_notebook_get_tab_vborder自 3.4 版起已弃用，不应在新编写的代码中使用。此函数返回零返回制表符边框的垂直宽度。
语法
参数
notebook- 一GtkNotebook
返回
制表符边框的垂直宽度
2.22 起
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_insert_page ----

gtk_notebook_insert_page
将页面插入笔记本的给定位置。
语法
参数
notebook- 一GtkNotebook
child- 用作页面内容GtkWidget
tab_label- 将用作页面的标签，或 NULL 使用默认标签 ？page N。）。[允许-无]GtkWidget
position- 用于插入页面的索引（从 0 开始），或 -1 用于将页面追加到所有其他页面之后
返回
笔记本中插入页面的索引（从 0 开始），如果功能失败，则为 -1
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_insert_page_menu ----

gtk_notebook_insert_page_menu
将页面插入笔记本的给定位置，指定要用作弹出菜单中标签的小部件。
语法
参数
notebook- 一GtkNotebook
child- 用作页面内容GtkWidget
tab_label- 将用作页面的标签，或 NULL 使用默认标签 ？page N。）。[允许-无]GtkWidget
menu_label- 用作页面切换菜单标签的小部件（如果已启用）。如果 NULL，并且tab_labelis或 NULL，则菜单标签将是新创建的标签，其文本与tab_label相同;如果 tab_labelis 不是 ，menu_labelmust使用页面切换菜单时指定。[允许-无]GtkLabelGtkLabel
position- 要插入页面的索引（从 0 开始），或 -1 用于将页面附加到所有其他页面之后。
返回
笔记本中插入页面的索引（从 0 开始）
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_new ----

gtk_notebook_new
创建一个没有页面的新构件。GtkNotebook
返回
新创建的GtkNotebook
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_next_page ----

gtk_notebook_next_page
切换到下一页。如果当前页是最后一页，则不会发生任何反应。
语法
参数
notebook- 一GtkNotebook
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_page_num ----

gtk_notebook_page_num
查找包含给定子小道的页面的索引。
语法
参数
notebook- 一GtkNotebook
child- 一GtkWidget
返回
包含子项的页面的索引，如果子项不在笔记本中，则为-1
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_popup_disable ----

gtk_notebook_popup_disable
禁用弹出菜单。
语法
参数
notebook- 一GtkNotebook
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_popup_enable ----

gtk_notebook_popup_enable
启用弹出菜单：如果用户单击选项卡标签上的右鼠标按钮，则会弹出一个包含所有页面的菜单。
语法
参数
notebook- 一GtkNotebook
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_prepend_page ----

gtk_notebook_prepend_page
将页面预置到笔记本。
语法
参数
notebook- 一GtkNotebook
child- 用作页面内容GtkWidget
tab_label- 将用作页面的标签，或 NULL 使用默认标签 ？page N。）。[允许-无]GtkWidget
返回
笔记本中前置页的索引（从 0 开始），如果函数失败，则为 -1
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_prepend_page_menu ----

gtk_notebook_prepend_page_menu
将页面预置到笔记本，指定要用作弹出式菜单中的标签的小组件。
语法
参数
notebook- 一GtkNotebook
child- 用作页面内容GtkWidget
tab_label- 将用作页面的标签，或 NULL 使用默认标签 ？page N。）。[允许-无]GtkWidget
menu_label- 用作页面切换菜单标签的小部件（如果已启用）。如果 NULL，并且tab_labelis或 NULL，则菜单标签将是新创建的标签，其文本与tab_label相同;如果 tab_labelis 不是 ，menu_labelmust使用页面切换菜单时指定。[允许-无]GtkLabelGtkLabel
返回
笔记本中前置页的索引（从 0 开始），如果函数失败，则为 -1
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_prev_page ----

gtk_notebook_prev_page
切换到上一页。如果当前页面是第一页，则不会发生任何反应。
语法
参数
notebook- 一GtkNotebook
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_remove_page ----

gtk_notebook_remove_page
从笔记本中删除页面，给定其索引在笔记本中。
语法
参数
notebook- 一GtkNotebook
page_num- 笔记本页面的索引，从 0 开始。如果为 -1，则将删除最后一页。
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_reorder_child ----

gtk_notebook_reorder_child
对包含子级的页面重新排序，使其显示在位置位置。如果位置大于或等于列表中的子项数或为负数，则子项将被移动到列表的末尾。
语法
参数
notebook- 一GtkNotebook
child- 孩子移动
position- 新位置，或 -1 移动到末尾
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_set_action_widget ----

gtk_notebook_set_action_widget
将小部件设置为操作小部件之一。根据包装类型，小部件将被放置在选项卡之前或之后。如果您需要在同一侧打包多个小部件，则可以使用a。请注意，操作小部件是“内部的”笔记本的子项，因此不包括在从 gtk_container_foreach（） 返回的列表中。GtkBox
语法
参数
notebook- 一GtkNotebook
widget- 一GtkWidget
pack_type- 动作小部件的包类型
自 2.20 起
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_set_current_page ----

gtk_notebook_set_current_page
切换到页码page_num。请注意，由于历史原因，GtkNotebook拒绝切换到页面，除非子小部件可见。因此，建议在将子小部件添加到笔记本之前显示它们。
语法
参数
notebook- 一GtkNotebook
page_num- 要切换到的页面的索引，从 0 开始。如果为负，则将使用最后一页。如果大于笔记本中的页数，则不会执行任何操作。
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_set_group_name ----

gtk_notebook_set_group_name
设置笔记本的组名。具有相同名称的笔记本将能够通过拖放进行选项卡交换。具有 NULL 组名的笔记本将无法与任何其他笔记本交换选项卡。
语法
参数
notebook- 一GtkNotebook
group_name- 笔记本组的名称，或 NULL 将其取消设置。[允许-无]
自 2.24 起
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_set_menu_label ----

gtk_notebook_set_menu_label
更改包含子项的页面的菜单标签。
语法
参数
notebook- 一GtkNotebook
child- 子小部件
menu_label- 菜单标签，或 NULL 表示默认值。[允许-无]
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_set_menu_label_text ----

gtk_notebook_set_menu_label_text
创建一个新标签并将其设置为子标签的菜单标签。
语法
参数
notebook- 一GtkNotebook
child- 子小部件
menu_text- 标签文本
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_set_scrollable ----

gtk_notebook_set_scrollable
设置选项卡标签区域是否具有箭头，以便在该区域中包含太多选项卡时进行滚动。
语法
参数
notebook- 一GtkNotebook
scrollable- 如果应添加滚动箭头，则为 TRUE
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_set_show_border ----

gtk_notebook_set_show_border
设置是否在笔记本页面周围绘制斜角。这仅在选项卡未显示时才具有视觉效果。请参见 gtk_notebook_set_show_tabs（）。
语法
参数
notebook- 一GtkNotebook
show_border- 如果应在笔记本周围绘制斜角，则为 TRUE
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_set_show_tabs ----

gtk_notebook_set_show_tabs
设置是否显示笔记本的选项卡。
语法
参数
notebook- 一GtkNotebook
show_tabs- 如果应显示选项卡，则为 TRUE
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_set_tab_detachable ----

gtk_notebook_set_tab_detachable
设置选项卡是否可以从笔记本分离到另一个笔记本或小组件。请注意，2 个笔记本必须共享一个公共组标识器（请参阅gtk_notebook_set_group_name（）））以允许它们之间的自动选项卡交换。如果您希望小部件通过DnD与笔记本交互（即：接受从中拖动的选项卡），则必须将其设置为拖放并接受目标？GTK_NOTEBOOK_TAB？.笔记本将用指向与掉落选项卡相对应的子小摆的 GtkWidget** 填充选择。 123456789101112131415161718192021[/语法] [语法] [语法]静态on_drag_data_received （GtkWidget *widget， GdkDragContext *context， gint x， gint y， GtkSelectionData *data， guint info， guint time， gpointer user_data）{ GtkWidget *notebook;GtkWidget **child;Gtk集装箱 *容器;笔记本 = gtk_drag_get_source_widget（上下文）;子项 = （*） gtk_selection_data_get_data （数据）;process_widget（*儿童）;容器 = GTK_CONTAINER（笔记本）;gtk_container_remove（容器，*子级）;}[/语法]
如果您希望笔记本接受来自其他小部件的拖动，则必须设置自己的DnD代码才能执行此操作。voidvoid
语法
参数
notebook- 一GtkNotebook
child- 一个孩子GtkWidget
detachable- 标签是否可拆卸
自 2.10 起
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_set_tab_label ----

gtk_notebook_set_tab_label
更改子项的选项卡标签。如果为tab_label指定 NULL，则页面将带有标签 “page N”。。
语法
参数
notebook- 一GtkNotebook
child- 页面
tab_label- 要使用的选项卡标签小部件，或 NULL 默认选项卡标签。[允许-无]
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_set_tab_label_text ----

gtk_notebook_set_tab_label_text
创建一个新标签，并将其设置为包含页面的子级的选项卡标签。
语法
参数
notebook- 一GtkNotebook
child- 页面
tab_text- 标签文本
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_set_tab_pos ----

gtk_notebook_set_tab_pos
设置在 thenotebook 中用于切换页面的选项卡的绘制边缘。
语法
参数
notebook- 一个.GtkNotebook
pos- 绘制标签的边缘
另请参见
GtkNotebook


------------ KeyGTK3gtk_notebook_set_tab_reorderable ----

gtk_notebook_set_tab_reorderable
设置是否可以通过拖放对笔记本选项卡进行重新排序。
语法
参数
notebook- 一GtkNotebook
child- 一个孩子GtkWidget
reorderable- 选项卡是否可重新排序
自 2.10 起
另请参见
GtkNotebook


------------ KeyGTK3gtk_numerable_icon_get_background_gicon ----

gtk_numerable_icon_get_background_gicon
gtk_numerable_icon_get_background_gicon自版本 3.14 起已弃用，不应在新编写的代码中使用。返回设置为基本背景图像的 ，如果没有，则返回 NULL。此函数的调用方不拥有对返回的 的引用。GIconGIcon
语法
参数
self- 一GtkNumerableIcon
返回
a 或空。[无转移]GIcon
自 3.0 起
另请参见
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_get_background_icon_name ----

gtk_numerable_icon_get_background_icon_name
gtk_numerable_icon_get_background_icon_name自版本 3.14 起已弃用，不应在新编写的代码中使用。返回用作基本背景图像的图标名称，如果没有，则返回 NULL。
语法
参数
self- 一GtkNumerableIcon
返回
图标名称，或 NULL
自 3.0 起
另请参见
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_get_count ----

gtk_numerable_icon_get_count
gtk_numerable_icon_get_count自版本 3.14 起已弃用，不应在新编写的代码中使用。返回 self 当前显示的值。
语法
参数
self- 一GtkNumerableIcon
返回
当前显示的值
自 3.0 起
另请参见
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_get_label ----

gtk_numerable_icon_get_label
gtk_numerable_icon_get_label自版本 3.14 起已弃用，不应在新编写的代码中使用。返回图标当前显示的标签，或 NULL。
语法
参数
self- 一GtkNumerableIcon
返回
当前显示的标签
自 3.0 起
另请参见
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_get_style_context ----

gtk_numerable_icon_get_style_context
gtk_numerable_icon_get_style_context自版本 3.14 起已弃用，不应在新编写的代码中使用。返回图标用于主题设置的 ，如果没有，则返回 NULL。GtkStyleContext
语法
参数
self- 一GtkNumerableIcon
返回
a 或空。此对象是 GTK+ 的内部对象，不应取消引用。如果你想保留它，请使用 g_object_ref（）。[无转移]GtkStyleContext
自 3.0 起
另请参见
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_new ----

gtk_numerable_icon_new
gtk_numerable_icon_new自版本 3.14 起已弃用，不应在新编写的代码中使用。创建新的非主题 .GtkNumerableIcon
语法
参数
base_icon- a 叠加GIcon
返回
一个新的.[转移完整]GIcon
自 3.0 起
另请参见
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_new_with_style_context ----

gtk_numerable_icon_new_with_style_context
gtk_numerable_icon_new_with_style_context自版本 3.14 起已弃用，不应在新编写的代码中使用。创建一个新的，它将根据通过的 .这是一个方便的构造，在内部调用gtk_numerable_icon_set_style_context（）。GtkNumerableIconGtkStyleContext
语法
参数
base_icon- a 叠加GIcon
context- 一GtkStyleContext
返回
一个新的.[转移完整]GIcon
自 3.0 起
另请参见
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_set_background_gicon ----

gtk_numerable_icon_set_background_gicon
gtk_numerable_icon_set_background_gicon自版本 3.14 起已弃用，不应在新编写的代码中使用。更新图标以使用图标作为基本背景图像。如果图标为 NULL，则 self 将使用样式信息或其背景图像的默认主题返回。如果调用此方法并且已经将图标名称设置为图标的后台，则将使用图标，即在gtk_numerable_icon_set_background_gicon（） andgtk_numerable_icon_set_background_icon_name（） 之间调用的最后一个方法始终具有优先级。
语法
参数
self- 一GtkNumerableIcon
icon- a 或 NULL。[允许-无]GIcon
自 3.0 起
另请参见
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_set_background_icon_name ----

gtk_numerable_icon_set_background_icon_name
gtk_numerable_icon_set_background_icon_name自版本 3.14 起已弃用，不应在新编写的代码中使用。更新图标以使用当前图标主题中名为 icon_name 的图标作为基本背景图像。如果icon_nameis NULL，则 self 将使用样式信息或默认主题作为其背景图像返回。如果调用此方法并且已经为图标设置了 background，则将使用icon_name，即在 gtk_numerable_icon_set_background_icon_name（） 和 gtk_numerable_icon_set_background_gicon（） 之间调用的最后一个方法始终具有优先级。GIcon
语法
参数
self- 一GtkNumerableIcon
icon_name- 图标名称，或 NULL。[允许-无]
自 3.0 起
另请参见
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_set_count ----

gtk_numerable_icon_set_count
gtk_numerable_icon_set_count自版本 3.14 起已弃用，不应在新编写的代码中使用。将当前显示的 self 值设置为计数。数值总是被钳制为两位数，即在-99和99之间。如果计数设置为零，则会删除徽章。如果调用此方法，并且已经在图标上设置了标签，则在呈现数字之前将自动重置为NULL，即在gtk_numerable_icon_set_count（）和gtk_numerable_icon_set_label（）之间调用的最后一个方法始终具有优先级。
语法
参数
self- 一GtkNumerableIcon
count- 一个介于 -99 和 99 之间的数字
自 3.0 起
另请参见
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_set_label ----

gtk_numerable_icon_set_label
gtk_numerable_icon_set_label自版本 3.14 起已弃用，不应在新编写的代码中使用。将当前显示的 self 值设置为 stringin 标签。设置空标签会删除徽章。请注意，这是为了显示短标签，如数字或单个字母。对于罗马数字，请考虑使用 Unicode 字符 U+2160 - U+217F。长度超过两个字符的字符串可能无法很好地呈现。如果调用此方法，并且已经在图标上设置了一个数字，则在呈现标签之前，它将自动重置为零，即最后一个称为betweengtk_numerable_icon_set_label（）和gtk_numerable_icon_set_count（）的方法始终具有优先级。
语法
参数
self- 一GtkNumerableIcon
label- 一个短标签，或 NULL。[允许-无]
自 3.0 起
另请参见
GtkNumerableIcon


------------ KeyGTK3gtk_numerable_icon_set_style_context ----

gtk_numerable_icon_set_style_context
gtk_numerable_icon_set_style_context自版本 3.14 起已弃用，不应在新编写的代码中使用。更新图标以从中获取主题信息。GtkStyleContext
语法
参数
self- 一GtkNumerableIcon
style- 一GtkStyleContext
自 3.
另请参见
GtkNumerableIcon


------------ KeyGTK3gtk_offscreen_window_get_pixbuf ----

gtk_offscreen_window_get_pixbuf
以 a 的形式检索所包含构件的快照。这是一个新的像素buf，引用计数为1，一旦不再需要它，应用程序应该取消引用它。GdkPixbuf
语法
参数
offscreen- 包含的小部件。GtkOffscreenWindow
返回
指针或 NULL。[转移完整]GdkPixbuf
自 2.2 起
另请参见
GtkOffscreenWindow


------------ KeyGTK3gtk_offscreen_window_get_surface ----

gtk_offscreen_window_get_surface
以 a 的形式检索所包含构件的快照。如果您需要在窗口大小上保留它，那么您应该添加对它的引用。cairo_surface_t
语法
参数
offscreen- 包含的小部件。GtkOffscreenWindow
返回
指向屏幕外表面的指针，或 NULL。[无转移]cairo_surface_t
自 2.20 起
另请参见
GtkOffscreenWindow


------------ KeyGTK3gtk_offscreen_window_new ----

gtk_offscreen_window_new
创建一个顶级容器小部件，该小部件用于检索小部件的快照，而不在屏幕上显示它们。
返回
指向GtkWidget
自 2.20 起
另请参见
GtkOffscreenWindow


------------ KeyGTK3gtk_orientable_get_orientation ----

gtk_orientable_get_orientation
检索可定向对象的方向。
语法
参数
orientable- 一GtkOrientable
返回
可定向的方向。
2.16 起
另请参见
gtk3-Orientable


------------ KeyGTK3gtk_orientable_set_orientation ----

gtk_orientable_set_orientation
设置可定向对象的方向。
语法
参数
orientable- 一GtkOrientable
orientation- 可定向的新方向。
自 2.1 起
另请参见
gtk3-Orientable


------------ KeyGTK3gtk_overlay_add_overlay ----

gtk_overlay_add_overlay
将微件添加到叠加层。小部件将堆叠在主小部件的顶部，并添加gtk_container_add（）。放置微件的位置由其和属性确定。?halign??valign?
语法
参数
overlay- 一GtkOverlay
widget- a 添加到容器中GtkWidget
自 3.
另请参见
GtkOverlay


------------ KeyGTK3gtk_overlay_new ----

gtk_overlay_new
创建新的 .GtkOverlay
返回
一个新对象。GtkOverlay
自 3.2 起
另请参见
GtkOverlay


------------ KeyGTK3gtk_page_setup_copy ----

gtk_page_setup_copy
复制 .GtkPageSetup
语法
参数
other- 要复制GtkPageSetup
返回
其他的副本。[转移完整]
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_bottom_margin ----

gtk_page_setup_get_bottom_margin
获取下边距（以单位为单位）。
语法
参数
setup- 一GtkPageSetup
unit- 返回值的单位
返回
下边距
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_left_margin ----

gtk_page_setup_get_left_margin
获取左边距（以单位为单位）。
语法
参数
setup- 一GtkPageSetup
unit- 返回值的单位
返回
左边距
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_orientation ----

gtk_page_setup_get_orientation
获取 的页面方向。GtkPageSetup
语法
参数
setup- 一GtkPageSetup
返回
页面方向
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_page_height ----

gtk_page_setup_get_page_height
以单位返回页面高度。请注意，此函数会考虑方向和边缘。请参见gtk_page_setup_get_paper_height（）。
语法
参数
setup- 一GtkPageSetup
unit- 返回值的单位
返回
页面高度。
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_page_width ----

gtk_page_setup_get_page_width
以单位返回页面宽度。请注意，此函数会考虑方向和边缘。请参见 gtk_page_setup_get_paper_width（）。
语法
参数
setup- 一GtkPageSetup
unit- 返回值的单位
返回
页面宽度。
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_paper_height ----

gtk_page_setup_get_paper_height
以单位返回纸张高度。请注意，此函数会考虑方向，但不考虑边距。请参见gtk_page_setup_get_page_height（）。
语法
参数
setup- 一GtkPageSetup
unit- 返回值的单位
返回
纸张高度。
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_paper_size ----

gtk_page_setup_get_paper_size
获取 的纸张大小。GtkPageSetup
语法
参数
setup- 一GtkPageSetup
返回
纸张大小
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_paper_width ----

gtk_page_setup_get_paper_width
以单位为单位返回纸张宽度。请注意，此函数会考虑方向，但不考虑边距。请参见 gtk_page_setup_get_page_width（）。
语法
参数
setup- 一GtkPageSetup
unit- 返回值的单位
返回
纸张宽度。
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_right_margin ----

gtk_page_setup_get_right_margin
以单位为单位获取右边距。
语法
参数
setup- 一GtkPageSetup
unit- 返回值的单位
返回
右边距
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_get_top_margin ----

gtk_page_setup_get_top_margin
获取上边距（以单位为单位）。
语法
参数
setup- 一GtkPageSetup
unit- 返回值的单位
返回
上边距
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_load_file ----

gtk_page_setup_load_file
从文件file_name读取页面设置。请参见gtk_page_setup_to_file（）。
语法
参数
setup- 一GtkPageSetup
file_name- 从中读取页面设置的文件名。[类型文件名]
error- 返回错误的位置，或 NULL。[允许-无]
返回
成功时真
自 2.14 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_load__file ----

gtk_page_setup_load_key_file
gtk_page_setup_load_key_file?()
从组group_name键filekey_file中读取页面设置。
语法
参数
setup- 一GtkPageSetup
key_file- 从中检索page_setupGKeyFile
group_name- 要读取的组中key_file的名称，还是 NULL 要使用默认名称 ？页面设置？.[允许-无]
error- 返回错误的位置，或 NULL。[允许-无]
返回
成功时真
自 2.14 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_new ----

gtk_page_setup_new
创建新的 .GtkPageSetup
返回
一个新的.GtkPageSetup
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_new_from_file ----

gtk_page_setup_new_from_file
从文件file_name读取页面设置。返回具有还原的页面设置的新对象，如果发生错误，则返回 NULL。请参见gtk_page_setup_to_file（）。GtkPageSetup
语法
参数
file_name- 从中读取页面设置的文件名。[类型文件名]
error- 返回错误的位置，或 NULL。[允许-无]
返回
已恢复GtkPageSetup
自 2.12 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_new_from__file ----

gtk_page_setup_new_from_key_file
gtk_page_setup_new_from_key_file?()
从组group_name键filekey_file中读取页面设置。返回具有还原页设置的新对象，如果发生错误，则返回 NULL。GtkPageSetup
语法
参数
key_file- 从中检索page_setupGKeyFile
group_name- 要读取的组中key_file的名称，还是 NULL 要使用默认名称 ？页面设置？.[允许-无]
error- 返回错误的位置，或 NULL。[允许-无]
返回
已恢复GtkPageSetup
自 2.12 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_set_bottom_margin ----

gtk_page_setup_set_bottom_margin
设置 的下边距。GtkPageSetup
语法
参数
setup- 一GtkPageSetup
margin- 以单位为单位的新下边距
unit- 保证金单位
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_set_left_margin ----

gtk_page_setup_set_left_margin
设置 的左边距。GtkPageSetup
语法
参数
setup- 一GtkPageSetup
margin- 以单位为单位的新左边距
unit- 保证金单位
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_set_orientation ----

gtk_page_setup_set_orientation
设置 的页面方向。GtkPageSetup
语法
参数
setup- 一GtkPageSetup
orientation- 一个值GtkPageOrientation
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_set_paper_size ----

gtk_page_setup_set_paper_size
设置 的纸张大小而不更改页边距。请参见 gtk_page_setup_set_paper_size_and_default_margins（）。GtkPageSetup
语法
参数
setup- 一GtkPageSetup
size- 一GtkPaperSize
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_set_paper_size_and_default_margins ----

gtk_page_setup_set_paper_size_and_default_margins
设置 的纸张大小，并根据新的纸张大小修改边距。GtkPageSetup
语法
参数
setup- 一GtkPageSetup
size- 一GtkPaperSize
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_set_right_margin ----

gtk_page_setup_set_right_margin
设置 的右边距。GtkPageSetup
语法
参数
setup- 一GtkPageSetup
margin- 以单位为单位的新右边距
unit- 保证金单位
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_set_top_margin ----

gtk_page_setup_set_top_margin
设置 的上边距。GtkPageSetup
语法
参数
setup- 一GtkPageSetup
margin- 以单位为单位的新上边距
unit- 保证金单位
自 2.10 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_to_file ----

gtk_page_setup_to_file
此功能将设置中的信息保存到file_name。
语法
参数
setup- 一GtkPageSetup
file_name- 要保存到的文件。[类型文件名]
error- 返回错误的位置，或 NULL。[允许-无]
返回
成功时真
自 2.12 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_to__file ----

gtk_page_setup_to_key_file
gtk_page_setup_to_key_file?()
此功能将页面设置从设置添加到key_file。
语法
参数
setup- 一GtkPageSetup
key_file- 将页面设置保存到GKeyFile
group_name- 要在key_file中添加设置的组，或使用默认名称的 NULL ？页面设置？
自 2.1 起
另请参见
GtkPageSetup


------------ KeyGTK3gtk_page_setup_unix_dialog_get_page_setup ----

gtk_page_setup_unix_dialog_get_page_setup
从对话框中获取当前选定的页面设置。
语法
参数
dialog- 一GtkPageSetupUnixDialog
返回
当前页面设置。[无转移]
自 2.10 起
另请参见
GtkPageSetupUnixDialog


------------ KeyGTK3gtk_page_setup_unix_dialog_get_print_settings ----

gtk_page_setup_unix_dialog_get_print_settings
从对话框中获取当前打印设置。
语法
参数
dialog- 一GtkPageSetupUnixDialog
返回
当前打印设置。[无转移]
自 2.1 起
另请参见
GtkPageSetupUnixDialog


------------ KeyGTK3gtk_page_setup_unix_dialog_new ----

gtk_page_setup_unix_dialog_new
创建新的页面设置对话框。
语法
参数
title- 对话框的标题，或 NULL。[允许-无]
parent- 对话框的瞬态父级，或 NULL。[允许-无]
返回
新的GtkPageSetupUnixDialog
自 2.10 起
另请参见
GtkPageSetupUnixDialog


------------ KeyGTK3gtk_page_setup_unix_dialog_set_page_setup ----

gtk_page_setup_unix_dialog_set_page_setup
设置页面设置对话框从中获取其值的 。GtkPageSetup
语法
参数
dialog- 一GtkPageSetupUnixDialog
page_setup- 一GtkPageSetup
自 2.10 起
另请参见
GtkPageSetupUnixDialog


------------ KeyGTK3gtk_page_setup_unix_dialog_set_print_settings ----

gtk_page_setup_unix_dialog_set_print_settings
设置页面设置对话框从中获取其值的 。GtkPrintSettings
语法
参数
dialog- 一GtkPageSetupUnixDialog
print_settings- 一GtkPrintSettings
自 2.10 起
另请参见
GtkPageSetupUnixDialog


------------ KeyGTK3gtk_paint_arrow ----

gtk_paint_arrow
gtk_paint_arrow自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_render_arrow（） 代替使用给定参数在 cr 上的给定矩形中绘制箭头。arrow_type确定箭头的方向。
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
shadow_type- 要绘制的阴影类型
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
arrow_type- 要绘制的箭头类型
fill- 如果箭头尖端应填充，则为 TRUE
x- 矩形的x原点，用于绘制箭头
y- y 矩形的原点，用于绘制箭头
width- 矩形的宽度，以绘制箭头
height- 矩形的高度，以绘制箭头
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_box ----

gtk_paint_box
gtk_paint_box自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_render_frame（） 和 gtk_render_background（） 代替使用给定参数在 cr 上绘制一个框。
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
shadow_type- 要绘制的阴影类型
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
x- x 盒子的起源
y- y 盒子的起源
width- 盒子的宽度
height- 盒子的高度
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_box_gap ----

gtk_paint_box_gap
gtk_paint_box_gap自 3.0 版起已弃用，不应在新编写的代码中使用。使用gtk_render_frame_gap（） 代替使用给定的样式、状态和阴影类型在 cr 中绘制一个框，在一侧留下一个间隙。
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
shadow_type- 要绘制的阴影类型
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
x- x 矩形的原点
y- y 矩形的原点
width- 矩形的宽度
height- 矩形的宽度
gap_side- 离开间隙的一面
gap_x- 间隙的起始位置
gap_width- 间隙宽度
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_check ----

gtk_paint_check
gtk_paint_check自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_render_check（） 代替使用给定参数在 cr 上的给定矩形中绘制检查按钮指示器。
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
shadow_type- 要绘制的阴影类型
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
x- x矩形的原点，用于绘制签入
y- 用于绘制签入的矩形的 y 原点
width- 用于绘制签入的矩形的宽度
height- 用于绘制签入的矩形的高度
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_diamond ----

gtk_paint_diamond
gtk_paint_diamond自 3.0 版起已弃用，不应在新编写的代码中使用。使用 cairo 代替使用给定参数在窗口的给定矩形中绘制菱形。
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
shadow_type- 要绘制的阴影类型
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
x- x矩形的原点，用于绘制钻石
y- y 矩形的原点，用于绘制钻石
width- 矩形的宽度，以绘制钻石
height- 矩形的高度，以绘制钻石
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_expander ----

gtk_paint_expander
gtk_paint_expander自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_render_expander（） 代替绘制扩展器，如 中所用。x 和 y 指定扩展器的中心。膨胀器的大小由“膨胀器大小”决定。小部件的样式属性。（如果未指定小部件或没有 “expander-size” 属性，则将使用未指定的默认大小，因为调用方没有足够的信息来定位扩展器，这可能没有用。扩展器在折叠位置的高expander_size个像素，在展开位置expander_size个像素宽。GtkTreeView
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
x- 绘制扩展器的 x 位置
y- 绘制扩展器的 y 位置
expander_style- 绘制扩展器的样式;确定扩展器是折叠、展开还是处于中间状态。
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_extension ----

gtk_paint_extension
gtk_paint_extension自 3.0 版起已弃用，不应在新编写的代码中使用。使用gtk_render_extension（） 代替绘制扩展，即笔记本选项卡。
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
shadow_type- 要绘制的阴影类型
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
x- 扩展的 x 原点
y- y 扩展的起源
width- 扩展的宽度
height- 扩展的宽度
gap_side- 延伸部分附着的一侧
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_flat_box ----

gtk_paint_flat_box
gtk_paint_flat_box自 3.0 版起已弃用，不应在新编写的代码中使用。使用gtk_render_frame（） 和 gtk_render_background（） 代替使用给定参数在 cr 上绘制一个平面框。
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
shadow_type- 要绘制的阴影类型
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
x- x 盒子的起源
y- y 盒子的起源
width- 盒子的宽度
height- 盒子的高度
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_focus ----

gtk_paint_focus
gtk_paint_focus自 3.0 版起已弃用，不应在新编写的代码中使用。使用gtk_render_focus（） 代替使用给定的样式在 cr 上的给定矩形周围绘制焦点指示器。
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
x- 矩形的 x 原点，在其周围绘制焦点指示器
y- 矩形的 y 原点，围绕该矩形绘制焦点指示器
width- 矩形的宽度，围绕该矩形绘制焦点指示器
height- 矩形的高度，围绕它绘制焦点指示器
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_handle ----

gtk_paint_handle
gtk_paint_handle自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_render_handle（） 代替绘制和 中使用的句柄。GtkHandleBoxGtkPaned
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
shadow_type- 要绘制的阴影类型
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
x- x 手柄的起源
y- y 手柄的起源
width- 带手柄
height- 手柄高度
orientation- 手柄的方向
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_hline ----

gtk_paint_hline
gtk_paint_hline自 3.0 版起已弃用，不应在新编写的代码中使用。使用gtk_render_line（） 代替绘制一条从 （x1， y） 到 （x2， y） 的水平线，以建立给定的样式和状态。
语法
参数
style- 一GtkStyle
cr- 一caio_t
state_type- 一种状态
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
x1- 起始 x 坐标
x2- 结束 x 坐标
y- y坐标
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_layout ----

gtk_paint_layout
gtk_paint_layout自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_render_layout（） 代替使用给定参数在 cr 上绘制布局。
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
use_text- 是否使用文本或前景图形上下文的样式
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
x- x 原点
y- y 起源
layout- 绘制的布局
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_option ----

gtk_paint_option
gtk_paint_option自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_render_option（） 代替使用给定参数在 cr 上的给定矩形中绘制单选按钮指示器。
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
shadow_type- 要绘制的阴影类型
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
x- x矩形的原点，用于绘制选项
y- y 矩形的原点，用于绘制选项
width- 用于绘制选项的矩形的宽度
height- 用于绘制选项的矩形的高度
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_resize_grip ----

gtk_paint_resize_grip
gtk_paint_resize_grip自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_render_handle（） 代替使用给定参数在 cr 上的给定矩形中绘制调整大小的夹点。
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
edge- 绘制调整大小手柄的边缘
x- 矩形的 x 原点，用于绘制调整大小的夹点
y- 要在其中绘制调整大小夹点的矩形的 y 原点
width- 用于绘制调整大小手柄的矩形的宽度
height- 用于绘制调整大小握把的矩形的高度
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_shadow ----

gtk_paint_shadow
gtk_paint_shadow自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_render_frame（） 代替在给定矩形周围绘制阴影，以形成给定样式、状态和阴影类型。
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
shadow_type- 要绘制的阴影类型
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
x- x 矩形的原点
y- y 矩形的原点
width- 矩形的宽度
height- 矩形的宽度
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_shadow_gap ----

gtk_paint_shadow_gap
gtk_paint_shadow_gap自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_render_frame_gap（） 代替在给定矩形周围绘制阴影，以对给定的样式、状态和阴影类型进行粗暴处理，在一侧留下 agap。
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
shadow_type- 要绘制的阴影类型
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
x- x 矩形的原点
y- y 矩形的原点
width- 矩形的宽度
height- 矩形的宽度
gap_side- 离开间隙的一面
gap_x- 间隙的起始位置
gap_width- 间隙宽度
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_slider ----

gtk_paint_slider
gtk_paint_slider自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_render_slider（） 代替使用给定的样式和方向在 cr 上绘制给定矩形中的滑块。
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
shadow_type- 影子
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
x- 要在其中绘制滑块的矩形的 x 原点
y- 要在其中绘制滑块的矩形的 y 原点
width- 用于绘制滑块的矩形的宽度
height- 用于绘制滑块的矩形的高度
orientation- 要使用的方向
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_spinner ----

gtk_paint_spinner
gtk_paint_spinner自 3.0 版起已弃用，不应在新编写的代码中使用。使用gtk_render_activity（） 代替使用给定参数在窗口上绘制微调器。
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
widget- 小部件（可能为空）。[允许-无]
detail- 样式详细信息（可能为空）。[允许-无]
step- 第n步
x- 用于绘制微调器的矩形的 x 原点
y- 用于绘制微调器的矩形的 y 原点
width- 用于绘制微调器的矩形的宽度
height- 用于绘制微调器的矩形的高度
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_tab ----

gtk_paint_tab
gtk_paint_tab自 3.0 版起已弃用，不应在新编写的代码中使用。使用 cairo 代替使用给定参数在 cr 上的给定矩形中绘制选项菜单选项卡（即向上和向下指向箭头）。
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
shadow_type- 要绘制的阴影类型
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
x- x矩形的原点，用于绘制选项卡
y- y 矩形的原点，用于绘制选项卡
width- 用于绘制选项卡的矩形的宽度
height- 用于绘制选项卡的矩形的高度
另请参见
GtkStyle


------------ KeyGTK3gtk_paint_vline ----

gtk_paint_vline
gtk_paint_vline自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_render_line（） 代替绘制一条垂直线从 （x， y1_） 到 （x， y2_）， 以建立给定的样式和状态。
语法
参数
style- 一GtkStyle
cr- 一cairo_t
state_type- 一种状态
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
y1_- 起始 y 坐标
y2_- 结束 y 坐标
x- x 坐标
另请参见
GtkStyle


------------ KeyGTK3gtk_paned_add1 ----

gtk_paned_add1
使用默认参数将子项添加到顶部或左侧窗格。这个等价togtk_paned_pack1（平移、子项、假、真）。
语法
参数
paned- 一个平移的小部件
child- 要添加的孩子
另请参见
GtkPaned


------------ KeyGTK3gtk_paned_add2 ----

gtk_paned_add2
使用默认参数将子项添加到底部或右侧窗格。这是等效的togtk_paned_pack2（平移，子级，TRUE，TRUE）。
语法
参数
paned- 一个平移的小部件
child- 要添加的孩子
另请参见
GtkPaned


------------ KeyGTK3gtk_paned_get_child1 ----

gtk_paned_get_child1
获取平移构件的第一个子级。
语法
参数
paned- 一个小部件GtkPaned
返回
第一个子项，如果未设置，则为 NULL。[无转移]
2.4 起
另请参见
GtkPaned


------------ KeyGTK3gtk_paned_get_child2 ----

gtk_paned_get_child2
获取已平移构件的第二个子级。
语法
参数
paned- 一个小部件GtkPaned
返回
第二个子项，如果未设置，则为 NULL。[无转移]
2.4 起
另请参见
GtkPaned


------------ KeyGTK3gtk_paned_get_handle_window ----

gtk_paned_get_handle_window
返回句柄的 。此函数在处理按钮或运动事件时很有用，因为它允许回调来区分平移的窗口、子窗口和句柄。GdkWindow
语法
参数
paned- 一GtkPaned
返回
平移的手柄窗口。[无转移]
自 2.2 起
另请参见
GtkPaned


------------ KeyGTK3gtk_paned_get_position ----

gtk_paned_get_position
获取两个窗格之间分隔线的位置。
语法
参数
paned- 一个小部件GtkPaned
返回
分频器的位置
另请参见
GtkPaned


------------ KeyGTK3gtk_paned_new ----

gtk_paned_new
创建新的构件。GtkPaned
语法
参数
orientation- 平底锅的方向。
返回
一个新的.GtkPaned
自 3.0 起
另请参见
GtkPaned


------------ KeyGTK3gtk_paned_pack1 ----

gtk_paned_pack1
将孩子添加到顶部或左侧窗格。
语法
参数
paned- 一个平移的小部件
child- 要添加的孩子
resize- 当平移的小部件调整大小时，这个子节点是否应该扩展。
shrink- 这个孩子可以比它的申请小吗？
另请参见
GtkPaned


------------ KeyGTK3gtk_paned_pack2 ----

gtk_paned_pack2
将子项添加到底部或右侧窗格。
语法
参数
paned- 一个平移的小部件
child- 要添加的孩子
resize- 当平移的小部件调整大小时，这个子节点是否应该扩展。
shrink- 这个孩子可以比它的申请小吗？
另请参见
GtkPaned


------------ KeyGTK3gtk_paned_set_position ----

gtk_paned_set_position
设置两个窗格之间分隔线的位置。
语法
参数
paned- 一个小部件GtkPaned
position- 分隔符的像素位置，负值表示该位置未设置。
另请参见
GtkPaned


------------ KeyGTK3gtk_paper_size_copy ----

gtk_paper_size_copy
复制现有 .GtkPaperSize
语法
参数
other- 一GtkPaperSize
返回
其他的副本
自 2.10 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_free ----

gtk_paper_size_free
释放给定的对象。GtkPaperSize
语法
参数
size- 一GtkPaperSize
自 2.10 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_default ----

gtk_paper_size_get_default
返回默认纸张大小的名称，这取决于当前区域设置。
返回
默认纸张大小的名称。该字符串归 GTK+ 所有，不应修改。
自 2.10 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_default_bottom_margin ----

gtk_paper_size_get_default_bottom_margin
Gets the default bottom margin for the GtkPaperSize.
Syntax
Parameters
size  -  	a GtkPaperSize object
unit  -  	the unit for the return value, not GTK_UNIT_NONE
Returns
the default bottom margin
Since 2.10
See Also
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_default_left_margin ----

gtk_paper_size_get_default_left_margin
获取 的默认左边距。GtkPaperSize
语法
参数
size- 一个对象GtkPaperSize
unit- 返回值的单位，而不是GTK_UNIT_NONE
返回
默认左边距
自 2.10 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_default_right_margin ----

gtk_paper_size_get_default_right_margin
获取 的默认右边距。GtkPaperSize
语法
参数
size- 一个对象GtkPaperSize
unit- 返回值的单位，而不是GTK_UNIT_NONE
返回
默认右边距
自 2.10 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_default_top_margin ----

gtk_paper_size_get_default_top_margin
获取 的默认上边距。GtkPaperSize
语法
参数
size- 一个对象GtkPaperSize
unit- 返回值的单位，而不是GTK_UNIT_NONE
返回
默认上边距
自 2.10 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_display_name ----

gtk_paper_size_get_display_name
获取 用户可读的 .GtkPaperSize
语法
参数
size- 一个对象GtkPaperSize
返回
大小的用户可读名称
自 2.10 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_height ----

gtk_paper_size_get_height
获取单位的 纸张高度， 单位的单位。GtkPaperSize
语法
参数
size- 一个对象GtkPaperSize
unit- 返回值的单位，而不是GTK_UNIT_NONE
返回
纸张高度
自 2.10 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_name ----

gtk_paper_size_get_name
获取 .GtkPaperSize
语法
参数
size- 一个对象GtkPaperSize
返回
大小的名称
自 2.10 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_paper_sizes ----

gtk_paper_size_get_paper_sizes
创建已知纸张大小的列表。
语法
参数
include_custom- 是否包括在页面设置对话框中定义的自定义纸张大小
返回
新分配的对象的新分配列表。[元素型 GtkPaperSize][转移完整]GtkPaperSize
自 2.12 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_ppd_name ----

gtk_paper_size_get_ppd_name
获取 的 PPD 名称，该名称可能为 NULL。GtkPaperSize
语法
参数
size- 一个对象GtkPaperSize
返回
尺寸的 PPD 名称
自 2.10 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_get_width ----

gtk_paper_size_get_width
获取单位的 纸张宽度。GtkPaperSize
语法
参数
size- 一个对象GtkPaperSize
unit- 返回值的单位，而不是GTK_UNIT_NONE
返回
纸张宽度
自 2.10 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_is_custom ----

gtk_paper_size_is_custom
如果大小不是标准纸张大小，则返回 TRUE。
语法
参数
size- 一个对象GtkPaperSize
返回
大小是否是自定义纸张大小。
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_is_equal ----

gtk_paper_size_is_equal
比较两个对象。GtkPaperSize
语法
参数
size1- 一个对象GtkPaperSize
size2- 另一个对象GtkPaperSize
返回
TRUE，如果 size1 和 size2 表示相同的纸张大小
自 2.10 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_new ----

gtk_paper_size_new
通过解析 aPWG 5101.1-2002paper 名称来创建新对象。如果 name 为 NULL，则返回默认纸张大小，请参见 gtk_paper_size_get_default（）。GtkPaperSize
语法
参数
name- 纸张大小名称，或 NULL。[允许-无]
返回
一个新的，使用gtk_paper_size_free（）来释放它GtkPaperSize
自 2.10 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_new_custom ----

gtk_paper_size_new_custom
使用给定参数创建新对象。GtkPaperSize
语法
参数
name- 论文名称
display_name- 人类可读的名称
width- 纸张宽度，单位单位
height- 纸张高度，单位单位
unit- 宽度和高度的单位。不是GTK_UNIT_NONE。
返回
一个新对象，使用 gtk_paper_size_free（） 来释放它GtkPaperSize
自 2.10 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_new_from_ppd ----

gtk_paper_size_new_from_ppd
使用 PPD 信息创建新对象。如果ppd_name不是公认的PPD纸名称，则使用ppd_display_name，宽度和高度来构建自定义对象。GtkPaperSizeGtkPaperSize
语法
参数
ppd_name- PPD纸名
ppd_display_name- 相应的人类可读名称
width- 纸张宽度，以磅为单位
height- 纸张高度（以磅为单位）
返回
一个新的，使用gtk_paper_size_free（）来释放它GtkPaperSize
自 2.10 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_new_from__file ----

gtk_paper_size_new_from_key_file
gtk_paper_size_new_from_key_file?()
从键filekey_file组中读取group_name纸张大小。
语法
参数
key_file- 从中检索论文大小GKeyFile
group_name- 要读取的密钥文件中的组名称，或 NULL 读取第一个组
error- 返回错误的位置，或 NULL。[允许-无]
返回
具有已恢复的纸张大小的新对象，如果发生错误，则为 NULLGtkPaperSize
自 2.12 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_set_size ----

gtk_paper_size_set_size
将尺寸的尺寸更改为宽度 x 高度。
语法
参数
size- 一个自定义对象GtkPaperSize
width- 以单位为单位的新宽度
height- 以单位为单位的新高度
unit- 宽度和高度的单位
自 2.10 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_paper_size_to__file ----

gtk_paper_size_to_key_file
gtk_paper_size_to_key_file?()
此功能将纸张大小从大小添加到key_file。
语法
参数
size- 一GtkPaperSize
key_file- 将纸张大小保存到GKeyFile
group_name- 要在key_file中添加设置的组
自 2.1 起
另请参见
GtkPaperSize


------------ KeyGTK3gtk_parse_args ----

gtk_parse_args
解析命令行参数，并初始化 GTK+ 的全局属性，但实际上不会打开与显示器的连接。（参见gdk_display_open（），gdk_get_display_arg_name（））GTK+ 或 GDK 使用的任何参数都会从数组中删除，并且 argv 会相应地更新。如果usinggtk_init（） 或 gtk_init_check（）， 则无需显式调用此函数。
语法
参数
argc- 指向命令行参数数的指针。[输入]
argv- 指向命令行参数数组的指针。[数组长度 = argc][输入]
返回
如果初始化成功，则为 TRUE，否则为 FALSE
另请参见
gtk3-General


------------ KeyGTK3gtk_places_sidebar_add_shortcut ----

gtk_places_sidebar_add_shortcut
应用程序可能希望在侧边栏中显示一些文件夹，如果它们可以立即对用户有用。例如，绘图程序可以添加 ？/usr/share/clipart？位置当侧边栏正在使用 ？插入剪贴画？對話方塊。此函数将指定位置添加到不可变短切的特殊位置。快捷方式是特定于应用程序的;它们不是跨应用程序共享的，也不是持久的。如果使用不同的位置多次调用此函数，则它们将按照调用该函数的相同顺序添加到侧边栏的列表中。
语法
参数
sidebar- 一个地方侧边栏
location- 要添加为特定于应用程序的快捷方式的位置
自 3.10 起
另请参见
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_get_local_only ----

gtk_places_sidebar_get_local_only
返回以前使用 gtk_places_sidebar_set_local_only（） 设置的值。
语法
参数
sidebar- 一个地方侧边栏
返回
如果侧边栏仅显示本地文件，则为 TRUE。
自 3.12 起
另请参见
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_get_location ----

gtk_places_sidebar_get_location
获取边栏中当前选定的位置。这可以是在未选择任何内容时，例如，当调用gtk_places_sidebar_set_location（） 的位置不在侧边栏的待播位置列表中时。您可以使用此功能在边栏中获取选区。此外，如果连接到信号，则可以使用此函数来获取菜单项回调期间引用的位置。NULL?populate-popup?
语法
参数
sidebar- 一个地方侧边栏
返回
具有选定位置的 GFile，或者未在视觉上选择任何内容。[转移完整]NULL
自 3.10 起
另请参见
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_get_nth_bookmark ----

gtk_places_sidebar_get_nth_bookmark
此函数查询用户添加到地点边栏的书签，并返回其中一个。此函数由 用于实现 ？替代项-1?, ?Alt-2？等快捷方式，用于激活协作书签。GtkFileChooser
语法
参数
sidebar- 一个地方侧边栏
n- 要查询的书签的索引
返回
由索引 n 指定的书签，或者如果不存在此类索引。请注意，索引从 0 开始，即使文件选择器使用键盘快捷键启动它们？替代项-1？。[转移完整]NULL
自 3.10 起
另请参见
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_get_open_flags ----

gtk_places_sidebar_get_open_flags
获取打开的标志。
语法
参数
sidebar- 一GtkPlacesSidebar
返回
侧边栏GtkPlacesOpenFlags
自 3.10 起
另请参见
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_get_show_connect_to_server ----

gtk_places_sidebar_get_show_connect_to_server
返回以前使用 gtk_places_sidebar_set_show_connect_to_server（） 设置的值
语法
参数
sidebar- 一个地方侧边栏
返回
如果侧边栏将显示 ？连接到服务器？项目。
自 3.10 起
另请参见
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_get_show_desktop ----

gtk_places_sidebar_get_show_desktop
返回以前使用 gtk_places_sidebar_set_show_desktop（） 设置的值
语法
参数
sidebar- 一个地方侧边栏
返回
如果边栏将显示桌面文件夹的内置快捷方式，则为 TRUE。
自 3.10 起
另请参见
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_list_shortcuts ----

gtk_places_sidebar_list_shortcuts
获取快捷方式列表。
语法
参数
sidebar- 一个地方侧边栏
返回
已添加为特定于应用程序的快捷方式，其中包含 gtk_places_sidebar_add_shortcut（）。要释放此列表，您可以使用 1[/语法] [语法]g_slist_free_full （列表， （GDestroyNotify） g_object_unref）;[/语法]
[元素类型GFile][传输完整]GSListGFile
自 3.10 起
另请参见
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_new ----

gtk_places_sidebar_new
创建新的构件。应用程序应至少连接到当用户在边栏中进行选择时要通知的信号。GtkPlacesSidebar?open-location?
返回
新创建的GtkPlacesSidebar
自 3.10 起
另请参见
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_remove_shortcut ----

gtk_places_sidebar_remove_shortcut
删除以前插入了 gtk_places_sidebar_add_shortcut（） 的应用程序特定快捷方式。如果侧边栏中的位置不是 ashortcut，则不会执行任何操作。
语法
参数
sidebar- 一个地方侧边栏
location- 要删除的位置
自 3.10 起
另请参见
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_set_local_only ----

gtk_places_sidebar_set_local_only
设定边栏是否应仅显示本地文件。
语法
参数
sidebar- 一个地方侧边栏
local_only- 是否仅显示本地文件
自 3.1 起
另请参见
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_set_location ----

gtk_places_sidebar_set_location
设置边栏周围的小部件中显示的位置，例如，在文件管理器的文件夹视图中。反过来，如果该位置显示在地点列表中，则边栏将突出显示该位置，或者如果该位置不在列表中的地点中，则它将取消突出显示所有内容。
语法
参数
sidebar- 一个地方侧边栏
location- 要选择的位置，或没有当前路径的位置。[允许-无]NULL
自 3.10 起
另请参见
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_set_open_flags ----

gtk_places_sidebar_set_open_flags
设定调用应用程序从“地点”边栏打开新位置的方式。例如，某些应用程序仅直接打开位置？，而其他人可能支持在新笔记本选项卡或新窗口中打开位置。此函数用于告诉位置侧边栏应用程序可以打开新位置的方式，以便侧边栏可以显示（或不显示）？在新标签页中打开？和？在新窗口中打开？菜单项（视情况而定）。当发出信号时，其标志参数将设置为ingtk_places_sidebar_set_open_flags（）传递的标志之一。为标志传递 0 将导致始终发送到 “open-location？信号。?open-location?GTK_PLACES_OPEN_NORMAL
语法
参数
sidebar- 一个地方侧边栏
flags- 调用应用程序可以打开位置的模式的位掩码
自 3.10 起
另请参见
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_set_show_connect_to_server ----

gtk_places_sidebar_set_show_connect_to_server
设定边栏是否应显示用于连接到网络服务器的项目;默认情况下，这是关闭的。如果应用程序实现了一种让用户直接连接到网络服务器的方法，则可能希望启用此功能。
语法
参数
sidebar- 一个地方侧边栏
show_connect_to_server- 是否显示“连接到服务器”命令的项目
自 3.10 起
另请参见
GtkPlacesSidebar


------------ KeyGTK3gtk_places_sidebar_set_show_desktop ----

gtk_places_sidebar_set_show_desktop
设定边栏是否应显示“桌面”文件夹的项目。此选项的默认值由桌面环境和用户的配置确定，但可以使用此功能在每个应用程序的基础上覆盖它。
语法
参数
sidebar- 一个地方侧边栏
show_desktop- 是否显示桌面文件夹的项目
自 3.10 起
另请参见
GtkPlacesSidebar


------------ KeyGTK3gtk_plug_construct ----

gtk_plug_construct
完成给定标识bysocket_id的插头初始化。此函数通常仅由派生的类使用。GtkSocketGtkPlug
语法
参数
plug- 一个.GtkPlug
socket_id- 插座窗口的 XID。
另请参见
GtkPlug


------------ KeyGTK3gtk_plug_construct_for_display ----

gtk_plug_construct_for_display
完成当前显示在显示器上的给定已识别bysocket_id的插头初始化。此函数通常仅由派生的类使用。GtkSocketGtkPlug
语法
参数
plug- 一个.GtkPlug
display- 与socket_id相关联。GdkDisplayGtkSocket
socket_id- 插座窗口的 XID。
自 2.2 起
另请参见
GtkPlug


------------ KeyGTK3gtk_plug_get_embedded ----

gtk_plug_get_embedded
确定插头是否嵌入到插座中。
语法
参数
plug- 一GtkPlug
返回
如果插头嵌入在插座中，则为 TRUE
自 2.14 起
另请参见
GtkPlug


------------ KeyGTK3gtk_plug_get_id ----

gtk_plug_get_id
获取小部件的窗口 ID，然后可以使用该窗口将此窗口嵌入到另一个窗口中，以gtk_socket_add_id（） 表示实例。GtkPlug
语法
参数
plug- 一个.GtkPlug
返回
插头的窗口 ID
另请参见
GtkPlug


------------ KeyGTK3gtk_plug_get_socket_window ----

gtk_plug_get_socket_window
检索嵌入插头的插座。
语法
参数
plug- 一GtkPlug
返回
套接字的窗口，或 NULL。[无转移]
自 2.1 起
另请参见
GtkPlug


------------ KeyGTK3gtk_plug_new ----

gtk_plug_new
在标识socket_id内创建新的插件小部件。如果socket_id为 0，则插头将保持“未插拔状态”并且可以稍后插入到 gtk_socket_add_id（） 中。GtkSocketGtkSocket
语法
参数
socket_id- 套接字的窗口 ID，或 0。
返回
新的小部件。GtkPlug
另请参见
GtkPlug


------------ KeyGTK3gtk_plug_new_for_display ----

gtk_plug_new_for_display
在由 socket_id 标识的内创建新的插件小部件。GtkSocket
语法
参数
display- 显示socket_idisGdkDisplay
socket_id- 插座窗口的 XID。
返回
新的小部件。GtkPlug
自 2.2 起
另请参见
GtkPlug


------------ KeyGTK3gtk_popover_bind_model ----

gtk_popover_bind_model
在 和 之间建立绑定。弹出框的内容将被删除，然后使用根据模型的菜单项重新填充。当模型更改时，弹出框将更新。在具有不同模型的 popover 上调用此函数两次，将导致第一个绑定替换为与 newmodel 的绑定。如果模型为 NULL，则撤消任何以前的绑定，并删除所有子项。如果action_namespace是非 NULL，则效果是模型中提到的 allactions 的名称以命名空间为前缀，外加一个点。例如，如果操作 “退出”是提到，action_namespace是 ？app？则有效的操作名称是 “app.quit？”。此函数用于在创建的菜单项上定义操作名称和目标值。如果要使用 ？app 以外的 anaction 组？和 “win？”，或者如果要使用 外部 ，则需要将自己的操作组附加到小组件层次结构usinggtk_widget_insert_action_group（）。例如，如果您创建了一个带有 “quit？action 并将其与名称 “mygroup” 插入，那么您将使用操作名称 ？mygroup.quit？在你的。GtkPopoverGMenuModelGtkActionableGtkMenuShellGtkApplicationWindowGMenuModel
语法
参数
popover- 一GtkPopover
model- 要绑定到或 NULL 要删除绑定。[允许-无]GMenuModel
action_namespace- 模型中操作的命名空间。[允许-无]
自 3.12 起
另请参见
GtkPopover


------------ KeyGTK3gtk_popover_get_modal ----

gtk_popover_get_modal
返回弹出框是否为模式，请参阅gtk_popover_set_modal了解其含义。
语法
参数
popover- 一GtkPopover
返回
TRUE如果 popoveris modal
自 3.1 起
另请参见
GtkPopover


------------ KeyGTK3gtk_popover_get_pointing_to ----

gtk_popover_get_pointing_to
如果已设置指向的矩形，则此函数将返回 TRUE 并用此类矩形填充 rect，否则它将返回 FALSE 并使用附加的宽度坐标填充矩形。
语法
参数
popover- 一GtkPopover
rect- 存储矩形的位置。[输出]
返回
如果设置了要指向的矩形，则为 TRUE。
另请参见
GtkPopover


------------ KeyGTK3gtk_popover_get_position ----

gtk_popover_get_position
返回弹出框的首选位置。
语法
参数
popover- 一GtkPopover
返回
首选位置。
另请参见
GtkPopover


------------ KeyGTK3gtk_popover_get_relative_to ----

gtk_popover_get_relative_to
返回窗口小部件弹出框当前附加到
语法
参数
popover- 一GtkPopover
返回
一个。[无转移]GtkWidget
自 3.12 起
另请参见
GtkPopover


------------ KeyGTK3gtk_popover_new ----

gtk_popover_new
创建新的弹出框以指向relative_to
语法
参数
relative_to  -  	 GtkWidget弹出框与。[允许-无]
返回
一个新的GtkPopover
自 3.12 起
另请参见
GtkPopover


------------ KeyGTK3gtk_popover_new_from_model ----

gtk_popover_new_from_model
创建 a 并根据模型填充它。弹出框指向relative_to小部件。创建的按钮连接到弹出框所属的操作 - 通常通过附加到包含在小部件层次结构中的小部件。还可以使用菜单附加小部件或其任何父小部件上的 gtk_widget_insert_action_group（） 添加操作。GtkPopoverGtkApplicationWindowGtkApplicationWindows
语法
参数
relative_to  -  	 GtkWidget弹出框与。[允许-无]
model- 一GMenuModel
返回
新的GtkPopover
自 3.12 起
另请参见
GtkPopover


------------ KeyGTK3gtk_popover_set_modal ----

gtk_popover_set_modal
设置弹出框是否为模态弹出框，模式弹出框将抓取所有输入，并在显示时抓住键盘焦点。在弹出框区域外单击或按 Esc 键将丢失弹出框并取消接收输入。
语法
参数
popover- 一GtkPopover
modal  -  	TRUE使弹出式窗口声明 toplevel 中的所有输入
自 3.12 起
另请参见
GtkPopover


------------ KeyGTK3gtk_popover_set_pointing_to ----

gtk_popover_set_pointing_to
设置弹出框将指向的矩形，在弹出框附加到的小部件的协调空间中，请参阅gtk_popover_set_relative_to（）。
语法
参数
popover- 一GtkPopover
rect- 矩形指向
自 3.12 起
另请参见
GtkPopover


------------ KeyGTK3gtk_popover_set_position ----

gtk_popover_set_position
设置弹出框显示的首选位置。如果 popover 当前可见，它将立即更新。在可能的情况下，这种偏好将被尊重，尽管缺乏空间（例如，如果靠近窗口边缘），则可以选择出现在另一侧GtkPopover
语法
参数
popover- 一GtkPopover
position- 首选弹出位置
自 3.12 起
另请参见
GtkPopover


------------ KeyGTK3gtk_popover_set_relative_to ----

gtk_popover_set_relative_to
设置要附加到弹出框的新构件。如果弹出框可见，则该位置将更新。注意：弹出框的所有权始终授予其relative_towidget，因此，如果在附加的弹出框上将relative_to设置为 NULL，它将与其以前的小部件分离，因此将保留无所有的额外引用。
语法
参数
popover- 一GtkPopover
relative_to- 一个.[允许-无]GtkWidget
自 3.12 起
另请参见
GtkPopover


------------ KeyGTK3gtk_printer_accepts_pdf ----

gtk_printer_accepts_pdf
返回打印机是否接受 PDF 格式的输入。
语法
参数
printer- 一GtkPrinter
返回
如果打印机接受 PDF，则为 TRUE
自 2.10 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_accepts_ps ----

gtk_printer_accepts_ps
Returns whether the printer accepts input inPostScript format.
Syntax
Parameters
printer  -  	a GtkPrinter
Returns
TRUE if printeraccepts PostScript
Since 2.10
See Also
GtkPrinter


------------ KeyGTK3gtk_printer_compare ----

gtk_printer_compare
比较两台打印机。
语法
参数
a- 一GtkPrinter
b- 另一个GtkPrinter
返回
如果打印机匹配，则为 0;如果 a< b，则为负值;如果 a> b，则为正值
自 2.10 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_get_backend ----

gtk_printer_get_backend
返回打印机的后端。
语法
参数
printer- 一GtkPrinter
返回
打印机的后端。[无转移]
自 2.10 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_get_capabilities ----

gtk_printer_get_capabilities
返回打印机的功能。当您使用 手动功能设置并且需要知道打印机可以处理哪些设置以及您必须自己处理哪些设置时，这很有用。这将返回 0，除非打印机的详细信息可用，seegtk_printer_has_details（） 和 gtk_printer_request_details（）。GtkPrintUnixDialog
语法
参数
printer- 一GtkPrinter
返回
打印机的功能
自 2.12 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_get_default_page_size ----

gtk_printer_get_default_page_size
返回打印机的默认页面大小。
语法
参数
printer- 一GtkPrinter
返回
新分配的打印机的默认页面大小。GtkPageSetup
自 2.14 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_get_description ----

gtk_printer_get_description
获取打印机的说明。
语法
参数
printer- 一GtkPrinter
返回
打印机的说明
自 2.10 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_get_hard_margins ----

gtk_printer_get_hard_margins
检索打印机的硬边距，即定义纸张边框处打印机无法打印到的区域的边距。注：除非打印机的详细信息可用，否则此操作不会成功，请参阅gtk_printer_has_details（） 和 gtk_printer_request_details（）。
语法
参数
printer- 一GtkPrinter
top- 存储上边距的位置。
bottom- 存储下边距的位置。
left- 存储左边距的位置。
right- 存储右边距的位置。
返回
真，如果硬边距被检索
自 2.20 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_get_icon_name ----

gtk_printer_get_icon_name
获取要用于打印机的图标的名称。
语法
参数
printer- 一GtkPrinter
返回
打印机的图标名称
自 2.10 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_get_job_count ----

gtk_printer_get_job_count
获取打印机上当前排队的作业数。
语法
参数
printer- 一GtkPrinter
返回
打印机上的作业数
自 2.10 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_get_location ----

gtk_printer_get_location
返回打印机位置的说明。
语法
参数
printer- 一GtkPrinter
返回
打印机的位置
自 2.10 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_get_name ----

gtk_printer_get_name
返回打印机的名称。
语法
参数
printer- 一GtkPrinter
返回
打印机的名称
自 2.10 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_get_state_message ----

gtk_printer_get_state_message
返回描述打印机当前状态的状态消息。
语法
参数
printer- 一GtkPrinter
返回
打印机的状态消息
自 2.10 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_has_details ----

gtk_printer_has_details
返回打印机详细信息是否可用。
语法
参数
printer- 一GtkPrinter
返回
如果打印机详细信息可用，则为 TRUE
自 2.12 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_is_accepting_jobs ----

gtk_printer_is_accepting_jobs
返回打印机是否正在接受作业
语法
参数
printer- 一GtkPrinter
返回
如果打印机正在接受作业，则为 TRUE
自 2.14 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_is_active ----

gtk_printer_is_active
返回打印机当前是否处于活动状态（即接受新作业）。
语法
参数
printer- 一GtkPrinter
返回
如果打印机处于活动状态，则为 TRUE
自 2.10 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_is_default ----

gtk_printer_is_default
返回打印机是否为默认打印机。
语法
参数
printer- 一GtkPrinter
返回
如果打印机是默认值，则为 TRUE
自 2.10 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_is_paused ----

gtk_printer_is_paused
返回打印机当前是否暂停。暂停的打印机仍接受作业，但不会打印作业。
语法
参数
printer- 一GtkPrinter
返回
如果打印机已暂停，则为 TRUE
自 2.14 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_is_virtual ----

gtk_printer_is_virtual
返回打印机是否为虚拟打印机（即不表示实际的打印机硬件，而是类似于 CUPS 类）。
语法
参数
printer- 一GtkPrinter
返回
如果打印机是虚拟的，则为 TRUE
自 2.10 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_list_papers ----

gtk_printer_list_papers
列出打印机支持的所有纸张尺寸。除非打印机的详细信息可用，否则这将返回空列表，请参阅gtk_printer_has_details（） 和 gtk_printer_request_details（）。
语法
参数
printer- 一GtkPrinter
返回
[元素类型 GtkPageSetup][传输完整]GtkPageSetup
自 2.12 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_new ----

gtk_printer_new
创建新的 .GtkPrinter
语法
参数
name- 打印机的名称
backend- 一GtkPrintBackend
virtual_- 打印机是否为虚拟打印机
返回
一个新的GtkPrinter
自 2.10 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_printer_request_details ----

gtk_printer_request_details
请求打印机详细信息。当详细信息可用时，将在打印机上发出信号。?details-acquired?
语法
参数
printer- 一GtkPrinter
自 2.12 起
另请参见
GtkPrinter


------------ KeyGTK3gtk_print_context_create_pango_context ----

gtk_print_context_create_pango_context
创建一个可与 一起使用的新。PangoContextGtkPrintContext
语法
参数
context- 一GtkPrintContext
返回
一个新的Pango上下文上下文。[转移完整]
自 2.10 起
另请参见
GtkPrintContext


------------ KeyGTK3gtk_print_context_create_pango_layout ----

gtk_print_context_create_pango_layout
创建一个适合与 .PangoLayoutGtkPrintContext
语法
参数
context- 一GtkPrintContext
返回
一个新的Pango布局的上下文。[转移完整]
自 2.10 起
另请参见
GtkPrintContext


------------ KeyGTK3gtk_print_context_get_cairo_context ----

gtk_print_context_get_cairo_context
获取与 关联的开罗上下文。GtkPrintContext
语法
参数
context- 一GtkPrintContext
返回
开罗语境的语境。[无转移]
自 2.10 起
另请参见
GtkPrintContext


------------ KeyGTK3gtk_print_context_get_dpi_x ----

gtk_print_context_get_dpi_x
获得 ，（以点数/英寸为单位）的水平分辨率。GtkPrintContext
语法
参数
context- 一GtkPrintContext
返回
上下文的水平分辨率
自 2.10 起
另请参见
GtkPrintContext


------------ KeyGTK3gtk_print_context_get_dpi_y ----

gtk_print_context_get_dpi_y
获得，以点数/英寸为单位的垂直分辨率。GtkPrintContext
语法
参数
context- 一GtkPrintContext
返回
上下文的垂直分辨率
自 2.10 起
另请参见
GtkPrintContext


------------ KeyGTK3gtk_print_context_get_hard_margins ----

gtk_print_context_get_hard_margins
获取 的硬件打印机边距，以单位表示。GtkPrintContext
语法
参数
context- 一GtkPrintContext
top- 顶部硬件打印机边距。[输出]
bottom- 底部硬件打印机边距。[输出]
left- 左侧硬件打印机边距。[输出]
right- 正确的硬件打印机边距。[输出]
返回
如果检索到硬边距，则为 TRUE
自 2.2 起
另请参见
GtkPrintContext


------------ KeyGTK3gtk_print_context_get_height ----

gtk_print_context_get_height
获取 的高度，以像素为单位。GtkPrintContext
语法
参数
context- 一GtkPrintContext
返回
上下文的高度
自 2.10 起
另请参见
GtkPrintContext


------------ KeyGTK3gtk_print_context_get_page_setup ----

gtk_print_context_get_page_setup
获取确定 的页维数。GtkPageSetupGtkPrintContext
语法
参数
context- 一GtkPrintContext
返回
上下文的页面设置。[无转移]
自 2.10 起
另请参见
GtkPrintContext


------------ KeyGTK3gtk_print_context_get_pango_fontmap ----

gtk_print_context_get_pango_fontmap
返回适合与 .PangoFontMapGtkPrintContext
语法
参数
context- 一GtkPrintContext
返回
上下文的字体映射。[无转移]
自 2.10 起
另请参见
GtkPrintContext


------------ KeyGTK3gtk_print_context_get_width ----

gtk_print_context_get_width
获取 的宽度（以像素为单位）。GtkPrintContext
语法
参数
context- 一GtkPrintContext
返回
上下文的宽度
自 2.10 起
另请参见
GtkPrintContext


------------ KeyGTK3gtk_print_context_set_cairo_context ----

gtk_print_context_set_cairo_context
在打印上下文上设置新的开罗上下文。此功能旨在实现内部打印预览时使用，打印不需要它，因为GTK +本身在这种情况下创建了一个合适的开罗上下文。
语法
参数
context- 一GtkPrintContext
cr- 开罗语境
dpi_x- 与 cr 一起使用的水平分辨率
dpi_y- 与 cr 一起使用的垂直分辨率
自 2.10 起
另请参见
GtkPrintContext


------------ KeyGTK3gtk_print_job_get_collate ----

gtk_print_job_get_collate
获取此作业是否按打印排序规则。
语法
参数
job- 一GtkPrintJob
返回
作业是否打印校验
自 3.0 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_num_copies ----

gtk_print_job_get_num_copies
获取此作业的副本数。
语法
参数
job- 一GtkPrintJob
返回
份数
自 3.0 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_n_up ----

gtk_print_job_get_n_up
获取此作业的 n-up 设置。
语法
参数
job- 一GtkPrintJob
返回
n-up 设置
自 3.0 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_n_up_layout ----

gtk_print_job_get_n_up_layout
获取此作业的 n-up 布局设置。
语法
参数
job- 一GtkPrintJob
返回
n-up 布局
自 3.0 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_pages ----

gtk_print_job_get_pages
获取此作业的设置。GtkPrintPages
语法
参数
job- 一GtkPrintJob
返回
设置GtkPrintPages
自 3.0 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_page_ranges ----

gtk_print_job_get_page_ranges
获取此作业的页面范围。
语法
参数
job- 一GtkPrintJob
n_ranges- 返回范围数的位置。[输出]
返回
指向结构数组的指针。[数组长度 = n_ranges][无转移]GtkPageRange
自 3.0 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_page_set ----

gtk_print_job_get_page_set
获取此作业的设置。GtkPageSet
语法
参数
job- 一GtkPrintJob
返回
设置GtkPageSet
自 3.0 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_printer ----

gtk_print_job_get_printer
获取打印作业的 。GtkPrinter
语法
参数
job- 一GtkPrintJob
返回
作业的打印机。[无转移]
自 2.10 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_reverse ----

gtk_print_job_get_reverse
获取此作业是否以反向方式打印。
语法
参数
job- 一GtkPrintJob
返回
作业是否打印反转。
自 3.0 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_rotate ----

gtk_print_job_get_rotate
获取是否旋转打印作业。
语法
参数
job- 一GtkPrintJob
返回
作业是否旋转打印
自 3.0 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_scale ----

gtk_print_job_get_scale
获取此作业的缩放比例（其中 1.0 表示未缩放）。
语法
参数
job- 一GtkPrintJob
返回
规模
自 3.0 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_settings ----

gtk_print_job_get_settings
获取打印作业的 。GtkPrintSettings
语法
参数
job- 一GtkPrintJob
返回
作业的设置。[无转移]
自 2.10 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_status ----

gtk_print_job_get_status
获取打印作业的状态。
语法
参数
job- 一GtkPrintJob
返回
作业的状态
自 2.10 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_surface ----

gtk_print_job_get_surface
Gets a cairo surface onto which the pages ofthe print job should be rendered.
Syntax
Parameters
job  -  	a GtkPrintJob
error  -  	 return location for errors, or NULL. [allow-none]
Returns
the cairo surface of job. [transfer none]
Since 2.10
See Also
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_title ----

gtk_print_job_get_title
Gets the job title.
Syntax
Parameters
job  -  	a GtkPrintJob
Returns
the title of job
Since 2.10
See Also
GtkPrintJob


------------ KeyGTK3gtk_print_job_get_track_print_status ----

gtk_print_job_get_track_print_status
Returns wheter jobs will be tracked after printing.For details, see gtk_print_job_set_track_print_status().
Syntax
Parameters
job  -  	a GtkPrintJob
Returns
TRUE if print job status will be reported after printing
Since 2.10
See Also
GtkPrintJob


------------ KeyGTK3gtk_print_job_new ----

gtk_print_job_new
创建新的 .GtkPrintJob
语法
参数
title- 职称
printer- 一GtkPrinter
settings- 一GtkPrintSettings
page_setup- 一GtkPageSetup
返回
一个新的GtkPrintJob
自 2.10 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_send ----

gtk_print_job_send
Sends the print job off to the printer.
Syntax
Parameters
job  -  	a GtkPrintJob
callback  -  	function to call when the job completes or an error occurs
user_data  -  	user data that gets passed to callback
dnotify  -  	destroy notify for user_data
Since 2.10
See Also
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_collate ----

gtk_print_job_set_collate
Sets whether this job is printed collated.
Syntax
Parameters
job  -  	a GtkPrintJob
collate  -  	whether the job is printed collated
Since 3.0
See Also
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_num_copies ----

gtk_print_job_set_num_copies
Sets the number of copies for this job.
Syntax
Parameters
job  -  	a GtkPrintJob
num_copies  -  	the number of copies
Since 3.0
See Also
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_n_up ----

gtk_print_job_set_n_up
设置此作业的 n-up 设置。
语法
参数
job- 一GtkPrintJob
n_up- n-up 值
自 3.0 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_n_up_layout ----

gtk_print_job_set_n_up_layout
Sets the n-up layout setting for this job.
Syntax
Parameters
job  -  	a GtkPrintJob
layout  -  	the n-up layout setting
Since 3.0
See Also
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_pages ----

gtk_print_job_set_pages
设置此作业的设置。GtkPrintPages
语法
参数
job- 一GtkPrintJob
pages- 设置GtkPrintPages
自 3.0 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_page_ranges ----

gtk_print_job_set_page_ranges
设置此作业的页面范围。
语法
参数
job- 一GtkPrintJob
ranges- 指向结构数组的指针。[数组长度 = n_ranges]GtkPageRange
n_ranges- 范围数组的长度
自 3.0 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_page_set ----

gtk_print_job_set_page_set
设置此作业的设置。GtkPageSet
语法
参数
job- 一GtkPrintJob
page_set- 一个设置GtkPageSet
自 3.0 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_reverse ----

gtk_print_job_set_reverse
设置是否反向打印此作业。
语法
参数
job- 一GtkPrintJob
reverse- 作业是否打印反向
自 3.
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_rotate ----

gtk_print_job_set_rotate
设置是否旋转打印此作业。
语法
参数
job- 一GtkPrintJob
rotate- 是否旋转打印
自 3.0 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_scale ----

gtk_print_job_set_scale
设置此作业的缩放比例（其中 1.0 表示未缩放）。
语法
参数
job- 一GtkPrintJob
scale- 规模
自 3.0 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_source_file ----

gtk_print_job_set_source_file
将现有文档发送到打印系统。该文件可以是平台打印系统理解的任何格式（通常是PostScript，但在许多平台上PDF也可以工作）。请参见 gtk_printer_accepts_pdf（） 和 gtk_printer_accepts_ps（）。GtkPrintJob
语法
参数
job- 一GtkPrintJob
filename- 要打印的文件。[类型文件名]
error- 返回错误位置
返回
如果发生错误，则为 FALSE
自 2.10 起
另请参见
GtkPrintJob


------------ KeyGTK3gtk_print_job_set_track_print_status ----

gtk_print_job_set_track_print_status
If track_status is TRUE, the print job will try to continue reporton the status of the print job in the printer queues and printer. Thiscan allow your application to show things like ?out of paper? issues,and when the print job actually reaches the printer.This function is often implemented using some form of polling, so it shouldnot be enabled unless needed.
Syntax
Parameters
job  -  	a GtkPrintJob
track_status  -  	TRUE to track status after printing
Since 2.10
See Also
GtkPrintJob


------------ KeyGTK3gtk_print_operation_cancel ----

gtk_print_operation_cancel
Cancels a running print operation. This function maybe called from a ,  or signal handler to stop the currently running print operation.?begin-print??paginate??draw-page?
Syntax
Parameters
op  -  	a GtkPrintOperation
Since 2.10
See Also
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_draw_page_finish ----

gtk_print_operation_draw_page_finish
表明特定页面的绘图已完成。它是在页面绘制完成后调用的（例如，在另一个线程中绘制）。如果之前调用了gtk_print_operation_set_defer_drawing（），则此函数必须由应用程序调用。在另一种情况下，它由图书馆自己调用。
语法
参数
op- 一GtkPrintOperation
2.16 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_default_page_setup ----

gtk_print_operation_get_default_page_setup
返回默认页面设置，seegtk_print_operation_set_default_page_setup（）。
语法
参数
op- 一GtkPrintOperation
返回
默认页面设置。[无转移]
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_embed_page_setup ----

gtk_print_operation_get_embed_page_setup
获取属性的值。?embed-page-setup?
语法
参数
op- 一GtkPrintOperation
返回
是否嵌入页面设置选择组合
自 2.18 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_error ----

gtk_print_operation_get_error
当打印操作的结果isGTK_PRINT_OPERATION_RESULT_ERROR时调用它，该结果由 gtk_print_operation_run（） 返回，或者在信号处理程序中返回。返回的将包含有关出错的更多详细信息。?done?GError
语法
参数
op- 一GtkPrintOperation
error- 返回错误的位置
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_has_selection ----

gtk_print_operation_get_has_selection
获取属性的值。?has-selection?
语法
参数
op- 一GtkPrintOperation
返回
是否有选择
自 2.18 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_n_pages_to_print ----

gtk_print_operation_get_n_pages_to_print
返回将打印的页数。请注意，此值是在打印准备阶段（GTK_PRINT_STATUS_PREPARING）期间设置的，因此在数据生成阶段（GTK_PRINT_STATUS_GENERATING_DATA）之前，不应调用此函数。当打印状态为GTK_PRINT_STATUS_GENERATING_DATA时，您可以连接到信号并调用gtk_print_operation_get_n_pages_to_print（）。这通常用于跟踪打印操作的进度。?status-changed?
语法
参数
op- 一GtkPrintOperation
返回
将打印的页数
自 2.18 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_print_settings ----

gtk_print_operation_get_print_settings
返回当前打印设置。请注意，在调用eithergtk_print_operation_set_print_settings（） orgtk_print_operation_run（） 之前，返回值为 NULL。
语法
参数
op- 一GtkPrintOperation
返回
操作的当前打印设置 [无传输]
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_status ----

gtk_print_operation_get_status
返回打印操作的状态。另请参见 gtk_print_operation_get_status_string（）。
语法
参数
op- 一GtkPrintOperation
返回
打印操作的状态
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_status_string ----

gtk_print_operation_get_status_string
返回打印操作状态的字符串表示形式。字符串已翻译，适用于显示打印状态，例如在 .使用 gtk_print_operation_get_status（） 获取适合编程使用的状态值。GtkStatusbar
语法
参数
op- 一GtkPrintOperation
返回
打印操作状态的字符串表示形式
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_get_support_selection ----

gtk_print_operation_get_support_selection
获取属性的值。?support-selection?
语法
参数
op- 一GtkPrintOperation
返回
应用程序是否支持打印所选内容
自 2.18 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_is_finished ----

gtk_print_operation_is_finished
一个方便的功能，用于查明打印操作是成功（GTK_PRINT_STATUS_FINISHED）还是不成功（GTK_PRINT_STATUS_FINISHED_ABORTED）完成。注意：启用打印状态跟踪时，即使调用了已完成操作，打印操作也可能处于未完成状态，因为操作状态随后会跟踪打印机上的打印作业状态。
语法
参数
op- 一GtkPrintOperation
返回
TRUE，如果打印操作已完成。
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_new ----

gtk_print_operation_new
创建新的 .GtkPrintOperation
返回
一个新的GtkPrintOperation
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_preview_end_preview ----

gtk_print_operation_preview_end_preview
结束预览。必须调用此函数才能完成自定义打印预览。
语法
参数
preview- 一GtkPrintOperationPreview
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_preview_is_selected ----

gtk_print_operation_preview_is_selected
返回给定页面是否包含在已选择进行打印的页面集中。
语法
参数
preview- 一GtkPrintOperationPreview
page_nr- 页码
返回
如果已选择打印页面，则为 TRUE
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_preview_render_page ----

gtk_print_operation_preview_render_page
使用与预览一起传递给处理程序的打印上下文，将页面呈现为预览。自定义 iprint 预览应在其 ：：exposhandler 中使用此函数来呈现当前选定的页面。请注意，此函数需要将合适的 cairo 上下文与打印上下文相关联。?preview?
语法
参数
preview- 一GtkPrintOperationPreview
page_nr- 要呈现的页面
自 2.1 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_run ----

gtk_print_operation_run
运行打印操作，方法是首先让用户在打印对话框中修改打印设置，然后打印文档。通常，在所有页面的呈现完成之前，此函数不会返回。您可以连接到op上的信号，以获取有关打印操作进度的一些信息。此外，它可能使用递归主环来显示打印对话框。如果调用 gtk_print_operation_set_allow_async（） 或设置属性，则操作将异步运行（如果平台支持）。当操作完成时（即当对话框被取消时，或者当打印成功或失败时），信号将与操作结果一起发出。1234567891011121314151617181920212223242526272829303132333435[/语法] [语法]if （settings ！= NULL） gtk_print_operation_set_print_settings （print， settings）;如果 （page_setup ！= NULL） gtk_print_operation_set_default_page_setup （打印，page_setup）;g_signal_connect（打印，“开始打印”，G_CALLBACK（begin_print），&数据）;g_signal_connect（打印，“绘制页面”，G_CALLBACK（draw_page）和数据）;res = gtk_print_operation_run（打印、GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG、父级和错误）;if （res == GTK_PRINT_OPERATION_RESULT_ERROR） { error_dialog = gtk_message_dialog_new （GTK_WINDOW （parent）、 GTK_DIALOG_DESTROY_WITH_PARENT， GTK_MESSAGE_ERROR， GTK_BUTTONS_CLOSE， “打印文件时出错：\n%s”， error->message）; g_signal_connect （error_dialog， “response”， G_CALLBACK （gtk_widget_destroy）， NULL）; gtk_widget_show （error_dialog）; g_error_free （错误）; }else if （res == GTK_PRINT_OPERATION_RESULT_APPLY） { if （settings ！= NULL）g_object_unref （settings）; settings = g_object_ref （gtk_print_operation_get_print_settings （print））; }[/语法]
请注意，gtk_print_operation_run（） 只能在 agiven 上调用一次。?status-changed??allow-async??done?GtkPrintOperation
语法
参数
op- 一GtkPrintOperation
action- 启动的动作
parent- 对话框的瞬态父级。[允许-无]
error- 返回错误的位置，或 NULL。[允许-无]
返回
打印操作的结果。返回值ofGTK_PRINT_OPERATION_RESULT_APPLY表示打印已成功完成。在这种情况下，最好使用 gtk_print_operation_get_print_settings（） 获取使用的打印设置，并存储它们以供下次打印操作重复使用。值 ofGTK_PRINT_OPERATION_RESULT_IN_PROGRESS表示操作以异步方式运行，并在完成时发出信号。?done?
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_allow_async ----

gtk_print_operation_set_allow_async
设置gtk_print_operation_run（） 是否可以在打印操作完成之前返回。请注意，某些平台可能不允许异步操作。
语法
参数
op- 一GtkPrintOperation
allow_async- TRUE 允许异步操作
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_current_page ----

gtk_print_operation_set_current_page
设置当前页。如果在gtk_print_operation_run（）之前调用，用户将能够选择仅打印当前页面。请注意，这仅对预分页文档有意义。
语法
参数
op- 一GtkPrintOperation
current_page- 当前页面，从 0 开始
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_custom_tab_label ----

gtk_print_operation_set_custom_tab_label
设置保存自定义微件的选项卡的标签。
语法
参数
op- 一GtkPrintOperation
label- 要使用的标签，或 NULL 使用默认标签。[允许-无]
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_default_page_setup ----

gtk_print_operation_set_default_page_setup
使default_page_setup为 op 的默认页面设置。此页面设置将由gtk_print_operation_run（）使用，但可以通过连接到信号来按页面覆盖。?request-page-setup?
语法
参数
op- 一GtkPrintOperation
default_page_setup- a 或 NULL。[允许-无]GtkPageSetup
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_defer_drawing ----

gtk_print_operation_set_defer_drawing
设置等待从应用程序调用 ofgtk_print_operation_draw_page_finish（）。它可以用于在另一个线程中绘制页面。此函数必须在 “draw-page？信号。GtkPrintOperation
语法
参数
op- 一GtkPrintOperation
2.16 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_embed_page_setup ----

gtk_print_operation_set_embed_page_setup
将页面大小组合框和方向组合框嵌入到页面设置页中。选定的页面设置将存储为 中的默认页面设置。GtkPrintOperation
语法
参数
op- 一GtkPrintOperation
embed- TRUE 在GtkPrintUnixDialog
自 2.18 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_export_filename ----

gtk_print_operation_set_export_filename
设置以生成文件，而不是显示打印对话框。此函数的缩进使用是用于实现 ？导出为 PDF？行动。目前，PDFi 是唯一受支持的格式。打印到 PDF 格式？支持与此无关，并通过让用户选择 ？打印到 PDF 格式？项目，从打印对话框中的打印机列表中。GtkPrintOperation
语法
参数
op- 一GtkPrintOperation
filename- 导出文件的文件名。[类型文件名]
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_has_selection ----

gtk_print_operation_set_has_selection
设置是否有要打印的选区。应用程序必须设置选择将通过回调中的 gtk_print_operation_set_n_pages（） 绘制到的页面数。?begin-print?
语法
参数
op- 一GtkPrintOperation
has_selection- TRUE 表示存在选择
自 2.18 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_job_name ----

gtk_print_operation_set_job_name
设置打印作业的名称。该名称用于标识作业（例如，在监控鸡蛋杯等应用程序中）。如果未设置作业名称，GTK+ 将通过对连续的打印作业进行编号来选取默认作业名称。
语法
参数
op- 一GtkPrintOperation
job_name- 标识打印作业的字符串
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_n_pages ----

gtk_print_operation_set_n_pages
设置文档中的页数。在渲染开始之前，必须将其设置为正数。它可以在信号处理器中设置。请注意，传递给 和 的页码是从 0 开始的，即如果用户选择打印所有页面，则最后一个 ：:d raw-page 信号将用于页面 n_pages - 1。?begin-print??request-page-setup??draw-page?
语法
参数
op- 一GtkPrintOperation
n_pages- 页数
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_print_settings ----

gtk_print_operation_set_print_settings
设置操作的打印设置。这通常用于从以前的打印操作中重新建立打印设置，请参见gtk_print_operation_run（）。
语法
参数
op- 一GtkPrintOperation
print_settings  -  	 GtkPrintSettings.[允许-无]
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_show_progress ----

gtk_print_operation_set_show_progress
如果show_progress为 TRUE，则打印操作将在打印操作期间显示进度对话框。
语法
参数
op- 一GtkPrintOperation
show_progress- TRUE 显示进度对话框
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_support_selection ----

gtk_print_operation_set_support_selection
设置 是否支持选择。GtkPrintOperation
语法
参数
op- 一GtkPrintOperation
support_selection- TRUE 支持选择
自 2.18 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_track_print_status ----

gtk_print_operation_set_track_print_status
如果track_status为 TRUE，则打印操作将尝试继续报告打印机队列和打印机中打印作业的状态。这可以让你的应用程序显示诸如“纸本”之类的东西。问题，以及打印作业实际到达打印机的时间。此功能通常使用某种形式的轮询实现，因此除非需要，否则不应启用此功能。
语法
参数
op- 一GtkPrintOperation
track_status- TRUE 可在打印后跟踪状态
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_unit ----

gtk_print_operation_set_unit
设置从中获得的开罗上下文的变换，以便以单位为单位测量距离。GtkPrintContext
语法
参数
op- 一GtkPrintOperation
unit- 要使用的单位
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_operation_set_use_full_page ----

gtk_print_operation_set_use_full_page
如果full_page为 TRUE，则从中获取的 cairo 上下文的转换会将原点放在页面的左上角（这可能不是工作表的左上角，具体取决于页面方向和每张工作表的页数）。否则，原点位于可图像区域的左上角（即边距内）。GtkPrintContext
语法
参数
op- 一GtkPrintOperation
full_page- TRUE 设置为整页GtkPrintContext
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_run_page_setup_dialog ----

gtk_print_run_page_setup_dialog
运行页面设置对话框，允许用户修改值frompage_setup。如果用户取消对话框，则返回的对话框与传入的page_setup相同，否则它包含对话框中所做的修改。请注意，此函数可能使用递归主环来显示页面设置对话框。如果这是一个问题，请参阅 gtk_print_run_page_setup_dialog_async（）。GtkPageSetup
语法
参数
parent- 瞬态父级。[允许-无]
page_setup- 现有的.[允许-无]GtkPageSetup
settings- 一GtkPrintSettings
返回
一个新的.[转移完整]GtkPageSetup
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_run_page_setup_dialog_async ----

gtk_print_run_page_setup_dialog_async
运行页面设置对话框，允许用户修改page_setup的值。与 gtk_print_run_page_setup_dialog（） 相反，此函数在支持此操作的平台上显示页面设置对话框后返回，并从信号处理程序调用done_cb，以获取对话框的 ：：response 信号。
语法
参数
parent- 瞬态父级，或 NULL。[允许-无]
page_setup- 现有 或空。[允许-无]GtkPageSetup
settings- 一GtkPrintSettings
done_cb- 当用户保存修改后的页面设置时要调用的函数。[范围异步]
data- 要传递给done_cb的用户数据
自 2.10 起
另请参见
gtk3-High-level-Printing-API


------------ KeyGTK3gtk_print_settings_copy ----

gtk_print_settings_copy
复制对象。GtkPrintSettings
语法
参数
other- 一GtkPrintSettings
返回
其他新分配的副本。[转移完整]
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_foreach ----

gtk_print_settings_foreach
为每个键值对设置调用 func。
语法
参数
settings- 一GtkPrintSettings
func- 要调用的函数。[范围调用]
user_data- 功能的用户数据
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get ----

gtk_print_settings_get
查找与键关联的字符串值。
语法
参数
settings- 一GtkPrintSettings
key- 一把钥匙
返回
键的字符串值
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_bool ----

gtk_print_settings_get_bool
返回由与键关联的值所表示的布尔值。字符串 ？true？表示 TRUE，任何其他字符串 FALSE。
语法
参数
settings- 一GtkPrintSettings
key- 一把钥匙
返回
TRUE，如果键映射到 true 值。
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_collate ----

gtk_print_settings_get_collate
获取GTK_PRINT_SETTINGS_COLLATE的值。
语法
参数
settings- 一GtkPrintSettings
返回
是否校对打印的页面
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_default_source ----

gtk_print_settings_get_default_source
获取GTK_PRINT_SETTINGS_DEFAULT_SOURCE的值。
语法
参数
settings- 一GtkPrintSettings
返回
默认源
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_dither ----

gtk_print_settings_get_dither
获取GTK_PRINT_SETTINGS_DITHER的值。
语法
参数
settings- 一GtkPrintSettings
返回
使用的抖动
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_double ----

gtk_print_settings_get_double
返回与 key 关联的双精度值，或 0。
语法
参数
settings- 一GtkPrintSettings
key- 一把钥匙
返回
键的双精度值
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_double_with_default ----

gtk_print_settings_get_double_with_default
返回由与键关联的值表示的浮点数，或者default_valif该值不表示浮点数。浮点数使用 g_ascii_strtod（） 进行解析。
语法
参数
settings- 一GtkPrintSettings
key- 一把钥匙
def- 默认值
返回
与键关联的浮点数
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_duplex ----

gtk_print_settings_get_duplex
获取GTK_PRINT_SETTINGS_DUPLEX的值。
语法
参数
settings- 一GtkPrintSettings
返回
是否以双面打印输出。
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_finishings ----

gtk_print_settings_get_finishings
获取GTK_PRINT_SETTINGS_FINISHINGS的值。
语法
参数
settings- 一GtkPrintSettings
返回
饰面
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_int ----

gtk_print_settings_get_int
返回 key 的整数值，或 0。
语法
参数
settings- 一GtkPrintSettings
key- 一把钥匙
返回
键的整数值
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_int_with_default ----

gtk_print_settings_get_int_with_default
返回 key、解释为整数或默认值的值。
语法
参数
settings- 一GtkPrintSettings
key- 一把钥匙
def- 默认值
返回
键的整数值
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_length ----

gtk_print_settings_get_length
返回与 key 关联的值，解释为长度。返回的值将转换为单位。
语法
参数
settings- 一GtkPrintSettings
key- 一把钥匙
unit- 返回值的单位
返回
密钥的长度值，转换为单位
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_media_type ----

gtk_print_settings_get_media_type
获取GTK_PRINT_SETTINGS_MEDIA_TYPE的值。介质类型集在 PWG 5101.1-2002 PWG 中定义。
语法
参数
settings- 一GtkPrintSettings
返回
媒体类型
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_number_up ----

gtk_print_settings_get_number_up
获取GTK_PRINT_SETTINGS_NUMBER_UP的值。
语法
参数
settings- 一GtkPrintSettings
返回
每页页数
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_number_up_layout ----

gtk_print_settings_get_number_up_layout
获取GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT的值。
语法
参数
settings- 一GtkPrintSettings
返回
在向上编号模式下的页面布局
自 2.14 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_n_copies ----

gtk_print_settings_get_n_copies
获取GTK_PRINT_SETTINGS_N_COPIES的值。
语法
参数
settings- 一GtkPrintSettings
返回
要打印的份数
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_orientation ----

gtk_print_settings_get_orientation
获取 GTK_PRINT_SETTINGS_ORIENTATION 的值，并将其转换为 .GtkPageOrientation
语法
参数
settings- 一GtkPrintSettings
返回
方向
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_output_bin ----

gtk_print_settings_get_output_bin
获取GTK_PRINT_SETTINGS_OUTPUT_BIN的值。
语法
参数
settings- 一GtkPrintSettings
返回
输出条柱
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_page_ranges ----

gtk_print_settings_get_page_ranges
获取GTK_PRINT_SETTINGS_PAGE_RANGES的值。
语法
参数
settings- 一GtkPrintSettings
num_ranges- 返回数组长度的返回位置。[输出]
返回
一个数组的 .使用 g_free（） 在不再需要数组时释放数组。[数组长度 = num_ranges][转移完整]GtkPageRanges
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_page_set ----

gtk_print_settings_get_page_set
获取GTK_PRINT_SETTINGS_PAGE_SET的值。
语法
参数
settings- 一GtkPrintSettings
返回
要打印的页面集
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_paper_height ----

gtk_print_settings_get_paper_height
获取GTK_PRINT_SETTINGS_PAPER_HEIGHT的值，转换为单位。
语法
参数
settings- 一GtkPrintSettings
unit- 返回值的单位
返回
纸张高度，单位为单位
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_paper_size ----

gtk_print_settings_get_paper_size
获取GTK_PRINT_SETTINGS_PAPER_FORMAT的值，并将其转换为 .GtkPaperSize
语法
参数
settings- 一GtkPrintSettings
返回
纸张大小
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_paper_width ----

gtk_print_settings_get_paper_width
获取GTK_PRINT_SETTINGS_PAPER_WIDTH的值，转换为单位。
语法
参数
settings- 一GtkPrintSettings
unit- 返回值的单位
返回
纸张宽度，单位为单位
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_printer ----

gtk_print_settings_get_printer
方便函数，获取GTK_PRINT_SETTINGS_PRINTER值。
语法
参数
settings- 一GtkPrintSettings
返回
打印机名称
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_printer_lpi ----

gtk_print_settings_get_printer_lpi
获取GTK_PRINT_SETTINGS_PRINTER_LPI的值。
语法
参数
settings- 一GtkPrintSettings
返回
以 lpi 为单位的分辨率（每英寸行数）
2.16 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_print_pages ----

gtk_print_settings_get_print_pages
获取GTK_PRINT_SETTINGS_PRINT_PAGES的值。
语法
参数
settings- 一GtkPrintSettings
返回
要打印的页面
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_quality ----

gtk_print_settings_get_quality
获取GTK_PRINT_SETTINGS_QUALITY的值。
语法
参数
settings- 一GtkPrintSettings
返回
打印质量
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_resolution ----

gtk_print_settings_get_resolution
获取GTK_PRINT_SETTINGS_RESOLUTION的值。
语法
参数
settings- 一GtkPrintSettings
返回
分辨率（以 dpi 为单位）
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_resolution_x ----

gtk_print_settings_get_resolution_x
获取GTK_PRINT_SETTINGS_RESOLUTION_X的值。
语法
参数
settings- 一GtkPrintSettings
返回
以 dpi 为单位的水平分辨率
2.16 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_resolution_y ----

gtk_print_settings_get_resolution_y
获取GTK_PRINT_SETTINGS_RESOLUTION_Y的值。
语法
参数
settings- 一GtkPrintSettings
返回
垂直分辨率（以 dpi 为单位）
2.16 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_reverse ----

gtk_print_settings_get_reverse
获取GTK_PRINT_SETTINGS_REVERSE的值。
语法
参数
settings- 一GtkPrintSettings
返回
是否颠倒打印页面的顺序
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_scale ----

gtk_print_settings_get_scale
获取GTK_PRINT_SETTINGS_SCALE的值。
语法
参数
settings- 一GtkPrintSettings
返回
以百分比为单位的规模
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_get_use_color ----

gtk_print_settings_get_use_color
获取GTK_PRINT_SETTINGS_USE_COLOR的值。
语法
参数
settings- 一GtkPrintSettings
返回
是否使用颜色
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_has_ ----

gtk_print_settings_has_key
gtk_print_settings_has_key?()
如果值与键相关联，则返回 TRUE。
语法
参数
settings- 一GtkPrintSettings
key- 一把钥匙
返回
TRUE，如果键具有值
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_load_file ----

gtk_print_settings_load_file
从file_name读取打印设置。如果无法加载文件，则错误设置为 a 或 。请参见gtk_print_settings_to_file（）。GFileErrorGKeyFileError
语法
参数
settings- 一GtkPrintSettings
file_name- 从中读取设置的文件名。[类型文件名]
error- 返回错误的位置，或 NULL。[允许-无]
返回
成功时真
自 2.14 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_load__file ----

gtk_print_settings_load_key_file
gtk_print_settings_load_key_file?()
从key_file中的组group_name读取打印设置。如果无法加载文件，则错误设置为 or。GFileErrorGKeyFileError
语法
参数
settings- 一GtkPrintSettings
key_file- 检索设置GKeyFile
group_name- 要使用的组的名称，还是 NULL 使用默认值？打印设置？.[允许-无]
error- 返回错误的位置，或 NULL。[允许-无]
返回
成功时真
自 2.14 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_new ----

gtk_print_settings_new
创建新对象。GtkPrintSettings
返回
新对象GtkPrintSettings
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_new_from_file ----

gtk_print_settings_new_from_file
从file_name读取打印设置。返回具有还原设置的新对象，如果发生错误，则返回 NULL。如果无法加载文件，则错误设置为 or。请参见gtk_print_settings_to_file（）。GtkPrintSettingsGFileErrorGKeyFileError
语法
参数
file_name- 从中读取设置的文件名。[类型文件名]
error- 返回错误的位置，或 NULL。[允许-无]
返回
已恢复GtkPrintSettings
自 2.12 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_new_from__file ----

gtk_print_settings_new_from_key_file
gtk_print_settings_new_from_key_file?()
从key_file中的组group_name读取打印设置。返回具有还原设置的新对象，如果发生错误，则返回 NULL。如果无法加载文件，则错误设置为 a 或 。GtkPrintSettingsGFileErrorGKeyFileError
语法
参数
key_file- 检索设置GKeyFile
group_name- 要使用的组的名称，或 NULL 使用默认值 ？打印设置？.[允许-无]
error- 返回错误的位置，或 NULL。[允许-无]
返回
已恢复GtkPrintSettings
自 2.12 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set ----

gtk_print_settings_set
将值与键相关联。
语法
参数
settings- 一GtkPrintSettings
key- 一把钥匙
value- 字符串值，或 NULL。[允许-无]
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_bool ----

gtk_print_settings_set_bool
将键设置为布尔值。
语法
参数
settings- 一GtkPrintSettings
key- 一把钥匙
value- 一个布尔值
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_collate ----

gtk_print_settings_set_collate
设置GTK_PRINT_SETTINGS_COLLATE的值。
语法
参数
settings- 一GtkPrintSettings
collate- 是否整理输出
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_default_source ----

gtk_print_settings_set_default_source
设置GTK_PRINT_SETTINGS_DEFAULT_SOURCE的值。
语法
参数
settings- 一GtkPrintSettings
default_source- 默认源
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_dither ----

gtk_print_settings_set_dither
设置GTK_PRINT_SETTINGS_DITHER的值。
语法
参数
settings- 一GtkPrintSettings
dither- 使用的抖动
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_double ----

gtk_print_settings_set_double
将键设置为双精度值。
语法
参数
settings- 一GtkPrintSettings
key- 一把钥匙
value- 双精度值
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_duplex ----

gtk_print_settings_set_duplex
设置GTK_PRINT_SETTINGS_DUPLEX的值。
语法
参数
settings- 一GtkPrintSettings
duplex- 一个值GtkPrintDuplex
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_finishings ----

gtk_print_settings_set_finishings
设置GTK_PRINT_SETTINGS_FINISHINGS的值。
语法
参数
settings- 一GtkPrintSettings
finishings- 饰面
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_int ----

gtk_print_settings_set_int
将键设置为整数值。
语法
参数
settings- 一GtkPrintSettings
key- 一把钥匙
value- 一个整数
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_length ----

gtk_print_settings_set_length
将长度（以单位为单位）与键相关联。
语法
参数
settings- 一GtkPrintSettings
key- 一把钥匙
value- 长度
unit- 长度单位
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_media_type ----

gtk_print_settings_set_media_type
设置GTK_PRINT_SETTINGS_MEDIA_TYPE的值。介质类型集在 PWG 5101.1-2002 PWG 中定义。
语法
参数
settings- 一GtkPrintSettings
media_type- 媒体类型
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_number_up ----

gtk_print_settings_set_number_up
设置GTK_PRINT_SETTINGS_NUMBER_UP的值。
语法
参数
settings- 一GtkPrintSettings
number_up- 每页页数
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_number_up_layout ----

gtk_print_settings_set_number_up_layout
设置GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT的值。
语法
参数
settings- 一GtkPrintSettings
number_up_layout- 一个值GtkNumberUpLayout
自 2.14 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_n_copies ----

gtk_print_settings_set_n_copies
设置GTK_PRINT_SETTINGS_N_COPIES的值。
语法
参数
settings- 一GtkPrintSettings
num_copies- 份数
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_orientation ----

gtk_print_settings_set_orientation
设置GTK_PRINT_SETTINGS_ORIENTATION的值。
语法
参数
settings- 一GtkPrintSettings
orientation- 页面方向
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_output_bin ----

gtk_print_settings_set_output_bin
设置GTK_PRINT_SETTINGS_OUTPUT_BIN的值。
语法
参数
settings- 一GtkPrintSettings
output_bin- 输出条柱
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_page_ranges ----

gtk_print_settings_set_page_ranges
设置GTK_PRINT_SETTINGS_PAGE_RANGES的值。
语法
参数
settings- 一GtkPrintSettings
page_ranges- 一个数组。[数组长度 = num_ranges]GtkPageRanges
num_ranges- page_ranges的长度
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_page_set ----

gtk_print_settings_set_page_set
设置GTK_PRINT_SETTINGS_PAGE_SET的值。
语法
参数
settings- 一GtkPrintSettings
page_set- 一个值GtkPageSet
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_paper_height ----

gtk_print_settings_set_paper_height
设置GTK_PRINT_SETTINGS_PAPER_HEIGHT的值。
语法
参数
settings- 一GtkPrintSettings
height- 纸张高度
unit- 高度单位
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_paper_size ----

gtk_print_settings_set_paper_size
设置 GTK_PRINT_SETTINGS_PAPER_FORMAT，GTK_PRINT_SETTINGS_PAPER_WIDTH andGTK_PRINT_SETTINGS_PAPER_HEIGHT 的值。
语法
参数
settings- 一GtkPrintSettings
paper_size- 纸张大小
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_paper_width ----

gtk_print_settings_set_paper_width
设置GTK_PRINT_SETTINGS_PAPER_WIDTH的值。
语法
参数
settings- 一GtkPrintSettings
width- 纸张宽度
unit- 宽度单位
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_printer ----

gtk_print_settings_set_printer
方便功能，可设置GTK_PRINT_SETTINGS_PRINTERto打印机。
语法
参数
settings- 一GtkPrintSettings
printer- 打印机名称
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_printer_lpi ----

gtk_print_settings_set_printer_lpi
设置GTK_PRINT_SETTINGS_PRINTER_LPI的值。
语法
参数
settings- 一GtkPrintSettings
lpi- 以 lpi 为单位的分辨率（每英寸行数）
2.16 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_print_pages ----

gtk_print_settings_set_print_pages
设置GTK_PRINT_SETTINGS_PRINT_PAGES的值。
语法
参数
settings- 一GtkPrintSettings
pages- 一个值GtkPrintPages
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_quality ----

gtk_print_settings_set_quality
设置GTK_PRINT_SETTINGS_QUALITY的值。
语法
参数
settings- 一GtkPrintSettings
quality- 一个值GtkPrintQuality
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_resolution ----

gtk_print_settings_set_resolution
设置 GTK_PRINT_SETTINGS_RESOLUTION、GTK_PRINT_SETTINGS_RESOLUTION_X 和 GTK_PRINT_SETTINGS_RESOLUTION_Y 的值。
语法
参数
settings- 一GtkPrintSettings
resolution- 分辨率以 dpi 为单位
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_resolution_xy ----

gtk_print_settings_set_resolution_xy
设置 GTK_PRINT_SETTINGS_RESOLUTION，GTK_PRINT_SETTINGS_RESOLUTION_X andGTK_PRINT_SETTINGS_RESOLUTION_Y 的值。
语法
参数
settings- 一GtkPrintSettings
resolution_x- 以 dpi 为单位的水平分辨率
resolution_y- 以 dpi 为单位的垂直分辨率
2.16 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_reverse ----

gtk_print_settings_set_reverse
设置GTK_PRINT_SETTINGS_REVERSE的值。
语法
参数
settings- 一GtkPrintSettings
reverse- 是否反转输出
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_scale ----

gtk_print_settings_set_scale
设置GTK_PRINT_SETTINGS_SCALE的值。
语法
参数
settings- 一GtkPrintSettings
scale- 百分比中的刻度
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_set_use_color ----

gtk_print_settings_set_use_color
设置GTK_PRINT_SETTINGS_USE_COLOR的值。
语法
参数
settings- 一GtkPrintSettings
use_color- 是否使用颜色
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_to_file ----

gtk_print_settings_to_file
此功能将打印设置从设置保存到file_name。如果无法加载文件，则错误设置为 or。GFileErrorGKeyFileError
语法
参数
settings- 一GtkPrintSettings
file_name- 要保存到的文件。[类型文件名]
error- 返回错误的位置，或 NULL。[允许-无]
返回
成功时真
自 2.12 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_to__file ----

gtk_print_settings_to_key_file
gtk_print_settings_to_key_file?()
此功能将打印设置从设置添加到key_file。
语法
参数
settings- 一GtkPrintSettings
key_file- 将打印设置保存到GKeyFile
group_name- 要在key_file中添加设置的组，或者使用默认值的NULL ？打印设置？
自 2.1 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_settings_unset ----

gtk_print_settings_unset
删除与键关联的任何值。这与将值设置为 NULL 具有相同的效果。
语法
参数
settings- 一GtkPrintSettings
key- 一把钥匙
自 2.10 起
另请参见
GtkPrintSettings


------------ KeyGTK3gtk_print_unix_dialog_add_custom_tab ----

gtk_print_unix_dialog_add_custom_tab
将自定义选项卡添加到打印对话框。
语法
参数
dialog- 一GtkPrintUnixDialog
child- 要放入自定义选项卡中的小部件
tab_label- 用作选项卡标签的小部件
自 2.10 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_current_page ----

gtk_print_unix_dialog_get_current_page
获取 的当前页。GtkPrintUnixDialog
语法
参数
dialog- 一GtkPrintUnixDialog
返回
对话框的当前页面
自 2.10 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_embed_page_setup ----

gtk_print_unix_dialog_get_embed_page_setup
获取属性的值。?embed-page-setup?
语法
参数
dialog- 一GtkPrintUnixDialog
返回
是否有选择
自 2.18 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_has_selection ----

gtk_print_unix_dialog_get_has_selection
获取属性的值。?has-selection?
语法
参数
dialog- 一GtkPrintUnixDialog
返回
是否有选择
自 2.18 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_manual_capabilities ----

gtk_print_unix_dialog_get_manual_capabilities
获取属性的值。?manual-capabilities?
语法
参数
dialog- 一GtkPrintUnixDialog
返回
打印功能
自 2.1 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_page_setup ----

gtk_print_unix_dialog_get_page_setup
获取 由 使用的页面设置。GtkPrintUnixDialog
语法
参数
dialog- 一GtkPrintUnixDialog
返回
对话框的页面设置。[无转移]
自 2.10 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_page_setup_set ----

gtk_print_unix_dialog_get_page_setup_set
获取 由 使用的页面设置。GtkPrintUnixDialog
语法
参数
dialog- 一GtkPrintUnixDialog
返回
页面设置是否由用户设置。
自 2.18 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_selected_printer ----

gtk_print_unix_dialog_get_selected_printer
获取当前选定的打印机。
语法
参数
dialog- 一GtkPrintUnixDialog
返回
当前选定的打印机。[无转移]
自 2.10 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_settings ----

gtk_print_unix_dialog_get_settings
获取一个新对象，该对象表示打印对话框中的当前值。请注意，这将创建一个新的对象，如果不想保留它，则需要取消引用它。GtkPrintSettings
语法
参数
dialog- 一GtkPrintUnixDialog
返回
具有对话框中的值的新对象GtkPrintSettings
自 2.10 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_get_support_selection ----

gtk_print_unix_dialog_get_support_selection
获取属性的值。?support-selection?
语法
参数
dialog- 一GtkPrintUnixDialog
返回
应用程序是否支持打印所选内容
自 2.18 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_new ----

gtk_print_unix_dialog_new
创建新的 .GtkPrintUnixDialog
语法
参数
title- 对话框的标题，或 NULL。[允许-无]
parent- 对话框的瞬态父级，或 NULL。[允许-无]
返回
一个新的GtkPrintUnixDialog
自 2.10 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_set_current_page ----

gtk_print_unix_dialog_set_current_page
设置当前页码。如果current_page不是 -1，这将启用要打印的页面范围的当前页面选择。
语法
参数
dialog- 一GtkPrintUnixDialog
current_page- 当前页码。
自 2.10 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_set_embed_page_setup ----

gtk_print_unix_dialog_set_embed_page_setup
将页面大小组合框和方向组合框嵌入到页面设置页中。
语法
参数
dialog- 一GtkPrintUnixDialog
embed- 嵌入页面设置选择
自 2.18 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_set_has_selection ----

gtk_print_unix_dialog_set_has_selection
设置所选内容是否存在。
语法
参数
dialog- 一GtkPrintUnixDialog
has_selection- TRUE 表示存在选择
自 2.18 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_set_manual_capabilities ----

gtk_print_unix_dialog_set_manual_capabilities
这使您可以指定应用程序支持的打印功能。例如，如果您可以处理缩放输出，那么您将通过。如果您没有通过该标记，则只有在打印系统自动处理缩放时，对话框才会允许您选择比例。GTK_PRINT_CAPABILITY_SCALE
语法
参数
dialog- 一GtkPrintUnixDialog
capabilities- 应用程序的打印功能
自 2.10 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_set_page_setup ----

gtk_print_unix_dialog_set_page_setup
设置 的页面设置。GtkPrintUnixDialog
语法
参数
dialog- 一GtkPrintUnixDialog
page_setup- 一GtkPageSetup
自 2.10 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_set_settings ----

gtk_print_unix_dialog_set_settings
为 设置 .通常，这用于在显示打印对话框之前从以前的打印操作中恢复保存的打印设置。GtkPrintSettingsGtkPrintUnixDialog
语法
参数
dialog- 一GtkPrintUnixDialog
settings- a 或 NULL。[允许-无]GtkPrintSettings
自 2.10 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3gtk_print_unix_dialog_set_support_selection ----

gtk_print_unix_dialog_set_support_selection
设置打印对话框是否允许用户打印选区。
语法
参数
dialog- 一GtkPrintUnixDialog
support_selection- TRUE 允许打印选择
自 2.18 起
另请参见
GtkPrintUnixDialog


------------ KeyGTK3GTK_PRIORITY_RESIZE ----

GTK_PRIORITY_RESIZE
GTK_PRIORITY_RESIZE
将此优先级用于与大小分配相关的功能。GTK+在内部使用它来计算小部件的大小。此优先级高于GDK_PRIORITY_REDRAW以避免调整刚刚重绘的小部件的大小。
另请参见
gtk3-General


------------ KeyGTK3gtk_progress_bar_get_ellipsize ----

gtk_progress_bar_get_ellipsize
返回进度条的椭圆位置。请参见 gtk_progress_bar_set_ellipsize（）。
语法
参数
pbar- 一GtkProgressBar
返回
PangoEllipsizeMode
自 2.6 起
另请参见
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_get_fraction ----

gtk_progress_bar_get_fraction
返回已完成任务的当前部分。
语法
参数
pbar- 一GtkProgressBar
返回
从 0.0 到 1.0 的分数
另请参见
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_get_inverted ----

gtk_progress_bar_get_inverted
获取由 gtk_progress_bar_set_inverted（） 设置的值。
语法
参数
pbar- 一GtkProgressBar
返回
如果进度条反转，则为 TRUE
另请参见
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_get_pulse_step ----

gtk_progress_bar_get_pulse_step
检索使用 gtk_progress_bar_set_pulse_step（） 设置的脉冲步长。
语法
参数
pbar- 一GtkProgressBar
返回
从 0.0 到 1 的分数。
另请参见
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_get_show_text ----

gtk_progress_bar_get_show_text
获取属性的值。请参见 gtk_progress_bar_set_show_text（）。?show-text?
语法
参数
pbar- 一GtkProgressBar
返回
如果文本显示在进度条中，则为 TRUE
自 3.0 起
另请参见
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_get_text ----

gtk_progress_bar_get_text
检索叠加在进度条上显示的文本（如果有），否则为 NULL。返回值是对文本的引用，而不是文本的副本，因此，如果您更改进度栏中的文本，则返回值将变为无效。
语法
参数
pbar- 一GtkProgressBar
返回
文本，或空;此字符串归小部件所有，不应修改或释放。
另请参见
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_new ----

gtk_progress_bar_new
创建新的 .GtkProgressBar
返回
一个。GtkProgressBar
另请参见
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_pulse ----

gtk_progress_bar_pulse
表示已经取得了一些进展，但您不知道取得了多少进展。导致进度条进入 ？活动模式，？其中块来回跳跃。每次调用gtk_progress_bar_pulse（）都会导致块移动一点点（移动器脉冲的数量由gtk_progress_bar_set_pulse_step（）决定）。
语法
参数
pbar- 一GtkProgressBar
另请参见
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_set_ellipsize ----

gtk_progress_bar_set_ellipsize
设置用于椭圆化（添加省略号：“...”）文本的模式（如果没有足够的空间来呈现整个字符串）。
语法
参数
pbar- 一GtkProgressBar
mode- 一PangoEllipsizeMode
自 2.6 起
另请参见
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_set_fraction ----

gtk_progress_bar_set_fraction
导致进度条“填写”柱的给定分数。分数应介于 0.0 和 1.0 之间（包括 0.0 和 1.0）。
语法
参数
pbar- 一GtkProgressBar
fraction- 已完成任务的一小部分
另请参见
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_set_inverted ----

gtk_progress_bar_set_inverted
进度条通常从上到下或从左到右增长。倒置的进度条以相反的方向增长。
语法
参数
pbar- 一GtkProgressBar
inverted- TRUE可反转进度条
另请参见
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_set_pulse_step ----

gtk_progress_bar_set_pulse_step
设置总进度条长度的分数，以将每次调用的抖动块移动到gtk_progress_bar_pulse（）。
语法
参数
pbar- 一GtkProgressBar
fraction- 介于 0.0 和 1.0 之间的分数
另请参见
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_set_show_text ----

gtk_progress_bar_set_show_text
设置进度条是否显示叠加在栏上的文本。显示的文本可以是属性的值，或者如果为 NULL，则为百分比形式的值。若要使进度条的样式和大小适合包含文本（即使实际文本为空），请设置为TRUE和空字符串（不是 NULL）。?text??fraction??show-text??text?
语法
参数
pbar- 一GtkProgressBar
show_text- 是否显示叠加文本
自 3.0 起
另请参见
GtkProgressBar


------------ KeyGTK3gtk_progress_bar_set_text ----

gtk_progress_bar_set_text
使给定文本叠加在进度条上。如果文本为 NULL 且为 TRUE，则 的当前值将显示为百分比。如果文本为非 NULL 且为 TRUE，则将显示该文本。在这种情况下，它不会显示进度百分比。如果文本是空字符串，则进度条的样式和大小仍适合包含文本，只要 为 TRUE。?show-text??fraction??show-text??show-text?
语法
参数
pbar- 一GtkProgressBar
text- UTF-8 字符串，或 NULL。[允许-无]
另请参见
GtkProgressBar


------------ KeyGTK3gtk_propagate_event ----

gtk_propagate_event
将事件发送到小部件，并将事件传播到父小部件如果事件仍未处理。GTK+从GDK接收的事件通常以gtk_main_do_event（）开头。根据事件的类型，模式对话，抓取等的存在，事件可能会被传播;如果是这样，则此函数used.gtk_propagate_event（） 调用 gtk_widget_event（） 在每个小部件上，它宣布要将事件发送到。所以gtk_widget_event（）是最低级别的函数;它只是在小部件上发出并可能特定于事件的信号。gtk_propagate_event（） 是一个更高的级别，gtk_main_do_event（） 是最高级别。总而言之，您很可能不想使用这些功能中的任何一个;很少需要合成事件。几乎有更好的方法来实现你的目标。例如，usegdk_window_invalidate_rect（） 或 gtk_widget_queue_draw（） 而不是编造暴露事件。?event?
语法
参数
widget- 一GtkWidget
event- 一个事件[br \=“”
另请参见
gtk3-General


------------ KeyGTK3gtk_radio_action_get_current_value ----

gtk_radio_action_get_current_value
gtk_radio_action_get_current_value自 3.10 版起已弃用，不应在新编写的代码中使用。获取操作所属组的当前活动成员的 value 属性。
语法
参数
action- 一GtkRadioAction
返回
当前活动组成员的值
2.4 起
另请参见
GtkRadioAction


------------ KeyGTK3gtk_radio_action_get_group ----

gtk_radio_action_get_group
gtk_radio_action_get_group自 3.10 版起已弃用，不应在新编写的代码中使用。返回表示此对象的单选按钮组的列表。请注意，返回的列表仅在对组进行下一次更改之前有效。设置一组单选按钮组的常用方法如下：12345678910[/语法] [语法]GSList *组 = NULL;GtkRadioAction *action;而 （ ...要添加更多操作.../） { action = gtk_radio_action_new （...）; gtk_radio_action_set_group （action， group）; group = gtk_radio_action_get_group （action）; }[/语法]
语法
参数
action- 动作对象
返回
表示此对象的单选按钮组的列表。[元素型GtkRadioAction][无转移]
2.4 起
另请参见
GtkRadioAction


------------ KeyGTK3gtk_radio_action_join_group ----

gtk_radio_action_join_group
gtk_radio_action_join_group自版本 3.10 起已弃用，不应在新编写的代码中使用。将一个无线电操作对象加入到另一个无线电操作对象的组中。在语言绑定中使用它，而不是gtk_radio_action_get_group（） 和 gtk_radio_action_set_group（） 方法设置一组无线电操作的常用方法如下：12345678910[/语法] [语法]GtkRadioAction *action;GtkRadioAction *last_action;而 （ ...要添加更多操作.../） { action = gtk_radio_action_new （...）; gtk_radio_action_join_group （action， last_action）; last_action = action; }[/语法]
语法
参数
action- 动作对象
group_source- 我们正在加入的组的无线电操作对象，或 NULL 从其组中删除无线电操作。[允许-无]
自 3.0 起
另请参见
GtkRadioAction


------------ KeyGTK3gtk_radio_action_new ----

gtk_radio_action_new
gtk_radio_action_new自版本 3.10 起已弃用，不应在新编写的代码中使用。创建新对象。要将操作添加到 a 并为操作设置加速器，请调用 gtk_action_group_add_action_with_accel（）。GtkRadioActionGtkActionGroup
语法
参数
name- 操作的唯一名称
label- 显示在菜单项和按钮上的标签，或 NULL。[允许-无]
tooltip- 此操作的工具提示，或 NULL。[允许-无]
stock_id- 要在表示此操作的小部件中显示的股票图标，或 NULL。[允许-无]
value- 如果选择了此操作，则gtk_radio_action_get_current_value（） 应返回的值。
返回
一个新的GtkRadioAction
2.4 起
另请参见
GtkRadioAction


------------ KeyGTK3gtk_radio_action_set_current_value ----

gtk_radio_action_set_current_value
gtk_radio_action_set_current_value自 3.10 版起已弃用，不应在新编写的代码中使用。将当前活动的组成员设置为具有值属性current_value的成员。
语法
参数
action- 一GtkRadioAction
current_value- 新值
自 2.1 起
另请参见
GtkRadioAction


------------ KeyGTK3gtk_radio_action_set_group ----

gtk_radio_action_set_group
gtk_radio_action_set_group自 3.10 版起已弃用，不应在新编写的代码中使用。设置无线电操作对象的单选按钮组。
语法
参数
action- 动作对象
group- 表示单选按钮组的列表，或 NULL。[元素型GtkRadioAction][允许-无]
2.4 起
另请参见
GtkRadioAction


------------ KeyGTK3gtk_radio_button_get_group ----

gtk_radio_button_get_group
检索分配给单选按钮的组。
语法
参数
radio_button- 一个.GtkRadioButton
返回
包含同一组中所有单选按钮的链接列表radio_button。返回的列表归单选按钮所有，不得修改或释放。[元素型GtkRadioButton][无转移]
另请参见
GtkRadioButton


------------ KeyGTK3gtk_radio_button_join_group ----

gtk_radio_button_join_group
将一个对象联接到另一个对象的组中在语言绑定中使用它，而不是gtk_radio_button_get_group（） 和 gtk_radio_button_set_group（） 方法设置一组单选按钮的常用方法是： 12345678910[/syntax] [syntax]GtkRadioButton *radio_button;GtkRadioButton *last_button;while （ ...更多按钮要添加...） { radio_button = gtk_radio_button_new （...）; gtk_radio_button_join_group （radio_button， last_button）; last_button = radio_button; }[/语法]GtkRadioButtonGtkRadioButton
语法
参数
radio_button- 对象GtkRadioButton
group_source- 我们加入的组的单选按钮对象，或 NULL 从其组中删除单选按钮。[允许-无]
自 3.
另请参见
GtkRadioButton


------------ KeyGTK3gtk_radio_button_new ----

gtk_radio_button_new
创建新的 .为了具有任何实际价值，应该将小部件打包到单选按钮中。GtkRadioButton
语法
参数
group- 一个现有的无线电按钮组，如果您正在创建新组，则为 NULL。[元素型GtkRadioButton][允许-无]
返回
一个新的单选按钮
另请参见
GtkRadioButton


------------ KeyGTK3gtk_radio_button_new_from_widget ----

gtk_radio_button_new_from_widget
创建一个新的 ，将其添加到同一组asradio_group_member。与gtk_radio_button_new（）一样，小部件应打包到单选按钮中。GtkRadioButton
语法
参数
radio_group_member- 现有的.[允许-无]GtkRadioButton
返回
一个新的单选按钮。[无转移]
另请参见
GtkRadioButton


------------ KeyGTK3gtk_radio_button_new_with_label ----

gtk_radio_button_new_with_label
创建带有文本标签的新版本。GtkRadioButton
语法
参数
group- 一个现有的无线电按钮组，如果您正在创建新组，则为 NULL。[元素型GtkRadioButton][允许-无]
label- 要显示在单选按钮旁边的文本标签。
返回
一个新的单选按钮。
另请参见
GtkRadioButton


------------ KeyGTK3gtk_radio_button_new_with_label_from_widget ----

gtk_radio_button_new_with_label_from_widget
创建一个带有文本标签的新标签，将其添加到与radio_group_member相同的组中。GtkRadioButton
语法
参数
radio_group_member- 小部件，用于从中获取单选按钮组或 NULL。[允许-无]
label- 要在单选按钮旁边显示的文本字符串。
返回
一个新的单选按钮。[无转移]
另请参见
GtkRadioButton


------------ KeyGTK3gtk_radio_button_new_with_mnemonic ----

gtk_radio_button_new_with_mnemonic
创建一个包含标签的新标签，将其添加到与组相同的组中。标签将创建usinggtk_label_new_with_mnemonic（），因此标签中的下划线表示按钮的中间项。GtkRadioButton
语法
参数
group- 单选按钮组，或 NULL。[元素型GtkRadioButton][允许-无]
label- 按钮的文本，在字母字符前面有下划线
返回
一个新的GtkRadioButton
另请参见
GtkRadioButton


------------ KeyGTK3gtk_radio_button_new_with_mnemonic_from_widget ----

gtk_radio_button_new_with_mnemonic_from_widget
创建包含标签的新标签。标签将使用gtk_label_new_with_mnemonic（）创建，因此下划线标签指示按钮的助记符。GtkRadioButton
语法
参数
radio_group_member- 小部件，用于从中获取单选按钮组或 NULL。[允许-无]
label- 按钮的文本，在字母字符前面有下划线
返回
一个新的.[无转移]GtkRadioButton
另请参见
GtkRadioButton


------------ KeyGTK3gtk_radio_button_set_group ----

gtk_radio_button_set_group
设置一个 ？ 的组。应该注意的是，这不会以任何方式更改界面的布局，因此，如果要更改组，则可能需要重新排列用户界面以反映这些更改。GtkRadioButton
语法
参数
radio_button- 一个.GtkRadioButton
group- 现有的单选按钮组，例如从 gtk_radio_button_get_group（） 返回的组，或 NULL。[元素型GtkRadioButton][允许-无]
另请参见
GtkRadioButton


------------ KeyGTK3gtk_radio_menu_item_get_group ----

gtk_radio_menu_item_get_group
返回单选菜单项所属的组，作为 的。该列表属于 GTK+，不应被释放。GListGtkRadioMenuItem
语法
参数
radio_menu_item- 一GtkRadioMenuItem
返回
radio_menu_item群。[element-type GtkRadioMenuItem][无转移][/代码
另请参见
GtkRadioMenuItem


------------ KeyGTK3gtk_radio_menu_item_new ----

gtk_radio_menu_item_new
创建新的 .GtkRadioMenuItem
语法
参数
group- 要将 theradio 菜单项附加到的组，或 NULL。[element-type GtkRadioMenuItem][允许-无]
返回
一个新的GtkRadioMenuItem
另请参见
GtkRadioMenuItem


------------ KeyGTK3gtk_radio_menu_item_new_from_widget ----

gtk_radio_menu_item_new_from_widget
创建一个新的，将其添加到与组相同的组中。GtkRadioMenuItem
语法
参数
group- 现有GtkRadioMenuItem
返回
新的 .[无转移]GtkRadioMenuItem
2.4 起
另请参见
GtkRadioMenuItem


------------ KeyGTK3gtk_radio_menu_item_new_with_label ----

gtk_radio_menu_item_new_with_label
创建一个新的，其子项是一个简单的 .GtkRadioMenuItemGtkLabel
语法
参数
group- 将单选菜单项分组在里面，或空。[element-type GtkRadioMenuItem][允许-无]
label- 标签的文本
返回
一个新的.[无转移]GtkRadioMenuItem
另请参见
GtkRadioMenuItem


------------ KeyGTK3gtk_radio_menu_item_new_with_label_from_widget ----

gtk_radio_menu_item_new_with_label_from_widget
创建一个新的 GtkRadioMenuItem，其子项是一个简单的 GtkLabel。新的将添加到与组相同的组中。GtkRadioMenuItem
语法
参数
group- 现有GtkRadioMenuItem
label- 标签的文本
返回
新的 .[无转移]GtkRadioMenuItem
2.4 起
另请参见
GtkRadioMenuItem


------------ KeyGTK3gtk_radio_menu_item_new_with_mnemonic ----

gtk_radio_menu_item_new_with_mnemonic
创建包含标签的新标签。标签将使用gtk_label_new_with_mnemonic（）创建，因此下划线标签指示菜单项的助记符。GtkRadioMenuItem
语法
参数
group- 将单选菜单项分组在里面，或空。[element-type GtkRadioMenuItem][允许-无]
label- 按钮的文本，在字母字符前面有下划线
返回
一个新的GtkRadioMenuItem
另请参见
GtkRadioMenuItem


------------ KeyGTK3gtk_radio_menu_item_new_with_mnemonic_from_widget ----

gtk_radio_menu_item_new_with_mnemonic_from_widget
创建一个包含标签的新 GtkRadioMenuItem。标签将使用gtk_label_new_with_mnemonic（）创建，因此标签中的下划线表示菜单项的助记符。新的将添加到与组相同的组中。GtkRadioMenuItem
语法
参数
group- 现有GtkRadioMenuItem
label- 按钮的文本，在字母字符前面有下划线
返回
新的 .[无转移]GtkRadioMenuItem
2.4 起
另请参见
GtkRadioMenuItem


------------ KeyGTK3gtk_radio_menu_item_set_group ----

gtk_radio_menu_item_set_group
设置单选按钮菜单项的组，或对其进行更改。
语法
参数
radio_menu_item- 一个.GtkRadioMenuItem
group- 新组，或 NULL。[element-type GtkRadioMenuItem][允许-无]
另请参见
GtkRadioMenuItem


------------ KeyGTK3gtk_radio_tool_button_get_group ----

gtk_radio_tool_button_get_group
返回按钮组按钮所属的单选按钮。
语法
参数
button- 一GtkRadioToolButton
返回
该组按钮长到。[无转移][元素型GtkRadioButton]
2.4 起
另请参见
GtkRadioToolButton


------------ KeyGTK3gtk_radio_tool_button_new ----

gtk_radio_tool_button_new
创建一个新的 ，将其添加到组。GtkRadioToolButton
语法
参数
group- 存在单选按钮组，如果要创建新组，则为 NULL。[允许-无][元素型GtkRadioButton]
返回
新GtkRadioToolButton
2.4 起
另请参见
GtkRadioToolButton


------------ KeyGTK3gtk_radio_tool_button_new_from_stock ----

gtk_radio_tool_button_new_from_stock
gtk_radio_tool_button_new_from_stock自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_radio_tool_button_new（）。创建一个新的 ，将其添加到组。新品将包含stock_id所指示的库存项中的图标和标签。GtkRadioToolButtonGtkRadioToolButton
语法
参数
group- 现有的单选按钮组，如果要创建新组，则为 NULL。[允许-无][元素型GtkRadioButton]
stock_id- 库存项目的名称
返回
新GtkRadioToolButton
2.4 起
另请参见
GtkRadioToolButton


------------ KeyGTK3gtk_radio_tool_button_new_from_widget ----

gtk_radio_tool_button_new_from_widget
创建一个新的，将其添加到与 gruup 相同的组中GtkRadioToolButton
语法
参数
group- 现有 或空。[允许-无]GtkRadioToolButton
返回
新的 .[无转移]GtkRadioToolButton
2.4 起
另请参见
GtkRadioToolButton


------------ KeyGTK3gtk_radio_tool_button_new_with_stock_from_widget ----

gtk_radio_tool_button_new_with_stock_from_widget
gtk_radio_tool_button_new_with_stock_from_widget自版本 3.10 起已弃用，不应在新编写的code.gtk_radio_tool_button_new_from_widgetCreates将其添加到与组相同的组中。新品将包含stock_id所指示的库存项中的图标和标签。GtkRadioToolButtonGtkRadioToolButton
语法
参数
group- 现有的.[允许-无]GtkRadioToolButton
stock_id- 库存项目的名称
返回
一个新的.[无转移]GtkRadioToolButton
2.4 起
另请参见
GtkRadioToolButton


------------ KeyGTK3gtk_radio_tool_button_set_group ----

gtk_radio_tool_button_set_group
将按钮添加到组，将其从之前所属的组中删除。
语法
参数
button- 一GtkRadioToolButton
group- 现有的单选按钮组，或 NULL。[元素型GtkRadioButton][允许-无]
自 2.
另请参见
GtkRadioToolButton


------------ KeyGTK3gtk_range_get_adjustment ----

gtk_range_get_adjustment
获取哪个是 ？模型？的对象。有关详细信息，请参见 gtk_range_set_adjustment（）。返回值没有添加引用，因此不应取消引用。GtkAdjustmentGtkRange
语法
参数
range- 一GtkRange
返回
一个。[无转移]GtkAdjustment
另请参见
GtkRange


------------ KeyGTK3gtk_range_get_fill_level ----

gtk_range_get_fill_level
获取填充级别指示器的当前位置。
语法
参数
range- 一GtkRange
返回
当前填充级别
自 2.12 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_get_flippable ----

gtk_range_get_flippable
获取由 gtk_range_set_flippable（） 设置的值。
语法
参数
range- 一GtkRange
返回
如果范围是可翻转的，则为 TRUE
自 2.18 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_get_inverted ----

gtk_range_get_inverted
获取由 gtk_range_set_inverted（） 设置的值。
语法
参数
range- 一GtkRange
返回
如果范围反转，则为 TRUE
另请参见
GtkRange


------------ KeyGTK3gtk_range_get_lower_stepper_sensitivity ----

gtk_range_get_lower_stepper_sensitivity
获取步进器的敏感度策略，该策略指向 GtkRange 调整的“下端”。
语法
参数
range- 一GtkRange
返回
下步进器的灵敏度策略。
自 2.10 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_get_min_slider_size ----

gtk_range_get_min_slider_size
此函数主要用于子类。请参见gtk_range_set_min_slider_size（）。GtkRange
语法
参数
range- 一GtkRange
返回
范围的滑块的最小大小。
自 2.20 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_get_range_rect ----

gtk_range_get_range_rect
此函数以小部件>窗口坐标返回包含范围槽及其步进器的区域。此函数主要用于子类。GtkRange
语法
参数
range- 一GtkRange
range_rect- 范围矩形的返回位置。[输出]
自 2.20 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_get_restrict_to_fill_level ----

gtk_range_get_restrict_to_fill_level
获取范围是否限制为填充级别。
语法
参数
range- 一GtkRange
返回
如果范围限制为填充水平，则为 TRUE。
自 2.12 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_get_round_digits ----

gtk_range_get_round_digits
获取要将值舍入到何时更改的位数。看。?change-value?
语法
参数
range- 一GtkRange
返回
要舍入到的位数
自 2.24 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_get_show_fill_level ----

gtk_range_get_show_fill_level
获取范围是否以图形方式显示填充级别。
语法
参数
range- 一GtkRange
返回
如果范围显示填充级别，则为 TRUE。
自 2.12 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_get_slider_range ----

gtk_range_get_slider_range
此函数返回沿长维度的滑块范围，以小部件>窗口坐标。此函数主要用于子类。GtkRange
语法
参数
range- 一GtkRange
slider_start- 返回滑块的起始位置，或 NULL。[输出][允许-无]
slider_end- 滑块发送的返回位置，或 NULL。[输出][允许-无]
自 2.20 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_get_slider_size_fixed ----

gtk_range_get_slider_size_fixed
此函数主要用于子类。请参见gtk_range_set_slider_size_fixed（）。GtkRange
语法
参数
range- 一GtkRange
返回
范围的滑块是否具有固定大小。
自 2.20 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_get_upper_stepper_sensitivity ----

gtk_range_get_upper_stepper_sensitivity
获取步进器的敏感度策略，该策略指向 GtkRange 调整的“上端”。
语法
参数
range- 一GtkRange
返回
步进器的灵敏度策略。
自 2.10 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_get_value ----

gtk_range_get_value
获取区域的当前值。
语法
参数
range- 一GtkRange
返回
范围的当前值。
另请参见
GtkRange


------------ KeyGTK3gtk_range_set_adjustment ----

gtk_range_set_adjustment
设置要用作 “模型？此范围宽度的对象。调整指示当前范围值、最小和最大范围值、用于键绑定和滚动的步长/页增量以及页面大小。页面大小通常为 0，对于 为 非零，并指示正在滚动的构件的可见区域的大小。页面大小会影响滚动条滑块的大小。GtkScaleGtkScrollbar
语法
参数
range- 一GtkRange
adjustment- 一GtkAdjustment
另请参见
GtkRange


------------ KeyGTK3gtk_range_set_fill_level ----

gtk_range_set_fill_level
设置填充级别指示器的新位置。“填充级别”可能最好用它最突出的用例来描述，这是预缓冲在流媒体播放器中的量的指标。在该用例中，范围的值将指示当前播放位置，填充级别将是文件/流已下载到的位置。这个预缓冲量可以显示在范围的槽上，并且可以与槽分开主题化。要启用填充级别显示，请使用gtk_range_set_show_fill_level（）。范围默认不显示填充级别。此外，还可以将范围的滑块位置限制为小于填充水平的值。这是控制器由 gtk_range_set_restrict_to_fill_level（） 和默认启用的。
语法
参数
range- 一GtkRange
fill_level- 液位指示器的新位置
自 2.12 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_set_flippable ----

gtk_range_set_flippable
如果一个范围是可翻转的，那么如果它GTK_TEXT_DIR_RTL，它将切换其方向。请参见gtk_widget_get_direction（）。
语法
参数
range- 一GtkRange
flippable- TRUE使范围可翻转
自 2.18 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_set_increments ----

gtk_range_set_increments
设置区域的步骤和页面大小。当用户单击箭头或通过箭头键移动时，将使用步长。例如，通过“向上翻页”或“向下翻页”键移动时会使用页面大小。GtkScrollbarGtkScale
语法
参数
range- 一GtkRange
step- 步长
page- 页面大小
另请参见
GtkRange


------------ KeyGTK3gtk_range_set_inverted ----

gtk_range_set_inverted
范围通常从较低的值移动到较高的值，因为滑块从上到下或从左到右移动。反转距离在顶部或右侧具有更高的值，而不是在底部或左侧。
语法
参数
range- 一GtkRange
setting- TRUE 可反转范围
另请参见
GtkRange


------------ KeyGTK3gtk_range_set_lower_stepper_sensitivity ----

gtk_range_set_lower_stepper_sensitivity
设置步进器的灵敏度策略，该策略指向 GtkRange 调整的“下端”。
语法
参数
range- 一GtkRange
sensitivity- 下步进器的灵敏度策略。
自 2.10 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_set_min_slider_size ----

gtk_range_set_min_slider_size
设置范围的滑块的最小大小。此函数主要用于子类。GtkRange
语法
参数
range- 一GtkRange
min_size- 滑块的最小尺寸
自 2.20 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_set_range ----

gtk_range_set_range
设置 中的允许值，并将范围值钳制为介于最小值和最大值之间（如果范围具有非零页大小，则将其固定在最小值和最大值 （ 页面大小）之间。GtkRange
语法
参数
range- 一GtkRange
min- 最小范围值
max- 最大范围值
另请参见
GtkRange


------------ KeyGTK3gtk_range_set_restrict_to_fill_level ----

gtk_range_set_restrict_to_fill_level
Sets whether the slider is restricted to the fill level. Seegtk_range_set_fill_level() for a general description of the filllevel concept.
Syntax
Parameters
range  -  	A GtkRange
restrict_to_fill_level  -  	Whether the fill level restricts slider movement.
Since 2.12
See Also
GtkRange


------------ KeyGTK3gtk_range_set_round_digits ----

gtk_range_set_round_digits
设置要将值舍入到何时更改的位数。看。?change-value?
语法
参数
range- 一GtkRange
round_digits- 以数字为单位的精度，或 -1
自 2.24 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_set_show_fill_level ----

gtk_range_set_show_fill_level
设置是否在槽上显示图形填充水平。Seegtk_range_set_fill_level（） 用于填充级别概念的一般描述。
语法
参数
range- 一GtkRange
show_fill_level- 是否显示填充水平指示器图形。
自 2.12 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_set_slider_size_fixed ----

gtk_range_set_slider_size_fixed
设置范围的滑块是具有固定大小，还是具有取决于其调整的页面大小的大小。此函数主要用于子类。GtkRange
语法
参数
range- 一GtkRange
size_fixed- TRUE 使滑块大小恒定
自 2.2 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_set_upper_stepper_sensitivity ----

gtk_range_set_upper_stepper_sensitivity
设置步进器的灵敏度策略，该策略指向 GtkRange 调整的“上”端。
语法
参数
range- 一GtkRange
sensitivity- 上步进器的灵敏度策略。
自 2.10 起
另请参见
GtkRange


------------ KeyGTK3gtk_range_set_value ----

gtk_range_set_value
设置范围的当前值;如果该值超出最小值或最大范围值，则将其夹紧以适合其内部。如果值发生变化，范围将发出信号。?value-changed?
语法
参数
range- 一GtkRange
value- 范围的新值
另请参见
GtkRange


------------ KeyGTK3gtk_rc_add_default_file ----

gtk_rc_add_default_file
gtk_rc_add_default_file自 3.0 版起已弃用，不应在新编写的代码中使用。与自定义一起使用 将文件添加到要在 gtk_init（） 末尾解析的文件列表中。GtkStyleContextGtkStyleProvider
语法
参数
filename- 文件的路径名。如果文件名不是绝对的，则在当前目录中搜索它。[类型文件名]
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_find_module_in_path ----

gtk_rc_find_module_in_path
gtk_rc_find_module_in_path自 3.0 版起已弃用，不应在新编写的代码中使用。请改用。在 GTK+ 搜索路径中搜索主题引擎。此功能对应用程序没有用处，不应使用。GtkCssProvider
语法
参数
module_file- 主题引擎的名称
返回
文件名，如果找到（必须使用g_free（）），否则为 NULL。[类型文件名]
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_find_pixmap_in_path ----

gtk_rc_find_pixmap_in_path
gtk_rc_find_pixmap_in_path自 3.0 版起已弃用，不应在新编写的代码中使用。请改用。在 pixmap 路径中查找指定 的文件。如果未找到该文件，它将输出一条警告消息 usingg_warning（） 并返回 NULL。GtkCssProviderGtkSettings
语法
参数
settings- 一GtkSettings
scanner- 用于获取警告消息的行号信息的扫描仪，或 NULL
pixmap_file- 要定位的像素映射文件的名称。
返回
文件名。[类型文件名]
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_get_default_files ----

gtk_rc_get_default_files
gtk_rc_get_default_files自 3.0 版起已弃用，不应在新编写的代码中使用。使用代替在 gtk_init（） 末尾重新删除将解析的 RC 文件的当前列表。GtkStyleContext
返回
以 NULL 结尾的文件名数组。此内存归 GTK+ 所有，不得由应用程序释放。如果要存储此信息，则应进行复制。[传输 none][数组零终止 =1][元素类型文件名]
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_get_im_module_file ----

gtk_rc_get_im_module_file
gtk_rc_get_im_module_file自 3.0 版起已弃用，不应在新编写的代码中使用。请改用。获取 IM 模块文件的路径。有关更多详细信息，请参阅GTK_IM_MODULE_FILEenvironment变量的文档。GtkCssProvider
返回
一个新分配的字符串，其中包含列出可用于加载的 IM 模块的文件的名称。[类型文件名]
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_get_im_module_path ----

gtk_rc_get_im_module_path
gtk_rc_get_im_module_path自 3.0 版起已弃用，不应在新编写的代码中使用。请改用。获取在其中查找 IM 模块的路径。有关查找模块的更多详细信息，请参阅GTK_PATHenvironment变量的文档。此函数仅对随 GTK+ 提供的实用程序有用，在正常情况下不应由应用程序使用。GtkCssProvider
返回
新分配的字符串，其中包含要在其中查找 IM 模块的路径。[类型文件名]
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_get_module_dir ----

gtk_rc_get_module_dir
gtk_rc_get_module_dir自 3.0 版起已弃用，不应在新编写的代码中使用。请改用。返回 GTK+ 在其中查找主题引擎的目录。有关搜索主题引擎的完整信息，请参阅运行 GTK+ 应用程序中的GTK_PATH文档。GtkCssProvider
返回
目录。（必须使用 g_free（）） 释放）。[类型文件名]
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_get_style ----

gtk_rc_get_style
gtk_rc_get_style自 3.0 版起已弃用，不应在新编写的代码中使用。相反，使用查找给定构件的所有匹配的 RC 样式，将它们组合在一起，然后创建表示复合外观的样式。（GTK+ 实际上保留了以前创建的样式的缓存，因此可能不会创建新样式。GtkStyleContextGtkStyle
语法
参数
widget- 一GtkWidget
返回
生成的样式。返回的样式中没有添加引用计数，因此，如果要保存此样式，则应自行添加引用。[无转移]
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_get_style_by_paths ----

gtk_rc_get_style_by_paths
gtk_rc_get_style_by_paths自 3.0 版起已弃用，不应在新编写的代码中使用。相反，Use 通过提供用于匹配的原始组件来创建 RC 文件中定义的样式。当创建应该像小部件一样主题的伪小部件时，此功能可能很有用，但实际上没有相应的GTK +小部件。这方面的一个例子是 GNOME 画布小部件中的项目。gtk_rc_get_style（） 的操作类似于：12345[/syntax] [syntax]gtk_widget_path （widget， NULL， &path， NULL）;gtk_widget_class_path （widget， NULL， &class_path， NULL）;gtk_rc_get_style_by_paths （gtk_widget_get_settings （widget）， path， class_path， G_OBJECT_TYPE （widget））;[/语法]GtkStyleContextGtkStyle
语法
参数
settings- 一个对象GtkSettings
widget_path- 查找样式时要使用的小部件路径，如果没有与小部件路径匹配，则为 NULL。[允许-无]
class_path- 查找样式时要使用的类路径，如果没有与类路径匹配，则为 NULL。[允许-无]
type- 当与类样式匹配时，将与此类型的父类型一起使用的类型，或者G_TYPE_NONE
返回
通过与提供的路径匹配而创建的样式，如果未指定任何匹配项，则应使用默认样式，则为 NULL。返回值由 GTK+ 作为内部缓存的一部分拥有，因此，如果要保留对它的引用，则必须对返回值调用 g_object_ref（）。[无转移]
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_get_theme_dir ----

gtk_rc_get_theme_dir
gtk_rc_get_theme_dir自 3.0 版起已弃用，不应在新编写的代码中使用。请改用。返回应在其中安装主题的标准目录。（GTK+ 实际上并不使用此目录。GtkCssProvider
返回
目录（必须使用 g_free（）） 释放）。
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_parse ----

gtk_rc_parse
gtk_rc_parse自 3.0 版起已弃用，不应在新编写的代码中使用。请改用。分析给定的资源文件。GtkCssProvider
语法
参数
filename- 要解析的文件的文件名。如果文件名不是绝对的，则在当前目录中搜索它。
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_parse_color ----

gtk_rc_parse_color
gtk_rc_parse_color自 3.0 版起已弃用，不应在新编写的代码中使用。请改用 RC 文件中预期格式的颜色。请注意，主题引擎应使用 gtk_rc_parse_color_full（） 来支持符号颜色。GtkCssProvider
语法
参数
scanner- 一GScanner
color- 指向要在其中存储结果的 指针。[输出]GdkColor
返回
如果解析成功，G_TOKEN_NONE，否则令牌是预期的但未找到的
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_parse_color_full ----

gtk_rc_parse_color_full
gtk_rc_parse_color_full自 3.0 版起已弃用，不应在新编写的代码中使用。请改用 RC 文件中预期格式的颜色。如果样式不为 NULL，则将参考它来解决对符号颜色的引用。GtkCssProvider
语法
参数
scanner- 一GScanner
style- a 或 NULL。[允许-无]GtkRcStyle
color- 指向要在其中存储结果的 指针。[输出]GdkColor
返回
如果解析成功，G_TOKEN_NONE，否则令牌是预期的但未找到的
自 2.12 起
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_parse_priority ----

gtk_rc_parse_priority
gtk_rc_parse_priority自 3.0 版起已弃用，不应在新编写的代码中使用。请改用从 RC 文件中预期的格式中解析变量。GtkCssProviderGtkPathPriorityType
语法
参数
scanner- a（必须初始化才能解析 RC 文件）GScanner
priority- 指向变量的指针，用于存储结果。GtkPathPriorityType
返回
如果解析成功，G_TOKEN_NONE，否则该令牌是预期的但未找到的。
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_parse_state ----

gtk_rc_parse_state
gtk_rc_parse_state自 3.0 版起已弃用，不应在新编写的代码中使用。请改用从 RC 文件中预期的格式中解析变量。GtkCssProviderGtkStateType
语法
参数
scanner- a（必须初始化才能解析 RC 文件）GScanner
state- 指向要在其中存储结果的变量的指针。[输出]GtkStateType
返回
如果解析成功，G_TOKEN_NONE，否则该令牌是预期的但未找到的。
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_parse_string ----

gtk_rc_parse_string
gtk_rc_parse_string自 3.0 版起已弃用，不应在新编写的代码中使用。请改用。直接从字符串分析资源信息。GtkCssProvider
语法
参数
rc_string- 要解析的字符串。
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_property_parse_border ----

gtk_rc_property_parse_border
A 用于gtk_settings_install_property_parser（）或 gtk_widget_class_install_style_property_parser（），它以整数左、右、上、下 }“的形式解析边界，用于整数左、右、上和下。GtkRcPropertyParser
语法
参数
pspec- 一GParamSpec
gstring- 要解析的GString
property_value- a 必须包含盒装值。GValue
返回
如果 gstringcould 被解析并且property_valuehas设置为结果 ，则为 TRUE。GtkBorder
另请参见
GtkSettings


------------ KeyGTK3gtk_rc_property_parse_color ----

gtk_rc_property_parse_color
A 用于gtk_settings_install_property_parser（） 或 gtk_widget_class_install_style_property_parser（），它解析由其名称或形式{ 红色，绿色，蓝色}给出的颜色，其中红色，绿色和蓝色是0到65535之间的整数或0和1之间的浮点数。GtkRcPropertyParser
语法
参数
pspec- 一GParamSpec
gstring- 要解析的GString
property_value- a 必须保存值。GValueGdkColor
返回
如果 gstringcould 被解析并且property_valuehas设置为结果 ，则为 TRUE。GdkColor
另请参见
GtkSettings


------------ KeyGTK3gtk_rc_property_parse_enum ----

gtk_rc_property_parse_enum
与 gtk_settings_install_property_parser（） 或 gtk_widget_class_install_style_property_parser（） 一起使用，用于解析单枚举值。枚举值可以通过其名称，其昵称或数值来指定。为了与标志解析保持一致，值可能用括号括起来。GtkRcPropertyParser
语法
参数
pspec- 一GParamSpec
gstring- 要解析的GString
property_value- 必须包含枚举值的 a。GValue
返回
如果 gstringcould 被解析并且property_valuehas设置为结果 ，则为 TRUE。GEnumValue
另请参见
GtkSettings


------------ KeyGTK3gtk_rc_property_parse_flags ----

gtk_rc_property_parse_flags
与解析标志的 gtk_settings_install_property_parser（） 或 gtk_widget_class_install_style_property_parser（） 一起使用的 A。标志可以通过它们的名字，它们的昵称来指定。可以在“（flag1 | flag2 | ... ）”的形式中指定多个标志。GtkRcPropertyParser
语法
参数
pspec- 一GParamSpec
gstring- 要解析的GString
property_value- a 必须保存标志值。GValue
返回
如果解析 gstringcould 并且property_valuehas设置为生成的标志值，则为 TRUE。
另请参见
GtkSettings


------------ KeyGTK3gtk_rc_property_parse_requisition ----

gtk_rc_property_parse_requisition
A 用于 gtk_settings_install_property_parser（） 或 gtk_widget_class_install_style_property_parser（），它以“{ width， height }” 的形式解析 isquisition，表示整数的宽度和高度。GtkRcPropertyParser
语法
参数
pspec- 一GParamSpec
gstring- 要解析的GString
property_value- a 必须包含盒装值。GValue
返回
如果 gstringcould 被解析并且property_valuehas设置为结果 ，则为 TRUE。GtkRequisition
另请参见
GtkSettings


------------ KeyGTK3gtk_rc_reparse_all ----

gtk_rc_reparse_all
gtk_rc_reparse_all自 3.0 版起已弃用，不应在新编写的代码中使用。请改用。如果以前读取的任何文件的修改时间已更改，请丢弃所有样式信息，然后重新读取所有以前读取的 RC 文件。GtkCssProviderGtkSettings
返回
如果文件被重新读取，则为 TRUE。
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_reparse_all_for_settings ----

gtk_rc_reparse_all_for_settings
gtk_rc_reparse_all_for_settings自 3.0 版起已弃用，不应在新编写的代码中使用。请改用。如果给定的任何先前读取的文件的修改时间已更改，请丢弃所有样式信息，然后重新读取所有以前读取的 RC 文件。GtkCssProviderGtkSettings
语法
参数
settings- 一GtkSettings
force_load- 加载是否有任何更改
返回
如果文件被重新读取，则为 TRUE。
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_reset_styles ----

gtk_rc_reset_styles
gtk_rc_reset_styles自 3.0 版起已弃用，不应在新编写的代码中使用。请改用。此函数重新计算使用分离对象的所有构件的样式。（有一个对象，请参阅gtk_settings_get_for_screen（））;当某些全局参数发生更改而影响所有小部件的外观时，它很有用，因为当小部件获得新样式时，它将重新绘制并重新计算有关其外观的任何缓存信息。例如，当操作系统的默认字体大小集发生更改时，将使用它。请注意，此函数不会影响显式设置样式的小部件，这些小部件具有gtk_widget_set_style（）。GtkCssProviderGtkSettingsGtkSettingsGdkScreen
语法
参数
settings- 一GtkSettings
2.4 起
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_scanner_new ----

gtk_rc_scanner_new
gtk_rc_scanner_new自 3.0 版起已弃用，不应在新编写的代码中使用。请改用GtkCssProvider
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_set_default_files ----

gtk_rc_set_default_files
gtk_rc_set_default_files自 3.0 版起已弃用，不应在新编写的代码中使用。与自定义一起使用改为设置 GTK+ 将在 gtk_init（） 末尾读取的文件列表。GtkStyleContextGtkStyleProvider
语法
参数
filenames- 以 ANULL 结尾的文件名列表。[数组零终止 = 1][元素类型文件名]
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_style_copy ----

gtk_rc_style_copy
gtk_rc_style_copy自 3.0 版起已弃用，不应在新编写的代码中使用。请改用。创建指定 的副本。此函数将正确复制 RC 样式，该样式是从 中分类的成员。GtkCssProviderGtkRcStyleGtkRcStyle
语法
参数
orig- 要复制的样式
返回
结果 .[转移完整][/代码GtkRcStyle
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_rc_style_new ----

gtk_rc_style_new
gtk_rc_style_new自 3.0 版起已弃用，不应在新编写的代码中使用。请改用。创建一个未设置字段且引用计数为 1 的新引用。GtkCssProviderGtkRcStyle
返回
新创建的GtkRcStyle
另请参见
gtk3-Resource-Files


------------ KeyGTK3gtk_recent_action_get_show_numbers ----

gtk_recent_action_get_show_numbers
gtk_recent_action_get_show_numbers自版本 3.10 起已弃用，不应在新编写的代码中使用。返回由 gtk_recent_chooser_menu_set_show_numbers（） 设置的值。
语法
参数
action- 一GtkRecentAction
返回
如果应显示数字，则为 TRUE。
自 2.12 起
另请参见
GtkRecentAction


------------ KeyGTK3gtk_recent_action_new ----

gtk_recent_action_new
gtk_recent_action_new自 3.10 版起已弃用，不应在新编写的代码中使用。创建新对象。要将操作添加到 a 并为操作设置加速器，请调用 gtk_action_group_add_action_with_accel（）。GtkRecentActionGtkActionGroup
语法
参数
name- 操作的唯一名称
label- 显示在菜单项和按钮上的标签，或 NULL。[允许-无]
tooltip- 操作的工具提示，或 NULL。[允许-无]
stock_id- 在表示操作的小部件中显示的股票图标，或 NULL。[允许-无]
返回
新创建的 .GtkRecentAction
自 2.12 起
另请参见
GtkRecentAction


------------ KeyGTK3gtk_recent_action_new_for_manager ----

gtk_recent_action_new_for_manager
gtk_recent_action_new_for_manager自版本 3.10 起已弃用，不应在新编写的代码中使用。创建新对象。要将操作添加到 a 并为操作设置加速器，请调用 gtk_action_group_add_action_with_accel（）。GtkRecentActionGtkActionGroup
语法
参数
name- 操作的唯一名称
label- 显示在菜单项和按钮上的标签，或 NULL。[允许-无]
tooltip- 操作的工具提示，或 NULL。[允许-无]
stock_id- 在表示操作的小部件中显示的股票图标，或 NULL。[允许-无]
manager- a ，或 NULL 用于使用默认值。[允许-无]GtkRecentManagerGtkRecentManager
返回
新创建的GtkRecentAction
自 2.12 起
另请参见
GtkRecentAction


------------ KeyGTK3gtk_recent_action_set_show_numbers ----

gtk_recent_action_set_show_numbers
gtk_recent_action_set_show_numbers自 3.10 版起已弃用，不应在新编写的代码中使用。设置是否应将数字添加到表示操作的widgets所显示的项中。显示这些数字是为了提供一个唯一的字符，以便在菜单项的 slabel 内使用助记符。只有前十个项目得到一个数字以避免冲突。
语法
参数
action- 一GtkRecentAction
show_numbers- 如果显示的项目应编号，则为 TRUE
自 2.1 起
另请参见
GtkRecentAction


------------ KeyGTK3gtk_recent_chooser_add_filter ----

gtk_recent_chooser_add_filter
将过滤器添加到选择器持有的对象列表中。如果没有定义以前的筛选器对象，则此函数将callgtk_recent_chooser_set_filter（）。GtkRecentFilter
语法
参数
chooser- 一GtkRecentChooser
filter- 一GtkRecentFilter
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_dialog_new ----

gtk_recent_chooser_dialog_new
创建新的 .此函数类似于 togtk_dialog_new_with_buttons（）。GtkRecentChooserDialog
语法
参数
title- 对话框的标题，或 NULL。[允许-无]
parent- 对话框的瞬态父级，或 NULL，。[允许-无]
first_button_text- 股票ID或文本去在第一个按钮，或NULL。[允许-无]
...- 第一个按钮的响应 ID，然后是其他（按钮、id）对，以 NULL 结尾
返回
一个新的GtkRecentChooserDialog
自 2.10 起
另请参见
GtkRecentChooserDialog


------------ KeyGTK3gtk_recent_chooser_dialog_new_for_manager ----

gtk_recent_chooser_dialog_new_for_manager
使用指定的最近管理中心创建新的管理器。如果您已经实现了自己最近的管理器，或者您具有对象的自定义实例，这将非常有用。GtkRecentChooserDialogGtkRecentManager
语法
参数
title- 对话框的标题，或 NULL。[允许-无]
parent- 对话框的瞬态父级，或 NULL，。[允许-无]
manager- 一GtkRecentManager
first_button_text- 股票ID或文本去在第一个按钮，或NULL。[允许-无]
...- 第一个按钮的响应 ID，然后是其他（按钮、id）对，以 NULL 结尾
返回
一个新的GtkRecentChooserDialog
自 2.1 起
另请参见
GtkRecentChooserDialog


------------ KeyGTK3gtk_recent_chooser_get_current_item ----

gtk_recent_chooser_get_current_item
Gets the GtkRecentInfo currently selected by chooser.
Syntax
Parameters
chooser  -  	a GtkRecentChooser
Returns
a GtkRecentInfo.  Use gtk_recent_info_unref() whenwhen you have finished using it.
Since 2.10
See Also
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_current_uri ----

gtk_recent_chooser_get_current_uri
获取选择器当前选择的 URI。
语法
参数
chooser- 一GtkRecentChooser
返回
新分配的字符串，用于保存 URI。
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_filter ----

gtk_recent_chooser_get_filter
Gets the GtkRecentFilter object currently used by chooser to affectthe display of the recently used resources.
Syntax
Parameters
chooser  -  	a GtkRecentChooser
Returns
a GtkRecentFilter object. [transfer none]
Since 2.1
See Also
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_items ----

gtk_recent_chooser_get_items
以对象的形式获取最近使用的资源的列表。此函数的返回值受 “sort-type？和？限制？选择器的属性。GtkRecentInfo
语法
参数
chooser- 一GtkRecentChooser
返回
新分配的对象列表。您应该在列表的每个项目上使用gtk_recent_info_unref（），然后使用g_list_free（）释放列表本身。[element-type GtkRecentInfo][转移完整]GtkRecentInfo
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_limit ----

gtk_recent_chooser_get_limit
Gets the number of items returned by gtk_recent_chooser_get_items()and gtk_recent_chooser_get_uris().
Syntax
Parameters
chooser  -  	a GtkRecentChooser
Returns
A positive integer, or -1 meaning that all items arereturned.
Since 2.10
See Also
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_local_only ----

gtk_recent_chooser_get_local_only
获取是否只应在最近使用的资源选择器中显示本地资源。请参见gtk_recent_chooser_set_local_only（）
语法
参数
chooser- 一GtkRecentChooser
返回
如果只应显示本地资源，则为 TRUE。
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_select_multiple ----

gtk_recent_chooser_get_select_multiple
Gets whether chooser can select multiple items.
Syntax
Parameters
chooser  -  	a GtkRecentChooser
Returns
TRUE if choosercan select more than one item.
Since 2.10
See Also
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_show_icons ----

gtk_recent_chooser_get_show_icons
检索选择器是否应在资源附近显示图标。
语法
参数
chooser- 一GtkRecentChooser
返回
如果应显示图标，则为 TRUE，否则为 FALSE。
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_show_not_found ----

gtk_recent_chooser_get_show_not_found
检索选择器是否应显示最近使用但未找到的资源。
语法
参数
chooser- 一GtkRecentChooser
返回
如果应显示未找到的资源，则为 TRUE，并且 FALSE otheriwse。
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_show_private ----

gtk_recent_chooser_get_show_private
返回选择器是否应将最近使用的资源显示为私有。
语法
参数
chooser- 一GtkRecentChooser
返回
如果最近的选择器应显示私人项目，则为 TRUE，否则为 FALSE。
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_show_tips ----

gtk_recent_chooser_get_show_tips
获取选择器是否应显示包含最近用户资源的完整路径的工具提示。
语法
参数
chooser- 一GtkRecentChooser
返回
如果最近的选择器应显示工具提示，则为 TRUE，否则为 FALSE。
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_sort_type ----

gtk_recent_chooser_get_sort_type
Gets the value set by gtk_recent_chooser_set_sort_type().
Syntax
Parameters
chooser  -  	a GtkRecentChooser
Returns
the sorting order of the chooser.
Since 2.10
See Also
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_get_uris ----

gtk_recent_chooser_get_uris
获取最近使用的资源的 URI。此函数的返回值受 “sort-type？和选择器的“限制”属性。由于返回的数组以 NULL 结尾，因此长度可能为 NULL。
语法
参数
chooser- 一GtkRecentChooser
length- 返回与 THEURI 列表长度相同的位置，或 NULL。[输出][允许-无]
返回
新分配的以 NULL 结尾的字符串数组。Useg_strfreev（） 来释放它。[数组长度 = 长度零终止 = 1][转移完整]
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_list_filters ----

gtk_recent_chooser_list_filters
获取选择器持有的对象。GtkRecentFilter
语法
参数
chooser- 一GtkRecentChooser
返回
对象的单链接列表。您只需使用g_slist_free（）释放返回的列表即可。[元素型 GtkRecentFilter][转移容器]GtkRecentFilter
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_menu_get_show_numbers ----

gtk_recent_chooser_menu_get_show_numbers
返回由 gtk_recent_chooser_menu_set_show_numbers（） 设置的值。
语法
参数
menu- 一GtkRecentChooserMenu
返回
如果应显示数字，则为 TRUE。
自 2.10 起
另请参见
GtkRecentChooserMenu


------------ KeyGTK3gtk_recent_chooser_menu_new ----

gtk_recent_chooser_menu_new
创建新的构件。这种小部件将最近使用的资源列表显示为菜单，每个项目作为一个菜单项。菜单中的每个项可能都有一个图标，表示其 MIME 类型，以及一个数字，用于助记符。此小部件实现接口。此小部件创建自己的对象。请参阅thegtk_recent_chooser_menu_new_for_manager（） 函数，了解如何创建绑定到另一个对象的小部件。GtkRecentChooserMenuGtkRecentChooserGtkRecentManagerGtkRecentChooserMenuGtkRecentManager
返回
一个新的GtkRecentChooserMenu
自 2.10 起
另请参见
GtkRecentChooserMenu


------------ KeyGTK3gtk_recent_chooser_menu_new_for_manager ----

gtk_recent_chooser_menu_new_for_manager
使用管理器作为最近使用的基础资源管理器创建新的小组件。如果您已经实现了自己最近的管理器，或者您有一个对象的自定义实例，或者如果您希望在多个小部件中共享一个公共对象，这将非常有用。GtkRecentChooserMenuGtkRecentManagerGtkRecentManagerGtkRecentChooser
语法
参数
manager- 一GtkRecentManager
返回
一个新的，绑定到经理。GtkRecentChooserMenu
自 2.10 起
另请参见
GtkRecentChooserMenu


------------ KeyGTK3gtk_recent_chooser_menu_set_show_numbers ----

gtk_recent_chooser_menu_set_show_numbers
设置是否应将数字添加到菜单项中。显示数字是为了在十个菜单项的标签内使用的助记符提供唯一字符。只有第一个项目才会得到一个数字以避免冲突。
语法
参数
menu- 一GtkRecentChooserMenu
show_numbers- 是否显示数字
自 2.1 起
另请参见
GtkRecentChooserMenu


------------ KeyGTK3gtk_recent_chooser_remove_filter ----

gtk_recent_chooser_remove_filter
从选取器持有的对象列表中删除滤镜。GtkRecentFilter
语法
参数
chooser- 一GtkRecentChooser
filter- 一GtkRecentFilter
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_select_all ----

gtk_recent_chooser_select_all
如果选取器支持多个选取，则选择选取器内的所有项目。
语法
参数
chooser- 一GtkRecentChooser
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_select_uri ----

gtk_recent_chooser_select_uri
在选择器中选择 uri。
语法
参数
chooser- 一GtkRecentChooser
uri- 一个 URI
error- 返回 的位置，或 NULL。[允许-无]GError
返回
如果找到 uris，则为 TRUE。
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_current_uri ----

gtk_recent_chooser_set_current_uri
将 uri 设置为选择器的当前 URI。
语法
参数
chooser- 一GtkRecentChooser
uri- 一个 URI
error- 返回 的位置，或 NULL。[允许-无]GError
返回
如果找到 URI，则为 TRUE。
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_filter ----

gtk_recent_chooser_set_filter
将过滤器设置为选择器使用的当前对象会影响显示的最近使用的资源。GtkRecentFilter
语法
参数
chooser- 一GtkRecentChooser
filter- 一个.[允许-无]GtkRecentFilter
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_limit ----

gtk_recent_chooser_set_limit
Sets the number of items that should be returned bygtk_recent_chooser_get_items() and gtk_recent_chooser_get_uris().
Syntax
Parameters
chooser  -  	a GtkRecentChooser
limit  -  	a positive integer, or -1 for all items
Since 2.10
See Also
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_local_only ----

gtk_recent_chooser_set_local_only
设置是否只应在最近使用的资源选择器中显示本地资源（即使用 file:// URICheme 的资源）。Iflocal_only为 TRUE（默认值），则保证通过操作系统本机文件系统访问显示的资源。
语法
参数
chooser- 一GtkRecentChooser
local_only- 如果只能显示本地文件，则为 TRUE
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_select_multiple ----

gtk_recent_chooser_set_select_multiple
设置选择器是否可以选择多个项目。
语法
参数
chooser- 一GtkRecentChooser
select_multiple- 如果选择者可以选择多个项目，则为 TRUE
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_show_icons ----

gtk_recent_chooser_set_show_icons
设置选择器在显示资源时是否应在资源附近显示图标。
语法
参数
chooser- 一GtkRecentChooser
show_icons- 是否在资源附近显示图标
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_show_not_found ----

gtk_recent_chooser_set_show_not_found
设置选择器是否应显示它未找到的最近使用的资源。这仅适用于本地资源。
语法
参数
chooser- 一GtkRecentChooser
show_not_found- 是否显示我们没有找到的当地物品
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_show_private ----

gtk_recent_chooser_set_show_private
是否显示最近使用的资源，标记为已注册为私有。
语法
参数
chooser- 一GtkRecentChooser
show_private- TRUE 显示私人物品，否则为 FALSE
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_show_tips ----

gtk_recent_chooser_set_show_tips
设置是否在微件中显示包含每个最近使用的资源的完整路径的工具提示。GtkRecentChooser
语法
参数
chooser- 一GtkRecentChooser
show_tips- 如果应显示工具提示，则为 TRUE
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_sort_func ----

gtk_recent_chooser_set_sort_func
将排序时使用的比较函数设置为sort_func。如果选择器将排序类型设置为，则选择器将使用此函数进行排序。到比较函数将传递两个结构andsort_data;如果第一个项目位于第二个项目之前，则sort_func应返回正整数;如果两个项目相等，则返回零;如果第一个项目位于第二个项目之后，则返回负整数。GTK_RECENT_SORT_CUSTOMGtkRecentInfo
语法
参数
chooser- 一GtkRecentChooser
sort_func- 比较功能
sort_data- 要传递给sort_func或 NULL 的用户数据。[允许-无]
data_destroy- 销毁sort_data的通知程序，或 NULL。[允许-无]
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_set_sort_type ----

gtk_recent_chooser_set_sort_type
更改按选择器显示的最近使用的资源列表的排序顺序。
语法
参数
chooser- 一GtkRecentChooser
sort_type- 选择者应使用的排序顺序
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_unselect_all ----

gtk_recent_chooser_unselect_all
取消选择选取器内的所有项目。
语法
参数
chooser- 一GtkRecentChooser
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_unselect_uri ----

gtk_recent_chooser_unselect_uri
取消选择器内的 uri。
语法
参数
chooser- 一GtkRecentChooser
uri- 一个 URI
自 2.10 起
另请参见
GtkRecentChooser


------------ KeyGTK3gtk_recent_chooser_widget_new ----

gtk_recent_chooser_widget_new
创建新对象。这是一个嵌入式小部件，用于访问最近使用的资源列表。GtkRecentChooserWidget
返回
一个新的GtkRecentChooserWidget
自 2.10 起
另请参见
GtkRecentChooserWidget


------------ KeyGTK3gtk_recent_chooser_widget_new_for_manager ----

gtk_recent_chooser_widget_new_for_manager
使用指定的最近管理中心创建新的管理器。如果您已经实现了自己最近的管理器，或者您具有对象的自定义实例，这将非常有用。GtkRecentChooserWidgetGtkRecentManager
语法
参数
manager- 一GtkRecentManager
返回
一个新的GtkRecentChooserWidget
自 2.1 起
另请参见
GtkRecentChooserWidget


------------ KeyGTK3gtk_recent_filter_add_age ----

gtk_recent_filter_add_age
添加一个规则，该规则允许基于资源的期限（即自上次修改以来经过的天数）。
语法
参数
filter- 一GtkRecentFilter
days- 天数
自 2.10 起
另请参见
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_add_application ----

gtk_recent_filter_add_application
添加一个规则，该规则允许基于已注册这些资源的应用程序的名称来使用这些资源。
语法
参数
filter- 一GtkRecentFilter
application- 应用程序名称
自 2.10 起
另请参见
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_add_custom ----

gtk_recent_filter_add_custom
将规则添加到允许基于自定义回调函数的资源的筛选器。传入的所需位字段提供有关过滤器函数需要哪种信息的信息;这允许GTK+避免在过滤器不需要它时检索昂贵的信息。
语法
参数
filter- 一GtkRecentFilter
needed- 标志的位字段，指示自定义过滤器函数需要的信息。
func- 回调函数;如果函数返回 TRUE，则将显示该文件。
data- 数据传递到函数
data_destroy- 函数调用免费数据何时不再需要。
自 2.10 起
另请参见
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_add_group ----

gtk_recent_filter_add_group
添加一个规则，该规则允许基于资源所属组的名称
语法
参数
filter- 一GtkRecentFilter
group- 组名
自 2.10 起
另请参见
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_add_mime_type ----

gtk_recent_filter_add_mime_type
添加一个规则，该规则允许基于其注册的 MIME 类型的资源。
语法
参数
filter- 一GtkRecentFilter
mime_type- 哑剧类型
自 2.10 起
另请参见
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_add_pattern ----

gtk_recent_filter_add_pattern
添加一个规则，该规则允许基于与其显示名称匹配的模式的资源。
语法
参数
filter- 一GtkRecentFilter
pattern- 文件模式
自 2.10 起
另请参见
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_add_pixbuf_formats ----

gtk_recent_filter_add_pixbuf_formats
添加一个规则，允许采用 GdkPixbuf 支持的格式的图像文件。
语法
参数
filter- 一GtkRecentFilter
自 2.10 起
另请参见
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_filter ----

gtk_recent_filter_filter
测试是否应根据筛选器显示文件。filter_info应包括从 gtk_recent_filter_get_needed（） 返回的字段，并且必须设置 filter_infoto指示已设置哪些字段。应用程序通常不会使用此功能。它主要用于实施。GtkRecentFilterInfoGtkRecentFilterInfo.containsGtkRecentChooser
语法
参数
filter- 一GtkRecentFilter
filter_info- 包含有关最近使用的资源的信息GtkRecentFilterInfo
返回
如果应显示文件，则为 TRUE
自 2.1 起
另请参见
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_get_name ----

gtk_recent_filter_get_name
获取筛选器的用户可读名称。请参见gtk_recent_filter_set_name（）。
语法
参数
filter- 一GtkRecentFilter
返回
筛选器的名称，或 NULL。返回的字符串由筛选器对象拥有，不应释放。
自 2.10 起
另请参见
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_get_needed ----

gtk_recent_filter_get_needed
获取需要为传递给gtk_recent_filter_filter（）此函数通常不被应用程序使用而需要填写的字段;它主要用于实施。GtkRecentFilterInfoGtkRecentChooser
语法
参数
filter- 一GtkRecentFilter
返回
标记的位字段，指示调用 gtk_recent_filter_filter（） 时所需的字段
自 2.10 起
另请参见
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_new ----

gtk_recent_filter_new
创建一个不添加任何规则的新项目。此类筛选器不接受任何最近使用的资源，因此在添加规则withgtk_recent_filter_add_pattern（）、gtk_recent_filter_add_mime_type（）、gtk_recent_filter_add_application（）、gtk_recent_filter_add_age（） 之前，该筛选器不会特别有用。要创建接受任何最近使用的资源的筛选器，请使用： 12[/语法] [语法]GtkRecentFilter *filter = gtk_recent_filter_new （）;gtk_recent_filter_add_pattern （filter， “*”）;[/语法]GtkRecentFilter
返回
一个新的GtkRecentFilter
自 2.10 起
另请参见
GtkRecentFilter


------------ KeyGTK3gtk_recent_filter_set_name ----

gtk_recent_filter_set_name
设置过滤器的人类可读名称;这是字符串，如果有可选的筛选器列表，则该字符串将显示在最近使用的资源选择器用户界面中。
语法
参数
filter- 一GtkRecentFilter
name- 然后人类可读的过滤器名称
自 2.10 起
另请参见
GtkRecentFilter


------------ KeyGTK3gtk_recent_info_create_app_info ----

gtk_recent_info_create_app_info
为指定的GAppInfoGtkRecentInfo
语法
参数
info- 一GtkRecentInfo
app_name- 应映射到 ;如果使用 NULL，则使用 MIME 类型的默认应用程序。[允许-无]GAppInfo
error- 返回 的位置，或 NULL。[允许-无]GError
返回
新创建的 ，或者 NULL.In 错误的情况下，错误将使用aGTK_RECENT_MANAGER_ERROR或G_IO_ERROR进行设置。[转移完整]GAppInfo
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_exists ----

gtk_recent_info_exists
检查信息所指向的资源是否仍然存在。目前，此检查仅对指向本地文件的资源执行。
语法
参数
info- 一GtkRecentInfo
返回
如果资源存在，则为 TRUE
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_added ----

gtk_recent_info_get_added
获取资源添加到最近使用的资源列表时的时间戳（来自系统纪元的秒数）。
语法
参数
info- 一GtkRecentInfo
返回
将资源添加到列表时从系统的 Epoch 经过的秒数，或失败时 -1。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_age ----

gtk_recent_info_get_age
获取自上次更新由信息指向的资源以来经过的天数。
语法
参数
info- 一GtkRecentInfo
返回
一个正整数，包含自上次修改此资源以来经过的天数。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_applications ----

gtk_recent_info_get_applications
检索已注册此资源的应用程序的列表。
语法
参数
info- 一GtkRecentInfo
length- 返回列表长度的返回位置。[输出][允许-无]
返回
新分配的以 NULL 结尾的字符串数组。使用 g_strfreev（） 来释放它。[数组长度 = 长度零终止 = 1][转移完整]
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_application_info ----

gtk_recent_info_get_application_info
获取有关已注册由信息指示的资源的应用程序的数据。如果命令行包含存储规范中定义的任何转义字符，则这些字符将被展开。
语法
参数
info- 一GtkRecentInfo
app_name- 已注册此项目的应用程序的名称
app_exec- 返回包含命令行的字符串的位置。[无转移][输出]
count- 此项目注册次数的返回位置。[输出]
time_- 返回上次为此应用程序注册此项目时间戳的位置。[输出]
返回
如果具有 app_namehas的应用程序在最近使用的列表内注册了此资源，则为 TRUE，否则为 FALSE。Theapp_execstring归 本人所有，不得修改或释放GtkRecentInfo
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_description ----

gtk_recent_info_get_description
获取资源的（简短）说明。
语法
参数
info- 一GtkRecentInfo
返回
资源的说明。返回的字符串由最近的管理器拥有，不应被释放。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_display_name ----

gtk_recent_info_get_display_name
获取资源的名称。如果未定义任何值，则获取资源的基名。
语法
参数
info- 一GtkRecentInfo
返回
资源的显示名称。返回的字符串由最近的管理器拥有，不应被释放。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_gicon ----

gtk_recent_info_get_gicon
检索与资源 MIME 类型关联的图标。
语法
参数
info- 一GtkRecentInfo
返回
a 包含图标，或 NULL。使用完图标后Useg_object_unref（）。[转移完整]GIcon
2.22 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_groups ----

gtk_recent_info_get_groups
返回为最近使用的项目信息注册的所有组。返回的组名数组将以 NULL 终止，因此长度可能为 NULL。
语法
参数
info- 一GtkRecentInfo
length- 返回组数的返回位置。[输出][允许-无]
返回
新分配的 NULL 终止字符串数组。使用 g_strfreev（） 来释放它。[数组长度 = 长度零终止 = 1][转移完整]
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_icon ----

gtk_recent_info_get_icon
检索与资源 MIME 类型关联的大小大小的图标。
语法
参数
info- 一GtkRecentInfo
size- 图标的大小（以像素为单位）
返回
a 包含图标，或 NULL。使用完图标后，请使用 g_object_unref（）。[转移完整]GdkPixbuf
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_mime_type ----

gtk_recent_info_get_mime_type
获取资源的 MIME 类型。
语法
参数
info- 一GtkRecentInfo
返回
资源的 MIME 类型。返回的字符串由最近的管理器拥有，不应被释放。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_modified ----

gtk_recent_info_get_modified
获取上次修改资源的元数据时的时间戳（来自系统纪元的秒数）。
语法
参数
info- 一GtkRecentInfo
返回
上次修改资源时从系统的 Epoch 开始经过的秒数，或失败时 -1。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_private_hint ----

gtk_recent_info_get_private_hint
获取 “私有” 的值旗。最近使用列表中将此标志设置为 TRUE 的资源应仅由已注册它们的应用程序显示。
语法
参数
info- 一GtkRecentInfo
返回
如果找到私有标志，则为 TRUE，否则为 FALSE。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_short_name ----

gtk_recent_info_get_short_name
计算可用作菜单或列表中项目名称的有效 UTF-8 字符串。例如，对引用？file：///foo/bar.txt？将产生？bar.txt？。
语法
参数
info- 一个GtkRecentInfo
返回
采用 UTF-8 编码的新分配字符串;免费它withg_free（）。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_uri ----

gtk_recent_info_get_uri
获取资源的 URI。
语法
参数
info- 一GtkRecentInfo
返回
资源的 URI。返回的字符串由最近的管理器拥有，不应释放。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_uri_display ----

gtk_recent_info_get_uri_display
获取资源的 URI 的可显示版本。如果资源是本地的，则返回本地路径;如果资源不是本地资源，则返回 gtk_recent_info_get_uri（） 的 UTF-8 编码内容。
语法
参数
info- 一GtkRecentInfo
返回
新分配的 UTF-8 字符串，其中包含 theresource 的 URI 或 NULL。使用完 g_free（） 后使用。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_get_visited ----

gtk_recent_info_get_visited
获取上次访问资源的元数据时的时间戳（来自系统纪元的秒数）。
语法
参数
info- 一GtkRecentInfo
返回
上次访问资源时从系统的 Epoch 经过的秒数，或失败时 -1。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_has_application ----

gtk_recent_info_has_application
检查应用程序是否使用app_name注册了此资源。
语法
参数
info- 一GtkRecentInfo
app_name- 包含应用程序名称的字符串
返回
如果找到具有名称的应用程序app_namewas TRUE，否则为 FALSE。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_has_group ----

gtk_recent_info_has_group
检查group_name是否显示在为最近使用的项目信息注册的组中。
语法
参数
info- 一GtkRecentInfo
group_name- 组名
返回
如果找到该组，则为 TRUE。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_is_local ----

gtk_recent_info_is_local
通过查看资源 URI 的方案来检查资源是否为本地资源。
语法
参数
info- 一GtkRecentInfo
返回
如果资源是本地资源，则为 TRUE。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_last_application ----

gtk_recent_info_last_application
获取已注册由 info 表示的最近使用的资源的最后一个应用程序的名称。
语法
参数
info- 一GtkRecentInfo
返回
应用程序名称。使用 g_free（） 来释放它。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_match ----

gtk_recent_info_match
检查两个是否指向同一资源。GtkRecentInfo
语法
参数
info_a- 一GtkRecentInfo
info_b- 一GtkRecentInfo
返回
如果两者都指向同一资源，则为 TRUE，否则为 FALSE。GtkRecentInfo
自 2.1 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_ref ----

gtk_recent_info_ref
将recent_info的引用计数增加 1。
语法
参数
info- 一GtkRecentInfo
返回
最近的 info 对象及其引用计数增加了 1。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_info_unref ----

gtk_recent_info_unref
将信息的引用计数减少 1。如果引用计数达到零，则解除分配信息，并释放内存。
语法
参数
info- 一GtkRecentInfo
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_add_full ----

gtk_recent_manager_add_full
使用在传入recent_data中指定的元数据，将 uri 指向的新资源添加到最近使用的资源列表中。传递的 URI 将用于在列表中标识此资源。为了注册最近使用的新资源，必须传递有关资源的元数据以及URI;元数据存储在 中，其中必须包含 URI 所指向的资源的 MIMEtype;正在注册该项的应用程序的名称，以及启动该项时要使用的命令行。（可选）可能包含在查看项目时使用的 UTF-8 字符串，而不是在查看该 URL 的最后一个组件;项目的简短描述;该项目是否应被视为私有项目 - 也就是说，仅应由已注册它的应用程序显示。GtkRecentDataGtkRecentDataGtkRecentData
语法
参数
manager- 一GtkRecentManager
uri- 一个有效的 URI
recent_data- 资源的元数据
返回
如果新项已成功添加到最近使用的资源列表中，则为 TRUE，否则为 FALSE。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_add_item ----

gtk_recent_manager_add_item
将 uri 指向的新资源添加到最近使用的资源列表中。此函数自动检索一些所需的元数据，并将其他元数据设置为常用默认值;它将数据提供给gtk_recent_manager_add_full（）。如果要显式定义 uri 所指向的资源的元数据，请参阅 gtk_recent_manager_add_full（）。
语法
参数
manager- 一GtkRecentManager
uri- 一个有效的 URI
返回
如果新项已成功添加到最近使用的资源列表中，则为 TRUE
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_get_default ----

gtk_recent_manager_get_default
获取 的唯一实例，您可以在应用程序中共享该实例，而无需关心内存管理。GtkRecentManager
返回
一个独特的.不要引用或取消引用它。[无转移]GtkRecentManager
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_get_items ----

gtk_recent_manager_get_items
获取最近使用的资源的列表。
语法
参数
manager- 一GtkRecentManager
返回
新分配对象的列表。Usegtk_recent_info_unref（） 在列表内的每个项目上，然后使用 g_list_free（） 释放列表本身。[element-type GtkRecentInfo][转移完整]GtkRecentInfo
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_has_item ----

gtk_recent_manager_has_item
检查是否有最近使用的资源在最近的管理器中注册了 uri。
语法
参数
manager- 一GtkRecentManager
uri- 一个 URI
返回
如果找到资源，则为 TRUE，否则为 FALSE。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_lookup_item ----

gtk_recent_manager_lookup_item
在最近使用的资源列表中搜索 URI，并返回包含有关资源的信息，如其 MIME 类型或其显示名称。GtkRecentInfo
语法
参数
manager- 一GtkRecentManager
uri- 一个 URI
error- 的返回位置，或 NULL。[允许-无]GError
返回
a 包含有关 uri 所指向的资源的信息，如果 URI 未在最近使用的资源列表中注册，则为 NULL。免费withgtk_recent_info_unref（）.GtkRecentInfo
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_move_item ----

gtk_recent_manager_move_item
将最近使用的资源的位置从 uri 更改为new_uri。请注意，此函数不会影响 URI 所指向的资源，而只会影响最近使用的资源列表中使用的 URI。
语法
参数
manager- 一GtkRecentManager
uri- 最近使用的资源的 URI
new_uri- 最近使用的资源的新 URI，或 NULL 以删除列表中 uriin 所指向的项目。[允许-无]
error- 的返回位置，或 NULL。[允许-无]GError
返回
成功时真。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_new ----

gtk_recent_manager_new
创建新的最近使用的管理器对象。最近的管理器对象用于处理最近使用的资源的列表。对象监视最近使用的资源列表，并发出 “changed？信号每次列表中的某些内容都会发生变化。对象很昂贵：确保仅在需要时才创建它们。您应该改用 gtk_recent_manager_get_default（）。GtkRecentManagerGtkRecentManager
返回
新创建的对象。GtkRecentManager
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_purge_items ----

gtk_recent_manager_purge_items
从最近使用的资源列表中清除每个项目。
语法
参数
manager- 一GtkRecentManager
error- 的返回位置，或 NULL。[允许-无]GError
返回
已从其中已使用的资源列表中删除的项目数。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_recent_manager_remove_item ----

gtk_recent_manager_remove_item
从最近由最近的管理器处理的最近使用的资源列表中删除 uri 所指向的资源。
语法
参数
manager- 一GtkRecentManager
uri- 要删除的项目的URI
error- 返回 的位置，或 NULL。[允许-无]GError
返回
如果 urihas 指向的项目已被最近使用的资源列表成功删除，则为 TRUE，否则为 FALSE。
自 2.10 起
另请参见
GtkRecentManager


------------ KeyGTK3gtk_render_activity ----

gtk_render_activity
呈现活动区域（如 in 或 thefill line in ），状态GTK_STATE_FLAG_ACTIVEdetermines是否有活动正在进行。GtkSpinnerGtkRange
语法
参数
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原点
y- 矩形的Y原点
width- 矩形宽度
height- 矩形高度
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_render_arrow ----

gtk_render_arrow
呈现指向角度的箭头。0、1？2 处的典型箭头渲染?, ?和 3？2 ？：
语法
参数
context- 一GtkStyleContext
cr- 一cairo_t
angle- 箭头角度从0到2 * G_PI，是指向北方的箭头0
x- 渲染区域的 X 原点
y- 渲染区域的 Y 原点
size- 渲染区域的正方形侧
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_render_background ----

gtk_render_background
呈现元素的背景。典型的背景渲染，显示背景图像、边框宽度和边框半径的效果：
语法
参数
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原点
y- 矩形的Y原点
width- 矩形宽度
height- 矩形高度
自 3.0.
另请参见
GtkStyleContext


------------ KeyGTK3gtk_render_check ----

gtk_render_check
呈现复选标记（如 在 中所示）。GTK_STATE_FLAG_ACTIVE状态确定检查是处于打开状态还是关闭状态，GTK_STATE_FLAG_INCONSISTENT确定是否应将其标记为未定义。典型的复选标记呈现：GtkCheckButton
语法
参数
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原点
y- 矩形的Y原点
width- 矩形宽度
height- 矩形高度
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_render_expander ----

gtk_render_expander
在由 x、y、宽度、高度定义的区域中呈现扩展器（如 和 中所用）。状态GTK_STATE_FLAG_ACTIVEdetermines是展开器是折叠还是展开。典型的扩展器渲染：GtkTreeViewGtkExpander
语法
参数
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原点
y- 矩形的Y原点
width- 矩形宽度
height- 矩形高度
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_render_extension ----

gtk_render_extension
在矩形中呈现由 x、y、宽度、高度定义的扩展名（如在选项卡中）。扩展连接到的一侧由gap_side定义。典型的扩展插件呈现：GtkNotebook
语法
参数
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原点
y- 矩形的Y原点
width- 矩形宽度
height- 矩形高度
gap_side- 间隙所在的一侧
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_render_focus ----

gtk_render_focus
在由 x、y、宽度、高度确定的矩形上呈现焦点指示器。典型焦点渲染：
语法
参数
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原点
y- 矩形的Y原点
width- 矩形宽度
height- 矩形高度
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_render_frame ----

gtk_render_frame
在由 x、y、宽度、高度定义的矩形周围呈现一个框架。帧渲染示例，显示边框图像、边框颜色、边框宽度、边框半径和交汇点的效果：
语法
参数
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原点
y- 矩形的Y原点
width- 矩形宽度
height- 矩形高度
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_render_frame_gap ----

gtk_render_frame_gap
在由 （x、y、宽度、高度） 定义的矩形周围呈现一个框架，并在一侧留下一个间隙。xy0_gap和xy1_gap将表示GTK_POS_TOP和GTK_POS_BOTTOM间隙边的 X 坐标，forGTK_POS_LEFT和GTK_POS_RIGHT表示 Y 坐标。具有间隙的帧的典型渲染：
语法
参数
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原点
y- 矩形的Y原点
width- 矩形宽度
height- 矩形高度
gap_side- 间隙所在的一侧
xy0_gap- 间隙的初始坐标（X或Y，取决于gap_side）
xy1_gap- 间隙的结束坐标（X或Y，取决于gap_side）
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_render_handle ----

gtk_render_handle
在矩形中呈现一个控点（如 和 中的调整大小夹点），该控点由 x、y、宽度、高度确定。为平移类和夹点类呈现的句柄：GtkHandleBoxGtkPanedGtkWindow
语法
参数
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原点
y- 矩形的Y原点
width- 矩形宽度
height- 矩形高度
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_render_icon ----

gtk_render_icon
以 pixbuf 格式呈现图标，位于指定的 x 和 y 坐标处。
语法
参数
context- 一GtkStyleContext
cr- 一cairo_t
pixbuf- 一个包含要绘制的图标GdkPixbuf
x- X 位置为像素
y- Y 位置为像素
自 3.2 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_render_icon_pixbuf ----

gtk_render_icon_pixbuf
gtk_render_icon_pixbuf自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_icon_theme_load_icon（）。以给定大小呈现源指定的图标，并以 pixbuf 的形式返回结果。
语法
参数
context- 一GtkStyleContext
source- 指定要渲染的图标GtkIconSource
size- 渲染图标的大小。大小 （GtkIconSize） -1 表示以源的大小呈现，并且不缩放。[键入整型]
返回
包含渲染图标的新创建。[转移完整]GdkPixbuf
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_render_icon_surface ----

gtk_render_icon_surface
在曲面中以指定的 x 和 y 坐标呈现图标。
语法
参数
context- 一GtkStyleContext
cr- 一cairo_t
surface- 一个包含要绘制的图标cairo_surface_t
x- 图标的X位置
y- Y 位置为 incon
自 3.10 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_render_insertion_cursor ----

gtk_render_insertion_cursor
在 cr 上绘制一个文本插入符号，位于指定的布局索引处。
语法
参数
context- 一GtkStyleContext
cr- 一cairo_t
x- X起源
y- Y起源
layout- 文本PangoLayout
index- 索引PangoLayout
direction- 文本PangoDirection
自 3.
另请参见
GtkStyleContext


------------ KeyGTK3gtk_render_layout ----

gtk_render_layout
在坐标 x， y 上渲染布局
语法
参数
context- 一GtkStyleContext
cr- 一cairo_t
x- X起源
y- Y起源
layout- 要渲染PangoLayout
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_render_line ----

gtk_render_line
呈现从 （x0， y0） 到 （x1， y1） 的线条。
语法
参数
context- 一GtkStyleContext
cr- 一cairo_t
x0- X 坐标表示直线的原点
y0- Y 坐标表示直线的原点
x1- X坐标表示线的末端
y1- Y 坐标表示线的末端
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_render_option ----

gtk_render_option
呈现选项标记（如 a 中所示），GTK_STATE_FLAG_ACTIVEstate将确定选项是打开还是关闭，andGTK_STATE_FLAG_INCONSISTENT是否应将其标记为未定义。典型的选项标记呈现：GtkRadioButton
语法
参数
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原点
y- 矩形的Y原点
width- 矩形宽度
height- 矩形高度
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_render_slider ----

gtk_render_slider
在由 x、y、宽度、高度定义的矩形中呈现滑块（如 中所示）。方向定义滑块是垂直还是水平。典型的滑块渲染：GtkScale
语法
参数
context- 一GtkStyleContext
cr- 一cairo_t
x- 矩形的X原点
y- 矩形的Y原点
width- 矩形宽度
height- 矩形高度
orientation- 滑块的方向
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_revealer_get_child_revealed ----

gtk_revealer_get_child_revealed
返回子项是否完全显示，即完成到显示状态的过渡。
语法
参数
revealer- 一GtkRevealer
返回
如果孩子完全显露出来，则为 TRUE
自 3.10 起
另请参见
GtkRevealer


------------ KeyGTK3gtk_revealer_get_reveal_child ----

gtk_revealer_get_reveal_child
返回子项当前是否显示。请参见gtk_revealer_set_reveal_child（）。一旦过渡到显示状态开始，此函数将立即返回 TRUE。要了解孩子是否完全显露出来（即过渡已完成），请使用gtk_revealer_get_child_revealed（）。
语法
参数
revealer- 一GtkRevealer
返回
如果孩子被揭示，则为 true。
自 3.10 起
另请参见
GtkRevealer


------------ KeyGTK3gtk_revealer_get_transition_duration ----

gtk_revealer_get_transition_duration
返回转换所需的时间量（以毫秒为单位）。
语法
参数
revealer- 一GtkRevealer
返回
过渡持续时间
自 3.10 起
另请参见
GtkRevealer


------------ KeyGTK3gtk_revealer_get_transition_type ----

gtk_revealer_get_transition_type
获取将用于揭示程序中的过渡的动画类型。
语法
参数
revealer- 一GtkRevealer
返回
当前转换类型的揭示符
自 3.10 起
另请参见
GtkRevealer


------------ KeyGTK3gtk_revealer_new ----

gtk_revealer_new
创建新的 .GtkRevealer
返回
新创建的GtkRevealer
自 3.10 起
另请参见
GtkRevealer


------------ KeyGTK3gtk_revealer_set_reveal_child ----

gtk_revealer_set_reveal_child
告诉他们揭露或隐藏它的孩子。过渡将使用当前转换类型的揭示符进行动画处理。GtkRevealer
语法
参数
revealer- 一GtkRevealer
reveal_child- 真实地揭示孩子
自 3.10 起
另请参见
GtkRevealer


------------ KeyGTK3gtk_revealer_set_transition_duration ----

gtk_revealer_set_transition_duration
设置过渡将花费的持续时间。
语法
参数
revealer- 一GtkRevealer
duration- 新的持续时间，以毫秒为单位
自 3.10 起
另请参见
GtkRevealer


------------ KeyGTK3gtk_revealer_set_transition_type ----

gtk_revealer_set_transition_type
设置将在揭示程序中用于传递的动画类型。可用类型包括各种淡入淡出和幻灯片。
语法
参数
revealer- 一GtkRevealer
transition- 新的过渡类型
自 3.1 起
另请参见
GtkRevealer


------------ KeyGTK3gtk_rgb_to_hsv ----

gtk_rgb_to_hsv
将颜色从 RGB 空间转换为 HSV。输入值必须在 [0.0， 1.0] 范围内;输出值将在同一范围内。
语法
参数
r- 红色
g- 绿色
b- 蓝色
h- 返回色调分量的值。[输出]
s- 饱和分量的返回值。[输出]
v- 返回值组件的值。[输出]
自 2.1 起
另请参见
GtkHSV


------------ KeyGTK3gtk_scale_add_mark ----

gtk_scale_add_mark
在值处添加标记。通过在刻度旁边绘制刻度线来直观地指示标记，GTK+使用户可以轻松地将刻度精确定位在标记值处。如果标记不为 NULL，则文本将显示在刻度线旁边。要从刻度中删除标记，请使用gtk_scale_clear_marks（）。
语法
参数
scale- 一GtkScale
value- 放置标记的值必须介于刻度的下限和上限之间？调整
position- 在哪里画标记。对于水平比例，GTK_POS_LEFT绘制在比例之上，其他任何内容都绘制在下面。对于垂直比例，GTK_POS_TOP绘制在比例的左侧，其他任何内容都绘制在右侧。GTK_POS_TOPGTK_POS_LEFT
markup- 要在标记处显示的文本，使用Pango标记或NULL。[允许-无]
2.16 起
另请参见
GtkScale


------------ KeyGTK3gtk_scale_button_get_adjustment ----

gtk_scale_button_get_adjustment
获取与 ？ s 刻度关联的 。有关详细信息，请参阅 gtk_range_get_adjustment（）。GtkAdjustmentGtkScaleButton
语法
参数
button- 一GtkScaleButton
返回
与比例关联的调整。[无转移]
自 2.12 起
另请参见
GtkScaleButton


------------ KeyGTK3gtk_scale_button_get_minus_button ----

gtk_scale_button_get_minus_button
检索 的减号按钮。GtkScaleButton
语法
参数
button- 一GtkScaleButton
返回
的减号按钮。[无转移]
自 2.1 起GtkScaleButton
另请参见
GtkScaleButton


------------ KeyGTK3gtk_scale_button_get_plus_button ----

gtk_scale_button_get_plus_button
Retrieves the plus button of the GtkScaleButton.
Syntax
Parameters
button  -  	a GtkScaleButton
Returns
the plus button of the GtkScaleButton. [transfer none]
Since 2.14
See Also
GtkScaleButton


------------ KeyGTK3gtk_scale_button_get_popup ----

gtk_scale_button_get_popup
检索 的弹出窗口。GtkScaleButton
语法
参数
button- 一GtkScaleButton
返回
的弹出窗口。[无转移]
自 2.14 起GtkScaleButton
另请参见
GtkScaleButton


------------ KeyGTK3gtk_scale_button_get_value ----

gtk_scale_button_get_value
Gets the current value of the scale button.
Syntax
Parameters
button  -  	a GtkScaleButton
Returns
current value of the scale button
Since 2.12
See Also
GtkScaleButton


------------ KeyGTK3gtk_scale_button_new ----

gtk_scale_button_new
创建一个介于最小值和最大值之间的 、步进和步进。GtkScaleButton
语法
参数
size- 股票图标大小。[键入整型]
min- 刻度的最小值（通常为0）
max- 刻度的最大值（通常为100）
step- 滚轮事件或向上/向下箭头事件发生时的值的步进（通常为2）
icons- 图标名称的 NULL 终止达雷，或者如果要使用 gtk_scale_button_set_icons（） 设置 listlater，则为 NULL。[允许-无][数组零终止 = 1]
返回
自 2.12 以来的新
品GtkScaleButton
另请参见
GtkScaleButton


------------ KeyGTK3gtk_scale_button_set_adjustment ----

gtk_scale_button_set_adjustment
Sets the GtkAdjustment to be used as a modelfor the GtkScaleButton?s scale.See gtk_range_set_adjustment() for details.
Syntax
Parameters
button  -  	a GtkScaleButton
adjustment  -  	a GtkAdjustment
Since 2.12
See Also
GtkScaleButton


------------ KeyGTK3gtk_scale_button_set_icons ----

gtk_scale_button_set_icons
设置缩放按钮要使用的图标。有关详细信息，请参阅酒店。?icons?
语法
参数
button- 一GtkScaleButton
icons- 以 NULL 结尾的图标名称数组。[数组零终止 = 1]
自 2.12 起
另请参见
GtkScaleButton


------------ KeyGTK3gtk_scale_button_set_value ----

gtk_scale_button_set_value
设置刻度的当前值;如果该值超出最小或最大范围值，则将其夹紧以适合它们。如果值更改，缩放按钮将发出信号。?value-changed?
语法
参数
button- 一GtkScaleButton
value- 自2.12年以来比例按钮
的新值
另请参见
GtkScaleButton


------------ KeyGTK3gtk_scale_clear_marks ----

gtk_scale_clear_marks
删除已使用 gtk_scale_add_mark（） 添加的任何标记。
语法
参数
scale- a
自2.1起GtkScale
另请参见
GtkScale


------------ KeyGTK3gtk_scale_get_digits ----

gtk_scale_get_digits
获取值中显示的小数位数。
语法
参数
scale- 一GtkScale
返回
显示的小数位数
另请参见
GtkScale


------------ KeyGTK3gtk_scale_get_draw_value ----

gtk_scale_get_draw_value
返回当前值是否显示为滑块旁边的字符串。
语法
参数
scale- 一GtkScale
返回
当前值是否显示为字符串
另请参见
GtkScale


------------ KeyGTK3gtk_scale_get_has_origin ----

gtk_scale_get_has_origin
返回比例尺是否具有原点。
语法
参数
scale- 一GtkScale
返回
如果比例尺具有原点，则为 TRUE。
自 3.4 起
另请参见
GtkScale


------------ KeyGTK3gtk_scale_get_layout ----

gtk_scale_get_layout
获取用于显示比例的 。返回的对象由规模拥有，因此不需要由调用方释放。PangoLayout
语法
参数
scale- 一GtkScale
返回
对于此刻度，如果属性为 FALSE，则为 NULL。[无转移]
2.4 起PangoLayout?draw-value?
另请参见
GtkScale


------------ KeyGTK3gtk_scale_get_layout_offsets ----

gtk_scale_get_layout_offsets
获取比例尺将绘制比例尺中表示文本的坐标。请记住，当使用函数时，您需要使用 PANGO_PIXELS（） 或 从像素转换。如果该属性为 FALSE，则返回值未定义。PangoLayoutPangoLayoutPANGO_SCALE?draw-value?
语法
参数
scale- 一GtkScale
x- 存储布局的 X 偏移量的位置，或 NULL。[输出][允许-无]
y- 存储布局的 Y 偏移量或 NULL 的位置。[输出][允许-无]
2.4 起
另请参见
GtkScale


------------ KeyGTK3gtk_scale_get_value_pos ----

gtk_scale_get_value_pos
Gets the position in which the current value is displayed.
Syntax
Parameters
scale  -  	a GtkScale
Returns
the position in which the current value is displayed
See Also
GtkScale


------------ KeyGTK3gtk_scale_new ----

gtk_scale_new
创建新的 .GtkScale
语法
参数
orientation- 刻度的方向。
adjustment- 设置比例范围的，或 NULL 创建新的调整。[允许-无]GtkAdjustment
返回
自 3.0 以来的新
品GtkScale
另请参见
GtkScale


------------ KeyGTK3gtk_scale_new_with_range ----

gtk_scale_new_with_range
创建一个具有给定方向的新比例构件，该微件允许用户使用递增步骤输入介于最小值和最大值（包括最小值和最大值）之间的数字。步骤必须为非零;它是使用箭头键调整比例值时滑块移动的距离。请注意，如果阶跃为 10 的幂，则推导精度的方式效果最佳。如果生成的精度不适合您需要的精度，请使用 gtk_scale_set_digits（） 进行更正。
语法
参数
orientation- 刻度的方向。
min- 最小值
max- 最大值
step- 步长增量（刻度大小）与键盘快捷键一起使用
返回
自 3.0 以来的新
品GtkScale
另请参见
GtkScale


------------ KeyGTK3gtk_scale_set_digits ----

gtk_scale_set_digits
设置值中显示的小数位数。还会导致调整的值四舍五入到此位数，因此检索到的值与用户看到的值匹配。
语法
参数
scale- 一GtkScale
digits- 显示小数位数，例如使用 1 显示 1.0，使用 2 显示 1.00 等
另请参见
GtkScale


------------ KeyGTK3gtk_scale_set_draw_value ----

gtk_scale_set_draw_value
指定当前值是否显示为滑块旁边的字符串。
语法
参数
scale- 一GtkScale
draw_value- TRUE 绘制值
另请参见
GtkScale


------------ KeyGTK3gtk_scale_set_has_origin ----

gtk_scale_set_has_origin
如果has_origin设置为 TRUE（默认值），则比例将突出显示比例尺原点（底部或左侧）与当前值之间的比例部分。
语法
参数
scale- 一GtkScale
has_origin- 如果比例尺起源于
3.4
，则为 TRUE
另请参见
GtkScale


------------ KeyGTK3gtk_scale_set_value_pos ----

gtk_scale_set_value_pos
Sets the position in which the current value is displayed.
Syntax
Parameters
scale  -  	a GtkScale
pos  -  	the position in which the current value is displayed
See Also
GtkScale


------------ KeyGTK3gtk_scrollable_get_hadjustment ----

gtk_scrollable_get_hadjustment
Retrieves the GtkAdjustment used for horizontal scrolling.
Syntax
Parameters
scrollable  -  	a GtkScrollable
Returns
horizontal GtkAdjustment. [transfer none]
Since 3.0
See Also
GtkScrollable


------------ KeyGTK3gtk_scrollable_get_hscroll_policy ----

gtk_scrollable_get_hscroll_policy
Gets the horizontal GtkScrollablePolicy.
Syntax
Parameters
scrollable  -  	a GtkScrollable
Returns
The horizontal GtkScrollablePolicy.
Since 3.0
See Also
GtkScrollable


------------ KeyGTK3gtk_scrollable_get_vadjustment ----

gtk_scrollable_get_vadjustment
检索用于垂直滚动的 。GtkAdjustment
语法
参数
scrollable- 一GtkScrollable
返回
垂直。[无转移]
自 3.0 起GtkAdjustment
另请参见
GtkScrollable


------------ KeyGTK3gtk_scrollable_get_vscroll_policy ----

gtk_scrollable_get_vscroll_policy
Gets the vertical GtkScrollablePolicy.
Syntax
Parameters
scrollable  -  	a GtkScrollable
Returns
The vertical GtkScrollablePolicy.
Since 3.0
See Also
GtkScrollable


------------ KeyGTK3gtk_scrollable_set_hadjustment ----

gtk_scrollable_set_hadjustment
设置 的水平调整。GtkScrollable
语法
参数
scrollable- 一GtkScrollable
hadjustment- 一个.[允许-无]
自 3.0 起GtkAdjustment
另请参见
GtkScrollable


------------ KeyGTK3gtk_scrollable_set_hscroll_policy ----

gtk_scrollable_set_hscroll_policy
设置以确定卷轴滚动是从最小宽度以下开始，还是应低于自然宽度。GtkScrollablePolicy
语法
参数
scrollable- 一GtkScrollable
policy- 水平
自3.0GtkScrollablePolicy
另请参见
GtkScrollable


------------ KeyGTK3gtk_scrollable_set_vadjustment ----

gtk_scrollable_set_vadjustment
设置 的垂直调整。GtkScrollable
语法
参数
scrollable- 一GtkScrollable
vadjustment- 一个.[允许-无]
自 3.0 起GtkAdjustment
另请参见
GtkScrollable


------------ KeyGTK3gtk_scrollable_set_vscroll_policy ----

gtk_scrollable_set_vscroll_policy
设置 以确定垂直滚动是从低于最小高度开始还是低于自然高度。GtkScrollablePolicy
语法
参数
scrollable- 一GtkScrollable
policy- 垂直
自3。GtkScrollablePolicy
另请参见
GtkScrollable


------------ KeyGTK3gtk_scrollbar_new ----

gtk_scrollbar_new
创建具有给定方向的新滚动条。
语法
参数
orientation- 滚动条的方向。
adjustment- 要使用的，或 NULL 创建新的调整。[允许-无]GtkAdjustment
返回
新的 .
自 3.GtkScrollbar
另请参见
GtkScrollbar


------------ KeyGTK3gtk_scrolled_window_add_with_viewport ----

gtk_scrolled_window_add_with_viewport
gtk_scrolled_window_add_with_viewport自版本 3.8 以来已被弃用，并且不应在新编写的 code.gtk_container_add（） 中使用，如果子代不实现，现在将自动 adda。用于添加没有本机滚动功能的子项。这只是一个便利功能;它等效于将不可滚动的子级添加到视区，然后将视口添加到滚动的窗口。如果子项具有本机滚动，则usegtk_container_add（） 而不是此函数。视口通过移动其 来滚动子项，并将子项的大小取为其 toplevel 的大小。对于大多数支持本机滚动的小部件来说，这将是非常错误的;例如，如果您添加一个小部件（例如带有视口）的小部件，则整个小部件将滚动，包括列标题。因此，具有本机滚动支持的小部件不应与代理一起使用。如果小部件实现了接口，则它支持本机滚动。GtkViewportGtkScrollableGdkWindowGdkWindowGtkTreeViewGtkViewportGtkScrollable
语法
参数
scrolled_window- 一GtkScrolledWindow
child- 您要滚动的小部件
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_capture_button_press ----

gtk_scrolled_window_get_capture_button_press
返回在动力学滚动期间是否捕获按钮按下。请参见gtk_scrolled_window_set_capture_button_press（）。
语法
参数
scrolled_window- 一GtkScrolledWindow
返回
如果在动力学滚动期间捕获按钮按下，则为 TRUE
，因为 3.
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_hadjustment ----

gtk_scrolled_window_get_hadjustment
返回水平滚动条的调整，用于将地平线滚动条连接到子微件的水平滚动功能。
语法
参数
scrolled_window- 一GtkScrolledWindow
返回
水平 .[无转移]GtkAdjustment
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_hscrollbar ----

gtk_scrolled_window_get_hscrollbar
返回scrolled_window的水平滚动条。
语法
参数
scrolled_window- 一GtkScrolledWindow
返回
滚动窗口的水平滚动条，如果没有滚动窗口，则为 NULL。[无转移]
自 2.8 起
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_kinetic_scrolling ----

gtk_scrolled_window_get_kinetic_scrolling
返回指定的动态滚动行为。
语法
参数
scrolled_window- 一GtkScrolledWindow
返回
滚动行为标志。
自 3.4 起
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_min_content_height ----

gtk_scrolled_window_get_min_content_height
获取 scrolled_window 的最小内容高度，如果未设置，则获取 -1。
语法
参数
scrolled_window- 一GtkScrolledWindow
返回
最小内容高度
自 3.0 起
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_min_content_width ----

gtk_scrolled_window_get_min_content_width
获取 scrolled_window 的最小内容宽度，如果未设置，则获取 -1。
语法
参数
scrolled_window- 一GtkScrolledWindow
返回
最小内容宽度
自 3.0 起
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_placement ----

gtk_scrolled_window_get_placement
获取内容相对于滚动窗口的滚动条的位置。请参见gtk_scrolled_window_set_placement（）。
语法
参数
scrolled_window- 一GtkScrolledWindow
返回
当前放置值。另请参见gtk_scrolled_window_set_placement（） andgtk_scrolled_window_unset_placement（）。
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_policy ----

gtk_scrolled_window_get_policy
检索水平和垂直滚动条的当前策略值。请参见gtk_scrolled_window_set_policy（）。
语法
参数
scrolled_window- 一GtkScrolledWindow
hscrollbar_policy- 存储水平滚动条策略的位置，或 NULL。[输出][允许-无]
vscrollbar_policy- 存储垂直滚动条策略的位置，或 NULL。[输出][允许-无]
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_shadow_type ----

gtk_scrolled_window_get_shadow_type
获取滚动窗口的阴影类型。请参见 gtk_scrolled_window_set_shadow_type（）。
语法
参数
scrolled_window- 一GtkScrolledWindow
返回
当前阴影类型
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_vadjustment ----

gtk_scrolled_window_get_vadjustment
返回垂直滚动条的调整，用于将垂直滚动条连接到子微件的垂直滚动功能。
语法
参数
scrolled_window- 一GtkScrolledWindow
返回
垂直 .[无转移]GtkAdjustment
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_get_vscrollbar ----

gtk_scrolled_window_get_vscrollbar
返回scrolled_window的垂直滚动条。
语法
参数
scrolled_window- 一GtkScrolledWindow
返回
滚动窗口的垂直滚动条，如果没有滚动窗口，则为 NULL。[无转移]
自 2.8 起
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_new ----

gtk_scrolled_window_new
创建新的滚动窗口。这两个参数是滚动窗口的调整;这些将与滚动条和子小部件共享，以使条与子小部件保持同步。通常，您希望为调整传递 NULL，这将导致滚动窗口为您创建它们。
语法
参数
hadjustment- 水平调整。[允许-无]
vadjustment- 垂直调整。[允许-无]
返回
新的滚动窗口
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_capture_button_press ----

gtk_scrolled_window_set_capture_button_press
改变scrolled_window的行为。到可能开始动态滚动的初始事件。当capture_button_pressis设置为 TRUE 时，该事件将由滚动窗口捕获，如果该事件旨在转到子构件，则稍后会重播该事件。如果任何子小部件在 上执行不可逆操作，则应启用此选项。如果他们不这样做，并且处理其他处理，最好将capture_button_press设置为FALSE。仅当启用了动态滚动时，此设置才会起作用。?button-press-event??grab-broken-event?
语法
参数
scrolled_window- 一GtkScrolledWindow
capture_button_press- TRUE 自 3.4
起捕获按钮按下
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_hadjustment ----

gtk_scrolled_window_set_hadjustment
设置水平滚动条的 。GtkAdjustment
语法
参数
scrolled_window- 一GtkScrolledWindow
hadjustment- 水平滚动调整
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_kinetic_scrolling ----

gtk_scrolled_window_set_kinetic_scrolling
打开或关闭动态滚动。Kinetic 滚动仅适用于具有sourceGDK_SOURCE_TOUCHSCREEN的设备。
语法
参数
scrolled_window- 一GtkScrolledWindow
kinetic_scrolling- TRUE 启用动力学滚动，
从 3.4 开始
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_min_content_height ----

gtk_scrolled_window_set_min_content_height
设置scrolled_window应保持可见的最小高度。请注意，这可以并且（通常）小于内容的最小大小。
语法
参数
scrolled_window- 一GtkScrolledWindow
height- 最小内容高度
自 3.0 起
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_min_content_width ----

gtk_scrolled_window_set_min_content_width
设置scrolled_window应保持可见的最小宽度。请注意，这可以并且（通常）小于内容的最小大小。
语法
参数
scrolled_window- 一GtkScrolledWindow
width- 自 3.0 以来的最小内容宽度
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_placement ----

gtk_scrolled_window_set_placement
设置内容相对于滚动窗口的滚动条的位置。默认值为 GTK_CORNER_TOP_LEFT，表示子项位于左上角，滚动条位于下方和右侧。中的其他值为 GTK_CORNER_TOP_RIGHT，GTK_CORNER_BOTTOM_LEFT 和 GTK_CORNER_BOTTOM_RIGHT。另请参见gtk_scrolled_window_get_placement（） andgtk_scrolled_window_unset_placement（）。GtkCornerType
语法
参数
scrolled_window- 一GtkScrolledWindow
window_placement- 子窗口的位置
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_policy ----

gtk_scrolled_window_set_policy
设置水平和垂直滚动条的滚动条策略。该策略确定滚动条应何时显示;它是枚举的值。如果GTK_POLICY_ALWAYS，则滚动棒始终存在;如果GTK_POLICY_NEVER，则滚动条不存在;如果GTK_POLICY_AUTOMATIC，则滚动条仅在需要时存在（即，如果栏的滑块部分小于槽 - 显示大于页面大小）。GtkPolicyType
语法
参数
scrolled_window- 一GtkScrolledWindow
hscrollbar_policy- 水平条政策
vscrollbar_policy- 竖线政策
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_shadow_type ----

gtk_scrolled_window_set_shadow_type
更改在内容ofscrolled_window周围绘制的阴影类型。
语法
参数
scrolled_window- 一GtkScrolledWindow
type- 一种阴影，以绘制滚动的窗口内容
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_set_vadjustment ----

gtk_scrolled_window_set_vadjustment
设置垂直滚动条的 。GtkAdjustment
语法
参数
scrolled_window- 一GtkScrolledWindow
vadjustment- 垂直滚动调整
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_scrolled_window_unset_placement ----

gtk_scrolled_window_unset_placement
取消设置内容相对于滚动条的位置对于滚动窗口。如果没有为滚动窗口设置窗口位置，则默认为GTK_CORNER_TOP_LEFT。另请参见gtk_scrolled_window_set_placement（） andgtk_scrolled_window_get_placement（）。
语法
参数
scrolled_window- a
自2.10起GtkScrolledWindow
另请参见
GtkScrolledWindow


------------ KeyGTK3gtk_search_bar_connect_entry ----

gtk_search_bar_connect_entry
连接作为要在此搜索栏中使用的小部件传递的小部件。该条目应为搜索栏的后代。仅当条目不是搜索栏的直接子项时，才需要这样做（如我们的主要示例所示）。GtkEntry
语法
参数
bar- 一GtkSearchBar
entry- a
自3.10起GtkEntry
另请参见
GtkSearchBar


------------ KeyGTK3gtk_search_bar_get_search_mode ----

gtk_search_bar_get_search_mode
返回搜索模式是打开还是关闭。
语法
参数
bar- 一GtkSearchBar
返回
搜索模式是否自 3.10 起处于打开状态
另请参见
GtkSearchBar


------------ KeyGTK3gtk_search_bar_get_show_close_button ----

gtk_search_bar_get_show_close_button
返回是否显示关闭按钮。
语法
参数
bar- 一GtkSearchBar
返回
自 3.10 起是否显示
关闭按钮
另请参见
GtkSearchBar


------------ KeyGTK3gtk_search_bar_handle_event ----

gtk_search_bar_handle_event
当包含搜索栏的顶级窗口收到关键事件时，应调用此函数。如果键事件由搜索栏处理，则将显示该栏，用输入的文本填充的条目，并返回GDK_EVENT_STOPwill。调用方应确保事件不会进一步传播。如果没有条目连接到搜索栏，usinggtk_search_bar_connect_entry（），则此函数将立即返回并显示警告。
在按键时显示搜索栏12345678910111213[/语法] [语法]静态gbooleanon_key_press_event （GtkWidget *widget， GdkEvent *event， gpointer user_data）{ GtkSearchBar *bar = GTK_SEARCH_BAR （user_data）;返回gtk_search_bar_handle_event （bar， event）;}g_signal_connect（窗口、“按键事件”、G_CALLBACK（on_key_press_event）、search_bar）;[/语法]
语法
参数
bar- 一GtkSearchBar
event- 一个包含按键事件GdkEvent
返回
GDK_EVENT_STOP如果按键事件导致在搜索条目中输入文本（并在必要时显示搜索栏），否则GDK_EVENT_PROPAGATE。
自 3.1 起
另请参见
GtkSearchBar


------------ KeyGTK3gtk_search_bar_new ----

gtk_search_bar_new
创建一个 .您需要告诉它哪个小部件将成为您的文本输入usinggtk_search_bar_connect_entry（）。GtkSearchBar
返回
自 3.10 以来的新
品GtkSearchBar
另请参见
GtkSearchBar


------------ KeyGTK3gtk_search_bar_set_search_mode ----

gtk_search_bar_set_search_mode
打开或关闭搜索模式。
语法
参数
bar- 一GtkSearchBar
search_mode- 自3.10以来搜索模式
的新状态
另请参见
GtkSearchBar


------------ KeyGTK3gtk_search_bar_set_show_close_button ----

gtk_search_bar_set_show_close_button
显示或隐藏关闭按钮。应用程序已准备好具有 “搜索？切换按钮不应在其搜索栏中显示关闭按钮，因为它复制了切换按钮的作用。
语法
参数
bar- 一GtkSearchBar
visible- 自3.10
以来是否显示
关闭按钮
另请参见
GtkSearchBar


------------ KeyGTK3gtk_search_entry_new ----

gtk_search_entry_new
创建一个 ，当搜索字段为空时，将带有查找图标，当搜索字段为空时，将创建一个清晰图标。GtkSearchEntry
返回
一个新的
自 3.GtkSearchEntry
另请参见
GtkSearchEntry


------------ KeyGTK3gtk_selection_add_target ----

gtk_selection_add_target
将指定目标追加到给定构件和选择的受支持目标列表中。
语法
参数
widget- 一GtkWidget
selection- 选择
target- 要添加的目标。
info- 将传递回应用程序的无符号整数。
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_add_targets ----

gtk_selection_add_targets
将目标表预置到给定构件和选择的受支持目标列表中。
语法
参数
widget- 一GtkWidget
selection- 选择
targets- 要添加的目标表。 [数组长度 = ntargets]
ntargets- 目标中的条目数
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_clear_targets ----

gtk_selection_clear_targets
删除为小关节的给定选择注册的所有目标。
语法
参数
widget- 一GtkWidget
selection- 代表选择的原子
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_convert ----

gtk_selection_convert
请求所选内容。收到时，“选择已收到”将生成信号。
语法
参数
widget- 充当请求者的小部件
selection- 获得哪个选择
target- 所需信息的形式（例如，字符串）
time_- 请求时间（通常是触发事件的时间）在紧急情况下，您可以使用GDK_CURRENT_TIME
返回
如果请求成功，则为 TRUE。如果我们不能处理请求，则为 FALSE。（例如，已经有一个请求正在处理中，这是小部件）。
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_copy ----

gtk_selection_data_copy
创建 及其数据的副本。GtkSelectionData
语法
参数
data- 指向 .GtkSelectionData
返回
指向数据副本的指针。
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_free ----

gtk_selection_data_free
释放返回的fromgtk_selection_data_copy（）。GtkSelectionData
语法
参数
data- 指向 .[br \=“”GtkSelectionData
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_data ----

gtk_selection_data_get_data
检索所选内容的原始数据。
语法
参数
selection_data- 指向 .GtkSelectionData
返回
所选内容的原始数据。
自 2.14 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_data_type ----

gtk_selection_data_get_data_type
检索所选内容的数据类型。
语法
参数
selection_data- 指向 .GtkSelectionData
返回
所选内容的数据类型。[无转移]
自 2.14 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_data_with_length ----

gtk_selection_data_get_data_with_length
检索所选内容的原始数据及其长度。
语法
参数
selection_data- 指向 .GtkSelectionData
length- 数据段长度的返回位置。[输出]
返回
所选内容的原始数据。[数组长度 = 长度]
自 3.0 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_display ----

gtk_selection_data_get_display
检索所选内容的显示。
语法
参数
selection_data- 指向 .GtkSelectionData
返回
所选内容的显示。[无转移]
自 2.14 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_format ----

gtk_selection_data_get_format
检索所选内容的格式。
语法
参数
selection_data- 指向 .GtkSelectionData
返回
所选内容的格式。
自 2.14 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_length ----

gtk_selection_data_get_length
检索所选内容的原始数据的长度。
语法
参数
selection_data- 指向 .GtkSelectionData
返回
所选内容的数据长度。
自 2.14 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_pixbuf ----

gtk_selection_data_get_pixbuf
获取选择数据的内容作为 .GdkPixbuf
语法
参数
selection_data- 一GtkSelectionData
返回
如果选择数据包含可识别的图像类型，并且可以将其转换为 ，则返回新分配的 pixbuf，否则为 NULL。如果结果为非 NULL，则必须使用 g_object_unref（） 将其释放。[转移完整]
自 2.6 起GdkPixbuf
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_selection ----

gtk_selection_data_get_selection
检索所选选择的数据。GdkAtom
语法
参数
selection_data- 指向 .GtkSelectionData
返回
选择数据的选择。[无转移]
2.16 起GdkAtom
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_target ----

gtk_selection_data_get_target
检索所选内容的目标。
语法
参数
selection_data- 指向 .GtkSelectionData
返回
所选内容的目标。[无转移]
自 2.14 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_targets ----

gtk_selection_data_get_targets
获取selection_data的内容作为目标数组。这可用于解释获取始终提供的任何选择的标准 TARGET 目标的结果。
语法
参数
selection_data- 一个对象GtkSelectionData
targets- 存储目标数组的位置。存储在这里的结果必须使用 g_free（） 进行释放。[输出][数组长度 = n_atoms][转移容器]
n_atoms- 位置存储目标中的项目数量。
返回
如果selection_datacontains有效的目标数组，则为 TRUE，否则为 FALSE。
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_text ----

gtk_selection_data_get_text
以 UTF-8 字符串的形式获取选择数据的内容。
语法
参数
selection_data- 一GtkSelectionData
返回
如果选择数据包含已识别的文本类型，并且可以将其转换为 UTF-8，即包含已转换文本的新分配字符串，否则为 NULL。如果结果为非 NULL，则必须使用 g_free（） 将其释放。[类型 utf8]
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_get_uris ----

gtk_selection_data_get_uris
以 URI 数组的形式获取选择数据的内容。
语法
参数
selection_data- 一GtkSelectionData
返回
如果选择数据包含 URI 列表，则为包含 URI 的新分配的 NULL 终止字符串数组，否则为 NULL。如果结果为non-NULL，则必须使用g_strfreev（）将其释放。[数组零终止 = 1][元素型 utf8][转移完整]
自 2.6 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_set ----

gtk_selection_data_set
将新数据存储到对象中。应仅从选择处理程序回调调用。零终止存储的数据。GtkSelectionData
语法
参数
selection_data- 指向 .GtkSelectionData
type- 选择数据的类型
format- 格式（单位中的位数）
data- 指向数据的指针（将被复制）。[数组长度 = 长度]
length- 数据长度
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_set_pixbuf ----

gtk_selection_data_set_pixbuf
设置从 pixbuf 中选择的内容，像素符号将转换为byselection_data>目标确定的形式。GdkPixbuf
语法
参数
selection_data- 一GtkSelectionData
pixbuf- 一GdkPixbuf
返回
如果选择已成功设置，则为 TRUE，否则为 FALSE。
自 2.6 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_set_text ----

gtk_selection_data_set_text
设置从 UTF-8 编码字符串中选择的内容。该字符串将转换为byselection_data>目标确定的形式。
语法
参数
selection_data- 一GtkSelectionData
str- 一个 UTF-8 字符串
len- str 的长度，如果 stris nul 终止，则为 -1。
返回
如果选择已成功设置，则为 TRUE，否则为 FALSE。
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_set_uris ----

gtk_selection_data_set_uris
设置从 URI 列表中选择的内容。字符串将转换为byselection_data>目标确定的形式。
语法
参数
selection_data- 一GtkSelectionData
uris- 一个以 NULL 结尾的字符串数组，用于保存 URI。[数组零终止 = 1]
返回
如果选择已成功设置，则为 TRUE，否则为 FALSE。
自 2.6 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_targets_include_image ----

gtk_selection_data_targets_include_image
给定一个包含目标列表的对象，确定目标中的任何目标是否可用于提供 .GtkSelectionDataGdkPixbuf
语法
参数
selection_data- 一个对象GtkSelectionData
writable- 是否只接受GTK +知道如何将pixbuf转换为格式的目标
返回
如果selection_dataholds目标列表，并且包含适合图像的目标，则为 TRUE，否则为 FALSE。
自 2.6 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_targets_include_rich_text ----

gtk_selection_data_targets_include_rich_text
给定一个包含目标列表的对象，确定目标中的任何目标是否可用于提供富文本。GtkSelectionData
语法
参数
selection_data- 一个对象GtkSelectionData
buffer- 一GtkTextBuffer
返回
如果selection_dataholds目标列表，并且包含适合富文本的目标，则为 TRUE，否则为 FALSE。
自 2.10 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_targets_include_text ----

gtk_selection_data_targets_include_text
给定一个包含目标列表的对象，确定目标中的任何目标是否可用于提供文本。GtkSelectionData
语法
参数
selection_data- 一个对象GtkSelectionData
返回
如果selection_dataholds目标列表，并且包含适合文本的目标，则为 TRUE，否则为 FALSE。
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_data_targets_include_uri ----

gtk_selection_data_targets_include_uri
给定一个包含目标列表的对象，确定目标中的任何目标是否可以用于提供列表或URI。GtkSelectionData
语法
参数
selection_data- 一个对象GtkSelectionData
返回
如果selection_dataholds目标列表，并且包含适合 URI 列表的目标，则为 TRUE，否则为 FALSE。
自 2.10 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_owner_set ----

gtk_selection_owner_set
声明特定小部件的给定选择的所有权，或者，如果小部件为 NULL，则释放所选内容的所有权。
语法
参数
widget- a 或 NULL。[允许-无]GtkWidget
selection- 一个实习原子，代表要声明的选择
time_- 声明选择的时间戳
返回
如果操作成功，则为 TRUE
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_owner_set_for_display ----

gtk_selection_owner_set_for_display
声明特定小部件的给定选择的所有权，或者，如果小部件为 NULL，则释放所选内容的所有权。
语法
参数
display- 设置选择的位置GdkDisplay
widget- 新的选择所有者 （a） 或 NULL。[允许-无]GtkWidget
selection- 一个实习原子，代表要声明的选择。
time_- 声明选择的时间戳
返回
如果操作自 2.2 起成功，
则为 TRUE
另请参见
gtk3-Selections


------------ KeyGTK3gtk_selection_remove_all ----

gtk_selection_remove_all
删除所有处理程序并取消设置构件所有选择的所有权。在小部件被破坏时调用。应用程序通常不会调用此函数。
语法
参数
widget- 一GtkWidget
另请参见
gtk3-Selections


------------ KeyGTK3gtk_separator_menu_item_new ----

gtk_separator_menu_item_new
创建新的 .GtkSeparatorMenuItem
返回
一个新的GtkSeparatorMenuItem
另请参见
GtkSeparatorMenuItem


------------ KeyGTK3gtk_separator_new ----

gtk_separator_new
创建具有给定方向的 new。GtkSeparator
语法
参数
orientation- 分隔符的方向。
返回
一个新的.
自 3.GtkSeparator
另请参见
GtkSeparator


------------ KeyGTK3gtk_separator_tool_item_get_draw ----

gtk_separator_tool_item_get_draw
返回项是绘制为线条还是仅为空。请参见gtk_separator_tool_item_set_draw（）。
语法
参数
item- 一GtkSeparatorToolItem
返回
如果项绘制为一条线，则为 TRUE，或者只是空白。
自 2.
另请参见
GtkSeparatorToolItem


------------ KeyGTK3gtk_separator_tool_item_new ----

gtk_separator_tool_item_new
创建新的GtkSeparatorToolItem
返回
新的
自 2.4 以来GtkSeparatorToolItem
另请参见
GtkSeparatorToolItem


------------ KeyGTK3gtk_separator_tool_item_set_draw ----

gtk_separator_tool_item_set_draw
项目是绘制为垂直线，还是仅显示为空白。将此项与gtk_tool_item_set_expand（） 一起设置为 FALSE 对于创建强制将后续项置于工具栏末尾的项非常有用。
语法
参数
item- 一GtkSeparatorToolItem
draw- 项目是否自 2.4 起绘制为垂直线
另请参见
GtkSeparatorToolItem


------------ KeyGTK3gtk_settings_get_default ----

gtk_settings_get_default
获取默认 GDK 屏幕的对象，如有必要，请创建它。请参见gtk_settings_get_for_screen（）。GtkSettings
返回
对象。如果没有默认屏幕，则返回 NULL。[无转移]GtkSettings
另请参见
GtkSettings


------------ KeyGTK3gtk_settings_get_for_screen ----

gtk_settings_get_for_screen
获取屏幕的对象，如有必要，请创建它。GtkSettings
语法
参数
screen- 一个.GdkScreen
返回
对象。[无转移]
自 2.2 起GtkSettings
另请参见
GtkSettings


------------ KeyGTK3gtk_settings_install_property_parser ----

gtk_settings_install_property_parser
璇硶
鍙傛暟
parser- .[鑼冨洿璋冪敤]
鍙﹁鍙傝
GtkSettings


------------ KeyGTK3gtk_settings_set_double_property ----

gtk_settings_set_double_property
[语法]voidgtk_settings_set_double_property （ *settings， const *name， v_double， const *origin）;[/语法GtkSettingsgchargdoublegchar
另请参见
GtkSettings


------------ KeyGTK3gtk_show_about_dialog ----

gtk_show_about_dialog
这是一个方便的函数，用于显示应用程序的关于框。构造的对话框与父窗口相关联，并重用于将来调用此函数。
语法
参数
parent- 暂时性父级，或 NULL 表示无。[允许-无]
first_property_name- 第一个属性的名称
...- 第一个属性的值，后跟更多属性，NULL 终止自
2。
另请参见
GtkAboutDialog


------------ KeyGTK3gtk_show_uri ----

gtk_show_uri
这是一个方便的函数，用于启动默认应用程序以显示 uri。uri必须是GIO理解的形式（即，您需要安装gvfs来获得对uri方案的支持，例如 http://or ftp://，因为只有本地文件由GIO本身处理）。时间戳的典型示例 arefile:///home/gnome/pict.jpghttp://www.gnome.orgmailto:me@gnome.orgIdeally 取自触发 gtk_show_uri（） 调用的事件。如果时间戳未知，您可以takeGDK_CURRENT_TIME。
语法
参数
screen- 屏幕以显示默认屏幕的uri on或NULL。[允许-无]
uri- 要显示的 uri
timestamp- 一个时间戳，以防止焦点窃取
error- 在出现错误时返回的 aGError
返回
成功时为真，错误时为 FALSE
自 2.1 起
另请参见
gtk3-Filesystem-utilities


------------ KeyGTK3gtk_size_group_add_widget ----

gtk_size_group_add_widget
将小部件添加到 .将来，微件的申请将被确定为其申请的最大值和大小组中其他微件的申请。这是水平、垂直还是双向应用取决于大小组的模式。请参见gtk_size_group_set_mode（）。当微件被销毁或不再引用到其他位置时，它将从大小组中删除。GtkSizeGroup
语法
参数
size_group- 一GtkSizeGroup
widget- 要添加GtkWidget
另请参见
GtkSizeGroup


------------ KeyGTK3gtk_size_group_get_ignore_hidden ----

gtk_size_group_get_ignore_hidden
如果在计算大小时忽略不可见的小部件，则返回。
语法
参数
size_group- 一GtkSizeGroup
返回
如果忽略不可见的小部件，则为 TRUE。
自 2.8 起
另请参见
GtkSizeGroup


------------ KeyGTK3gtk_size_group_get_mode ----

gtk_size_group_get_mode
获取大小组的当前模式。请参见gtk_size_group_set_mode（）。
语法
参数
size_group- 一GtkSizeGroup
返回
大小组的当前模式。
另请参见
GtkSizeGroup


------------ KeyGTK3gtk_size_group_get_widgets ----

gtk_size_group_get_widgets
返回与size_group关联的小部件的列表。
语法
参数
size_group- 一GtkSizeGroup
返回
一个小道。该列表归 GTK+ 所有，不应修改。[element-type GtkWidget][无转移]
自 2.1 起GSList
另请参见
GtkSizeGroup


------------ KeyGTK3gtk_size_group_new ----

gtk_size_group_new
创建一个新的 .GtkSizeGroup
语法
参数
mode- 新大小组的模式。
返回
新创建的GtkSizeGroup
另请参见
GtkSizeGroup


------------ KeyGTK3gtk_size_group_remove_widget ----

gtk_size_group_remove_widget
从 中删除 小部件。GtkSizeGroup
语法
参数
size_group- 一GtkSizeGroup
widget- 删除GtkWidget
另请参见
GtkSizeGroup


------------ KeyGTK3gtk_size_group_set_ignore_hidden ----

gtk_size_group_set_ignore_hidden
设置在计算大小时是否应忽略未映射的小部件。
语法
参数
size_group- 一GtkSizeGroup
ignore_hidden- 在计算大小
时是否应忽略未映射的小部件 自2.8
另请参见
GtkSizeGroup


------------ KeyGTK3gtk_size_group_set_mode ----

gtk_size_group_set_mode
设置大小组的 。大小组的模式确定大小组中的小部件是否应具有相同的水平申请 （GTK_SIZE_GROUP_HORIZONTAL）都具有相同的垂直申请 （GTK_SIZE_GROUP_VERTICAL），或者是否应在两个方向上都具有相同的请求（GTK_SIZE_GROUP_BOTH）。GtkSizeGroupMode
语法
参数
size_group- 一GtkSizeGroup
mode- 要为大小组设置的模式。
另请参见
GtkSizeGroup


------------ KeyGTK3gtk_socket_add_id ----

gtk_socket_add_id
将 XEMBED 客户端（如 ） 添加到 。客户端可以处于相同的进程中，也可以位于不同的进程中。要将 a 嵌入 到 中，您可以创建 with gtk_plug_new （0），调用 gtk_plug_get_id（） 以获取插件的窗口 ID，然后将其传递给 thegtk_socket_add_id（），也可以调用 gtk_socket_get_id（） 来获取套接字的窗口 ID，然后调用 gtk_plug_new（） 传入该 ID。必须先将该 ID 添加到 toplevel 窗口中，然后才能进行此调用。GtkPlugGtkSocketGtkPlugGtkSocketGtkPlugGtkSocket
语法
参数
socket_- 一GtkSocket
window- 参与 XEMBED 协议的客户端的窗口。
另请参见
GtkSocket


------------ KeyGTK3gtk_socket_get_id ----

gtk_socket_get_id
获取小部件的窗口 ID，然后可以使用该窗口 ID 创建嵌入在套接字内的客户端，以 gtk_plug_new（） 表示实例。必须已将其添加到顶级窗口中，然后才能进行此调用。GtkSocketGtkSocket
语法
参数
socket_- 一个.GtkSocket
返回
套接字的窗口 ID
另请参见
GtkSocket


------------ KeyGTK3gtk_socket_get_plug_window ----

gtk_socket_get_plug_window
检索插头的窗口。使用此选项可检查是否已在插座内创建插头。
语法
参数
socket_- 一个.GtkSocket
返回
插头的窗口（如果可用）或 NULL。[无转移]
自 2.1 起
另请参见
GtkSocket


------------ KeyGTK3gtk_socket_new ----

gtk_socket_new
鍒涘缓涓€涓柊鐨勭┖ .GtkSocket
杩斿洖
鏂扮殑 .GtkSocket
鍙﹁鍙傝
GtkSocket


------------ KeyGTK3gtk_spinner_new ----

gtk_spinner_new
返回新的微调器构件。尚未开始。
返回
自 2.20 以来的新
品GtkSpinner
另请参见
GtkSpinner


------------ KeyGTK3gtk_spinner_start ----

gtk_spinner_start
启动微调器的动画。
语法
参数
spinner- a
自2.20起GtkSpinner
另请参见
GtkSpinner


------------ KeyGTK3gtk_spinner_stop ----

gtk_spinner_stop
停止微调器的动画。
语法
参数
spinner- a
自2.2起GtkSpinner
另请参见
GtkSpinner


------------ KeyGTK3gtk_spin_button_configure ----

gtk_spin_button_configure
更改现有旋转按钮的属性。在此函数调用后，调整，爬升率和小数位数都相应地更改。
语法
参数
spin_button- 一GtkSpinButton
adjustment- 一个.[允许-无]GtkAdjustment
climb_rate- 新的爬升率
digits- 旋转按钮中显示的小数位数
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_adjustment ----

gtk_spin_button_get_adjustment
获取与GtkSpinButton
语法
参数
spin_button- 一GtkSpinButton
返回
spin_button。[无转移]GtkAdjustment
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_digits ----

gtk_spin_button_get_digits
获取spin_button的精度。请参见gtk_spin_button_set_digits（）。
语法
参数
spin_button- 一GtkSpinButton
返回
当前精度
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_increments ----

gtk_spin_button_get_increments
获取当前步骤并分页spin_button使用的增量。Seegtk_spin_button_set_increments（）.
语法
参数
spin_button- 一GtkSpinButton
step- 存储步骤增量的位置，或 NULL。[输出][允许-无]
page- 存储页面增量的位置，或 NULL。[输出][允许-无]
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_numeric ----

gtk_spin_button_get_numeric
返回是否可以在数字显示按钮中键入非数字文本。请参见gtk_spin_button_set_numeric（）。
语法
参数
spin_button- 一GtkSpinButton
返回
如果只能输入数字文本，则为 TRUE
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_range ----

gtk_spin_button_get_range
获取spin_button允许的范围。请参见 gtk_spin_button_set_range（）。
语法
参数
spin_button- 一GtkSpinButton
min- 存储最小允许值的位置，或 NULL。[输出][允许-无]
max- 存储最大允许值的位置，或 NULL。[输出][允许-无]
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_snap_to_ticks ----

gtk_spin_button_get_snap_to_ticks
返回是否将值更正为最接近的步骤。请参见 gtk_spin_button_set_snap_to_ticks（）。
语法
参数
spin_button- 一GtkSpinButton
返回
如果值与最接近的步长对齐，则为 TRUE
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_update_policy ----

gtk_spin_button_get_update_policy
获取旋转按钮的更新行为。请参见gtk_spin_button_set_update_policy（）。
语法
参数
spin_button- 一GtkSpinButton
返回
当前更新策略
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_value ----

gtk_spin_button_get_value
获取spin_button中的值。
语法
参数
spin_button- 一GtkSpinButton
返回
spin_button的价值
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_value_as_int ----

gtk_spin_button_get_value_as_int
获取表示为整数spin_button值。
语法
参数
spin_button- 一GtkSpinButton
返回
spin_button的价值
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_get_wrap ----

gtk_spin_button_get_wrap
返回旋转按钮的值在超出范围的上限或下限时是否绕到对立面极限。请参见gtk_spin_button_set_wrap（）。
语法
参数
spin_button- 一GtkSpinButton
返回
如果旋转按钮包装 aroun，则为 TRUE
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_new ----

gtk_spin_button_new
创建新的 .GtkSpinButton
语法
参数
adjustment- 此自旋按钮应使用的对象，或 NULL。[允许-无]GtkAdjustment
climb_rate- 指定当箭头被点击时旋转按钮的变化程度
digits- 要显示的小数位数
返回
新的旋转按钮作为GtkWidget
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_new_with_range ----

gtk_spin_button_new_with_range
这是一个方便的构造函数，允许创建数字而无需手动创建调整。该值最初设置为最小值，页面增量为 10 * step 是默认值。旋转按钮的精度相当于步进的精度。请注意，如果阶跃为 10 的幂，则推导精度的方式效果最佳。如果生成的精度不适合您的需要，请使用 gtk_spin_button_set_digits（） 进行更正。GtkSpinButton
语法
参数
min- 最小允许值
max- 最大允许值
step- 通过旋转小部件添加或减少增量
返回
新的旋转按钮作为GtkWidget
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_adjustment ----

gtk_spin_button_set_adjustment
替换与 spin_button 关联的。GtkAdjustment
语法
参数
spin_button- 一GtkSpinButton
adjustment- a 替换现有调整GtkAdjustment
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_digits ----

gtk_spin_button_set_digits
设置要由spin_button显示的精度。允许高达 20 位精度。
语法
参数
spin_button- 一GtkSpinButton
digits- 要为旋转按钮的值显示的小数点后的位数
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_increments ----

gtk_spin_button_set_increments
设置spin_button的步骤和页面增量。这会影响激活旋转按钮的箭头时值变化的速度。
语法
参数
spin_button- 一GtkSpinButton
step- 递增应用于按钮 1 次按下。
page- 应用于按钮 2 按下的增量。
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_numeric ----

gtk_spin_button_set_numeric
设置一个标志，该标志确定是否可以在数字显示按钮上键入非数字文本。
语法
参数
spin_button- 一GtkSpinButton
numeric- 标志指示是否只允许数字输入
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_range ----

gtk_spin_button_set_range
设置spin_button的最小和最大允许值。如果当前值超出此范围，则将对其进行调整以适合该范围，否则它将保持不变。
语法
参数
spin_button- 一GtkSpinButton
min- 最小允许值
max- 最大允许值
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_snap_to_ticks ----

gtk_spin_button_set_snap_to_ticks
设置有关在提供无效值后激活旋转按钮时是否将值更正为最接近步长增量的策略。
语法
参数
spin_button- 一GtkSpinButton
snap_to_ticks- 指示是否应更正无效值的标志
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_update_policy ----

gtk_spin_button_set_update_policy
设置微调按钮的更新行为。这将确定旋转按钮是否仅在设置了有效值时才始终更新。
语法
参数
spin_button- 一GtkSpinButton
policy- 一个值GtkSpinButtonUpdatePolicy
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_value ----

gtk_spin_button_set_value
设置spin_button的值。
语法
参数
spin_button- 一GtkSpinButton
value- 新值
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_set_wrap ----

gtk_spin_button_set_wrap
设置一个标志，该标志确定在超出范围的上限或下限时，微调按钮值是否绕到相反的极限。
语法
参数
spin_button- 一GtkSpinButton
wrap- 指示是否执行包装行为的标志
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_spin ----

gtk_spin_button_spin
在指定方向上按指定量递增或递减微调按钮的值。
语法
参数
spin_button- 一GtkSpinButton
direction- a 指示旋转方向GtkSpinType
increment- 步长增量以应用于指定方向
另请参见
GtkSpinButton


------------ KeyGTK3gtk_spin_button_update ----

gtk_spin_button_update
手动强制更新旋转按钮。
语法
参数
spin_button- 一GtkSpinButton
另请参见
GtkSpinButton


------------ KeyGTK3gtk_stack_add_named ----

gtk_stack_add_named
将子项添加到堆栈中。孩子由名字标识。
语法
参数
stack- 一GtkStack
child- 要添加的小部件
name- 自3.10以来的孩子
的名字
另请参见
GtkStack


------------ KeyGTK3gtk_stack_add_titled ----

gtk_stack_add_titled
将子项添加到堆栈中。孩子由名字标识。标题将用于在选项卡栏中表示子项，因此它应该很短。GtkStackSwitcher
语法
参数
stack- 一GtkStack
child- 要添加的小部件
name- 孩子的名字
title- 自3.10以来人类可读的儿童
标题
另请参见
GtkStack


------------ KeyGTK3gtk_stack_get_child_by_name ----

gtk_stack_get_child_by_name
查找 将名称作为参数的 的子项。如果没有具有此名称的子项，则返回 NULL。GtkStack
语法
参数
stack- 一GtkStack
name- 要查找的孩子的名字
返回
的请求子项。[无转移]
自 3.12 起GtkStack
另请参见
GtkStack


------------ KeyGTK3gtk_stack_get_homogeneous ----

gtk_stack_get_homogeneous
获取堆栈是否同构。请参见 gtk_stack_set_homogeneous（）。
语法
参数
stack- 一GtkStack
返回
堆叠是否均匀。
自 3.10 起
另请参见
GtkStack


------------ KeyGTK3gtk_stack_get_transition_duration ----

gtk_stack_get_transition_duration
返回堆栈中页面之间传输所需的时间（以毫秒为单位）。
语法
参数
stack- 一GtkStack
返回
自 3.10 以来的过渡持续时间
另请参见
GtkStack


------------ KeyGTK3gtk_stack_get_transition_running ----

gtk_stack_get_transition_running
返回堆栈当前是否处于从一个页面到另一个页面的转换中。
语法
参数
stack- 一GtkStack
返回
如果转换当前正在运行，则为 TRUE，否则为 FALSE。
自 3.1 起
另请参见
GtkStack


------------ KeyGTK3gtk_stack_get_transition_type ----

gtk_stack_get_transition_type
获取将用于堆栈中页面之间的过渡的动画类型。
语法
参数
stack- 一GtkStack
返回
堆栈
的当前转换类型 自 3.10
另请参见
GtkStack


------------ KeyGTK3gtk_stack_get_visible_child ----

gtk_stack_get_visible_child
获取堆栈的当前可见子级，如果没有可见子级，则获取 NULL。
语法
参数
stack- 一GtkStack
返回
的可见子项。[无转移]
自 3.10 起GtkStack
另请参见
GtkStack


------------ KeyGTK3gtk_stack_get_visible_child_name ----

gtk_stack_get_visible_child_name
返回堆栈的当前可见子级的名称，如果没有可见的子级，则返回 NULL。
语法
参数
stack- 一GtkStack
返回
的可见子项的名称。[无转移]
自 3.10 起GtkStack
另请参见
GtkStack


------------ KeyGTK3gtk_stack_new ----

gtk_stack_new
创建新容器。GtkStack
返回
自 3.10 以来的新
品GtkStack
另请参见
GtkStack


------------ KeyGTK3gtk_stack_set_homogeneous ----

gtk_stack_set_homogeneous
将 设置为是否同构。如果它是同质的，则 将为其所有子级请求 samesize。如果不是，则当其他子项变为可见时，堆栈可能更改大小。GtkStackGtkStack
语法
参数
stack- 一GtkStack
homogeneous- TRUE 使堆栈均匀自
3.10
另请参见
GtkStack


------------ KeyGTK3gtk_stack_set_transition_duration ----

gtk_stack_set_transition_duration
设置堆栈中页面之间转换的持续时间。
语法
参数
stack- 一GtkStack
duration- 新的持续时间，以毫秒为单位，
自 3.10 起
另请参见
GtkStack


------------ KeyGTK3gtk_stack_set_transition_type ----

gtk_stack_set_transition_type
设置将用于堆栈中页面之间转换的动画类型。可用类型包括各种淡入淡出和幻灯片。过渡类型可以在运行时没有问题的情况下进行更改，因此可以更改基于即将成为当前页面的动画。
语法
参数
stack- 一GtkStack
transition- 自 3.10 以来的新过渡类型
另请参见
GtkStack


------------ KeyGTK3gtk_stack_set_visible_child ----

gtk_stack_set_visible_child
使子级成为堆栈的可见子项。如果子项与当前可见的子项不同，则两者之间的转换将使用堆栈的当前传递类型进行动画处理。请注意，子小部件本身必须是可见的（请参阅gtk_widget_show（））才能成为堆栈的 visiblechild。
语法
参数
stack- 一GtkStack
child- 自 3.10 以来堆栈
的子级
另请参见
GtkStack


------------ KeyGTK3gtk_stack_set_visible_child_full ----

gtk_stack_set_visible_child_full
使具有给定名称的孩子可见。请注意，子小部件本身必须是可见的（请参阅gtk_widget_show（））才能成为堆栈的 visiblechild。
语法
参数
stack- 一GtkStack
name- 使孩子的名字可见
transition- 自 3.10 以来要使用的
过渡类型
另请参见
GtkStack


------------ KeyGTK3gtk_stack_set_visible_child_name ----

gtk_stack_set_visible_child_name
使具有给定名称的孩子可见。如果子项与当前可见的子项不同，则两者之间的转换将使用堆栈的当前传递类型进行动画处理。请注意，子小部件本身必须是可见的（请参阅gtk_widget_show（））才能成为堆栈的 visiblechild。
语法
参数
stack- 一GtkStack
name- 自3.10以来要显示
的孩子的名字
另请参见
GtkStack


------------ KeyGTK3gtk_stack_switcher_get_stack ----

gtk_stack_switcher_get_stack
检索堆栈。请参见 gtk_stack_switcher_set_stack（）。
语法
参数
switcher- 一GtkStackSwitcher
返回
堆栈或 NULL ifnone 已显式设置。[无转移]
自 3.1 起
另请参见
GtkStackSwitcher


------------ KeyGTK3gtk_stack_switcher_new ----

gtk_stack_switcher_new
创建一个新的 .GtkStackSwitcher
返回
一个新的.
自 3.10 起GtkStackSwitcher
另请参见
GtkStackSwitcher


------------ KeyGTK3gtk_stack_switcher_set_stack ----

gtk_stack_switcher_set_stack
设置要控制的堆栈。
语法
参数
switcher- 一GtkStackSwitcher
stack- 一个.[允许-无]
自 3.10 起GtkStack
另请参见
GtkStackSwitcher


------------ KeyGTK3gtk_statusbar_get_context_id ----

gtk_statusbar_get_context_id
返回一个新的上下文标识符，给定实际上下文的说明。请注意，说明不会显示在 UI 中。
语法
参数
statusbar- 一GtkStatusbar
context_description- 新消息在什么上下文中使用的文本描述
返回
整数 id
另请参见
GtkStatusbar


------------ KeyGTK3gtk_statusbar_get_message_area ----

gtk_statusbar_get_message_area
检索包含标签构件的框。
语法
参数
statusbar- 一GtkStatusbar
返回
一个。[无转移]
自 2.2 起GtkBox
另请参见
GtkStatusbar


------------ KeyGTK3gtk_statusbar_new ----

gtk_statusbar_new
创建一个新的消息就绪。GtkStatusbar
返回
新的GtkStatusbar
另请参见
GtkStatusbar


------------ KeyGTK3gtk_statusbar_pop ----

gtk_statusbar_pop
删除具有给定上下文 ID 的 ？s 堆栈中的第一条消息。请注意，如果堆栈顶部的消息具有不同的上下文 ID，则这可能不会更改显示的消息。GtkStatusbar
语法
参数
statusbar- 一GtkStatusbar
context_id- 上下文标识符
另请参见
GtkStatusbar


------------ KeyGTK3gtk_statusbar_push ----

gtk_statusbar_push
将新消息推送到状态栏的堆栈上。
语法
参数
statusbar- 一GtkStatusbar
context_id- 消息的上下文 id，返回bygtk_statusbar_get_context_id（）
text- 要添加到状态栏的消息
返回
可withgtk_statusbar_remove（） 使用的消息 id。
另请参见
GtkStatusbar


------------ KeyGTK3gtk_statusbar_remove ----

gtk_statusbar_remove
强制从状态栏堆栈中删除消息。必须指定确切的context_id和message_id。
语法
参数
statusbar- 一GtkStatusbar
context_id- 上下文标识符
message_id- 消息标识符，由 gtk_statusbar_push（） 返回
另请参见
GtkStatusbar


------------ KeyGTK3gtk_statusbar_remove_all ----

gtk_statusbar_remove_all
强制从状态栏堆栈中删除所有消息，并context_id。
语法
参数
statusbar- 一GtkStatusbar
context_id- 自 2.22 起的上下文标识符
另请参见
GtkStatusbar


------------ KeyGTK3gtk_status_icon_get_geometry ----

gtk_status_icon_get_geometry
获取有关屏幕上状态图标位置的信息。例如，此信息可用于定位弹出窗口，如通知气泡。请参阅gtk_status_icon_position_menu（） 以获取更方便的定位菜单替代方案。请注意，某些平台不允许 GTK+ 提供此信息，即使在允许提供此信息的平台上，除非状态图标嵌入在通知区域中，否则该信息也不可靠，seegtk_status_icon_is_embedded（）。
语法
参数
status_icon- 一GtkStatusIcon
screen- 返回屏幕的位置，如果不需要信息，则返回 NULL。[输出][无转移][允许-无]
area- 返回状态图标所占用区域的位置，或 NULL。[输出][允许-无]
orientation- 返回嵌入状态图标的面板的理论定向位置，或 NULL。屏幕顶部或底部的面板是 ishorizontal，左侧或右侧的面板是垂直的。[输出][允许-无]
返回
如果自 2.10 以来已填写
位置信息，则为 TRUE
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_gicon ----

gtk_status_icon_get_gicon
检索 由 显示的 。状态图标的存储类型必须GTK_IMAGE_EMPTY orGTK_IMAGE_GICON（请参见gtk_status_icon_get_storage_type（））。此函数的调用方不拥有对 thereturned 的引用。如果此功能失败，图标保持不变;GIconGtkStatusIconGIcon
语法
参数
status_icon- 一GtkStatusIcon
返回
显示的图标，如果图像为空，则为 NULL。[无转移]
自 2.14 起
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_has_tooltip ----

gtk_status_icon_get_has_tooltip
返回 has-tooltip 属性的当前值。有关详细信息，请参阅。?has-tooltip?
语法
参数
status_icon- 一GtkStatusIcon
返回
status_icon 上的 has 工具提示的当前值。
2.16 起
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_icon_name ----

gtk_status_icon_get_icon_name
获取 所显示的图标的名称。状态图标的存储类型必须GTK_IMAGE_EMPTY orGTK_IMAGE_ICON_NAME（请参见gtk_status_icon_get_storage_type（））。返回的字符串归 所有，不应被释放或修改。GtkStatusIconGtkStatusIcon
语法
参数
status_icon- 一GtkStatusIcon
返回
所显示图标的名称，如果图像为空，则为 NULL。
自 2.10 起
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_pixbuf ----

gtk_status_icon_get_pixbuf
获取 由 显示的。状态图标的存储类型必须GTK_IMAGE_EMPTY orGTK_IMAGE_PIXBUF（请参见gtk_status_icon_get_storage_type（））。此函数的调用方不拥有对 pixbuf 的引用。GdkPixbufGtkStatusIcon
语法
参数
status_icon- 一GtkStatusIcon
返回
显示的像素，如果图像为空，则为 NULL。[无转移]
自 2.10 起
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_screen ----

gtk_status_icon_get_screen
返回与status_icon相关联的。GdkScreen
语法
参数
status_icon- 一GtkStatusIcon
返回
一个。[无转移]
自 2.12 起GdkScreen
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_size ----

gtk_status_icon_get_size
获取可用于图像的大小（以像素为单位）。如果通知区域的大小发生变化，库存图标和命名图标会自动调整其大小。对于其他存储类型，可以使用大小变化信号来响应大小变化。请注意，仅当嵌入状态图标时，返回的大小才有意义（请参见gtk_status_icon_is_embedded（））。
语法
参数
status_icon- 一GtkStatusIcon
返回
自 2.10 起可用于图像
的大小
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_stock ----

gtk_status_icon_get_stock
gtk_status_icon_get_stock自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用 gtk_status_icon_get_icon_name（）。获取 由 显示的股票图标的 ID。状态图标的存储类型必须GTK_IMAGE_EMPTY orGTK_IMAGE_STOCK（请参见gtk_status_icon_get_storage_type（））。返回的字符串归 所有，不应被释放或修改。GtkStatusIconGtkStatusIcon
语法
参数
status_icon- 一GtkStatusIcon
返回
所显示的股票图标的股票 ID，如果图像为空，则为 NULL。
自 2.10 起
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_storage_type ----

gtk_status_icon_get_storage_type
获取 用于存储图像数据的表示类型。如果没有图像数据，则返回值将GTK_IMAGE_EMPTY。GtkStatusIconGtkStatusIcon
语法
参数
status_icon- 一GtkStatusIcon
返回
自 2.10 起使用的图像表示
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_title ----

gtk_status_icon_get_title
获取此托盘图标的标题。请参见gtk_status_icon_set_title（）。
语法
参数
status_icon- 一GtkStatusIcon
返回
自 2.18 以来的状态图标
的标题
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_tooltip_markup ----

gtk_status_icon_get_tooltip_markup
获取status_icon工具提示的内容。
语法
参数
status_icon- 一GtkStatusIcon
返回
工具提示文本，或 NULL。完成后，您应该使用g_free（）释放其中的字符串。
2.16 起
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_tooltip_text ----

gtk_status_icon_get_tooltip_text
获取status_icon工具提示的内容。
语法
参数
status_icon- 一GtkStatusIcon
返回
工具提示文本，或 NULL。完成后，您应该使用g_free（）释放其中的字符串。
2.16 起
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_visible ----

gtk_status_icon_get_visible
返回状态图标是否可见。请注意，可见并不能保证用户实际上可以看到该图标，另请参阅gtk_status_icon_is_embedded（）。
语法
参数
status_icon- 一GtkStatusIcon
返回
如果状态图标自 2.10 起可见
，则为 TRUE
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_get_x11_window_id ----

gtk_status_icon_get_x11_window_id
此功能仅在 X11/freedesktop.org 平台上有用。它返回底层状态图标实现中小部件的窗口 ID。这对于 Galago 通知服务非常有用，该服务可以在协议中发送窗口 ID，以便服务器可靠地定位指向状态图标的通知窗口。此函数不适用于其他用例，这些用例更有可能由非 X11 特定方法之一满足，例如 gtk_status_icon_position_menu（）。
语法
参数
status_icon- 一GtkStatusIcon
返回
自 2.1 以来的 X11 窗口
的 32 位无符号整数标识符
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_is_embedded ----

gtk_status_icon_is_embedded
返回状态图标是否嵌入在通知区域中。
语法
参数
status_icon- 一GtkStatusIcon
返回
如果状态图标嵌入在通知区域中，则为 TRUE。
自 2.10 起
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_new ----

gtk_status_icon_new
创建一个空的状态图标对象。
返回
自 2.10 以来的新
品GtkStatusIcon
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_new_from_file ----

gtk_status_icon_new_from_file
创建显示文件文件名的状态图标。如有必要，图像将缩小以适合通知区域中的可用空间。
语法
参数
filename- 文件名。[类型文件名]
返回
自 2.10 以来的新
品GtkStatusIcon
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_new_from_gicon ----

gtk_status_icon_new_from_gicon
创建显示 .如果图标是迷惑图标，则当主题更改时，它将更新。GIcon
语法
参数
icon- 一GIcon
返回
自 2.14 以来的新
GtkStatusIcon
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_new_from_icon_name ----

gtk_status_icon_new_from_icon_name
创建一个状态图标，显示当前图标主题中的图标。如果当前图标主题发生更改，图标将相应更新。
语法
参数
icon_name- 图标名称
返回
自 2.10 以来的新
品GtkStatusIcon
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_new_from_pixbuf ----

gtk_status_icon_new_from_pixbuf
创建显示像素虫的状态图标。如有必要，图像将缩小以适合通知区域中的可用空间。
语法
参数
pixbuf- 一GdkPixbuf
返回
自 2.10 以来的新
品GtkStatusIcon
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_new_from_stock ----

gtk_status_icon_new_from_stock
gtk_status_icon_new_from_stock自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_status_icon_new_from_icon_name（）。创建显示股票图标的状态图标。示例股票图标名称为 、 。您可以注册自己的股票图标名称，请参阅gtk_icon_factory_add_default（） 和 gtk_icon_factory_add（）。GTK_STOCK_OPENGTK_STOCK_QUIT
语法
参数
stock_id- 股票图标id
返回
自 2.10 以来的新
品GtkStatusIcon
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_position_menu ----

gtk_status_icon_position_menu
菜单定位功能，用于gtk_menu_popup（）以定位与状态图标对齐的菜单user_data。
语法
参数
menu- 的GtkMenu
x- 返回 x 位置的位置。[输出]
y- 返回 y 位置的位置。[输出]
push_in- 第一个菜单项是否应该偏移（推入）以与菜单弹出位置对齐（仅对GtkOptionMenu有用）。[输出]
user_data- 用于定位菜单的状态图标。[类型 GtkStatusIcon]
自 2.10 起
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_from_file ----

gtk_status_icon_set_from_file
使status_icon显示文件文件名。有关详细信息，请参见 gtk_status_icon_new_from_file（）。
语法
参数
status_icon- 一GtkStatusIcon
filename- 文件名。[类型文件名]
自 2.10 起
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_from_gicon ----

gtk_status_icon_set_from_gicon
使 status_icon 显示 .有关详细信息，请参见 gtk_status_icon_new_from_gicon（）。GIcon
语法
参数
status_icon- 一GtkStatusIcon
icon- 自2.14以来的GIcon
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_from_icon_name ----

gtk_status_icon_set_from_icon_name
使status_icon显示当前图标主题中名为 icon_name 的图标。有关详细信息，请参见 gtk_status_icon_new_from_icon_name（）。
语法
参数
status_icon- 一GtkStatusIcon
icon_name- 自2.10以来的图标名称
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_from_pixbuf ----

gtk_status_icon_set_from_pixbuf
使status_icon显示像素。有关详细信息，请参见 gtk_status_icon_new_from_pixbuf（）。
语法
参数
status_icon- 一GtkStatusIcon
pixbuf- a 或 NULL。[允许-无]
自 2.10 起GdkPixbuf
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_from_stock ----

gtk_status_icon_set_from_stock
gtk_status_icon_set_from_stock自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用 gtk_status_icon_set_from_icon_name（）。使status_icon显示 id 为 stock_id 的股票图标。有关详细信息，请参阅 gtk_status_icon_new_from_stock（）。
语法
参数
status_icon- 一GtkStatusIcon
stock_id- 自2.10以来的股票图标ID
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_has_tooltip ----

gtk_status_icon_set_has_tooltip
将 status_icon 上的 has 工具提示属性设置为 has_tooltip。有关详细信息，请参阅。?has-tooltip?
语法
参数
status_icon- 一GtkStatusIcon
has_tooltip- 自 2.16 以来是否status_iconhas工具提示
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_name ----

gtk_status_icon_set_name
设置此托盘图标的名称。这应该是标识此图标的字符串。它可能用于对托盘中的图标进行排序，并且不会向用户显示。
语法
参数
status_icon- 一GtkStatusIcon
name- 自2.20以来的名称
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_screen ----

gtk_status_icon_set_screen
设置status_icon的显示位置;如果图标已经映射，它将被取消映射，然后在新屏幕上重新映射。GdkScreen
语法
参数
status_icon- 一GtkStatusIcon
screen- a
自2.12起GdkScreen
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_title ----

gtk_status_icon_set_title
设置此托盘图标的标题。这应该是描述托盘图标的简短的、用户可读的本地化字符串。它可以被屏幕阅读器等工具用来渲染托盘图标。
语法
参数
status_icon- 一GtkStatusIcon
title- 标题
自2.18
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_tooltip_markup ----

gtk_status_icon_set_tooltip_markup
将标记设置为工具提示的内容，该工具提示使用 Pango 文本标记语言进行标记。此函数将负责设置为 TRUE 和信号的默认处理程序。另请参见属性andgtk_tooltip_set_markup（）。?has-tooltip??query-tooltip??tooltip-markup?
语法
参数
status_icon- 一GtkStatusIcon
markup- status_icon工具提示的内容，或 NULL。[允许-无]
2.16 起
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_tooltip_text ----

gtk_status_icon_set_tooltip_text
将文本设置为工具提示的内容。此函数将负责将设置为TRUE和信号的默认处理程序。另请参见属性andgtk_tooltip_set_text（）。?has-tooltip??query-tooltip??tooltip-text?
语法
参数
status_icon- 一GtkStatusIcon
text-
自 2.16 以来status_icon
工具提示的内容
另请参见
GtkStatusIcon


------------ KeyGTK3gtk_status_icon_set_visible ----

gtk_status_icon_set_visible
显示或隐藏状态图标。
语法
参数
status_icon- 一GtkStatusIcon
visible- TRUE显示状态图标，FALSE自2.10起隐藏它
另请参见
GtkStatusIcon


------------ KeyGTK3GTK_STOCK_ABOUT ----

GTK_STOCK_ABOUT
GTK_STOCK_ABOUT
GTK_STOCK_ABOUT自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“help-about”或标签“_About”。这？大约？项目。
自 2.6 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ADD ----

GTK_STOCK_ADD
GTK_STOCK_ADD
GTK_STOCK_ADD自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“list-add”或标签“_Add”。这？加？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3gtk_stock_add_static ----

gtk_stock_add_static
gtk_stock_add_static自 3.10 版起已弃用，不应在新编写的代码中使用。与 gtk_stock_add（） 相同，但不复制项，因此项必须保留，直到应用程序退出。
语法
参数
items- 的一个或数组。[数组长度 = n_items]GtkStockItemGtkStockItem
n_items- 项目数量
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_APPLY ----

GTK_STOCK_APPLY
GTK_STOCK_APPLY
GTK_STOCK_APPLY自 3.10 版起已弃用，不应在新编写的代码中使用。不要使用图标。使用标签“_Apply”。这？应用？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_BOLD ----

GTK_STOCK_BOLD
GTK_STOCK_BOLD
GTK_STOCK_BOLD自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“格式-文本-粗体”。这？大胆？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_CANCEL ----

GTK_STOCK_CANCEL
GTK_STOCK_CANCEL
GTK_STOCK_CANCEL自 3.10 版起已弃用，不应在新编写的代码中使用。不要使用图标。使用标签“_Cancel”。这？取消？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_CAPS_LOCK_WARNING ----

GTK_STOCK_CAPS_LOCK_WARNING
GTK_STOCK_CAPS_LOCK_WARNING
GTK_STOCK_CAPS_LOCK_WARNING自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“对话框警告符号”。这？大写锁定警告？图标。
2.16 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_CDROM ----

GTK_STOCK_CDROM
GTK_STOCK_CDROM
GTK_STOCK_CDROM自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“media-optical”。这？光盘？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_CLEAR ----

GTK_STOCK_CLEAR
GTK_STOCK_CLEAR
GTK_STOCK_CLEAR自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“编辑清除”。这？清楚？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_CLOSE ----

GTK_STOCK_CLOSE
GTK_STOCK_CLOSE
GTK_STOCK_CLOSE自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“窗口关闭”或标签“_Close”。这？关闭？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_COLOR_PICKER ----

GTK_STOCK_COLOR_PICKER
GTK_STOCK_COLOR_PICKER
GTK_STOCK_COLOR_PICKER自 3.10 版起已弃用，不应在新编写的代码中使用。这？拾色器？项目。
自 2.2 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_CONNECT ----

GTK_STOCK_CONNECT
GTK_STOCK_CONNECT
GTK_STOCK_CONNECT自 3.10 版起已弃用，不应在新编写的代码中使用。这？连接？图标。
自 2.6 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_CONVERT ----

GTK_STOCK_CONVERT
GTK_STOCK_CONVERT
GTK_STOCK_CONVERT自 3.10 版起已弃用，不应在新编写的代码中使用。这？转换？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_COPY ----

GTK_STOCK_COPY
GTK_STOCK_COPY
GTK_STOCK_COPY自 3.10 版起已弃用，不应在新编写的代码中使用。不要使用图标。使用标签“_Copy”。这？复制？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_CUT ----

GTK_STOCK_CUT
GTK_STOCK_CUT
GTK_STOCK_CUT自版本 3.10 起已弃用，不应在新编写的代码中使用。不要使用图标。使用标签“Cu_t”。这？切？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DELETE ----

GTK_STOCK_DELETE
GTK_STOCK_DELETE
GTK_STOCK_DELETE自 3.10 版起已弃用，不应在新编写的代码中使用。不要使用图标。使用标签“_Delete”。这？删除？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DIALOG_AUTHENTICATION ----

GTK_STOCK_DIALOG_AUTHENTICATION
GTK_STOCK_DIALOG_AUTHENTICATION
GTK_STOCK_DIALOG_AUTHENTICATION自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“对话框密码”。这？认证？项目。
2.4 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DIALOG_ERROR ----

GTK_STOCK_DIALOG_ERROR
GTK_STOCK_DIALOG_ERROR
GTK_STOCK_DIALOG_ERROR自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“对话框错误”。这？错误？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DIALOG_INFO ----

GTK_STOCK_DIALOG_INFO
GTK_STOCK_DIALOG_INFO
GTK_STOCK_DIALOG_INFO自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“对话框信息”。这？信息？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DIALOG_QUESTION ----

GTK_STOCK_DIALOG_QUESTION
GTK_STOCK_DIALOG_QUESTION
GTK_STOCK_DIALOG_QUESTION自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“对话问题”。这？问题？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DIALOG_WARNING ----

GTK_STOCK_DIALOG_WARNING
GTK_STOCK_DIALOG_WARNING
GTK_STOCK_DIALOG_WARNING自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“对话框警告”。这？警告？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DIRECTORY ----

GTK_STOCK_DIRECTORY
GTK_STOCK_DIRECTORY
GTK_STOCK_DIRECTORY自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“文件夹”。这？目录？图标。
自 2.6 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DISCARD ----

GTK_STOCK_DISCARD
GTK_STOCK_DISCARD
GTK_STOCK_DISCARD自版本 3.10 起已弃用，不应在新编写的代码中使用。这？丢弃？项目。
自 2.12 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DISCONNECT ----

GTK_STOCK_DISCONNECT
GTK_STOCK_DISCONNECT
GTK_STOCK_DISCONNECT自 3.10 版起已弃用，不应在新编写的代码中使用。这？断开？图标。
自 2.6 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DND ----

GTK_STOCK_DND
GTK_STOCK_DND
GTK_STOCK_DND自版本 3.10 起已弃用，不应在新编写的代码中使用。这？拖放？图标。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_DND_MULTIPLE ----

GTK_STOCK_DND_MULTIPLE
GTK_STOCK_DND_MULTIPLE
GTK_STOCK_DND_MULTIPLE自 3.10 版起已弃用，不应在新编写的代码中使用。这？拖放多个？图标。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_EDIT ----

GTK_STOCK_EDIT
GTK_STOCK_EDIT
GTK_STOCK_EDIT自版本 3.10 起已弃用，不应在新编写的代码中使用。这？编辑？项目。
自 2.6 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_EXECUTE ----

GTK_STOCK_EXECUTE
GTK_STOCK_EXECUTE
GTK_STOCK_EXECUTE自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“系统运行”。这？执行？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_FILE ----

GTK_STOCK_FILE
GTK_STOCK_FILE
GTK_STOCK_FILE自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“text-x-generic”。这？文件？项目。从 3.0 开始，此项目具有标签，而在此之前它只有一个图标。
自 2.6 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_FIND ----

GTK_STOCK_FIND
GTK_STOCK_FIND
GTK_STOCK_FIND自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“编辑查找”。这？找到？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_FIND_AND_REPLACE ----

GTK_STOCK_FIND_AND_REPLACE
GTK_STOCK_FIND_AND_REPLACE
GTK_STOCK_FIND_AND_REPLACE自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“编辑-查找-替换”。这？查找和替换？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_FLOPPY ----

GTK_STOCK_FLOPPY
GTK_STOCK_FLOPPY
GTK_STOCK_FLOPPY自版本 3.10 起已弃用，不应在新编写的代码中使用。这？软盘？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_FULLSCREEN ----

GTK_STOCK_FULLSCREEN
GTK_STOCK_FULLSCREEN
GTK_STOCK_FULLSCREEN自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“查看全屏”。这？全屏？项目。
自 2.8 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_GOTO_BOTTOM ----

GTK_STOCK_GOTO_BOTTOM
GTK_STOCK_GOTO_BOTTOM
GTK_STOCK_GOTO_BOTTOM自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“转到底部”。这？底？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_GOTO_FIRST ----

GTK_STOCK_GOTO_FIRST
GTK_STOCK_GOTO_FIRST
GTK_STOCK_GOTO_FIRST自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“go-first”。这？第一？项目。RTL 变体
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_GOTO_LAST ----

GTK_STOCK_GOTO_LAST
GTK_STOCK_GOTO_LAST
GTK_STOCK_GOTO_LAST自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“go-last”。这？最后？项目。RTL 变体
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_GOTO_TOP ----

GTK_STOCK_GOTO_TOP
GTK_STOCK_GOTO_TOP
GTK_STOCK_GOTO_TOP自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“顶部”。这？返回页首？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_GO_BACK ----

GTK_STOCK_GO_BACK
GTK_STOCK_GO_BACK
GTK_STOCK_GO_BACK自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“go-previous”。这？返回？项目。RTL 变体
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_GO_DOWN ----

GTK_STOCK_GO_DOWN
GTK_STOCK_GO_DOWN
GTK_STOCK_GO_DOWN自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“go-down”。这？下？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_GO_FORWARD ----

GTK_STOCK_GO_FORWARD
GTK_STOCK_GO_FORWARD
GTK_STOCK_GO_FORWARD自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“go-next”。这？向前？项目。RTL 变体
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_GO_UP ----

GTK_STOCK_GO_UP
GTK_STOCK_GO_UP
GTK_STOCK_GO_UP自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“go-up”。这？间谍项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_HARDDISK ----

GTK_STOCK_HARDDISK
GTK_STOCK_HARDDISK
GTK_STOCK_HARDDISK自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“驱动器硬盘”。这？硬盘？项目。
2.4 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_HELP ----

GTK_STOCK_HELP
GTK_STOCK_HELP
GTK_STOCK_HELP自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“帮助浏览器”。这？帮助？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_HOME ----

GTK_STOCK_HOME
GTK_STOCK_HOME
GTK_STOCK_HOME自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“回家”。这？家？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_INDENT ----

GTK_STOCK_INDENT
GTK_STOCK_INDENT
GTK_STOCK_INDENT自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“格式缩进更多”。这？订货单？项目。自 2.4 起的 RTL 变体
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_INDEX ----

GTK_STOCK_INDEX
GTK_STOCK_INDEX
GTK_STOCK_INDEX自 3.10 版起已弃用，不应在新编写的代码中使用。这？指数？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_INFO ----

GTK_STOCK_INFO
GTK_STOCK_INFO
GTK_STOCK_INFO自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“对话框信息”。这？信息？项目。
自 2.8 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ITALIC ----

GTK_STOCK_ITALIC
GTK_STOCK_ITALIC
GTK_STOCK_ITALIC自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“格式-文本-斜体”。这？斜体的？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3gtk_stock_item_copy ----

gtk_stock_item_copy
gtk_stock_item_copy自版本 3.10 起已弃用，不应在新编写的代码中使用。复制库存项，该项主要用于语言绑定，而不是在应用程序中。
语法
参数
item- 一GtkStockItem
返回
一个新的GtkStockItem
另请参见
gtk3-Stock-Items


------------ KeyGTK3gtk_stock_item_free ----

gtk_stock_item_free
gtk_stock_item_free自 3.10 版起已弃用，不应在新编写的代码中使用。释放堆上分配的库存物料，例如返回的 bygtk_stock_item_copy（）。还释放库存物料中的字段（如果它们不为 NULL）。
语法
参数
item- 一GtkStockItem
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_JUMP_TO ----

GTK_STOCK_JUMP_TO
GTK_STOCK_JUMP_TO
GTK_STOCK_JUMP_TO自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“跳转”。这？跳转到？项目。RTL 变体
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_JUSTIFY_CENTER ----

GTK_STOCK_JUSTIFY_CENTER
GTK_STOCK_JUSTIFY_CENTER
GTK_STOCK_JUSTIFY_CENTER自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“格式对齐中心”。这？中心？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_JUSTIFY_FILL ----

GTK_STOCK_JUSTIFY_FILL
GTK_STOCK_JUSTIFY_FILL
GTK_STOCK_JUSTIFY_FILL自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“格式对齐填充”。这？填补？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_JUSTIFY_LEFT ----

GTK_STOCK_JUSTIFY_LEFT
GTK_STOCK_JUSTIFY_LEFT
GTK_STOCK_JUSTIFY_LEFT自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“格式对齐左对齐”。这？左？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_JUSTIFY_RIGHT ----

GTK_STOCK_JUSTIFY_RIGHT
GTK_STOCK_JUSTIFY_RIGHT
GTK_STOCK_JUSTIFY_RIGHT自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“格式对齐右对齐”。这？右？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_LEAVE_FULLSCREEN ----

GTK_STOCK_LEAVE_FULLSCREEN
GTK_STOCK_LEAVE_FULLSCREEN
GTK_STOCK_LEAVE_FULLSCREEN自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“视图还原”。这？离开全屏？项目。
自 2.8 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3gtk_stock_list_ids ----

gtk_stock_list_ids
gtk_stock_list_ids自 3.10 版起已弃用，不应在新编写的代码中使用。检索添加到 或注册到 gtk_stock_add（） 的所有已知股票 ID 的列表。必须使用 g_slist_free（） 释放列表，并且必须使用 g_free（） 释放列表中的每个字符串。GtkIconFactory
返回
已知股票 ID 的列表。[元素型 utf8][转移完整]
另请参见
gtk3-Stock-Items


------------ KeyGTK3gtk_stock_lookup ----

gtk_stock_lookup
gtk_stock_lookup自版本 3.10 起已弃用，不应在新编写的代码中使用。使用stock_id的注册值填充项目，返回 TRUEif stock_id已知。
语法
参数
stock_id- 库存项目名称
item- 库存项目使用值进行初始化。[输出]
返回
如果项已初始化，则为 TRUE
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MEDIA_FORWARD ----

GTK_STOCK_MEDIA_FORWARD
GTK_STOCK_MEDIA_FORWARD
GTK_STOCK_MEDIA_FORWARD自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“media-seek-forward”或标签“_Forward”。这？媒体转发？项目。自 2.6 起的 RTL 变体
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MEDIA_NEXT ----

GTK_STOCK_MEDIA_NEXT
GTK_STOCK_MEDIA_NEXT
GTK_STOCK_MEDIA_NEXT自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“媒体-向前跳过”或标签“_Next”。这？媒体下一个？项目。自 2.6 起的 RTL 变体
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MEDIA_PAUSE ----

GTK_STOCK_MEDIA_PAUSE
GTK_STOCK_MEDIA_PAUSE
GTK_STOCK_MEDIA_PAUSE自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“媒体播放暂停”或标签“P_ause”。这？媒体暂停？项目。
自 2.6 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MEDIA_PLAY ----

GTK_STOCK_MEDIA_PLAY
GTK_STOCK_MEDIA_PLAY
GTK_STOCK_MEDIA_PLAY自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“媒体播放-开始”或标签“_Play”。这？媒体播放？项目。自 2.6 起的 RTL 变体
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MEDIA_PREVIOUS ----

GTK_STOCK_MEDIA_PREVIOUS
GTK_STOCK_MEDIA_PREVIOUS
GTK_STOCK_MEDIA_PREVIOUS自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“媒体-向后跳过-后退”或标签“Pre_vious”。这？媒体 上一页？项目。自 2.6 起的 RTL 变体
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MEDIA_RECORD ----

GTK_STOCK_MEDIA_RECORD
GTK_STOCK_MEDIA_RECORD
GTK_STOCK_MEDIA_RECORD自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“media-record”或标签“_Record”。这？媒体记录？项目。
自 2.6 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MEDIA_REWIND ----

GTK_STOCK_MEDIA_REWIND
GTK_STOCK_MEDIA_REWIND
GTK_STOCK_MEDIA_REWIND自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“媒体搜索-向后”或标签“R_ewind”。这？媒体倒带？项目。自 2.6 起的 RTL 变体
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MEDIA_STOP ----

GTK_STOCK_MEDIA_STOP
GTK_STOCK_MEDIA_STOP
GTK_STOCK_MEDIA_STOP自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“媒体播放停止”或标签“_Stop”。这？媒体停止？项目。
自 2.6 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_MISSING_IMAGE ----

GTK_STOCK_MISSING_IMAGE
GTK_STOCK_MISSING_IMAGE
GTK_STOCK_MISSING_IMAGE自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“图像缺失”。这？缺少图像？图标。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_NETWORK ----

GTK_STOCK_NETWORK
GTK_STOCK_NETWORK
GTK_STOCK_NETWORK自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“网络工作组”。这？网络？项目。
2.4 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_NEW ----

GTK_STOCK_NEW
GTK_STOCK_NEW
GTK_STOCK_NEW自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“document-new”或标签“_New”。这？新增功能？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_NO ----

GTK_STOCK_NO
GTK_STOCK_NO
GTK_STOCK_NO自 3.10 版起已弃用，不应在新编写的代码中使用。这？不？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_OK ----

GTK_STOCK_OK
GTK_STOCK_OK
GTK_STOCK_OK自 3.10 版起已弃用，不应在新编写的代码中使用。不要使用图标。使用标签“_OK”。这？断续器项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_OPEN ----

GTK_STOCK_OPEN
GTK_STOCK_OPEN
GTK_STOCK_OPEN自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“文档打开”或标签“_Open”。这？打开？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ORIENTATION_LANDSCAPE ----

GTK_STOCK_ORIENTATION_LANDSCAPE
GTK_STOCK_ORIENTATION_LANDSCAPE
GTK_STOCK_ORIENTATION_LANDSCAPE自 3.10 版起已弃用，不应在新编写的代码中使用。这？横向？项目。
自 2.10 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ORIENTATION_PORTRAIT ----

GTK_STOCK_ORIENTATION_PORTRAIT
GTK_STOCK_ORIENTATION_PORTRAIT
GTK_STOCK_ORIENTATION_PORTRAIT自版本 3.10 起已弃用，不应在新编写的代码中使用。这？纵向？项目。
自 2.10 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE ----

GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE
GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE
GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE自版本 3.10 起已弃用，不应在新编写的代码中使用。这？反向横向？项目。
自 2.10 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT ----

GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT
GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT
GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT自版本 3.10 起已弃用，不应在新编写的代码中使用。这？反向纵向？项目。
自 2.10 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PAGE_SETUP ----

GTK_STOCK_PAGE_SETUP
GTK_STOCK_PAGE_SETUP
GTK_STOCK_PAGE_SETUP自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“文档-页面设置”或标签“页面Set_up”。这？页面设置？项目。
自 2.14 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PASTE ----

GTK_STOCK_PASTE
GTK_STOCK_PASTE
GTK_STOCK_PASTE自 3.10 版起已弃用，不应在新编写的代码中使用。不要使用图标。使用标签“_Paste”。这？糊？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PREFERENCES ----

GTK_STOCK_PREFERENCES
GTK_STOCK_PREFERENCES
GTK_STOCK_PREFERENCES自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“首选项系统”或标签“_Preferences”。这？偏好？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PRINT ----

GTK_STOCK_PRINT
GTK_STOCK_PRINT
GTK_STOCK_PRINT自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“文档打印”或标签“_Print”。这？打印？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PRINT_ERROR ----

GTK_STOCK_PRINT_ERROR
GTK_STOCK_PRINT_ERROR
GTK_STOCK_PRINT_ERROR自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“打印机错误”。这？打印错误？图标。
自 2.14 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PRINT_PAUSED ----

GTK_STOCK_PRINT_PAUSED
GTK_STOCK_PRINT_PAUSED
GTK_STOCK_PRINT_PAUSED自 3.10 版起已弃用，不应在新编写的代码中使用。这？打印已暂停？图标。
自 2.14 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PRINT_PREVIEW ----

GTK_STOCK_PRINT_PREVIEW
GTK_STOCK_PRINT_PREVIEW
GTK_STOCK_PRINT_PREVIEW自 3.10 版起已弃用，不应在新编写的代码中使用。使用标签“Pre_view”。这？打印预览？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PRINT_REPORT ----

GTK_STOCK_PRINT_REPORT
GTK_STOCK_PRINT_REPORT
GTK_STOCK_PRINT_REPORT自 3.10 版起已弃用，不应在新编写的代码中使用。这？打印报告？图标。
自 2.14 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PRINT_WARNING ----

GTK_STOCK_PRINT_WARNING
GTK_STOCK_PRINT_WARNING
GTK_STOCK_PRINT_WARNING自版本 3.10 起已弃用，不应在新编写的代码中使用。这？打印警告？图标。
自 2.14 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_PROPERTIES ----

GTK_STOCK_PROPERTIES
GTK_STOCK_PROPERTIES
GTK_STOCK_PROPERTIES自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“文档属性”或标签“_Properties”。这？性能？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_QUIT ----

GTK_STOCK_QUIT
GTK_STOCK_QUIT
GTK_STOCK_QUIT自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“应用程序退出”或标签“_Quit”。这？退出？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_REDO ----

GTK_STOCK_REDO
GTK_STOCK_REDO
GTK_STOCK_REDO自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“edit-redo”或标签“_Redo”。这？重做？项目。RTL 变体
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_REFRESH ----

GTK_STOCK_REFRESH
GTK_STOCK_REFRESH
GTK_STOCK_REFRESH自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“视图刷新”或标签“_Refresh”。这？刷新？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_REMOVE ----

GTK_STOCK_REMOVE
GTK_STOCK_REMOVE
GTK_STOCK_REMOVE自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“列表删除”或标签“_Remove”。这？删除？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_REVERT_TO_SAVED ----

GTK_STOCK_REVERT_TO_SAVED
GTK_STOCK_REVERT_TO_SAVED
GTK_STOCK_REVERT_TO_SAVED自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“文档还原”或标签“_Revert”。这？恢复？项目。RTL 变体
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_SAVE ----

GTK_STOCK_SAVE
GTK_STOCK_SAVE
GTK_STOCK_SAVE自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“文档保存”或标签“_Save”。这？救？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_SAVE_AS ----

GTK_STOCK_SAVE_AS
GTK_STOCK_SAVE_AS
GTK_STOCK_SAVE_AS自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“文档另存为”或标签“保存_As”。这？另存为？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_SELECT_ALL ----

GTK_STOCK_SELECT_ALL
GTK_STOCK_SELECT_ALL
GTK_STOCK_SELECT_ALL自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“编辑-选择-全部”或标签“选择_All”。这？全选？项目。
自 2.10 起
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_SELECT_COLOR ----

GTK_STOCK_SELECT_COLOR
GTK_STOCK_SELECT_COLOR
GTK_STOCK_SELECT_COLOR自 3.10 版起已弃用，不应在新编写的代码中使用。这？颜色？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_SELECT_FONT ----

GTK_STOCK_SELECT_FONT
GTK_STOCK_SELECT_FONT
GTK_STOCK_SELECT_FONT自版本 3.10 起已弃用，不应在新编写的代码中使用。这？字体？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3gtk_stock_set_translate_func ----

gtk_stock_set_translate_func
gtk_stock_set_translate_func自版本 3.10 起已弃用，不应在新编写的代码中使用。设置用于翻译库存物料标签的函数。如果没有为翻译域注册任何函数，则使用 g_dgettext（）。该函数用于与域匹配的所有库存项目whosetranslation_domain。请注意，只要您在调用 dgettext（） 时使用正确的域，就可以使用与应用程序的实际 gettext 转换域不同的字符串。这可能很有用，例如，在处理消息上下文时：12345678910111213141516171819[/语法] [语法]GtkStockItem items[] = { { MY_ITEM1， NC_（“odd items”， “Item 1”）， 0， 0， “odd-item-domain” }， { MY_ITEM2， NC_（“even items”， “Item 2”）， 0， 0， “even-item-domain” }，};gchar *my_translate_func （const gchar *msgid， gpointer data）{ gchar *msgctxt = data; return （gchar*）g_dpgettext2 （GETTEXT_PACKAGE， msgctxt， msgid）;}...gtk_stock_add（项目，G_N_ELEMENTS（项目））;gtk_stock_set_translate_func（“奇数项目域”，my_translate_func，“奇数项目”）;gtk_stock_set_translate_func（“偶数项域”，my_translate_func，“偶数项”）;[/语法]GtkTranslateFunc
语法
参数
domain- 使用函数的翻译域
func- 一GtkTranslateFunc
data- 数据传递到函数
notify- a 在 datais 不再需要
自 2.8 以来调用GDestroyNotify
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_SORT_ASCENDING ----

GTK_STOCK_SORT_ASCENDING
GTK_STOCK_SORT_ASCENDING
GTK_STOCK_SORT_ASCENDING自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“视图-排序-升序”。这？上升？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_SORT_DESCENDING ----

GTK_STOCK_SORT_DESCENDING
GTK_STOCK_SORT_DESCENDING
GTK_STOCK_SORT_DESCENDING自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“视图-排序-降序”。这？降？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_SPELL_CHECK ----

GTK_STOCK_SPELL_CHECK
GTK_STOCK_SPELL_CHECK
GTK_STOCK_SPELL_CHECK自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“工具检查拼写”。这？拼写检查？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_STOP ----

GTK_STOCK_STOP
GTK_STOCK_STOP
GTK_STOCK_STOP自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“process-stop”或标签“_Stop”。这？停？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_STRIKETHROUGH ----

GTK_STOCK_STRIKETHROUGH
GTK_STOCK_STRIKETHROUGH
GTK_STOCK_STRIKETHROUGH自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“格式-文本-删除线”或标签“_Strikethrough”。这？删除线？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_UNDELETE ----

GTK_STOCK_UNDELETE
GTK_STOCK_UNDELETE
GTK_STOCK_UNDELETE自 3.10 版起已弃用，不应在新编写的代码中使用。这？取消删除？项目。RTL 变体
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_UNDERLINE ----

GTK_STOCK_UNDERLINE
GTK_STOCK_UNDERLINE
GTK_STOCK_UNDERLINE自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“格式-文本-下划线”或标签“_Underline”。这？下划线？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_UNDO ----

GTK_STOCK_UNDO
GTK_STOCK_UNDO
GTK_STOCK_UNDO自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“编辑-撤消”或标签“_Undo”。这？撤消？项目。RTL 变体
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_UNINDENT ----

GTK_STOCK_UNINDENT
GTK_STOCK_UNINDENT
GTK_STOCK_UNINDENT自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“无格式缩进”。这？取消缩进？项目。自 2.4 起的 RTL 变体
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_YES ----

GTK_STOCK_YES
GTK_STOCK_YES
GTK_STOCK_YES自版本 3.10 起已弃用，不应在新编写的代码中使用。这？是的？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ZOOM_100 ----

GTK_STOCK_ZOOM_100
GTK_STOCK_ZOOM_100
GTK_STOCK_ZOOM_100自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“缩放原始”或标签“_Normal大小”。这？缩放 100%？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ZOOM_FIT ----

GTK_STOCK_ZOOM_FIT
GTK_STOCK_ZOOM_FIT
GTK_STOCK_ZOOM_FIT自版本 3.10 起已弃用，不应在新编写的代码中使用。使用命名图标“最佳缩放”或标签“最佳_Fit”。这？缩放以适合？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ZOOM_IN ----

GTK_STOCK_ZOOM_IN
GTK_STOCK_ZOOM_IN
GTK_STOCK_ZOOM_IN自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“放大”或标签“放大_In”。这？放大？项目。
另请参见
gtk3-Stock-Items


------------ KeyGTK3GTK_STOCK_ZOOM_OUT ----

GTK_STOCK_ZOOM_OUT
GTK_STOCK_ZOOM_OUT
GTK_STOCK_ZOOM_OUT自 3.10 版起已弃用，不应在新编写的代码中使用。使用命名图标“缩小”或标签“缩放_Out”。这？缩小？项目。[/代码
另请参见
gtk3-Stock-Items


------------ KeyGTK3gtk_style_apply_default_background ----

gtk_style_apply_default_background
gtk_style_apply_default_background自 3.0 版起已弃用，不应在新编写的代码中使用。请改用GtkStyleContext
另请参见
GtkStyle


------------ KeyGTK3gtk_style_attach ----

gtk_style_attach
gtk_style_attach自 3.0 版起已弃用，不应在新编写的代码中使用。使用gtk_widget_style_attach（）代替将样式附加到窗口;这个过程分配颜色并为样式创建GC - 它专门针对特定的视觉效果。如果样式已经附加到具有不同样式和视觉的窗口，则该过程可能涉及创建新样式。由于此函数可能会返回一个新对象，因此您必须按以下方式使用它：style = gtk_style_attach（样式，窗口）
语法
参数
style- 一个.GtkStyle
window- 一个.GdkWindow
返回
样式或新创建的 .如果样式是新创建的，则 style 参数将被取消引用，并且新样式将具有属于调用方的引用计数。GtkStyle
另请参见
GtkStyle


------------ KeyGTK3GTK_STYLE_ATTACHED ----

GTK_STYLE_ATTACHED
GTK_STYLE_ATTACHED()
语法
参数
style- 一个.GtkStyle
返回
样式是否附加到窗口。
另请参见
GtkStyle


------------ KeyGTK3gtk_style_context_add_class ----

gtk_style_context_add_class
将样式类添加到上下文中，因此togtk_style_context_get（） 或任何gtk_render_*（） 函数的后验调用将使用此新类进行样式设置。在 CSS 文件格式中，定义一个 ？entry？类，将匹配：1[/syntax] [syntax]GtkEntry.entry { ... }[/语法]
虽然任何小部件定义了一个 ？条目？类将匹配： 1[/语法] [语法].条目 { ... }[/语法]GtkEntry
语法
参数
context- 一GtkStyleContext
class_name- 自 3.0 起在样式
设置中使用的类名
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_add_provider ----

gtk_style_context_add_provider
将样式提供程序添加到上下文中，以便在样式构造中使用。请注意，此函数添加的样式提供程序仅影响上下文所属小部件的样式。如果要影响所有小部件的样式，usegtk_style_context_add_provider_for_screen（）。注： 如果两个优先级相同，则通过此函数添加的优先级优先于另一个通过添加的gtk_style_context_add_provider_for_screen（）。GtkStyleProvider
语法
参数
context- 一GtkStyleContext
provider- 一GtkStyleProvider
priority- 样式提供程序的优先级。越低，它在样式构造中使用的时间越早。通常，这将在自3.0
以来GTK_STYLE_PROVIDER_PRIORITY_FALLBACK andGTK_STYLE_PROVIDER_PRIORITY_USER
之间的范围内
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_add_provider_for_screen ----

gtk_style_context_add_provider_for_screen
将全局样式提供程序添加到屏幕，该提供程序将用于屏幕下所有样式构造的样式构造。GTK+ 使用它来使样式信息可用。注意：如果两个优先级相同，则通过 gtk_style_context_add_provider（） 添加的 A 优先于通过此函数添加的另一个优先级。GtkStyleContextsGtkSettingsGtkStyleProvider
语法
参数
screen- 一GdkScreen
provider- 一GtkStyleProvider
priority- 样式提供程序的优先级。越低，它在样式构造中使用的时间越早。通常，这将在自3.0
以来GTK_STYLE_PROVIDER_PRIORITY_FALLBACK andGTK_STYLE_PROVIDER_PRIORITY_USER
之间的范围内
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_add_region ----

gtk_style_context_add_region
将区域添加到上下文中，因此togtk_style_context_get（） 或任何gtk_render_*（） 函数的后验调用将利用此新区域进行样式设置。在 CSS 文件格式中，定义一个 “row？region” 将匹配：1[/syntax] [syntax]GtkTreeView row { ... }[/语法]
伪类用于匹配标志，因此以下两个规则：12[/语法] [语法]GtkTreeView 行：nth-child（even） { ... }GtkTreeView row：nth-child（odd） { ... }[/语法]
将分别应用于偶数行和奇数行。区域名称只能包含小写字母和?-?,始终以小写字母开头。GtkTreeView
语法
参数
context- 一GtkStyleContext
region_name- 用于样式的区域名称
flags- 自 3.0 起适用于该区域
的标志
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_cancel_animations ----

gtk_style_context_cancel_animations
gtk_style_context_cancel_animations自 3.6 版起已弃用，不应在新编写的代码中使用。此函数不执行任何操作。停止region_id的所有正在运行的动画以及其下的所有可动画区域。NULL region_id将停止上下文中所有正在进行的动画，当处理获取的throughgtk_widget_get_style_context（））时，这通常是在您期望所有小部件都停止的所有情况下为您完成的，因此这应该仅用于具有不同动画区域的复杂小部件。GtkStyleContext
语法
参数
context- 一GtkStyleContext
region_id- 要停止的可设置动画区域，或 NULL。请参见 gtk_style_context_push_animatable_region（）。[允许-无]
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get ----

gtk_style_context_get
从给定状态的上下文中检索多个样式属性值。
语法
参数
context- 一GtkStyleContext
state- 要检索其属性值的状态
...- 属性名称/返回值对，后跟 NULL
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_background_color ----

gtk_style_context_get_background_color
获取给定状态的背景色。
语法
参数
context- 一GtkStyleContext
state- 状态以检索颜色
color- 返回背景颜色的值。[输出]
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_border ----

gtk_style_context_get_border
将给定状态的边框获取为 .请参阅GTK_STYLE_PROPERTY_BORDER_WIDTH。GtkBorder
语法
参数
context- 一GtkStyleContext
state- 状态以检索其边框
border- 返回边框设置的值。[输出]
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_border_color ----

gtk_style_context_get_border_color
获取给定状态的边框颜色。
语法
参数
context- 一GtkStyleContext
state- 状态以检索颜色
color- 返回边框颜色的值。[输出]
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_color ----

gtk_style_context_get_color
获取给定状态的前景色。
语法
参数
context- 一GtkStyleContext
state- 状态以检索颜色
color- 前景色的返回值。[输出]
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_direction ----

gtk_style_context_get_direction
gtk_style_context_get_direction自 3.8 版起已弃用，不应在新编写的代码中使用。使用 gtk_style_context_get_state（） 并检查 和。返回用于渲染的小部件方向。GTK_STATE_FLAG_DIR_LTRGTK_STATE_FLAG_DIR_RTL
语法
参数
context- 一GtkStyleContext
返回
自 3.0 以来的小部件方向
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_font ----

gtk_style_context_get_font
gtk_style_context_get_font自版本 3.8 起已弃用，不应在新编写的代码中使用。请改用 gtk_style_context_get（） 作为“字体”或子属性。返回给定状态的字体说明。返回的对象是 const，在信号发生之前将保持有效。?changed?
语法
参数
context- 一GtkStyleContext
state- 状态以检索字体
返回
对于给定状态。此对象归 GTK+ 所有，不应被弃用。[无转移]
自 3.0 起PangoFontDescription
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_frame_clock ----

gtk_style_context_get_frame_clock
返回附加到的上下文。GdkFrameClock
语法
参数
context- 一GtkStyleContext
返回
a 或 NULLif 上下文没有附加的帧时钟。[无转移]
3.8 起GdkFrameClock
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_junction_sides ----

gtk_style_context_get_junction_sides
返回渲染元素与其他元素在视觉上连接的边。
语法
参数
context- 一GtkStyleContext
返回
结点侧
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_margin ----

gtk_style_context_get_margin
以 .请参阅GTK_STYLE_PROPERTY_MARGIN。GtkBorder
语法
参数
context- 一GtkStyleContext
state- 状态以检索其边框
margin- 边距设置的返回值。[输出]
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_padding ----

gtk_style_context_get_padding
将给定状态的填充作为 .请参阅GTK_STYLE_PROPERTY_PADDING。GtkBorder
语法
参数
context- 一GtkStyleContext
state- 检索填充的状态
padding- 填充设置的返回值。[输出]
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_parent ----

gtk_style_context_get_parent
获取通过 gtk_style_context_set_parent（） 设置的父上下文。有关详细信息，请参阅该函数。
语法
参数
context- 一GtkStyleContext
返回
父上下文或 NULL。[无转移]
自 3.4 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_path ----

gtk_style_context_get_path
返回用于样式匹配的小部件路径。
语法
参数
context- 一GtkStyleContext
返回
一个。[无转移]
自 3.0 起GtkWidgetPath
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_property ----

gtk_style_context_get_property
从给定状态的上下文中获取样式属性。当不再需要值时，必须调用 g_value_unset（） 以释放任何分配的内存。
语法
参数
context- 一GtkStyleContext
property- 样式属性名称
state- 要检索其属性值的状态
value- 样式属性值的返回位置。[输出][转移完整]
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_scale ----

gtk_style_context_get_scale
返回用于资产的比例。
语法
参数
context- 一GtkStyleContext
返回
自3.10以来的规模
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_screen ----

gtk_style_context_get_screen
返回附加到的上下文。GdkScreen
语法
参数
context- 一GtkStyleContext
返回
一个。[无转移]GdkScreen
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_section ----

gtk_style_context_get_section
查询 CSS 中为当前上下文定义属性的位置。请注意，要查询的状态采用 fromgtk_style_context_get_state（）。如果该位置不可用，则返回 NULL。由于各种原因，该位置可能不可用，例如属性被覆盖，属性未命名受支持的 CSS 属性或跟踪因性能原因而禁用的定义。无法查询速记 CSS 属性的位置，并且 willalways 将返回 NULL。
语法
参数
context- 一GtkStyleContext
property- 样式属性名称
返回
NULL 或定义值的部分
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_state ----

gtk_style_context_get_state
返回呈现时使用的状态。
语法
参数
context- 一GtkStyleContext
返回
自 3.0 以来的州旗
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_style ----

gtk_style_context_get_style
根据当前样式从上下文中检索多个构件样式属性。
语法
参数
context- 一GtkStyleContext
...- 属性名称/返回值对，后跟 NULL
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_style_property ----

gtk_style_context_get_style_property
获取小部件样式属性的值。当不再需要值时，必须调用 g_value_unset（） 以释放任何分配的内存。
语法
参数
context- 一GtkStyleContext
property_name- 小部件样式属性的名称
value- 返回属性值的位置
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_style_valist ----

gtk_style_context_get_style_valist
根据当前样式从上下文中检索多个构件样式属性。
语法
参数
context- 一GtkStyleContext
args- va_list属性名称/返回位置对，后跟 NULL
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_get_valist ----

gtk_style_context_get_valist
从给定状态的上下文中检索多个样式属性值。
语法
参数
context- 一GtkStyleContext
state- 要检索其属性值的状态
args- va_list属性名称/返回位置对，后跟 NULL
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_has_class ----

gtk_style_context_has_class
如果上下文当前已定义给定的类名，则返回 TRUE
语法
参数
context- 一GtkStyleContext
class_name- 类名
返回
如果上下文自 3.0
起class_namedefined，则为 true
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_has_region ----

gtk_style_context_has_region
如果上下文定义了区域，则返回 TRUE。如果flags_return不为 NULL，则将其设置为影响该区域的标志。
语法
参数
context- 一GtkStyleContext
region_name- 区域名称
flags_return- 区域标志的返回位置。[输出][允许-无]
返回
如果区域是从 3.0 开始定义的
，则为 TRUE
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_invalidate ----

gtk_style_context_invalidate
gtk_style_context_invalidate自版本 3.12 起已弃用，不应在新编写的代码中使用。样式上下文将自动失效。使上下文样式信息无效，因此将重新构造该信息。如果您修改上下文并立即需要新信息，这将非常有用。
语法
参数
context- 一个.
自 3.0 起GtkStyleContext
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_list_classes ----

gtk_style_context_list_classes
返回当前在上下文中定义的类的列表。
语法
参数
context- 一GtkStyleContext
返回
具有当前定义的类的字符串。列表的内容归GTK+所有，但是当您完成g_list_free（）时，您必须使用g_list_free（）释放listitself。[转移容器][元素型 utf8]
自 3.0 起GList
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_list_regions ----

gtk_style_context_list_regions
返回当前在上下文中定义的区域的列表。
语法
参数
context- 一GtkStyleContext
返回
具有当前定义区域的字符串。列表的内容归GTK+所有，但是当您完成g_list_free（）时，您必须使用g_list_free（）释放listitself。[转移容器][元素型 utf8]
自 3.0 起GList
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_lookup_color ----

gtk_style_context_lookup_color
查找并解析上下文色彩映射表中的颜色名称。
语法
参数
context- 一GtkStyleContext
color_name- 颜色名称查找
color- 查找颜色的返回位置。[输出]
返回
如果找到并解决了color_namewas，则为 true，否则为 FALSE
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_lookup_icon_set ----

gtk_style_context_lookup_icon_set
gtk_style_context_lookup_icon_set自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_icon_theme_lookup_icon（）。在与上下文关联的图标工厂和默认图标工厂中查找stock_id，如果找到，则返回图标集，否则返回 NULL。
语法
参数
context- 一GtkStyleContext
stock_id- 图标名称
返回
查找的 GtkIconSet 或 NULL。[无转移]
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_new ----

gtk_style_context_new
创建一个独立的，这种样式的上下文不会附加到任何小部件上，所以你可能想自己调用gtk_style_context_set_path（）。此函数仅在使用从 GTK+ 分离的主题层时才有用，如果您使用的是 totheme ，请使用 gtk_widget_get_style_context（） 以获取样式上下文，以便为小部件设置主题。GtkStyleContextGtkStyleContextGtkWidgets
返回
新创建的 .GtkStyleContext
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_notify_state_change ----

gtk_style_context_notify_state_change
gtk_style_context_notify_state_change自 3.6 版起已弃用，不应在新编写的代码中使用。此函数不执行任何操作。通知上下文的状态更改，因此，如果当前样式使用过渡动画，则将启动一个，以便region_id下的所有渲染元素都进行动画处理，以便将状态状态设置为valuestate_value。使用 window 参数是为了在动画运行时使渲染的区域失效，因此请确保它与 gtk_render_*（） 函数正在渲染的窗口相同。如果region_id为 NULL，则所有使用上下文呈现的元素都将受此状态转换的影响。作为一个实际的例子，在前灯状态上通知状态转换：12345[/语法][语法]gtk_style_context_notify_state_change（上下文，gtk_widget_get_window（小部件），NULL，GTK_STATE_PRELIGHT，按钮>in_button）;[/语法]
可以在 CSS 文件中像这样处理： 12345678[/语法] [语法]GtkButton { background-color： #f00}GtkButton：hover { background-color： #fff; transition： 200ms linear}[/syntax]
如果指针进入按钮，则将按钮背景从红色动画化为白色，如果指针离开按钮，则返回红色。请注意，查找过渡参数时使用状态，这就是样式将过渡置于 ：hover 伪类下的原因。GtkButton
语法
参数
context- 一GtkStyleContext
window- 一GdkWindow
region_id- 要通知的可动画区域，或 NULL。请参见 gtk_style_context_push_animatable_region（）。[允许-无]
state- 触发转换的状态
state_value- TRUE 如果 state 是我们要更改为的状态，则 FALSE 如果我们正在远离它
，则为 FALSE 自 3.0
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_pop_animatable_region ----

gtk_style_context_pop_animatable_region
gtk_style_context_pop_animatable_region自 3.6 版起已弃用，不应在新编写的代码中使用。此函数不执行任何操作。从上下文中弹出可设置动画的区域。请参见 gtk_style_context_push_animatable_region（）。
语法
参数
context- a
自3.0起GtkStyleContext
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_push_animatable_region ----

gtk_style_context_push_animatable_region
gtk_style_context_push_animatable_region自 3.6 版起已弃用，不应在新编写的代码中使用。此函数不执行任何操作。推送一个可设置动画的区域，因此此调用与以下gtk_style_context_pop_animatable_region（）之间的所有进一步gtk_render_*（） 调用可能会显示此区域的过渡动画，ifgtk_style_context_notify_state_change（） 针对给定状态调用，并且当前主题/样式定义状态更改的过渡动画。使用的region_id在上下文中必须是唯一的，以便主题引擎可以唯一地标识受状态转换约束的呈现元素。
语法
参数
context- 一GtkStyleContext
region_id- 自 3.0 以来可动画区域
的唯一标识符
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_remove_class ----

gtk_style_context_remove_class
从上下文中删除class_name。
语法
参数
context- 一GtkStyleContext
class_name- 自 3.0 起要删除
的类名
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_remove_provider ----

gtk_style_context_remove_provider
从上下文中的样式提供程序列表中删除提供程序。
语法
参数
context- 一GtkStyleContext
provider- a
自3.0起GtkStyleProvider
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_remove_provider_for_screen ----

gtk_style_context_remove_provider_for_screen
从屏幕的全局样式提供程序列表中删除提供程序。
语法
参数
screen- 一GdkScreen
provider- a
自3.0起GtkStyleProvider
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_remove_region ----

gtk_style_context_remove_region
从上下文中删除区域。
语法
参数
context- 一GtkStyleContext
region_name- 自 3.0 起要取消设置
的区域名称
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_reset_widgets ----

gtk_style_context_reset_widgets
此函数重新计算特定下所有小部件的样式。当某些全局参数已更改而影响所有小部件的外观时，这很有用，因为当小部件获得newstyle时，它将重新绘制和重新计算有关其外观的任何缓存信息。例如，当相关对象中的配色方案发生变化时，将使用它。GdkScreenGtkSettings
语法
参数
screen- a
自3.0起GdkScreen
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_restore ----

gtk_style_context_restore
将上下文状态还原到上一阶段。请参见 gtk_style_context_save（）。
语法
参数
context- a
自3.0起GtkStyleContext
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_save ----

gtk_style_context_save
保存上下文状态，以便throughgtk_style_context_add_class（）、gtk_style_context_remove_class（）、gtk_style_context_add_region（）、gtk_style_context_remove_region（）或gtk_style_context_set_junction_sides（） 所做的所有修改都可以通过 gtk_style_context_restore（） 在 onego 中还原。
语法
参数
context- a
自3.0起GtkStyleContext
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_scroll_animations ----

gtk_style_context_scroll_animations
gtk_style_context_scroll_animations自版本 3.6 起已弃用，不应在新编写的代码中使用。此函数不执行任何操作。此函数类似于gdk_window_scroll（），并且应该与它一起调用，以便任何正在进行的动画的无效区域都与它一起滚动。
语法
参数
context- 一GtkStyleContext
window- 以前使用过的ingtk_style_context_notify_state_change（）GdkWindow
dx- 在X轴上滚动的量
dy- 自 3.0 起在 Y 轴
上滚动的量
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_background ----

gtk_style_context_set_background
将窗口的背景设置为在其当前状态的上下文中指定的背景图案或颜色。
语法
参数
context- 一GtkStyleContext
window- a
自3.0起GdkWindow
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_direction ----

gtk_style_context_set_direction
gtk_style_context_set_direction自版本 3.8 起已弃用，不应在新编写的代码中使用。请改用 gtk_style_context_set_state（） 和。设置用于呈现目的的阅读方向。如果您使用的是返回的fromgtk_widget_get_style_context（），则无需自行调用。GTK_STATE_FLAG_DIR_LTRGTK_STATE_FLAG_DIR_RTLGtkStyleContext
语法
参数
context- 一GtkStyleContext
direction- 新的方向。
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_frame_clock ----

gtk_style_context_set_frame_clock
将上下文附加到给定的帧时钟。帧时钟用于动画的计时。如果您使用的是返回的fromgtk_widget_get_style_context（），则无需自行调用。GtkStyleContext
语法
参数
context- 一GdkFrameClock
frame_clock- a
自3.8起GdkFrameClock
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_junction_sides ----

gtk_style_context_set_junction_sides
设置渲染元素（主要是throughgtk_render_frame（）））将与其他可视元素直观连接的位置。这只是一个暗示，可能会或可能不会被主题引擎所尊重。容器小部件应为其子项适当地设置交汇点提示，因此通常不需要手动调用此函数。
语法
参数
context- 一GtkStyleContext
sides- 自 3.0 以来，渲染元素在视觉上连接到其他元素
的边
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_parent ----

gtk_style_context_set_parent
设置上下文的父样式上下文。父样式上下文用于实现属性的继承。如果您使用的是返回的fromgtk_widget_get_style_context（），则将为您设置父级。GtkStyleContext
语法
参数
context- 一GtkStyleContext
parent- 新的父项或 NULL。[允许-无]
自 3.4 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_path ----

gtk_style_context_set_path
设置用于样式匹配的。作为等式序列，样式将重新生成以匹配新的给定路径。如果您使用的是返回的fromgtk_widget_get_style_context（），则无需自己调用它。GtkWidgetPathGtkStyleContext
语法
参数
context- 一GtkStyleContext
path- a
自3.0起GtkWidgetPath
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_scale ----

gtk_style_context_set_scale
设置获取样式的图像资源时要使用的比例。
语法
参数
context- 一GtkStyleContext
scale- 规模
自3.10
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_screen ----

gtk_style_context_set_screen
将上下文附加到给定屏幕。该屏幕用于从“全局”添加样式信息？样式提供程序，例如屏幕实例。如果您使用的是返回的fromgtk_widget_get_style_context（），则无需自行调用。GtkSettingsGtkStyleContext
语法
参数
context- 一GtkStyleContext
screen- a
自3.0起GdkScreen
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_set_state ----

gtk_style_context_set_state
设置使用任意gtk_render_*（） 函数进行渲染时要使用的状态。
语法
参数
context- 一GtkStyleContext
flags- 状态表示
自 3.0 以来
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_context_state_is_running ----

gtk_style_context_state_is_running
gtk_style_context_state_is_running自 3.6 版起已弃用，不应在新编写的代码中使用。如果当前区域正在运行过渡动画，则此函数始终返回 FALSEReturns TRUE（请参见gtk_style_context_push_animatable_region（））。如果进度不为 NULL，则将返回动画进度，0.0 表示状态最接近未设置，而 1.0 表示最接近设置的状态。这意味着，当设置状态时，过渡动画将从 0 运行到 1;当它未设置时，过渡动画将从 1 运行到 0。
语法
参数
context- 一GtkStyleContext
state- 小部件状态
progress- 返回转换进度的位置。[输出]
返回
如果状态有正在运行的过渡动画，则为 TRUE。
自 3.0 起
另请参见
GtkStyleContext


------------ KeyGTK3gtk_style_copy ----

gtk_style_copy
gtk_style_copy自 3.0 版起已弃用，不应在新编写的代码中使用。使用改为创建传入对象的副本。GtkStyleContextGtkStyle
语法
参数
style- 一GtkStyle
返回
样式的副本。[转移完整]
另请参见
GtkStyle


------------ KeyGTK3gtk_style_detach ----

gtk_style_detach
gtk_style_detach自 3.0 版起已弃用，不应在新编写的代码中使用。请改用从窗口删除样式。如果样式不再附加到任何窗口，则它未实现。请参见gtk_style_attach（）。GtkStyleContext
语法
参数
style- 一GtkStyle
另请参见
GtkStyle


------------ KeyGTK3gtk_style_get ----

gtk_style_get
gtk_style_get已弃用，不应在新编写的代码中使用。获取widget_typefrom样式的多个样式属性的值。
语法
参数
style- 一GtkStyle
widget_type- 的后代GTypeGtkWidget
first_property_name- 要获取的第一个样式属性的名称
...- 属性名称和位置对将返回属性值，从位置forfirst_property_name开始，以 NULL 结尾。
2.16 起
另请参见
GtkStyle


------------ KeyGTK3gtk_style_get_style_property ----

gtk_style_get_style_property
gtk_style_get_style_property已弃用，不应在新编写的代码中使用。查询 与 awidget 类对应的样式属性的值是否在给定样式中。
语法
参数
style- 一GtkStyle
widget_type- 的后代GTypeGtkWidget
property_name- 要获取的样式属性的名称
value- a 自 2.16 起存储
被查询属性的值GValue
另请参见
GtkStyle


------------ KeyGTK3gtk_style_get_valist ----

gtk_style_get_valist
gtk_style_get_valist已弃用，不应在新编写的代码中使用。gtk_style_get（） 的非变性变体。主要由语言绑定使用。
语法
参数
style- 一GtkStyle
widget_type- 的后代GTypeGtkWidget
first_property_name- 要获取的第一个样式属性的名称
var_args- 属性名称和位置对的va_list，用于返回属性值，从first_property_name的位置开始。
2.16 起
另请参见
GtkStyle


------------ KeyGTK3gtk_style_has_context ----

gtk_style_has_context
gtk_style_has_context已弃用，不应在新编写的代码中使用。返回样式是否具有关联的 .GtkStyleContext
语法
参数
style- 一GtkStyle
返回
true 如果 style 有一个
自 3.0GtkStyleContext
另请参见
GtkStyle


------------ KeyGTK3gtk_style_lookup_color ----

gtk_style_lookup_color
gtk_style_lookup_color自 3.0 版起已弃用，不应在新编写的代码中使用。使用gtk_style_context_lookup_color（） 代替在样式的逻辑颜色映射中查找color_name，填充颜色并在找到时返回 TRUE，否则返回 FALSE。不要缓存找到的映射，因为它取决于主题切换发生时，并且可能会更改。GtkStyle
语法
参数
style- 一GtkStyle
color_name- 要查找的逻辑颜色的名称
color- 要填写。GdkColor
返回
如果找到映射，则为 TRUE。
自 2.10 起
另请参见
GtkStyle


------------ KeyGTK3gtk_style_lookup_icon_set ----

gtk_style_lookup_icon_set
gtk_style_lookup_icon_set自 3.0 版起已弃用，不应在新编写的代码中使用。使用gtk_style_context_lookup_icon_set（） 代替在与 style 和默认图标工厂关联的图标工厂中查找stock_id，如果找到，则返回图标集，否则为 NULL。
语法
参数
style- 一GtkStyle
stock_id- 图标名称
返回
stock_id的图标集。 [无转移]
另请参见
GtkStyle


------------ KeyGTK3gtk_style_new ----

gtk_style_new
gtk_style_new自 3.0 版起已弃用，不应在新编写的代码中使用。使用 创建新 .GtkStyleContextGtkStyle
返回
一个新的.GtkStyle
另请参见
GtkStyle


------------ KeyGTK3gtk_style_properties_clear ----

gtk_style_properties_clear
清除道具中的所有样式信息。
语法
参数
props- 一GtkStyleProperties
另请参见
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_get ----

gtk_style_properties_get
从道具中检索多个样式属性值，以获取 agiven 状态。
语法
参数
props- 一GtkStyleProperties
state- 要检索其属性值的状态
...- 属性名称/返回值对，后跟 NULL
自 3.0 起
另请参见
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_get_property ----

gtk_style_properties_get_property
从给定状态的 props 中获取样式属性。当使用值时，需要调用g_value_unset（）来释放任何分配的内存。
语法
参数
props- 一GtkStyleProperties
property- 样式属性名称
state- 要检索其属性值的状态
value- 样式属性值的返回位置。[输出][转移完整]
返回
如果属性存在于 props 中，则为 TRUE，否则为 FALSE，因为
3.0
另请参见
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_get_valist ----

gtk_style_properties_get_valist
从给定状态的 props 中检索多个样式属性值。
语法
参数
props- 一GtkStyleProperties
state- 要检索其属性值的状态
args- va_list属性名称/返回位置对，后跟 NULL
自 3.0 起
另请参见
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_lookup_color ----

gtk_style_properties_lookup_color
gtk_style_properties_lookup_color自 3.8 版起已弃用，不应在新编写的代码中使用。已弃用。返回映射到名称的符号颜色。GtkSymbolicColor
语法
参数
props- 一GtkStyleProperties
name- 颜色名称查找
返回
映射的颜色。[无转移]
自 3.0 起
另请参见
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_lookup_property ----

gtk_style_properties_lookup_property
gtk_style_properties_lookup_property自版本 3.8 起已弃用，不应在新编写的代码中使用。此代码只能查找自定义属性，这些属性已弃用。如果已注册属性，则返回 TRUE;如果 pspec orparse_func不为 NULL，则将分别返回 和 分析函数。GParamSpec
语法
参数
property_name- 要查找的属性名称
parse_func- 返回解析函数的位置。[输出]
pspec- 返回位置的 .[输出][无转移]GParamSpec
返回
如果属性已注册，则为 TRUE，否则为
FALSE 自 3.0 起
另请参见
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_map_color ----

gtk_style_properties_map_color
gtk_style_properties_map_color自版本 3.8 起已弃用，不应在新编写的代码中使用。已弃用。地图颜色，以便可以按名称引用。Seegtk_style_properties_lookup_color（）GtkSymbolicColor
语法
参数
props- 一GtkStyleProperties
name- 颜色名称
color  -  	GtkSymbolicColor将 nameto 映射到
3.0 以来
另请参见
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_merge ----

gtk_style_properties_merge
将props_to_merge中包含的所有样式信息合并到道具中。如果替换为 TRUE，则将覆盖这些值，如果它是 FALSE，则以较旧的值为准。
语法
参数
props- 一GtkStyleProperties
props_to_merge- 一秒钟GtkStyleProperties
replace- 是否替换值
自 3.0
另请参见
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_new ----

gtk_style_properties_new
返回新创建的GtkStyleProperties
返回
一个新的GtkStyleProperties
另请参见
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_register_property ----

gtk_style_properties_register_property
gtk_style_properties_register_property自版本 3.8 起已弃用，不应在新编写的代码中使用。代码应使用 CSS 提供的默认属性。注册一个属性，以便它可以在 CSS 文件格式中使用。此函数是低级等效ofgtk_theming_engine_register_property（），如果要实现主题引擎，则需要改用该函数。
语法
参数
parse_func- 解析函数使用，或 NULL
pspec- 自3.0以来的新属性
GParamSpec
另请参见
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_set ----

gtk_style_properties_set
在道具上设置多个样式属性。
语法
参数
props- 一GtkStyleProperties
state- 状态以设置其值
...- 属性名称/值对，后跟 NULL
自 3.0 起
另请参见
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_set_property ----

gtk_style_properties_set_property
在道具中设置样式属性。
语法
参数
props- 一GtkStyleProperties
property- 要设置的样式属性
state- 要为其设置值的状态
value- 自3.0以来该属性
的新值
另请参见
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_set_valist ----

gtk_style_properties_set_valist
在道具上设置多个样式属性。
语法
参数
props- 一GtkStyleProperties
state- 状态以设置其值
args- va_list属性名称/值对，后跟 NULL
自 3.0 起
另请参见
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_properties_unset_property ----

gtk_style_properties_unset_property
取消设置属性中的样式属性。
语法
参数
props- 一GtkStyleProperties
property- 要取消设置的属性
state- 状态为自
3
.
另请参见
gtk3-GtkStyleProperties


------------ KeyGTK3gtk_style_provider_get_icon_factory ----

gtk_style_provider_get_icon_factory
gtk_style_provider_get_icon_factory自 3.8 版起已弃用，不应在新编写的代码中使用。对于 GTK 提供的所有样式提供程序，将始终返回 NULL。返回要用于路径的定义，如果未定义，则返回 NULL。GtkIconFactory
语法
参数
provider- 一GtkStyleProvider
path  -  	GtkWidgetPath进行查询
返回
用于路径的图标工厂，或 NULL。[无转移]
自 3.0 起
另请参见
GtkStyleProvider


------------ KeyGTK3gtk_style_provider_get_style ----

gtk_style_provider_get_style
gtk_style_provider_get_style自 3.8 版起已弃用，不应在新编写的代码中使用。对于所有 GTK 提供的样式提供程序，将始终返回 NULL，因为接口无法按照指定 CSS 的方式正确工作。返回影响由 path 定义的构件的样式设置，或者 NULL（如果提供者不考虑样式路径）。
语法
参数
provider- 一GtkStyleProvider
path  -  	GtkWidgetPath进行查询
返回
a 包含影响路径的样式设置。[转移完整]
自 3.0 起GtkStyleProperties
另请参见
GtkStyleProvider


------------ KeyGTK3gtk_style_provider_get_style_property ----

gtk_style_provider_get_style_property
查找由提供程序为 path 表示的小部件定义的小部件样式属性。
语法
参数
provider- 一GtkStyleProvider
path  -  	GtkWidgetPath进行查询
state- 查询样式属性的状态
pspec- 查询GParamSpec
value- 返回属性值的位置。[输出]
返回
如果找到该属性并且具有值，则为 TRUE，否则为
FALSE From 3。
另请参见
GtkStyleProvider


------------ KeyGTK3gtk_style_render_icon ----

gtk_style_render_icon
gtk_style_render_icon自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_render_icon_pixbuf（） 代替根据给定参数以给定大小呈现源指定的图标，并以 apixbuf 的形式返回结果。
语法
参数
style- 一GtkStyle
source- 指定要渲染的图标GtkIconSource
direction- 文本方向
state- 一种状态
size- 渲染图标的大小。大小 （GtkIconSize）-1 表示以源的大小呈现，并且不按比例进行渲染。[键入整型]
widget- 小部件。[允许-无]
detail- 样式细节。[允许-无]
返回
包含渲染图标的新创建。[转移完整]GdkPixbuf
另请参见
GtkStyle


------------ KeyGTK3gtk_style_set_background ----

gtk_style_set_background
gtk_style_set_background自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_style_context_set_background（） 代替将窗口的背景设置为由给定状态的样式指定的背景色或像素贴图。
语法
参数
style- 一GtkStyle
window- 一GdkWindow
state_type- 一种状态
另请参见
GtkStyle


------------ KeyGTK3gtk_switch_get_active ----

gtk_switch_get_active
获取 是否在其 ？on 中？还是？关闭？州。GtkSwitch
语法
参数
sw- 一GtkSwitch
返回
如果 为活动状态，则为 TRUE，否则为 FALSE，因为
3.GtkSwitch
另请参见
GtkSwitch


------------ KeyGTK3gtk_switch_new ----

gtk_switch_new
创建新的构件。GtkSwitch
返回
自 3.0 以来新创建的实例
GtkSwitch
另请参见
GtkSwitch


------------ KeyGTK3gtk_switch_set_active ----

gtk_switch_set_active
将 sw 的状态更改为所需的状态。
语法
参数
sw- 一GtkSwitch
is_active- 如果 swshould 处于活动状态，则为 TRUE，否则为
FALSE 自 3.0 起
另请参见
GtkSwitch


------------ KeyGTK3gtk_symbolic_color_new_alpha ----

gtk_symbolic_color_new_alpha
gtk_symbolic_color_new_alpha自版本 3.8 起已弃用，不应在新编写的代码中使用。已弃用。通过修改颜色的相对 alpha 值来创建符号颜色。因子 1.0 <将解析为更透明的颜色，而> 1.0 将解析为更不透明的颜色。GtkSymbolicColor
语法
参数
color- 另一个GtkSymbolicColor
factor- 适用于色相的因子
返回
新创建的
自 3.0 以来GtkSymbolicColor
另请参见
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_new_literal ----

gtk_symbolic_color_new_literal
gtk_symbolic_color_new_literal自 3.8 版起已弃用，不应在新编写的代码中使用。已弃用。创建指向文字颜色的符号颜色。GtkSymbolicColor
语法
参数
color- 一GdkRGBA
返回
a 自 3.0 以来新创建的
GtkSymbolicColor
另请参见
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_new_mix ----

gtk_symbolic_color_new_mix
gtk_symbolic_color_new_mix自 3.8 版起已弃用，不应在新编写的代码中使用。已弃用。创建定义为另二种颜色混合的符号颜色。混合因子 0 将解析为 color1，而因子 1 将解析为 color2。GtkSymbolicColor
语法
参数
color1- 颜色混合
color2- 另一种颜色混合
factor- 混合因子
返回
新创建的
自 3.0 以来GtkSymbolicColor
另请参见
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_new_name ----

gtk_symbolic_color_new_name
gtk_symbolic_color_new_name自版本 3.8 起已弃用，不应在新编写的代码中使用。已弃用。创建指向未解析命名颜色的符号颜色。请参见gtk_style_context_lookup_color（） andgtk_style_properties_lookup_color（）。GtkSymbolicColor
语法
参数
name- 颜色名称
返回
a 自 3.0 以来新创建的
GtkSymbolicColor
另请参见
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_new_shade ----

gtk_symbolic_color_new_shade
gtk_symbolic_color_new_shade自 3.8 版起已弃用，不应在新编写的代码中使用。已弃用。创建定义为其他颜色的阴影的符号颜色。因子 > 1.0 将解析为较亮的颜色，而因子 1.0 将解析为较亮的颜色，而 < 1.0 将解析为较深的颜色。GtkSymbolicColor
语法
参数
color- 另一个GtkSymbolicColor
factor- 应用于颜色的阴影因子
返回
新创建的
自 3.0 以来GtkSymbolicColor
另请参见
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_new_win32 ----

gtk_symbolic_color_new_win32
gtk_symbolic_color_new_win32自版本 3.8 起已弃用，不应在新编写的代码中使用。已弃用。基于当前 win32 主题创建符号颜色。请注意，虽然此调用在所有平台上都可用，但返回的实际值在非 win32 平台上并不可靠。GtkSymbolicColor
语法
参数
theme_class- 从中提取颜色的主题类
id- 颜色 ID
返回
新创建的
自 3.4GtkSymbolicColor
另请参见
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_ref ----

gtk_symbolic_color_ref
gtk_symbolic_color_ref自 3.8 版起已弃用，不应在新编写的代码中使用。已弃用。增加颜色的参考计数GtkSymbolicColor
语法
参数
color- 一GtkSymbolicColor
返回
自 3.0 以来的相同颜色
另请参见
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_resolve ----

gtk_symbolic_color_resolve
gtk_symbolic_color_resolve自 3.8 版起已弃用，不应在新编写的代码中使用。已弃用。如果颜色是可解析的，则将使用解析的颜色填充resolved_color，并返回 TRUE。通常，如果颜色无法解析，则是由于它被定义在道具中不存在的命名颜色之上。当 props 为 NULL 时，命名颜色的解析将失败，因此，如果颜色是或引用此类颜色，则此函数将返回 FALSE。GtkSymbolicColor
语法
参数
color- 一GtkSymbolicColor
props  -  	 GtkStyleProperties以在解析命名颜色时使用，或 NULL。[允许-无]
resolved_color- 解析颜色的返回位置。[输出]
返回
如果颜色自 3.0 以来已解析
，则为 TRUE
另请参见
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_to_string ----

gtk_symbolic_color_to_string
gtk_symbolic_color_to_string自 3.8 版起已弃用，不应在新编写的代码中使用。已弃用。将给定颜色转换为字符串表示形式。这对于调试和字符串的序列化非常有用。字符串的格式可能会在不同版本的GTK之间发生变化，但可以保证GTK css解析器能够读取字符串并从中创建相同的符号颜色。GtkSymbolicColor
语法
参数
color- 颜色转换为字符串
返回
表示 colo 的新字符串
另请参见
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_symbolic_color_unref ----

gtk_symbolic_color_unref
gtk_symbolic_color_unref自 3.8 版起已弃用，不应在新编写的代码中使用。已弃用。减少颜色的引用计数，如果引用计数达到 0，则释放其内存。GtkSymbolicColor
语法
参数
color- a
自3.0起GtkSymbolicColor
另请参见
gtk3-GtkSymbolicColor


------------ KeyGTK3gtk_table_attach ----

gtk_table_attach
gtk_table_attach自 3.4 版起已弃用，不应在新编写的代码中使用。将 gtk_grid_attach（） 与 .请注意，这两个函数之间的附加参数不同。将构件添加到表中。“细胞”的数量？小部件将占用由left_attach，right_attach，top_attach和bottom_attach指定。它们分别表示表的最左侧、最右侧、最上部和最低的列号和行号。（列和行从零开始编制索引）。要使按钮占据 2x2 表的右下单元格，请使用 12345[/语法] [语法]gtk_table_attach（表、按钮、1、2、// 左、右附加 1、2、// 顶部、底部附加 xoptions、yoptions、xpadding、ypadding）;[/语法]
如果要使按钮跨越整个底部行，请改用 left_attach == 0 和 right_attach = 2。GtkGrid
语法
参数
table- 要添加新的小部件。GtkTable
child- 要添加的小部件。
left_attach- 要将子构件的左侧附加到的列号。
right_attach- 要将子构件的右侧附加到的列号。
top_attach- 要将子构件的顶部附加到的行号。
bottom_attach- 要将子构件的底部附加到的行号。
xoptions- 用于在调整表大小时指定子构件的属性。
yoptions- 与 xoptions 相同，只是此字段确定垂直调整大小的行为。
xpadding- 一个整数值，用于指定要添加到表中的小部件的左侧和右侧的填充。
ypadding- 子小部件上方和下方的填充量。
另请参见
GtkTable


------------ KeyGTK3gtk_table_attach_defaults ----

gtk_table_attach_defaults
gtk_table_attach_defaults自 3.4 版起已弃用，不应在新编写的代码中使用。将 gtk_grid_attach（） 与 .请注意，这两个函数之间的附加参数不同。由于有许多与gtk_table_attach（）相关的选项，因此此便利功能为程序员提供了一种将子项添加到表中的方法，具有固定的填充和扩展选项。用于 的值GTK_EXPAND |GTK_FILL，并且填充设置为 0。GtkGridGtkAttachOptions
语法
参数
table- 要向其添加新子构件的表。
widget- 要添加的子小部件。
left_attach- 要将子构件的左侧附加到的列号。
right_attach- 要将子构件的右侧附加到的列号。
top_attach- 要将子构件的顶部附加到的行号。
bottom_attach- 要将子构件的底部附加到的行号。
另请参见
GtkTable


------------ KeyGTK3gtk_table_get_col_spacing ----

gtk_table_get_col_spacing
gtk_table_get_col_spacing自版本 3.4 起已弃用，不应在新编写的代码中使用。不提供此功能的替代品。获取列 col 和列 col + 1 之间的间距量。请参见gtk_table_set_col_spacing（）。GtkGrid
语法
参数
table- 一GtkTable
column- 表中的一列，0 表示第一列
返回
列间距
另请参见
GtkTable


------------ KeyGTK3gtk_table_get_default_col_spacing ----

gtk_table_get_default_col_spacing
gtk_table_get_default_col_spacing自版本 3.4 起已弃用，不应在新编写的代码中使用。将 gtk_grid_get_column_spacing（） 与 .获取表的默认列间距。这是将用于新添加列的间距。（参见gtk_table_set_col_spacings（））GtkGrid
语法
参数
table- 一GtkTable
返回
默认列间距
另请参见
GtkTable


------------ KeyGTK3gtk_table_get_default_row_spacing ----

gtk_table_get_default_row_spacing
gtk_table_get_default_row_spacing自版本 3.4 起已弃用，不应在新编写的代码中使用。将 gtk_grid_get_row_spacing（） 与 .获取表的默认行间距。这是将用于新添加的行的间距。（参见gtk_table_set_row_spacings（））GtkGrid
语法
参数
table- 一GtkTable
返回
默认行距
另请参见
GtkTable


------------ KeyGTK3gtk_table_get_homogeneous ----

gtk_table_get_homogeneous
gtk_table_get_homogeneous自 3.4 版起已弃用，不应在新编写的代码中使用。将 gtk_grid_get_row_homogeneous（） 和 gtk_grid_get_column_homogeneous（） 与 一起使用。返回表格单元格是否全部限制为相同宽度和高度。（参见 gtk_table_set_homogeneous（））GtkGrid
语法
参数
table- 一GtkTable
返回
如果单元格全部限制为相同大小，则为 TRUE
另请参见
GtkTable


------------ KeyGTK3gtk_table_get_row_spacing ----

gtk_table_get_row_spacing
gtk_table_get_row_spacing自 3.4 版起已弃用，不应在新编写的代码中使用。不提供此功能的替代品。获取行行与行 + 1 之间的间距量。请参见 gtk_table_set_row_spacing（）。GtkGrid
语法
参数
table- 一GtkTable
row- 表中的一行，0 表示第一行
返回
行距
另请参见
GtkTable


------------ KeyGTK3gtk_table_get_size ----

gtk_table_get_size
gtk_table_get_size自版本 3.4 起已弃用，不应在新编写的代码中使用。不公开列数和行数。获取表中的行数和列数。GtkGrid
语法
参数
table- 一GtkTable
rows- 返回行数的位置，或 NULL。[输出][允许-无]
columns- 返回列数的位置，或 NULL。[输出][允许-无]
2.22 起
另请参见
GtkTable


------------ KeyGTK3gtk_table_new ----

gtk_table_new
gtk_table_new自版本 3.4 起已弃用，不应在新编写的代码中使用。使用 gtk_grid_new（）。用于创建新的表构件。必须通过指定表应具有的行数和列数来给出初始大小，尽管以后可以使用gtk_table_resize（） 进行更改。行和列都必须在 1 的范围内 。.65535. 由于历史原因，0 被接受得很好，并被默默地解释为 1。
语法
参数
rows- 新表应具有的行数。
columns- 新表应具有的列数。
homogeneous- 如果设置为 TRUE，则所有表格单元格的大小都将调整为包含最大构件的单元格的大小。
返回
指向新创建的表构件的指针。
另请参见
GtkTable


------------ KeyGTK3gtk_table_resize ----

gtk_table_resize
gtk_table_resize自 3.4 版起已弃用，不应在新编写的代码中使用。自动调整大小。如果在创建表后需要更改表的大小，则此函数允许您执行此操作。GtkGrid
语法
参数
table- 您希望更改的大小。GtkTable
rows- 新的行数。
columns- 新的列数。
另请参见
GtkTable


------------ KeyGTK3gtk_table_set_col_spacing ----

gtk_table_set_col_spacing
gtk_table_set_col_spacing自 3.4 版起已弃用，不应在新编写的代码中使用。如果需要此功能，请在行中包含的小组件上使用 gtk_widget_set_margin_start（） 和 gtk_widget_set_margin_end（）。 不支持每行间距。更改给定表列与以下列之间的间距量。GtkGrid
语法
参数
table- 一个.GtkTable
column- 应更改其间距的列。
spacing- 间距应占用的像素数。
另请参见
GtkTable


------------ KeyGTK3gtk_table_set_col_spacings ----

gtk_table_set_col_spacings
gtk_table_set_col_spacings自 3.4 版起已弃用，不应在新编写的代码中使用。将 gtk_grid_set_column_spacing（） 与 一起使用。将表中每列之间的间距设置为等于间距。GtkGrid
语法
参数
table- 一个.GtkTable
spacing- 要放置在表格中每列之间的空间像素数。
另请参见
GtkTable


------------ KeyGTK3gtk_table_set_homogeneous ----

gtk_table_set_homogeneous
gtk_table_set_homogeneous自 3.4 版起已弃用，不应在新编写的代码中使用。将 gtk_grid_set_row_homogeneous（） 和 gtk_grid_set_column_homogeneous（） 与 一起使用。更改表单元格的同构属性，即。所有单元格的大小是否相等。GtkGrid
语法
参数
table- 您希望设置的齐次属性。GtkTable
homogeneous- 设置为 TRUE 以确保所有表格单元格的大小相同。Setto FALSE 如果这不是您想要的行为。
另请参见
GtkTable


------------ KeyGTK3gtk_table_set_row_spacing ----

gtk_table_set_row_spacing
gtk_table_set_row_spacing自版本 3.4 起已弃用，不应在新编写的代码中使用。如果需要此功能，请在行中包含的小部件上使用 gtk_widget_set_margin_top（） 和 gtk_widget_set_margin_bottom（）。 不支持每行间距。更改给定表行和后续行之间的间距。GtkGrid
语法
参数
table- 包含要更改其属性的行。GtkTable
row- 行号，其间距将被更改。
spacing- 间距应占用的像素数。
另请参见
GtkTable


------------ KeyGTK3gtk_table_set_row_spacings ----

gtk_table_set_row_spacings
gtk_table_set_row_spacings自 3.4 版起已弃用，不应在新编写的代码中使用。将 gtk_grid_set_row_spacing（） 与 .将表中每行之间的间距设置为等于间距。GtkGrid
语法
参数
table- 一个.GtkTable
spacing- 要在表格中的每一行之间放置空间的像素数。
另请参见
GtkTable


------------ KeyGTK3gtk_targets_include_image ----

gtk_targets_include_image
确定目标中的任何目标是否可用于提供 .GdkPixbuf
语法
参数
targets- 一个数组。[数组长度 = n_targets]GdkAtoms
n_targets- 目标的长度
writable- 是否只接受GTK +知道如何将pixbuf转换为格式的目标
返回
如果目标包含图像的合适目标，则为 TRUE，否则为 FALSE。
自 2.10 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_targets_include_rich_text ----

gtk_targets_include_rich_text
确定目标中的任何目标是否可用于提供格式文本。
语法
参数
targets- 一个数组。[数组长度 = n_targets]GdkAtoms
n_targets- 目标的长度
buffer- 一GtkTextBuffer
返回
如果目标包含适合富文本的目标，则为 TRUE，否则为 FALSE。
自 2.10 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_targets_include_text ----

gtk_targets_include_text
确定目标中的任何目标是否可用于提供文本。
语法
参数
targets- 一个数组。[数组长度 = n_targets]GdkAtoms
n_targets- 目标的长度
返回
如果目标包含适合文本的目标，则为 TRUE，否则为 FALSE。
自 2.10 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_targets_include_uri ----

gtk_targets_include_uri
确定目标中的任何目标是否可用于提供 uri 列表。
语法
参数
targets- 一个数组。[数组长度 = n_targets]GdkAtoms
n_targets- 目标的长度
返回
TRUE 如果目标包含适合 uri 列表的目标，则为 TRUE，否则为 FALSE。
自 2.10 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_target_entry_copy ----

gtk_target_entry_copy
创建 及其数据的副本。GtkTargetEntry
语法
参数
data- 指向GtkTargetEntry
返回
指向数据副本的指针。带gtk_target_entry_free（）
另请参见
gtk3-Selections


------------ KeyGTK3gtk_target_entry_free ----

gtk_target_entry_free
释放返回的 fromgtk_target_entry_new（） 或 gtk_target_entry_copy（）。GtkTargetEntry
语法
参数
data- 指向 .GtkTargetEntry
另请参见
gtk3-Selections


------------ KeyGTK3gtk_target_entry_new ----

gtk_target_entry_new
制作一个新的 .GtkTargetEntry
语法
参数
target- 目标的字符串标识符
flags- 一组标志，请参阅GtkTargetFlags
info- 将传递回应用程序的 ID
返回
指向新 .带gtk_target_entry_free（）GtkTargetEntry
另请参见
gtk3-Selections


------------ KeyGTK3gtk_target_list_add ----

gtk_target_list_add
将另一个目标追加到 .GtkTargetList
语法
参数
list- 一GtkTargetList
target- 代表目标的实习原子
flags- 此目标的标志
info- 将传递回应用程序的 ID
另请参见
gtk3-Selections


------------ KeyGTK3gtk_target_list_add_image_targets ----

gtk_target_list_add_image_targets
将 支持的映像目标追加到目标列表中。所有目标都使用相同的信息添加。GtkSelectionData
语法
参数
list- 一GtkTargetList
info- 将传递回应用程序的 ID
writable- 是否仅添加GTK +知道如何将pixbuf转换为自2.6以来的格式
的目标
另请参见
gtk3-Selections


------------ KeyGTK3gtk_target_list_add_rich_text_targets ----

gtk_target_list_add_rich_text_targets
将注册的withgtk_text_buffer_register_serialize_format（） orgtk_text_buffer_register_deserialize_format（） 的富文本目标追加到目标列表中。所有目标都使用相同的信息添加。
语法
参数
list- 一GtkTargetList
info- 将传递回应用程序的 ID
deserializable- 如果为 TRUE，则将添加可反序列化的富文本格式，否则为可序列化的格式。
buffer- 一个.
自 2.10 起GtkTextBuffer
另请参见
gtk3-Selections


------------ KeyGTK3gtk_target_list_add_table ----

gtk_target_list_add_table
将 的表预置到目标列表。GtkTargetEntry
语法
参数
list- 一GtkTargetList
targets- 的表。[数组长度 = n 目标]GtkTargetEntry
ntargets- 表中的目标数量
另请参见
gtk3-Selections


------------ KeyGTK3gtk_target_list_add_text_targets ----

gtk_target_list_add_text_targets
将 支持的文本目标追加到目标列表中。所有目标都使用相同的信息添加。GtkSelectionData
语法
参数
list- 一GtkTargetList
info- 自 2.6 起将传递回应用程序的
ID
另请参见
gtk3-Selections


------------ KeyGTK3gtk_target_list_add_uri_targets ----

gtk_target_list_add_uri_targets
将 支持的 URI 目标追加到目标列表中。所有目标都使用相同的信息添加。GtkSelectionData
语法
参数
list- 一GtkTargetList
info- 自 2.6 起将传递回应用程序的
ID
另请参见
gtk3-Selections


------------ KeyGTK3gtk_target_list_find ----

gtk_target_list_find
在 中查找给定目标。GtkTargetList
语法
参数
list- 一GtkTargetList
target- 一个实习原子，代表要搜索的目标
info- 指向存储目标应用程序信息的位置的指针，或 NULL。[输出][允许-无]
返回
如果找到目标，则为 TRUE，否则为 FALSE
另请参见
gtk3-Selections


------------ KeyGTK3gtk_target_list_new ----

gtk_target_list_new
从 的数组中创建新的 .GtkTargetListGtkTargetEntry
语法
参数
targets- 指向 .[数组长度 = n 目标]GtkTargetEntry
ntargets- 目标中的条目数。
返回
新的 .[转移完整]GtkTargetList
另请参见
gtk3-Selections


------------ KeyGTK3gtk_target_list_ref ----

gtk_target_list_ref
将 的引用计数增加 1。GtkTargetList
语法
参数
list- 一GtkTargetList
返回
传入的 .GtkTargetList
另请参见
gtk3-Selections


------------ KeyGTK3gtk_target_list_remove ----

gtk_target_list_remove
从目标列表中删除目标。
语法
参数
list- 一GtkTargetList
target- 代表目标的实习原子
另请参见
gtk3-Selections


------------ KeyGTK3gtk_target_list_unref ----

gtk_target_list_unref
将 的引用计数减少 1。如果生成的引用计数为零，则释放列表。GtkTargetList
语法
参数
list- 一GtkTargetList
另请参见
gtk3-Selections


------------ KeyGTK3gtk_target_table_free ----

gtk_target_table_free
姝ゅ嚱鏁伴噴鏀捐繑鍥瀊ygtk_target_table_new_from_list锛堬級 鐨勭洰鏍囪〃
璇硶
鍙傛暟
targets- 涓€涓暟缁勩€俒鏁扮粍闀垮害 = n_targets]GtkTargetEntry
n_targets- 鏁扮粍
涓嚜 2.10 浠ユ潵鐨勬潯鐩暟
鍙﹁鍙傝
gtk3-Selections


------------ KeyGTK3gtk_target_table_new_from_list ----

gtk_target_table_new_from_list
此函数创建一个数组，其中包含与传递的列表相同的目标。返回的表是新分配的，当不再需要时，应使用 gtk_target_table_free（） 释放。GtkTargetEntry
语法
参数
list- 一GtkTargetList
n_targets- 返回表中目标数 ot 的位置。[输出]
返回
新表。[数组长度 = n_targets][转移完整]
自 2.10 起
另请参见
gtk3-Selections


------------ KeyGTK3gtk_tearoff_menu_item_new ----

gtk_tearoff_menu_item_new
gtk_tearoff_menu_item_new自版本 3.4 起已弃用，不应在新编写的代码中使用。已弃用，不应在新编写的代码中使用。创建新的 .GtkTearoffMenuItemGtkTearoffMenuItem
返回
一个新的GtkTearoffMenuItem
另请参见
GtkTearoffMenuItem


------------ KeyGTK3gtk_test_create_simple_window ----

gtk_test_create_simple_window
创建一个具有窗口标题window_title和文本内容dialog_text的简单窗口。该窗口在被破坏时将退出任何正在运行的gtk_main（）循环，并在测试函数拆卸时自动销毁。
语法
参数
window_title- 要显示的窗口的标题。
dialog_text- 要显示的窗口内的文本。
返回
指向新创建的 GtkWindow 的小部件指针。[无转移]
自 2.14 起
另请参见
gtk3-Testing


------------ KeyGTK3gtk_test_create_widget ----

gtk_test_create_widget
此函数包装小部件类型的 g_object_new（）。它将自动显示所有创建的非窗口小部件，alsog_object_ref_sink（）它们（以在运行测试中保持活动状态），并在下一个测试拆解阶段设置它们以进行销毁。
语法
参数
widget_type- 有效的小部件类型。
first_property_name- 要设置的第一个属性的名称或 NULL。[允许-无]
...- 将第一个属性设置为的值，后跟更多名称-值对，以 NULL 结尾
返回
新创建的小部件。[无转移]
自 2.14 起
另请参见
gtk3-Testing


------------ KeyGTK3gtk_test_display_button_window ----

gtk_test_display_button_window
创建一个窗口，其中包含窗口标题window_title，文本内容dialog_text和多个按钮，根据给定的配对参数列表@...参数。每个按钮都使用一个标签和一个 ：：clicked 信号处理程序创建，该处理程序将存储在 nump 中的整数引入。该窗口将自动显示gtk_widget_show_now（）后创建，因此当此函数返回时，它已被映射，调整大小并在屏幕上定位。该窗口在被破坏时将退出任何正在运行的gtk_main（）循环，并在测试函数拆卸时自动销毁。
语法
参数
window_title- 要显示的窗口的标题。
dialog_text- 要显示的窗口内的文本。
...- NULL 终止的列表（const char *label， int *nump）对。
返回
指向新创建的 GtkWindow 的小部件指针。[转移完整]
自 2.14 起
另请参见
gtk3-Testing


------------ KeyGTK3gtk_test_find_label ----

gtk_test_find_label
此函数将在小部件及其所有后代中搜索具有与label_pattern匹配的文本字符串的 GtkLabelwidget。label_pattern可能包含星号？*？和问号???作为占位符，g_pattern_match（） 用于匹配。请注意，除“C？倾向于改变（翻译？标签字符串），所以这个函数只在具有预定语言环境的测试程序中有用，请参阅gtk_test_init（）以获取更多详细信息。
语法
参数
widget- 有效的标签或容器小部件。
label_pattern- 壳球图案，以匹配标签字符串。
返回
一个 GtkLabel 小部件（如果找到）。[无转移]
自 2.14 起
另请参见
gtk3-Testing


------------ KeyGTK3gtk_test_find_sibling ----

gtk_test_find_sibling
此函数将搜索base_widget的同级和其祖先的同级，以查找与widget_type匹配的所有小部件。在匹配的微件中，将返回几何上最接近tobase_widget微件。此函数的一般目的是查找相对于另一个标记小部件最有可能的“操作”小部件。如查找主控器或文本输入小部件，给定其相应的标签小部件。
语法
参数
base_widget- 有效的小部件，小部件层次结构的一部分
widget_type- 同级小部件的 aearched 类型
返回
找到widget_typeif类型的小部件。[无转移]
自 2.14 起
另请参见
gtk3-Testing


------------ KeyGTK3gtk_test_find_widget ----

gtk_test_find_widget
此函数将在 widget 的后代中搜索widget_type类型的 widget，该 widget 的标签与其旁边label_pattern匹配。这对于自动化GUI测试最有用，例如找到？断续器按钮，并合成对它的点击。但是，请参阅gtk_test_find_label（），gtk_test_find_sibling（）andgtk_test_widget_click（）以了解涉及搜索此类小部件和合成小部件事件的可能警告。
语法
参数
widget- 容器小部件，通常是GtkWindow。
label_pattern- 壳球图案，以匹配标签字符串。
widget_type- 用于标签同级小部件的 aearched 类型。
返回
如果找到任何小部件，则为 NULL。[无转移]
自 2.14 起
另请参见
gtk3-Testing


------------ KeyGTK3gtk_test_init ----

gtk_test_init
此函数用于初始化 GTK+ 测试程序。反过来，它将调用g_test_init（）和gtk_init（）来正确初始化测试框架和图形工具包。它还会将程序的区域设置设置为 ？C?并防止加载 rc 文件和 Gtk+ 模块。这样做是为了使 tets 程序环境尽可能具有确定性。像gtk_init（）和g_test_init（）一样，任何已知的参数都将从 argc 和 argv 中处理和剥离。
语法
参数
argcp- themain（） 函数的 argc 参数的地址。如果处理了任何参数，则已更改。
argvp- 主（）的 theargv 参数的地址。g_test_init（） 或 gtk_init（） 理解的任何参数在返回之前都会被剥离。[输入][数组长度 = argcp]
...- 自2.14
以来当前未使用
另请参见
gtk3-Testing


------------ KeyGTK3gtk_test_list_all_types ----

gtk_test_list_all_types
返回已注册的类型 id，在调用gtk_test_register_all_types（） 之后。
语法
参数
n_types- 位置存储类型数量
返回
以 0 结尾的 id 类型数组。[数组长度 = n_types 零终止 = 1][无转移]
自 2.14 起
另请参见
gtk3-Testing


------------ KeyGTK3gtk_test_register_all_types ----

gtk_test_register_all_types
强制注册所有核心 Gtk+ 和 Gdk 对象类型。这允许在调用此函数后引用viag_type_from_name（） 的任何这些对象类型。
自 2.14 起
另请参见
gtk3-Testing


------------ KeyGTK3gtk_test_slider_get_value ----

gtk_test_slider_get_value
检索基于 GtkRange 的微调和旋转按钮的文本调整值。请注意，此函数返回的值介于属于小部件的调整的下限和上限之间，而不是传递给gtk_test_slider_set_perc（） 的百分比。
语法
参数
widget- 有效的小部件指针。
返回
gtk_adjustment_get_value（调整）属于微件的调整。
自 2.14 起
另请参见
gtk3-Testing


------------ KeyGTK3gtk_test_slider_set_perc ----

gtk_test_slider_set_perc
此功能将调整所有基于GtkRange的小部件（例如滚动条或刻度）的滑块位置，它还将调整旋转按钮。根据百分比参数，这些小部件的调整值设置为下限和上限之间的值。
语法
参数
widget- 有效的小部件指针。
percentage- 值介于 0 和 100 之间。
自 2.14 起
另请参见
gtk3-Testing


------------ KeyGTK3gtk_test_spin_button_click ----

gtk_test_spin_button_click
此功能将在向上或向下旋转按钮箭头区域生成按钮单击，通常会导致旋转按钮值的增加或减少。
语法
参数
spinner- 有效的GtkSpinButton小部件。
button- 事件的指针按钮编号，通常为 1、2 或 3。
upwards- TRUE 表示向上箭头单击，FALSE 表示向下箭头单击。
返回
按钮单击模拟所需的所有操作是否都已成功执行。
自 2.14 起
另请参见
gtk3-Testing


------------ KeyGTK3gtk_test_text_get ----

gtk_test_text_get
如果小部件的文本字符串是GtkLabel，GtkEditable（条目和文本小部件）或GtkTextView，请重新提取小部件的文本字符串。
语法
参数
widget- 有效的小部件指针。
返回
新的 0 终止 C 字符串，需要与 g_free（） 一起发布。
自 2.14 起
另请参见
gtk3-Testing


------------ KeyGTK3gtk_test_text_set ----

gtk_test_text_set
将小部件的文本字符串设置为字符串，如果它是GtkLabel，GtkEditable（条目和文本小部件）或GtkTextView。
语法
参数
widget- 有效的小部件指针。
string- 自 2.14 起的 0 终止 C 字符串
另请参见
gtk3-Testing


------------ KeyGTK3gtk_test_widget_click ----

gtk_test_widget_click
此函数将在第一个 GdkWindow 找到属于小部件的中间生成一个按钮单击（按钮按下和按钮释放事件）。对于像GtkButton这样的GTK_NO_WINDOW小部件，这通常是仅输入事件窗口。对于其他小部件，这通常是小部件>窗口。使用此函数时应考虑某些注意事项，特别是因为鼠标指针扭曲到按钮单击位置，有关详细信息，请参阅gdk_test_simulate_button（）。
语法
参数
widget- 小部件生成一个按钮点击。
button- 事件的指针按钮编号，通常为 1、2 或 3。
modifiers- 设置事件的键盘修饰符。
返回
按钮单击模拟所需的所有操作是否都已成功执行。
自 2.14 起
另请参见
gtk3-Testing


------------ KeyGTK3gtk_test_widget_send_ ----

gtk_test_widget_send_key
gtk_test_widget_send_key?()
此功能将在第一个 GdkWindow 发现的属于小部件的中间生成键盘按下和释放事件。对于像GtkButton这样的GTK_NO_WINDOW小部件，这通常是仅输入事件窗口。对于其他小部件，这通常是小部件>窗口。使用此函数时应考虑某些注意事项，特别是因为鼠标指针扭曲到按键位置，有关详细信息，请参阅gdk_test_simulate_key（）。
语法
参数
widget- 小部件生成按键和释放。
keyval- Gdk 键盘值。
modifiers- 设置事件的键盘修饰符。
返回
关键事件模拟所需的所有操作是否都已成功执行。
自 2.14 起
另请参见
gtk3-Testing


------------ KeyGTK3gtk_test_widget_wait_for_draw ----

gtk_test_widget_wait_for_draw
进入主循环并等待“绘制”小部件。在这个context中，这意味着它等待小部件的帧时钟运行完整的样式，布局和绘图周期。此函数旨在用于与依赖于小部件中继或与显示服务器的交互的操作同步。
语法
参数
widget- 自3.1以来等待
的小部件
另请参见
gtk3-Testing


------------ KeyGTK3gtk_text_attributes_copy ----

gtk_text_attributes_copy
复制 src 并返回新的 .GtkTextAttributes
语法
参数
src- 一个要复制的GtkTextAttributes
返回
src 的副本，免费，带 gtk_text_attributes_unref（）
另请参见
GtkTextTag


------------ KeyGTK3gtk_text_attributes_copy_values ----

gtk_text_attributes_copy_values
将值从 src 复制到 dest，以便 dest 具有与 src 相同的值。按 dest 释放现有值。
语法
参数
src- 一GtkTextAttributes
dest- 另一个GtkTextAttributes
另请参见
GtkTextTag


------------ KeyGTK3gtk_text_attributes_new ----

gtk_text_attributes_new
创建一个 ，它描述某些文本上的一组属性。GtkTextAttributes
返回
一个新的，免费的gtk_text_attributes_unref（）。GtkTextAttributes
另请参见
GtkTextTag


------------ KeyGTK3gtk_text_attributes_ref ----

gtk_text_attributes_ref
递增值的引用计数。
语法
参数
values- 一GtkTextAttributes
返回
通过的 iGtkTextAttributes
另请参见
GtkTextTag


------------ KeyGTK3gtk_text_attributes_unref ----

gtk_text_attributes_unref
递减值上的引用计数，如果引用计数达到 0，则释放结构。
语法
参数
values- 一GtkTextAttributes
另请参见
GtkTextTag


------------ KeyGTK3gtk_text_buffer_add_mark ----

gtk_text_buffer_add_mark
在位置添加标记。不得将标记添加到另一个缓冲区，如果其名称不是 NULL，则缓冲区中不得有另一个具有相同名称的标记。发出信号作为标记的阴性放置的通知。?mark-set?
语法
参数
buffer- 一GtkTextBuffer
mark- 要添加的标记
where- 位置到地点标记
自2.12
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_add_selection_clipboard ----

gtk_text_buffer_add_selection_clipboard
将剪贴板添加到缓冲区的选择内容可用的剪贴板列表中。在大多数情况下，剪贴板将是缓冲区视图的GDK_SELECTION_PRIMARY类型。GtkClipboard
语法
参数
buffer- 一GtkTextBuffer
clipboard- 一GtkClipboard
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_apply_tag ----

gtk_text_buffer_apply_tag
发出 “应用标记？缓冲区上的信号。信号的默认处理程序将标记应用于给定的范围。开始和结束不必按顺序排列。
语法
参数
buffer- 一GtkTextBuffer
tag- 一GtkTextTag
start- 一个范围边界被标记
end- 要标记的范围的其他边界
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_apply_tag_by_name ----

gtk_text_buffer_apply_tag_by_name
调用缓冲区标记表上的 gtk_text_tag_table_lookup（） 以获取 ，然后调用 gtk_text_buffer_apply_tag（）。GtkTextTag
语法
参数
buffer- 一GtkTextBuffer
name- 一个命名的名称GtkTextTag
start- 一个范围边界被标记
end- 要标记的范围的其他边界
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_backspace ----

gtk_text_buffer_backspace
执行相应的操作，就像用户用光标在 iter 指定的位置点击 delete 键一样。在正常情况下，将删除单个字符，但是当涉及组合重音符号时，可以删除多个字符，并且当涉及预组合字符和重音符号组合时，将删除少于一个字符。由于缓冲区被修改，所有未完成的迭代器在调用此函数后都变得无效;但是，迭代器将重新初始化以指向删除文本的位置。
语法
参数
buffer- 一GtkTextBuffer
iter- 缓冲区中的一个位置
interactive- 删除是否由用户交互引起
default_editable- 缓冲区在默认情况下是否可编辑
返回
如果缓冲区自 2.6 起被修改
，则为 TRUE
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_begin_user_action ----

gtk_text_buffer_begin_user_action
调用以指示此处和 acall to gtk_text_buffer_end_user_action（） 之间的缓冲区操作是单用户可见操作的一部分。然后，在创建撤消堆栈时，可以将操作betweengtk_text_buffer_begin_user_action（） andgtk_text_buffer_end_user_action（） 进行分组。 维护尚未通过调用 gtk_text_buffer_end_user_action（） 关闭的调用 togtk_text_buffer_begin_user_action（） 的计数，并发出 ？begin-user-action？和最终用户操作？仅针对最外层的调用对发出信号。这允许您从其他用户操作构建用户操作。“交互式”缓冲区突变函数（如 asgtk_text_buffer_insert_interactive（）））会自动围绕它们执行的缓冲区操作调用 begin/enduser 操作，因此，如果用户操作仅包含对这些函数之一的单次调用，则无需添加额外的调用。GtkTextBuffer
语法
参数
buffer- 一GtkTextBuffer
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_copy_clipboard ----

gtk_text_buffer_copy_clipboard
将当前选定的文本复制到剪贴板。
语法
参数
buffer- 一GtkTextBuffer
clipboard- 要复制到的对象GtkClipboard
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_create_child_anchor ----

gtk_text_buffer_create_child_anchor
这是一个方便的函数，它只是使用gtk_text_child_anchor_new（）创建一个子锚点，并将其插入到gtk_text_buffer_insert_child_anchor（）的缓冲区中。新锚点由缓冲区拥有;没有引用计数返回给 gtk_text_buffer_create_child_anchor（） 的调用方。
语法
参数
buffer- 一GtkTextBuffer
iter- 在缓冲区中的位置
返回
创建的子锚点。[无转移]
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_create_mark ----

gtk_text_buffer_create_mark
在位置处创建标记。如果mark_name为 NULL，则标记是匿名的;否则，可以通过名称usinggtk_text_buffer_get_mark（）检索标记。如果标记具有左重心，并且文本插入到标记的当前位置，则该标记将移动到新插入的文本的左侧。如果标记具有正确的重力（left_gravity = FALSE），则该标记将最终位于新插入文本的右侧。标准的从左到右的光标是具有右重力的标记（键入时，光标将停留在您重新键入的文本的右侧）。此函数的调用方不拥有对返回值的引用，因此您可以根据需要忽略返回值。标记归缓冲区所有，当缓冲区拥有时，标记将消失。发出信号作为标记的阴性放置的通知。GtkTextMark?mark-set?
语法
参数
buffer- 一GtkTextBuffer
mark_name- 标记的名称，或 NULL。[允许-无]
where- 位置到位置标记
left_gravity- 标记是否留下了重力
返回
新对象。[无转移]GtkTextMark
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_create_tag ----

gtk_text_buffer_create_tag
创建一个标记并将其添加到缓冲区的标记表中。等效于调用 gtk_text_tag_new（）， 然后将该标记添加到缓冲区的标记表中。返回的标记归缓冲区的标记表所有，因此 ref 计数将等于 1。如果tag_name为 NULL，则该标记为匿名。如果tag_name为非 NULL，则此缓冲区的标记表中不得已存在名为 tag_name 的标记。first_property_name参数和后续参数是要在标记上设置的属性列表，与g_object_set（） 一样。
语法
参数
buffer- 一GtkTextBuffer
tag_name- 新标记的名称，或 NULL。[允许-无]
first_property_name- 要设置的第一个属性的名称，或 NULL。[允许-无]
...- 以 NULL 结尾的属性名称和值列表
返回
一个新标记。[无转移]
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_cut_clipboard ----

gtk_text_buffer_cut_clipboard
将当前选定的文本复制到剪贴板，然后删除所述文本（如果该文本可编辑）。
语法
参数
buffer- 一GtkTextBuffer
clipboard- 要剪切到的对象GtkClipboard
default_editable- 缓冲区的默认可编辑性
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_delete ----

gtk_text_buffer_delete
删除开头和结尾之间的文本。开始和结束的顺序实际上并不相关;gtk_text_buffer_delete（） 将重新排序。此函数实际上发出 “删除范围”signal，该信号的默认处理程序将删除文本。由于修改了缓冲区，因此所有未完成的迭代器在调用此函数后都变得无效;但是，开始和结束将重新初始化为指向删除文本的位置。
语法
参数
buffer- 一GtkTextBuffer
start- 缓冲区中的一个位置
end- 缓冲区中的另一个位置
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_delete_interactive ----

gtk_text_buffer_delete_interactive
删除给定范围内的所有可编辑文本。调用 gtk_text_buffer_delete（） 对于 [开始，结束] 的每个可编辑子范围。重新验证 start 和 end 以指向上次删除的范围的位置，如果未删除任何文本，则保持不变。
语法
参数
buffer- 一GtkTextBuffer
start_iter- 开始删除范围
end_iter- 范围结束
default_editable- 缓冲区在默认情况下是否可编辑
返回
某些文本是否实际被删除
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_delete_mark ----

gtk_text_buffer_delete_mark
删除标记，使其不再位于缓冲区中的任何位置。删除缓冲区对标记的引用，因此，如果您尚未在标记上调用 g_object_ref（），则将释放该标记。即使标记未释放，标记上的大多数操作也会变得无效，直到它再次被添加到具有gtk_text_buffer_add_mark（）的缓冲区。使用 gtk_text_mark_get_deleted（） 找出标记是否已从其缓冲区中删除。删除标记后，信号将作为通知发出。?mark-deleted?
语法
参数
buffer- 一GtkTextBuffer
mark- a 在缓冲区中GtkTextMark
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_delete_mark_by_name ----

gtk_text_buffer_delete_mark_by_name
删除名为名称的标记;该标记必须存在。有关详细信息，Seegtk_text_buffer_delete_mark（）。
语法
参数
buffer- 一GtkTextBuffer
name- 缓冲区中标记的名称
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_delete_selection ----

gtk_text_buffer_delete_selection
删除 “插入” 之间的范围和？selection_bound？标记，即当前选定的文本。如果交互式为 TRUE，则将考虑所选内容的可编辑性（用户无法删除不可编辑的文本）。
语法
参数
buffer- 一GtkTextBuffer
interactive- 删除是否由用户交互引起
default_editable- 缓冲区在默认情况下是否可编辑
返回
是否有要删除的非空选择
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_deserialize ----

gtk_text_buffer_deserialize
此函数以格式反序列化富文本，并在 iter 处插入它。要使用的格式必须事先usinggtk_text_buffer_register_deserialize_format（） orgtk_text_buffer_register_deserialize_tagset（） 注册。
语法
参数
register_buffer- 格式注册GtkTextBuffer
content_buffer- 反序列化为GtkTextBuffer
format- 用于反序列化的富文本格式
iter- 反序列化文本的插入点
data- 要反序列化的数据。[数组长度 = 长度]
length- 数据长度
error- 返回地点GError
返回
成功时为真，否则为假。
自 2.10 起
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_deserialize_get_can_create_tags ----

gtk_text_buffer_deserialize_get_can_create_tags
此函数返回值集 withgtk_text_buffer_deserialize_set_can_create_tags（）
语法
参数
buffer- 一GtkTextBuffer
format- a 表示已注册的富文本格式GdkAtom
返回
反序列化此格式是否会创建自 2.10 起的标记
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_deserialize_set_can_create_tags ----

gtk_text_buffer_deserialize_set_can_create_tags
使用此函数可允许富文本反序列化函数在接收缓冲区中创建新标记。请注意，使用此函数几乎总是一个坏主意，因为您注册的富文本函数应该知道如何将富文本格式他们的处理程序映射到文本缓冲区标记集。在接收缓冲区中创建新的（任意！）标记的功能适用于特殊的富文本格式，例如使用gtk_text_buffer_register_deserialize_tagset（）注册的内部格式，因为该格式实质上是源缓冲区内部结构的转储，包括其标记名称。只有在您知道自己在做什么时，才应该允许创建标记，例如，如果您为应用程序套件的文本缓冲区定义了标记集名称，并且您知道从这些缓冲区接收新标记是可以的，因为您知道您的应用程序可以处理新创建的标记。
语法
参数
buffer- 一GtkTextBuffer
format- a 表示已注册的富文本格式GdkAtom
can_create_tags- 反序列化此格式是否会创建自 2.10 起的标记
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_end_user_action ----

gtk_text_buffer_end_user_action
应与对 gtk_text_buffer_begin_user_action（） 的调用配对。有关完整说明，请参阅该函数。
语法
参数
buffer- 一GtkTextBuffer
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_bounds ----

gtk_text_buffer_get_bounds
检索缓冲区中的第一个和最后一个迭代器，即整个缓冲区位于 [start，end] 范围内。
语法
参数
buffer- 一GtkTextBuffer
start- 迭代器，用于在缓冲区中以第一个位置进行初始化。[输出]
end- 使用结束迭代器进行初始化的迭代器。[输出]
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_char_count ----

gtk_text_buffer_get_char_count
获取缓冲区中的字符数;请注意，字符和字节是不一样的，例如，您不能期望字符串形式的缓冲区内容有这么多字节长。字符计数是缓存的，因此此函数非常快。
语法
参数
buffer- 一GtkTextBuffer
返回
缓冲区中的字符数
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_copy_target_list ----

gtk_text_buffer_get_copy_target_list
此函数返回此文本缓冲区可以提供用于复制和作为 DND 源的目标列表。列表中的目标使用枚举中的信息值添加，使用gtk_target_list_add_rich_text_targets（） andgtk_target_list_add_text_targets（）。GtkTextBufferTargetInfo
语法
参数
buffer- 一GtkTextBuffer
返回
这。[无转移]
自 2.10 起GtkTargetList
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_deserialize_formats ----

gtk_text_buffer_get_deserialize_formats
此函数返回使用 gtk_text_buffer_register_deserialize_format（） orgtk_text_buffer_register_deserialize_tagset（） 在缓冲区中注册的富文本反序列化格式
语法
参数
buffer- 一GtkTextBuffer
n_formats- 格式数的返回位置。[输出]
返回
表示已注册格式的数组。[数组长度 = n_formats][转移容器]
自 2.10 起GdkAtoms
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_end_iter ----

gtk_text_buffer_get_end_iter
使用 ？end 迭代器初始化迭代器，？一个超过文本缓冲区中的最后一个有效字符。如果取消引用withgtk_text_iter_get_char（），则结束迭代器的字符值为 0.整个缓冲区位于从缓冲区中的第一个位置（调用 gtk_text_buffer_get_start_iter（） 到 getcharacter 位置 0）到结束迭代器的范围内。
语法
参数
buffer- 一GtkTextBuffer
iter- 初始化迭代器。[输出]
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_has_selection ----

gtk_text_buffer_get_has_selection
指示缓冲区当前是否选择了某些文本。
语法
参数
buffer- 一GtkTextBuffer
返回
如果选择了自 2.10 以来的文本
，则为 TRUE
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_insert ----

gtk_text_buffer_get_insert
返回表示光标（插入点）的标记。相当于调用gtk_text_buffer_get_mark（）来获得标记“insert”，但效率稍微高一些，并且涉及较少的样式。
语法
参数
buffer- 一GtkTextBuffer
返回
插入点标记。[无转移]
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_iter_at_child_anchor ----

gtk_text_buffer_get_iter_at_child_anchor
获取缓冲区中锚点的位置。
语法
参数
buffer- 一GtkTextBuffer
iter- 要初始化的迭代器。[输出]
anchor- 出现在缓冲区中的子锚点
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_iter_at_line ----

gtk_text_buffer_get_iter_at_line
将 iter 初始化为给定行的开头。如果line_number大于缓冲区中的行数，则返回结束迭代器。
语法
参数
buffer- 一GtkTextBuffer
iter- 初始化迭代器。[输出]
line_number- 行号从0开始计数
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_iter_at_line_index ----

gtk_text_buffer_get_iter_at_line_index
获取指向给定line.byte_index内byte_index的迭代器必须是 UTF-8 字符的开头，并且不得位于行尾。注意字节，而不是字符;UTF-8 可以将一个字符编码为多个字节。
语法
参数
buffer- 一GtkTextBuffer
iter- 初始化迭代器。[输出]
line_number- 行号从0开始计数
byte_index- 从行首开始的字节索引
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_iter_at_line_offset ----

gtk_text_buffer_get_iter_at_line_offset
获取指向给定行内char_offset的迭代器。char_offset必须存在，不允许偏移线性末端的偏移。注意字符，而不是字节;UTF-8 可以将一个字符编码为多个字节。
语法
参数
buffer- 一GtkTextBuffer
iter- 初始化迭代器。[输出]
line_number- 行号从0开始计数
char_offset- 从行的起点偏移的字符
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_iter_at_mark ----

gtk_text_buffer_get_iter_at_mark
使用标记的当前位置初始化 iter。
语法
参数
buffer- 一GtkTextBuffer
iter- 初始化迭代器。[输出]
mark- a 在缓冲区中GtkTextMark
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_iter_at_offset ----

gtk_text_buffer_get_iter_at_offset
将 iter 初始化为从整个缓冲区的开头开始char_offset字符的位置。如果char_offset为 -1 或大于缓冲区中的字符数，则将其初始化为结束迭代器，即缓冲区中最后一个有效字符之后的迭代器。
语法
参数
buffer- 一GtkTextBuffer
iter- 初始化迭代器。[输出]
char_offset- 从缓冲区开始的字符偏移量，从 0 或 -1 开始计数
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_line_count ----

gtk_text_buffer_get_line_count
获取缓冲区中的行数。这个值是缓存的，所以函数非常快。
语法
参数
buffer- 一GtkTextBuffer
返回
缓冲区中的行数
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_mark ----

gtk_text_buffer_get_mark
返回缓冲区中名为 name 的标记，如果缓冲区中不存在此类标记，则返回 NULL。
语法
参数
buffer- 一GtkTextBuffer
name- 一个标记名称
返回
a 或空。[无转移]GtkTextMark
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_modified ----

gtk_text_buffer_get_modified
指示自上次调用以来缓冲区是否已被修改 gtk_text_buffer_set_modified（） 将修改标志设置为 FALSE。例如，用于启用 ？保存？文本编辑器中的函数。
语法
参数
buffer- 一GtkTextBuffer
返回
如果缓冲区已被修改，则为 TRUE
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_paste_target_list ----

gtk_text_buffer_get_paste_target_list
此函数返回此文本缓冲区支持粘贴和作为 DND 目标的目标列表。列表中的目标使用枚举中的信息值添加，使用gtk_target_list_add_rich_text_targets（） andgtk_target_list_add_text_targets（）。GtkTextBufferTargetInfo
语法
参数
buffer- 一GtkTextBuffer
返回
这。[无转移]
自 2.10 起GtkTargetList
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_selection_bound ----

gtk_text_buffer_get_selection_bound
返回表示选定范围标记的标记。等效于调用gtk_text_buffer_get_mark（） 来获取标记名称？selection_bound？，但效率略高，并且不涉及键入。缓冲区中当前选定的文本是“selection_bound？和 ？插入？标志着。如果？selection_bound？和？插入？都在同一个地方，那么没有当前selection.gtk_text_buffer_get_selection_bounds（）是另一个方便的函数来处理选择，如果你只是想知道是否有选择以及它的边界是什么。
语法
参数
buffer- 一GtkTextBuffer
返回
选择绑定标记。[无转移]
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_selection_bounds ----

gtk_text_buffer_get_selection_bounds
如果选择了某些文本，则返回 TRUE;将所选内容的边界置于开始和结束位置（如果所选内容的长度为 0，则开始和结束将使用相同的值填充）。开始和结束将按升序排列。如果开始和结束是 NULL，则不会填充它们，但返回值仍指示是否选择了哪个文本。
语法
参数
buffer- a aGtkTextBufferGtkTextBuffer
start- 迭代器以使用选择开始进行初始化。[输出]
end- 迭代器以选择结束进行初始化。[输出]
返回
所选内容是否具有非零长度
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_serialize_formats ----

gtk_text_buffer_get_serialize_formats
此函数返回使用 gtk_text_buffer_register_serialize_format（） orgtk_text_buffer_register_serialize_tagset（） 在缓冲区中注册的富文本序列化格式
语法
参数
buffer- 一GtkTextBuffer
n_formats- 格式数的返回位置。[输出]
返回
表示已注册格式的数组。[数组长度 = n_formats][转移容器]
自 2.10 起GdkAtoms
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_slice ----

gtk_text_buffer_get_slice
返回 [开始、结束]范围内的文本。排除未显示的文本（用设置不可见属性的标记标记的文本），ifinclude_hidden_chars为 FALSE。每当缓冲区包含嵌入图像时，返回的字符串都包含 a0xFFFC 字符，因此返回字符串中的字节和字符索引确实对应于缓冲区中的字节和字符索引。对比度 withgtk_text_buffer_get_text（）。请注意，0xFFFC也可能出现在普通文本中，因此它不是缓冲区中 pixbuf orwidget 的可靠指标。
语法
参数
buffer- 一GtkTextBuffer
start- 范围的开始
end- 范围的结束
include_hidden_chars- 是否包含不可见文本
返回
已分配的 UTF-8 字符串
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_start_iter ----

gtk_text_buffer_get_start_iter
初始化了文本缓冲区中第一个位置的迭代器。这与使用 gtk_text_buffer_get_iter_at_offset（） 在字符偏移量 0 处获取 iter 相同。
语法
参数
buffer- 一GtkTextBuffer
iter- 初始化迭代器。[输出]
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_tag_table ----

gtk_text_buffer_get_tag_table
获取与此缓冲区关联的 。GtkTextTagTable
语法
参数
buffer- 一GtkTextBuffer
返回
缓冲区的标记表。[无转移]
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_get_text ----

gtk_text_buffer_get_text
返回 [开始、结束]范围内的文本。排除未显示的文本（用设置不可见属性的标记标记的文本），ifinclude_hidden_chars为 FALSE。不包括表示嵌入图像的字符，因此返回字符串中的字节和字符索引与缓冲区中的字节和字符索引不对应。对比度 withgtk_text_buffer_get_slice（）。
语法
参数
buffer- 一GtkTextBuffer
start- 范围的开始
end- 范围的结束
include_hidden_chars- 是否包含不可见文本
返回
已分配的 UTF-8 字符串
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert ----

gtk_text_buffer_insert
在位置迭代器处插入文本的 len 字节。如果 len 是 -1，则文本必须以 nul 结尾，并将插入到其同期中。发出“插入文本”信号;插入实际上发生在信号的默认处理程序中。当插入发生时 iter 无效（因为缓冲区内容更改），但默认信号处理程序会重新验证它以指向插入文本的末尾。
语法
参数
buffer- 一GtkTextBuffer
iter- 缓冲区中的一个位置
text- UTF-8 格式的文本
len- 文本长度（以字节为单位），或 -1
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_at_cursor ----

gtk_text_buffer_insert_at_cursor
只需调用 gtk_text_buffer_insert（），使用当前游标位置作为插入点。
语法
参数
buffer- 一GtkTextBuffer
text- UTF-8 格式的文本
len- 文本长度，以字节为单位
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_child_anchor ----

gtk_text_buffer_insert_child_anchor
在迭代器处将子构件定位点插入到文本缓冲区中。在字符计数中，Theanchor 将被计为一个字符，当以字符串形式获取缓冲区内容时，将由 Unicode ？ 对象替换字符表示。0xFFFC. 请注意，切片？用于将缓冲区的某些部分作为字符串获取的变体包括子锚点的此字符，但 ？text？变体没有。例如，参见gtk_text_buffer_get_slice（） andgtk_text_buffer_get_text（）。Considergtk_text_buffer_create_child_anchor（） 作为此函数的更方便的替代词。缓冲区将添加对锚点的引用，因此您可以在插入后取消引用它。
语法
参数
buffer- 一GtkTextBuffer
iter- 插入锚点的位置
anchor- 一GtkTextChildAnchor
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_interactive ----

gtk_text_buffer_insert_interactive
与 gtk_text_buffer_insert（） 类似，但如果缓冲区中的不可编辑位置，则不会进行插入。通常，如果插入来自用户操作（交互式）.default_editable指示文本的可编辑性，而该文本不会影响应用于其可编辑的标记，则您希望阻止在不可编辑的位置进行插入。通常，gtk_text_view_get_editable（）在这里是合适的。
语法
参数
buffer- 一GtkTextBuffer
iter- 缓冲区中的一个位置
text- 一些 UTF-8 文本
len- 文本长度（以字节为单位），或 -1
default_editable- 缓冲区的默认可编辑性
返回
是否实际插入了文本
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_interactive_at_cursor ----

gtk_text_buffer_insert_interactive_at_cursor
在cursorposition.default_editable调用 gtk_text_buffer_insert_interactive（） 指示文本的可编辑性，该文本不会影响应用于其可编辑的标记。通常，gtk_text_view_get_editable（）在这里是合适的。
语法
参数
buffer- 一GtkTextBuffer
text- UTF-8 格式的文本
len- 文本长度（以字节为单位），或 -1
default_editable- 缓冲区的默认可编辑性
返回
是否实际插入了文本
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_pixbuf ----

gtk_text_buffer_insert_pixbuf
在迭代器处将图像插入到文本缓冲区中。图像将在字符计数中计为一个字符，并且在获取缓冲区内容作为字符串时，将由 Unicode？ 对象替换字符表示。0xFFFC.请注意，用于将缓冲区部分作为字符串获取的“切片”变体包括 pixbufs 的此字符，但 “text”变体没有。例如，参见gtk_text_buffer_get_slice（） andgtk_text_buffer_get_text（）。
语法
参数
buffer- 一GtkTextBuffer
iter- 插入像素虫的位置
pixbuf- 一GdkPixbuf
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_range ----

gtk_text_buffer_insert_range
在开始和结束之间复制文本、标签和像素（开始和结束的顺序无关紧要），并在迭代器处插入副本。用于代替简单地获取/插入文本，因为它保留了simage和标签。如果开始和结束位于与缓冲区不同的缓冲区中，则两个缓冲区必须共享同一个标记表。通过发射insert_text和apply_tag信号来实现，所以期待这些。
语法
参数
buffer- 一GtkTextBuffer
iter- 缓冲区中的一个位置
start- 一个位置GtkTextBuffer
end- 与开始相同的缓冲区中的另一个位置
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_range_interactive ----

gtk_text_buffer_insert_range_interactive
与gtk_text_buffer_insert_range（）相同，但如果插入点不可编辑，则不执行任何操作。default_editable参数指示如果没有标记关闭 iter 影响可编辑性，则文本在迭代器上是否可编辑。通常，结果ofgtk_text_view_get_editable（） 在这里是合适的。
语法
参数
buffer- 一GtkTextBuffer
iter- 缓冲区中的一个位置
start- 一个位置GtkTextBuffer
end- 与开始相同的缓冲区中的另一个位置
default_editable- 缓冲区的默认可编辑性
返回
是否可以在迭代时插入
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_with_tags ----

gtk_text_buffer_insert_with_tags
在迭代时将文本插入缓冲区，将标记列表应用于新插入的文本。最后指定的标记必须为 NULL 才能终止列表。等效于调用gtk_text_buffer_insert（），然后在插入的文本上gtk_text_buffer_apply_tag（）;gtk_text_buffer_insert_with_tags（）只是一个方便的函数。
语法
参数
buffer- 一GtkTextBuffer
iter- 缓冲区中的迭代器
text- UTF-8 文本
len- 文本长度，或 -1
first_tag- 第一个应用于文本的标签
...- 以 NULL 结尾的要应用的标记列表
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_insert_with_tags_by_name ----

gtk_text_buffer_insert_with_tags_by_name
与 gtk_text_buffer_insert_with_tags（） 相同，但允许您传入标记名称而不是标记对象。
语法
参数
buffer- 一GtkTextBuffer
iter- 在缓冲区中的位置
text- UTF-8 文本
len- 文本长度，或 -1
first_tag_name- 要应用于文本的标签的名称
...- 更多标签名称
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_move_mark ----

gtk_text_buffer_move_mark
将标记移动到新位置的位置。发出信号作为移动通知。?mark-set?
语法
参数
buffer- 一GtkTextBuffer
mark- 一GtkTextMark
where- 标记缓冲区的新位置
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_move_mark_by_name ----

gtk_text_buffer_move_mark_by_name
将名为 name 的标记（必须存在）移动到位置。有关详细信息，请参阅 gtk_text_buffer_move_mark（）。
语法
参数
buffer- 一GtkTextBuffer
name- 商标名称
where- 标记的新位置
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_new ----

gtk_text_buffer_new
创建新的文本缓冲区。
语法
参数
table- 一个标签表，或 NULL 创建一个新标签表。[允许-无]
返回
新的文本缓冲区
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_paste_clipboard ----

gtk_text_buffer_paste_clipboard
粘贴剪贴板的内容。？如果override_location为 NULL，则粘贴的文本将插入光标位置，或者如果所选内容不为空，则将替换缓冲区选择。注意：粘贴是异步的，也就是说，我们会要求粘贴数据并返回，在主循环运行后的某个时刻，粘贴数据将入。
语法
参数
buffer- 一GtkTextBuffer
clipboard- 粘贴自GtkClipboard
override_location- 插入粘贴文本的位置，或 NULL。[允许-无]
default_editable- 缓冲区在默认情况下是否可编辑
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_place_cursor ----

gtk_text_buffer_place_cursor
此函数移动 ？插入？和？selection_bound？标记同时。如果您使用gtk_text_buffer_move_mark（）将它们分两步移动到同一位置，您将暂时在旧位置和新位置之间选择 aregion，这可能非常不方便，因为临时选择的区域将强制重新计算内容。此功能将它们作为一个单元移动，可以对其进行优化。
语法
参数
buffer- 一GtkTextBuffer
where- 放置光标的位置
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_register_deserialize_format ----

gtk_text_buffer_register_deserialize_format
此函数注册一个富文本反序列化函数，并将其mime_type与传递的缓冲区一起注册。
语法
参数
buffer- 一GtkTextBuffer
mime_type- 格式的哑剧类型
function- 反序列化函数进行注册
user_data- 函数user_data
user_data_destroy- 不再需要user_datais时要调用的函数
返回
对应于新注册格式的哑剧类型。[无转移]
自 2.10 起GdkAtom
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_register_deserialize_tagset ----

gtk_text_buffer_register_deserialize_tagset
此函数使用传递的缓冲区注册 GTK+ 的内部富文本序列化格式。有关详细信息，Seegtk_text_buffer_register_serialize_tagset（）。
语法
参数
buffer- 一GtkTextBuffer
tagset_name- 一个可选的标签集名称，位于 NULL 上。[允许-无]
返回
对应于新注册格式的哑剧类型。[无转移]
自 2.10 起GdkAtom
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_register_serialize_format ----

gtk_text_buffer_register_serialize_format
此函数注册一个富文本序列化函数以及它mime_type传递的缓冲区。
语法
参数
buffer- 一GtkTextBuffer
mime_type- 格式的哑剧类型
function- 序列化函数进行注册
user_data- 函数user_data
user_data_destroy- 不再需要user_datais时要调用的函数
返回
对应于新注册格式的哑剧类型。[无转移]
自 2.10 起GdkAtom
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_register_serialize_tagset ----

gtk_text_buffer_register_serialize_tagset
此函数使用传递的缓冲区注册 GTK+ 的内部富文本序列化格式。内部格式不符合任何标准的富文本格式，只能在实例之间工作。它能够序列化所有文本缓冲区的标记和嵌入式像素。此函数只是一个包装器 aroundgtk_text_buffer_register_serialize_format（）。用于注册的哑剧类型是“application/x-gtk-text-buffer-rich-text？”，或者？application/x-gtk-text-buffer-rich-text;format=tagset_name？如果atagset_name通过。tagset_name可用于限制将富文本传输到具有兼容标记集的缓冲区，以避免粘贴未知标记。在这里传递 anidentifier ！= NULL 可能是常见的情况，因为 NULL 标签集需要其中的缓冲区来处理任意标签的粘贴。GtkTextBuffer
语法
参数
buffer- 一GtkTextBuffer
tagset_name- 一个可选的标签集名称，位于 NULL 上。[允许-无]
返回
对应于新注册格式的哑剧类型。[无转移]
自 2.10 起GdkAtom
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_remove_all_tags ----

gtk_text_buffer_remove_all_tags
删除开始和结束之间的范围内的所有标记。请注意此功能;它可以删除在与您当前正在编写的代码无关的代码中添加的标记。也就是说，如果您有两个或多个不相关的代码段来添加标记，则使用此函数可能是一个坏主意。
语法
参数
buffer- 一GtkTextBuffer
start- 一个范围边界未标记
end- 其他范围范围未标记
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_remove_selection_clipboard ----

gtk_text_buffer_remove_selection_clipboard
删除添加的 gtk_text_buffer_add_selection_clipboard（）。GtkClipboard
语法
参数
buffer- 一GtkTextBuffer
clipboard- 添加到bufferbygtk_text_buffer_add_selection_clipboard（）GtkClipboard
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_remove_tag ----

gtk_text_buffer_remove_tag
发出 “删除标记？信号。信号的默认处理程序从给定范围内删除所有出现的标记。开始和结束不必按顺序排列。
语法
参数
buffer- 一GtkTextBuffer
tag- 一GtkTextTag
start- 一个范围边界未标记
end- 其他范围范围未标记
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_remove_tag_by_name ----

gtk_text_buffer_remove_tag_by_name
调用缓冲区标记表上的 gtk_text_tag_table_lookup（） 以获取 ，然后调用 gtk_text_buffer_remove_tag（）。GtkTextTag
语法
参数
buffer- 一GtkTextBuffer
name- 名称GtkTextTag
start- 一个范围边界未标记
end- 其他范围范围未标记
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_select_range ----

gtk_text_buffer_select_range
此函数移动 ？插入？和？selection_bound？标记同时。如果您使用gtk_text_buffer_move_mark（）将它们分两步移动，您将暂时选择它们的旧位置和新位置之间的 aregion，这可能非常不方便，因为临时选择的区域将强制重新计算内容。此功能将它们作为一个单元移动，可以对其进行优化。
语法
参数
buffer- 一GtkTextBuffer
ins- 在哪里放置“插入”？马克
bound- 在哪里放置“selection_bound？标记
自 2.4
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_serialize ----

gtk_text_buffer_serialize
此函数以 format 表示的富文本格式序列化开始和结束之间的文本部分。要使用的格式必须事先usinggtk_text_buffer_register_serialize_format（） orgtk_text_buffer_register_serialize_tagset（） 注册。
语法
参数
register_buffer- 格式注册GtkTextBuffer
content_buffer- 序列化GtkTextBuffer
format- 用于序列化的富文本格式
start- 开始序列化的文本块
end- 结束测试块以序列化
length- 序列化数据长度的返回位置。[输出]
返回
序列化数据，编码为格式。[数组长度 = 长度][转移完整]
自 2.10 起
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_set_modified ----

gtk_text_buffer_set_modified
用于跟踪缓冲区自上次保存以来是否已被修改。每当将缓冲区保存到磁盘时，callgtk_text_buffer_set_modified（缓冲区，FALSE）。当缓冲区被修改时，它将自动再次切换到修改后的位。当修改后的位翻转时，缓冲区发出信号。?modified-changed?
语法
参数
buffer- 一GtkTextBuffer
setting- 修改标志设置
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_set_text ----

gtk_text_buffer_set_text
删除缓冲区的当前内容，并改为插入文本。Iflen 为 -1，文本必须以 nul 结尾。文本必须有效 UTF-8。
语法
参数
buffer- 一GtkTextBuffer
text- 要插入的 UTF-8 文本
len- 文本字节的长度
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_unregister_deserialize_format ----

gtk_text_buffer_unregister_deserialize_format
此函数注销以前使用 gtk_text_buffer_register_deserialize_format（） orgtk_text_buffer_register_deserialize_tagset（） 注册的富文本格式。
语法
参数
buffer- 一GtkTextBuffer
format- a 表示已注册的富文本格式。
自 2.10 起GdkAtom
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_buffer_unregister_serialize_format ----

gtk_text_buffer_unregister_serialize_format
此函数注销以前使用 gtk_text_buffer_register_serialize_format（） orgtk_text_buffer_register_serialize_tagset（） 注册的富文本格式
语法
参数
buffer- 一GtkTextBuffer
format- a 表示已注册的富文本格式。
自 2.1 起GdkAtom
另请参见
GtkTextBuffer


------------ KeyGTK3gtk_text_child_anchor_get_deleted ----

gtk_text_child_anchor_get_deleted
确定是否已从缓冲区中删除子锚点。请记住，从缓冲区中删除子锚点时将取消引用，因此，如果您使用planto使用此函数，则需要保留自己的引用（带有g_object_ref（））） ？否则，所有已删除的子锚点也将最终确定。
语法
参数
anchor- 一GtkTextChildAnchor
返回
如果子锚点已从其缓冲区中删除，则为 TRUE
另请参见
GtkTextView


------------ KeyGTK3gtk_text_child_anchor_get_widgets ----

gtk_text_child_anchor_get_widgets
获取锚定在此子锚点上的所有构件的列表。返回的列表应使用 g_list_free（） 释放。
语法
参数
anchor- 一GtkTextChildAnchor
返回
锚定在锚点的小部件列表。[element-type GtkWidget][转移容器]
另请参见
GtkTextView


------------ KeyGTK3gtk_text_child_anchor_new ----

gtk_text_child_anchor_new
创建新的 .通常，您将插入带有gtk_text_buffer_insert_child_anchor（）的a中。要在一个步骤中执行创建和插入，请使用方便函数gtk_text_buffer_create_child_anchor（）。GtkTextChildAnchorGtkTextBuffer
返回
一个新的GtkTextChildAnchor
另请参见
GtkTextView


------------ KeyGTK3gtk_text_iter_assign ----

gtk_text_iter_assign
将 other 的值分配给迭代器。此函数在应用程序中没有用，因为迭代器可以使用 GtkTextIter i = j; 进行赋值。该函数由语言绑定使用。
语法
参数
iter- 一GtkTextIter
other- 另一个
自3.2GtkTextIter
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_char ----

gtk_text_iter_backward_char
向后移动一个字符偏移量。如果移动是可能的，则返回 TRUE;如果 iter 是缓冲区中的第一个（字符偏移集 0），gtk_text_iter_backward_char（） 在写入循环时返回 FALSE。
语法
参数
iter- 迭代器
返回
移动是否可能
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_chars ----

gtk_text_iter_backward_chars
如果可能，向后移动计数字符（如果计数将移动到缓冲区的开头或结尾，则移动到缓冲区的开头或结尾）。返回值指示迭代器是否移动到可取消引用的位置;如果迭代器没有移动，或者移动到结束迭代器上，则返回 FALSE。如果 count 为 0，则该函数不执行任何操作并返回 FALSE。
语法
参数
iter- 迭代器
count- 要移动的字符数
返回
是否被移动并且是可取消引用的
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_cursor_position ----

gtk_text_iter_backward_cursor_position
像gtk_text_iter_forward_cursor_position（），但向后移动。
语法
参数
iter- 一GtkTextIter
返回
如果我们搬家，则为 TRUE
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_cursor_positions ----

gtk_text_iter_backward_cursor_positions
向上移动以对光标位置进行计数。有关详细信息，Seegtk_text_iter_forward_cursor_position（）。
语法
参数
iter- 一GtkTextIter
count- 移动位置的数量
返回
TRUE，如果我们移动并且新位置是可取消参考的
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_find_char ----

gtk_text_iter_backward_find_char
与gtk_text_iter_forward_find_char（）相同，但从迭代器向后退。
语法
参数
iter- 一GtkTextIter
pred- 要在每个字符上调用的函数。[范围调用]
user_data- 用于捕食的用户数据
limit- 搜索限制，或空为无。[允许-无]
返回
是否找到匹配项
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_line ----

gtk_text_iter_backward_line
将 iter 移动到上一行的开头。返回 TRUE 如果可以移动;即，如果 iter 位于字符偏移量 0 处，则此函数返回 FALSE。因此，如果 iter 已经位于第 0 行，但不在该行的开头，则 iter 将捕捉到该行的开头，并且函数返回 TRUE。（请注意，这意味着在调用此函数的循环中，如果第一次迭代位于第 0 行，则行号在每次迭代时都不会更改。
语法
参数
iter- 迭代器
返回
是否被移动
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_lines ----

gtk_text_iter_backward_lines
如果可能，向后移动计数行（如果计数将移动到缓冲区的起点或终点，则移动到缓冲区的起点或终点）。返回值指示迭代器是否移动到可取消引用的位置;如果迭代器没有移动，或者移动到结束迭代器上，则返回 FALSE。如果 count 为 0，则该函数不执行任何操作并返回 FALSE。如果计数为负数，则向前移动 0 - 计数行。
语法
参数
iter- 一GtkTextIter
count- 向后移动的行数
返回
是否被移动并且是可取消引用的
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_search ----

gtk_text_iter_backward_search
与 gtk_text_iter_forward_search（） 相同，但移动backward.match_end永远不会设置为位于迭代器之后，即使存在可能的match_start之前或迭代器。GtkTextIter
语法
参数
iter- 搜索开始的地方GtkTextIter
str- 搜索字符串
flags- 影响搜索的标志的位掩码
match_start- 返回匹配开始的位置，或 NULL。[输出调用方分配][允许-无]
match_end- 返回匹配结束的位置，或 NULL。[输出调用方分配][允许-无]
limit- 最后一个可能的match_start的位置，或 NULL 表示缓冲区的开始。[允许-无]
返回
是否找到匹配项
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_sentence_start ----

gtk_text_iter_backward_sentence_start
向后移动到上一句开头;如果它已经在句子的开头，则向后移动到下一个句子。句子边界由Pango确定，对于几乎任何语言都应该是正确的（如果不是，正确的修复方法是Pango文本边界算法）。
语法
参数
iter- 一GtkTextIter
返回
TRUE 如果迭代移动并且不是结束迭代器，则为 TRUE
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_sentence_starts ----

gtk_text_iter_backward_sentence_starts
调用gtk_text_iter_backward_sentence_start（） 直到计数次数，或直到它返回 FALSE。如果计数为负数，则向前移动而不是向后移动。
语法
参数
iter- 一GtkTextIter
count- 要移动的句子数
返回
TRUE 如果迭代移动并且不是结束迭代器，则为 TRUE
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_to_tag_toggle ----

gtk_text_iter_backward_to_tag_toggle
向后移动到标记的下一个开关（打开或关闭），或移动到任何标记的下一个开关 iftag 为 NULL。如果未找到匹配的标记开关，则返回 FALSE，否则返回 TRUE。不返回在迭代器处找到的切换开关，只在 iter 之前切换。将迭代设置为切换的位置，或者缓冲区的开始位置（如果未找到切换）。GtkTextTag
语法
参数
iter- 一GtkTextIter
tag- a 或 NULL。[允许-无]GtkTextTag
返回
我们是否在 iter 之前找到了标签切换
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_visible_cursor_position ----

gtk_text_iter_backward_visible_cursor_position
将迭代器向前移动到上一个可见光标位置。有关详细信息，请参见 gtk_text_iter_backward_cursor_position（）。
语法
参数
iter- 一GtkTextIter
返回
true，如果我们移动并且新仓位是可取消参考的
，因为 2.4
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_visible_cursor_positions ----

gtk_text_iter_backward_visible_cursor_positions
向上移动以对可见光标位置进行计数。有关详细信息，Seegtk_text_iter_backward_cursor_position（）。
语法
参数
iter- 一GtkTextIter
count- 移动位置的数量
返回
true，如果我们移动并且新仓位是可取消参考的
，因为 2.4
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_visible_line ----

gtk_text_iter_backward_visible_line
将迭代器移动到上一条可见线的开头。返回 TRUE 如果可以移动;即，如果 iter 位于字符偏移量 0 处，则此函数返回 FALSE。因此，如果 iter 已经位于第 0 行，但不在该行的开头，则 iter 将捕捉到该行的开头，并且函数返回 TRUE。（请注意，这意味着在调用此函数的循环中，如果第一次迭代位于第 0 行，则行号在每次迭代时都不会更改。
语法
参数
iter- 迭代器
返回
是否自 2.8 起迭代
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_visible_lines ----

gtk_text_iter_backward_visible_lines
如果可能，向后移动对可见线进行计数（如果计数将移动到缓冲区的起点或终点，则移动到缓冲区的起点或终点）。返回值指示迭代器是否移动到可取消引用的位置;如果迭代器没有移动，或者移动到结束迭代器上，则返回 FALSE。如果 count 为 0，则该函数不执行任何操作并返回 FALSE。如果计数为负数，则向前移动 0 - 计数行。
语法
参数
iter- 一GtkTextIter
count- 向后移动的行数
返回
自 2.8 起是否迭代且可
取消引用
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_visible_word_start ----

gtk_text_iter_backward_visible_word_start
向后移动到上一个可见单词开头。（如果它当前位于单词开头，则向后移动到该单词之后的下一个单词。分词由Pango确定，并且对于几乎任何语言都应该是正确的（如果不是，正确的修复方法是Pango分词算法）。
语法
参数
iter- 一GtkTextIter
返回
TRUE 如果迭代移动并且不是自 2.4 以来的结束迭代器，
则为 TRUE
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_visible_word_starts ----

gtk_text_iter_backward_visible_word_starts
调用gtk_text_iter_backward_visible_word_start（） 直到计数次数。
语法
参数
iter- 一GtkTextIter
count- 移动次数
返回
TRUE 如果迭代移动并且不是自 2.4 以来的结束迭代器，
则为 TRUE
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_word_start ----

gtk_text_iter_backward_word_start
向后移动到上一个单词“开始”。（如果它当前位于 aword start 上，则向后移动到该单词之后的下一个。分词由Pango确定，并且对于几乎任何语言都应该是正确的（如果不是，正确的修复方法是Pango分词算法）。
语法
参数
iter- 一GtkTextIter
返回
TRUE 如果迭代移动并且不是结束迭代器，则为 TRUE
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_backward_word_starts ----

gtk_text_iter_backward_word_starts
调用gtk_text_iter_backward_word_start（） 到计数次数。
语法
参数
iter- 一GtkTextIter
count- 移动次数
返回
TRUE 如果迭代移动并且不是结束迭代器，则为 TRUE
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_begins_tag ----

gtk_text_iter_begins_tag
如果此时标记已打开，则返回 TRUE。如果 tagis NULL，则返回 TRUE（如果此时已打开任何标记）。请注意，如果 gtk_text_iter_begins_tag（） 返回 TRUE，则表示 iter 位于标记范围的开头，并且 iter 处的字符位于标记的范围内。换句话说，与gtk_text_iter_ends_tag（）不同，如果gtk_text_iter_begins_tag（）返回TRUE，gtk_text_iter_has_tag（）也将为同一参数返回TRUE。
语法
参数
iter- 迭代器
tag- a 或 NULL。[允许-无]GtkTextTag
返回
是否使用标记标记的范围的开头
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_can_insert ----

gtk_text_iter_can_insert
考虑缓冲区的默认可编辑性以及影响可编辑性的标记，确定在 iter 处插入的文本是否可编辑。如果在 iter 处插入的文本是可编辑的，则应允许用户在 iter.gtk_text_buffer_insert_interactive（） 处插入文本（） 使用此函数来决定是否允许在给定位置插入。
语法
参数
iter- 迭代器
default_editability- 如果文本默认可编辑，则为 TRUE
返回
在迭代时插入的文本是否可编辑
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_compare ----

gtk_text_iter_compare
一个 qsort（） 样式的函数，如果 lhs 小于 rhs，则返回负值;如果 lhs 大于 rhs，则返回正值;如果它们相等，则返回 0。排序是按字符偏移顺序排列的，即缓冲区中的第一个字符小于缓冲区中的第二个字符。
语法
参数
lhs- 一GtkTextIter
rhs- 另一个GtkTextIter
返回
-1 如果 lhsis 小于 rhs，则为 1 如果 lhsis 大于，则为 0（如果它们相等）
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_copy ----

gtk_text_iter_copy
创建迭代器的动态分配副本。此函数在应用程序中没有用，因为迭代器可以使用单纯赋值（GtkTextIter i = j;）进行复制。该函数由语言绑定使用。
语法
参数
iter- 迭代器
返回
迭代器的副本，带有gtk_text_iter_free（）
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_editable ----

gtk_text_iter_editable
返回迭代器处的字符是否在文本的可编辑区域内。不可编辑的文本是否被锁定？并且用户无法通过 进行更改。这个函数只是围绕gtk_text_iter_get_attributes（）的便利包装。如果对此文本应用的任何标记都不会影响可编辑性，则将返回default_setting。您不想使用此函数来决定是否可以在迭代器上插入文本，因为对于插入，您不想知道迭代器处的字符是否在可编辑范围内，而是要知道在iter处插入的新字符是否在可编辑范围内。使用 gtk_text_iter_can_insert（） 来处理这种情况。GtkTextView
语法
参数
iter- 迭代器
default_setting- 如果文本默认可编辑，则为 TRUE
返回
是否在可编辑范围内
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_ends_line ----

gtk_text_iter_ends_line
如果 iter 指向某行的段落定长符字符的开头（分隔符可以是换行符、回车符、回车符后跟换行符或 Unicode 段落分隔符），则返回 TRUE。请注意，指向 \r\n 对的 \n 的迭代器将不计为行的末尾，该行在 \r 之前结束。结束迭代器被考虑在行的末尾，即使那里有无参数分隔符字符。
语法
参数
iter- 迭代器
返回
是否在行的末尾
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_ends_sentence ----

gtk_text_iter_ends_sentence
确定 iter 是否结束句子。句子边界由Pango决定，对于几乎任何语言都应该是正确的（如果不是，正确的修复方法是Pango文本边界算法）。
语法
参数
iter- 一GtkTextIter
返回
如果 iteris 位于句子的末尾，则为 TRUE。
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_ends_tag ----

gtk_text_iter_ends_tag
如果此时标记已关闭，则返回 TRUE。如果 tagis NULL，则返回 TRUE（如果此时有任何标记处于关闭状态）。请注意，如果 gtk_text_iter_ends_tag（） 返回 TRUE，则表示 iter 位于标记范围的末尾，但字符 at iter 在标记范围之外。换句话说，与gtk_text_iter_begins_tag（）不同，如果gtk_text_iter_ends_tag（）返回TRUE，gtk_text_iter_has_tag（）将为相同的参数返回FALSE。
语法
参数
iter- 迭代器
tag- a 或 NULL。[允许-无]GtkTextTag
返回
是否包含标记有标记的范围的末尾
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_ends_word ----

gtk_text_iter_ends_word
确定 iter 是否结束自然语言单词。分词由Pango确定，并且对于几乎任何语言都应该是正确的（如果不是，正确的修复方法是Pango分词算法）。
语法
参数
iter- 一GtkTextIter
返回
TRUE 如果 iteris 位于单词的末尾
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_equal ----

gtk_text_iter_equal
使用最快的可能机制测试两个迭代器是否相等。这个功能非常快;您可以期望它的性能比例如获取每个迭代器的字符偏移量并自己比较偏移量更好。另外，它thangtk_text_iter_compare（）要快一些。
语法
参数
lhs- 一GtkTextIter
rhs- 另一个GtkTextIter
返回
如果迭代器指向缓冲区中的同一位置，则为 TRUE
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_char ----

gtk_text_iter_forward_char
将迭代器向前移动一个字符偏移量。请注意，嵌入在缓冲区中的图像占用 1 个字符槽，如果缓冲区中有图像，sogtk_text_iter_forward_char（） 实际上可能会移动到图像上而不是字符上。如果 iter 是结束迭代器或它之前的一个字符，则 iter 现在将指向结束迭代器，并且 gtk_text_iter_forward_char（） 在写入循环时返回 FALSE forconience。
语法
参数
iter- 迭代器
返回
是否被移动并且是可取消引用的
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_chars ----

gtk_text_iter_forward_chars
如果可能，则移动计数字符数（如果计数将移动到缓冲区的开始或结束，则移动到缓冲区的开始或结束）。返回值指示新位置 ofiter 是否与其原始位置不同，并且可取消引用（缓冲区中的最后一个迭代器不可取消引用）。如果 countis 0，则该函数不执行任何操作并返回 FALSE。
语法
参数
iter- 迭代器
count- 要移动的字符数，可能为负数
返回
是否被移动并且是可取消引用的
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_cursor_position ----

gtk_text_iter_forward_cursor_position
将迭代器向前移动单个光标位置。光标位置是（不出所料）光标可以出现的位置。也许令人惊讶的是，在所有字符之间可能没有游标位置。欧洲语言最常见的例子是回车/换行序列。对于某些 Unicode 字符，相当于说字母 ？a？带有重音符号的字符将表示为两个字符，首先是字母，然后是导致重音被呈现的“组合标记”;所以光标不能在这两个字符之间。另请参见 andpango_break（） 函数。PangoLogAttr
语法
参数
iter- 一GtkTextIter
返回
TRUE，如果我们移动并且新位置是可取消参考的
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_cursor_positions ----

gtk_text_iter_forward_cursor_positions
向上移动以对光标位置进行计数。有关详细信息，Seegtk_text_iter_forward_cursor_position（）。
语法
参数
iter- 一GtkTextIter
count- 移动位置的数量
返回
TRUE，如果我们移动并且新位置是可取消参考的
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_find_char ----

gtk_text_iter_forward_find_char
推进迭代器，在每个字符上调用pred。Ifpred 返回 TRUE，返回 TRUE 并停止扫描。如果 pred 从不返回 TRUE，则将 iter 设置为限制 iflimit 为 non-NULL，否则设置为结束迭代器。
语法
参数
iter- 一GtkTextIter
pred- 要在每个字符上调用的函数。[范围调用]
user_data- 用于捕食的用户数据
limit- 搜索限制，或空为无。[允许-无]
返回
是否找到匹配项
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_line ----

gtk_text_iter_forward_line
将 iter 移动到下一行的开头。如果迭代器已位于缓冲区的最后一行上，则 将迭代器移动到当前行的末尾。如果在操作之后，迭代器位于缓冲区的末尾且不可推断，则返回 FALSE。否则，返回 TRUE。
语法
参数
iter- 迭代器
返回
是否可以取消引用
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_lines ----

gtk_text_iter_forward_lines
如果可能，向前移动计数行（如果计数将移动到缓冲区的起点或终点，则移动到缓冲区的起点或终点）。返回值指示迭代器是否移动到可取消引用的位置;如果迭代器没有移动，或者移动到结束迭代器上，则返回 FALSE。如果 count 为 0，则该函数不执行任何操作并返回 FALSE。如果计数为负数，则向后移动 0 - 计数行。
语法
参数
iter- 一GtkTextIter
count- 前进的行数
返回
是否被移动并且是可取消引用的
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_search ----

gtk_text_iter_forward_search
向前搜索 str。任何匹配项都由settingmatch_start返回到匹配项的第一个字符，match_end到匹配后的第一个字符。搜索不会继续过去限制。请注意，搜索是线性或 O（n） 操作，因此您可能希望使用 limit 来避免锁定 UI，largebuffers.match_start永远不会设置为 iter 之前的定位，即使有一个可能的match_end在迭代之后或迭代时。GtkTextIter
语法
参数
iter- 开始搜索
str- 搜索字符串
flags- 影响搜索方式的标志
match_start- 返回匹配开始的位置，或 NULL。[输出调用方分配][允许-无]
match_end- 返回匹配结束的位置，或 NULL。[输出调用方分配][允许-无]
limit- 最后一个可能的match_end的位置，或 NULL 表示缓冲区的末尾。[允许-无]
返回
是否找到匹配项
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_sentence_end ----

gtk_text_iter_forward_sentence_end
前进到下一句末尾。（如果 iter 位于句子的末尾，则移动到句子的下一个末尾。句子边界由Pango确定，对于几乎任何语言都应该是正确的（如果不是，正确的修复方法是Pango文本边界算法）。
语法
参数
iter- 一GtkTextIter
返回
TRUE 如果迭代移动并且不是结束迭代器，则为 TRUE
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_sentence_ends ----

gtk_text_iter_forward_sentence_ends
调用gtk_text_iter_forward_sentence_end（） 计数次数（或 untilgtk_text_iter_forward_sentence_end（） 返回 FALSE）。如果计数不均衡，则向后移动而不是向前移动。
语法
参数
iter- 一GtkTextIter
count- 要移动的句子数
返回
TRUE 如果迭代移动并且不是结束迭代器，则为 TRUE
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_to_end ----

gtk_text_iter_forward_to_end
将 iter 向前移动到 ？end 迭代器，？它指向缓冲区中的最后一个无效字符。在末端迭代器上调用的 gtk_text_iter_get_char（） 返回 0，这对于编写循环很方便。
语法
参数
iter- 一GtkTextIter
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_to_line_end ----

gtk_text_iter_forward_to_line_end
将迭代器移动到段落分隔符字符，这些字符可以是换行符、回车符、按顺序排列的回车符/换行符或 Unicode 段落分隔符字符。如果迭代器已位于段落分隔符字符处，则移动到下一行的段落分隔符字符。如果 iter 位于缓冲区中的最后一行（不以段落分隔符结尾），则移动到结束迭代器（最后一行的末尾），并返回 FALSE。
语法
参数
iter- 一GtkTextIter
返回
TRUE，如果我们移动并且新位置不是结束迭代器
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_to_tag_toggle ----

gtk_text_iter_forward_to_tag_toggle
向前移动到标记的下一个切换开关（打开或关闭），或移动到任何标记的下一个开关（如果标记为 NULL）。如果未找到匹配的标记开关，则返回 FALSE，否则返回 TRUE。不返回在迭代器处找到的切换开关，只在迭代器之后切换。将 iter 设置为切换的位置，或设置为缓冲区的末尾（如果未找到切换）。GtkTextTag
语法
参数
iter- 一GtkTextIter
tag- a 或 NULL。[允许-无]GtkTextTag
返回
我们是否在迭代器后找到标签切换
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_visible_cursor_position ----

gtk_text_iter_forward_visible_cursor_position
将迭代器向前移动到下一个可见光标位置。有关详细信息，请参见 gtk_text_iter_forward_cursor_position（）。
语法
参数
iter- 一GtkTextIter
返回
true，如果我们移动并且新仓位是可取消参考的
，因为 2.4
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_visible_cursor_positions ----

gtk_text_iter_forward_visible_cursor_positions
向上移动以对可见光标位置进行计数。有关详细信息，Seegtk_text_iter_forward_cursor_position（）。
语法
参数
iter- 一GtkTextIter
count- 移动位置的数量
返回
true，如果我们移动并且新仓位是可取消参考的
，因为 2.4
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_visible_line ----

gtk_text_iter_forward_visible_line
将 iter 移动到下一条可见线的开头。如果有下一行要移动到，则返回 TRUE;如果它只是移动到缓冲区的末尾并且现在不可取消引用，或者如果它在缓冲区的末尾 wasalready，则返回 FALSE。
语法
参数
iter- 迭代器
返回
自 2.8
以来是否可以取消引用 iter
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_visible_lines ----

gtk_text_iter_forward_visible_lines
如果可能，向前移动计数可见行（如果计数将移动到缓冲区的开始或结束，则移动到缓冲区的开始或结束）。返回值指示迭代器是否移动到可取消引用的位置;如果迭代器没有移动，或者移动到结束迭代器上，则返回 FALSE。如果 count 为 0，则该函数不执行任何操作并返回 FALSE。如果计数为负数，则向后移动 0 - 计数行。
语法
参数
iter- 一GtkTextIter
count- 前进的行数
返回
自 2.8 起是否迭代且可
取消引用
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_visible_word_end ----

gtk_text_iter_forward_visible_word_end
向前移动到下一个可见的单词末尾。（如果它当前位于单词末尾，则转到该之后的下一个。分词由Pango确定，并且对于几乎任何语言都应该是正确的（如果不是，正确的修复方法是Pango分词算法）。
语法
参数
iter- 一GtkTextIter
返回
TRUE 如果迭代移动并且不是自 2.4 以来的结束迭代器，
则为 TRUE
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_visible_word_ends ----

gtk_text_iter_forward_visible_word_ends
调用gtk_text_iter_forward_visible_word_end（） 直到计数次数。
语法
参数
iter- 一GtkTextIter
count- 移动次数
返回
TRUE 如果迭代移动并且不是自 2.4 以来的结束迭代器，
则为 TRUE
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_word_end ----

gtk_text_iter_forward_word_end
前进到下一个单词末尾。（如果它当前位于单词末尾，则转到该之后的下一个。分词由Pango确定，并且对于几乎任何语言都应该是正确的（如果不是，正确的修复方法是Pango分词算法）。
语法
参数
iter- 一GtkTextIter
返回
TRUE 如果迭代移动并且不是结束迭代器，则为 TRUE
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_forward_word_ends ----

gtk_text_iter_forward_word_ends
调用gtk_text_iter_forward_word_end（） 直到计数时间。
语法
参数
iter- 一GtkTextIter
count- 移动次数
返回
TRUE 如果迭代移动并且不是结束迭代器，则为 TRUE
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_free ----

gtk_text_iter_free
释放在堆上分配的迭代器。此函数旨在用于语言绑定，并且对于应用程序特别有用，因为迭代器可以简单地在堆栈上分配。
语法
参数
iter- 动态分配的迭代器
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_attributes ----

gtk_text_iter_get_attributes
计算文本中应用于此点的任何标记的效果。如果没有标记生效，则应将 values 参数初始化为要使用的默认值设置。您通常会从gtk_text_view_get_default_attributes（）中获取默认值，.gtk_text_iter_get_attributes（）将修改值，应用迭代器中存在的任何标记的有效性。如果任何标签影响值，该函数返回 TRUE。
语法
参数
iter- 迭代器
values- a 要填写。GtkTextAttributes
返回
如果值已修改，则为 TRUE
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_buffer ----

gtk_text_iter_get_buffer
返回与此迭代器关联的值。GtkTextBuffer
语法
参数
iter- 迭代器
返回
缓冲区。[无转移]
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_bytes_in_line ----

gtk_text_iter_get_bytes_in_line
返回包含迭代器的行中的字节数，包括段落分隔符。
语法
参数
iter- 迭代器
返回
行中的字节数
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_char ----

gtk_text_iter_get_char
返回此迭代器中的 Unicode 字符。（等效于C++迭代器上的操作器*。如果此迭代器中的元素是非字符元素，例如嵌入在缓冲区中的图像，则Unicode ？返回字符0xFFFC。如果在结束迭代器上调用，则返回零;零 不是有效的 Unicode 字符。所以你可以写一个循环，当gtk_text_iter_get_char（）返回0时结束。
语法
参数
iter- 迭代器
返回
Unicode 字符，如果 iteris 不可取消引用，则为 0
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_chars_in_line ----

gtk_text_iter_get_chars_in_line
返回包含 iter 的行中的字符数，包括段落分隔符。
语法
参数
iter- 迭代器
返回
行中的字符数
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_child_anchor ----

gtk_text_iter_get_child_anchor
如果 iter 的位置包含子锚点，则返回 theanchor（不添加新的引用计数）。否则，将返回 NULL。
语法
参数
iter- 迭代器
返回
[无转移]
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_language ----

gtk_text_iter_get_language
gtk_text_iter_get_attributes（） 的便利包装器，它在 iter 上返回有效的语言。如果没有影响语言的标记应用于迭代器，则返回值与该ofgtk_get_default_language（）相同。
语法
参数
iter- 迭代器
返回
迭代时有效的语言
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_line ----

gtk_text_iter_get_line
返回包含迭代器的行号。ina 行的编号以 0 开头，表示缓冲区中的第一行。GtkTextBuffer
语法
参数
iter- 迭代器
返回
行号
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_line_index ----

gtk_text_iter_get_line_index
返回迭代器的字节索引，从换行符终止行的开头开始计数。请记住，在UTF-8中对文本进行编码，并且字符可能需要可变数量的字节来表示。GtkTextBuffer
语法
参数
iter- 迭代器
返回
距行首的距离，以字节为单位
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_line_offset ----

gtk_text_iter_get_line_offset
返回迭代器的字符偏移量，从换行符终止行的开头开始计数。行中的第一个字符的偏移量为 0。
语法
参数
iter- 迭代器
返回
从行的起点偏移
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_marks ----

gtk_text_iter_get_marks
返回此位置的所有列表。因为标记是不可迭代的（它们不占用缓冲区中的任何“空间”，它们只是可迭代位置之间的标记），因此多个标记可以存在于同一位置。返回的列表不按任何有意义的顺序排列。GtkTextMark
语法
参数
iter- 迭代器
返回
的列表。[元素类型 GtkTextMark][转移容器]GtkTextMark
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_offset ----

gtk_text_iter_get_offset
返回迭代器的字符偏移量。中的每个字符都有一个偏移量，从 0 开始表示缓冲区中的第一个字符。使用 gtk_text_buffer_get_iter_at_offset（） 将非偏置集转换回迭代器。GtkTextBuffer
语法
参数
iter- 迭代器
返回
字符偏移量
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_pixbuf ----

gtk_text_iter_get_pixbuf
如果 iter 处的元素是 pixbuf，则返回 pixbuf（不添加新的引用计数）。否则，将返回 NULL。
语法
参数
iter- 迭代器
返回
[无转移]
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_slice ----

gtk_text_iter_get_slice
返回给定区域中的文本。“切片”是以 UTF-8 格式编码的字符数组，包括缓冲区中可迭代非字符元素（如图像）的 Unicode 未知字符0xFFFC。由于图像是在切片中编码的，因此返回数组中的字节和字符偏移量将对应于文本缓冲区中的字节偏移集。请注意，0xFFFC也可能出现在普通文本中，因此它不是缓冲区中 pixbuf orwidget 的可靠指标。
语法
参数
start- 范围开始时的迭代器
end- 范围末尾的迭代器
返回
缓冲区中的文本切片
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_tags ----

gtk_text_iter_get_tags
按优先级升序返回应用于 iter 的标记列表（最高优先级标记位于最后）。列表中没有添加引用，但您必须释放列表。GtkTextTag
语法
参数
iter- 一GtkTextIter
返回
的列表。[元素类型 GtkTextTag][转移容器]GtkTextTag
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_text ----

gtk_text_iter_get_text
返回给定范围内的文本。如果范围包含非文本元素（如图像），则返回的字符串中的字符和字节偏移集将与缓冲区中的字符和字节偏移量不对应。如果希望偏移量相对应，seegtk_text_iter_get_slice（）。
语法
参数
start- 范围开始时的迭代器
end- 范围末尾的迭代器
返回
缓冲区中的字符数组
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_toggled_tags ----

gtk_text_iter_get_toggled_tags
返回此时已打开或关闭的那些的列表。（如果toggled_on为 TRUE，则列表包含切换的标记。如果在迭代器上打开标记，则 iter 后面的一些非空字符范围会应用该标记。Ifa 标记处于关闭状态，则迭代后面的某些非空范围未应用该标记。GtkTextTag
语法
参数
iter- 迭代器
toggled_on- TRUE可以获得切换标签
返回
标记之间切换。[元素类型 GtkTextTag][转移容器]
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_visible_line_index ----

gtk_text_iter_get_visible_line_index
返回从行首到给定迭代器的字节数，不计算由于带有 “不可见”的标记而不可见的字节数。旗帜切换。
语法
参数
iter- 一GtkTextIter
返回
迭代的字节索引相对于行的开头
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_visible_line_offset ----

gtk_text_iter_get_visible_line_offset
返回从行首到给定迭代器的字符偏移量，不计算由于带有 “不可见” 的标记而不可见的字符。旗帜切换。
语法
参数
iter- 一GtkTextIter
返回
从行首开始的可见字符偏移
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_visible_slice ----

gtk_text_iter_get_visible_slice
与gtk_text_iter_get_slice（）一样，但不可见文本不包括在内。不可见的文本通常是不可见的，因为与？不可见的？已打开的属性已应用于它。GtkTextTag
语法
参数
start- 范围开始时的迭代器
end- 范围末尾的迭代器
返回
缓冲区中的文本切片
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_get_visible_text ----

gtk_text_iter_get_visible_text
与gtk_text_iter_get_text（）一样，但不可见文本不包括在内。不可见的文本通常是不可见的，因为与？不可见的？已打开的属性已应用于它。GtkTextTag
语法
参数
start- 范围开始时的迭代器
end- 范围末尾的迭代器
返回
包含区域中可见文本的字符串
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_has_tag ----

gtk_text_iter_has_tag
如果 iter 指向的字符是带标记标记的范围的一部分，则返回 TRUE。另请参见 gtk_text_iter_begins_tag（） 和 gtk_text_iter_ends_tag（）。
语法
参数
iter- 迭代器
tag- 一GtkTextTag
返回
是否用标签标记
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_inside_sentence ----

gtk_text_iter_inside_sentence
确定 iter 是否在句子内（而不是在两个句子之间，例如在句点之后和下一个句子的第一个字母之前）。句子边界由Pango确定，并且对于几乎任何语言都应该是正确的（如果不是，则正确的修复将是Pango文本边界算法）。
语法
参数
iter- 一GtkTextIter
返回
如果 iteris 在句子中，则为 TRUE。
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_inside_word ----

gtk_text_iter_inside_word
确定它是否在自然语言单词内（反对在某个空格内说）。分词由Pango确定，并且对于几乎任何语言都应该是正确的（如果不是，则正确的修复将是Pango分词算法）。
语法
参数
iter- 一GtkTextIter
返回
TRUE 如果 iteris 在单词内
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_in_range ----

gtk_text_iter_in_range
检查 iter 是否落在 [开始、结束）的范围内。开始和结束必须按升序排列。
语法
参数
iter- 一GtkTextIter
start- 范围的开始
end- 范围结束
返回
如果 iteris 在范围内，则为 TRUE
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_is_cursor_position ----

gtk_text_iter_is_cursor_position
有关游标位置的详细信息，请参阅 gtk_text_iter_forward_cursor_position（） 或 orpango_break（）。PangoLogAttr
语法
参数
iter- 一GtkTextIter
返回
如果光标可以放在迭代器处，则为 TRUE
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_is_end ----

gtk_text_iter_is_end
如果 iter 是结束迭代器，即缓冲区中最后可忽略迭代器的一个，则返回 TRUE。gtk_text_iter_is_end（） 是检查迭代器是否为终结器的最有效方法。
语法
参数
iter- 迭代器
返回
是否迭代结束迭代器
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_is_start ----

gtk_text_iter_is_start
如果 iter 是缓冲区中的第一个迭代器，则返回 TRUE，如果 iter 的字符偏移量为 0。
语法
参数
iter- 迭代器
返回
是否在缓冲区中包含第一个
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_order ----

gtk_text_iter_order
交换缓冲区中第一个和第二个的值（如果第二个在前面出现第一个）。也就是说，确保第一和第二按顺序排列。大多数采用范围的文本缓冲函数都会代表您自动调用它，因此在这些情况下，没有真正的理由自己调用它。有一些例外，例如gtk_text_iter_in_range（），需要预先排序的范围。
语法
参数
first- 一GtkTextIter
second- 另一个 [br \=“”GtkTextIter
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_set_line ----

gtk_text_iter_set_line
将迭代器迭代器迭代器移动到line_number行的开头。Ifline_number为负数或大于缓冲区中的行数，则将迭代器移动到缓冲区中最后一行的开头。
语法
参数
iter- 一GtkTextIter
line_number- 行号（从0开始计数）
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_set_line_index ----

gtk_text_iter_set_line_index
与 gtk_text_iter_set_line_offset（） 相同，但适用于 abyte 索引。给定的字节索引必须位于字符的开头，它不能位于 UTF-8 编码字符的中间。
语法
参数
iter- 一GtkTextIter
byte_on_line- 相对于迭代器当前行的开始的字节索引
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_set_line_offset ----

gtk_text_iter_set_line_offset
在一行内移动 iter，以新字符（非字节）偏移量移动。给定的字符偏移量必须小于行中的字符数;如果相等，则迭代移动到下一行的开头。Seegtk_text_iter_set_line_index（） 如果您使用的是字节索引而不是字符偏移量。
语法
参数
iter- 一GtkTextIter
char_on_line- 相对于迭代器当前行的开头的字符偏移量
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_set_offset ----

gtk_text_iter_set_offset
将 iter 设置为指向char_offset。char_offset从整个文本缓冲区的开头开始计数，从 0 开始。
语法
参数
iter- 一GtkTextIter
char_offset- 字符号
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_set_visible_line_index ----

gtk_text_iter_set_visible_line_index
与gtk_text_iter_set_line_index（）一样，但索引以可见字节为单位，即带有使其不可见的标记的文本不计入索引中。
语法
参数
iter- 一GtkTextIter
byte_on_line- 一个字节索引
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_set_visible_line_offset ----

gtk_text_iter_set_visible_line_offset
与gtk_text_iter_set_line_offset（）一样，但偏移量位于可见字符中，即带有使其不可见的标记的文本不计入偏移量中。
语法
参数
iter- 一GtkTextIter
char_on_line- 字符偏移量
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_starts_line ----

gtk_text_iter_starts_line
如果 iter 开始一个段落，即如果 gtk_text_iter_get_line_offset（） 将返回 0，则返回 TRUE。但是此函数可能thangtk_text_iter_get_line_offset（） 更有效，因为它不必计算偏移量，只需查看它是否为 0。
语法
参数
iter- 迭代器
返回
是否迭代成为一条线
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_starts_sentence ----

gtk_text_iter_starts_sentence
确定 iter 是否开始一个句子。句子边界由Pango决定，对于几乎任何语言都应该是正确的（如果不是，正确的修复方法是Pango文本边界算法）。
语法
参数
iter- 一GtkTextIter
返回
如果 iteris 位于句子的开头，则为 TRUE。
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_starts_word ----

gtk_text_iter_starts_word
确定 iter 是否以自然语言单词开头。分词由Pango确定，对于几乎任何语言都应该是正确的（如果不是，正确的修复方法是Pango分词算法）。
语法
参数
iter- 一GtkTextIter
返回
TRUE，如果 iteris 位于单词的开头
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_iter_toggles_tag ----

gtk_text_iter_toggles_tag
这相当于 （gtk_text_iter_begins_tag（） ||gtk_text_iter_ends_tag（）），即它告诉您应用了带有标签的范围是在迭代器处开始还是结束。
语法
参数
iter- 迭代器
tag- a 或 NULL。[允许-无]GtkTextTag
返回
tagis 是否在 iter 上打开或关闭
另请参见
GtkTextIter


------------ KeyGTK3gtk_text_mark_get_buffer ----

gtk_text_mark_get_buffer
获取此标记位于其中的缓冲区，如果删除标记，则获取 NULL。
语法
参数
mark- 一GtkTextMark
返回
标记的 .[无转移]GtkTextBuffer
另请参见
GtkTextMark


------------ KeyGTK3gtk_text_mark_get_deleted ----

gtk_text_mark_get_deleted
如果标记已从其缓冲区中删除，则返回 true，该标记gtk_text_buffer_delete_mark（）。请参阅 gtk_text_buffer_add_mark（） 以获取有关再次将其添加到缓冲区的方法。
语法
参数
mark- 一GtkTextMark
返回
是否删除标记
另请参见
GtkTextMark


------------ KeyGTK3gtk_text_mark_get_left_gravity ----

gtk_text_mark_get_left_gravity
确定标记是否具有左重力。
语法
参数
mark- 一GtkTextMark
返回
如果标记已离开重力，则为 TRUE，否则为 FALSE
另请参见
GtkTextMark


------------ KeyGTK3gtk_text_mark_get_name ----

gtk_text_mark_get_name
返回标记名称;返回匿名标记的 NULL。
语法
参数
mark- 一GtkTextMark
返回
标记名称
另请参见
GtkTextMark


------------ KeyGTK3gtk_text_mark_get_visible ----

gtk_text_mark_get_visible
如果标记可见（即为其显示光标），则返回 TRUE。
语法
参数
mark- 一GtkTextMark
返回
如果可见，则为 TRUE
另请参见
GtkTextMark


------------ KeyGTK3gtk_text_mark_new ----

gtk_text_mark_new
创建文本标记。使用 gtk_text_buffer_add_mark（） 将其添加到缓冲区。如果名称为 NULL，则该标记是匿名的;否则，可以使用gtk_text_buffer_get_mark（）按名称检索标记。如果标记具有左重，并且文本插入到标记的当前位置，则该标记将移动到新插入文本的左侧。如果标记具有正确的重力（left_gravity = FALSE），则该标记将最终位于新插入文本的右侧。标准的从左到右光标是具有右重力的标记（键入时，光标停留在您重新键入的文本的右侧）。
语法
参数
name- 标记名称或空。[允许-无]
left_gravity- 标记是否应该留下重力
返回
自 2.12 起的新品
GtkTextMark
另请参见
GtkTextMark


------------ KeyGTK3gtk_text_mark_set_visible ----

gtk_text_mark_set_visible
设置标记的可见性;插入点通常是可见的，即您可以将其视为竖线。此外，文本窗口使用可见标记来指示拖放文本时将发生拖放的位置。大多数其他标记不可见。默认情况下，标记不可见。
语法
参数
mark- 一GtkTextMark
setting- 标记的可见性
另请参见
GtkTextMark


------------ KeyGTK3gtk_text_tag_event ----

gtk_text_tag_event
发出 ？事件？上的信号。GtkTextTag
语法
参数
tag- 一GtkTextTag
event_object- 接收事件的对象，例如小部件
event- 事件
iter- 接收事件的位置
返回
信号发射的结果（事件是否被处理）
另请参见
GtkTextTag


------------ KeyGTK3gtk_text_tag_get_priority ----

gtk_text_tag_get_priority
获取标签优先级。
语法
参数
tag- 一GtkTextTag
返回
标记的优先级。
另请参见
GtkTextTag


------------ KeyGTK3gtk_text_tag_new ----

gtk_text_tag_new
创建一个 .使用对象参数配置标签，即使用g_object_set（）。GtkTextTag
语法
参数
name- 标记名称，或空。[允许-无]
返回
一个新的GtkTextTag
另请参见
GtkTextTag


------------ KeyGTK3gtk_text_tag_set_priority ----

gtk_text_tag_set_priority
设置 的优先级。有效优先级从 0 开始，转到小于 gtk_text_tag_table_get_size（） 的优先级。表中的每个标签都有一个唯一的优先级;设置一个标签的优先级会改变表中所有其他标签的优先级，以保持每个标签的唯一优先级。更高优先级的标签 ？赢？如果两个标签都设置了相同的文本属性。当向标签表添加标签时，默认情况下会为该标签分配表中的最高优先级;因此，通常一组标记的优先级是将它们添加到表中或创建withgtk_text_buffer_create_tag（）的顺序，这会自动将标记添加到缓冲区的表中。GtkTextTag
语法
参数
tag- 一GtkTextTag
priority- 新的优先级
另请参见
GtkTextTag


------------ KeyGTK3gtk_text_tag_table_add ----

gtk_text_tag_table_add
向表中添加标记。在表中为标记分配了最高优先级。标记不得位于标记表中，并且可能与已添加的标记不具有相同的名称。
语法
参数
table- 一GtkTextTagTable
tag- 一GtkTextTag
另请参见
GtkTextTagTable


------------ KeyGTK3gtk_text_tag_table_foreach ----

gtk_text_tag_table_foreach
使用用户数据对表中的每个标记调用 func。请注意，在迭代表时，可能无法修改该表（您无法添加/删除标记）。
语法
参数
table- 一GtkTextTagTable
func- 一个在每个标签上调用的函数。[范围调用]
data- 用户数据
另请参见
GtkTextTagTable


------------ KeyGTK3gtk_text_tag_table_get_size ----

gtk_text_tag_table_get_size
返回表的大小（标记数）
语法
参数
table- 一GtkTextTagTable
返回
tabl 中的标签数
另请参见
GtkTextTagTable


------------ KeyGTK3gtk_text_tag_table_lookup ----

gtk_text_tag_table_lookup
查找命名标记。
语法
参数
table- 一GtkTextTagTable
name- 标签名称
返回
表中没有该名称的标记，则为 NULL。[无转移]
另请参见
GtkTextTagTable


------------ KeyGTK3gtk_text_tag_table_new ----

gtk_text_tag_table_new
创建新的 .该表不包含默认标记。GtkTextTagTable
返回
一个新的GtkTextTagTable
另请参见
GtkTextTagTable


------------ KeyGTK3gtk_text_tag_table_remove ----

gtk_text_tag_table_remove
从表格中删除标记。如果将具有表作为其标记表，则从缓冲区中删除该标记。表对标记的引用将被删除，因此，如果您没有对它的引用，则该标记最终将被销毁。GtkTextBuffer
语法
参数
table- 一GtkTextTagTable
tag- 一GtkTextTag
另请参见
GtkTextTagTable


------------ KeyGTK3gtk_text_view_add_child_at_anchor ----

gtk_text_view_add_child_at_anchor
在文本缓冲区的给定锚点处添加一个子构件。
语法
参数
text_view- 一GtkTextView
child- 一GtkWidget
anchor- a 在 text_viewGtkTextChildAnchorGtkTextBuffer
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_add_child_in_window ----

gtk_text_view_add_child_in_window
在其中一个文本构件的窗口中的固定坐标处添加一个子级。窗口必须具有非零大小 （seegtk_text_view_set_border_window_size（））。请注意，子坐标是相对于滚动给出的。当将孩子放在 中时，滚动是相关的，孩子漂浮在所有可滚动区域之上。但是，当将孩子放在其中一个可滚动窗口（边框窗口或文本窗口）中时，它将根据需要随滚动而移动。GTK_TEXT_WINDOW_WIDGET
语法
参数
text_view- 一GtkTextView
child- 一GtkWidget
which_window- 孩子应该出现在哪个窗口中
xpos- 子项在窗口坐标中的 X 位置
ypos- 子项在窗口坐标中的 Y 位置
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_backward_display_line ----

gtk_text_view_backward_display_line
将给定的迭代器向后移动一条显示（换行）线。显示行不同于段落。段落由换行符或其他段落分隔符分隔。显示线是通过对段落换行创建的。如果关闭包装，则显示行和段落将相同。每个视图的显示线划分不同，因为它们取决于视图的宽度;段落在 allviews 中是相同的，因为它们依赖于 .GtkTextBuffer
语法
参数
text_view- 一GtkTextView
iter- 一GtkTextIter
返回
TRUE 如果 iter 已移动并且不在末端迭代器上
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_backward_display_line_start ----

gtk_text_view_backward_display_line_start
将给定的迭代器向后移动到下一个显示行开始。显示行不同于段落。段落由换行符或其他段落分隔符分隔。显示线是通过对段落换行创建的。如果关闭包装，则显示行和段落将相同。每个视图的显示线划分不同，因为它们取决于视图的宽度;段落在 allviews 中是相同的，因为它们依赖于 .GtkTextBuffer
语法
参数
text_view- 一GtkTextView
iter- 一GtkTextIter
返回
TRUE 如果 iter 已移动并且不在末端迭代器上
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_buffer_to_window_coords ----

gtk_text_view_buffer_to_window_coords
将坐标（buffer_x、buffer_y）转换为窗口的坐标，并将结果存储在 （window_x、window_y） 中。请注意，您无法为不存在的窗口转换坐标（请参见gtk_text_view_set_border_window_size（））。
语法
参数
text_view- 一GtkTextView
win- 一个例外GtkTextWindowTypeGTK_TEXT_WINDOW_PRIVATE
buffer_x- 缓冲区 x 坐标
buffer_y- 缓冲区 y 坐标
window_x- 窗口 x 坐标返回位置或空。[输出][允许-无]
window_y- 窗口 y 坐标返回位置或空。[输出][允许-无]
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_forward_display_line ----

gtk_text_view_forward_display_line
将给定的迭代器向前移动一条显示（换行）线。显示行不同于段落。段落由换行符或其他段落分隔符分隔。显示线是通过对段落换行创建的。如果关闭包装，则显示行和段落将相同。每个视图的显示线划分不同，因为它们取决于视图的宽度;段落在 allviews 中是相同的，因为它们依赖于 .GtkTextBuffer
语法
参数
text_view- 一GtkTextView
iter- 一GtkTextIter
返回
TRUE 如果 iter 已移动并且不在末端迭代器上
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_forward_display_line_end ----

gtk_text_view_forward_display_line_end
将给定的迭代器向前移动到下一个显示行末尾。显示行不同于段落。段落由换行符或其他段落分隔符分隔。显示线是通过对段落换行创建的。如果关闭包装，则显示行和段落将相同。每个视图的显示线划分不同，因为它们取决于视图的宽度;段落在 allviews 中是相同的，因为它们依赖于 .GtkTextBuffer
语法
参数
text_view- 一GtkTextView
iter- 一GtkTextIter
返回
TRUE 如果 iter 已移动并且不在末端迭代器上
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_accepts_tab ----

gtk_text_view_get_accepts_tab
返回按 Tab 键是否插入 tab characters.gtk_text_view_set_accepts_tab（）。
语法
参数
text_view- 一GtkTextView
返回
如果按 Tab 键插入制表符，则为 TRUE，如果按 Tab 键移动键盘焦点，则为 FALSE。
2.4 起
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_border_window_size ----

gtk_text_view_get_border_window_size
获取指定边框窗口的宽度。Seegtk_text_view_set_border_window_size（）.
语法
参数
text_view- 一GtkTextView
type- 窗口返回大小从
返回
窗口宽度
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_buffer ----

gtk_text_view_get_buffer
返回此文本视图显示的正在运行项。缓冲区上的引用计数不递增;此函数的调用方不会拥有新的引用。GtkTextBuffer
语法
参数
text_view- 一GtkTextView
返回
一个。[无转移]GtkTextBuffer
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_cursor_locations ----

gtk_text_view_get_cursor_locations
给定文本布局中的迭代器，如果插入点位于该值，则确定强光标和弱游标的位置。每个游标的位置存储为零宽度矩形。强光标位置是插入方向性等于段落基本方向的字符的位置。弱光标位置是插入与段落基方向相反的方向性字符的位置。如果它为 NULL，则使用实际的游标位置。请注意，如果 iter 恰好是实际的光标位置，并且当前正在输入 IM 预编辑序列，则将调整该位置以考虑预编辑序列中的预编辑游标的偏移量。矩形位置在缓冲区坐标中;usegtk_text_view_buffer_to_window_coords（） 将这些坐标转换为文本视图中某个窗口的坐标。
语法
参数
text_view- 一GtkTextView
iter- 一个.[允许-无]GtkTextIter
strong- 存储强游标位置的位置（可能为 NULL）。[输出][允许-无]
weak- 存储弱游标位置的位置（可能为 NULL）。[输出][允许-无]
自 3.0 起
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_cursor_visible ----

gtk_text_view_get_cursor_visible
查明是否正在显示光标。
语法
参数
text_view- 一GtkTextView
返回
插入标记是否可见
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_default_attributes ----

gtk_text_view_get_default_attributes
获取默认文本属性的副本。这些是用于文本的归因，除非标记覆盖它们。您通常会在togtk_text_iter_get_attributes（）中传递默认属性，以使属性在给定的文本位置生效。返回值是此函数调用方拥有的副本，应释放。
语法
参数
text_view- 一GtkTextView
返回
一个新的GtkTextAttributes
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_editable ----

gtk_text_view_get_editable
返回 的缺省可编辑性。对于某些文本范围，缓冲区中的标记可能会覆盖此设置。GtkTextView
语法
参数
text_view- 一GtkTextView
返回
默认情况下文本是否可编辑
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_hadjustment ----

gtk_text_view_get_hadjustment
gtk_text_view_get_hadjustment自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_scrollable_get_hadjustment（）获取水平滚动 。GtkAdjustment
语法
参数
text_view- 一GtkTextView
返回
指向水平 .[无转移]
2.22 起GtkAdjustment
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_indent ----

gtk_text_view_get_indent
获取text_view中段落的默认缩进。视图缓冲区中的标记可能会覆盖默认值。缩进可能是负数。
语法
参数
text_view- 一GtkTextView
返回
缩进像素数
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_input_hints ----

gtk_text_view_get_input_hints
获取属性的值。?input-hints?
语法
参数
text_view- a
自3.6起GtkTextView
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_input_purpose ----

gtk_text_view_get_input_purpose
获取属性的值。?input-purpose?
语法
参数
text_view- a
自3.6起GtkTextView
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_iter_at_location ----

gtk_text_view_get_iter_at_location
检索缓冲区坐标 x 和 y 处的迭代器。缓冲区坐标是整个缓冲区的坐标，而不仅仅是当前显示的部分。如果您有来自事件的坐标，则必须将这些坐标转换为缓冲区坐标withgtk_text_view_window_to_buffer_coords（）。
语法
参数
text_view- 一GtkTextView
iter- 一个.[输出]GtkTextIter
x- x位置，在缓冲区坐标中
y- y 位置，在缓冲区坐标中
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_iter_at_position ----

gtk_text_view_get_iter_at_position
检索指向缓冲区坐标 x 和 y 处的字符的迭代器。缓冲区坐标是整个缓冲区的坐标，而不仅仅是当前显示的部分。如果您有来自事件的坐标，则必须使用gtk_text_view_window_to_buffer_coords（）将这些坐标转换为缓冲区坐标。请注意，这与gtk_text_view_get_iter_at_location（）不同，后者返回游标位置，即字符之间的位置。
语法
参数
text_view- 一GtkTextView
iter- 一个.[输出]GtkTextIter
trailing- 如果非NULL，则位置存储一个整数，指示用户点击的字形的位置。它要么是零，要么是grapheme.0中的字符数代表grapheme的后缘。[输出][允许-无]
x- x位置，在缓冲区坐标中
y- y 位置，在缓冲区坐标中，
自 2.6 起
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_iter_location ----

gtk_text_view_get_iter_location
获取一个矩形，该矩形大致包含迭代器处的字符。矩形位置在缓冲区坐标中;usegtk_text_view_buffer_to_window_coords（） 将这些坐标转换为文本视图中某个窗口的坐标。
语法
参数
text_view- 一GtkTextView
iter- 一GtkTextIter
location- 字符在迭代时的边界。
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_justification ----

gtk_text_view_get_justification
获取text_view中段落的默认对齐方式。缓冲区中的标记可能会覆盖默认值。
语法
参数
text_view- 一GtkTextView
返回
默认理由
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_left_margin ----

gtk_text_view_get_left_margin
获取text_view中段落的默认左边距大小。缓冲区中的标记可能会覆盖默认值。
语法
参数
text_view- 一GtkTextView
返回
左边距（以像素为单位）
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_line_at_y ----

gtk_text_view_get_line_at_y
获取包含坐标 y 的行的开头。y 位于缓冲区坐标中，使用 gtk_text_view_window_to_buffer_coords（） 从窗口坐标转换。如果非 NULL，line_top将填充线顶部边的坐标。GtkTextIter
语法
参数
text_view- 一GtkTextView
target_iter- 一个.[输出]GtkTextIter
y- 一个 y 坐标
line_top- 返回线顶部坐标的位置。[输出]
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_line_yrange ----

gtk_text_view_get_line_yrange
获取包含迭代器的行顶部的 y 坐标和该行的高度。坐标是缓冲区坐标;转换为窗口坐标，gtk_text_view_buffer_to_window_coords（）。
语法
参数
text_view- 一GtkTextView
iter- 一GtkTextIter
y- 返回 y 坐标的位置。[输出]
height- 返回高度的位置。[输出]
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_overwrite ----

gtk_text_view_get_overwrite
返回 是否处于覆盖模式。GtkTextView
语法
参数
text_view- 一GtkTextView
返回
是否text_viewis覆盖模式。
自 2.4 起
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_pixels_above_lines ----

gtk_text_view_get_pixels_above_lines
获取要放在段落上方的默认像素数。
语法
参数
text_view- 一GtkTextView
返回
段落上方的默认像素数
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_pixels_below_lines ----

gtk_text_view_get_pixels_below_lines
获取由 gtk_text_view_set_pixels_below_lines（） 设置的值。
语法
参数
text_view- 一GtkTextView
返回
段落下方的默认空白像素数
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_pixels_inside_wrap ----

gtk_text_view_get_pixels_inside_wrap
获取由 gtk_text_view_set_pixels_inside_wrap（） 设置的值。
语法
参数
text_view- 一GtkTextView
返回
换行之间空白区域的默认像素数
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_right_margin ----

gtk_text_view_get_right_margin
获取text_view中文本的默认右边距。缓冲区中的标记可能会覆盖默认值。
语法
参数
text_view- 一GtkTextView
返回
右边距（以像素为单位）
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_tabs ----

gtk_text_view_get_tabs
获取text_view的默认选项卡。缓冲区中的标记可能会超过默认值。返回的数组将为 NULL，如果？standard？使用（8 个空格）选项卡。使用pango_tab_array_free（） 释放返回值。
语法
参数
text_view- 一GtkTextView
返回
默认选项卡数组的副本，如果使用“标准”选项卡，则为 NULL;必须使用 pango_tab_array_free（） 释放。
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_vadjustment ----

gtk_text_view_get_vadjustment
gtk_text_view_get_vadjustment自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_scrollable_get_vadjustment（）获取垂直滚动 。GtkAdjustment
语法
参数
text_view- 一GtkTextView
返回
指向垂直 的指针。[无转移]
2.22 起GtkAdjustment
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_visible_rect ----

gtk_text_view_get_visible_rect
在缓冲区坐标中，使用缓冲区的当前可见区域填充visible_rect。转换为窗口坐标，gtk_text_view_buffer_to_window_coords（）。
语法
参数
text_view- 一GtkTextView
visible_rect- 矩形填充。[输出]
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_window ----

gtk_text_view_get_window
检索与文本视图的某个区域相对应的窗口;可能的窗口包括整个窗口小部件窗口、左侧、右侧、顶部、底部的子窗口以及显示文本缓冲区的窗口。如果窗口的宽度或高度为 0，则 Windows 为 NULL 且不存在，并且在实现小部件之前不存在。GdkWindow
语法
参数
text_view- 一GtkTextView
win- 窗口得到
返回
a 或空。[无转移]GdkWindow
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_window_type ----

gtk_text_view_get_window_type
通常用于找出事件对应于哪个窗口。如果在 text_view 上连接到事件信号，则应在事件>窗口中调用此函数，以查看它是哪个窗口。
语法
参数
text_view- 一GtkTextView
window- 窗口类型
返回
窗口类型。
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_get_wrap_mode ----

gtk_text_view_get_wrap_mode
获取视图的换行。
语法
参数
text_view- 一GtkTextView
返回
换行设置
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_im_context_filter_press ----

gtk_text_view_im_context_filter_keypress
gtk_text_view_im_context_filter_keypress?()
允许输入法在内部处理按键和释放事件。如果此函数返回 TRUE，则不应对此关键事件执行进一步处理。Seegtk_im_context_filter_keypress（）.请注意，在重写密钥事件处理时，您需要从处理程序调用此函数。当您需要在 输入法和 的默认键事件处理之间插入自己的键处理时，需要这样做。1234567891011121314[/syntax] [syntax]static gbooleangtk_foo_bar_key_press_event （GtkWidget *widget， GdkEventKey *event）{ if （（key->keyval == GDK_KEY_Return || key->keyval == GDK_KEY_KP_Enter）） { if （gtk_text_view_im_context_filter_keypress （GTK_TEXT_VIEW （view）， event）） 返回 TRUE; } // Do some stuff 返回 GTK_WIDGET_CLASS （gtk_foo_bar_parent_class）->key_press_event （widget， 事件）;}[/语法]GtkTextViewGtkTextView
语法
参数
text_view- 一GtkTextView
event- 关键事件
返回
如果输入法处理键事件，则为 TRUE。
2.22 起
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_move_child ----

gtk_text_view_move_child
更新子节点的位置，如gtk_text_view_add_child_in_window（）。
语法
参数
text_view- 一GtkTextView
child- 子小部件已添加到文本视图中
xpos- 新的X位置在窗口坐标
ypos- 窗口坐标中新的Y位置
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_move_mark_onscreen ----

gtk_text_view_move_mark_onscreen
在缓冲区内移动标记，使其位于当前可见的文本区域内。
语法
参数
text_view- 一GtkTextView
mark- 一GtkTextMark
返回
如果标记移动，则为 TRUE（尚未在屏幕上显示）
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_move_visually ----

gtk_text_view_move_visually
直观地移动迭代器给定数量的字符，将其视为强光标位置。如果 count 为正，则新的强游标位置将是旧游标位置右侧的 count 位置。如果 count 为负数，则新的强游标位置将是旧游标位置左侧的 count 位置。在存在双向文本的情况下，逻辑顺序和视觉顺序之间的对应关系将取决于当前运行的方向，并且当光标从运行结束时移开时，可能会出现跳跃。
语法
参数
text_view- 一GtkTextView
iter- 一GtkTextIter
count- 要移动的字符数（向左移动，向右移动正向）
返回
TRUE 如果迭代移动并且不在最终迭代器上
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_new ----

gtk_text_view_new
创建新的 .如果在使用文本视图之前未调用 gtk_text_view_set_buffer（），则将为您创建一个空的默认缓冲区。使用 gtk_text_view_get_buffer（） 获取缓冲区。如果要指定自己的缓冲区，请考虑gtk_text_view_new_with_buffer（）。GtkTextView
返回
一个新的GtkTextView
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_new_with_buffer ----

gtk_text_view_new_with_buffer
创建一个显示缓冲缓冲区的新小部件。一个缓冲区可以在许多 widgets 之间共享。buffer 可以是 NULL 以创建默认缓冲区，在这种情况下，此函数等效于 gtk_text_view_new（）。文本视图将其自己的引用计数添加到缓冲区;它不会占用现有引用。GtkTextView
语法
参数
buffer- 一GtkTextBuffer
返回
一个新的.GtkTextView
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_place_cursor_onscreen ----

gtk_text_view_place_cursor_onscreen
将光标移动到缓冲区的当前可见区域，它不存在。
语法
参数
text_view- 一GtkTextView
返回
如果必须移动游标，则为 TRUE。
另请参见
GtkTextView


------------ KeyGTK3GTK_TEXT_VIEW_PRIORITY_VALIDATE ----

GTK_TEXT_VIEW_PRIORITY_VALIDATE
GTK_TEXT_VIEW_PRIORITY_VALIDATE
文本视图在后台空闲作业中验证屏幕上线条的优先级
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_reset_im_context ----

gtk_text_view_reset_im_context
如果需要，重置文本视图的输入法上下文。在修改缓冲区会混淆正在进行的输入法行为的情况下，这可能是必要的。
语法
参数
text_view- a
自2.22起GtkTextView
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_scroll_mark_onscreen ----

gtk_text_view_scroll_mark_onscreen
滚动text_view最小距离，以便将标记包含在构件的可见区域中。
语法
参数
text_view- 一GtkTextView
mark- 缓冲区中用于text_view的标记
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_scroll_to_iter ----

gtk_text_view_scroll_to_iter
滚动text_view，以便 iter 位于屏幕上由 xalign 和 yalign 指示的位置。对齐方式 0.0 表示左对齐或顶部，1.0 表示右对齐或下对齐，0.5 表示居中。如果use_align为 FALSE，则文本将滚动最小距离以在屏幕上显示标记，可能根本不滚动。用于此功能的有效屏幕将减小within_margin的尺寸边距。请注意，此函数使用文本缓冲区中当前计算的行的高度。行高在空闲处理程序中计算;因此，如果在高度计算之前调用此函数，则此函数可能不会产生预期的效果。为避免奇怪，请考虑使用gtk_text_view_scroll_to_mark（），它将保存一个要在行验证后滚动到的点。
语法
参数
text_view- 一GtkTextView
iter- 一GtkTextIter
within_margin- 边距为屏幕尺寸的 [0.0，0.5） 部分
use_align- 是否使用对齐参数（如果为FALSE，只需在屏幕上获取标记）
xalign- 可见区域内标记的水平对齐
yalign- 可见区域内标记的垂直对齐
返回
如果发生滚动，则为 TRUE
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_scroll_to_mark ----

gtk_text_view_scroll_to_mark
滚动text_view，以便标记在屏幕上由 xalign 和 yalign 指示的位置。对齐方式 0.0 表示左对齐或顶部，1.0 表示右对齐或下对齐，0.5 表示居中。如果use_align为 FALSE，则文本将滚动最小距离以在屏幕上显示标记，可能根本不滚动。用于此功能的有效屏幕将减小within_margin的尺寸边距。
语法
参数
text_view- 一GtkTextView
mark- 一GtkTextMark
within_margin- 边距为屏幕尺寸的 [0.0，0.5） 部分
use_align- 是否使用对齐参数（如果为 FALSE，则只获取屏幕上的标记）
xalign- 可见区域内标记的水平对齐
yalign- 可见区域内标记的垂直对齐
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_set_accepts_tab ----

gtk_text_view_set_accepts_tab
设置按下 Tab 键时文本构件的行为。如果accepts_tab为 TRUE，则插入制表符。如果accepts_tab为 FALSE，则键盘焦点将移动到焦点链中的下一个小部件。
语法
参数
text_view- 一GtkTextView
accepts_tab- TRUE 如果按 Tab 键应插入制表符，则为 FALSE，如果按 Tab 键应移动键盘焦点。
2.4 起
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_set_border_window_size ----

gtk_text_view_set_border_window_size
设置GTK_TEXT_WINDOW_LEFT或GTK_TEXT_WINDOW_RIGHT的宽度，或GTK_TEXT_WINDOW_TOP或GTK_TEXT_WINDOW_BOTTOM的高度。如果大小设置为 0，则自动销毁相应的窗口;如果大小设置为非零，则创建窗口。此函数只能用于？边框窗口，？它不能与 、 、 或 一起使用。GTK_TEXT_WINDOW_WIDGETGTK_TEXT_WINDOW_TEXTGTK_TEXT_WINDOW_PRIVATE
语法
参数
text_view- 一GtkTextView
type- 影响窗口
size- 窗口的宽度或高度
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_set_buffer ----

gtk_text_view_set_buffer
将缓冲区设置为text_view显示的缓冲区。文本视图显示的上一个缓冲区未引用，并且引用已添加到缓冲区。如果在将 buffer 传递给此函数之前，您拥有对 buffer 的引用，则必须自行删除该引用;不会“采用”它。GtkTextView
语法
参数
text_view- 一GtkTextView
buffer- 一个.[允许-无]GtkTextBuffer
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_set_cursor_visible ----

gtk_text_view_set_cursor_visible
切换是否显示插入点。没有可编辑文本的缓冲区可能不应该有可见的光标，因此您可能需要关闭光标。
语法
参数
text_view- 一GtkTextView
setting- 是否显示插入光标
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_set_editable ----

gtk_text_view_set_editable
设置 的默认可编辑性。您可以使用标签的“可编辑”属性，在缓冲区中使用标签覆盖此默认设置。GtkTextView
语法
参数
text_view- 一GtkTextView
setting- 它是否可编辑
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_set_indent ----

gtk_text_view_set_indent
设置text_view中段落的默认缩进。缓冲区中的标记可能会覆盖默认值。
语法
参数
text_view- 一GtkTextView
indent- 以像素为单位的缩进
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_set_input_hints ----

gtk_text_view_set_input_hints
设置属性，该属性允许输入方法微调其行为。?input-hints?
语法
参数
text_view- 一GtkTextView
hints- 自3.6以来的
提示
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_set_input_purpose ----

gtk_text_view_set_input_purpose
设置屏幕键盘和其他输入方法可用于调整其行为的属性。?input-purpose?
语法
参数
text_view- 一GtkTextView
purpose- 自3.6以来的目的
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_set_justification ----

gtk_text_view_set_justification
设置text_view中文本的默认对齐方式。视图缓冲区中的标记可能会覆盖默认值。
语法
参数
text_view- 一GtkTextView
justification- 理由
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_set_left_margin ----

gtk_text_view_set_left_margin
设置text_view中文本的默认左边距。缓冲区中的标记可能会覆盖默认值。
语法
参数
text_view- 一GtkTextView
left_margin- 左边距（以像素为单位）
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_set_overwrite ----

gtk_text_view_set_overwrite
更改覆盖模式。GtkTextView
语法
参数
text_view- 一GtkTextView
overwrite- TRUE 打开覆盖模式，FALSE 自 2.4 起关闭
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_set_pixels_above_lines ----

gtk_text_view_set_pixels_above_lines
设置text_view段落上方的默认空白像素数。缓冲区中用于text_view的标记可能会覆盖默认值。
语法
参数
text_view- 一GtkTextView
pixels_above_lines- 段落上方的像素
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_set_pixels_below_lines ----

gtk_text_view_set_pixels_below_lines
设置要将段落放在text_view下方的空白区域的默认像素数。可能被应用于text_view缓冲区的标记覆盖。
语法
参数
text_view- 一GtkTextView
pixels_below_lines- 段落下方的像素
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_set_pixels_inside_wrap ----

gtk_text_view_set_pixels_inside_wrap
设置要在段落内显示/换行之间保留的缺省空白区域像素数。可能被text_view缓冲区中的 bytags 覆盖。
语法
参数
text_view- 一GtkTextView
pixels_inside_wrap- 换行之间的默认像素数
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_set_right_margin ----

gtk_text_view_set_right_margin
设置文本视图中文本的默认右边距。缓冲区中的标记可能会覆盖默认值。
语法
参数
text_view- 一GtkTextView
right_margin- 右边距（以像素为单位）
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_set_tabs ----

gtk_text_view_set_tabs
设置text_view中段落的默认制表位。缓冲区中的标记可能会覆盖默认值。
语法
参数
text_view- 一GtkTextView
tabs- 选项卡作为一个PangoTabArray
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_set_wrap_mode ----

gtk_text_view_set_wrap_mode
设置视图的换行。
语法
参数
text_view- 一GtkTextView
wrap_mode- 一GtkWrapMode
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_starts_display_line ----

gtk_text_view_starts_display_line
确定 iter 是否位于显示线的开头。有关显示行与段落的说明，请参阅 gtk_text_view_forward_display_line（）。
语法
参数
text_view- 一GtkTextView
iter- 一GtkTextIter
返回
TRUE 如果迭代开始换行
另请参见
GtkTextView


------------ KeyGTK3gtk_text_view_window_to_buffer_coords ----

gtk_text_view_window_to_buffer_coords
将 win 标识的窗口上的坐标转换为缓冲区坐标，并将结果存储在 （buffer_x，buffer_y） 中。请注意，您无法为不存在的窗口转换坐标（请参见gtk_text_view_set_border_window_size（））。
语法
参数
text_view- 一GtkTextView
win- 一个例外GtkTextWindowTypeGTK_TEXT_WINDOW_PRIVATE
window_x- 窗口 x 坐标
window_y- 窗口 y 坐标
buffer_x- 缓冲区 x 坐标返回位置或 NULL。[输出][允许-无]
buffer_y- 缓冲区 y 坐标返回位置或 NULL。[输出][允许-无]
另请参见
GtkTextView


------------ KeyGTK3gtk_theming_engine_get ----

gtk_theming_engine_get
检索应用于当前呈现的元素的多个样式属性值。
语法
参数
engine- 一GtkThemingEngine
state- 要检索其值的状态
...- 属性名称/返回值对，后跟 NULL
自 3.0 起
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_background_color ----

gtk_theming_engine_get_background_color
获取给定状态的背景色。
语法
参数
engine- 一GtkThemingEngine
state- 状态以检索颜色
color- 返回背景颜色的值。[输出]
自 3.0 起
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_border ----

gtk_theming_engine_get_border
将给定状态的边框获取为 .GtkBorder
语法
参数
engine- 一GtkThemingEngine
state- 状态以检索其边框
border- 返回边框设置的值。[输出]
自 3.0 起
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_border_color ----

gtk_theming_engine_get_border_color
获取给定状态的边框颜色。
语法
参数
engine- 一GtkThemingEngine
state- 状态以检索颜色
color- 返回边框颜色的值。[输出]
自 3.0 起
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_color ----

gtk_theming_engine_get_color
获取给定状态的前景色。
语法
参数
engine- 一GtkThemingEngine
state- 状态以检索颜色
color- 前景色的返回值。[输出]
自 3.0 起
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_direction ----

gtk_theming_engine_get_direction
gtk_theming_engine_get_direction自 3.8 版起已弃用，不应在新编写的代码中使用。使用 gtk_theming_engine_get_state（） 并检查 和。返回用于渲染的小部件方向。GTK_STATE_FLAG_DIR_LTRGTK_STATE_FLAG_DIR_RTL
语法
参数
engine- 一GtkThemingEngine
返回
自 3.0 以来的小部件方向
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_font ----

gtk_theming_engine_get_font
gtk_theming_engine_get_font自 3.8 版起已弃用，不应在新编写的代码中使用。Use gtk_theming_engine_get（）返回给定状态的字体说明。
语法
参数
engine- 一GtkThemingEngine
state- 状态以检索字体
返回
对于给定状态。此对象归 GTK+ 所有，不应被弃用。[无转移]
自 3.0 起PangoFontDescription
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_junction_sides ----

gtk_theming_engine_get_junction_sides
返回用于渲染的小部件方向。
语法
参数
engine- 一GtkThemingEngine
返回
自 3.0 以来的小部件方向
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_margin ----

gtk_theming_engine_get_margin
以 .GtkBorder
语法
参数
engine- 一GtkThemingEngine
state- 状态以检索其边框
margin- 边距设置的返回值。[输出]
自 3.0 起
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_padding ----

gtk_theming_engine_get_padding
将给定状态的填充作为 .GtkBorder
语法
参数
engine- 一GtkThemingEngine
state- 检索填充的状态
padding- 填充设置的返回值。[输出]
自 3.0 起
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_path ----

gtk_theming_engine_get_path
返回用于样式匹配的小部件路径。
语法
参数
engine- 一GtkThemingEngine
返回
一个。[无转移]
自 3.0 起GtkWidgetPath
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_property ----

gtk_theming_engine_get_property
获取从应用于当前呈现元素的样式设置中检索到的属性值。
语法
参数
engine- 一GtkThemingEngine
property- 属性名称
state- 要检索其值的状态
value- 返回属性值的位置，一旦完成，必须使用g_value_unset（）释放此内存。[输出][转移完整]
自 3.0 起
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_screen ----

gtk_theming_engine_get_screen
返回当前呈现到的引擎。GdkScreen
语法
参数
engine- 一GtkThemingEngine
返回
a 或空。[无转移]GdkScreen
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_state ----

gtk_theming_engine_get_state
返回呈现时使用的状态。
语法
参数
engine- 一GtkThemingEngine
返回
自 3.0 以来的州旗
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_style ----

gtk_theming_engine_get_style
根据当前呈现的内容的样式从引擎中检索多个小部件样式属性。
语法
参数
engine- 一GtkThemingEngine
...- 属性名称/返回值对，后跟 NULL
自 3.0 起
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_style_property ----

gtk_theming_engine_get_style_property
获取小部件样式属性的值。
语法
参数
engine- 一GtkThemingEngine
property_name- 小部件样式属性的名称
value- 返回属性值的位置，使用后免费withg_value_unset（）。
自 3.0 起
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_style_valist ----

gtk_theming_engine_get_style_valist
根据当前呈现的内容的样式从引擎中检索多个小部件样式属性。
语法
参数
engine- 一GtkThemingEngine
args- va_list属性名称/返回位置对，后跟 NULL
自 3.0 起
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_get_valist ----

gtk_theming_engine_get_valist
检索应用于当前呈现的元素的多个样式属性值。
语法
参数
engine- 一GtkThemingEngine
state- 要检索其值的状态
args- va_list属性名称/返回位置对，后跟 NULL
自 3.0 起
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_has_class ----

gtk_theming_engine_has_class
如果当前呈现的内容已定义给定的类名，则返回 TRUE。
语法
参数
engine- 一GtkThemingEngine
style_class- 要查找的类名
返回
如果引擎
自 3.0 以来class_namedefined，则为 true
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_has_region ----

gtk_theming_engine_has_region
如果当前呈现的内容定义了区域，则返回 TRUE。如果flags_return不为 NULL，则将其设置为影响该区域的标志。
语法
参数
engine- 一GtkThemingEngine
style_region- 区域名称
flags- 区域标志的返回位置。[输出][允许-无]
返回
如果区域是从 3.0 开始定义的
，则为 TRUE
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_load ----

gtk_theming_engine_load
从标准目录中加载并初始化主题引擎模块。
语法
参数
name- 要加载的主题引擎名称
返回
主题引擎，如果引擎名称不存在，则为 NULL。[无转移]
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_lookup_color ----

gtk_theming_engine_lookup_color
查找并解析当前样式的色彩映射表中的颜色名称。
语法
参数
engine- 一GtkThemingEngine
color_name- 颜色名称查找
color- 查找颜色的返回位置。[输出]
返回
如果找到并解决了color_namewas，则为 true，否则为 FALSE
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_register_property ----

gtk_theming_engine_register_property
gtk_theming_engine_register_property自 3.8 版起已弃用，不应在新编写的代码中使用。代码应使用 CSS 提供的默认属性。注册一个属性，以便它可以在CSS文件格式中使用，在CSS文件上，该属性将看起来像“-${name_space}-${property_name}”。是${property_name} 给定给 pspec。name_space通常是主题引擎名称。对于任何类型，都可以提供parse_func，该函数用于将CSS中的任何属性值（在？：？和？;？之间）转换为所需的值。对于基本类型，已经有builtin解析支持，因此可以为这些情况提供NULL。引擎必须确保财产登记恰好发生一次，通常GTK+将主题引擎处理为单例，因此这应保证发生一次，但在创建自己时请记住这一点。为了使用 CSS 文件中的自定义注册属性，请确保首先通过在前面的规则或 sameone 中指定引擎属性来加载引擎。1234[/syntax] [syntax]* { engine： someengine; -someEngine-custom-property： 2;}[/语法]GValueGtkThemeEngines
语法
参数
name_space- 属性名称的命名空间
parse_func- 解析函数使用，或 NULL
pspec- 自3年以来的新物业
。GParamSpec
另请参见
GtkThemingEngine


------------ KeyGTK3gtk_theming_engine_state_is_running ----

gtk_theming_engine_state_is_running
gtk_theming_engine_state_is_running has been deprecated since version 3.6 and should not be used in newly-written code.Always returns FALSEReturns TRUE if there is a transition animation running for thecurrent region (see gtk_style_context_push_animatable_region()).If progress is not NULL, the animation progress will be returnedthere, 0.0 means the state is closest to being FALSE, while 1.0 meansit?s closest to being TRUE. This means transition animations willrun from 0 to 1 when state is being set to TRUE and from 1 to 0 whenit?s being set to FALSE.
Syntax
Parameters
engine  -  	a GtkThemingEngine
state  -  	a widget state
progress  -  	 return location for the transition progress. [out]
Returns
TRUE if there is a running transition animation for state.
Since 3.0
See Also
GtkThemingEngine


------------ KeyGTK3gtk_toggle_action_get_active ----

gtk_toggle_action_get_active
gtk_toggle_action_get_active has been deprecated since version 3.10 and should not be used in newly-written code.Returns the checked state of the toggle action.
Syntax
Parameters
action  -  	the action object
Returns
the checked state of the toggle action
Since 2.4
See Also
GtkToggleAction


------------ KeyGTK3gtk_toggle_action_get_draw_as_radio ----

gtk_toggle_action_get_draw_as_radio
gtk_toggle_action_get_draw_as_radio has been deprecated since version 3.10 and should not be used in newly-written code.Returns whether the action should have proxies like a radio action.
Syntax
Parameters
action  -  	the action object
Returns
whether the action should have proxies like a radio action.
Since 2.
See Also
GtkToggleAction


------------ KeyGTK3gtk_toggle_action_new ----

gtk_toggle_action_new
gtk_toggle_action_new自版本 3.10 起已弃用，不应在新编写的代码中使用。创建新对象。要将操作添加到 a 并为操作设置加速器，请调用 gtk_action_group_add_action_with_accel（）。GtkToggleActionGtkActionGroup
语法
参数
name- 操作的唯一名称
label- 显示在菜单项和按钮上的标签，或 NULL。[允许-无]
tooltip- 操作的工具提示，或 NULL。[允许-无]
stock_id- 在表示操作的小部件中显示的股票图标，或 NULL。[允许-无]
返回
自 2.4 以来的新
GtkToggleAction
另请参见
GtkToggleAction


------------ KeyGTK3gtk_toggle_action_set_active ----

gtk_toggle_action_set_active
gtk_toggle_action_set_active 自 3.10 版起已弃用，不应在新编写的代码中使用。设置切换操作的已检查状态。
语法
参数
action- 动作对象
is_active- 是否应该检查
操作
自2.4
另请参见
GtkToggleAction


------------ KeyGTK3gtk_toggle_action_set_draw_as_radio ----

gtk_toggle_action_set_draw_as_radio
gtk_toggle_action_set_draw_as_radio自 3.10 版起已弃用，不应在新编写的代码中使用。设置动作是否应具有类似于无线电动作的代理。
语法
参数
action- 动作对象
draw_as_radio- 动作是否应该像无线电动作
一样有代理 自2.4
另请参见
GtkToggleAction


------------ KeyGTK3gtk_toggle_action_toggled ----

gtk_toggle_action_toggled
gtk_toggle_action_toggled自 3.10 版起已弃用，不应在新编写的代码中使用。发出“切换”切换操作上的信号。
语法
参数
action- 自 2.4 以来的操作对象
另请参见
GtkToggleAction


------------ KeyGTK3gtk_toggle_button_get_active ----

gtk_toggle_button_get_active
查询 a 并返回其当前状态。如果按下切换按钮，则返回 TRUE;如果按下切换按钮，则返回 FALSE。GtkToggleButton
语法
参数
toggle_button- 一个.GtkToggleButton
返回
一个值。gboolean
另请参见
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_get_inconsistent ----

gtk_toggle_button_get_inconsistent
获取由 gtk_toggle_button_set_inconsistent（） 设置的值。
语法
参数
toggle_button- 一GtkToggleButton
返回
如果按钮显示为不一致，则为 TRUE，否则为 FALSE
另请参见
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_get_mode ----

gtk_toggle_button_get_mode
检索按钮是否显示为单独的指示符和标签。请参见 gtk_toggle_button_set_mode（）。
语法
参数
toggle_button- 一GtkToggleButton
返回
如果将切换按钮绘制为单独的指示符和标签，则为 TRUE。
另请参见
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_new ----

gtk_toggle_button_new
创建新的切换按钮。小部件应该打包到按钮中，如gtk_button_new（）所示。
返回
一个新的切换按钮。
另请参见
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_new_with_label ----

gtk_toggle_button_new_with_label
创建一个带有文本标签的新切换按钮。
语法
参数
label- 包含要放置在切换按钮中的消息的字符串。
返回
一个新的切换按钮。
另请参见
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_new_with_mnemonic ----

gtk_toggle_button_new_with_mnemonic
创建包含标签的新标签。标签将使用gtk_label_new_with_mnemonic（）创建，因此下划线标签指示按钮的助记符。GtkToggleButton
语法
参数
label- 按钮的文本，在字母字符前面有下划线
返回
一个新的GtkToggleButton
另请参见
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_set_active ----

gtk_toggle_button_set_active
设置切换按钮的状态。如果希望“按下”将GtkToggleButton设置为 TRUE，则设置为 FALSE 以提升它。此操作会导致发出信号和信号。?toggled??clicked?
语法
参数
toggle_button- 一个.GtkToggleButton
is_active- 真或假。
另请参见
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_set_inconsistent ----

gtk_toggle_button_set_inconsistent
如果用户选择了受切换按钮影响的一系列元素（如某些文本或分页单元格），并且该范围内的当前值不一致，则可能需要在“介于两者之间？？”中显示切换。州。此功能在两者之间打开？显示。通常，如果用户切换切换按钮，您将再次关闭不一致状态。这必须手动执行，gtk_toggle_button_set_inconsistent（）仅影响视觉外观，而不会影响按钮的语义。
语法
参数
toggle_button- 一GtkToggleButton
setting- 如果状态不一致，则为 TRUE[br \=“”
另请参见
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_set_mode ----

gtk_toggle_button_set_mode
设置按钮是否显示为单独的指示器和标签。您可以在 checkbutton 或单选按钮上调用此函数 withdraw_indicator = FALSE 以使按钮看起来像普通按钮此函数仅影响类的实例，这些类的实例类似于 和 派生自 ，而不是自身的实例。GtkCheckButtonGtkRadioButtonGtkToggleButtonGtkToggleButton
语法
参数
toggle_button- 一GtkToggleButton
draw_indicator- 如果为 TRUE，则将按钮绘制为单独的指示符和标签;如果为 FALSE，则像绘制普通按钮一样绘制按钮
另请参见
GtkToggleButton


------------ KeyGTK3gtk_toggle_button_toggled ----

gtk_toggle_button_toggled
在 上发出信号。应用程序没有充分的理由调用此函数。?toggled?GtkToggleButton
语法
参数
toggle_button- 一个.GtkToggleButton
另请参见
GtkToggleButton


------------ KeyGTK3gtk_toggle_tool_button_get_active ----

gtk_toggle_tool_button_get_active
查询 a 并返回其当前状态。如果按下切换按钮，则返回 TRUE;如果按下切换按钮，则返回 FALSE。GtkToggleToolButton
语法
参数
button- 一GtkToggleToolButton
返回
如果按下切换工具按钮，则为 TRUE;如果未按 From 2，则
为 FALSE。
另请参见
GtkToggleToolButton


------------ KeyGTK3gtk_toggle_tool_button_new ----

gtk_toggle_tool_button_new
返回新的GtkToggleToolButton
返回
a 自 2.4 以来新创建的
GtkToggleToolButton
另请参见
GtkToggleToolButton


------------ KeyGTK3gtk_toggle_tool_button_new_from_stock ----

gtk_toggle_tool_button_new_from_stock
gtk_toggle_tool_button_new_from_stock自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用 gtk_toggle_tool_button_new（）。创建一个包含 astock 项中的图像和文本的新项。某些股票 ID 具有预处理器宏，如 和 。如果stock_id不是库存物料的名称，则为错误。GtkToggleToolButtonGTK_STOCK_OKGTK_STOCK_APPLY
语法
参数
stock_id- 库存项目的名称
返回
自 2.4 以来的新
品GtkToggleToolButton
另请参见
GtkToggleToolButton


------------ KeyGTK3gtk_toggle_tool_button_set_active ----

gtk_toggle_tool_button_set_active
设置切换工具按钮的状态。如果您希望“按下”GtkToggleButton，则设置为 TRUE，并设置为 FALSE 以提升它。此操作会导致发出切换的信号。
语法
参数
button- 一GtkToggleToolButton
is_active- 按钮是否应该从2.4开始处于活动状态
另请参见
GtkToggleToolButton


------------ KeyGTK3gtk_toolbar_get_drop_index ----

gtk_toolbar_get_drop_index
返回与工具栏上指示的点对应的位置。将项目拖动到工具栏时，这很有用：此函数返回新项目应插入的位置。x 和 y 在工具栏坐标中。
语法
参数
toolbar- 一GtkToolbar
x- 工具栏上一个点的x坐标
y- 工具栏上某个点的 y 坐标
返回
与工具栏上的点 （x， y） 相对应的位置。
2.4 起
另请参见
GtkToolbar


------------ KeyGTK3gtk_toolbar_get_icon_size ----

gtk_toolbar_get_icon_size
检索工具栏的图标大小。请参见 gtk_toolbar_set_icon_size（）。
语法
参数
toolbar- 一GtkToolbar
返回
工具栏上图标的当前图标大小。
另请参见
GtkToolbar


------------ KeyGTK3gtk_toolbar_get_item_index ----

gtk_toolbar_get_item_index
返回项在工具栏上的位置，如果项不是工具栏的子项，则从 0.It 开始是错误的。
语法
参数
toolbar- 一GtkToolbar
item- a 是工具栏的子项GtkToolItem
返回
项目在工具栏上的位置。
2.4 起
另请参见
GtkToolbar


------------ KeyGTK3gtk_toolbar_get_nth_item ----

gtk_toolbar_get_nth_item
返回工具栏上的第 n 项，如果工具栏不包含第 n 项，则返回 NULL。
语法
参数
toolbar- 一GtkToolbar
n- 工具栏上的位置
返回
工具栏上的第 n 个，如果没有第 n 个项目，则为 NULL。[无转移]
2.4 起GtkToolItem
另请参见
GtkToolbar


------------ KeyGTK3gtk_toolbar_get_n_items ----

gtk_toolbar_get_n_items
返回工具栏上的项数。
语法
参数
toolbar- 一GtkToolbar
返回
自 2.4 起工具栏
上的项目数
另请参见
GtkToolbar


------------ KeyGTK3gtk_toolbar_get_relief_style ----

gtk_toolbar_get_relief_style
返回工具栏上按钮的浮雕样式。Seegtk_button_set_relief（）.
语法
参数
toolbar- 一GtkToolbar
返回
工具栏上按钮的浮雕样式。
2.4 起
另请参见
GtkToolbar


------------ KeyGTK3gtk_toolbar_get_show_arrow ----

gtk_toolbar_get_show_arrow
返回工具栏是否具有溢出菜单。请参见gtk_toolbar_set_show_arrow（）。
语法
参数
toolbar- 一GtkToolbar
返回
如果工具栏具有溢出菜单，则为 TRUE。
2.4 起
另请参见
GtkToolbar


------------ KeyGTK3gtk_toolbar_get_style ----

gtk_toolbar_get_style
检索工具栏是否具有文本和/或图标。Seegtk_toolbar_set_style（）.
语法
参数
toolbar- 一GtkToolbar
返回
工具栏的当前样式
另请参见
GtkToolbar


------------ KeyGTK3gtk_toolbar_insert ----

gtk_toolbar_insert
将 a 插入到工具栏中的位置位置位置。如果 pos 为 0，则项目将附加到工具栏的开头。如果 pos 是无限制的，则将项目追加到工具栏的末尾。GtkToolItem
语法
参数
toolbar- 一GtkToolbar
item- 一GtkToolItem
pos- 自2.4以来新项目
的位置
另请参见
GtkToolbar


------------ KeyGTK3gtk_toolbar_new ----

gtk_toolbar_new
创建新工具栏。
返回
新创建的工具栏。
另请参见
GtkToolbar


------------ KeyGTK3gtk_toolbar_set_drop_highlight_item ----

gtk_toolbar_set_drop_highlight_item
突出显示工具栏，以了解如果将项目添加到工具栏中index_指示的位置，它将是什么样子。如果项目为 NULL，则关闭突出显示。在这种情况下，index_将被忽略。传递给此函数tool_item不得是任何 widgethierarchy 的一部分。当项目设置为放置突出显示项目时，它不能添加到任何构件层次结构中，也不能用作另一个工具栏的突出显示项目。
语法
参数
toolbar- 一GtkToolbar
tool_item- a ，或 NULL 以转为突出显示。[允许-无]GtkToolItem
index_- 自2.4以来工具栏
上的位置
另请参见
GtkToolbar


------------ KeyGTK3gtk_toolbar_set_icon_size ----

gtk_toolbar_set_icon_size
此功能设置工具栏中常用图标的大小。您可以在添加图标之前和添加图标之后调用它。您设置的大小将覆盖默认图标大小的用户首选项。这应该只用于特殊用途的工具栏，正常应用程序工具栏应该尊重用户对图标大小的偏好。
语法
参数
toolbar- 一GtkToolbar
icon_size- 工具栏中的股票图标应具有。GtkIconSize
另请参见
GtkToolbar


------------ KeyGTK3gtk_toolbar_set_show_arrow ----

gtk_toolbar_set_show_arrow
设置当工具栏没有空间容纳其上的所有项目时是否显示溢出菜单。如果为 TRUE，则没有空间的项目可通过溢出菜单获得。
语法
参数
toolbar- 一GtkToolbar
show_arrow- 是否显示溢出菜单
自2.4
另请参见
GtkToolbar


------------ KeyGTK3gtk_toolbar_set_style ----

gtk_toolbar_set_style
更改工具栏的视图以仅显示图标、仅文本或同时显示两者。
语法
参数
toolbar- 一个.GtkToolbar
style- 工具栏的新样式。
另请参见
GtkToolbar


------------ KeyGTK3gtk_toolbar_unset_icon_size ----

gtk_toolbar_unset_icon_size
取消设置使用 gtk_toolbar_set_icon_size（） 设置的工具栏图标大小，以便使用用户首选项来确定图标大小。
语法
参数
toolbar- 一GtkToolbar
另请参见
GtkToolbar


------------ KeyGTK3gtk_toolbar_unset_style ----

gtk_toolbar_unset_style
取消设置带有 gtk_toolbar_set_style（） 的工具栏样式集，以便使用用户首选项来确定工具栏样式。
语法
参数
toolbar- a [br \=“”GtkToolbar
另请参见
GtkToolbar


------------ KeyGTK3gtk_tooltip_set_custom ----

gtk_tooltip_set_custom
替换包含在工具提示withcustom_widget中的小部件。custom_widget不会在工具提示消失时被销毁。默认情况下，工具提示中嵌入了一个带有 和 的框，可以使用 gtk_tooltip_set_markup（） 和 gtk_tooltip_set_icon（） 进行配置。GtkImageGtkLabel
语法
参数
tooltip- 一GtkTooltip
custom_widget- a 或 NULL 以取消设置旧的自定义小部件。[允许-无]
自 2.12 起GtkWidget
另请参见
GtkTooltip


------------ KeyGTK3gtk_tooltip_set_icon ----

gtk_tooltip_set_icon
将工具提示的图标（位于文本前面）设置为 bepixbuf。如果 pixbuf 为 NULL，则该图像将被隐藏。
语法
参数
tooltip- 一GtkTooltip
pixbuf- a 或 NULL。[允许-无]
自 2.12 起GdkPixbuf
另请参见
GtkTooltip


------------ KeyGTK3gtk_tooltip_set_icon_from_gicon ----

gtk_tooltip_set_icon_from_gicon
将工具提示的图标（位于文本前面）设置为 gicon 指示的图标，其大小由大小指示。如果 gicon 为 NULL，则图像将被隐藏。
语法
参数
tooltip- 一GtkTooltip
gicon- 表示图标，或 NULL。[允许-无]GIcon
size- 股票图标大小。[键入整型]
自 2.20 起
另请参见
GtkTooltip


------------ KeyGTK3gtk_tooltip_set_icon_from_icon_name ----

gtk_tooltip_set_icon_from_icon_name
将工具提示的图标（位于文本前面）设置为由 icon_name 指示的图标，其大小由大小指示。如果icon_name为 NULL，则该图像将被隐藏。
语法
参数
tooltip- 一GtkTooltip
icon_name- 图标名称，或 NULL。[允许-无]
size- 股票图标大小。[键入整型]
自 2.14 起
另请参见
GtkTooltip


------------ KeyGTK3gtk_tooltip_set_icon_from_stock ----

gtk_tooltip_set_icon_from_stock
gtk_tooltip_set_icon_from_stock自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_tooltip_set_icon_from_icon_name（）。将工具提示的图标（位于文本前面）设置为由 stock_id 指示的库存项，其大小由大小指示。如果stock_id为 NULL，则该图像将被隐藏。
语法
参数
tooltip- 一GtkTooltip
stock_id- 股票 ID 或 NULL。[允许-无]
size- 股票图标大小。[键入整型]
自 2.12 起
另请参见
GtkTooltip


------------ KeyGTK3gtk_tooltip_set_markup ----

gtk_tooltip_set_markup
将工具提示的文本设置为标记，该标记使用 Pango 文本标记语言进行标记。如果标记为 NULL，则标签将被隐藏。
语法
参数
tooltip- 一GtkTooltip
markup- 标记字符串（请参阅 Pango 标记格式）或 NULL。[允许-无]
自 2.12 起
另请参见
GtkTooltip


------------ KeyGTK3gtk_tooltip_set_text ----

gtk_tooltip_set_text
将工具提示的文本设置为文本。如果文本为 NULL，则标签将被隐藏。另请参见gtk_tooltip_set_markup（）。
语法
参数
tooltip- 一GtkTooltip
text- 文本字符串或空值。[允许-无]
自 2.12 起
另请参见
GtkTooltip


------------ KeyGTK3gtk_tooltip_set_tip_area ----

gtk_tooltip_set_tip_area
将应用此工具提示内容的小组件区域设置为 rect（在小组件坐标中）。这对于在行和单元格等上设置工具提示特别有用。要将工具提示设置为 ，请参阅以下操作的便利函数：gtk_tree_view_set_tooltip_row（） andgtk_tree_view_set_tooltip_cell（）。GtkTreeViewGtkIconViewsGtkTreeView
语法
参数
tooltip- 一GtkTooltip
rect- a
自2.1起GdkRectangle
另请参见
GtkTooltip


------------ KeyGTK3gtk_tooltip_trigger_tooltip_query ----

gtk_tooltip_trigger_tooltip_query
在显示时触发新的工具提示查询，以便更新当前可见的工具提示，或显示/隐藏当前工具提示。此函数可用于调用，例如，当按键更改了小部件的状态时。
语法
参数
display- a
自2.12起GdkDisplay
另请参见
GtkTooltip


------------ KeyGTK3gtk_tool_button_get_icon_name ----

gtk_tool_button_get_icon_name
返回工具按钮的主题图标的名称，请参见gtk_tool_button_set_icon_name（）。
语法
参数
button- 一GtkToolButton
返回
图标名称或 NULL（如果工具按钮自 2.8 以来没有主题图标
）
另请参见
GtkToolButton


------------ KeyGTK3gtk_tool_button_get_icon_widget ----

gtk_tool_button_get_icon_widget
返回用作图标窗口小部件的窗口小部件按钮。请参见gtk_tool_button_set_icon_widget（）。
语法
参数
button- 一GtkToolButton
返回
用作图标按钮或 NULL 的小部件。[无转移]
2.4 起
另请参见
GtkToolButton


------------ KeyGTK3gtk_tool_button_get_label ----

gtk_tool_button_get_label
返回工具按钮使用的标签，如果工具按钮没有标签，则返回 NULL。或使用库存物料中的标签。返回的字符串归 GTK+ 所有，不得修改或释放。
语法
参数
button- 一GtkToolButton
返回
标签，或 NULL
自 2.4 起
另请参见
GtkToolButton


------------ KeyGTK3gtk_tool_button_get_label_widget ----

gtk_tool_button_get_label_widget
返回用作标签的微件按钮。请参见gtk_tool_button_set_label_widget（）。
语法
参数
button- 一GtkToolButton
返回
用作 labelon 按钮或 NULL 的小部件。[无转移]
自 2.
另请参见
GtkToolButton


------------ KeyGTK3gtk_tool_button_get_stock_id ----

gtk_tool_button_get_stock_id
gtk_tool_button_get_stock_id自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用 gtk_tool_button_get_icon_name（）。返回库存物料的名称。请参见gtk_tool_button_set_stock_id（）。返回的字符串归 GTK+ 所有，不得释放或修改。
语法
参数
button- 一GtkToolButton
返回
按钮的库存项的名称。
2.4 起
另请参见
GtkToolButton


------------ KeyGTK3gtk_tool_button_get_use_underline ----

gtk_tool_button_get_use_underline
返回 label 属性中的下划线是否用作溢出菜单上的助记符菜单项。请参见 gtk_tool_button_set_use_underline（）。
语法
参数
button- 一GtkToolButton
返回
如果 label 属性中的下划线在溢出菜单上的菜单上项上用作辅助项，则为 TRUE。
2.4 起
另请参见
GtkToolButton


------------ KeyGTK3gtk_tool_button_new ----

gtk_tool_button_new
使用icon_widget作为内容并标记标签来创建新的 GtkToolButton。
语法
参数
label- 将用作标签的字符串，或 NULL。[允许-无]
icon_widget- 将用作按钮内容的小部件，或 NULL。[允许-无]
返回
自 2.4 以来的新
品GtkToolButton
另请参见
GtkToolButton


------------ KeyGTK3gtk_tool_button_new_from_stock ----

gtk_tool_button_new_from_stock
gtk_tool_button_new_from_stock自版本 3.10 起已弃用，不应在新编写的代码中使用。请改用 gtk_tool_button_new（）。创建一个包含 astock 项中的图像和文本的新项。某些股票 ID 具有预处理器宏，如 和 。如果stock_id不是库存物料的名称，则为错误。GtkToolButtonGTK_STOCK_OKGTK_STOCK_APPLY
语法
参数
stock_id- 库存项目的名称
返回
自 2.4 以来的新
品GtkToolButton
另请参见
GtkToolButton


------------ KeyGTK3gtk_tool_button_set_icon_name ----

gtk_tool_button_set_icon_name
从命名主题图标设置工具按钮的图标。有关更多详细信息，请参阅文档。“icon_name？属性仅在未被非 NULL ？label?, ?icon_widget 覆盖时才有影响？和“stock_id”属性。GtkIconTheme
语法
参数
button- 一GtkToolButton
icon_name- 主题图标的名称。[允许-无]
自 2.8 起
另请参见
GtkToolButton


------------ KeyGTK3gtk_tool_button_set_icon_widget ----

gtk_tool_button_set_icon_widget
将图标设置为用作按钮上的图标的小部件。如果icon_widget是“无”，则图标由 “stock_id？财产。如果？stock_id？属性也是 NULL，按钮将没有图标。
语法
参数
button- 一GtkToolButton
icon_widget- 用作图标的小部件，或 NULL。[允许-无]
2.4 起
另请参见
GtkToolButton


------------ KeyGTK3gtk_tool_button_set_label ----

gtk_tool_button_set_label
将标签设置为用于工具按钮的标签。标签？属性仅在未被非 NULL 覆盖时具有效果 ？label_widget？财产。如果两个 ？label_widget？和 ？标签？属性为 NULL，标签由 ？stock_id？财产。如果 ？stock_id？属性也是NULL，按钮将没有标签。
语法
参数
button- 一GtkToolButton
label- 将用作标签的字符串，或 NULL。[允许-无]
2.4 起
另请参见
GtkToolButton


------------ KeyGTK3gtk_tool_button_set_label_widget ----

gtk_tool_button_set_label_widget
将label_widget设置为将用作 labelfor 按钮的微件。如果 label_widget 为 NULL，则为 ？label？属性用作标签。如果 ？标签？也是 NULL，库存项中的标签由 ？stock_id？属性用作标签。如果？stock_id？也是 NULL，按钮没有标签。
语法
参数
button- 一GtkToolButton
label_widget- 用作标签的小部件，或 NULL。[允许-无]
2.4 起
另请参见
GtkToolButton


------------ KeyGTK3gtk_tool_button_set_stock_id ----

gtk_tool_button_set_stock_id
gtk_tool_button_set_stock_id自 3.10 版起已弃用，不应在新编写的代码中使用。请改用 gtk_tool_button_set_icon_name（）。设置库存物料的名称。请参见 gtk_tool_button_new_from_stock（）。stock_id属性仅在未被非 NULL ？label 覆盖时才有影响？和？icon_widget？性能。
语法
参数
button- 一GtkToolButton
stock_id- 库存物料的名称，或 NULL。[允许-无]
2.4 起
另请参见
GtkToolButton


------------ KeyGTK3gtk_tool_button_set_use_underline ----

gtk_tool_button_set_use_underline
如果设置，则 label 属性中的下划线指示下一个字符应用于溢出菜单中的助记符快捷键。例如，如果标签属性是“_Open？use_underline是TRUE，工具按钮上的标签将是？打开？并且溢出菜单上的项目将带有下划线 ？O?.工具按钮上显示的标签上从不带有助记符;此属性仅影响溢出菜单上的菜单项。
语法
参数
button- 一GtkToolButton
use_underline- 按钮标签是否具有“_Open”的形式？
2.4 起
另请参见
GtkToolButton


------------ KeyGTK3gtk_tool_item_get_ellipsize_mode ----

gtk_tool_item_get_ellipsize_mode
返回用于tool_item的椭圆大小模式。的自定义子类应调用此函数以找出文本应如何省略。GtkToolItem
语法
参数
tool_item- 一GtkToolItem
返回
a 指示如何对tool_itemshould中的文本进行椭圆化。
自 2.20 起PangoEllipsizeMode
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_expand ----

gtk_tool_item_get_expand
返回是否为tool_item分配了额外空间。请参见gtk_tool_item_set_expand（）。
语法
参数
tool_item- 一GtkToolItem
返回
如果tool_itemis分配了额外空间，则为 TRUE。
2.4 起
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_homogeneous ----

gtk_tool_item_get_homogeneous
返回tool_item是否与其他同类项的大小相同。请参见gtk_tool_item_set_homogeneous（）。
语法
参数
tool_item- 一GtkToolItem
返回
如果项目与其他同类项目的大小相同，则为 TRUE。
2.4 起
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_icon_size ----

gtk_tool_item_get_icon_size
返回用于tool_item的图标大小。的自定义子类应该调用此函数，以找出它们应该使用什么大小的图标。GtkToolItem
语法
参数
tool_item- 一GtkToolItem
返回
a 表示用于tool_item的图标大小。[键入整型]
2.4 起GtkIconSize
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_is_important ----

gtk_tool_item_get_is_important
返回tool_item是否被视为重要。Seegtk_tool_item_set_is_important（）
语法
参数
tool_item- 一GtkToolItem
返回
如果tool_itemis认为重要，则为 true。
2.4 起
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_orientation ----

gtk_tool_item_get_orientation
返回用于tool_item的方向。的自定义子类应该调用此函数，以找出它们应该使用什么大小的图标。GtkToolItem
语法
参数
tool_item- 一GtkToolItem
返回
a 表示
自 2.4 以来用于tool_item的方向GtkOrientation
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_proxy_menu_item ----

gtk_tool_item_get_proxy_menu_item
如果menu_item_id匹配，则传递的字符串 togtk_tool_item_set_proxy_menu_item（） 返回相应的 .的自定义子类应在更改时使用此函数来更新其菜单项。该themenu_item_ids必须匹配可确保 a 不会无意中更改他们未创建的菜单项。GtkMenuItemGtkToolItemGtkToolItemGtkToolItem
语法
参数
tool_item- 一GtkToolItem
menu_item_id- 用于标识菜单项的字符串
返回
传递的 togtk_tool_item_set_proxy_menu_item（），如果menu_item_idsmatch。[无转移]
2.4 起GtkMenuItem
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_relief_style ----

gtk_tool_item_get_relief_style
返回tool_item的浮雕样式。请参见 gtk_button_set_relief（）。的自定义子类应该在信号的处理程序中调用此函数，以找出按钮的样式。GtkToolItem?toolbar_reconfigured?
语法
参数
tool_item- 一GtkToolItem
返回
a 表示用于tool_item的浮雕样式。
2.4 起GtkReliefStyle
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_text_alignment ----

gtk_tool_item_get_text_alignment
返回用于tool_item的文本对齐方式。的自定义子类应调用此函数以找出文本应如何对齐。GtkToolItem
语法
参数
tool_item- 一 ：GtkToolItem
返回
a 表示
自 2.20 以来用于tool_item的水平文本对齐方式gfloat
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_text_orientation ----

gtk_tool_item_get_text_orientation
返回用于tool_item的文本方向。的自定义子类应调用此函数以找出文本应如何定向。GtkToolItem
语法
参数
tool_item- 一GtkToolItem
返回
a 表示
自 2.20 以来用于tool_item的文本方向GtkOrientation
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_text_size_group ----

gtk_tool_item_get_text_size_group
返回用于tool_item中的标签的大小组。的自定义子类应调用此函数，并将大小组用于标签。GtkToolItem
语法
参数
tool_item- 一GtkToolItem
返回
一个。[无转移]
自 2.2 起GtkSizeGroup
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_toolbar_style ----

gtk_tool_item_get_toolbar_style
返回用于tool_item工具栏样式。的自定义子类应该在gtkToolItem：：toolbar_reconfigured的处理程序中调用此函数，以找出以何种样式显示工具栏并相应地更改自身 可能性是：GTK_TOOLBAR_BOTH，这意味着工具项应该显示图标和标签，堆叠verticallyGTK_TOOLBAR_ICONS，这意味着工具栏仅显示iconsGTK_TOOLBAR_TEXT， 这意味着工具项应仅显示textGTK_TOOLBAR_BOTH_HORIZ，这意味着工具项应显示图标和标签，水平排列GtkToolItem
语法
参数
tool_item- 一GtkToolItem
返回
指示用于tool_item的工具栏样式。
2.4 起GtkToolbarStyle
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_use_drag_window ----

gtk_tool_item_get_use_drag_window
返回tool_item是否具有拖动窗口。Seegtk_tool_item_set_use_drag_window（）.
语法
参数
tool_item- 一GtkToolItem
返回
如果tool_itemuses拖动窗口，则为 TRUE。
2.4 起
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_visible_horizontal ----

gtk_tool_item_get_visible_horizontal
返回tool_item在水平停靠的工具栏上是否可见。
语法
参数
tool_item- 一GtkToolItem
返回
如果tool_itemis水平停靠的工具栏上可见，则为 TRUE。
2.4 起
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_get_visible_vertical ----

gtk_tool_item_get_visible_vertical
返回工具栏垂直停靠时tool_item是否可见。请参见 gtk_tool_item_set_visible_vertical（）。
语法
参数
tool_item- 一GtkToolItem
返回
工具栏垂直停靠时tool_itemis可见自 2.4 起
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_group_get_collapsed ----

gtk_tool_item_group_get_collapsed
获取组是折叠还是展开。
语法
参数
group- 一个 GtkToolItemGroup
返回
如果 groupis 已折叠，则为 TRUE;如果自 2.20 起展开，
则为 FALSE
另请参见
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_get_drop_item ----

gtk_tool_item_group_get_drop_item
获取位置 （x， y） 处的工具项。
语法
参数
group- 一GtkToolItemGroup
x- x 位置
y- y 位置
返回
位置 （x， y）。[无转移]
自 2.20 起GtkToolItem
另请参见
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_get_ellipsize ----

gtk_tool_item_group_get_ellipsize
获取组的椭圆化模式。
语法
参数
group- 一GtkToolItemGroup
返回
自 2.20 以来的组
PangoEllipsizeMode
另请参见
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_get_header_relief ----

gtk_tool_item_group_get_header_relief
获取组的标题按钮的救济模式。
语法
参数
group- 一GtkToolItemGroup
返回
自 2.20 以来GtkReliefStyle
另请参见
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_get_item_position ----

gtk_tool_item_group_get_item_position
获取组中项作为索引的位置。
语法
参数
group- 一GtkToolItemGroup
item- 一GtkToolItem
返回
itemin groupor -1 的索引，如果 item 是自 2.20 以来组的子项
另请参见
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_get_label ----

gtk_tool_item_group_get_label
获取组的标签。
语法
参数
group- 一GtkToolItemGroup
返回
组的标签。标签是组的内部字符串，不得修改。请注意，如果自 2.20 起已使用 gtk_tool_item_group_set_label_widget（）设置
了自定义标记，则返回 NULL
另请参见
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_get_label_widget ----

gtk_tool_item_group_get_label_widget
获取组的标签小部件。请参见gtk_tool_item_group_set_label_widget（）。
语法
参数
group- 一GtkToolItemGroup
返回
组的标签微件。[无转移]
自 2.20 起
另请参见
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_get_nth_item ----

gtk_tool_item_group_get_nth_item
获取组中索引处的工具项。
语法
参数
group- 一GtkToolItemGroup
index- 索引
返回
的 at 索引。[无转移]
自 2.20 起GtkToolItem
另请参见
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_get_n_items ----

gtk_tool_item_group_get_n_items
获取组中工具项的数目。
语法
参数
group- 一GtkToolItemGroup
返回
组中
自 2.20 以来的工具项目数
另请参见
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_insert ----

gtk_tool_item_group_insert
在组的子级列表中的位置插入项。
语法
参数
group- 一GtkToolItemGroup
item- 插入到组中GtkToolItem
position- itemin 组的位置，从 0 开始。位置 -1 表示列表的结束。
自 2.20 起
另请参见
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_new ----

gtk_tool_item_group_new
创建带有标签标签的新工具项组。
语法
参数
label- 新组的标签
返回
一个新的.
自 2.20 起GtkToolItemGroup
另请参见
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_set_collapsed ----

gtk_tool_item_group_set_collapsed
设置是应折叠还是展开组。
语法
参数
group- 一GtkToolItemGroup
collapsed-
自2.20以来，这些组是否应该崩溃或扩大
另请参见
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_set_ellipsize ----

gtk_tool_item_group_set_ellipsize
设置组中标签应使用的椭圆化模式。
语法
参数
group- 一GtkToolItemGroup
ellipsize- 组中的标签应
自
2.20 起使用PangoEllipsizeMode
另请参见
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_set_header_relief ----

gtk_tool_item_group_set_header_relief
设置组标题的按钮宽限。有关详细信息，请参见 gtk_button_set_relief（）。
语法
参数
group- 一GtkToolItemGroup
style
-
自2.2GtkReliefStyle
另请参见
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_set_item_position ----

gtk_tool_item_group_set_item_position
设置项在组的子项列表中的位置。
语法
参数
group- 一GtkToolItemGroup
item- 移动到一个新的位置，应该是一个组的孩子。GtkToolItem
position- itemin 组的新位置，从 0 开始。位置 -1 表示列表的结束。
自 2.20 起
另请参见
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_set_label ----

gtk_tool_item_group_set_label
设置工具项组的标签。标签将显示在组的页眉中。
语法
参数
group- 一GtkToolItemGroup
label- 自2.20以来该组
的新人类可读标签
另请参见
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_group_set_label_widget ----

gtk_tool_item_group_set_label_widget
设置工具项组的标签。标签微件显示在组的标题中，以代替通常的标签。
语法
参数
group- 一GtkToolItemGroup
label_widget- 自2.20以来要显示的小部件以代替通常的标签
另请参见
GtkToolItemGroup


------------ KeyGTK3gtk_tool_item_new ----

gtk_tool_item_new
创建新的GtkToolItem
返回
新的
自 2.4 以来GtkToolItem
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_rebuild_menu ----

gtk_tool_item_rebuild_menu
调用此函数向工具栏发出信号，表明tool_item的溢出菜单项已更改。如果溢出菜单在调用此函数时可见，则将重建菜单。当工具项更改其响应信号时将执行的操作时，必须调用该函数。?create-menu-proxy?
语法
参数
tool_item- a
自2.6起GtkToolItem
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_retrieve_proxy_menu_item ----

gtk_tool_item_retrieve_proxy_menu_item
返回上次设置bygtk_tool_item_set_proxy_menu_item（），即。将出现在溢出菜单中。GtkMenuItemGtkMenuItem
语法
参数
tool_item- 一GtkToolItem
返回
这将出现在tool_item的溢出菜单中。[无转移]
2.4 起GtkMenuItem
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_expand ----

gtk_tool_item_set_expand
设置当工具栏上有更多的空间时，是否为tool_item分配额外的空间。效果是，当工具栏变大时，项目变大;当工具栏变小时，项变小。
语法
参数
tool_item- 一GtkToolItem
expand- 自2.4以来是否tool_itemis分配了额外的空间
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_homogeneous ----

gtk_tool_item_set_homogeneous
设置是否要为tool_item分配与其他齐次项相同的大小。效果是所有同构项的宽度将与最宽的项具有相同的宽度。
语法
参数
tool_item- 一GtkToolItem
homogeneous- tool_itemis是否与其他同质项目
的大小相同，因为2.4
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_is_important ----

gtk_tool_item_set_is_important
设置是否应将tool_item视为重要。该类使用此属性来确定在工具栏样式GTK_TOOLBAR_BOTH_HORIZ时是显示还是隐藏其标签。结果是只有工具按钮与 ？is_important？属性集有标签，效果称为“优先级文本”GtkToolButton
语法
参数
tool_item- 一GtkToolItem
is_important- 自2.4以来，工具项是否应被视为重要
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_proxy_menu_item ----

gtk_tool_item_set_proxy_menu_item
设置在工具栏溢出菜单中使用的 。Themenu_item_id用于标识此函数的调用方，并且还应与gtk_tool_item_get_proxy_menu_item（）一起使用。GtkMenuItem
语法
参数
tool_item- 一GtkToolItem
menu_item_id- 用于标识menu_item字符串
menu_item- a 自 2.4 起在溢出菜单中
使用GtkMenuItem
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_tooltip_markup ----

gtk_tool_item_set_tooltip_markup
设置要在项目上显示为工具提示的标记文本。请参见gtk_widget_set_tooltip_markup（）。
语法
参数
tool_item- 一GtkToolItem
markup-
标记文本将用作tool_item
的工具提示，自 2.12 起
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_tooltip_text ----

gtk_tool_item_set_tooltip_text
设置要在项目上显示为工具提示的文本。请参见gtk_widget_set_tooltip_text（）。
语法
参数
tool_item- 一GtkToolItem
text-
自 2.12 起用作tool_item
工具提示的文本
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_use_drag_window ----

gtk_tool_item_set_use_drag_window
设置tool_item是否具有拖动窗口。当 TRUE 时，工具项可以用作通过 gtk_drag_source_set（） 的拖动源。当tool_item有一个拖动窗口时，它将拦截所有事件，甚至是那些本来会发送给tool_item子级的事件。
语法
参数
tool_item- 一GtkToolItem
use_drag_window- 是否tool_itemhas拖动窗口。
2.4 起
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_visible_horizontal ----

gtk_tool_item_set_visible_horizontal
设置当工具栏水平停靠时，tool_item是否可见。
语法
参数
tool_item- 一GtkToolItem
visible_horizontal- 自2.4起，在水平模式下
是否可见tool_itemis可见
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_set_visible_vertical ----

gtk_tool_item_set_visible_vertical
设置当工具栏垂直停靠时，tool_item是否可见。某些工具项（如文本条目）太宽，无法在垂直停靠的工具栏上使用。如果visible_vertical FALSEtool_item将不会显示在垂直停靠的工具栏上。
语法
参数
tool_item- 一GtkToolItem
visible_vertical- 自2.4起，当工具栏处于垂直模式
时，tool_itemis可见
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_item_toolbar_reconfigured ----

gtk_tool_item_toolbar_reconfigured
在tool_item上发出信号。和其他实现使用此函数在子级配置的某些方面发生更改时通知子级。?toolbar_reconfigured?GtkToolbarGtkToolShell
语法
参数
tool_item- a
自2.14起GtkToolItem
另请参见
GtkToolItem


------------ KeyGTK3gtk_tool_palette_add_drag_dest ----

gtk_tool_palette_add_drag_dest
将调色板设置为拖动源（请参见gtk_tool_palette_set_drag_source（）），并将微件设置为从调色板拖动的拖动目标。请参见 gtk_drag_dest_set（）。
语法
参数
palette- 一GtkToolPalette
widget- 一个应该是调色板的拖动目的地GtkWidget
flags- 指定GTK+应该对该小部件的dropson采取哪些操作的标志
targets- 小部件应该支持GtkToolPaletteDragTargets
actions- 自2.20以来小部件应该支持
的内容GdkDragActions
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_drag_item ----

gtk_tool_palette_get_drag_item
从所选内容中获取拖动的项目。这可以是 或 .GtkToolItemGtkToolItemGroup
语法
参数
palette- 一GtkToolPalette
selection- 一GtkSelectionData
返回
所选内容中拖动的项目。[无转移]
自 2.20 起
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_drag_target_group ----

gtk_tool_palette_get_drag_target_group
获取拖动 的 的目标条目。GtkToolItemGroup
返回
的，表示拖动的组。[无转移]
自 2.20 起GtkTargetEntry
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_drag_target_item ----

gtk_tool_palette_get_drag_target_item
获取拖动 的目标条目。GtkToolItem
返回
的，用于拖动的项目。[无转移]
自 2.20 起GtkTargetEntry
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_drop_group ----

gtk_tool_palette_get_drop_group
获取位于位置 （x， y） 的组。
语法
参数
palette- 一GtkToolPalette
x- x 位置
y- y 位置
返回
at position或NULLif没有这样的组。[无转移]
自 2.20 起GtkToolItemGroup
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_drop_item ----

gtk_tool_palette_get_drop_item
获取位置 （x， y） 处的项。请参见 gtk_tool_palette_get_drop_group（）。
语法
参数
palette- 一GtkToolPalette
x- x 位置
y- y 位置
返回
at 位置或 NULL（如果没有此类项目）。[无转移]
自 2.20 起GtkToolItem
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_exclusive ----

gtk_tool_palette_get_exclusive
获取组是否为独占组。请参见gtk_tool_palette_set_exclusive（）。
语法
参数
palette- 一GtkToolPalette
group- a 这是调色板的子级GtkToolItemGroup
返回
TRUE 如果 group 是排他性的
，则为 2.20
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_expand ----

gtk_tool_palette_get_expand
获取是否应为组提供额外的空间。请参见gtk_tool_palette_set_expand（）。
语法
参数
palette- 一GtkToolPalette
group- a 这是调色板的子级GtkToolItemGroup
返回
如果组应给予额外空间，则为 TRUE，否则
为 FALSE 自 2.20 起
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_group_position ----

gtk_tool_palette_get_group_position
获取组在选项板中作为索引的位置。请参见 gtk_tool_palette_set_group_position（）。
语法
参数
palette- 一GtkToolPalette
group- 一GtkToolItemGroup
返回
组的索引或 -1（如果 group 不是调色板的子项
，则为 2.20
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_hadjustment ----

gtk_tool_palette_get_hadjustment
gtk_tool_palette_get_hadjustment自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_scrollable_get_hadjustment（）获取工具选项板的水平调整。
语法
参数
palette- 一GtkToolPalette
返回
调色板的水平调整。[无转移]
自 2.20 起
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_icon_size ----

gtk_tool_palette_get_icon_size
获取工具选项板中图标的大小。请参见 gtk_tool_palette_set_icon_size（）。
语法
参数
palette- 一GtkToolPalette
返回
工具选项板中图标的 。[键入整型]
自 2.20 起GtkIconSize
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_style ----

gtk_tool_palette_get_style
获取工具选项板中项的样式（图标、文本或两者）。
语法
参数
palette- 一GtkToolPalette
返回
工具选项板中项的项。
自 2.20 起GtkToolbarStyle
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_get_vadjustment ----

gtk_tool_palette_get_vadjustment
gtk_tool_palette_get_vadjustment自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_scrollable_get_vadjustment（）获取工具选项板的垂直调整。
语法
参数
palette- 一GtkToolPalette
返回
调色板的垂直调整。[无转移]
自 2.2 起
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_new ----

gtk_tool_palette_new
创建新的工具选项板。
返回
自 2.20 以来的新
品GtkToolPalette
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_set_drag_source ----

gtk_tool_palette_set_drag_source
将工具选项板设置为拖动源。启用工具选项板中的所有组和项目，因为拖动 sourceson 按钮 1 和按钮 3 时按下复制和移动操作。请参见gtk_drag_source_set（）。
语法
参数
palette- 一GtkToolPalette
targets- 自2.20以来小部件应该支持
的内容GtkToolPaletteDragTargets
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_set_exclusive ----

gtk_tool_palette_set_exclusive
设置组是否应为独占组。如果展开独占组，则所有其他组都将折叠。
语法
参数
palette- 一GtkToolPalette
group- a 这是调色板的子级GtkToolItemGroup
exclusive- 该组是否应该自2.20
起是排他性的
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_set_expand ----

gtk_tool_palette_set_expand
设置是否应为组提供额外的空间。
语法
参数
palette- 一GtkToolPalette
group- a 这是调色板的子级GtkToolItemGroup
expand- 自2.20以来是否应该为组提供额外的空间
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_set_group_position ----

gtk_tool_palette_set_group_position
将组的位置设置为工具选项板的索引。如果位置为 0，则组将成为第一个子级，如果位置为 -1，则它将成为最后一个子级。
语法
参数
palette- 一GtkToolPalette
group- a 这是调色板的子级GtkToolItemGroup
position- 自2.20以来的组
的新索引
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_set_icon_size ----

gtk_tool_palette_set_icon_size
设置工具选项板中图标的大小。
语法
参数
palette- 一GtkToolPalette
icon_size- 工具帕莱特中的图标应具有。[键入整型]
自 2.20 起GtkIconSize
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_set_style ----

gtk_tool_palette_set_style
设置工具选项板中项的样式（文本和/或图标）。
语法
参数
palette- 一GtkToolPalette
style- 工具选项板中的项目应具有
自 2.20 以来GtkToolbarStyle
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_unset_icon_size ----

gtk_tool_palette_unset_icon_size
取消设置使用 gtk_tool_palette_set_icon_size（） 设置的工具选项板图标大小，以便用户首选项将用于确定图标大小。
语法
参数
palette- a
自2.20起GtkToolPalette
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_palette_unset_style ----

gtk_tool_palette_unset_style
取消设置带有 gtk_tool_palette_set_style（） 的工具栏样式集，以便用户首选项将用于确定工具栏样式。
语法
参数
palette- a
自2.20起GtkToolPalette
另请参见
GtkToolPalette


------------ KeyGTK3gtk_tool_shell_get_ellipsize_mode ----

gtk_tool_shell_get_ellipsize_mode
检索工具壳的当前椭圆模式。工具项不能直接调用此函数，而应依赖gtk_tool_item_get_ellipsize_mode（）。
语法
参数
shell- 一GtkToolShell
返回
shell
的当前椭圆化模式自 2.20 起
另请参见
GtkToolShell


------------ KeyGTK3gtk_tool_shell_get_icon_size ----

gtk_tool_shell_get_icon_size
检索工具外壳的图标大小。工具项不能直接调用此函数，而应依赖gtk_tool_item_get_icon_size（）。
语法
参数
shell- 一GtkToolShell
返回
外壳图标的当前大小。[键入整型]
自 2.14 起
另请参见
GtkToolShell


------------ KeyGTK3gtk_tool_shell_get_orientation ----

gtk_tool_shell_get_orientation
检索工具壳的当前方向。工具项不得直接调用此函数，而应依赖gtk_tool_item_get_orientation（）。
语法
参数
shell- 一GtkToolShell
返回
shell
的当前方向自 2.14 起
另请参见
GtkToolShell


------------ KeyGTK3gtk_tool_shell_get_relief_style ----

gtk_tool_shell_get_relief_style
返回 shell 上按钮的浮雕样式。工具项不得直接调用此函数，而应依赖gtk_tool_item_get_relief_style（）。
语法
参数
shell- 一GtkToolShell
返回
外壳上纽扣的浮雕风格。
自 2.14 起
另请参见
GtkToolShell


------------ KeyGTK3gtk_tool_shell_get_style ----

gtk_tool_shell_get_style
检索工具壳是否具有文本和/或图标。工具项不能直接调用此函数，而应依赖gtk_tool_item_get_toolbar_style（）。
语法
参数
shell- 一GtkToolShell
返回
自 2.14 以来的 shell
的当前样式
另请参见
GtkToolShell


------------ KeyGTK3gtk_tool_shell_get_text_alignment ----

gtk_tool_shell_get_text_alignment
检索工具外壳的当前文本对齐方式。工具项不能直接调用此函数，而应依赖gtk_tool_item_get_text_alignment（）。
语法
参数
shell- 一GtkToolShell
返回
自 2.20 以来 shell
的当前文本对齐方式
另请参见
GtkToolShell


------------ KeyGTK3gtk_tool_shell_get_text_orientation ----

gtk_tool_shell_get_text_orientation
检索工具外壳的当前文本方向。工具项不得直接调用此函数，而应依赖gtk_tool_item_get_text_orientation（）。
语法
参数
shell- 一GtkToolShell
返回
shell
的当前文本方向自 2.20 起
另请参见
GtkToolShell


------------ KeyGTK3gtk_tool_shell_get_text_size_group ----

gtk_tool_shell_get_text_size_group
检索工具外壳的当前文本大小组。工具项不得直接调用此函数，而是依赖于gtk_tool_item_get_text_size_group（）。而应调用。
语法
参数
shell- 一GtkToolShell
返回
shell 的当前文本大小组。[无转移]
自 2.2 起
另请参见
GtkToolShell


------------ KeyGTK3gtk_tool_shell_rebuild_menu ----

gtk_tool_shell_rebuild_menu
调用此函数会向工具 shell 发出信号，表明工具项的溢出菜单项已更改。如果存在溢出菜单，并且当它调用此函数时可以看到该菜单，则将重新生成该菜单。工具项不得直接调用此函数，而应依赖ongtk_tool_item_rebuild_menu（）。
语法
参数
shell- a
自2.14起GtkToolShell
另请参见
GtkToolShell


------------ KeyGTK3gtk_tree_drag_dest_drag_data_received ----

gtk_tree_drag_dest_drag_data_received
要求 在路径 dest 之前插入一行，从 selection_data派生行的内容。如果 dest 位于树的外部，因此无法在插入之前插入，则将返回 FALSE。此外，如果由于某些特定于模型的原因而未创建新行，则可能会返回 FALSE。是否应该可靠地处理模型中不再存在的dest！GtkTreeDragDest
语法
参数
drag_dest- 一GtkTreeDragDest
dest- 行落在前面
selection_data- 要删除的数据
返回
是否在位置停止之前创建新行
另请参见
gtk3-GtkTreeView-drag-and-drop


------------ KeyGTK3gtk_tree_drag_dest_row_drop_possible ----

gtk_tree_drag_dest_row_drop_possible
确定在给定dest_path之前，在与dest_path相同的深度上是否可以进行跌落。也就是说，我们可以将数据inselection_data放在该位置吗？dest_path不必存在;但是，如果dest_path的父母不存在，则返回值几乎肯定会为FALSE。
语法
参数
drag_dest- 一GtkTreeDragDest
dest_path- 目标行
selection_data- 正在拖动的数据
返回
如果dest_path之前可能掉落，则为 true
另请参见
gtk3-GtkTreeView-drag-and-drop


------------ KeyGTK3gtk_tree_drag_source_drag_data_delete ----

gtk_tree_drag_source_drag_data_delete
要求 删除路径处的行，因为它已通过拖放移动到其他位置。返回 FALSEif 删除失败是因为路径不再存在，或者由于某些特定于模型的原因。应该可靠地处理模型中不再存在的路径！GtkTreeDragSource
语法
参数
drag_source- 一GtkTreeDragSource
path- 被拖动的行
返回
如果行已成功删除，则为 TRUE
另请参见
gtk3-GtkTreeView-drag-and-drop


------------ KeyGTK3gtk_tree_drag_source_drag_data_get ----

gtk_tree_drag_source_drag_data_get
要求 用路径处行的表示来填充selection_data。selection_data>target给出了所需的数据类型。应该可靠地处理模型中不再存在的路径！GtkTreeDragSource
语法
参数
drag_source- 一GtkTreeDragSource
path- 被拖动的行
selection_data- a 用拖动行中的数据填充GtkSelectionData
返回
如果提供了所需类型的数据，则为 TRUE
另请参见
gtk3-GtkTreeView-drag-and-drop


------------ KeyGTK3gtk_tree_drag_source_row_draggable ----

gtk_tree_drag_source_row_draggable
询问特定行是否可以用作 DND 操作的源。如果源未实现此接口，则假定该行可拖动。GtkTreeDragSource
语法
参数
drag_source- 一GtkTreeDragSource
path- 用户正在启动拖动的行
返回
如果可以拖动行，则为 TRUE
另请参见
gtk3-GtkTreeView-drag-and-drop


------------ KeyGTK3gtk_tree_get_row_drag_data ----

gtk_tree_get_row_drag_data
从目标typeGTK_TREE_MODEL_ROW的选择数据中获取tree_model和路径。通常从drag_data_received处理程序调用。仅当selection_data源自调用此函数的同一进程时，才能使用此函数，因为正在传递指向树模型的指针。如果您不在同一进程中，那么您将受到内存损坏。在drag_data_received处理程序中，可以假定GTK_TREE_MODEL_ROW类型的选择数据来自当前进程。必须释放返回的路径withgtk_tree_path_free（）。GtkTreeDragDest
语法
参数
selection_data- 一GtkSelectionData
tree_model- 一个.[输出]GtkTreeModel
path- tree_model行。[输出]
返回
如果selection_datahad目标类型GTK_TREE_MODEL_ROW，则为 true，否则为 vali
另请参见
gtk3-GtkTreeView-drag-and-drop


------------ KeyGTK3gtk_tree_iter_copy ----

gtk_tree_iter_copy
创建动态分配的树迭代器作为迭代器的副本。此函数不适用于应用程序，因为您可以按值复制结构（GtkTreeIter new_iter = iter;）。您必须使用gtk_tree_iter_free（） 释放此迭代器。
语法
参数
iter- 一GtkTreeIter
返回
新分配的迭代器副本
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_iter_free ----

gtk_tree_iter_free
释放已由 gtk_tree_iter_copy（） 分配的迭代器。此函数主要用于语言绑定。
语法
参数
iter- 动态分配的树迭代器
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_filter_clear_cache ----

gtk_tree_model_filter_clear_cache
几乎永远不应该调用此函数。它清除了尚未withgtk_tree_model_ref_node（） 重新引用的任何缓存迭代器的筛选器。如果正在筛选的子模型是静态的（并且不经常更改），并且存在大量对节点的未更改访问，则这可能很有用。作为此函数的副作用，所有未引用的迭代器都将无效。
语法
参数
filter- 一.
自 2.GtkTreeModelFilter
另请参见
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_convert_child_iter_to_iter ----

gtk_tree_model_filter_convert_child_iter_to_iter
将filter_iter设置为指向筛选器中与child_iter所指向的行相对应的行。如果未设置filter_iter，则返回 FALSE。
语法
参数
filter- 一.GtkTreeModelFilter
filter_iter- 未初始化的 .[输出]GtkTreeIter
child_iter- 指向子模型上某一行的有效指针。GtkTreeIter
返回
true，如果filter_iterwas集，即如果child_iteris指向子模型中可见行的无效迭代器。
2.4 起
另请参见
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_convert_child_path_to_path ----

gtk_tree_model_filter_convert_child_path_to_path
child_path转换为相对于筛选器的路径。也就是说，child_pathpoints子模型中的路径。返回的路径将指向已筛选模型中的同一行。如果child_path不是子模型上的有效路径，或者指向在筛选器中不可见的行，则返回 NULLis。
语法
参数
filter- 一.GtkTreeModelFilter
child_path- A 转换。GtkTreePath
返回
新分配的 ，或 NULL。
2.4 起GtkTreePath
另请参见
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_convert_iter_to_child_iter ----

gtk_tree_model_filter_convert_iter_to_child_iter
将child_iter设置为指向filter_iter所指向的行。
语法
参数
filter- 一.GtkTreeModelFilter
child_iter- 未初始化的 .[输出]GtkTreeIter
filter_iter- 指向筛选器上的行的有效指向。
2.4 起GtkTreeIter
另请参见
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_convert_path_to_child_path ----

gtk_tree_model_filter_convert_path_to_child_path
将filter_path转换为筛选器子模型上的路径。也就是说，filter_path指向过滤器中的某个位置。返回的路径将指向模型中未筛选的同一位置。如果filter_pathdoes未指向子模型中的位置，则返回 NULL。
语法
参数
filter- 一.GtkTreeModelFilter
filter_path- A 转换。GtkTreePath
返回
新分配的 ，或 NULL。
2.4 起GtkTreePath
另请参见
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_get_model ----

gtk_tree_model_filter_get_model
返回指向筛选器的子模型的指针。
语法
参数
filter- 一.GtkTreeModelFilter
返回
指向 .[无转移]
2.4 起GtkTreeModel
另请参见
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_new ----

gtk_tree_model_filter_new
创建一个新的 ，其中child_model作为虚拟根child_modeland根。GtkTreeModel
语法
参数
child_model- 一.GtkTreeModel
root- A 或空。[允许-无]GtkTreePath
返回
一个新的.[转移完整]
2.4 起GtkTreeModel
另请参见
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_refilter ----

gtk_tree_model_filter_refilter
为子模型中的每一行发出 ：：row_changed，这会导致筛选器重新评估某一行是否可见。
语法
参数
filter- 一.
2.4 起GtkTreeModelFilter
另请参见
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_set_modify_func ----

gtk_tree_model_filter_set_modify_func
使用n_columns和类型参数，您可以为此模型提供一个列类型数组（将向父模型/视图公开）。函数、数据和销毁参数用于指定修改函数。修改函数将针对每个数据访问进行调用，修改函数的目标是返回应使用修改函数的参数显示在指定位置的数据。
语法
参数
filter- 一.GtkTreeModelFilter
n_columns- 筛选器模型中的列数。
types- 列的。[数组长度 = n_columns]GTypes
func- 一GtkTreeModelFilterModifyFunc
data- 要传递给修改函数的用户数据，或 NULL。[允许-无]
destroy- 销毁数据通知程序，或 NULL。[允许-无]
2.4 起
另请参见
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_set_visible_column ----

gtk_tree_model_filter_set_visible_column
将child_model的列设置为筛选器应在其中查找可见性信息的列。列应该是typeG_TYPE_BOOLEAN列，其中 TRUE 表示行可见，而 FALSEif 则不可见。
语法
参数
filter- 一.GtkTreeModelFilter
column- A 是包含可见信息的列。
2.4 起gint
另请参见
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_filter_set_visible_func ----

gtk_tree_model_filter_set_visible_func
将滤镜时使用的可见函数设置为 func。如果给定行应可见，则该函数应返回 TRUE，否则将返回 FALSE。如果函数计算的条件随时间而变化（例如，因为它依赖于某些全局参数），则必须调用gtk_tree_model_filter_refilter（）来保持模型的可见性信息是最新的。请注意，每当插入行时，都会调用 func，此时它可能仍然是空的。因此，可见函数应特别注意空行，如下面的示例所示。12345678910111213141516[/syntax] [syntax]static gbooleanvisible_func （GtkTreeModel *model， GtkTreeIter *iter， gpointer data）{ // Visible if row is non-empty and first column is ？HI？ gchar *str; gboolean visible = FALSE; gtk_tree_model_get （model， iter， 0， &str， -1）; if （str && strcmp （str， “HI”） == 0） visible = TRUE; g_free （str）; return visible;}[/语法]
语法
参数
filter- 一.GtkTreeModelFilter
func- A，可见函数。GtkTreeModelFilterVisibleFunc
data- 要传递给可见函数的用户数据，或 NULL。[允许-无]
destroy- 销毁数据通知程序，或 NULL。[允许-无]
2.4 起
另请参见
GtkTreeModelFilter


------------ KeyGTK3gtk_tree_model_foreach ----

gtk_tree_model_foreach
以深度优先的方式在模型中的每个节点上调用 func。如果 func 返回 TRUE，则树不再行走，gtk_tree_model_foreach（） 返回。
语法
参数
model- 一GtkTreeModel
func- 要在每行上调用的函数。[范围调用]
user_data- 用户数据传递到函数
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get ----

gtk_tree_model_get
获取迭代器引用的行中一个或多个单元格的值。变量参数列表应包含整数列号，每个列号后跟一个存储所检索值的位置。该列表以 -1 结尾。例如，要从类型为 G_TYPE_STRING 的列 0 获取值，可以编写：gtk_tree_model_get（model，iter，0， &place_string_here， -1），其中 place_string_here 是要用字符串填充的。类型为 G_TYPE_OBJECT 的返回值必须未引用，类型为 G_TYPE_STRING 或 G_TYPE_BOXED 的值必须释放。其他值按值传递。gchararray
语法
参数
tree_model- 一GtkTreeModel
iter- tree_model中的一行
...- 列号和值返回位置对，以 -1 结尾
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_column_type ----

gtk_tree_model_get_column_type
返回列的类型。
语法
参数
tree_model- 一GtkTreeModel
index_- 列索引
返回
列的类型。[无转移]
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_flags ----

gtk_tree_model_get_flags
返回此接口支持的一组标志。这些标志是 的按位组合。在tree_model的生存期内，支持的标志不应更改。GtkTreeModelFlags
语法
参数
tree_model- 一GtkTreeModel
返回
此接口支持的标志
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_iter ----

gtk_tree_model_get_iter
将 iter 设置为指向 path 的有效迭代器。如果 path 不存在，则将 iter 设置为无效的迭代器并返回 FALSE。
语法
参数
tree_model- 一GtkTreeModel
iter- 未初始化的 .[输出]GtkTreeIter
path- 的GtkTreePath
返回
TRUE，如果 iterwas set
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_iter_first ----

gtk_tree_model_get_iter_first
使用树中的第一个迭代器（路径“0”处的迭代器）初始化迭代器并返回 TRUE。如果树为空，则返回FALSE。
语法
参数
tree_model- 一GtkTreeModel
iter- 未初始化的 .[输出]GtkTreeIter
返回
TRUE，如果 iterwas set
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_iter_from_string ----

gtk_tree_model_get_iter_from_string
将 iter 设置为指向path_string的有效迭代器（如果存在）。否则，iter 将保持无效，并返回 FALSE。
语法
参数
tree_model- 一GtkTreeModel
iter- 未初始化的 .[输出]GtkTreeIter
path_string- 一个字符串表示GtkTreePath
返回
TRUE，如果 iterwas set
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_n_columns ----

gtk_tree_model_get_n_columns
返回tree_model支持的列数。
语法
参数
tree_model- 一GtkTreeModel
返回
列数
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_path ----

gtk_tree_model_get_path
返回由迭代器引用的新创建。应使用 gtk_tree_path_free（） 释放此路径。GtkTreePath
语法
参数
tree_model- 一GtkTreeModel
iter- 的GtkTreeIter
返回
新创建的GtkTreePath
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_string_from_iter ----

gtk_tree_model_get_string_from_iter
生成迭代器的字符串表示形式。此字符串是 ？：？分隔的数字列表。例如，？4：10：0：3？将是此字符串的可接受返回值。
语法
参数
tree_model- 一GtkTreeModel
iter- 一GtkTreeIter
返回
新分配的字符串。必须使用 g_free（） 释放。
自 2.2 起
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_valist ----

gtk_tree_model_get_valist
请参阅gtk_tree_model_get（），此版本需要va_listfor语言绑定才能使用。
语法
参数
tree_model- 一GtkTreeModel
iter- tree_model中的一行
var_args- 列/返回位置对的va_list
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_get_value ----

gtk_tree_model_get_value
初始化值并将其设置为 at 列的值。当使用值时，需要调用g_value_unset（）以释放任何分配的内存。
语法
参数
tree_model- 一GtkTreeModel
iter- 的GtkTreeIter
column- 要查找值的列
value- 要设置的空值。[输出][无转移]GValue
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_iter_children ----

gtk_tree_model_iter_children
将 iter 设置为指向父级的第一个子级。如果父级没有子级，则返回 FALSE，并将 iter 设置为无效。调用此函数后，父节点将保持有效节点。如果父节点为 NULL，则返回第一个节点，等效togtk_tree_model_get_iter_first（tree_model，iter）;
语法
参数
tree_model- 一GtkTreeModel
iter- 要设置为子项的新项。[输出]GtkTreeIter
parent- 或 NULL。[允许-无]GtkTreeIter
返回
TRUE，如果 child 已设置为第一个孩子
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_iter_has_child ----

gtk_tree_model_iter_has_child
如果 iter 有子项，则返回 TRUE，否则返回 FALSE。
语法
参数
tree_model- 一GtkTreeModel
iter- 儿童测试GtkTreeIter
返回
如果 iter 有孩子，则为 TRUE
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_iter_next ----

gtk_tree_model_iter_next
将 iter 设置为指向当前级别上它后面的节点。如果没有下一个迭代器，则返回 FALSE，并且 iter 设置为无效。
语法
参数
tree_model- 一GtkTreeModel
iter- .[在]GtkTreeIter
返回
TRUE（如果 iter 已更改为下一个节点）为 TRUE
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_iter_nth_child ----

gtk_tree_model_iter_nth_child
使用给定索引将 iter 设置为父级的子级。第一个索引为 0。如果 n 太大，或者父级没有子级，则将其设置为无效迭代器并返回 FALSE。调用此函数后，parent 将保持为有效节点。作为特殊情况，如果父节点为 NULL，则设置第 n 个根节点。
语法
参数
tree_model- 一GtkTreeModel
iter- 设置为第 n 个子项。[输出]GtkTreeIter
parent- 从中获取子项，或 NULL。[允许-无]GtkTreeIter
n- 所需孩子的索引
返回
TRUE，如果父母有第 n 个孩子
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_iter_n_children ----

gtk_tree_model_iter_n_children
返回 iter 具有的子项数。作为特殊情况，如果 iter 为 NULL，则返回顶级节点的数量。
语法
参数
tree_model- 一GtkTreeModel
iter- 或 NULL。[允许-无]GtkTreeIter
返回
迭代器的子项数
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_iter_parent ----

gtk_tree_model_iter_parent
将 iter 设置为子项的父项。如果子节点处于顶层，并且没有父节点，则将该对象设置为无效的迭代器，并返回 FALSE。在调用此函数后，child 将保持为有效节点。
语法
参数
tree_model- 一GtkTreeModel
iter- 要设置为父级的新项。[输出]GtkTreeIter
child- 的GtkTreeIter
返回
TRUE，如果 iteris 设置为子项的父项
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_iter_previous ----

gtk_tree_model_iter_previous
将 iter 设置为指向当前级别的上一个节点。如果没有以前的迭代器，则返回 FALSE，并将 iter 设置为无效。
语法
参数
tree_model- 一GtkTreeModel
iter- .[在]GtkTreeIter
返回
如果 iter 已更改为自 3.0 以来的上一个节点
，则为 TRUE
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_ref_node ----

gtk_tree_model_ref_node
允许树引用节点。这是模型要实现的可选方法。更具体地说，模型可能会忽略此调用，因为它主要出于性能原因而存在。此函数主要是为了让视图缓存模型知道何时显示节点（以及是否缓存该节点）。显示意味着节点位于展开的分支中，而不管该节点当前在视口中是否可见。例如，基于文件系统的模型不希望将整个文件层次结构保留在内存中，而只想将当前视图显示的部分保留在内存中。应该期望模型能够获得独立于其 reffed 状态的迭代器。
语法
参数
tree_model- 一GtkTreeModel
iter- 的GtkTreeIter
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_rows_reordered ----

gtk_tree_model_rows_reordered
在tree_model上发出信号。当模型的行已重新排序时，应调用此函数。?rows-reordered?
语法
参数
tree_model- 一GtkTreeModel
path- 指向其子项已重新排序的树节点GtkTreePath
iter- 指向其子节点已重新排序的有效指向，如果路径深度为 0，则为 NULLGtkTreeIter
new_order- 一个整数数组，将每个子级的当前位置映射到其重新排序之前的旧位置，即new_order[newpos] = oldpos[br \=“”
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_row_changed ----

gtk_tree_model_row_changed
在tree_model上发出信号。?row-changed?
语法
参数
tree_model- 一GtkTreeModel
path- 指向已更改行的指针GtkTreePath
iter- 指向已更改行的有效指向GtkTreeIter
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_row_deleted ----

gtk_tree_model_row_deleted
在tree_model上发出信号。这应由模型在删除行后调用。路径所指向的位置应该是行之前所在的位置。它可能不再是一个有效的位置。删除的节点不会被取消引用，这意味着不应释放已删除节点上的任何异常引用。?row-deleted?
语法
参数
tree_model- 一GtkTreeModel
path- 指向已删除行的上一个位置GtkTreePath
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_row_has_child_toggled ----

gtk_tree_model_row_has_child_toggled
发出信号ontree_model。这应该在节点的子状态更改后由模型调用。?row-has-child-toggled?
语法
参数
tree_model- 一GtkTreeModel
path- 指向已更改行的指针GtkTreePath
iter- 指向已更改行的有效指向GtkTreeIter
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_row_inserted ----

gtk_tree_model_row_inserted
在tree_model上发出信号。?row-inserted?
语法
参数
tree_model- 一GtkTreeModel
path- 指向插入的行GtkTreePath
iter- 指向插入行的有效指针GtkTreeIter
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_model_sort_clear_cache ----

gtk_tree_model_sort_clear_cache
几乎永远不应该调用此函数。它清除tree_model_sortof尚未withgtk_tree_model_ref_node（） 中引用的任何缓存迭代器。如果排序的子模型是静态的（并且不经常更改），并且对节点的访问很多未删除，这可能很有用。作为此函数的副作用，所有未引用者都将无效。
语法
参数
tree_model_sort- 一GtkTreeModelSort
另请参见
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_sort_convert_child_iter_to_iter ----

gtk_tree_model_sort_convert_child_iter_to_iter
将sort_iter设置为指向tree_model_sort中与child_iter所指向的行相对应的行。如果未设置sort_iter，FALSEis 将返回。注意：布尔值仅在 2.14 之后返回。
语法
参数
tree_model_sort- 一GtkTreeModelSort
sort_iter- 未初始化的 .[输出]GtkTreeIter
child_iter- 指向子模型上某行的有效指针GtkTreeIter
返回
TRUE，如果sort_iterwas设置，即如果sort_iteris指向子模型中可见行的无效迭代器指针。
另请参见
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_sort_convert_child_path_to_path ----

gtk_tree_model_sort_convert_child_path_to_path
将child_path转换为相对于tree_model_sort的路径。也就是说，child_path指向子模型中的路径。返回的路径将指向排序模型中的同一行。如果child_path不是子模型上的有效路径，则返回 NULL。
语法
参数
tree_model_sort- 一GtkTreeModelSort
child_path- A 转换GtkTreePath
返回
新分配的 或 NULLGtkTreePath
另请参见
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_sort_convert_iter_to_child_iter ----

gtk_tree_model_sort_convert_iter_to_child_iter
将child_iter设置为指向sorted_iter所指向的行。
语法
参数
tree_model_sort- 一GtkTreeModelSort
child_iter- 未初始化的 .[输出]GtkTreeIter
sorted_iter- 指向tree_model_sort行的有效指针。GtkTreeIter
另请参见
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_sort_convert_path_to_child_path ----

gtk_tree_model_sort_convert_path_to_child_path
将sorted_path转换为tree_model_sort子模型上的路径。也就是说，sorted_path指向tree_model_sort中的某个位置。返回的路径将指向模型中未排序的相同位置。如果sorted_path不指向子模型中的位置，则返回 NULL。
语法
参数
tree_model_sort- 一GtkTreeModelSort
sorted_path- A 转换GtkTreePath
返回
新分配的 或 NULLGtkTreePath
另请参见
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_sort_get_model ----

gtk_tree_model_sort_get_model
返回正在排序的模型。GtkTreeModelSort
语法
参数
tree_model- 一GtkTreeModelSort
返回
正在排序的“子模型”。[无转移]
另请参见
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_sort_iter_is_valid ----

gtk_tree_model_sort_iter_is_valid
此功能很慢。仅将其用于调试和/或测试目的。检查给定的迭代器是否是此 的有效迭代器。GtkTreeModelSort
语法
参数
tree_model_sort- 一.GtkTreeModelSort
iter- 一.GtkTreeIter
返回
如果迭代器有效，则为 TRUE;如果迭代器无效，则为 FALSE。
自 2.
另请参见
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_sort_new_with_model ----

gtk_tree_model_sort_new_with_model
创建一个新的 ，child_model作为子模型。GtkTreeModel
语法
参数
child_model- 一GtkTreeModel
返回
一个新的.[转移完整]GtkTreeModel
另请参见
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_sort_reset_default_sort_func ----

gtk_tree_model_sort_reset_default_sort_func
这会将默认排序函数重置为位于“未排序”中州。也就是说，它与子模型的顺序相同。它将重新排序模型以与子模型相同的顺序，仅当州。GtkTreeModelSort
语法
参数
tree_model_sort- 一GtkTreeModelSort
另请参见
GtkTreeModelSort


------------ KeyGTK3gtk_tree_model_unref_node ----

gtk_tree_model_unref_node
允许树取消引用节点。这是模型要实现的可选方法。更具体地说，模型可能会忽略此调用，因为它主要出于性能原因而存在。有关其含义的详细信息，请参阅gtk_tree_model_ref_node（）。请注意，被删除的节点不会被取消引用。
语法
参数
tree_model- 一GtkTreeModel
iter- 的GtkTreeIter
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_append_index ----

gtk_tree_path_append_index
将新索引追加到路径。因此，路径的深度会增加。
语法
参数
path- 一GtkTreePath
index_- 索引
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_compare ----

gtk_tree_path_compare
比较两条路径。如果 a 出现在树中 b 之前，则返回 -1。如果 b 出现在 a 之前，则返回 1。如果两个节点相等，则返回 0。
语法
参数
a- 一GtkTreePath
b- a 比较GtkTreePath
返回
a 和 b 的相对位置
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_copy ----

gtk_tree_path_copy
创建新的路径副本。GtkTreePath
语法
参数
path- 一GtkTreePath
返回
一个新的GtkTreePath
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_down ----

gtk_tree_path_down
移动路径以指向当前路径的第一个子路径。
语法
参数
path- 一GtkTreePath
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_free ----

gtk_tree_path_free
释放路径。如果 path 为 NULL，则只返回。
语法
参数
path- 一个.[允许-无]GtkTreePath
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_get_depth ----

gtk_tree_path_get_depth
返回路径的当前深度。
语法
参数
path- 一GtkTreePath
返回
路径深度
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_get_indices ----

gtk_tree_path_get_indices
返回路径的当前索引。这是一个整数数组，每个整数表示树中的一个节点。不应释放此值。数组的长度可以通过gtk_tree_path_get_depth（） 获得。
语法
参数
path- 一GtkTreePath
返回
当前索引或 NULL
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_get_indices_with_depth ----

gtk_tree_path_get_indices_with_depth
返回路径的当前索引。这是一个整数数组，每个整数表示树中的一个节点。它还返回数组中的元素数。不应释放数组。
语法
参数
path- 一GtkTreePath
depth- 返回整数数组中返回的元素数的位置，或 NULL。[输出][允许-无]
返回
当前指示，或 NULL。[数组长度 = 深度][无转移]
自 3.0 起
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_is_ancestor ----

gtk_tree_path_is_ancestor
如果子体是路径的子体，则返回 TRUE。
语法
参数
path- 一GtkTreePath
descendant- 另一个GtkTreePath
返回
如果子体包含在路径内，则为 TRUE
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_is_descendant ----

gtk_tree_path_is_descendant
如果 path 是祖先的后代，则返回 TRUE。
语法
参数
path- 一GtkTreePath
ancestor- 另一个GtkTreePath
返回
TRUE，如果祖先在其下方的某个位置包含路径
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_new ----

gtk_tree_path_new
创建新的 .这是指一行。GtkTreePath
返回
新创建的 .GtkTreePath
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_new_first ----

gtk_tree_path_new_first
创建新的 .此路径的字符串表示形式为 ？0？。GtkTreePath
返回
一个新的GtkTreePath
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_new_from_indices ----

gtk_tree_path_new_from_indices
创建一个新路径，first_index和 varargs 作为索引。
语法
参数
first_index- 第一个整数
...- 以 -1 结尾的整数列表
返回
新创建的
自 2.2GtkTreePath
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_new_from_indicesv ----

gtk_tree_path_new_from_indicesv
使用给定的索引长度数组创建新路径。
语法
参数
indices- 索引数组。[数组长度 = 长度]
length- 索引数组的长度
返回
自 3.12 以来新创建的
GtkTreePath
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_new_from_string ----

gtk_tree_path_new_from_string
创建一个新的初始化为 path.path 应为以冒号分隔的数字列表。例如，字符串 ？10：4：0？将创建一个 depth3 路径，该路径指向根节点的第 11 个子节点、该第 11 个子节点的第 5 个子节点以及该第 5 个子节点的第 1 个子节点。如果传入的路径字符串无效，则返回 NULL。GtkTreePath
语法
参数
path- 路径的字符串表示形式
返回
新创建的 或空GtkTreePath
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_next ----

gtk_tree_path_next
移动路径以指向当前深度的下一个节点。
语法
参数
path- 一GtkTreePath
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_prepend_index ----

gtk_tree_path_prepend_index
将新索引附加到路径。因此，路径的深度会增加。
语法
参数
path- 一GtkTreePath
index_- 索引
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_prev ----

gtk_tree_path_prev
将路径移动到当前深度处的上一个节点（如果存在）。
语法
参数
path- 一GtkTreePath
返回
如果 path 具有前一个节点，并且已进行移动，则为 TRUE
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_to_string ----

gtk_tree_path_to_string
生成路径的字符串表示形式。此字符串是 ？：？分隔的数字列表。例如，？4：10：0：3？将是此字符串的可接受返回值。
语法
参数
path- 一GtkTreePath
返回
新分配的字符串。必须使用 g_free（） 释放。
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_path_up ----

gtk_tree_path_up
移动路径以指向其父节点（如果它具有父节点）。
语法
参数
path- 一GtkTreePath
返回
如果路径有父级，并且移动已进行，则为 TRUE
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_copy ----

gtk_tree_row_reference_copy
复制 .GtkTreeRowReference
语法
参数
reference- 一GtkTreeRowReference
返回
自2.2起的参考文献
副本
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_deleted ----

gtk_tree_row_reference_deleted
让bygtk_tree_row_reference_new_proxy（） 创建的一组行引用知道该模型发出了信号。?row-deleted?
语法
参数
proxy- 一GObject
path- 已删除的路径位置
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_free ----

gtk_tree_row_reference_free
免费参考。引用可能为空
语法
参数
reference- a 或 NULL。[允许-无]GtkTreeRowReference
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_get_model ----

gtk_tree_row_reference_get_model
返回行引用正在监视的模型。
语法
参数
reference- 一GtkTreeRowReference
返回
模型。[无转移]
自 2.8 起
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_get_path ----

gtk_tree_row_reference_get_path
返回行引用当前指向的路径，如果指向的路径不再有效，则返回 NULL。
语法
参数
reference- 一GtkTreeRowReference
返回
当前路径，或 NULL
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_inserted ----

gtk_tree_row_reference_inserted
让bygtk_tree_row_reference_new_proxy（） 创建的一组行引用知道该模型发出了信号。?row-inserted?
语法
参数
proxy- 一GObject
path- 插入的行位置
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_new ----

gtk_tree_row_reference_new
基于路径创建行引用。只要此引用存在，它就会一直指向指向路径的节点。将传播模型上发生的任何更改，并相应地更新路径。如果路径不是模型中的有效路径，则返回 NULL。
语法
参数
model- 一GtkTreeModel
path- 一个有效的监控GtkTreePath
返回
新分配的 ，或 NULLGtkTreeRowReference
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_new_proxy ----

gtk_tree_row_reference_new_proxy
您不需要使用此功能。基于路径创建行引用。只要此引用存在，它就会一直指向指向路径的节点。如果 path 在模型中不是有效路径，则返回 NULL。但是，与使用gtk_tree_row_reference_new（）创建的引用不同，它不会侦听模型的更改。行引用的创建者必须usinggtk_tree_row_reference_inserted（）、gtk_tree_row_reference_deleted（）、gtk_tree_row_reference_reordered（） 显式执行此操作。当发出模型上的对应信号时，每个代理必须只调用一次这些函数。此单个调用将更新该代理的所有行引用。由于内置的GTK +对象已经在内部使用此机制，因此将它们用作代理对象将产生不可预测的结果。此外，由于内部实现的原因，将同一对象与模型和代理传递到一样不起作用。这种类型的行引用主要是指需要仔细监视行引用何时更新自身的结构，并且大多数应用程序通常不需要这些结构。GtkTreeView
语法
参数
proxy- 代理GObject
model- 一GtkTreeModel
path- 一个有效的监控GtkTreePath
返回
新分配的 ，或 NULLGtkTreeRowReference
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_reordered ----

gtk_tree_row_reference_reordered
让bygtk_tree_row_reference_new_proxy（） 创建的一组行引用知道该模型发出了信号。?rows-reordered?
语法
参数
proxy- 一GObject
path- 重新排序信号的父路径
iter- 指向重新排序的父级的迭代器
new_order- 行的新顺序
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_row_reference_valid ----

gtk_tree_row_reference_valid
如果引用为非 NULL 并引用当前有效路径，则返回 TRUE。
语法
参数
reference- a 或 NULL。[允许-无]GtkTreeRowReference
返回
如果引用指向有效路径，则为 TRUE
另请参见
GtkTreeModel


------------ KeyGTK3gtk_tree_selection_count_selected_rows ----

gtk_tree_selection_count_selected_rows
返回已在树中选择的行数。
语法
参数
selection- 一.GtkTreeSelection
返回
所选行数。
自 2.2 起
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_get_mode ----

gtk_tree_selection_get_mode
鑾峰彇鐢ㄤ簬閫夋嫨鐨勯€夋嫨妯″紡銆係eegtk_tree_selection_set_mode锛堬級.
璇硶
鍙傛暟
selection- 涓€GtkTreeSelection
杩斿洖
褰撳墠閫夋嫨妯″紡
鍙﹁鍙傝
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_get_selected ----

gtk_tree_selection_get_selected
如果选定内容设置为 或 ，则将 iter 设置为当前选定的节点。如果您只想测试所选内容是否具有任何选定的节点，则 iter 可能为 NULL。模型是用当前模型填充的，以方便。如果将所选内容设置为 .，则此函数将不起作用。GTK_SELECTION_SINGLEGTK_SELECTION_BROWSEGTK_SELECTION_MULTIPLE
语法
参数
selection- 一.GtkTreeSelection
model- 要设置为 或 NULL 的指针。[输出][允许-无][无转移]GtkTreeModel
iter- 或空值。[输出][允许-无]GtkTreeIter
返回
TRUE（如果存在选定的节点）。
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_get_selected_rows ----

gtk_tree_selection_get_selected_rows
创建所有选定行的路径列表。此外，如果计划在调用此函数后修改模型，则可能需要将返回的列表转换为 .为此，您可以使用 gtk_tree_row_reference_new（）。要释放返回值，请使用：1[/语法] [语法]g_list_free_full（列表，（GDestroyNotify）gtk_tree_path_free）;[/语法]GtkTreeRowReferences
语法
参数
selection- 一.GtkTreeSelection
model- 要设置为 或 NULL 的指针。[输出][允许-无][无转移]GtkTreeModel
返回
A，其中包含每个选定行的 。[元素型 GtkTreePath][转移完整]
自 2.2 起GListGtkTreePath
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_get_select_function ----

gtk_tree_selection_get_select_function
返回当前选择函数。
语法
参数
selection- 一.GtkTreeSelection
返回
函数。
自 2.14 起
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_get_tree_view ----

gtk_tree_selection_get_tree_view
返回与所选内容关联的树视图。
语法
参数
selection- 一GtkTreeSelection
返回
一个。[无转移]GtkTreeView
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_get_user_data ----

gtk_tree_selection_get_user_data
返回选择函数的用户数据。
语法
参数
selection- 一.GtkTreeSelection
返回
用户数据。
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_iter_is_selected ----

gtk_tree_selection_iter_is_selected
如果当前选择了位于 iter 处的行，则返回 TRUE。
语法
参数
selection- 一GtkTreeSelection
iter- 有效GtkTreeIter
返回
TRUE，如果选择了 iteris
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_path_is_selected ----

gtk_tree_selection_path_is_selected
如果当前选择了路径所指向的行，则返回 TRUE。如果路径未指向有效位置，则返回 FALSE
语法
参数
selection- 一.GtkTreeSelection
path- A 检查选择。GtkTreePath
返回
如果选择了路径，则为 TRUE。
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_selected_foreach ----

gtk_tree_selection_selected_foreach
为每个选定节点调用一个函数。请注意，您无法从此函数中修改树或选择。因此，gtk_tree_selection_get_selected_rows（） 可能更有用。
语法
参数
selection- 一.GtkTreeSelection
func- 要为每个选定节点调用的函数。[范围调用]
data- 要传递给函数的用户数据。
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_select_all ----

gtk_tree_selection_select_all
选择所有节点。选择必须设置为模式。GTK_SELECTION_MULTIPLE
语法
参数
selection- 一.GtkTreeSelection
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_select_iter ----

gtk_tree_selection_select_iter
选择指定的迭代器。
语法
参数
selection- 一.GtkTreeSelection
iter- 要选择的。GtkTreeIter
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_select_path ----

gtk_tree_selection_select_path
选择路径处的行。
语法
参数
selection- 一.GtkTreeSelection
path- 要选择的。GtkTreePath
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_select_range ----

gtk_tree_selection_select_range
选择由start_path确定的节点范围，end_path（非独占）。选择必须设置为模式。GTK_SELECTION_MULTIPLE
语法
参数
selection- 一.GtkTreeSelection
start_path- 范围的初始节点。
end_path- 范围的最后一个节点。
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_set_mode ----

gtk_tree_selection_set_mode
设置所选内容的选择模式。如果以前的类型是，则锚点保持选中状态（如果以前已选择）。GTK_SELECTION_MULTIPLE
语法
参数
selection- 一.GtkTreeSelection
type- 选择模式
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_set_select_function ----

gtk_tree_selection_set_select_function
设置选择功能。如果设置，则在选择或取消选择任何节点之前调用此函数，从而对选择哪些节点进行一些控制。如果节点的状态可以切换，则选择函数应返回 TRUE，如果节点的状态应保持不变，则 FALSE。
语法
参数
selection- 一.GtkTreeSelection
func- 选择功能。可能为空
data- 选择函数的数据。可能为空
destroy- 用户数据的销毁功能。可能为空
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_unselect_all ----

gtk_tree_selection_unselect_all
取消选择所有节点。
语法
参数
selection- 一.GtkTreeSelection
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_unselect_iter ----

gtk_tree_selection_unselect_iter
取消选择指定的迭代器。
语法
参数
selection- 一.GtkTreeSelection
iter- 要取消选择的。GtkTreeIter
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_unselect_path ----

gtk_tree_selection_unselect_path
取消选择路径处的行。
语法
参数
selection- 一.GtkTreeSelection
path- 要取消选择的。GtkTreePath
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_selection_unselect_range ----

gtk_tree_selection_unselect_range
取消选择由start_path和end_pathinclusive确定的节点范围。
语法
参数
selection- 一.GtkTreeSelection
start_path- 范围的初始节点。
end_path- 范围的初始节点。
自 2.
另请参见
GtkTreeSelection


------------ KeyGTK3gtk_tree_set_row_drag_data ----

gtk_tree_set_row_drag_data
设置目标类型的选择数据GTK_TREE_MODEL_ROW。通常用于drag_data_get处理程序。
语法
参数
selection_data- 一些GtkSelectionData
tree_model- 一GtkTreeModel
path- tree_model中的一行
返回
TRUE 如果 具有正确的目标类型，以允许我们设置树行GtkSelectionData
另请参见
gtk3-GtkTreeView-drag-and-drop


------------ KeyGTK3GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID ----

GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID
GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID
GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID鍙敤浜庝娇鐢ㄩ粯璁ゆ帓搴忓嚱鏁般€傚彟璇峰弬瑙乬tk_tree_sortable_set_sort_column_id锛堬級GtkTreeSortable
鍙﹁鍙傝
GtkTreeSortable


------------ KeyGTK3gtk_tree_sortable_get_sort_column_id ----

gtk_tree_sortable_get_sort_column_id
使用当前排序列和顺序填充sort_column_id和顺序。它返回 TRUE，除非sort_column_id GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID或GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID。
语法
参数
sortable- 一GtkTreeSortable
sort_column_id- 要填写的排序列 ID。
order- 要填写的。GtkSortType
返回
如果排序列不是特殊排序列 ID 之一，则为 TRUE。
另请参见
GtkTreeSortable


------------ KeyGTK3gtk_tree_sortable_has_default_sort_func ----

gtk_tree_sortable_has_default_sort_func
如果模型具有默认排序函数，则返回 TRUE。GtkTreeViewColumns 主要使用它来确定模型是否可以返回到默认状态。
语法
参数
sortable- 一GtkTreeSortable
返回
TRUE，如果模型具有默认排序功能
另请参见
GtkTreeSortable


------------ KeyGTK3gtk_tree_sortable_set_default_sort_func ----

gtk_tree_sortable_set_default_sort_func
将排序时使用的默认比较函数设置为sort_func。如果可排序的当前排序列 id isGTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID，则模型将使用此函数进行排序。如果sort_func为 NULL，则不会有默认比较函数。这意味着，一旦对模型进行了排序，它就不能返回到默认状态。在这种情况下，当可排序的当前排序列 ID GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID时，模型将不排序。
语法
参数
sortable- 一GtkTreeSortable
sort_func- 比较功能
user_data- 要传递给sort_func或 NULL 的用户数据。[允许-无]
destroy- 销毁user_data的通知程序，或 NULL。[允许-无]
另请参见
GtkTreeSortable


------------ KeyGTK3gtk_tree_sortable_set_sort_column_id ----

gtk_tree_sortable_set_sort_column_id
将当前排序列设置为sort_column_id。可排序的将在发出信号后自行排序以反映此更改。sort_column_id可以是常规列 ID，也可以是以下特殊值之一：GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID：如果setGTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID，则将使用默认排序函数：不会发生排序?sort-column-changed?
语法
参数
sortable- 一GtkTreeSortable
sort_column_id- 要设置的排序列 id
order- 列的排序顺序
另请参见
GtkTreeSortable


------------ KeyGTK3gtk_tree_sortable_set_sort_func ----

gtk_tree_sortable_set_sort_func
将排序时使用的比较函数设置为sort_func。如果可排序的当前排序列 ID 与 sort_column_id 相同，则模型将使用此函数进行排序。
语法
参数
sortable- 一GtkTreeSortable
sort_column_id- 用于设置函数的排序列 id
sort_func- 比较功能
user_data- 要传递给sort_func或 NULL 的用户数据。[允许-无]
destroy- 销毁user_data的通知程序，或 NULL。[允许-无]
另请参见
GtkTreeSortable


------------ KeyGTK3gtk_tree_sortable_sort_column_changed ----

gtk_tree_sortable_sort_column_changed
在可排序时发出信号。?sort-column-changed?
语法
参数
sortable- 一GtkTreeSortable
另请参见
GtkTreeSortable


------------ KeyGTK3GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID ----

GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID
GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID
GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID鍙敤浜庝娇鐢ㄦ棤鎺掑簭銆傚彟璇峰弬瑙乬tk_tree_sortable_set_sort_column_id锛堬級GtkTreeSortable
鍙﹁鍙傝
GtkTreeSortable


------------ KeyGTK3gtk_tree_store_append ----

gtk_tree_store_append
将新行追加到tree_store。如果 parent 不是 NULL，则它将新行追加到 parent 的最后一个子级之后，否则它将向顶层追加一行。iter 将更改为指向此新行。调用此函数后，该行将为空。要填写值，您需要callgtk_tree_store_set（） 或 gtk_tree_store_set_value（）。
语法
参数
tree_store- 一GtkTreeStore
iter- 要设置为追加行的未设置。[输出]GtkTreeIter
parent- 有效的 或空值。[允许-无]GtkTreeIter
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_clear ----

gtk_tree_store_clear
浠巘ree_store涓垹闄ゆ墍鏈夎
璇硶
鍙傛暟
tree_store- 涓€GtkTreeStore
鍙﹁鍙傝
GtkTreeStore


------------ KeyGTK3gtk_tree_store_insert ----

gtk_tree_store_insert
在位置处创建新行。如果父行为非 NULL，则该行将成为父项的子项。否则，将在顶层创建该行。如果 position 为 -1 或大于该级别的行数，则新行将插入到列表的末尾。iter 将被更改为指向此新行。调用此函数后，该行将为空。要填写值，您需要调用gtk_tree_store_set（） orgtk_tree_store_set_value（）。
语法
参数
tree_store- 一GtkTreeStore
iter- 要设置为新行的未设置。[输出]GtkTreeIter
parent- 有效的 或空值。[允许-无]GtkTreeIter
position- 位置插入新行，或 -1 作为最后一行
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_insert_after ----

gtk_tree_store_insert_after
在同级之后插入一个新行。如果同级为 NULL，则该行将优先附加到父级 的子级。如果父级和同级为 NULL，则该行将附加到顶级之前。如果同时设置同级和父级，则父级必须是同级的父级。设置同级时，父级是可选的。iter 将更改为指向此新行。调用此函数后，该行将为空。要填写值，您需要callgtk_tree_store_set（） 或 gtk_tree_store_set_value（）。
语法
参数
tree_store- 一GtkTreeStore
iter- 要设置为新行的未设置。[输出]GtkTreeIter
parent- 有效的 或空值。[允许-无]GtkTreeIter
sibling- 有效的 或空值。[允许-无]GtkTreeIter
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_insert_before ----

gtk_tree_store_insert_before
在同级之前插入新行。如果同级为 NULL，则该行将追加到父项 的子项。如果父级和同级为 NULL，则该行将追加到 toplevel。如果同时设置同级和父级，则父级必须是同级的父级。设置同级时，父级是可选的。iter 将更改为指向此新行。调用此函数后，该行将为空。要填写值，您需要callgtk_tree_store_set（） 或 gtk_tree_store_set_value（）。
语法
参数
tree_store- 一GtkTreeStore
iter- 要设置为新行的未设置。[输出]GtkTreeIter
parent- 有效的 或空值。[允许-无]GtkTreeIter
sibling- 有效的 或空值。[允许-无]GtkTreeIter
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_insert_with_values ----

gtk_tree_store_insert_with_values
在位置处创建新行。iter 将被更改为指向此新行。如果 position 为 -1，或大于列表中的行数，则新行将追加到列表中。该行将填充给定给此函数的值。Callinggtk_tree_store_insert_with_values（tree_store、迭代器、位置等）与调用 12[/语法] [语法]gtk_tree_store_insert（tree_store、迭代器、位置）;gtk_tree_store_set（tree_store、迭代器、...）具有相同的效果;[/语法]
不同的是，前者只会发出row_inserted信号，而后者会发出row_inserted，row_changed如果树存储被排序，rows_reordered。由于重复发射rows_reordered信号会影响程序的性能，因此在排序树存储中插入行时通常首选gtk_tree_store_insert_with_values（）。
语法
参数
tree_store- 一GtkTreeStore
iter- 用于设置新行的未设置，或 NULL。[输出][允许-无]GtkTreeIter
parent- 有效的 或空值。[允许-无]GtkTreeIter
position- 位置插入新行，或 -1 追加在现有行之后
...- 列号和值对，以 -1
结尾，因为 2.10
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_insert_with_valuesv ----

gtk_tree_store_insert_with_valuesv
gtk_tree_store_insert_with_values（） 的变体，它将列和值作为两个数组，而不是 varargs。此函数主要用于语言绑定。
语法
参数
tree_store- 一GtkTreeStore
iter- 用于设置新行的未设置，或 NULL。[输出][允许-无]GtkTreeIter
parent- 有效的 或空值。[允许-无]GtkTreeIter
position- 位置插入新行，或 -1 作为最后一行
columns- 列号数组。[数组长度 = n_values]
values- 一个 GValues 数组。[数组长度 = n_values]
n_values-
自 2.10 以来的列和值数组
的长度
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_is_ancestor ----

gtk_tree_store_is_ancestor
如果 iter 是后代的祖先，则返回 TRUE。也就是说，它是后代的父辈（或祖父母或曾祖父母）。
语法
参数
tree_store- 一GtkTreeStore
iter- 有效GtkTreeIter
descendant- 有效GtkTreeIter
返回
TRUE，如果 iteris 是后代的祖先
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_iter_depth ----

gtk_tree_store_iter_depth
返回迭代器的深度。对于根级别上的任何内容，此值将为 0，对于级别以下的任何内容，此值为 1，依此类推。
语法
参数
tree_store- 一GtkTreeStore
iter- 有效GtkTreeIter
返回
迭代器的深度
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_iter_is_valid ----

gtk_tree_store_iter_is_valid
警告：此功能运行缓慢。仅将其用于调试和/或测试目的。检查给定的迭代器是否是此 的有效迭代器。GtkTreeStore
语法
参数
tree_store- 一.GtkTreeStore
iter- 一.GtkTreeIter
返回
如果迭代器有效，则为 TRUE;如果迭代器无效，则为 FALSE。
自 2.2 起
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_move_after ----

gtk_tree_store_move_after
将迭代器在tree_store移动到一个又一个位置。iter 和位置应处于同一级别。请注意，此功能仅适用于未排序的商店。如果位置为 NULL，则 iter 将被移动到关卡的起点。
语法
参数
tree_store- 一.GtkTreeStore
iter- 一.GtkTreeIter
position- 一.[允许-无]
自 2.GtkTreeIter
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_move_before ----

gtk_tree_store_move_before
将 iter tree_store移动到位置之前的位置。iter 和位置应处于同一级别。请注意，此功能仅适用于未排序的商店。如果位置为 NULL，则 iter 将移动到关卡的末尾。
语法
参数
tree_store- 一.GtkTreeStore
iter- 一.GtkTreeIter
position- A 或空。[允许-无]
自 2.2 起GtkTreeIter
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_new ----

gtk_tree_store_new
创建一个新的树存储区，如n_columns列中传递的每个类型。请注意，仅支持从标准 GObject 基本类型派生的类型。例如，gtk_tree_store_new（3，G_TYPE_INT，G_TYPE_STRING，GDK_TYPE_PIXBUF）;将创建一个包含三列的新列，分别为 、 和 类型。GtkTreeStoregintgchararrayGdkPixbuf
语法
参数
n_columns- 树存储中的列数
...- 列的所有类型，从第一个到最后一个GType
返回
一个新的GtkTreeStore
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_newv ----

gtk_tree_store_newv
非变量创建函数。主要由语言绑定使用。
语法
参数
n_columns- 树存储中的列数
types- 列的类型数组，从第一个到最后一个。[数组长度 = n_columns]GType
返回
一个新的.[转移完整]GtkTreeStore
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_prepend ----

gtk_tree_store_prepend
在要tree_store的新行前面附加一行。如果 parent 是 non-NULL，则它将在父级的第一个子级之前附加新行，否则它将在顶层前附加一行。iter 将更改为指向此新行。调用此函数后，该行将为空。要填写值，您需要调用 gtk_tree_store_set（） 或 gtk_tree_store_set_value（）。
语法
参数
tree_store- 一GtkTreeStore
iter- 要设置为前置行的未设置。[输出]GtkTreeIter
parent- 有效的 或空值。[允许-无]GtkTreeIter
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_remove ----

gtk_tree_store_remove
从tree_store中删除迭代器。删除后，iter 将设置为该级别的下一个有效行，如果它之前指向最后一个行，则无效。
语法
参数
tree_store- 一GtkTreeStore
iter- 有效GtkTreeIter
返回
如果 iteris 仍然有效，则为 TRUE，如果不是，则为 FALSE。
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_reorder ----

gtk_tree_store_reorder
tree_store中父项的子项重新排序，以遵循new_order指示的顺序。请注意，此函数仅适用于未排序的存储。
语法
参数
tree_store- 一.GtkTreeStore
parent- 一.GtkTreeIter
new_order- 一个整数数组，将每个子节点的新位置映射到重新排序之前的旧位置，即new_order[newpos] = oldpos。[数组]
自 2.2 起
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_set ----

gtk_tree_store_set
设置迭代器引用的行中一个或多个单元格的值。变量参数列表应包含整数列号，每个列号后跟要设置的值。该列表以 -1 结尾。例如，将带有 typeG_TYPE_STRING 的列 0 设置为 ？Foo？，你会writegtk_tree_store_set（store，iter，0，“Foo”，-1）。如果该值是G_TYPE_OBJECT，则由存储区引用，如果该值是G_TYPE_STRING或G_TYPE_BOXED，则由存储区复制该值。
语法
参数
tree_store- 一GtkTreeStore
iter- 对正在修改的行有效的GtkTreeIter
...- 列号和值对，以 -1 结尾
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_set_column_types ----

gtk_tree_store_set_column_types
此函数主要用于继承自 ，并且只应在构造新的 .在添加行或调用接口上的方法后，它将不起作用。GObjectsGtkTreeStoreGtkTreeStoreGtkTreeModel
语法
参数
tree_store- 一GtkTreeStore
n_columns- 树存储的列数
types- 类型数组，每列一个。[数组长度 = n_columns]GType
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_set_valist ----

gtk_tree_store_set_valist
见gtk_tree_store_set（）;此版本需要va_list语言绑定使用。
语法
参数
tree_store- 一GtkTreeStore
iter- 对正在修改的行有效的GtkTreeIter
var_args- 列/值对的va_list
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_set_value ----

gtk_tree_store_set_value
设置由迭代器和列指定的单元格中的数据。值的类型必须可转换为列的类型。
语法
参数
tree_store- 一GtkTreeStore
iter- 对正在修改的行有效的GtkTreeIter
column- 要修改的列号
value- 单元格的新值
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_set_valuesv ----

gtk_tree_store_set_valuesv
gtk_tree_store_set_valist（） 的变体，它将列和值作为两个数组，而不是 varargs。此函数主要用于语言绑定，或者在要更改的列数直到运行时才知道的情况下。
语法
参数
tree_store- 一GtkTreeStore
iter- 对正在修改的行有效的GtkTreeIter
columns- 列号数组。[数组长度 = n_values]
values- 一个 GValues 数组。[数组长度 = n_values]
n_values-
自 2.12 以来的列和值数组
的长度
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_store_swap ----

gtk_tree_store_swap
以相同级别的tree_store交换 a 和 b。请注意，此函数仅适用于未排序的商店。
语法
参数
tree_store- 一.GtkTreeStore
a- 一.GtkTreeIter
b- 另一个.
自 2.2 起GtkTreeIter
另请参见
GtkTreeStore


------------ KeyGTK3gtk_tree_view_append_column ----

gtk_tree_view_append_column
将列追加到列列表中。如果tree_view启用了“fixed_height”模式，则列必须具有“大小调整大小”？属性设置为 beGTK_TREE_VIEW_COLUMN_FIXED。
语法
参数
tree_view- 一.GtkTreeView
column- 要添加。GtkTreeViewColumn
返回
追加tree_viewafter列数。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_collapse_all ----

gtk_tree_view_collapse_all
递归折叠tree_view中所有可见的展开节点。
语法
参数
tree_view- 一.GtkTreeView
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_collapse_row ----

gtk_tree_view_collapse_row
折叠一行（隐藏其子行，如果存在）。
语法
参数
tree_view- 一GtkTreeView
path- tree_view中某行的路径
返回
如果行已折叠，则为 TRUE。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_columns_autosize ----

gtk_tree_view_columns_autosize
将所有列的大小调整为其最佳宽度。只有在实现treeview之后才有效。
语法
参数
tree_view- 一.GtkTreeView
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_column_add_attribute ----

gtk_tree_view_column_add_attribute
将属性映射添加到tree_column中的列表中。列是要从中获取值的模型的列，属性是要从该值设置cell_renderer的参数。例如，如果模型的第 2 列包含字符串，则可以拥有？text？的属性从列 2 获取其值。GtkCellRendererText
语法
参数
tree_column- 一.GtkTreeViewColumn
cell_renderer- 设置属性GtkCellRenderer
attribute- 渲染器上的属性
column- 模型上要从中获取属性的列位置。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_cell_get_position ----

gtk_tree_view_column_cell_get_position
获取列中单元格的水平位置和大小。如果在列中找不到单元格，则不会更改start_pos和宽度，并返回FALSE。
语法
参数
tree_column- 一GtkTreeViewColumn
cell_renderer- 一GtkCellRenderer
x_offset- tree_column内单元格水平放置的返回位置，可以是 NULL。[输出][允许-无]
width- 返回单元格宽度的位置，可能是 NULL。[输出][允许-无]
返回
如果细胞长到tree_column，则为 TRUE。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_cell_get_size ----

gtk_tree_view_column_cell_get_size
获取呈现列所需的宽度和高度。这主要由 .GtkTreeView
语法
参数
tree_column- 一.GtkTreeViewColumn
cell_area- 将分配列中单元格的区域，或 NULL。[允许-无]
x_offset- 位置返回单元格相对于cell_area的 x 偏移量，或 NULL。[输出][允许-无]
y_offset- 位置返回单元格相对于cell_area的 y 偏移量，或 NULL。[输出][允许-无]
width- 位置返回渲染单元格所需的宽度，或 NULL。[输出][允许-无]
height- 位置返回渲染单元格所需的高度，或 NULL。[输出][允许-无]
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_cell_is_visible ----

gtk_tree_view_column_cell_is_visible
如果打包到tree_column中的任何单元格可见，则返回 TRUE。要使这有意义，您必须首先初始化单元格 withgtk_tree_view_column_cell_set_cell_data（）
语法
参数
tree_column- 一GtkTreeViewColumn
返回
TRUE，如果包装在tree_columnare中的任何细胞当前可见
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_cell_set_cell_data ----

gtk_tree_view_column_cell_set_cell_data
基于tree_model和迭代器设置单元格渲染器。也就是说，在tree_column中，它将从迭代器上的setcolumn中获取一个值，并使用该值在cellrenderer上设置属性。这主要由 .GtkTreeView
语法
参数
tree_column- 一.GtkTreeViewColumn
tree_model- to 从中获取单元格渲染器属性。GtkTreeModel
iter- 从中获取单元格渲染器的属性。GtkTreeIter
is_expander- TRUE，如果行有子项
is_expanded- TRUE，如果行具有可见的子项
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_clear ----

gtk_tree_view_column_clear
取消设置tree_column上所有渲染器上的所有映射。
语法
参数
tree_column- 一GtkTreeViewColumn
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_clear_attributes ----

gtk_tree_view_column_clear_attributes
清除以前withgtk_tree_view_column_set_attributes（） 设置的所有现有属性。
语法
参数
tree_column- 一GtkTreeViewColumn
cell_renderer- a 清除属性映射。GtkCellRenderer
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_clicked ----

gtk_tree_view_column_clicked
发出 “单击”柱子上的信号。此功能仅在可点击iftree_column起作用。
语法
参数
tree_column- 一GtkTreeViewColumn
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_focus_cell ----

gtk_tree_view_column_focus_cell
如果列包含 2 个或更多可编辑和可激活的单元格，则将当前键盘焦点设置为单元格。
语法
参数
tree_column- 一GtkTreeViewColumn
cell- A
自 2.2GtkCellRenderer
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_alignment ----

gtk_tree_view_column_get_alignment
返回tree_column的当前 x 对齐方式。此值的范围可以介于 0.0 和 1.0 之间。
语法
参数
tree_column- 一.GtkTreeViewColumn
返回
tree_column的当前对齐点。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_button ----

gtk_tree_view_column_get_button
返回树视图列标题中使用的按钮
语法
参数
tree_column- 一GtkTreeViewColumn
返回
列标题的按钮。[无转移]
自 3.0 起
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_clickable ----

gtk_tree_view_column_get_clickable
如果用户可以单击列的标题，则返回 TRUE。
语法
参数
tree_column- 一GtkTreeViewColumn
返回
如果用户可以单击列标题，则为 TRUE。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_expand ----

gtk_tree_view_column_get_expand
如果列展开以填充可用空间，则返回 TRUE。
语法
参数
tree_column- 一.GtkTreeViewColumn
返回
如果列展开以填充可用空间，则为 TRUE。
2.4 起
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_fixed_width ----

gtk_tree_view_column_get_fixed_width
获取列的固定宽度。这可能不是列的实际显示宽度;为此，请使用 gtk_tree_view_column_get_width（）。
语法
参数
tree_column- 一.GtkTreeViewColumn
返回
列的固定宽度。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_max_width ----

gtk_tree_view_column_get_max_width
返回tree_column的最大宽度（以像素为单位），如果未设置最大宽度，则返回 -1。
语法
参数
tree_column- 一.GtkTreeViewColumn
返回
tree_column的最大宽度。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_min_width ----

gtk_tree_view_column_get_min_width
Returns the minimum width in pixels of the tree_column, or -1 if no minimumwidth is set.
Syntax
Parameters
tree_column  -  	A GtkTreeViewColumn.
Returns
The minimum width of the tree_column.
See Also
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_reorderable ----

gtk_tree_view_column_get_reorderable
如果用户可以对tree_column重新排序，则返回 TRUE。
语法
参数
tree_column- 一GtkTreeViewColumn
返回
如果tree_columncan由用户重新排序，则为 TRUE。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_resizable ----

gtk_tree_view_column_get_resizable
如果最终用户可以调整tree_column的大小，则返回 TRUE。
语法
参数
tree_column- 一GtkTreeViewColumn
返回
TRUE，如果tree_columncan调整大小。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_sizing ----

gtk_tree_view_column_get_sizing
返回当前类型的tree_column。
语法
参数
tree_column- 一.GtkTreeViewColumn
返回
tree_column的类型。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_sort_column_id ----

gtk_tree_view_column_get_sort_column_id
获取选择此列进行排序时模型排序的逻辑sort_column_id。请参见 gtk_tree_view_column_set_sort_column_id（）。
语法
参数
tree_column- 一GtkTreeViewColumn
返回
当前sort_column_idfor此列，如果此列不能用于排序，则为 -1。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_sort_indicator ----

gtk_tree_view_column_get_sort_indicator
获取由 gtk_tree_view_column_set_sort_indicator（） 设置的值。
语法
参数
tree_column- 一GtkTreeViewColumn
返回
是否显示排序指示器箭头
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_sort_order ----

gtk_tree_view_column_get_sort_order
获取由 gtk_tree_view_column_set_sort_order（） 设置的值。
语法
参数
tree_column- 一GtkTreeViewColumn
返回
排序指示器指示的排序顺序
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_spacing ----

gtk_tree_view_column_get_spacing
返回tree_column的间距。
语法
参数
tree_column- 一.GtkTreeViewColumn
返回
tree_column的间距。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_title ----

gtk_tree_view_column_get_title
返回小组件的标题。
语法
参数
tree_column- 一.GtkTreeViewColumn
返回
列的标题。不应修改或释放此字符串。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_tree_view ----

gtk_tree_view_column_get_tree_view
返回已插入tree_column。如果当前未在任何树视图中插入列，则返回 NULL。GtkTreeView
语法
参数
tree_column- 一GtkTreeViewColumn
返回
其中的树视图如果有任何，则插入列，否则为 NULL。[无转移]
自 2.12 起
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_visible ----

gtk_tree_view_column_get_visible
如果tree_column可见，则返回 TRUE。
语法
参数
tree_column- 一.GtkTreeViewColumn
返回
列是否可见。如果它可见，则树将显示该列。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_widget ----

gtk_tree_view_column_get_widget
返回列标题上的 in 按钮。如果尚未设置自定义小部件，则返回 NULL。GtkWidget
语法
参数
tree_column- 一.GtkTreeViewColumn
返回
列标题中的 ，或 NULL。[无转移]GtkWidget
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_width ----

gtk_tree_view_column_get_width
返回tree_column的当前大小（以像素为单位）。
语法
参数
tree_column- 一.GtkTreeViewColumn
返回
tree_column的当前宽度。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_get_x_offset ----

gtk_tree_view_column_get_x_offset
Returns the current X offset of tree_column in pixels.
Syntax
Parameters
tree_column  -  	A .GtkTreeViewColumn
Returns
The current X offset of tree_column.
Since 3.
See Also
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_new ----

gtk_tree_view_column_new
Creates a new .GtkTreeViewColumn
Returns
A newly created .GtkTreeViewColumn
See Also
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_new_with_area ----

gtk_tree_view_column_new_with_area
Creates a new  using area to render its cells.GtkTreeViewColumn
Syntax
Parameters
area  -  	the  that the newly created column should use to layout cells.GtkCellArea
Returns
A newly created .
Since 3.0GtkTreeViewColumn
See Also
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_new_with_attributes ----

gtk_tree_view_column_new_with_attributes
创建一个具有许多默认值的 new。这等效于在新创建的 上调用 gtk_tree_view_column_set_title（），gtk_tree_view_column_pack_start（）， andgtk_tree_view_column_set_attributes（）。这里有一个简单的例子：123456789101112[/syntax] [syntax]enum { TEXT_COLUMN， COLOR_COLUMN， N_COLUMNS };...{ GtkTreeViewColumn *column;GtkCellRenderer *renderer = gtk_cell_renderer_text_new （）;列 = gtk_tree_view_column_new_with_attributes （“标题”， 渲染器， “文本”， TEXT_COLUMN， “前景”， COLOR_COLUMN， NULL）;}[/语法]GtkTreeViewColumnGtkTreeViewColumn
语法
参数
title- 要将标题设置为的标题
cell- 的GtkCellRenderer
...- 以 NULL 结尾的属性列表
返回
新创建的 .GtkTreeViewColumn
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_pack_end ----

gtk_tree_view_column_pack_end
将单元格添加到列的末尾。如果 expand 为 FALSE，则分配的 cellis 的空间不超过它需要的空间。任何未使用的空间在扩展为 TRUE 的单元格之间平均分配。
语法
参数
tree_column- 一.GtkTreeViewColumn
cell- .GtkCellRenderer
expand- 如果 cellis 被分配到分配给tree_column的额外空间，则为 TRUE。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_pack_start ----

gtk_tree_view_column_pack_start
将单元格打包到列的开头。如果展开为 FALSE，则为单元分配的空间不超过其所需空间。任何未使用的空间在扩展为 TRUE 的单元格之间平均分配。
语法
参数
tree_column- 一.GtkTreeViewColumn
cell- .GtkCellRenderer
expand- 如果 cellis 被分配到分配给tree_column的额外空间，则为 TRUE。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_queue_resize ----

gtk_tree_view_column_queue_resize
标记列以及添加到此列的单元格呈现器，以重新协商其大小。
语法
参数
tree_column- A
自 2.8 起GtkTreeViewColumn
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_alignment ----

gtk_tree_view_column_set_alignment
设置列标题内标题或自定义构件的对齐方式。对齐方式决定了它在按钮内的位置 -- 0.0 表示左侧，0.5 表示中心，1.0 表示右侧。
语法
参数
tree_column- 一.GtkTreeViewColumn
xalign- 对齐方式，介于 [0.0 和 1.0] 之间（包括 [0.0 和 1.0]）。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_attributes ----

gtk_tree_view_column_set_attributes
将列表中的属性设置为tree_column的属性。属性应按属性/列顺序排列，如 ingtk_tree_view_column_add_attribute（）。所有现有属性都将被删除，并替换为新属性。
语法
参数
tree_column- 一GtkTreeViewColumn
cell_renderer- 我们正在设置属性GtkCellRenderer
...- 以 NULL 结尾的属性列表
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_cell_data_func ----

gtk_tree_view_column_set_cell_data_func
设置要用于列的 。此函数用于代替用于设置列值的标准属性映射，并且应根据需要设置tree_column的 scell 呈现器的值。func 可以是 NULL 来删除 anolder one。GtkTreeCellDataFunc
语法
参数
tree_column- 一GtkTreeViewColumn
cell_renderer- 一GtkCellRenderer
func- 使用。[允许-无]GtkTreeCellDataFunc
func_data- 函数的用户数据。
destroy- func_data销毁通知
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_clickable ----

gtk_tree_view_column_set_clickable
如果可单击为 TRUE，则将标题设置为活动状态。当标题处于活动状态时，它可以采用键盘焦点，并且可以单击。
语法
参数
tree_column- 一.GtkTreeViewColumn
clickable- 如果标头处于活动状态，则为 TRUE。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_expand ----

gtk_tree_view_column_set_expand
将列设置为占用可用的额外空间。此空间在展开设置为 TRUE 的所有列之间平均共享。如果没有列设置此选项，则最后一列将获得所有额外空间。默认情况下，每个列都是使用此 FALSE 创建的。与“固定宽度”一起，“展开”当用户调整列大小时，属性会发生变化。
语法
参数
tree_column- 一.GtkTreeViewColumn
expand- 如果列应展开以填充可用空间，则为 TRUE。
2.4 起
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_fixed_width ----

gtk_tree_view_column_set_fixed_width
如果 fixed_width 不是 -1，则设置tree_column的固定宽度;否则取消设置它。fixed_width的有效值夹在柱的最小值和最大宽度之间;但是，存储在“固定宽度”中的值？属性未被夹紧。如果列大小调整为 或 ，则设置固定宽度将覆盖自动计算的宽度。注意 thatfixed_width只是对 GTK+ 的提示;实际分配给列的宽度可能大于或小于请求的宽度。与“展开”一起，“固定宽度”当用户调整列大小时，属性会发生变化。GTK_TREE_VIEW_COLUMN_GROW_ONLYGTK_TREE_VIEW_COLUMN_AUTOSIZE
语法
参数
tree_column- 一.GtkTreeViewColumn
fixed_width- 新的固定宽度，以像素为单位，或 -1。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_max_width ----

gtk_tree_view_column_set_max_width
设置tree_column的最大宽度。如果 max_width 为 -1，则未设置最大宽度。请注意，如果该列是视图中的最后一列，则该列实际上可以比 maxwidth 宽。在这种情况下，列将展开以填充任何额外的空间。
语法
参数
tree_column- 一.GtkTreeViewColumn
max_width- 列的最大宽度（以像素为单位）或 -1。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_min_width ----

gtk_tree_view_column_set_min_width
设置tree_column的最小宽度。如果 min_width 为 -1，则未设置最小宽度。
语法
参数
tree_column- 一.GtkTreeViewColumn
min_width- 列的最小宽度（以像素为单位），或 -1。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_reorderable ----

gtk_tree_view_column_set_reorderable
如果可重新排序为 TRUE，则最终用户可以对列进行重新排序。
语法
参数
tree_column- 一GtkTreeViewColumn
reorderable- TRUE，如果列可以重新排序。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_resizable ----

gtk_tree_view_column_set_resizable
如果可调整大小为 TRUE，则用户可以通过抓取列按钮的外边缘来显式调整列的大小。如果可调整大小为 TRUE 并且列的大小调整模式为 ，则大小调整模式更改为 。GTK_TREE_VIEW_COLUMN_AUTOSIZEGTK_TREE_VIEW_COLUMN_GROW_ONLY
语法
参数
tree_column- 一GtkTreeViewColumn
resizable- TRUE，如果列可以调整大小
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_sizing ----

gtk_tree_view_column_set_sizing
将tree_column的增长行为设置为类型。
语法
参数
tree_column- 一.GtkTreeViewColumn
type- .GtkTreeViewColumnSizing
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_sort_column_id ----

gtk_tree_view_column_set_sort_column_id
设置选择此列进行排序时此列排序的逻辑sort_column_id。这样做会使列标题可单击。
语法
参数
tree_column- 一GtkTreeViewColumn
sort_column_id- sort_column_idof模型进行排序。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_sort_indicator ----

gtk_tree_view_column_set_sort_indicator
使用 TRUE 设置调用此函数，以在标题按钮中显示一个箭头，指示该列已排序。Callgtk_tree_view_column_set_sort_order（） 以更改箭头的方向。
语法
参数
tree_column- 一GtkTreeViewColumn
setting- TRUE 可显示列已排序的指示器
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_sort_order ----

gtk_tree_view_column_set_sort_order
更改排序指示器的外观。这实际上并没有对模型进行排序。Usegtk_tree_view_column_set_sort_column_id（） 如果您想要自动排序支持。此函数主要用于自定义排序行为，应与 gtk_tree_sortable_set_sort_column_id（） to dothat 结合使用。对于自定义模型，机制会有所不同。排序指示器更改方向以指示正常排序或反向排序。请注意，在调用此函数时，您必须启用排序指示器才能看到任何内容;见gtk_tree_view_column_set_sort_indicator（）。
语法
参数
tree_column- 一GtkTreeViewColumn
order- 排序指示器应指示的排序顺序
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_spacing ----

gtk_tree_view_column_set_spacing
设置tree_column的间距字段，该字段是要在填充到其中的单元格渲染器之间放置的像素数。
语法
参数
tree_column- 一.GtkTreeViewColumn
spacing- 单元格渲染器之间的距离（以像素为单位）。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_title ----

gtk_tree_view_column_set_title
设置tree_column的标题。如果已设置自定义微件，则忽略此值。
语法
参数
tree_column- 一.GtkTreeViewColumn
title- tree_column的标题。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_visible ----

gtk_tree_view_column_set_visible
设置tree_column的可见性。
语法
参数
tree_column- 一.GtkTreeViewColumn
visible- 如果tree_columnis可见，则为 true。
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_column_set_widget ----

gtk_tree_view_column_set_widget
将页眉中的构件设置为构件。如果构件为 NULL，则标题按钮设置为 tree_column 的标题。GtkLabel
语法
参数
tree_column- 一.GtkTreeViewColumn
widget- 子项 ，或 NULL。[允许-无]GtkWidget
另请参见
GtkTreeViewColumn


------------ KeyGTK3gtk_tree_view_convert_bin_window_to_tree_coords ----

gtk_tree_view_convert_bin_window_to_tree_coords
bin_window坐标转换为树（树的完整可滚动区域）的坐标。
语法
参数
tree_view- 一GtkTreeView
bx- X 坐标相对于bin_window
by- Y 坐标相对于bin_window
tx- 返回树 X 坐标的位置。[输出]
ty- 返回树 Y 坐标的位置。[输出]
自 2.12 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_convert_bin_window_to_widget_coords ----

gtk_tree_view_convert_bin_window_to_widget_coords
bin_window坐标（请参见 gtk_tree_view_get_bin_window（）） 转换为微件相对坐标。
语法
参数
tree_view- 一GtkTreeView
bx- bin_window X 坐标
by- bin_window Y坐标
wx- 返回小部件X坐标的位置。[输出]
wy- 返回小部件Y坐标的位置。[输出]
自 2.12 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_convert_tree_to_bin_window_coords ----

gtk_tree_view_convert_tree_to_bin_window_coords
将树坐标（树的完全可滚动区域中的坐标）转换为bin_window坐标。
语法
参数
tree_view- 一GtkTreeView
tx- 树 X 坐标
ty- 树 Y 坐标
bx- X坐标相对于bin_window的返回位置。[输出]
by- Y 坐标相对于bin_window的返回位置。[输出]
自 2.12 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_convert_tree_to_widget_coords ----

gtk_tree_view_convert_tree_to_widget_coords
将树坐标（树的完全可滚动区域中的坐标）转换为微件坐标。
语法
参数
tree_view- 一GtkTreeView
tx- X 坐标相对于树
ty- 相对于树的Y坐标
wx- 返回小部件X坐标的位置。[输出]
wy- 返回小部件Y坐标的位置。[输出]
自 2.12 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_convert_widget_to_bin_window_coords ----

gtk_tree_view_convert_widget_to_bin_window_coords
将微件坐标转换为bin_window的坐标（请参见gtk_tree_view_get_bin_window（））。
语法
参数
tree_view- 一GtkTreeView
wx- X坐标相对于小部件
wy- 相对于小部件的 Y 坐标
bx- 返回bin_window X 坐标的位置。[输出]
by- 返回bin_window Y 坐标的位置。[输出]
自 2.12 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_convert_widget_to_tree_coords ----

gtk_tree_view_convert_widget_to_tree_coords
将构件坐标转换为树（树的完整可滚动区域）的坐标。
语法
参数
tree_view- 一GtkTreeView
wx- X坐标相对于小部件
wy- 相对于小部件的 Y 坐标
tx- 返回树 X 坐标的位置。[输出]
ty- 返回树 Y 坐标的位置。[输出]
自 2.12 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_create_row_drag_icon ----

gtk_tree_view_create_row_drag_icon
创建行在路径处的表示形式。此图像用于拖动图标。cairo_surface_t
语法
参数
tree_view- 一GtkTreeView
path- tree_viewGtkTreePath
返回
拖动图标的新分配曲面。[转移完整]
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_enable_model_drag_dest ----

gtk_tree_view_enable_model_drag_dest
将tree_view转换为自动 DND 的放置目的地。调用此方法设置为 FALSE。?reorderable?
语法
参数
tree_view- 一GtkTreeView
targets- 拖动将支持的目标表。[数组长度 = n_targets]
n_targets- 目标中的项目数
actions- 从这个小伙伴拖动的可能操作的位掩码
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_enable_model_drag_source ----

gtk_tree_view_enable_model_drag_source
将tree_view转换为自动 DND 的拖动源。调用此方法设置为 FALSE。?reorderable?
语法
参数
tree_view- 一GtkTreeView
start_button_mask- 允许按钮开始拖动的掩码
targets- 拖动将支持的目标表。[数组长度 = n_targets]
n_targets- 目标中的项目数
actions- 从这个小伙伴拖动的可能操作的位掩码
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_expand_all ----

gtk_tree_view_expand_all
递归展开tree_view中的所有节点。
语法
参数
tree_view- 一.GtkTreeView
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_expand_row ----

gtk_tree_view_expand_row
打开该行，使其子项可见。
语法
参数
tree_view- 一GtkTreeView
path- 行的路径
open_all- 是递归扩展，还是仅扩展直系子项
返回
如果该行存在且具有子项，则为 TRUE
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_expand_to_path ----

gtk_tree_view_expand_to_path
在路径处展开行。这还将根据需要展开路径的所有父行。
语法
参数
tree_view- 一.GtkTreeView
path- 行的路径。
自 2.2 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_activate_on_single_click ----

gtk_tree_view_get_activate_on_single_click
获取由 gtk_tree_view_set_activate_on_single_click（） 设置的设置。
语法
参数
tree_view- 一GtkTreeView
返回
如果行激活将在单击
时发出 TRUE，则为 TRUE，因为 3.8
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_background_area ----

gtk_tree_view_get_background_area
用由路径指定的行处的单元格和由列指定的列的bin_window坐标填充边界矩形。如果 path 为 NULL，或者指向树中找不到的节点，则矩形的 y 和高度字段将填充为 0。如果列为 NULL，则 x 和宽度字段将填充为 0。返回的矩形等效于传递给gtk_cell_renderer_render（） thebackground_area。这些背景区域磁贴用于覆盖整个条柱窗口。与cell_area相反，由gtk_tree_view_get_cell_area（）返回，它仅返回大提琴本身，不包括周围的边界和树扩展器区域。
语法
参数
tree_view- 一GtkTreeView
path- a 表示行，或 NULL 仅获取水平坐标。[允许-无]GtkTreePath
column- a 表示列，或 NULL 仅获取垂直坐标。[允许-无]GtkTreeViewColumn
rect- 矩形填充单元格背景矩形。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_bin_window ----

gtk_tree_view_get_bin_window
返回tree_view呈现到的窗口。这主要用于与事件>窗口进行比较，以确认tree_view上的事件位于正确的窗口中。
语法
参数
tree_view- 一GtkTreeView
返回
A 或 NULL（当tree_viewhasn尚未实现时）。[无转移]GdkWindow
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_cell_area ----

gtk_tree_view_get_cell_area
用由路径指定的行处的单元格和由列指定的列的bin_window坐标填充边界矩形。如果 path 是 NULL，或者指向当前未显示的路径，则矩形的 y 和高度字段将填充 0。如果列为 NULL，则 x 和宽度字段将填充为 0。所有单元格矩形的总和不覆盖集合树;例如，行与行之间有额外的像素。此处的矩形等效于传递togtk_cell_renderer_render（） cell_area。仅当tree_view实现时，此函数才有效。
语法
参数
tree_view- 一GtkTreeView
path- a 表示行，或 NULL 仅获取水平坐标。[允许-无]GtkTreePath
column- a 表示列，或 NULL 仅获取垂直坐标。[允许-无]GtkTreeViewColumn
rect- 矩形填充单元格矩形。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_column ----

gtk_tree_view_get_column
获取 中给定位置的 。GtkTreeViewColumntree_view
语法
参数
tree_view- 一.GtkTreeView
n- 列的位置，从 0 开始计数。
返回
如果位置超出列的范围，则为 NULL。[无转移]GtkTreeViewColumn
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_columns ----

gtk_tree_view_get_columns
返回当前处于tree_view中的所有 s 的 a。必须使用 g_list_free（） 释放返回的列表。GListGtkTreeViewColumn
语法
参数
tree_view- 一GtkTreeView
返回
[元素类型 GtkTreeViewColumn] [传输容器] 的列表GtkTreeViewColumn
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_cursor ----

gtk_tree_view_get_cursor
使用当前路径和焦点列填充路径和focus_column。如果当前未设置游标，则 *path 将为 NULL。如果当前没有列具有焦点，则 *focus_column 将为 NULL。当你完成时，返回的必须用gtk_tree_path_free（）释放它。GtkTreePath
语法
参数
tree_view- 一GtkTreeView
path- 要用当前光标路径填充的指针，或 NULL。[输出][转移完整][允许-无]
focus_column- 要用当前焦点列填充的指针，或 NULL。[输出][无转移][允许-无]
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_dest_row_at_pos ----

gtk_tree_view_get_dest_row_at_pos
确定给定位置的目标行。drag_x anddrag_y应位于小部件坐标中。仅当实现tree_view时，此功能才有意义。因此，如果tree_view未实现或没有模型，则此函数将始终返回 FALSE。
语法
参数
tree_view- 一GtkTreeView
drag_x- 确定目标行的位置
drag_y- 确定目标行的位置
path- 返回突出显示行的路径的位置，或 NULL。[输出][允许-无]
pos- 返回放置位置的位置，或 NULL。[输出][允许-无]
返回
在给定位置是否有一行，如果确实是这种情况，则为 TRUE。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_drag_dest_row ----

gtk_tree_view_get_drag_dest_row
获取有关为反馈突出显示的行的信息。
语法
参数
tree_view- 一GtkTreeView
path- 返回突出显示行的路径的位置，或 NULL。[输出][允许-无]
pos- 返回放置位置的位置，或 NULL。[输出][允许-无]
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_enable_search ----

gtk_tree_view_get_enable_search
返回树是否允许通过键入文本来启动交互式搜索。
语法
参数
tree_view- 一GtkTreeView
返回
是否让用户以交互方式搜索
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_enable_tree_lines ----

gtk_tree_view_get_enable_tree_lines
返回树线是否在tree_view绘制。
语法
参数
tree_view- 一个.GtkTreeView
返回
如果树线是用tree_view绘制的，则为 TRUE。
自 2.10 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_expander_column ----

gtk_tree_view_get_expander_column
返回作为当前展开器列的列。此列旁边绘制了展开箭头。
语法
参数
tree_view- 一GtkTreeView
返回
展开器列。[无转移]
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_fixed_height_mode ----

gtk_tree_view_get_fixed_height_mode
返回是否为tree_view打开固定高度模式。
语法
参数
tree_view- 一GtkTreeView
返回
如果tree_viewis固定高度模式下
为 TRUE，因为 2.6
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_grid_lines ----

gtk_tree_view_get_grid_lines
返回在tree_view中启用了哪些网格线。
语法
参数
tree_view- 一GtkTreeView
返回
指示启用了哪些网格线的值。
自 2.10 起GtkTreeViewGridLines
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_hadjustment ----

gtk_tree_view_get_hadjustment
gtk_tree_view_get_hadjustment自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_scrollable_get_hadjustment（）获取当前用于水平方面的值。GtkAdjustment
语法
参数
tree_view- 一GtkTreeView
返回
对象或 NULLif 当前未使用。[无转移]GtkAdjustment
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_headers_clickable ----

gtk_tree_view_get_headers_clickable
返回所有标题列是否都可单击。
语法
参数
tree_view- 一.GtkTreeView
返回
如果所有标题列都可单击，则为 TRUE，否则为 FALSE
自 2.10 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_headers_visible ----

gtk_tree_view_get_headers_visible
如果tree_view上的标头可见，则返回 TRUE。
语法
参数
tree_view- 一.GtkTreeView
返回
标头是否可见。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_hover_expand ----

gtk_tree_view_get_hover_expand
返回是否为tree_view打开悬停扩展模式。
语法
参数
tree_view- 一GtkTreeView
返回
如果tree_viewis处于悬停扩展模式
，则为 TRUE，因为 2.6
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_hover_selection ----

gtk_tree_view_get_hover_selection
返回是否为tree_view打开悬停选择模式。
语法
参数
tree_view- 一GtkTreeView
返回
如果tree_viewis悬停选择模式
，则为 TRUE，因为 2.6
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_level_indentation ----

gtk_tree_view_get_level_indentation
返回子色阶的额外缩进量（以像素为单位）tree_view。
语法
参数
tree_view- 一个.GtkTreeView
返回
子级别的额外缩进量intree_view。返回值为 0 表示此功能已禁用。
自 2.12 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_model ----

gtk_tree_view_get_model
返回 所基于的模型。如果未设置模型，则返回 NULL。GtkTreeView
语法
参数
tree_view- 一GtkTreeView
返回
A 或 NULL（如果当前未使用任何项）。[无转移]GtkTreeModel
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_n_columns ----

gtk_tree_view_get_n_columns
查询给定tree_view中的列数。
语法
参数
tree_view- 一GtkTreeView
返回
自 3.4
以来tree_view中的列数
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_path_at_pos ----

gtk_tree_view_get_path_at_pos
查找点 （x， y） 相对于bin_window坐标的路径（请参阅gtk_tree_view_get_bin_window（））。也就是说，x 和 y 是相对于事件坐标的。x 和 y 必须从tree_view的事件中产生，仅当事件>窗口 ==gtk_tree_view_get_bin_window（）。它主要是像弹出菜单一样的输出。如果 path 为非 NULL，则将在该点填充 。此路径应withgtk_tree_path_free（） 释放。如果列为非 NULL，则它将在该点用该列填充。cell_x和cell_y返回与单元格背景相关的坐标（即传递togtk_cell_renderer_render（））background_area）。仅当实现iftree_view，此功能才有意义。因此，如果tree_view未实现或没有模型，此函数将始终返回 FALSEif。要转换小部件坐标（例如，您从GtkWidget：：query-tooltip获得的坐标），请seegtk_tree_view_convert_widget_to_bin_window_coords（）。GtkTreePath
语法
参数
tree_view- 一.GtkTreeView
x- 要识别的 x 位置（相对于bin_window）。
y- 要识别的 y 位置（相对于bin_window）。
path- 指向要填充的指针的指针，或 NULL。[输出][允许-无]GtkTreePath
column- 指向要填充的指针的指针，或 NULL。[输出][无转移][允许-无]GtkTreeViewColumn
cell_x- 一个指针，其中 X 坐标相对于单元格可以放置，或 NULL。[输出][允许-无]
cell_y- 一个指针，其中可以放置相对于单元格的 Y 坐标，或 NULL。[输出][允许-无]
返回
如果该坐标处存在行，则为 TRUE。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_reorderable ----

gtk_tree_view_get_reorderable
检索用户是否可以通过拖放对树重新排序。Seegtk_tree_view_set_reorderable（）.
语法
参数
tree_view- 一GtkTreeView
返回
如果树可以重新排序，则为 TRUE。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_row_separator_func ----

gtk_tree_view_get_row_separator_func
返回当前行分隔符函数。
语法
参数
tree_view- 一GtkTreeView
返回
当前行分隔符函数。
自 2.6 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_rubber_banding ----

gtk_tree_view_get_rubber_banding
返回是否为tree_view打开橡皮筋。如果选择模式为 ，橡皮筋将允许用户通过拖动鼠标来选择多行。GTK_SELECTION_MULTIPLE
语法
参数
tree_view- 一GtkTreeView
返回
如果启用了tree_viewis中的橡皮筋，则为 TRUE。
自 2.10 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_rules_hint ----

gtk_tree_view_get_rules_hint
获取由 gtk_tree_view_set_rules_hint（） 设置的设置。
语法
参数
tree_view- 一GtkTreeView
返回
如果规则对此树的用户有用，则为 TRUE
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_search_column ----

gtk_tree_view_get_search_column
获取交互式搜索代码搜索的列。
语法
参数
tree_view- 一GtkTreeView
返回
交互式搜索代码在其中搜索的列。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_search_entry ----

gtk_tree_view_get_search_entry
返回当前用作tree_view交互式搜索的 it。如果正在使用内置条目，将返回 NULL。GtkEntry
语法
参数
tree_view- 一GtkTreeView
返回
当前用作搜索条目的条目。[无转移]
自 2.10 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_search_equal_func ----

gtk_tree_view_get_search_equal_func
返回当前正在使用的比较函数。
语法
参数
tree_view- 一GtkTreeView
返回
当前用于搜索代码的比较函数。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_search_position_func ----

gtk_tree_view_get_search_position_func
返回当前正在使用的定位函数。
语法
参数
tree_view- 一GtkTreeView
返回
当前用于定位搜索对话框的函数。
自 2.10 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_selection ----

gtk_tree_view_get_selection
获取与tree_view关联的。GtkTreeSelection
语法
参数
tree_view- 一.GtkTreeView
返回
对象。[无转移]GtkTreeSelection
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_show_expanders ----

gtk_tree_view_get_show_expanders
返回是否在tree_view中绘制展开器。
语法
参数
tree_view- 一个.GtkTreeView
返回
如果扩展器是用tree_view绘制的，则为 TRUE。
自 2.12 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_tooltip_column ----

gtk_tree_view_get_tooltip_column
Returns the column of tree_view?s model which is being used fordisplaying tooltips on tree_view?s rows.
Syntax
Parameters
tree_view  -  	a GtkTreeView
Returns
the index of the tooltip column that is currently beingused, or -1 if this is disabled.
Since 2.12
See Also
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_tooltip_context ----

gtk_tree_view_get_tooltip_context
This function is supposed to be used in a signal handler for .  The x, y and keyboard_tip valueswhich are received in the signal handler, should be passed to thisfunction without modification.The return value indicates whether there is a tree view row at the givencoordinates (TRUE) or not (FALSE) for mouse tooltips.  For keyboardtooltips the row returned will be the cursor row.  When TRUE, then any ofmodel, path and iter which have been provided will be set to point tothat row and the corresponding model.  x and y will always be convertedto be relative to tree_view?s bin_window if keyboard_tooltip is FALSE.?query-tooltip?GtkTreeView
Syntax
Parameters
tree_view  -  	a GtkTreeView
x  -  	 the x coordinate (relative to widget coordinates). [inout]
y  -  	 the y coordinate (relative to widget coordinates). [inout]
keyboard_tip  -  	whether this is a keyboard tooltip or not
model  -  	 a pointer to receive a or NULL. [out][allow-none][transfer none]GtkTreeModel
path  -  	 a pointer to receive a  or NULL. [out][allow-none]GtkTreePath
iter  -  	 a pointer to receive a  or NULL. [out][allow-none]GtkTreeIter
Returns
whether or not the given tooltip context points to a row.
Since 2.12
See Also
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_vadjustment ----

gtk_tree_view_get_vadjustment
gtk_tree_view_get_vadjustment has been deprecated since version 3.0 and should not be used in newly-written code.Use gtk_scrollable_get_vadjustment()Gets the  currently being used for the vertical aspect.GtkAdjustment
Syntax
Parameters
tree_view  -  	A GtkTreeView
Returns
A  object, or NULLif none is currently being used. [transfer none]GtkAdjustment
See Also
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_visible_range ----

gtk_tree_view_get_visible_range
将start_path和end_path设置为第一个和最后一个可见路径。请注意，中间可能存在不可见的路径。使用后应使用gtk_tree_path_free（） 释放路径。
语法
参数
tree_view- 一GtkTreeView
start_path- 返回区域开始的位置，或空。[输出][允许-无]
end_path- 返回区域末尾的位置，或 NULL。[输出][允许-无]
返回
如果有效路径已放置在start_pathand end_path中，则为 TRUE。
自 2.8 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_get_visible_rect ----

gtk_tree_view_get_visible_rect
以树坐标用缓冲区的当前可见区域填充visible_rect。转换为bin_window坐标 withgtk_tree_view_convert_tree_to_bin_window_coords（）。树坐标从树的第 0 行的 0，0 开始，并覆盖树的整个可滚动区域。
语法
参数
tree_view- 一GtkTreeView
visible_rect- 矩形填充。[输出]
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_insert_column ----

gtk_tree_view_insert_column
这会将列插入到tree_view位置。如果位置为-1，则将列插入到末尾。如果tree_view有？fixed_height？模式启用，则列必须具有其大小调整？要GTK_TREE_VIEW_COLUMN_FIXED的属性集。
语法
参数
tree_view- 一.GtkTreeView
column- 要插入的。GtkTreeViewColumn
position- 插入列的位置。
返回
插入tree_viewafter列数。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_insert_column_with_attributes ----

gtk_tree_view_insert_column_with_attributes
创建一个新的并将其插入到tree_view位置。如果位置为 -1，则新创建的列将插入到末尾。该列使用给定的属性进行初始化。如果tree_viewhas？fixed_height？模式启用，则新列的尺寸属性将设置为GTK_TREE_VIEW_COLUMN_FIXED。GtkTreeViewColumn
语法
参数
tree_view- 一GtkTreeView
position- 插入新列的位置
title- 要将标题设置为的标题
cell- 的GtkCellRenderer
...- 以 NULL 结尾的属性列表
返回
插入tree_viewafter列数。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_insert_column_with_data_func ----

gtk_tree_view_insert_column_with_data_func
方便函数，将新列插入到具有给定单元格渲染器的 中，并设置单元格渲染器属性（通常使用模型中的数据）。参见 alsogtk_tree_view_column_set_cell_data_func（）， gtk_tree_view_column_pack_start（）。如果tree_view有fixed_height？模式启用，那么新列将具有其大小？属性设置为GTK_TREE_VIEW_COLUMN_FIXED。GtkTreeViewGtkTreeCellDataFunc
语法
参数
tree_view- 一GtkTreeView
position- 要插入的位置，-1 用于追加
title- 列标题
cell- 列的单元格渲染器
func- 设置单元格渲染器属性的功能
data- 函数的数据
dnotify- 销毁数据通知程序
返回
插入后树视图中的列数
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_is_blank_at_pos ----

gtk_tree_view_is_blank_at_pos
确定tree_view中的点 （x， y） 是否为空，即 nocell 内容，也不是在该位置绘制扩展器箭头。如果是这样，则可以将位置视为背景。您可能希望对单击背景时执行特殊操作，例如清除当前选择、使用自定义上下文菜单或启动橡皮筋。提供的 x 和 y 坐标必须相对于bin_windowcoordinates。也就是说，x 和 y 必须来自tree_viewwhere事件>window == gtk_tree_view_get_bin_window（） 上的事件。要转换小部件坐标（例如，您从GtkWidget：：query-tooltip获得的坐标），请seegtk_tree_view_convert_widget_to_bin_window_coords（）。路径、列、cell_x和cell_y参数将像gtk_tree_view_get_path_at_pos（） 一样填充。有关更多信息，seegtk_tree_view_get_path_at_pos（）。
语法
参数
tree_view- 一GtkTreeView
x- 要识别的 x 位置（相对于bin_window）
y- 要识别的 y 位置（相对于bin_window）
path- 指向要填充的指针的指针，或 NULL。[输出][允许-无]GtkTreePath
column- 指向要填充的指针的指针，或 NULL。[输出][允许-无]GtkTreeViewColumn
cell_x- 一个指针，其中 X 坐标相对于单元格可以放置，或 NULL。[输出][允许-无]
cell_y- 一个指针，其中可以放置相对于单元格的 Y 坐标，或 NULL。[输出][允许-无]
返回
如果给定坐标处的面积为空，则为 TRUE，否则为 FALSE。
自 3.0 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_is_rubber_banding_active ----

gtk_tree_view_is_rubber_banding_active
返回tree_view当前是否正在执行橡皮筋操作。
语法
参数
tree_view- 一GtkTreeView
返回
如果tree_view中当前正在执行橡皮筋操作，则为 TRUE。
自 2.12 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_map_expanded_rows ----

gtk_tree_view_map_expanded_rows
对所有展开的行调用 func。
语法
参数
tree_view- 一GtkTreeView
func- 要调用的函数。[范围调用]
data- 要传递给函数的用户数据。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_move_column_after ----

gtk_tree_view_move_column_after
将列移动到后面以base_column。如果base_column为 NULL，则将列放在第一个位置。
语法
参数
tree_view- 一GtkTreeView
column- 要移动的。GtkTreeViewColumn
base_column- 要相对于 或 NULL 移动。[允许-无]GtkTreeViewColumn
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_new ----

gtk_tree_view_new
创建新的构件。GtkTreeView
返回
新创建的小部件。GtkTreeView
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_new_with_model ----

gtk_tree_view_new_with_model
创建一个新小组件，并将模型初始化为模型。GtkTreeView
语法
参数
model- 模型。
返回
新创建的小部件。GtkTreeView
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_remove_column ----

gtk_tree_view_remove_column
从tree_view中删除列。
语法
参数
tree_view- 一.GtkTreeView
column- 要删除。GtkTreeViewColumn
返回
删除tree_viewafter中的列数。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_row_activated ----

gtk_tree_view_row_activated
激活由路径和列确定的单元格。
语法
参数
tree_view- 一GtkTreeView
path- 要激活的。GtkTreePath
column- 要激活的。GtkTreeViewColumn
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_row_expanded ----

gtk_tree_view_row_expanded
如果路径所指向的节点在tree_view中展开，则返回 TRUE。
语法
参数
tree_view- 一.GtkTreeView
path- A 用于测试扩展状态。GtkTreePath
返回
如果展开，则为 TRUE。path
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_scroll_to_cell ----

gtk_tree_view_scroll_to_cell
将tree_view的对齐方式移动到列和路径指定的位置。如果列为 NULL，则不会发生水平滚动。同样，如果路径为 NULL，则不会发生垂直滚动。列或路径之一至少需要为非 NULL。row_align确定行的放置位置，col_align确定列的放置位置。预计两者都在0.0和1.0之间。0.0 表示左/上对齐，1.0 表示右/下对齐，0.5 表示居中。如果use_align为 FALSE，则将忽略对齐参数，并且树将执行最少的工作量以将单元格滚动到屏幕上。这意味着单元格将滚动到最接近其当前位置的边缘。如果单元格当前在屏幕上可见，则不执行任何操作。仅当设置了模型，并且 path 是模型上的有效行时，此函数才有效。如果模型在实现tree_view之前发生更改，则将修改居中路径以反映此更改。
语法
参数
tree_view- 一.GtkTreeView
path- 要移动到的行的路径，或 NULL。[允许-无]
column- 水平移动到 或 NULL。[允许-无]GtkTreeViewColumn
use_align- 是使用对齐参数，还是 FALSE。
row_align- 由路径指定的行的垂直对齐方式。
col_align- 列指定的列的水平对齐方式。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_scroll_to_point ----

gtk_tree_view_scroll_to_point
滚动树视图，使可见区域的左上角tree_x，tree_y，其中tree_x和tree_y是指定的树坐标。在调用此函数之前，必须实现tree_view。如果不是，您可能希望使用gtk_tree_view_scroll_to_cell（）。如果tree_x或tree_y为 -1，则不会滚动该方向。
语法
参数
tree_view- 一GtkTreeView
tree_x- 可见区域左上角新像素的 X 坐标，或 -1
tree_y- 可见区域左上角新像素的 Y 坐标，或 -1
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_activate_on_single_click ----

gtk_tree_view_set_activate_on_single_click
使信号在单击时发出，而不是双击。?row-activated?
语法
参数
tree_view- 一GtkTreeView
single- TRUE 在一次单击
时发出行激活自 3.8
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_column_drag_function ----

gtk_tree_view_set_column_drag_function
设置一个用户函数，用于确定在放置列时可以放置列的位置。在开始列拖动时，依次在每个列对上调用此函数，以确定可以发生拖放的位置。传递给func的论据是：tree_view，被dragged，确定掉落点的两个s，anduser_data。如果放置点的任一参数为 NULL，则它们指示边缘。如果 func 设置为 NULL，thentree_view将恢复为允许所有列在所有位置都被删除的默认行为。GtkTreeViewColumnGtkTreeViewColumnGtkTreeViewColumn
语法
参数
tree_view- 一.GtkTreeView
func- 用于确定哪些列可重新排序的函数，或 NULL。[允许-无]
user_data- 要传递给 func 或 NULL 的用户数据。[允许-无]
destroy- 销毁user_data的通告程序，或 NULL。[允许-无]
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_cursor ----

gtk_tree_view_set_cursor
将当前键盘焦点设置为路径，然后选择它。当您希望将用户的注意力集中在特定行上时，这是有用的。Iffocus_column不为 NULL，则焦点将分配给它指定的列。此外，如果指定了focus_column，并且start_editing为 TRUE，则应在指定的单元格中开始编辑。此功能后面通常跟有gtk_widget_grab_focus（tree_view），以便为小部件提供键盘焦点。请注意，只有在实现小部件时才能进行编辑。如果 path 对模型无效，则将取消设置当前游标（如果有），并且函数将返回而不会失败。
语法
参数
tree_view- 一GtkTreeView
path- 一GtkTreePath
focus_column- A 或空值。[允许-无]GtkTreeViewColumn
start_editing- 如果指定的单元格应开始编辑，则为 TRUE。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_cursor_on_cell ----

gtk_tree_view_set_cursor_on_cell
将当前键盘焦点设置为路径，然后选择它。当您希望将用户的注意力集中在特定行上时，这是有用的。Iffocus_column不为 NULL，则焦点将分配给由it指定的列。如果focus_column和focus_cell不为 NULL，并且focus_columncontains 2 个或更多个可编辑或可激活的单元格，则焦点将分配给focus_cell指定的单元格。此外，如果指定focus_column，并且start_editing为 TRUE，则应在指定的单元格中开始编辑。此功能通常遵循bygtk_widget_grab_focus（tree_view），以便为widget提供键盘焦点。请注意，只有在实现小部件时，才能进行编辑。如果 path 对模型无效，则将取消设置当前游标（如果有），并且函数将返回而不会失败。
语法
参数
tree_view- 一GtkTreeView
path- 一GtkTreePath
focus_column- A 或空值。[允许-无]GtkTreeViewColumn
focus_cell- A 或空值。[允许-无]GtkCellRenderer
start_editing- 如果指定的单元格应开始编辑，则为 TRUE。
自 2.2 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_destroy_count_func ----

gtk_tree_view_set_destroy_count_func
gtk_tree_view_set_destroy_count_func自 3.4 版起已弃用，不应在新编写的代码中使用。辅助功能不再需要该功能。几乎永远不要使用此功能。它由 ATK 供私人使用，用于确定在用户折叠一行或删除一行时删除的可见子项的数量。
语法
参数
tree_view- 一GtkTreeView
func- 视图行被销毁时要调用的函数，或 NULL。[允许-无]
data- 要传递给 func 或 NULL 的用户数据。[允许-无]
destroy- 销毁数据的通知程序，或 NULL。[允许-无]
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_drag_dest_row ----

gtk_tree_view_set_drag_dest_row
设置为反馈突出显示的行。如果 path 为 NULL，则删除现有突出显示。
语法
参数
tree_view- 一GtkTreeView
path- 要突出显示的行的路径，或 NULL。[允许-无]
pos- 指定是在行之前、之后还是之后放置
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_enable_search ----

gtk_tree_view_set_enable_search
如果设置了enable_search，则用户可以键入文本以交互方式在树中搜索（这有时称为“键入前查找”）。请注意，即使这是 FALSE，用户仍然可以使用 “start-interactive-search？键绑定。
语法
参数
tree_view- 一GtkTreeView
enable_search- TRUE，如果用户可以交互式搜索
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_enable_tree_lines ----

gtk_tree_view_set_enable_tree_lines
设置是否绘制连接tree_view中扩展器的线。这对列表没有任何可见的影响。
语法
参数
tree_view- 一GtkTreeView
enabled- TRUE 启用树线绘制，否则为 FALSE。
自 2.10 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_expander_column ----

gtk_tree_view_set_expander_column
设置要在其上绘制扩展器箭头的列。它必须tree_view。如果列为 NULL，则展开器箭头始终位于第一个可见列处。如果不希望展开器箭头出现在树中，请将展开器列设置为隐藏列。
语法
参数
tree_view- 一GtkTreeView
column- NULL，或要在其上绘制扩展器箭头的列。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_fixed_height_mode ----

gtk_tree_view_set_fixed_height_mode
启用或禁用tree_view的固定高度模式。固定高度模式通过假定所有行具有相同的高度来加快速度。仅当所有行的高度都相同且所有列的类型均为 GTK_TREE_VIEW_COLUMN_FIXED时，才启用此选项。GtkTreeView
语法
参数
tree_view- 一GtkTreeView
enable- TRUE 启用固定高度模式
，自 2.6 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_grid_lines ----

gtk_tree_view_set_grid_lines
设置要在tree_view绘制的网格线。
语法
参数
tree_view- 一GtkTreeView
grid_lines- 指示哪些网格线可启用的值。
自 2.10 起GtkTreeViewGridLines
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_hadjustment ----

gtk_tree_view_set_hadjustment
gtk_tree_view_set_hadjustment自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_scrollable_set_hadjustment（）设置当前水平宽高比的 。GtkAdjustment
语法
参数
tree_view- 一GtkTreeView
adjustment- 要设置的，或空。[允许-无]GtkAdjustment
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_headers_clickable ----

gtk_tree_view_set_headers_clickable
允许单击列标题按钮。
语法
参数
tree_view- 一.GtkTreeView
setting- 如果列可单击，则为 TRUE。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_headers_visible ----

gtk_tree_view_set_headers_visible
设置标头的可见性状态。
语法
参数
tree_view- 一.GtkTreeView
headers_visible- 如果标题可见，则为 TRUE
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_hover_expand ----

gtk_tree_view_set_hover_expand
启用或禁用tree_view的悬停扩展模式。悬停扩展使行在指针移到行上方时会展开或折叠。
语法
参数
tree_view- 一GtkTreeView
expand- TRUE 启用悬停选择模式
，自 2.6 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_hover_selection ----

gtk_tree_view_set_hover_selection
启用或禁用tree_view的悬停选择模式。悬停选择使所选行跟随指针。目前，这仅适用于GTK_SELECTION_SINGLE和GTK_SELECTION_BROWSE选择模式。
语法
参数
tree_view- 一GtkTreeView
hover- TRUE 启用悬停选择模式
，自 2.6 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_level_indentation ----

gtk_tree_view_set_level_indentation
除默认缩进外，设置子级别在tree_viewin中使用的额外缩进量。该值应以像素为单位指定，值为 0 将禁用此功能，在这种情况下，将仅使用默认缩进。这对列表没有任何可见的影响。
语法
参数
tree_view- 一GtkTreeView
indentation- tree_view中额外缩进的数量（以像素为单位）。
自 2.12 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_model ----

gtk_tree_view_set_model
设置 的模型。如果tree_view已有模型集，则会在设置新模型之前将其删除。如果模型为 NULL，则将取消设置旧模型。GtkTreeView
语法
参数
tree_view- 一.GtkTreeView
model- 模型。[允许-无]
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_reorderable ----

gtk_tree_view_set_reorderable
此函数是一个方便的函数，允许您对支持 和 的模型进行重新排序。两者兼而有之，支持这些。如果可重新排序为 TRUE，则用户可以通过拖放行来对模型进行重新排序。开发人员可以通过连接到模型和信号来收听这些变化。通过将树视图设置为拖动源和目标来实现重新排序。因此，拖放不能在可重新排序的视图中用于任何其他目的。此功能不会让您对订单进行任何程度的控制 - 允许任何重新排序。如果需要更多控制，则可能应手动处理拖放操作。GtkTreeDragSourceIfaceGtkTreeDragDestIfaceGtkTreeStoreGtkListStore?row-inserted??row-deleted?
语法
参数
tree_view- 一.GtkTreeView
reorderable- TRUE，如果树可以重新排序。
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_row_separator_func ----

gtk_tree_view_set_row_separator_func
设置行分隔符函数，该函数用于确定是否应将一行绘制为分隔符。如果行分隔符函数为 NULL，则不绘制分隔符。这是默认值。
语法
参数
tree_view- 一GtkTreeView
func- 一个.[允许-无]GtkTreeViewRowSeparatorFunc
data- 要传递给 func 或 NULL 的用户数据。[允许-无]
destroy- 销毁数据的通知程序，或 NULL。[允许-无]
自 2.6 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_rubber_banding ----

gtk_tree_view_set_rubber_banding
启用或禁用tree_view中的橡皮筋。如果选择模式是 ，橡皮筋将允许用户通过拖动鼠标来选择多行。GTK_SELECTION_MULTIPLE
语法
参数
tree_view- 一GtkTreeView
enable- TRUE 启用橡皮筋，
自 2.10 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_rules_hint ----

gtk_tree_view_set_rules_hint
此函数告诉 GTK+，应用程序的应用程序的用户界面要求用户跨树行读取并相互关联单元格。默认情况下，GTK+ 将使用交替的行颜色渲染树。不要使用它只是因为你喜欢规则树的外观;这是对主题的质疑。即使关闭规则，某些主题也会绘制树行以替代颜色，并且始终保持该外观的用户可以选择这些主题。您应仅将此函数作为主题引擎的语义约束，从函数的角度来看，您的树使交替的颜色有用（因为它通常有很多列）。
语法
参数
tree_view- 一GtkTreeView
setting- 如果树需要跨行读取，则为 TRUE
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_search_column ----

gtk_tree_view_set_search_column
将列设置为交互式搜索代码应在其中搜索当前模型的列。如果设置了搜索列，则用户可以使用“开始交互搜索”键绑定来显示搜索弹出窗口。启用搜索属性控件只需键入文本即可启动交互式搜索。请注意，该列引用当前模型的列。更改模型时，搜索列将重置为 -1。
语法
参数
tree_view- 一GtkTreeView
column- 要在其中搜索的模型列，或 -1 以禁用搜索
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_search_entry ----

gtk_tree_view_set_search_entry
设置交互式搜索代码将用于thistree_view的条目。当您想要始终在我们的界面中以固定位置提供搜索条目时，这很有用。传递 NULL forentry 将使交互式搜索代码再次使用内置弹出窗口。
语法
参数
tree_view- 一GtkTreeView
entry- tree_viewshould使用的交互式搜索代码或 NULL 的条目。[允许-无]
自 2.10 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_search_equal_func ----

gtk_tree_view_set_search_equal_func
设置交互式搜索功能的比较功能;注意，这有点像 strcmp（） 返回 0 作为相等，在匹配项上返回 FALSE。GtkTreeViewSearchEqualFunc
语法
参数
tree_view- 一GtkTreeView
search_equal_func- 搜索期间要使用的比较功能
search_user_data- 要传递给search_equal_func的用户数据，或 NULL。[允许-无]
search_destroy- 销毁search_user_data的通告程序，或 NULL。[允许-无]
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_search_position_func ----

gtk_tree_view_set_search_position_func
设置定位搜索对话框时要使用的函数。
语法
参数
tree_view- 一GtkTreeView
func- 用于定位搜索对话框的函数，或 NULL 使用默认的搜索位置函数。[允许-无]
data- 要传递给 func 或 NULL 的用户数据。[允许-无]
destroy- 销毁数据的通知程序，或 NULL。[允许-无]
自 2.10 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_show_expanders ----

gtk_tree_view_set_show_expanders
设置是绘制和启用扩展器，还是缩进子行intree_view。禁用后，树中将看不到任何展开器，默认情况下也无法展开和折叠行。另请注意，隐藏扩展器将禁用默认缩进。在这种情况下，您可以设置自定义缩进usinggtk_tree_view_set_level_indentation（）。这对列表没有任何可见的影响。
语法
参数
tree_view- 一GtkTreeView
enabled- TRUE 启用扩展器绘制，否则为 FALSE。
自 2.12 起
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_tooltip_cell ----

gtk_tree_view_set_tooltip_cell
将工具提示的提示区域设置为区域路径、列和单元格。例如，如果路径为 NULL 并且设置了列，则 tiparea 将设置为列覆盖的完整区域。请参见alsogtk_tooltip_set_tip_area（）。请注意，如果未指定路径，并且设置了单元格，并且包含扩展器的列的一部分，则工具提示可能不会在正确的位置显示和隐藏。在这种情况下，必须将路径设置为主题游标下的当前节点，此函数才能正常运行。另请参阅 gtk_tree_view_set_tooltip_column（） 以获取更简单的替代方法。
语法
参数
tree_view- 一GtkTreeView
tooltip- 一GtkTooltip
path- a 或 NULL。[允许-无]GtkTreePath
column- a 或 NULL。[允许-无]GtkTreeViewColumn
cell- a 或 NULL。[允许-无]
自 2.12 起GtkCellRenderer
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_tooltip_column ----

gtk_tree_view_set_tooltip_column
如果您只计划在整行上使用简单（纯文本）工具提示，则可以使用此函数自动为您处理这些工具提示。列应设置为包含工具提示文本tree_view模型中的列，或设置为 -1 以禁用此功能。启用后，将设置为 TRUE，andtree_view将连接信号处理程序。请注意，信号处理程序使用gtk_tooltip_set_markup（），因此 &，<等设置文本必须在文本中转义。GtkTreeView?has-tooltip??query-tooltip?
语法
参数
tree_view- 一GtkTreeView
column- 一个整数，这是自 2.1 起tree_view模型
的有效列号
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_tooltip_row ----

gtk_tree_view_set_tooltip_row
将工具提示的提示区域设置为行位于路径所覆盖的区域。另请参阅 gtk_tree_view_set_tooltip_column（） 以获取更简单的替代方法。另请参见gtk_tooltip_set_tip_area（）。
语法
参数
tree_view- 一GtkTreeView
tooltip- 一GtkTooltip
path- a
自2.12起GtkTreePath
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_set_vadjustment ----

gtk_tree_view_set_vadjustment
gtk_tree_view_set_vadjustment自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_scrollable_set_vadjustment（）设置 当前垂直方面。GtkAdjustment
语法
参数
tree_view- 一GtkTreeView
adjustment- 要设置的，或空。[允许-无]GtkAdjustment
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_unset_rows_drag_dest ----

gtk_tree_view_unset_rows_drag_dest
撤消效果 ofgtk_tree_view_enable_model_drag_dest（）。调用此方法设置为 FALSE。?reorderable?
语法
参数
tree_view- 一GtkTreeView
另请参见
GtkTreeView


------------ KeyGTK3gtk_tree_view_unset_rows_drag_source ----

gtk_tree_view_unset_rows_drag_source
撤消效果ofgtk_tree_view_enable_model_drag_source（）。调用此方法设置为 FALSE。?reorderable?
语法
参数
tree_view- 一GtkTreeView
另请参见
GtkTreeView


------------ KeyGTK3gtk_true ----

gtk_true
所有这些函数都执行该函数以返回 TRUE。例如，如果要禁止删除窗口，这可能很有用。当然，您不应该这样做，因为用户希望单击窗口的关闭图标会做出反应...
12345678910111213141516171819202122232425262728293031[/语法] [语法]#include的持久窗口
intmain （ argc， **argv）{ GtkWidget *win， *but; const *text = “关闭你自己。我是认真的！“;gtk_init （&argc， &argv）;win = gtk_window_new （GTK_WINDOW_TOPLEVEL）;g_signal_connect（获胜，“删除事件”，G_CALLBACK（gtk_true），NULL）;g_signal_connect（获胜，“摧毁”，G_CALLBACK（gtk_main_quit），NULL）;但是 = gtk_button_new_with_label （文本）;g_signal_connect_swapped（但是，“点击”，G_CALLBACK（gtk_object_destroy），获胜）;gtk_container_add（GTK_CONTAINER（获胜），但是）;gtk_widget_show_all（获胜）;gtk_main （）;返回 0;}[/语法]intcharchar
返回
真
另请参见
gtk3-General


------------ KeyGTK3gtk_ui_manager_add_ui ----

gtk_ui_manager_add_ui
gtk_ui_manager_add_ui自 3.10 版起已弃用，不应在新编写的代码中使用。将 UI 元素添加到管理器的当前内容中。如果类型GTK_UI_MANAGER_AUTO，GTK+ 将插入菜单项、对象或分隔符（如果此类元素可以插入到由路径确定的位置）。否则，type 必须指示可在由路径确定的位置插入的元素。如果 path 指向菜单项或拓扑结构，则新元素将在此项之前或之后插入，具体取决于顶部。
语法
参数
manager- 一GtkUIManager
merge_id- 合并 UI 的合并 ID，请参见 gtk_ui_manager_new_merge_id（）
path- 路径
name- 添加的 UI 元素的名称
action- 要代理的操作的名称，或 NULL 添加分隔符。[允许-无]
type- 要添加的 UI 元素的类型。
top- 如果为 TRUE，则 UI 元素将添加到其同级元素之前，否则将添加到其同级元素之后。
2.4 起
另请参见
GtkUIManager


------------ KeyGTK3gtk_ui_manager_add_ui_from_file ----

gtk_ui_manager_add_ui_from_file
gtk_ui_manager_add_ui_from_file自版本 3.10 起已弃用，不应在新编写的代码中使用。分析包含 UI 定义的文件，并将其与管理器的当前内容合并。
语法
参数
manager- 一个对象GtkUIManager
filename- 要解析的文件的名称。[类型文件名]
error- 返回错误的位置
返回
合并 UI 的合并 ID。合并 ID 可用于将 UI 与 gtk_ui_manager_remove_ui（） 一起取消合并。如果发生错误，则返回值为 0。
2.4 起
另请参见
GtkUIManager


------------ KeyGTK3gtk_ui_manager_add_ui_from_resource ----

gtk_ui_manager_add_ui_from_resource
gtk_ui_manager_add_ui_from_resource自版本 3.10 起已弃用，不应在新编写的代码中使用。解析包含 UI 定义的资源文件，并将其与管理器的当前内容合并。
语法
参数
manager- 一个对象GtkUIManager
resource_path- 要解析的文件的资源路径
error- 返回错误的位置
返回
合并 UI 的合并 ID。合并 ID 可用于将 UI 与 gtk_ui_manager_remove_ui（） 一起取消合并。如果发生错误，则返回值为 0。
自 3.4 起
另请参见
GtkUIManager


------------ KeyGTK3gtk_ui_manager_add_ui_from_string ----

gtk_ui_manager_add_ui_from_string
gtk_ui_manager_add_ui_from_string自 3.10 版起已弃用，不应在新编写的代码中使用。分析包含 UI 定义的字符串，并将其与管理器的当前内容合并。封闭元素丢失时添加。
语法
参数
manager- 一个对象GtkUIManager
buffer- 要解析的字符串
length- 缓冲区的长度（如果缓冲区是 nul 终止的，则可能为 -1）
error- 返回错误的位置
返回
合并 UI 的合并 ID。合并 ID 可用于将 UI 与 gtk_ui_manager_remove_ui（） 一起取消合并。如果发生错误，则返回值为 0。
2.4 起
另请参见
GtkUIManager


------------ KeyGTK3gtk_ui_manager_ensure_update ----

gtk_ui_manager_ensure_update
gtk_ui_manager_ensure_update自 3.10 版起已弃用，不应在新编写的代码中使用。确保已完成对 UI 的所有挂起更新。这有时可能是必要的，因为在空闲函数中更新 UI。此函数有用的一个典型示例是强制在显示之前将菜单栏和工具栏添加到主窗口中：1234567[/语法] [语法]gtk_container_add（GTK_CONTAINER（窗口），vbox）;g_signal_connect（merge， “add-widget”， G_CALLBACK （add_widget）， vbox）;gtk_ui_manager_add_ui_from_file （merge， “my-menus”）;gtk_ui_manager_add_ui_from_file （merge， “my-toolbars”）;gtk_ui_manager_ensure_update （merge）;gtk_widget_show（窗口）;[/语法]GtkUIManager
语法
参数
manager- a
自2.GtkUIManager
另请参见
GtkUIManager


------------ KeyGTK3gtk_ui_manager_get_accel_group ----

gtk_ui_manager_get_accel_group
gtk_ui_manager_get_accel_group自 3.10 版起已弃用，不应在新编写的代码中使用。返回与管理器关联的 。GtkAccelGroup
语法
参数
manager- 一个对象GtkUIManager
返回
这。[无转移]
2.4 起GtkAccelGroup
另请参见
GtkUIManager


------------ KeyGTK3gtk_ui_manager_get_action ----

gtk_ui_manager_get_action
gtk_ui_manager_get_action自 3.10 版起已弃用，不应在新编写的代码中使用。通过跟踪路径查找操作。有关路径的详细信息，请参阅 gtk_ui_manager_get_widget（）。
语法
参数
manager- 一GtkUIManager
path- 路径
返回
通过路径找到其代理小部件的操作，如果未找到任何小部件，则为 NULL。[无转移]
2.4 起
另请参见
GtkUIManager


------------ KeyGTK3gtk_ui_manager_get_action_groups ----

gtk_ui_manager_get_action_groups
gtk_ui_manager_get_action_groups自 3.10 版起已弃用，不应在新编写的代码中使用。返回与管理器关联的操作组的列表。
语法
参数
manager- 一个对象GtkUIManager
返回
一个行动小组。该列表归 GTK+ 所有，不应修改。[元素型GtkActionGroup][无转移]
2.4 起GList
另请参见
GtkUIManager


------------ KeyGTK3gtk_ui_manager_get_add_tearoffs ----

gtk_ui_manager_get_add_tearoffs
gtk_ui_manager_get_add_tearoffs自 3.4 版起已弃用，不应在新编写的代码中使用。拆解菜单已弃用，不应在新编写的代码中使用。返回由此生成的菜单是否具有撕裂菜单项。GtkUIManager
语法
参数
manager- 一GtkUIManager
返回
是否添加
撕裂菜单项 自 2.4
另请参见
GtkUIManager


------------ KeyGTK3gtk_ui_manager_get_toplevels ----

gtk_ui_manager_get_toplevels
gtk_ui_manager_get_toplevels自 3.10 版起已弃用，不应在新编写的代码中使用。获取所请求类型的所有顶级小部件的列表。
语法
参数
manager- 一GtkUIManager
types- 指定要包含的顶级小部件的类型。允许的类型为 、 和 。GTK_UI_MANAGER_MENUBARGTK_UI_MANAGER_TOOLBARGTK_UI_MANAGER_POPUP
返回
新分配的所请求类型的所有顶级小部件。使用g_slist_free（） 释放返回的列表。[element-type GtkWidget][转移容器]
2.4 起GSList
另请参见
GtkUIManager


------------ KeyGTK3gtk_ui_manager_get_ui ----

gtk_ui_manager_get_ui
gtk_ui_manager_get_ui自 3.10 版起已弃用，不应在新编写的代码中使用。创建合并 UI 的 UI 定义。
语法
参数
manager- 一GtkUIManager
返回
新分配的字符串，包含合并 UI 的 XML 表示形式。
2.4 起
另请参见
GtkUIManager


------------ KeyGTK3gtk_ui_manager_get_widget ----

gtk_ui_manager_get_widget
gtk_ui_manager_get_widget自版本 3.10 起已弃用，不应在新编写的代码中使用。通过跟踪路径查找小部件。该路径由 UI 的 XML 说明中指定的名称组成。由 ？/？分隔。在 XML 中没有名称或操作属性的元素（例如） 可以通过其 XML 元素名称（例如“popup”）进行寻址。根元素 （“/ui”） 可以在路径中省略。请注意，通过遵循以;元素是菜单附加到的菜单项，而不是它管理的菜单。另请注意，由 ui 管理器构造的小部件与 ui 管理器的生命周期无关。如果将此函数返回的小部件添加到某个容器或显式引用它们，则它们将在 ui 管理器的指令中幸存下来。
语法
参数
manager- 一GtkUIManager
path- 路径
返回
通过路径找到的小部件，如果未找到小部件，则为 NULL。[无转移]
2.4 起
另请参见
GtkUIManager


------------ KeyGTK3gtk_ui_manager_insert_action_group ----

gtk_ui_manager_insert_action_group
gtk_ui_manager_insert_action_group 自 3.10 版起已弃用，不应在新编写的代码中使用。将操作组插入到与管理器关联的操作组列表中。早期组中的操作会在后面的组中隐藏具有相同名称的操作。如果 pos 大于管理器中的操作组数，则action_group将插入到内部列表的末尾。
语法
参数
manager- 一个对象GtkUIManager
action_group- 要插入的操作组
pos- 将插入组的位置。
2.4 起
另请参见
GtkUIManager


------------ KeyGTK3gtk_ui_manager_new ----

gtk_ui_manager_new
gtk_ui_manager_new自 3.10 版起已弃用，不应在新编写的代码中使用。创建新的 ui 管理器对象。
返回
一个新的 ui 管理器对象。
2.4 起
另请参见
GtkUIManager


------------ KeyGTK3gtk_ui_manager_new_merge_id ----

gtk_ui_manager_new_merge_id
gtk_ui_manager_new_merge_id自版本 3.10 起已弃用，不应在新编写的代码中使用。返回一个未使用的合并 ID，适合与 gtk_ui_manager_add_ui（） 一起使用。
语法
参数
manager- 一GtkUIManager
返回
未使用的合并 id。
自 2.4 起
另请参见
GtkUIManager


------------ KeyGTK3gtk_ui_manager_remove_action_group ----

gtk_ui_manager_remove_action_group
gtk_ui_manager_remove_action_group自 3.10 版起已弃用，不应在新编写的代码中使用。从与管理器关联的操作组列表中删除操作组。
语法
参数
manager- 一个对象GtkUIManager
action_group- 自 2.4 起要删除的
操作组
另请参见
GtkUIManager


------------ KeyGTK3gtk_ui_manager_remove_ui ----

gtk_ui_manager_remove_ui
gtk_ui_manager_remove_ui自版本 3.10 起已弃用，不应在新编写的代码中使用。取消合并由merge_id标识的经理内容部分。
语法
参数
manager- 一个对象GtkUIManager
merge_id- gtk_ui_manager_add_ui_from_string（）
自 2.4 起返回的合并 ID
另请参见
GtkUIManager


------------ KeyGTK3gtk_ui_manager_set_add_tearoffs ----

gtk_ui_manager_set_add_tearoffs
gtk_ui_manager_set_add_tearoffs自 3.4 版起已弃用，不应在新编写的代码中使用。拆解菜单已弃用，不应在新编写的代码中使用。设置“add_tearoffs？属性，它控制由此生成的菜单是否具有撕裂菜单项。请注意，这只会影响常规菜单。生成的弹出菜单永远不会有撕裂菜单项。GtkUIManager
语法
参数
manager- 一GtkUIManager
add_tearoffs- 自2.4以来是否添加
撕下菜单项
另请参见
GtkUIManager


------------ KeyGTK3gtk_vbox_new ----

gtk_vbox_new
gtk_vbox_new自版本 3.2 起已弃用，不应在新编写的代码中使用。您可以将 gtk_box_new（） 与 GTK_ORIENTATION_VERTICAL 一起使用，这是一个快速简便的更改。但建议是切换到 ，因为 最终会消失。请参 阅从其他容器迁移到 GtkGrid。创建新的 容器。GtkGridGtkBoxGtkVBox
语法
参数
homogeneous- 如果所有子项都获得相等的空间分配，则为 true。
spacing- 默认情况下要放置在子级之间的像素数。
返回
一个新的GtkVBox
另请参见
GtkVBox


------------ KeyGTK3gtk_vbutton_box_new ----

gtk_vbutton_box_new
gtk_vbutton_box_new自版本 3.2 起已弃用，不应在新编写的代码中使用。将 gtk_button_box_new（） 与 GTK_ORIENTATION_VERTICAL 改为创建新的垂直按钮框。
返回
一个新的按钮框GtkWidget
另请参见
GtkVButtonBox


------------ KeyGTK3gtk_viewport_get_bin_window ----

gtk_viewport_get_bin_window
获取 的 bin 窗口。GtkViewport
语法
参数
viewport- 一GtkViewport
返回
一个。[无转移]
自 2.20 起GdkWindow
另请参见
GtkViewport


------------ KeyGTK3gtk_viewport_get_hadjustment ----

gtk_viewport_get_hadjustment
gtk_viewport_get_hadjustment自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_scrollable_get_hadjustment（）返回视区的水平调整。
语法
参数
viewport- 一个.GtkViewport
返回
视口的水平调整。[无转移]
另请参见
GtkViewport


------------ KeyGTK3gtk_viewport_get_shadow_type ----

gtk_viewport_get_shadow_type
鑾峰彇 鐨勯槾褰辩被鍨嬨€係eegtk_viewport_set_shadow_type锛堬級.GtkViewport
璇硶
鍙傛暟
viewport- 涓€GtkViewport
杩斿洖
闃村奖绫诲瀷
鍙﹁鍙傝
GtkViewport


------------ KeyGTK3gtk_viewport_get_vadjustment ----

gtk_viewport_get_vadjustment
gtk_viewport_get_vadjustment自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_scrollable_get_vadjustment（）返回视区的垂直调整。
语法
参数
viewport- 一个.GtkViewport
返回
视区的垂直调整。[无转移]
另请参见
GtkViewport


------------ KeyGTK3gtk_viewport_get_view_window ----

gtk_viewport_get_view_window
获取 的视图窗口。GtkViewport
语法
参数
viewport- 一GtkViewport
返回
一个。[无转移]
自 2.2 起GdkWindow
另请参见
GtkViewport


------------ KeyGTK3gtk_viewport_new ----

gtk_viewport_new
使用给定的调整创建新的调整，如果没有给定的调整，则使用默认调整。GtkViewport
语法
参数
hadjustment- 水平调整。[允许-无]
vadjustment- 垂直调整。[允许-无]
返回
一个新的GtkViewport
另请参见
GtkViewport


------------ KeyGTK3gtk_viewport_set_hadjustment ----

gtk_viewport_set_hadjustment
gtk_viewport_set_hadjustment自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_scrollable_set_hadjustment（）设置视口的水平调整。
语法
参数
viewport- 一个.GtkViewport
adjustment- 一个.[允许-无]GtkAdjustment
另请参见
GtkViewport


------------ KeyGTK3gtk_viewport_set_shadow_type ----

gtk_viewport_set_shadow_type
设置视区的阴影类型。
语法
参数
viewport- 一个.GtkViewport
type- 新的阴影类型。
另请参见
GtkViewport


------------ KeyGTK3gtk_viewport_set_vadjustment ----

gtk_viewport_set_vadjustment
gtk_viewport_set_vadjustment自 3.0 版起已弃用，不应在新编写的代码中使用。使用 gtk_scrollable_set_vadjustment（）设置视口的垂直调整。
语法
参数
viewport- 一个.GtkViewport
adjustment- 一个.[允许-无]GtkAdjustment
另请参见
GtkViewport


------------ KeyGTK3gtk_volume_button_new ----

gtk_volume_button_new
创建一个范围介于 0.0 和 1.0 之间的 、步进为 0.02 的 。可以使用 中的函数获取和修改体积值。GtkVolumeButtonGtkScaleButton
返回
自 2.1 以来的全新
GtkVolumeButton
另请参见
GtkVolumeButton


------------ KeyGTK3gtk_vpaned_new ----

gtk_vpaned_new
gtk_vpaned_new自 3.2 版起已弃用，不应在新编写的代码中使用。将 gtk_paned_new（） 与 GTK_ORIENTATION_VERTICAL 一起使用，而不是创建新的GtkVPaned
返回
新的GtkVPaned[/code
See Also
GtkVPaned


------------ KeyGTK3gtk_vscale_new ----

gtk_vscale_new
gtk_vscale_new自 3.2 版起已被弃用，不应在新编写的代码中使用。将 gtk_scale_new（） 与 GTK_ORIENTATION_VERTICAL 一起使用可改为创建新的 .GtkVScale
语法
参数
adjustment- 设置刻度范围。GtkAdjustment
返回
一个新的.GtkVScale
另请参见
GtkVScale


------------ KeyGTK3gtk_vscale_new_with_range ----

gtk_vscale_new_with_range
gtk_vscale_new_with_range自 3.2 版起已弃用，不应在新编写的代码中使用。将 gtk_scale_new_with_range（） 与 GTK_ORIENTATION_VERTICAL改为创建一个新的垂直比例小部件，该小部件允许用户使用增量步骤输入介于最小值和最大值（包括最小值和最大值）之间的数字。步骤必须为非零;它是使用箭头键调整刻度值时滑块移动的距离。请注意，如果阶跃为 10 的幂，则推导精度的方式效果最佳。如果生成的精度不适合您需要的精度，请使用 gtk_scale_set_digits（） 进行更正。
语法
参数
min- 最小值
max- 最大值
step- 步长增量（刻度大小）与键盘快捷键一起使用
返回
一个新的GtkVScale[/code
See Also
GtkVScale


------------ KeyGTK3gtk_vscrollbar_new ----

gtk_vscrollbar_new
gtk_vscrollbar_new自版本 3.2 起已弃用，不应在新编写的代码中使用。将 gtk_scrollbar_new（） 与 GTK_ORIENTATION_VERTICAL 改为创建新的垂直滚动条。
语法
参数
adjustment- 要使用的，或 NULL 创建新的调整。[允许-无]GtkAdjustment
返回
新的GtkVScrollbar[/code
See Also
GtkVScrollbar


------------ KeyGTK3gtk_vseparator_new ----

gtk_vseparator_new
gtk_vseparator_new自版本 3.2 起已弃用，不应在新编写的代码中使用。将 gtk_separator_new（） 与 GTK_ORIENTATION_VERTICAL 一起使用可创建一个新的 .GtkVSeparator
返回
一个新的GtkVSeparator
另请参见
GtkVSeparator


------------ KeyGTK3gtk_widget_path_append_for_widget ----

gtk_widget_path_append_for_widget
将数据从小组件追加到由路径表示的小组件层次结构。此函数是将信息从小道添加到给定路径的快捷方式。这包括从微件设置名称或添加样式类。
语法
参数
path- 小部件路径
widget- 要附加到小部件路径的小部件
返回
自 3.2 以来插入数据的位置
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_append_type ----

gtk_widget_path_append_type
将小部件类型追加到由 path 表示的小部件层次结构中。
语法
参数
path- 一GtkWidgetPath
type- 要追加的小部件类型
返回
自 3.0 以来插入元素的位置
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_append_with_siblings ----

gtk_widget_path_append_with_siblings
将小部件类型及其所有同级追加到由路径表示的小部件层次结构中。使用此函数代替ofgtk_widget_path_append_type（） 将允许 CSS 主题在选择器中使用对象匹配项并应用 ：nth-child（） 伪类。反过来，它需要在小部件实现中更加小心，因为当兄弟姐妹的路径更改时，需要确保在所有参与的小部件上调用gtk_widget_reset_style（）。
语法
参数
path- 要追加到的小部件路径
siblings- 描述兄弟姐妹列表的小部件路径。此路径本身不包含任何兄弟姐妹，以后不得对其进行修改。
sibling_index- 索引到同级用于放置添加的元素的位置。
返回
插入元素的位置。
自 3.2 起
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_copy ----

gtk_widget_path_copy
返回路径的副本
语法
参数
path- 一GtkWidgetPath
返回
路径的副本。[转移完整]
自 3.0 起
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_free ----

gtk_widget_path_free
递减路径上的引用计数，如果引用计数达到 0，则释放结构。
语法
参数
path- a
自3.0起GtkWidgetPath
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_get_object_type ----

gtk_widget_path_get_object_type
返回最顶层的对象类型，即此路径表示的对象类型。
语法
参数
path- 一GtkWidget
返回
自 3.0 起的对象类型
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_has_parent ----

gtk_widget_path_has_parent
如果 path 中表示的小部件的任何父级类型为类型或其任何子类型，则返回 TRUE。
语法
参数
path- 一GtkWidgetPath
type- 小部件类型签入父母
返回
如果任何父级的类型类型
为 3.0，则为 TRUE
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_is_type ----

gtk_widget_path_is_type
如果此路径表示的小部件类型是类型或其子类型，则返回 TRUE。
语法
参数
path- 一GtkWidgetPath
type- 小部件类型匹配
返回
如果由 path 表示的小部件类型为
3.0，则为 TRUE
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_add_class ----

gtk_widget_path_iter_add_class
将类名添加到路径中定义的层次结构中位置 pos 处的小部件。Seegtk_style_context_add_class（）.
语法
参数
path- 一GtkWidget
pos- 位置修改，-1 为路径头
name- 自 3.0 以来的类名
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_add_region ----

gtk_widget_path_iter_add_region
将区域名称添加到路径中定义的层次结构中位置 pos 处的小组件中。Seegtk_style_context_add_region（）.区域名称只能包含小写字母和?-?,始终以小写字母开头。
语法
参数
path- 一GtkWidgetPath
pos- 位置修改，-1 为路径头
name- 区域名称
flags- 自3.0以来影响该地区的
标志
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_clear_classes ----

gtk_widget_path_iter_clear_classes
从小部件中删除路径中定义的层次结构中位置 pos 处的所有类。
语法
参数
path- 一GtkWidget
pos- 位置修改，-1 表示路径头
自 3.0 起
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_clear_regions ----

gtk_widget_path_iter_clear_regions
从小组件中路径中定义的层次结构中的位置 pos 处删除所有区域。
语法
参数
path- 一GtkWidgetPath
pos- 位置修改，-1 表示路径头
自 3.0 起
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_get_name ----

gtk_widget_path_iter_get_name
返回与在由路径定义的小部件层次结构中的位置 pos 找到的小部件相对应的名称
语法
参数
path- 一GtkWidgetPath
pos- 获取小部件名称的位置，-1 表示路径头
返回
小组件名称，如果未设置任何小部件名称，则为 NULL。
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_get_object_type ----

gtk_widget_path_iter_get_object_type
返回在 path 中定义的 widgethierarchy 中处于位置 pos 的对象。GType
语法
参数
path- 一GtkWidgetPath
pos- 获取对象类型的位置，路径头为 -1
返回
自 3.0 以来的小部件类型
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_get_siblings ----

gtk_widget_path_iter_get_siblings
返回 pos 处元素的同级元素列表。如果元素未添加同级元素，则返回 NULL。
语法
参数
path- 一GtkWidgetPath
pos- 位置以获得兄弟姐妹，-1用于路径头
返回
NULL 或 pos 处元素的同级列表。
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_get_sibling_index ----

gtk_widget_path_iter_get_sibling_index
将索引返回到由 gtk_widget_path_iter_get_siblings（） 返回的 pos 处的元素的同级列表中。如果该函数由于 pos 上的元素没有同级函数而返回 NULL，则此函数将返回 0。
语法
参数
path- 一GtkWidgetPath
pos- 位置以获取同级索引，-1 用于路径头
返回
0 或指向 pos 处元素的同级列表的索引。
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_has_class ----

gtk_widget_path_iter_has_class
如果位置 pos 处的小部件具有 namedefined 类，则返回 TRUE，否则返回 FALSE。
语法
参数
path- 一GtkWidgetPath
pos- 要查询的位置，-1 表示路径头
name- 类名
返回
如果自 3.0 以来在 pos
中为小部件定义了类名，则为 TRUE
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_has_name ----

gtk_widget_path_iter_has_name
如果位置 pos 处的小部件具有名称名称，则返回 TRUE，否则返回 FALSE。
语法
参数
path- 一GtkWidgetPath
pos- 要查询的位置，-1 表示路径头
name- 小部件名称
返回
TRUE 如果 posha 上的小部件自 3.0 起使用此名称
，则为 TRUE
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_has_qclass ----

gtk_widget_path_iter_has_qclass
请参见 gtk_widget_path_iter_has_class（）。这是一个使用GQuarks运行的版本。
语法
参数
path- 一GtkWidgetPath
pos- 要查询的位置，-1 表示路径头
qname- 类名作为GQuark
返回
如果 posha 上的小部件与定义的类匹配，则为 TRUE。
自 3.0 起
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_has_qname ----

gtk_widget_path_iter_has_qname
请参见gtk_widget_path_iter_has_name（）。这是一个在 上运行的版本。GQuarks
语法
参数
path- 一GtkWidgetPath
pos- 要查询的位置，-1 表示路径头
qname- 小部件名称作为GQuark
返回
TRUE 如果 posha 上的小部件自 3.0 起使用此名称
，则为 TRUE
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_has_qregion ----

gtk_widget_path_iter_has_qregion
请参见gtk_widget_path_iter_has_region（）。这是一个使用GQuarks运行的版本。
语法
参数
path- 一GtkWidgetPath
pos- 要查询的位置，-1 表示路径头
qname- 区域名称作为GQuark
flags- 返回区域标志的位置。[输出]
返回
如果 posha 处的小部件与定义的区域相同，则为 TRUE。
自 3.0 起
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_has_region ----

gtk_widget_path_iter_has_region
如果位置 pos 处的小部件具有 namedefined 类，则返回 TRUE，否则返回 FALSE。
语法
参数
path- 一GtkWidgetPath
pos- 要查询的位置，-1 表示路径头
name- 区域名称
flags- 返回区域标志的位置。[输出]
返回
如果自 3.0 以来在 pos
中为小部件定义了类名，则为 TRUE
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_list_classes ----

gtk_widget_path_iter_list_classes
返回一个列表，其中包含在 path 中定义的层次结构中为 widgetat 位置 pos 定义的所有类名。
语法
参数
path- 一GtkWidgetPath
pos- 要查询的位置，-1 表示路径头
返回
类的列表，这是一个字符串列表，内容归GTK +所有，但你应该使用g_slist_free（）来释放列表本身。[转移容器][元素型 utf8]
自 3.0 起GSList
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_list_regions ----

gtk_widget_path_iter_list_regions
返回一个列表，其中包含为路径中定义的层次结构中的 widgetat 位置 pos 定义的所有区域名称。
语法
参数
path- 一GtkWidgetPath
pos- 要查询的位置，-1 表示路径头
返回
区域列表，这是一个字符串列表，内容归GTK+所有，但你应该使用g_slist_free（）来释放列表本身。[转移容器][元素型 utf8]
自 3.0 起GSList
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_remove_class ----

gtk_widget_path_iter_remove_class
从路径中定义的层次结构中位置 pos 的小组件中删除类名。
语法
参数
path- 一GtkWidgetPath
pos- 位置修改，-1 为路径头
name- 自 3.0 起的类名
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_remove_region ----

gtk_widget_path_iter_remove_region
从路径中定义的层次结构中位置 pos 处的小组件中删除区域名称。
语法
参数
path- 一GtkWidgetPath
pos- 位置修改，-1 为路径头
name- 自 3.0 起的区域名称
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_set_name ----

gtk_widget_path_iter_set_name
设置在由路径定义的小部件层次结构中的位置找到的小部件的构件名称。
语法
参数
path- 一GtkWidgetPath
pos- 位置修改，-1 为路径头
name- 小部件名称
自3.0起
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_iter_set_object_type ----

gtk_widget_path_iter_set_object_type
设置由路径定义的构件层次结构中给定位置的对象类型。
语法
参数
path- 一GtkWidgetPath
pos- 位置修改，-1 为路径头
type- 自 3.0 起要设置
的对象类型
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_length ----

gtk_widget_path_length
返回表示的widget与其最顶层容器之间的数字。GtkWidgetGTypes
语法
参数
path- 一GtkWidgetPath
返回
路径
中自 3.0 起的元素数
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_new ----

gtk_widget_path_new
返回空窗口小部件路径。
返回
新创建的空 .[转移完整]
自 3.0 起GtkWidgetPath
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_prepend_type ----

gtk_widget_path_prepend_type
将小部件类型附加到由 path 表示的小部件层次结构中。
语法
参数
path- 一GtkWidgetPath
type- 自3.0以来要预置
的小部件类型
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_ref ----

gtk_widget_path_ref
递增路径上的引用计数。
语法
参数
path- 一GtkWidgetPath
返回
pathitself.
自 3.2 起
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_to_string ----

gtk_widget_path_to_string
将小部件路径转储为字符串表示形式。它尝试尽可能紧密地匹配 CSS 样式（请注意，可能存在无法在 CSS 中表示的路径）。此代码的主要用途是用于调试目的，以便您在 gdb 会话中cang_print（） 路径或转储它。
语法
参数
path- 路径
返回
描述路径的新字符串。
自 3.
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk_widget_path_unref ----

gtk_widget_path_unref
递减路径上的引用计数，如果引用计数达到 0，则释放结构。
语法
参数
path- a
自3.2起GtkWidgetPath
另请参见
gtk3-GtkWidgetPath


------------ KeyGTK3gtk__snooper_install ----

gtk_key_snooper_install
gtk_key_snooper_install?()
gtk_key_snooper_install自版本 3.4 起已弃用，不应在新编写的代码中使用。不应进行密钥窥探。事件应由小部件处理。安装一个密钥窥探器函数，该函数将在正常传递所有密钥事件之前调用该函数。
语法
参数
snooper- 一GtkKeySnoopFunc
func_data- 数据传递给窥探者
返回
此键窥探器的唯一 id，用于 withgtk_key_snooper_remove（）。
另请参见
gtk3-General


------------ KeyGTK3gtk__snooper_remove ----

gtk_key_snooper_remove
gtk_key_snooper_remove?()
gtk_key_snooper_remove自 3.4 版起已弃用，不应在新编写的代码中使用。不应进行密钥窥探。事件应由小部件处理。删除具有给定 ID 的键窥探器函数。
语法
参数
snooper_handler_id- 标识要删除的密钥窥探器
另请参见
gtk3-General

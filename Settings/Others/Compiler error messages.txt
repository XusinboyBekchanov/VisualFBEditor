...' ellipsis upper bound given for array field (this is not supported) = ...' ellipsis upper bound given for array field (this is not supported)
...' ellipsis upper bound given for dynamic array (this is not supported) = ...' ellipsis upper bound given for dynamic array (this is not supported)
~' parsed as equality operator in function argument, not assignment to BYREF function result = ~' parsed as equality operator in function argument, not assignment to BYREF function result
A destructor should not have any parameters = A destructor should not have any parameters
ABSTRACT used here, but not the in the DECLARE statement = ABSTRACT used here, but not the in the DECLARE statement
ABSTRACT used on non-member procedure = =B6
Accessing base UDT's private default constructor = Accessing base UDT's private default constructor
Accessing base UDT's private destructor = Accessing base UDT's private destructor
ALIAS name here does not match ALIAS given in DECLARE prototype = ALIAS name here does not match ALIAS given in DECLARE prototype
ALIAS name string is empty = ALIAS name string is empty
Ambiguous call to overloaded function = Ambiguous call to overloaded function
Ambiguous symbol access, explicit scope resolution required = Ambiguous symbol access, explicit scope resolution required
An ENUM, TYPE or UNION cannot be empty = An ENUM, TYPE or UNION cannot be empty
Argument count mismatch = Argument count mismatch
Array access, index expected = Array access, index expected
Array already dimensioned = Array already dimensioned
Array boundaries do not match the original EXTERN declaration = Array boundaries do not match the original EXTERN declaration
Array not dimensioned = Array not dimensioned
Array of references - not supported yet = Array of references - not supported yet
Array out-of-bounds = Array out-of-bounds
Array too big = Array too big
Array too large for stack, consider making it var-len or SHARED = Array too large for stack, consider making it var-len or SHARED
Arrays are not allowed = Arrays are not allowed
-asm att used for -gen gas, but -gen gas only supports -asm intel = -asm att used for -gen gas, but -gen gas only supports -asm intel
-asm att|intel option given, but not supported for this target (only x86 or x86_64) = -asm att|intel option given, but not supported for this target (only x86 or x86_64)
At least one parameter must be a user-defined type = At least one parameter must be a user-defined type
at parameter = at parameter
Auto variables are only valid in -lang = Auto variables are only valid in -lang
BASE() initializer not at top of constructor = BASE() initializer not at top of constructor
Both parameters can't be of the same type = Both parameters can't be of the same type
Branch crossing local array, var-len string or object definition = Branch crossing local array, var-len string or object definition
Branch crossing local variable definition = Branch crossing local variable definition
Branching to other functions or to module-level = Branching to other functions or to module-level
Branching to scope block containing local variables = Branching to scope block containing local variables
Byref function result not set = Byref function result not set
Calling convention does not match DECLARE prototype = Calling convention does not match DECLARE prototype
Cannot export symbol without -export option = Cannot export symbol without -export option
Cannot modify a constant = Cannot modify a constant
Cannot pop stack, underflow = Cannot pop stack, underflow
Can't use ... as lower bound = Can't use ... as lower bound
Can't use ANY as initializer in array with ellipsis bound = Can't use ANY as initializer in array with ellipsis bound
CASE without SELECT = CASE without SELECT
Cast to non-pointer = Cast to non-pointer
Casting derived UDT pointer from incompatible pointer type = Casting derived UDT pointer from incompatible pointer type
Casting derived UDT pointer from unrelated UDT pointer type = Casting derived UDT pointer from unrelated UDT pointer type
Casting derived UDT pointer to incompatible pointer type = Casting derived UDT pointer to incompatible pointer type
Casting derived UDT pointer to unrelated UDT pointer type = Casting derived UDT pointer to unrelated UDT pointer type
CLASS, TYPE or UNION has no constructor = CLASS, TYPE or UNION has no constructor
CLASS, TYPE or UNION not derived = CLASS, TYPE or UNION not derived
Cloning operators (LET, Copy constructors) can't take a byval arg of the parent's type = Cloning operators (LET, Copy constructors) can't take a byval arg of the parent's type
Command line option overrides directive = Command line option overrides directive
COMMON variables cannot be object instances of CLASS/TYPE's with cons/destructors = COMMON variables cannot be object instances of CLASS/TYPE's with cons/destructors
Const UDT cannot invoke non-const method = Const UDT cannot invoke non-const method
CONST used here, but not the in the DECLARE statement = CONST used here, but not the in the DECLARE statement
CONST used on constructor (not needed) = CONST used on constructor (not needed)
CONST used on destructor (not needed) = CONST used on destructor (not needed)
CONST used on non-member procedure = CONST used on non-member procedure
Constant declared in anonymous UDT = Constant declared in anonymous UDT
Constructor declared ABSTRACT = Constructor declared ABSTRACT
Constructor declared VIRTUAL = Constructor declared VIRTUAL
Constructor has no public access = Constructor has no public access
CONSTRUCTOR() chain call not at top of constructor = CONSTRUCTOR() chain call not at top of constructor
Declaration outside the original namespace = Declaration outside the original namespace
Declaration outside the original namespace or class = Declaration outside the original namespace or class
Default types or suffixes are only valid in -lang = Default types or suffixes are only valid in -lang
Default types or suffixes are only valid in -lang deprecated or fblite or qb = Default types or suffixes are only valid in -lang deprecated or fblite or qb
Deleting ANY pointers is undefined = Deleting ANY pointers is undefined
Destructor declared ABSTRACT = Destructor declared ABSTRACT
Destructor has no public access = Destructor has no public access
Directive ignored after first pass = Directive ignored after first pass
Division by zero = Division by zero
Duplicated definition = Duplicated definition
Dynamic arrays cannot be part of UNION's or nested TYPE's = Dynamic arrays cannot be part of UNION's or nested TYPE's
Dynamic arrays can't be const = Dynamic arrays can't be const
Element not defined = Element not defined
Elements must be empty for strings and arrays = Elements must be empty for strings and arrays
ELSE without IF = ELSE without IF
ELSEIF without IF = ELSEIF without IF
END EXTERN without EXTERN = END EXTERN without EXTERN
END IF without IF = END IF without IF
END NAMESPACE without NAMESPACE = END NAMESPACE without NAMESPACE
END SCOPE without SCOPE = END SCOPE without SCOPE
END SELECT without SELECT = END SELECT without SELECT
END SUB or FUNCTION without SUB or FUNCTION = END SUB or FUNCTION without SUB or FUNCTION
END WITH without WITH = END WITH without WITH
ENUM's declared inside EXTERN .. END EXTERN blocks don't open new scopes = ENUM's declared inside EXTERN .. END EXTERN blocks don't open new scopes
ERASE on UDT with non-CDECL constructor = ERASE on UDT with non-CDECL constructor
ERASE on UDT with non-CDECL destructor = ERASE on UDT with non-CDECL destructor
ERASE on UDT with non-parameterless default constructor = ERASE on UDT with non-parameterless default constructor
Executable not found = Executable not found
Expected '-' = Expected '-'
Expected '#ENDIF' = Expected '#ENDIF'
Expected '(' = Expected '('
Expected ')' = Expected ')'
Expected ',' = Expected ','
Expected ':' = Expected ':'
Expected ';' = Expected ';'
Expected ']' = Expected ']'
Expected '{' = Expected '{'
Expected '}' = Expected '}'
Expected '~' = Expected '~'
Expected '~' = Expected '~'
Expected '>' = Expected '>'
Expected a CLASS, TYPE or UNION symbol type = Expected a CLASS, TYPE or UNION symbol type
Expected 'ANY' = Expected 'ANY'
Expected array = Expected array
Expected 'AS' = Expected 'AS'
Expected 'CASE' = Expected 'CASE'
Expected class or UDT identifier = Expected class or UDT identifier
Expected constant = Expected constant
Expected 'CONSTRUCTOR', 'DESTRUCTOR', 'DO', 'FOR', 'FUNCTION', 'OPERATOR', 'PROPERTY', 'SELECT', 'SUB' or 'WHILE' = Expected 'CONSTRUCTOR', 'DESTRUCTOR', 'DO', 'FOR', 'FUNCTION', 'OPERATOR', 'PROPERTY', 'SELECT', 'SUB' or 'WHILE'
Expected 'DO' = Expected 'DO'
Expected 'DO', 'FOR' or 'WHILE' = Expected 'DO', 'FOR' or 'WHILE'
Expected 'END ASM' = Expected 'END ASM'
Expected 'END CONSTRUCTOR' = Expected 'END CONSTRUCTOR'
Expected 'END DESTRUCTOR' = Expected 'END DESTRUCTOR'
Expected 'END ENUM' = Expected 'END ENUM'
Expected 'END EXTERN' = Expected 'END EXTERN'
Expected 'END FUNCTION' = Expected 'END FUNCTION'
Expected 'END IF' = Expected 'END IF'
Expected 'END NAMESPACE' = Expected 'END NAMESPACE'
Expected 'END OPERATOR' = Expected 'END OPERATOR'
Expected 'END PROPERTY' = Expected 'END PROPERTY'
Expected 'END SCOPE' = Expected 'END SCOPE'
Expected 'END SELECT' = Expected 'END SELECT'
Expected 'END SUB' = Expected 'END SUB'
Expected 'END SUB' or 'END FUNCTION' = Expected 'END SUB' or 'END FUNCTION'
Expected 'END TYPE' or 'END UNION' = Expected 'END TYPE' or 'END UNION'
Expected 'END WITH' = Expected 'END WITH'
Expected 'ENDMACRO' = Expected 'ENDMACRO'
Expected End-of-File = Expected End-of-File
Expected End-of-Line = Expected End-of-Line
Expected explicit result type = Expected explicit result type
Expected expression = Expected expression
Expected 'FOR' = Expected 'FOR'
Expected identifier = Expected identifier
Expected initializer = Expected initializer
Expected 'LOOP' = Expected 'LOOP'
Expected 'NEXT' = Expected 'NEXT'
Expected operator = Expected operator
Expected period ('.') = Expected period ('.')
Expected pointer = Expected pointer
Expected 'PROPERTY' = Expected 'PROPERTY'
Expected 'PTR' or 'POINTER' = Expected 'PTR' or 'POINTER'
Expected relational operator ( ~, >, <, <>, <~, >~ ) = Expected relational operator ( ~, >, <, <>, <~, >~ )
Expected scalar counter = Expected scalar counter
Expected 'SELECT' = Expected 'SELECT'
Expected sub = Expected sub
Expected 'THEN' = Expected 'THEN'
Expected 'TO' = Expected 'TO'
Expected var-len array = Expected var-len array
Expected 'WEND' = Expected 'WEND'
Expected 'WHILE' = Expected 'WHILE'
EXTERN or COMMON dynamic arrays cannot have initial bounds = EXTERN or COMMON dynamic arrays cannot have initial bounds
EXTERN or COMMON variables cannot be initialized = EXTERN or COMMON variables cannot be initialized
Fields cannot be named as keywords in TYPE's that contain member functions or in CLASS'es = Fields cannot be named as keywords in TYPE's that contain member functions or in CLASS'es
Fields with constructors cannot be part of UNION's or nested TYPE's = Fields with constructors cannot be part of UNION's or nested TYPE's
Fields with destructors cannot be part of UNION's or nested TYPE's = Fields with destructors cannot be part of UNION's or nested TYPE's
File access error = File access error
Fixed-len strings cannot be returned from functions = Fixed-len strings cannot be returned from functions
Fixed-length string combined with BYREF (not supported) = Fixed-length string combined with BYREF (not supported)
FOR/NEXT variable name mismatch = FOR/NEXT variable name mismatch
Forward references not allowed = Forward references not allowed
FreeBasic Compiler = FreeBasic Compiler
FUNCTION ~' or EXIT FUNCTION mixed with RETURN (using both styles together is unsupported when returning objects with constructors) = FUNCTION ~' or EXIT FUNCTION mixed with RETURN (using both styles together is unsupported when returning objects with constructors)
Function not declared = Function not declared
Function result assignment outside of the function = Function result assignment outside of the function
Function result TYPE has no default constructor = Function result TYPE has no default constructor
Function result was not explicitly set = Function result was not explicitly set
GOSUB disabled, use 'OPTION GOSUB' to enable = GOSUB disabled, use 'OPTION GOSUB' to enable
Identifier cannot include periods = Identifier cannot include periods
Identifier's name too big, truncated = Identifier's name too big, truncated
'IF' statement found directly after multi-line 'ELSE' = 'IF' statement found directly after multi-line 'ELSE'
Illegal 'END' = Illegal 'END'
Illegal inside a compound statement or scoped block = Illegal inside a compound statement or scoped block
Illegal inside a NAMESPACE block = Illegal inside a NAMESPACE block
Illegal inside functions = Illegal inside functions
Illegal member access = Illegal member access
Illegal non-static member access = Illegal non-static member access
Illegal outside a CLASS, TYPE or UNION method = Illegal outside a CLASS, TYPE or UNION method
Illegal outside a compound statement = Illegal outside a compound statement
Illegal outside a CONSTRUCTOR block = Illegal outside a CONSTRUCTOR block
Illegal outside a CONSTRUCTOR, DESTRUCTOR, FUNCTION, OPERATOR, PROPERTY or SUB block = Illegal outside a CONSTRUCTOR, DESTRUCTOR, FUNCTION, OPERATOR, PROPERTY or SUB block
Illegal outside a DESTRUCTOR block = Illegal outside a DESTRUCTOR block
Illegal outside a DO compound statement = Illegal outside a DO compound statement
Illegal outside a FOR compound statement = Illegal outside a FOR compound statement
Illegal outside a FUNCTION block = Illegal outside a FUNCTION block
Illegal outside a PROPERTY block = Illegal outside a PROPERTY block
Illegal outside a SELECT compound statement = Illegal outside a SELECT compound statement
Illegal outside a SUB block = Illegal outside a SUB block
Illegal outside a WHILE compound statement = Illegal outside a WHILE compound statement
Illegal outside an OPERATOR block = Illegal outside an OPERATOR block
Illegal specification = Illegal specification
Illegal without the -ex option = Illegal without the -ex option
Implemented body for an ABSTRACT method = Implemented body for an ABSTRACT method
Implicit conversion = Implicit conversion
Implicit destructor override would have different calling convention = Implicit destructor override would have different calling convention
Implicit LET operator override would have different calling convention = Implicit LET operator override would have different calling convention
Implicit variable allocation = Implicit variable allocation
Implicit variables are only valid in -lang = Implicit variables are only valid in -lang
Incompatible reference initializer = Incompatible reference initializer
Incomplete type = Incomplete type
Internal! = Internal!
Invalid array index = Invalid array index
Invalid array subscript = Invalid array subscript
Invalid assignment/conversion = Invalid assignment/conversion
Invalid bitfield = Invalid bitfield
Invalid CASE range, start value is greater than the end value = Invalid CASE range, start value is greater than the end value
Invalid character = Invalid character
Invalid command-line option = Invalid command-line option
Invalid data types = Invalid data types
Invalid initializer = Invalid initializer
Invalid -lang = Invalid -lang
Invalid parameter type, it must be the same as the parent TYPE/CLASS = Invalid parameter type, it must be the same as the parent TYPE/CLASS
Invalid priority attribute = Invalid priority attribute
Invalid result type for this operator = Invalid result type for this operator
Invalid size = Invalid size
LIB name string is empty = LIB name string is empty
Literal number too big, truncated = Literal number too big, truncated
Literal string too big, truncated = Literal string too big, truncated
Local symbols can't be referenced = Local symbols can't be referenced
LOOP without DO = LOOP without DO
Macro numbering = Macro numbering
Macro text too long = Macro text too long
Member cannot be static = Member cannot be static
Member isn't static = Member isn't static
Method declared ABSTRACT, but UDT does not extend OBJECT = Method declared ABSTRACT, but UDT does not extend OBJECT
Method declared in anonymous UDT = Method declared in anonymous UDT
Method declared VIRTUAL, but UDT does not extend OBJECT = Method declared VIRTUAL, but UDT does not extend OBJECT
Mismatching parameter initializer = Mismatching parameter initializer
Missing BASE() initializer (base UDT without default constructor requires manual initialization) = Missing BASE() initializer (base UDT without default constructor requires manual initialization)
Missing closing quote in literal string = Missing closing quote in literal string
Missing command-line option for = Missing command-line option for
Missing default constructor implementation (base UDT without default constructor requires manual initialization) = Missing default constructor implementation (base UDT without default constructor requires manual initialization)
Missing overloaded operator:  = Missing overloaded operator:
Missing RETURN to copy-construct function result = Missing RETURN to copy-construct function result
Missing UDT.constructor(byref as const UDT) implementation (base UDT without default constructor requires manual initialization) = Missing UDT.constructor(byref as const UDT) implementation (base UDT without default constructor requires manual initialization)
Missing UDT.constructor(byref as UDT) implementation (base UDT without default constructor requires manual initialization) = Missing UDT.constructor(byref as UDT) implementation (base UDT without default constructor requires manual initialization)
Mixing signed/unsigned operands = Mixing signed/unsigned operands
Must have initializer with array with ellipsis bound = Must have initializer with array with ellipsis bound
NEXT without FOR = NEXT without FOR
No end of multi-line comment, expected ""'/"" = No end of multi-line comment, expected ""'/""
No explicit BYREF or BYVAL = No explicit BYREF or BYVAL
No matching overloaded function = No matching overloaded function
No outer DO compound statement found = No outer DO compound statement found
No outer FOR compound statement found = No outer FOR compound statement found
No outer SELECT compound statement found = No outer SELECT compound statement found
No outer WHILE compound statement found = No outer WHILE compound statement found
Non-virtual call to ABSTRACT method = Non-virtual call to ABSTRACT method
Not extending a TYPE/UNION (a TYPE/UNION can only extend other TYPEs/UNIONs) = Not extending a TYPE/UNION (a TYPE/UNION can only extend other TYPEs/UNIONs)
Not overriding any virtual method = Not overriding any virtual method
-o option without corresponding input file = -o option without corresponding input file
Object files or libraries with mixed language (-lang) options = Object files or libraries with mixed language (-lang) options
Object files or libraries with mixed multithreading (-mt) options = Object files or libraries with mixed multithreading (-mt) options
Objects with default [con|de]structors or methods are only allowed in the module level = Objects with default [con|de]structors or methods are only allowed in the module level
Only data members supported = Only data members supported
Only static members can be accessed from static functions = Only static members can be accessed from static functions
Only valid in -lang = Only valid in -lang
Operator cannot be a member function = Operator cannot be a member function
Operator must be a member function = Operator must be a member function
Overflow in constant conversion = Overflow in constant conversion
Override has different calling convention than overridden method = Override has different calling convention than overridden method
Override has different parameters than overridden method = Override has different parameters than overridden method
Override has different return type than overridden method = Override has different return type than overridden method
Override is a CONST member, but the overridden method is not = Override is a CONST member, but the overridden method is not
Override is not a CONST member like the overridden method = Override is not a CONST member like the overridden method
Parameter and result can't be of the same type = Parameter and result can't be of the same type
Parameter cannot be optional = Parameter cannot be optional
Parameter must be a pointer = Parameter must be a pointer
Parameter must be an integer = Parameter must be an integer
Parameter or result must be a user-defined type = Parameter or result must be a user-defined type
Parameter type mismatch = Parameter type mismatch
Parent is not a class or UDT = Parent is not a class or UDT
Passing different pointer types = Passing different pointer types
Passing Pointer = Passing Pointer
Passing pointer to scalar = Passing pointer to scalar
Passing scalar as pointer = Passing scalar as pointer
Permission denied = Permission denied
-pic used when making executable (only works when making a shared library) = -pic used when making executable (only works when making a shared library)
-pic used, but not supported by target system (only works for non-x86 Unixes) = -pic used, but not supported by target system (only works for non-x86 Unixes)
Possible escape sequence found in = Possible escape sequence found in
Procedure macro numbering = Procedure macro numbering
PROPERTY GET should have no parameter, or just one if indexed = PROPERTY GET should have no parameter, or just one if indexed
PROPERTY has no GET method/accessor = PROPERTY has no GET method/accessor
PROPERTY has no indexed GET method/accessor = PROPERTY has no indexed GET method/accessor
PROPERTY has no indexed SET method/accessor = PROPERTY has no indexed SET method/accessor
PROPERTY has no SET method/accessor = PROPERTY has no SET method/accessor
PROPERTY SET should have one parameter, or just two if indexed = PROPERTY SET should have one parameter, or just two if indexed
Range too large = Range too large
Recursion level too deep = Recursion level too deep
Recursive DEFINE not allowed = Recursive DEFINE not allowed
Recursive TYPE or UNION not allowed = Recursive TYPE or UNION not allowed
Redefinition of intrinsic = Redefinition of intrinsic
REDIM on UDT with non-CDECL constructor = REDIM on UDT with non-CDECL constructor
REDIM on UDT with non-CDECL destructor = REDIM on UDT with non-CDECL destructor
REDIM on UDT with non-parameterless default constructor = REDIM on UDT with non-parameterless default constructor
Reference not initialized = Reference not initialized
Resource file given for target system that does not support them = Resource file given for target system that does not support them
Return method mismatch = Return method mismatch
RETURN mixed with 'FUNCTION ~' or EXIT FUNCTION (using both styles together is unsupported when returning objects with constructors) = RETURN mixed with 'FUNCTION ~' or EXIT FUNCTION (using both styles together is unsupported when returning objects with constructors)
Return type here does not match DECLARE prototype = Return type here does not match DECLARE prototype
Selected -gen gas ASM backend for non-x86 CPU = Selected -gen gas ASM backend for non-x86 CPU
Selected non-x86 CPU when compiling for DOS = Selected non-x86 CPU when compiling for DOS
Selected option requires an SSE FPU mode = Selected option requires an SSE FPU mode
Shift value greater than or equal to number of bits in data type = Shift value greater than or equal to number of bits in data type
Statement in between SELECT and first CASE = Statement in between SELECT and first CASE
Static member variable in nested UDT (only allowed in toplevel UDTs) = Static member variable in nested UDT (only allowed in toplevel UDTs)
STATIC used here, but not the in the DECLARE statement = STATIC used here, but not the in the DECLARE statement
STATIC used on non-member procedure = STATIC used on non-member procedure
Static variable declared in anonymous UDT = Static variable declared in anonymous UDT
'SUB' or 'FUNCTION' without 'END SUB' or 'END FUNCTION' = 'SUB' or 'FUNCTION' without 'END SUB' or 'END FUNCTION'
Suffixes are only valid in -lang = Suffixes are only valid in -lang
Suspicious logic operation, mixed boolean and non-boolean operands = Suspicious logic operation, mixed boolean and non-boolean operands
Suspicious pointer assignment = Suspicious pointer assignment
Symbol not a CLASS, ENUM, TYPE or UNION type = Symbol not a CLASS, ENUM, TYPE or UNION type
Symbol type has no Run-Time Type Info (RTTI) = Symbol type has no Run-Time Type Info (RTTI)
Symbols defined inside namespaces cannot be removed = Symbols defined inside namespaces cannot be removed
Syntax error = Syntax error
The ANY initializer has no effect on UDT's with default constructors = The ANY initializer has no effect on UDT's with default constructors
The default constructor has no public access = The default constructor has no public access
the first parameter in a procedure may not be vararg = the first parameter in a procedure may not be vararg
The length of the parameters list is too large, consider passing UDT's BYREF = The length of the parameters list is too large, consider passing UDT's BYREF
The NEW operator cannot be used with fixed-length strings = The NEW operator cannot be used with fixed-length strings
The NEW[] operator does not allow explicit calls to constructors = The NEW[] operator does not allow explicit calls to constructors
The NEW[] operator only supports the { ANY } initialization = The NEW[] operator only supports the { ANY } initialization
The PRIVATE and PUBLIC attributes are not allowed with REDIM, COMMON or EXTERN = The PRIVATE and PUBLIC attributes are not allowed with REDIM, COMMON or EXTERN
The type length is too large, consider passing BYREF = The type length is too large, consider passing BYREF
This operator cannot be STATIC = This operator cannot be STATIC
This operator is implicitly STATIC and cannot be CONST = This operator is implicitly STATIC and cannot be CONST
This operator is implicitly STATIC and cannot be VIRTUAL or ABSTRACT = This operator is implicitly STATIC and cannot be VIRTUAL or ABSTRACT
This symbol cannot be undefined = This symbol cannot be undefined
Too many array dimensions = Too many array dimensions
Too many elements = Too many elements
Too many errors = Too many errors
Too many expressions = Too many expressions
Too many labels = Too many labels
Too many levels of pointer indirection = Too many levels of pointer indirection
Too many parameters = Too many parameters
Type mismatch = Type mismatch
Type mismatch in byref function result assignment = Type mismatch in byref function result assignment
TYPE or CLASS has no default constructor = TYPE or CLASS has no default constructor
Types have no hierarchical relation = Types have no hierarchical relation
UDT function results cannot be passed by reference = UDT function results cannot be passed by reference
UDT has unimplemented abstract methods = UDT has unimplemented abstract methods
UDT with pointer, var-len string, or var-len array fields = UDT with pointer, var-len string, or var-len array fields
UDT's containing var-len string fields cannot be initialized = UDT's containing var-len string fields cannot be initialized
UDT's with methods must have unique names = UDT's with methods must have unique names
Undefined label = Undefined label
Undefined symbol = Undefined symbol
UNIONs are not allowed = UNIONs are not allowed
Unsupported function = Unsupported function
Unsupported statement in -gen gcc mode = Unsupported statement in -gen gcc mode
User Defined Type too big = User Defined Type too big
Vararg parameters are not allowed in overloaded functions = Vararg parameters are not allowed in overloaded functions
vararg parameters are only allowed in CDECL procedures = vararg parameters are only allowed in CDECL procedures
Variable following NEXT is meaningless = Variable following NEXT is meaningless
Variable not declared = Variable not declared
Variable required = Variable required
Variable too large for stack, consider making it SHARED = Variable too large for stack, consider making it SHARED
Var-len arrays cannot be initialized = Var-len arrays cannot be initialized
Var-len strings cannot be initialized = Var-len strings cannot be initialized
Var-len strings cannot be part of UNION's or nested TYPE's = Var-len strings cannot be part of UNION's or nested TYPE's
VIRTUAL used here, but not the in the DECLARE statement = VIRTUAL used here, but not the in the DECLARE statement
VIRTUAL used on non-member procedure = VIRTUAL used on non-member procedure
WEND without WHILE = WEND without WHILE
Wrong number of dimensions = Wrong number of dimensions